/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:11:12 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t53727;
  double t65296;
  double t32397;
  double t65434;
  double t65437;
  double t65443;
  double t65444;
  double t65435;
  double t66888;
  double t67107;
  double t67130;
  double t67131;
  double t67132;
  double t67133;
  double t67134;
  double t67135;
  double t67138;
  double t67218;
  double t67140;
  double t67143;
  double t67181;
  double t67210;
  double t67212;
  double t67381;
  double t67489;
  double t67496;
  double t67504;
  double t67506;
  double t67654;
  double t67631;
  double t67634;
  double t67635;
  double t67636;
  double t67637;
  double t67922;
  double t67925;
  double t67926;
  double t67640;
  double t67641;
  double t67649;
  double t67943;
  double t67659;
  double t67660;
  double t67966;
  double t67969;
  double t67946;
  double t67949;
  double t67951;
  double t67952;
  double t67955;
  double t66982;
  double t67932;
  double t67942;
  double t64720;
  double t65436;
  double t65442;
  double t65447;
  double t65764;
  double t65886;
  double t66426;
  double t66891;
  double t66892;
  double t66906;
  double t66952;
  double t67139;
  double t67211;
  double t67620;
  double t67978;
  double t67985;
  double t67989;
  double t67991;
  double t67998;
  double t68000;
  double t66962;
  double t66984;
  double t66986;
  double t66992;
  double t66994;
  double t66996;
  double t66998;
  double t67000;
  double t67019;
  double t67036;
  double t67651;
  double t67652;
  double t67703;
  double t67835;
  double t67918;
  double t68103;
  double t68109;
  double t67927;
  double t68084;
  double t68086;
  double t68076;
  double t68077;
  double t68078;
  double t68229;
  double t68234;
  double t68235;
  double t68236;
  double t68168;
  double t68169;
  double t68170;
  double t68205;
  double t68208;
  double t68209;
  double t68210;
  double t68211;
  double t68225;
  double t68175;
  double t68176;
  double t68182;
  double t68278;
  double t68279;
  double t68282;
  double t68272;
  double t68275;
  double t68276;
  double t67970;
  double t67971;
  double t67972;
  double t67973;
  double t67974;
  double t68025;
  double t68029;
  double t68083;
  double t68087;
  double t68088;
  double t68091;
  double t68092;
  double t68099;
  double t68390;
  double t68393;
  double t68410;
  double t68518;
  double t68520;
  double t68522;
  double t68171;
  double t68183;
  double t68186;
  double t68187;
  double t68190;
  double t68197;
  double t68768;
  double t68783;
  double t68769;
  double t68770;
  double t68776;
  double t68784;
  double t68785;
  double t68789;
  double t68834;
  double t68847;
  double t68848;
  double t68854;
  double t68855;
  double t68858;
  double t68874;
  double t68888;
  double t68894;
  double t68923;
  double t68928;
  double t68929;
  double t68962;
  double t68975;
  double t68976;
  double t68997;
  double t68999;
  double t69002;
  double t69039;
  double t69040;
  double t69041;
  double t68536;
  double t69048;
  double t69049;
  double t69050;
  double t69044;
  double t69045;
  double t69046;
  double t68588;
  double t69064;
  double t69065;
  double t69066;
  double t68373;
  double t68488;
  double t68497;
  double t69083;
  double t69085;
  double t69086;
  double t69078;
  double t69080;
  double t69081;
  double t68240;
  double t68260;
  double t68277;
  double t68285;
  double t68327;
  double t68332;
  double t69047;
  double t69051;
  double t69052;
  double t68687;
  double t68713;
  double t68722;
  double t69056;
  double t69206;
  double t69207;
  double t69208;
  double t69224;
  double t69225;
  double t69228;
  double t69209;
  double t69218;
  double t69219;
  double t69223;
  double t69229;
  double t69235;
  double t69131;
  double t69167;
  double t69168;
  double t69271;
  double t69272;
  double t69283;
  double t69285;
  double t69294;
  double t69298;
  double t69069;
  double t69327;
  double t69331;
  double t69332;
  double t69082;
  double t69095;
  double t69096;
  double t69102;
  double t69122;
  double t69124;
  double t69106;
  double t69113;
  double t69114;
  double t69022;
  double t69023;
  double t69024;
  double t69027;
  double t69028;
  double t69029;
  double t67621;
  double t67626;
  double t67930;
  double t67931;
  double t67944;
  double t67945;
  double t67956;
  double t67957;
  double t67958;
  double t68003;
  double t68020;
  double t68027;
  double t68041;
  double t68073;
  double t68075;
  double t69013;
  double t69016;
  double t69020;
  double t68117;
  double t68122;
  double t68133;
  double t68140;
  double t68146;
  double t68149;
  double t68154;
  double t68160;
  double t68161;
  double t68165;
  double t68166;
  double t68167;
  double t69031;
  double t69032;
  double t69033;
  double t68227;
  double t68244;
  double t68245;
  double t68261;
  double t68262;
  double t68270;
  double t68271;
  double t68283;
  double t68292;
  double t68309;
  double t68315;
  double t68343;
  double t68346;
  double t68349;
  double t68357;
  double t69526;
  double t69529;
  double t69531;
  double t68374;
  double t68386;
  double t68388;
  double t68420;
  double t68432;
  double t68472;
  double t68486;
  double t68493;
  double t68504;
  double t68506;
  double t68508;
  double t68527;
  double t68534;
  double t68535;
  double t68538;
  double t68545;
  double t68548;
  double t68576;
  double t68579;
  double t68598;
  double t68604;
  double t68643;
  double t68654;
  double t68683;
  double t68688;
  double t68693;
  double t68698;
  double t68699;
  double t68708;
  double t68711;
  double t68731;
  double t68735;
  double t68738;
  double t68744;
  double t69021;
  double t69025;
  double t69030;
  double t69034;
  double t69035;
  double t68913;
  double t68934;
  double t68949;
  double t68778;
  double t68794;
  double t68802;
  double t68979;
  double t69003;
  double t69004;
  double t68850;
  double t68866;
  double t68867;
  double t69053;
  double t69054;
  double t69060;
  double t69061;
  double t69062;
  double t69067;
  double t69068;
  double t69071;
  double t69072;
  double t69073;
  double t69077;
  double t69087;
  double t69088;
  double t69092;
  double t69093;
  double t69094;
  double t69097;
  double t69098;
  double t69099;
  double t69101;
  double t69103;
  double t69104;
  double t69105;
  double t69107;
  double t69109;
  double t69110;
  double t69112;
  double t69115;
  double t69117;
  double t69120;
  double t69121;
  double t69125;
  double t69126;
  double t69127;
  double t69129;
  double t69133;
  double t69147;
  double t69153;
  double t69156;
  double t69162;
  double t69178;
  double t69180;
  double t69187;
  double t69236;
  double t69238;
  double t69246;
  double t69253;
  double t69256;
  double t69258;
  double t69261;
  double t69284;
  double t69300;
  double t69303;
  double t69304;
  double t69305;
  double t69307;
  double t69311;
  double t69313;
  double t69316;
  double t69320;
  double t69324;
  double t69333;
  double t69409;
  double t69424;
  double t69448;
  double t69459;
  double t69461;
  double t69463;
  double t69465;
  double t69467;
  double t69468;
  double t69469;
  double t69470;
  double t69471;
  double t69472;
  double t69473;
  double t69474;
  double t69476;
  double t69480;
  double t69482;
  double t69484;
  double t69486;
  double t69487;
  double t69488;
  double t69490;
  double t69491;
  double t69498;
  double t69500;
  double t69501;
  double t69503;
  double t69504;
  double t69505;
  double t69506;
  double t69507;
  double t69508;
  double t69509;
  double t69510;
  double t69511;
  double t69512;
  double t69516;
  double t69750;
  double t69751;
  double t69752;
  double t68815;
  double t68871;
  double t68958;
  double t69006;
  double t69008;
  double t69589;
  double t69604;
  double t69611;
  double t69613;
  double t69621;
  double t70018;
  double t70021;
  double t70024;
  double t69259;
  double t69325;
  double t69462;
  double t69481;
  double t69517;
  double t69518;
  double t69861;
  double t69877;
  double t69889;
  double t69891;
  double t69893;
  double t69897;
  double t69687;
  double t69699;
  double t69704;
  double t69718;
  double t69735;
  double t69738;
  double t70124;
  double t70125;
  double t70126;
  double t70035;
  double t70042;
  double t70043;
  double t70049;
  double t70077;
  double t70082;
  double t70085;
  double t69063;
  double t69076;
  double t69100;
  double t69128;
  double t69188;
  double t69193;
  double t69807;
  double t69808;
  double t69816;
  double t69828;
  double t69831;
  double t69835;
  double t69653;
  double t69654;
  double t69655;
  double t69668;
  double t69673;
  double t69675;
  double t70111;
  double t70112;
  double t70113;
  double t70117;
  double t70118;
  double t70120;
  double t70121;
  double t70122;
  double t70123;
  double t70127;
  double t70129;
  double t68362;
  double t68511;
  double t68553;
  double t68682;
  double t68747;
  double t68748;
  double t69772;
  double t69775;
  double t69776;
  double t69782;
  double t69785;
  double t69786;
  double t69544;
  double t69546;
  double t69555;
  double t69562;
  double t69563;
  double t69564;
  double t70191;
  double t70192;
  double t70193;
  double t70194;
  double t70195;
  double t70196;
  double t70201;
  double t70202;
  double t70203;
  double t70204;
  double t70206;
  double t70065;
  double t70068;
  double t70069;
  double t70070;
  double t70071;
  double t70072;
  double t70073;
  double t70074;
  double t70076;
  double t70090;
  double t70096;
  double t70238;
  double t70239;
  double t70240;
  double t70241;
  double t70242;
  double t70243;
  double t70244;
  double t70245;
  double t70246;
  double t70247;
  double t70248;
  double t67977;
  double t68101;
  double t68135;
  double t68153;
  double t68201;
  double t68202;
  double t69758;
  double t69759;
  double t69760;
  double t69762;
  double t69763;
  double t69765;
  double t69537;
  double t69538;
  double t69539;
  double t69540;
  double t69541;
  double t69542;
  double t70160;
  double t70164;
  double t70168;
  double t70169;
  double t70170;
  double t70178;
  double t70181;
  double t70185;
  double t70187;
  double t70188;
  double t70189;
  double t69980;
  double t69981;
  double t69990;
  double t69997;
  double t70001;
  double t70004;
  double t70014;
  double t70027;
  double t70031;
  double t70054;
  double t70058;
  double t70273;
  double t70275;
  double t70276;
  double t70277;
  double t70228;
  double t70229;
  double t70231;
  double t70232;
  double t66961;
  double t67037;
  double t67038;
  double t69743;
  double t69745;
  double t69746;
  double t69522;
  double t69523;
  double t69524;
  double t70147;
  double t70148;
  double t70149;
  double t70151;
  double t69935;
  double t69943;
  double t69966;
  double t69967;
  t53727 = Cos(var1[16]);
  t65296 = Sin(var1[14]);
  t32397 = Cos(var1[14]);
  t65434 = Sin(var1[16]);
  t65437 = Sin(var1[4]);
  t65443 = Cos(var1[4]);
  t65444 = Cos(var1[5]);
  t65435 = 1.000000000009*t65296*t65434;
  t66888 = Sin(var1[5]);
  t67107 = -1.*t53727;
  t67130 = 1. + t67107;
  t67131 = -1.000000000009*t67130;
  t67132 = 1. + t67131;
  t67133 = 0.2*t67132;
  t67134 = 0.2000000000048*t67130;
  t67135 = 0.1000003000009*t65434;
  t67138 = t67133 + t67134 + t67135;
  t67218 = 9.e-12*t67130;
  t67140 = 1.2e-12*var1[16];
  t67143 = 0.1000003000009*t67130;
  t67181 = -3.e-12*t65434;
  t67210 = t67140 + t67143 + t67181;
  t67212 = -4.e-7*var1[16];
  t67381 = -1. + t67218;
  t67489 = 0.1*t67381;
  t67496 = 3.000000000027e-7*t67130;
  t67504 = -9.e-18*t65434;
  t67506 = t67212 + t67489 + t67496 + t67504;
  t67654 = t67218 + t67107;
  t67631 = -9.e-12*t67130;
  t67634 = 1. + t67631;
  t67635 = -3.e-6*t67634;
  t67636 = 3.e-6*t67130;
  t67637 = t67635 + t67636;
  t67922 = 0.1000003000009*t53727;
  t67925 = 3.000000000027e-12*t65434;
  t67926 = t67922 + t67925;
  t67640 = -9.e-18*t53727;
  t67641 = 3.000009000027e-7*t65434;
  t67649 = -4.e-7 + t67640 + t67641;
  t67943 = -1.000000000009*t67138*t65434;
  t67659 = -3.e-12*t53727;
  t67660 = 1.2e-12 + t67659 + t67135;
  t67966 = 3.e-6*t53727;
  t67969 = t67636 + t67966;
  t67946 = t53727*t67210;
  t67949 = 3.e-6*t53727*t67506;
  t67951 = t67132*t67926;
  t67952 = 3.e-6*t67649*t65434;
  t67955 = t67660*t65434;
  t66982 = 1.000000000009*t32397*t65434;
  t67932 = -1.*t67654*t67210;
  t67942 = -1.*t67637*t67506;
  t64720 = t32397*t53727;
  t65436 = t64720 + t65435;
  t65442 = t65436*t65437;
  t65447 = t53727*t65296;
  t65764 = -1.000000000009*t32397*t65434;
  t65886 = t65447 + t65764;
  t66426 = t65444*t65886;
  t66891 = -3.e-6*t53727*t66888;
  t66892 = t66426 + t66891;
  t66906 = t65443*t66892;
  t66952 = t65442 + t66906;
  t67139 = t67132*t67138;
  t67211 = t67210*t65434;
  t67620 = 3.e-6*t67506*t65434;
  t67978 = 4.e-7*var1[16];
  t67985 = 0.1*t67634;
  t67989 = -3.000000000027e-7*t67130;
  t67991 = t67969*t67210;
  t67998 = 9.e-18*t65434;
  t68000 = t67978 + t67985 + t67989 + t67991 + t67998;
  t66962 = -1.000000000009*t53727*t65296;
  t66984 = t66962 + t66982;
  t66986 = t66984*t65437;
  t66992 = 1.000000000009*t32397*t53727;
  t66994 = t66992 + t65435;
  t66996 = t65444*t66994;
  t66998 = -3.000000000027e-6*t65434*t66888;
  t67000 = t66996 + t66998;
  t67019 = t65443*t67000;
  t67036 = t66986 + t67019;
  t67651 = -1.*t67637*t67649;
  t67652 = -1.000000000009*t53727*t67138;
  t67703 = -1.*t67654*t67660;
  t67835 = -1.000000000009*t67210*t65434;
  t67918 = -3.000000000027e-6*t67506*t65434;
  t68103 = -1.*t67969*t67210;
  t68109 = t67212 + t67489 + t67496 + t68103 + t67504;
  t67927 = -1.000000000009*t67926*t65434;
  t68084 = t67654*t65296;
  t68086 = t68084 + t66982;
  t68076 = t32397*t67654;
  t68077 = -1.000000000009*t65296*t65434;
  t68078 = t68076 + t68077;
  t68229 = 0.2*t65296;
  t68234 = t32397*t67210;
  t68235 = -1.*t65296*t67138;
  t68236 = t68229 + t68234 + t68235;
  t68168 = -1.*t67132*t65296;
  t68169 = t32397*t65434;
  t68170 = t68168 + t68169;
  t68205 = -1.*t32397;
  t68208 = 1. + t68205;
  t68209 = 0.2*t68208;
  t68210 = t65296*t67210;
  t68211 = t32397*t67138;
  t68225 = t68209 + t68210 + t68211;
  t68175 = t32397*t67132;
  t68176 = t65296*t65434;
  t68182 = t68175 + t68176;
  t68278 = t32397*t67926;
  t68279 = t65296*t67660;
  t68282 = t68278 + t68279;
  t68272 = -1.*t65296*t67926;
  t68275 = t32397*t67660;
  t68276 = t68272 + t68275;
  t67970 = t32397*t67969*t65437;
  t67971 = t67969*t65444*t65296;
  t67972 = t67971 + t66888;
  t67973 = t65443*t67972;
  t67974 = t67970 + t67973;
  t68025 = 9.e-18*t53727;
  t68029 = -3.000009000027e-7*t65434;
  t68083 = t68078*t65437;
  t68087 = t65444*t68086;
  t68088 = -1.*t67637*t66888;
  t68091 = t68087 + t68088;
  t68092 = t65443*t68091;
  t68099 = t68083 + t68092;
  t68390 = t67969*t65296*t68225;
  t68393 = t32397*t67969*t68236;
  t68410 = t67978 + t67985 + t67989 + t68390 + t68393 + t67998;
  t68518 = -1.*t67969*t65296*t68225;
  t68520 = -1.*t32397*t67969*t68236;
  t68522 = t67212 + t67489 + t67496 + t68518 + t68520 + t67504;
  t68171 = t68170*t65437;
  t68183 = t65444*t68182;
  t68186 = -3.e-6*t65434*t66888;
  t68187 = t68183 + t68186;
  t68190 = t65443*t68187;
  t68197 = t68171 + t68190;
  t68768 = Sin(var1[3]);
  t68783 = Cos(var1[3]);
  t68769 = t67637*t65444;
  t68770 = t68086*t66888;
  t68776 = t68769 + t68770;
  t68784 = t65443*t68078;
  t68785 = -1.*t65437*t68091;
  t68789 = t68784 + t68785;
  t68834 = 3.e-6*t53727*t65444;
  t68847 = t65886*t66888;
  t68848 = t68834 + t68847;
  t68854 = t65443*t65436;
  t68855 = -1.*t65437*t66892;
  t68858 = t68854 + t68855;
  t68874 = 3.000000000027e-6*t65444*t65434;
  t68888 = t66994*t66888;
  t68894 = t68874 + t68888;
  t68923 = t65443*t66984;
  t68928 = -1.*t65437*t67000;
  t68929 = t68923 + t68928;
  t68962 = 3.e-6*t65444*t65434;
  t68975 = t68182*t66888;
  t68976 = t68962 + t68975;
  t68997 = t65443*t68170;
  t68999 = -1.*t65437*t68187;
  t69002 = t68997 + t68999;
  t69039 = -1.*t65444;
  t69040 = t67969*t65296*t66888;
  t69041 = t69039 + t69040;
  t68536 = t68236*t68078;
  t69048 = t65444*t68225;
  t69049 = -1.*t67506*t66888;
  t69050 = t69048 + t69049;
  t69044 = t65444*t67506;
  t69045 = t68225*t66888;
  t69046 = t69044 + t69045;
  t68588 = -1.*t68236*t68170;
  t69064 = t69041*t69046;
  t69065 = t67972*t69050;
  t69066 = t68393 + t69064 + t69065;
  t68373 = t32397*t67969*t68276;
  t68488 = -1.*t68276*t68170;
  t68497 = -1.*t68236*t65436;
  t69083 = t65444*t68282;
  t69085 = -1.*t67649*t66888;
  t69086 = t69083 + t69085;
  t69078 = t65444*t67649;
  t69080 = t68282*t66888;
  t69081 = t69078 + t69080;
  t68240 = -1.*t68236*t68078;
  t68260 = t68236*t68170;
  t68277 = t68276*t68170;
  t68285 = t68236*t65436;
  t68327 = -1.*t68236*t66984;
  t68332 = -1.*t68276*t68078;
  t69047 = -1.*t69041*t69046;
  t69051 = -1.*t67972*t69050;
  t69052 = t68520 + t69047 + t69051;
  t68687 = -1.*t32397*t67969*t68276;
  t68713 = t68236*t66984;
  t68722 = t68276*t68078;
  t69056 = t69046*t68776;
  t69206 = t68236*t65437;
  t69207 = t65443*t69050;
  t69208 = t69206 + t69207;
  t69224 = t65443*t68236;
  t69225 = -1.*t65437*t69050;
  t69228 = t69224 + t69225;
  t69209 = -1.*t67974*t69208;
  t69218 = t32397*t67969*t65443;
  t69219 = -1.*t65437*t67972;
  t69223 = t69218 + t69219;
  t69229 = -1.*t69223*t69228;
  t69235 = t69047 + t69209 + t69229;
  t69131 = -1.*t69041*t69081;
  t69167 = t69081*t68776;
  t69168 = t69046*t68894;
  t69271 = t68276*t65437;
  t69272 = t65443*t69086;
  t69283 = t69271 + t69272;
  t69285 = t65443*t68276;
  t69294 = -1.*t65437*t69086;
  t69298 = t69285 + t69294;
  t69069 = -1.*t69046*t68976;
  t69327 = t67974*t69208;
  t69331 = t69223*t69228;
  t69332 = t69064 + t69327 + t69331;
  t69082 = t69041*t69081;
  t69095 = -1.*t69046*t68848;
  t69096 = -1.*t69081*t68976;
  t69102 = -1.*t69046*t68776;
  t69122 = -1.*t69081*t68776;
  t69124 = -1.*t69046*t68894;
  t69106 = t69046*t68976;
  t69113 = t69046*t68848;
  t69114 = t69081*t68976;
  t69022 = t68783*t68848;
  t69023 = -1.*t68768*t68858;
  t69024 = t69022 + t69023;
  t69027 = t68783*t68894;
  t69028 = -1.*t68768*t68929;
  t69029 = t69027 + t69028;
  t67621 = t67139 + t67211 + t67620;
  t67626 = 3.000000000027e-6*t65434*t67621;
  t67930 = t67651 + t67652 + t67703 + t67835 + t67918 + t67927;
  t67931 = 3.e-6*t65434*t67930;
  t67944 = t67932 + t67942 + t67943;
  t67945 = 3.e-6*t53727*t67944;
  t67956 = t67946 + t67949 + t67951 + t67952 + t67943 + t67955;
  t67957 = t67637*t67956;
  t67958 = t67626 + t67931 + t67945 + t67957;
  t68003 = 3.e-6*t53727*t68000;
  t68020 = 0.2000000000018*t65434;
  t68027 = t67969*t67660;
  t68041 = 4.e-7 + t68025 + t68027 + t68029;
  t68073 = 3.e-6*t68041*t65434;
  t68075 = t67946 + t67949 + t68003 + t67951 + t68020 + t68073 + t67952 + t67943 + t67955;
  t69013 = t68783*t68776;
  t69016 = -1.*t68768*t68789;
  t69020 = t69013 + t69016;
  t68117 = t67637*t68109;
  t68122 = 0.2*t65434;
  t68133 = t67932 + t67942 + t68117 + t68122 + t67943;
  t68140 = 0.2*t67654;
  t68146 = 3.e-6*t68000*t65434;
  t68149 = t68140 + t67139 + t67211 + t67620 + t68146;
  t68154 = 0.2*t53727;
  t68160 = -1.*t67969*t67660;
  t68161 = -4.e-7 + t67640 + t68160 + t67641;
  t68165 = t67637*t68161;
  t68166 = 3.000000000027e-6*t68109*t65434;
  t68167 = t68154 + t67651 + t68165 + t67652 + t67703 + t67835 + t67918 + t68166 + t67927;
  t69031 = t68783*t68976;
  t69032 = -1.*t68768*t69002;
  t69033 = t69031 + t69032;
  t68227 = -1.*t68225*t68086;
  t68244 = t67942 + t68227 + t68240;
  t68245 = t65436*t68244;
  t68261 = t68225*t68182;
  t68262 = t67620 + t68260 + t68261;
  t68270 = t66984*t68262;
  t68271 = t68225*t65886;
  t68283 = t68282*t68182;
  t68292 = t67949 + t67952 + t68271 + t68277 + t68283 + t68285;
  t68309 = t68078*t68292;
  t68315 = -1.*t68282*t68086;
  t68343 = -1.*t68225*t66994;
  t68346 = t67651 + t67918 + t68315 + t68327 + t68332 + t68343;
  t68349 = t68170*t68346;
  t68357 = t68245 + t68270 + t68309 + t68349;
  t69526 = t68783*t69041;
  t69529 = -1.*t68768*t69223;
  t69531 = t69526 + t69529;
  t68374 = t67969*t65296*t68282;
  t68386 = 4.e-7 + t68025 + t68373 + t68374 + t68029;
  t68388 = t68386*t68170;
  t68420 = t68410*t65436;
  t68432 = -3.e-6*t53727*t67506;
  t68472 = -3.e-6*t67649*t65434;
  t68486 = -1.*t68225*t65886;
  t68493 = -1.*t68282*t68182;
  t68504 = t68432 + t68472 + t68486 + t68488 + t68493 + t68497;
  t68506 = t32397*t67969*t68504;
  t68508 = t68388 + t68420 + t68506;
  t68527 = t68522*t68078;
  t68534 = t67637*t67506;
  t68535 = t68225*t68086;
  t68538 = t68534 + t68535 + t68536;
  t68545 = t32397*t67969*t68538;
  t68548 = t68527 + t68545;
  t68576 = t68410*t68170;
  t68579 = -3.e-6*t67506*t65434;
  t68598 = -1.*t68225*t68182;
  t68604 = t68579 + t68588 + t68598;
  t68643 = t32397*t67969*t68604;
  t68654 = t68576 + t68643;
  t68683 = t68522*t66984;
  t68688 = -1.*t67969*t65296*t68282;
  t68693 = -4.e-7 + t67640 + t68687 + t68688 + t67641;
  t68698 = t68693*t68078;
  t68699 = t67637*t67649;
  t68708 = 3.000000000027e-6*t67506*t65434;
  t68711 = t68282*t68086;
  t68731 = t68225*t66994;
  t68735 = t68699 + t68708 + t68711 + t68713 + t68722 + t68731;
  t68738 = t32397*t67969*t68735;
  t68744 = t68683 + t68698 + t68738;
  t69021 = 0.05186*t67036*t69020;
  t69025 = 0.05186*t68197*t69024;
  t69030 = 0.05186*t68099*t69029;
  t69034 = 0.05186*t66952*t69033;
  t69035 = t69021 + t69025 + t69030 + t69034;
  t68913 = t68768*t68894;
  t68934 = t68783*t68929;
  t68949 = t68913 + t68934;
  t68778 = t68768*t68776;
  t68794 = t68783*t68789;
  t68802 = t68778 + t68794;
  t68979 = t68768*t68976;
  t69003 = t68783*t69002;
  t69004 = t68979 + t69003;
  t68850 = t68768*t68848;
  t68866 = t68783*t68858;
  t68867 = t68850 + t68866;
  t69053 = t68776*t69052;
  t69054 = t68091*t69050;
  t69060 = t68536 + t69054 + t69056;
  t69061 = t69041*t69060;
  t69062 = t69053 + t69061;
  t69067 = t68976*t69066;
  t69068 = -1.*t69050*t68187;
  t69071 = t68588 + t69068 + t69069;
  t69072 = t69041*t69071;
  t69073 = t69067 + t69072;
  t69077 = t68848*t69066;
  t69087 = t67972*t69086;
  t69088 = t68373 + t69082 + t69087;
  t69092 = t68976*t69088;
  t69093 = -1.*t66892*t69050;
  t69094 = -1.*t69086*t68187;
  t69097 = t68488 + t68497 + t69093 + t69094 + t69095 + t69096;
  t69098 = t69041*t69097;
  t69099 = t69077 + t69092 + t69098;
  t69101 = -1.*t68091*t69050;
  t69103 = t68240 + t69101 + t69102;
  t69104 = t68848*t69103;
  t69105 = t69050*t68187;
  t69107 = t68260 + t69105 + t69106;
  t69109 = t68894*t69107;
  t69110 = t66892*t69050;
  t69112 = t69086*t68187;
  t69115 = t68277 + t68285 + t69110 + t69112 + t69113 + t69114;
  t69117 = t68776*t69115;
  t69120 = -1.*t68091*t69086;
  t69121 = -1.*t69050*t67000;
  t69125 = t68327 + t68332 + t69120 + t69121 + t69122 + t69124;
  t69126 = t68976*t69125;
  t69127 = t69104 + t69109 + t69117 + t69126;
  t69129 = t68894*t69052;
  t69133 = -1.*t67972*t69086;
  t69147 = t68687 + t69131 + t69133;
  t69153 = t68776*t69147;
  t69156 = t68091*t69086;
  t69162 = t69050*t67000;
  t69178 = t68713 + t68722 + t69156 + t69162 + t69167 + t69168;
  t69180 = t69041*t69178;
  t69187 = t69129 + t69153 + t69180;
  t69236 = t68099*t69235;
  t69238 = t68099*t69208;
  t69246 = t68789*t69228;
  t69253 = t69056 + t69238 + t69246;
  t69256 = t67974*t69253;
  t69258 = t69236 + t69256;
  t69261 = t67036*t69235;
  t69284 = -1.*t67974*t69283;
  t69300 = -1.*t69223*t69298;
  t69303 = t69131 + t69284 + t69300;
  t69304 = t68099*t69303;
  t69305 = t68099*t69283;
  t69307 = t68789*t69298;
  t69311 = t69208*t67036;
  t69313 = t69228*t68929;
  t69316 = t69167 + t69168 + t69305 + t69307 + t69311 + t69313;
  t69320 = t67974*t69316;
  t69324 = t69261 + t69304 + t69320;
  t69333 = t68197*t69332;
  t69409 = -1.*t69208*t68197;
  t69424 = -1.*t69228*t69002;
  t69448 = t69069 + t69409 + t69424;
  t69459 = t67974*t69448;
  t69461 = t69333 + t69459;
  t69463 = t66952*t69332;
  t69465 = t67974*t69283;
  t69467 = t69223*t69298;
  t69468 = t69082 + t69465 + t69467;
  t69469 = t68197*t69468;
  t69470 = -1.*t66952*t69208;
  t69471 = -1.*t68858*t69228;
  t69472 = -1.*t69283*t68197;
  t69473 = -1.*t69298*t69002;
  t69474 = t69095 + t69096 + t69470 + t69471 + t69472 + t69473;
  t69476 = t67974*t69474;
  t69480 = t69463 + t69469 + t69476;
  t69482 = -1.*t68099*t69208;
  t69484 = -1.*t68789*t69228;
  t69486 = t69102 + t69482 + t69484;
  t69487 = t66952*t69486;
  t69488 = -1.*t68099*t69283;
  t69490 = -1.*t68789*t69298;
  t69491 = -1.*t69208*t67036;
  t69498 = -1.*t69228*t68929;
  t69500 = t69122 + t69124 + t69488 + t69490 + t69491 + t69498;
  t69501 = t68197*t69500;
  t69503 = t69208*t68197;
  t69504 = t69228*t69002;
  t69505 = t69106 + t69503 + t69504;
  t69506 = t67036*t69505;
  t69507 = t66952*t69208;
  t69508 = t68858*t69228;
  t69509 = t69283*t68197;
  t69510 = t69298*t69002;
  t69511 = t69113 + t69114 + t69507 + t69508 + t69509 + t69510;
  t69512 = t68099*t69511;
  t69516 = t69487 + t69501 + t69506 + t69512;
  t69750 = t68768*t69041;
  t69751 = t68783*t69223;
  t69752 = t69750 + t69751;
  t68815 = 0.05186*t67036*t68802;
  t68871 = 0.05186*t68197*t68867;
  t68958 = 0.05186*t68099*t68949;
  t69006 = 0.05186*t66952*t69004;
  t69008 = t68815 + t68871 + t68958 + t69006;
  t69589 = 0.05186*t69020*t68949;
  t69604 = 0.05186*t68802*t69029;
  t69611 = 0.05186*t69024*t69004;
  t69613 = 0.05186*t68867*t69033;
  t69621 = t69589 + t69604 + t69611 + t69613;
  t70018 = t68197*t69486;
  t70021 = t68099*t69505;
  t70024 = t70018 + t70021;
  t69259 = 0.05186*t66952*t69258;
  t69325 = 0.05186*t68197*t69324;
  t69462 = 0.05186*t67036*t69461;
  t69481 = 0.05186*t68099*t69480;
  t69517 = 0.05186*t67974*t69516;
  t69518 = t69259 + t69325 + t69462 + t69481 + t69517;
  t69861 = 0.05186*t68867*t69258;
  t69877 = 0.05186*t69004*t69324;
  t69889 = 0.05186*t68949*t69461;
  t69891 = 0.05186*t68802*t69480;
  t69893 = 0.05186*t69752*t69516;
  t69897 = t69861 + t69877 + t69889 + t69891 + t69893;
  t69687 = 0.05186*t69024*t69258;
  t69699 = 0.05186*t69033*t69324;
  t69704 = 0.05186*t69029*t69461;
  t69718 = 0.05186*t69020*t69480;
  t69735 = 0.05186*t69531*t69516;
  t69738 = t69687 + t69699 + t69704 + t69718 + t69735;
  t70124 = t68976*t69103;
  t70125 = t68776*t69107;
  t70126 = t70124 + t70125;
  t70035 = 0.2*t67969;
  t70042 = t67637*t67621;
  t70043 = 3.e-6*t65434*t67944;
  t70049 = t70035 + t70042 + t70043;
  t70077 = t68170*t68244;
  t70082 = t68078*t68262;
  t70085 = t70077 + t70082;
  t69063 = 0.05186*t66952*t69062;
  t69076 = 0.05186*t67036*t69073;
  t69100 = 0.05186*t68099*t69099;
  t69128 = 0.05186*t67974*t69127;
  t69188 = 0.05186*t68197*t69187;
  t69193 = t69063 + t69076 + t69100 + t69128 + t69188;
  t69807 = 0.05186*t68867*t69062;
  t69808 = 0.05186*t68949*t69073;
  t69816 = 0.05186*t68802*t69099;
  t69828 = 0.05186*t69752*t69127;
  t69831 = 0.05186*t69004*t69187;
  t69835 = t69807 + t69808 + t69816 + t69828 + t69831;
  t69653 = 0.05186*t69024*t69062;
  t69654 = 0.05186*t69029*t69073;
  t69655 = 0.05186*t69020*t69099;
  t69668 = 0.05186*t69531*t69127;
  t69673 = 0.05186*t69033*t69187;
  t69675 = t69653 + t69654 + t69655 + t69668 + t69673;
  t70111 = 0.000245*t68894*t68099;
  t70112 = 2.e-6*t68976*t66952;
  t70113 = 0.000245*t68776*t67036;
  t70117 = 2.e-6*t68848*t68197;
  t70118 = 0.05186*t69187*t69258;
  t70120 = 0.05186*t69062*t69324;
  t70121 = 0.05186*t69099*t69461;
  t70122 = 0.05186*t69127*t70024;
  t70123 = 0.05186*t69073*t69480;
  t70127 = 0.05186*t70126*t69516;
  t70129 = t70111 + t70112 + t70113 + t70117 + t70118 + t70120 + t70121 + t70122 + t70123 + t70127;
  t68362 = 0.05186*t68357*t67974;
  t68511 = 0.05186*t68508*t68099;
  t68553 = 0.05186*t68548*t66952;
  t68682 = 0.05186*t68654*t67036;
  t68747 = 0.05186*t68744*t68197;
  t68748 = t68362 + t68511 + t68553 + t68682 + t68747;
  t69772 = 0.05186*t68357*t69752;
  t69775 = 0.05186*t68508*t68802;
  t69776 = 0.05186*t68548*t68867;
  t69782 = 0.05186*t68654*t68949;
  t69785 = 0.05186*t68744*t69004;
  t69786 = t69772 + t69775 + t69776 + t69782 + t69785;
  t69544 = 0.05186*t68357*t69531;
  t69546 = 0.05186*t68508*t69020;
  t69555 = 0.05186*t68548*t69024;
  t69562 = 0.05186*t68654*t69029;
  t69563 = 0.05186*t68744*t69033;
  t69564 = t69544 + t69546 + t69555 + t69562 + t69563;
  t70191 = 2.e-6*t68170*t68848;
  t70192 = 0.000245*t66984*t68776;
  t70193 = 2.e-6*t65436*t68976;
  t70194 = 0.000245*t68078*t68894;
  t70195 = 0.05186*t68744*t69062;
  t70196 = 0.05186*t68508*t69073;
  t70201 = 0.05186*t68357*t70126;
  t70202 = 0.05186*t68654*t69099;
  t70203 = 0.05186*t70085*t69127;
  t70204 = 0.05186*t68548*t69187;
  t70206 = t70191 + t70192 + t70193 + t70194 + t70195 + t70196 + t70201 + t70202 + t70203 + t70204;
  t70065 = 0.000245*t66984*t68099;
  t70068 = 2.e-6*t68170*t66952;
  t70069 = 0.000245*t68078*t67036;
  t70070 = 2.e-6*t65436*t68197;
  t70071 = 0.05186*t68744*t69258;
  t70072 = 0.05186*t68548*t69324;
  t70073 = 0.05186*t68508*t69461;
  t70074 = 0.05186*t68357*t70024;
  t70076 = 0.05186*t68654*t69480;
  t70090 = 0.05186*t70085*t69516;
  t70096 = t70065 + t70068 + t70069 + t70070 + t70071 + t70072 + t70073 + t70074 + t70076 + t70090;
  t70238 = 6.e-12*t53727*t68170;
  t70239 = 0.000245*t67637*t66984;
  t70240 = 7.35000000006615e-10*t65434*t68078;
  t70241 = 6.e-12*t65434*t65436;
  t70242 = 0.05186*t68167*t68548;
  t70243 = 0.05186*t68075*t68654;
  t70244 = 0.05186*t67958*t70085;
  t70245 = 0.05186*t68149*t68508;
  t70246 = 0.05186*t70049*t68357;
  t70247 = 0.05186*t68133*t68744;
  t70248 = t70238 + t70239 + t70240 + t70241 + t70242 + t70243 + t70244 + t70245 + t70246 + t70247;
  t67977 = 0.05186*t67958*t67974;
  t68101 = 0.05186*t68075*t68099;
  t68135 = 0.05186*t68133*t66952;
  t68153 = 0.05186*t68149*t67036;
  t68201 = 0.05186*t68167*t68197;
  t68202 = t67977 + t68101 + t68135 + t68153 + t68201;
  t69758 = 0.05186*t67958*t69752;
  t69759 = 0.05186*t68075*t68802;
  t69760 = 0.05186*t68133*t68867;
  t69762 = 0.05186*t68149*t68949;
  t69763 = 0.05186*t68167*t69004;
  t69765 = t69758 + t69759 + t69760 + t69762 + t69763;
  t69537 = 0.05186*t67958*t69531;
  t69538 = 0.05186*t68075*t69020;
  t69539 = 0.05186*t68133*t69024;
  t69540 = 0.05186*t68149*t69029;
  t69541 = 0.05186*t68167*t69033;
  t69542 = t69537 + t69538 + t69539 + t69540 + t69541;
  t70160 = 6.e-12*t65434*t68848;
  t70164 = 7.35000000006615e-10*t65434*t68776;
  t70168 = 6.e-12*t53727*t68976;
  t70169 = 0.000245*t67637*t68894;
  t70170 = 0.05186*t68167*t69062;
  t70178 = 0.05186*t68075*t69073;
  t70181 = 0.05186*t67958*t70126;
  t70185 = 0.05186*t68149*t69099;
  t70187 = 0.05186*t70049*t69127;
  t70188 = 0.05186*t68133*t69187;
  t70189 = t70160 + t70164 + t70168 + t70169 + t70170 + t70178 + t70181 + t70185 + t70187 + t70188;
  t69980 = 7.35000000006615e-10*t65434*t68099;
  t69981 = 6.e-12*t65434*t66952;
  t69990 = 0.000245*t67637*t67036;
  t69997 = 6.e-12*t53727*t68197;
  t70001 = 0.05186*t68167*t69258;
  t70004 = 0.05186*t68133*t69324;
  t70014 = 0.05186*t68075*t69461;
  t70027 = 0.05186*t67958*t70024;
  t70031 = 0.05186*t68149*t69480;
  t70054 = 0.05186*t70049*t69516;
  t70058 = t69980 + t69981 + t69990 + t69997 + t70001 + t70004 + t70014 + t70027 + t70031 + t70054;
  t70273 = 0.005186015558*t68167;
  t70275 = 6.2232e-14*t68075;
  t70276 = 2.0744e-8*t67958;
  t70277 = t70273 + t70275 + t70276;
  t70228 = 6.2232e-14*t68508;
  t70229 = 2.0744e-8*t68357;
  t70231 = 0.005186015558*t68744;
  t70232 = t70228 + t70229 + t70231;
  t66961 = 0.005186015558*t66952;
  t67037 = 6.2232e-14*t67036;
  t67038 = t66961 + t67037;
  t69743 = 0.005186015558*t68867;
  t69745 = 6.2232e-14*t68949;
  t69746 = t69743 + t69745;
  t69522 = 0.005186015558*t69024;
  t69523 = 6.2232e-14*t69029;
  t69524 = t69522 + t69523;
  t70147 = 6.2232e-14*t69099;
  t70148 = 2.0744e-8*t69127;
  t70149 = 0.005186015558*t69187;
  t70151 = t70147 + t70148 + t70149;
  t69935 = 0.005186015558*t69324;
  t69943 = 6.2232e-14*t69480;
  t69966 = 2.0744e-8*t69516;
  t69967 = t69935 + t69943 + t69966;
  p_output1[0]=var2[16]*(-0.5*(0.10372*t67036*t68099 + 0.10372*t66952*t68197)*var2[0] - 0.5*t69035*var2[1] - 0.5*t69008*var2[2] - 0.5*t69518*var2[3] - 0.5*t69193*var2[4] - 0.5*t68748*var2[5] - 0.5*t68202*var2[14] - 0.5*t67038*var2[16]);
  p_output1[1]=var2[16]*(-0.5*t69035*var2[0] - 0.5*(0.10372*t69020*t69029 + 0.10372*t69024*t69033)*var2[1] - 0.5*t69621*var2[2] - 0.5*t69738*var2[3] - 0.5*t69675*var2[4] - 0.5*t69564*var2[5] - 0.5*t69542*var2[14] - 0.5*t69524*var2[16]);
  p_output1[2]=var2[16]*(-0.5*t69008*var2[0] - 0.5*t69621*var2[1] - 0.5*(0.10372*t68802*t68949 + 0.10372*t68867*t69004)*var2[2] - 0.5*t69897*var2[3] - 0.5*t69835*var2[4] - 0.5*t69786*var2[5] - 0.5*t69765*var2[14] - 0.5*t69746*var2[16]);
  p_output1[3]=var2[16]*(-0.5*t69518*var2[0] - 0.5*t69738*var2[1] - 0.5*t69897*var2[2] - 0.5*(0.00049*t67036*t68099 + 4.e-6*t66952*t68197 + 0.10372*t69258*t69324 + 0.10372*t69461*t69480 + 0.10372*t69516*t70024)*var2[3] - 0.5*t70129*var2[4] - 0.5*t70096*var2[5] - 0.5*t70058*var2[14] - 0.5*t69967*var2[16]);
  p_output1[4]=var2[16]*(-0.5*t69193*var2[0] - 0.5*t69675*var2[1] - 0.5*t69835*var2[2] - 0.5*t70129*var2[3] - 0.5*(0.00049*t68776*t68894 + 4.e-6*t68848*t68976 + 0.10372*t69073*t69099 + 0.10372*t69062*t69187 + 0.10372*t69127*t70126)*var2[4] - 0.5*t70206*var2[5] - 0.5*t70189*var2[14] - 0.5*t70151*var2[16]);
  p_output1[5]=var2[16]*(-0.5*t68748*var2[0] - 0.5*t69564*var2[1] - 0.5*t69786*var2[2] - 0.5*t70096*var2[3] - 0.5*t70206*var2[4] - 0.5*(0.00049*t66984*t68078 + 4.e-6*t65436*t68170 + 0.10372*t68508*t68654 + 0.10372*t68548*t68744 + 0.10372*t68357*t70085)*var2[5] - 0.5*t70248*var2[14] - 0.5*t70232*var2[16]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=var2[16]*(-0.5*t68202*var2[0] - 0.5*t69542*var2[1] - 0.5*t69765*var2[2] - 0.5*t70058*var2[3] - 0.5*t70189*var2[4] - 0.5*t70248*var2[5] - 0.5*(3.6e-17*t53727*t65434 + 1.47000000001323e-9*t65434*t67637 + 0.10372*t68075*t68149 + 0.10372*t68133*t68167 + 0.10372*t67958*t70049)*var2[14] - 0.5*t70277*var2[16]);
  p_output1[15]=0;
  p_output1[16]=(-0.5*t67038*var2[0] - 0.5*t69524*var2[1] - 0.5*t69746*var2[2] - 0.5*t69967*var2[3] - 0.5*t70151*var2[4] - 0.5*t70232*var2[5] - 0.5*t70277*var2[14])*var2[16];
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec17_minitaur.hh"

namespace FrontStance
{

void Ce2_vec17_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
