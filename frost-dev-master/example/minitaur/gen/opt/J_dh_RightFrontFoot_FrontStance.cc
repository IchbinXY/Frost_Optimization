/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 23:45:04 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1400;
  double t1451;
  double t1459;
  double t1484;
  double t1588;
  double t1590;
  double t1593;
  double t1606;
  double t1663;
  double t1488;
  double t1492;
  double t1502;
  double t1570;
  double t1678;
  double t1679;
  double t1993;
  double t1674;
  double t1675;
  double t2026;
  double t1758;
  double t1759;
  double t1761;
  double t1812;
  double t1814;
  double t1830;
  double t2059;
  double t2067;
  double t2068;
  double t3693;
  double t14129;
  double t20297;
  double t20404;
  double t20409;
  double t20410;
  double t20459;
  double t20477;
  double t23514;
  double t23588;
  double t23104;
  double t2027;
  double t22036;
  double t23827;
  double t1587;
  double t1595;
  double t1677;
  double t1680;
  double t1706;
  double t2021;
  double t2031;
  double t2032;
  double t2033;
  double t2058;
  double t6582;
  double t10899;
  double t11740;
  double t12052;
  double t12083;
  double t25662;
  double t27024;
  double t27434;
  double t23327;
  double t27982;
  double t28166;
  double t28190;
  double t28219;
  double t28310;
  double t28331;
  double t24076;
  double t25071;
  double t25081;
  double t29420;
  double t29434;
  double t29170;
  double t29393;
  double t29494;
  double t29444;
  double t29446;
  double t29455;
  double t29467;
  double t29601;
  double t29609;
  double t29619;
  double t29771;
  double t29774;
  double t29776;
  double t29782;
  double t29791;
  double t30015;
  double t29820;
  double t30075;
  double t30078;
  double t30082;
  double t30087;
  double t30135;
  double t30162;
  double t30175;
  double t30222;
  double t30246;
  double t30262;
  double t1489;
  double t1586;
  double t30458;
  double t30486;
  double t30529;
  double t29405;
  double t29436;
  double t29438;
  double t29442;
  double t29480;
  double t29496;
  double t29519;
  double t29540;
  double t29582;
  double t29723;
  double t29735;
  double t29753;
  double t29757;
  double t29770;
  double t30751;
  double t30769;
  double t30804;
  double t30831;
  double t30834;
  double t29833;
  double t30840;
  double t30843;
  double t30847;
  double t30040;
  double t31048;
  double t31049;
  double t31051;
  double t31056;
  double t31062;
  double t31066;
  double t25639;
  double t25641;
  double t27806;
  double t28198;
  double t28359;
  double t28609;
  double t28628;
  double t28653;
  double t28686;
  double t28716;
  double t28847;
  double t28970;
  double t29029;
  double t29112;
  double t29133;
  double t29145;
  double t29146;
  double t29147;
  double t29153;
  double t29165;
  double t29166;
  double t31183;
  double t31188;
  double t31190;
  double t31195;
  double t31196;
  double t31197;
  double t31206;
  double t31211;
  double t31213;
  double t31215;
  double t1551;
  double t31317;
  double t31323;
  double t31327;
  double t31328;
  double t31332;
  double t31347;
  double t31035;
  double t31044;
  double t31053;
  double t31068;
  double t31073;
  double t31078;
  double t31084;
  double t31086;
  double t31087;
  double t31089;
  double t31096;
  double t31099;
  double t31101;
  double t31111;
  double t31114;
  double t31116;
  double t31123;
  double t31133;
  double t31146;
  double t31160;
  double t31165;
  double t30066;
  double t30068;
  double t30072;
  double t30101;
  double t30240;
  double t30306;
  double t30363;
  double t30364;
  double t30368;
  double t30378;
  double t30380;
  double t30387;
  double t30388;
  double t30392;
  double t30394;
  double t30396;
  double t30400;
  double t30402;
  double t30404;
  double t30406;
  double t30411;
  double t30421;
  double t31509;
  double t31484;
  double t31485;
  double t31486;
  double t31497;
  double t31526;
  double t31528;
  double t31530;
  double t31544;
  double t31546;
  double t31590;
  double t31193;
  double t31201;
  double t31219;
  double t31221;
  double t31223;
  double t31226;
  double t31230;
  double t31232;
  double t31245;
  double t31263;
  double t31281;
  double t31283;
  double t31288;
  double t31290;
  double t31292;
  double t31298;
  double t31302;
  double t31304;
  double t31306;
  double t30815;
  double t30836;
  double t30855;
  double t30892;
  double t30894;
  double t30897;
  double t30898;
  double t30909;
  double t30924;
  double t30936;
  double t30949;
  double t30961;
  double t30963;
  double t30965;
  double t30972;
  double t30978;
  double t31004;
  double t31024;
  double t31032;
  double t29476;
  double t29688;
  double t29784;
  double t29806;
  double t29818;
  double t29945;
  double t29991;
  double t30009;
  double t30013;
  double t30020;
  double t30023;
  double t30026;
  double t30028;
  double t30036;
  double t30042;
  double t30046;
  double t30050;
  double t30051;
  double t30054;
  double t31577;
  double t31975;
  double t31992;
  double t31994;
  double t31996;
  double t31998;
  double t32005;
  double t32006;
  double t32010;
  double t32011;
  double t32013;
  double t32016;
  double t32020;
  double t32027;
  double t32131;
  double t32128;
  double t32134;
  double t32135;
  double t32142;
  double t32144;
  double t32147;
  double t32154;
  double t32156;
  double t32160;
  double t32164;
  double t32172;
  double t32173;
  double t32201;
  double t32204;
  double t32228;
  double t32291;
  double t32292;
  double t32298;
  double t32289;
  double t32301;
  double t32302;
  double t32307;
  double t32310;
  double t32314;
  double t32316;
  double t32318;
  double t32321;
  double t32323;
  double t32327;
  double t32413;
  double t32414;
  double t32416;
  double t32417;
  double t32422;
  double t32425;
  double t32430;
  double t32437;
  double t32443;
  double t32446;
  double t32523;
  double t32530;
  double t32536;
  double t32553;
  double t32555;
  double t32562;
  double t32566;
  double t32567;
  double t32568;
  double t32569;
  double t32579;
  double t32582;
  double t32586;
  double t32589;
  double t32597;
  double t32603;
  double t32607;
  double t32609;
  double t31979;
  double t31984;
  double t31988;
  double t32004;
  double t32012;
  double t32031;
  double t32033;
  double t32043;
  double t32047;
  double t32048;
  double t32050;
  double t32051;
  double t32054;
  double t32058;
  double t32060;
  double t32064;
  double t32082;
  double t32084;
  double t32089;
  double t32095;
  double t32116;
  double t32122;
  double t32683;
  double t32686;
  double t32690;
  double t32693;
  double t32700;
  double t32701;
  double t32703;
  double t32710;
  double t32725;
  double t32727;
  double t32733;
  double t32753;
  double t32820;
  double t32824;
  double t32828;
  double t32834;
  double t32838;
  double t32844;
  double t32862;
  double t32869;
  double t32875;
  double t32878;
  double t32986;
  double t33003;
  double t33017;
  double t33021;
  double t33030;
  double t33050;
  double t33054;
  double t33063;
  double t32520;
  double t33312;
  double t33318;
  double t33321;
  double t33324;
  double t33327;
  double t33333;
  double t33348;
  double t33353;
  double t33356;
  double t32978;
  double t32982;
  double t33008;
  double t33046;
  double t33075;
  double t33083;
  double t33100;
  double t33203;
  double t33227;
  double t33262;
  double t33269;
  double t33273;
  double t33274;
  double t33276;
  double t33281;
  double t33283;
  double t33285;
  double t33288;
  double t33290;
  double t33293;
  double t33296;
  double t32137;
  double t32151;
  double t32161;
  double t32181;
  double t32229;
  double t32232;
  double t32238;
  double t32240;
  double t32245;
  double t32247;
  double t32253;
  double t32258;
  double t32264;
  double t32267;
  double t32271;
  double t32273;
  double t32274;
  double t32275;
  double t32278;
  double t32282;
  double t32285;
  double t33525;
  double t33530;
  double t33532;
  double t33523;
  double t33533;
  double t33536;
  double t33568;
  double t33570;
  double t33584;
  double t33588;
  double t33591;
  double t33816;
  double t33817;
  double t33827;
  double t33925;
  double t33948;
  double t34001;
  double t32544;
  double t32565;
  double t34434;
  double t34446;
  double t34457;
  double t32810;
  double t32813;
  double t32817;
  double t32835;
  double t32847;
  double t32882;
  double t32886;
  double t32893;
  double t32897;
  double t32903;
  double t32907;
  double t32915;
  double t32919;
  double t32927;
  double t32933;
  double t32939;
  double t32944;
  double t32949;
  double t32952;
  double t32958;
  double t32959;
  double t32965;
  double t32400;
  double t32407;
  double t32408;
  double t32421;
  double t32440;
  double t32447;
  double t32451;
  double t32455;
  double t32457;
  double t32461;
  double t32462;
  double t32470;
  double t32475;
  double t32480;
  double t32482;
  double t32486;
  double t32493;
  double t32500;
  double t32505;
  double t32506;
  double t32509;
  double t32513;
  double t34720;
  double t34728;
  double t34739;
  double t34773;
  double t35077;
  double t35090;
  double t35240;
  double t35305;
  double t35323;
  double t35427;
  double t35433;
  double t35472;
  double t35661;
  double t33811;
  double t33815;
  double t33846;
  double t33918;
  double t34074;
  double t34100;
  double t34120;
  double t34157;
  double t34169;
  double t34171;
  double t34175;
  double t34204;
  double t34302;
  double t34362;
  double t34408;
  double t34409;
  double t34410;
  double t34419;
  double t34422;
  double t34425;
  double t34427;
  double t35889;
  double t35893;
  double t35900;
  double t35901;
  double t35905;
  double t35909;
  double t35917;
  double t35921;
  double t35925;
  double t32698;
  double t32714;
  double t32756;
  double t32757;
  double t32758;
  double t32760;
  double t32763;
  double t32767;
  double t32770;
  double t32775;
  double t32777;
  double t32781;
  double t32783;
  double t32787;
  double t32791;
  double t32796;
  double t32800;
  double t32801;
  double t32804;
  double t32308;
  double t32317;
  double t32331;
  double t32335;
  double t32342;
  double t32346;
  double t32351;
  double t32352;
  double t32356;
  double t32362;
  double t32365;
  double t32366;
  double t32369;
  double t32376;
  double t32377;
  double t32382;
  double t32389;
  double t32390;
  double t32393;
  double t33567;
  double t33575;
  double t33593;
  double t33597;
  double t33600;
  double t33603;
  double t33604;
  double t33677;
  double t33695;
  double t33701;
  double t33702;
  double t33715;
  double t33719;
  double t33733;
  double t33777;
  double t33779;
  double t33783;
  double t33795;
  double t33797;
  double t31453;
  double t31460;
  double t31477;
  double t31482;
  double t31504;
  double t31511;
  double t31513;
  double t31517;
  double t31533;
  double t31537;
  double t31538;
  double t31540;
  double t31542;
  double t36031;
  double t36032;
  double t36040;
  double t36042;
  double t31594;
  double t36046;
  double t36053;
  double t36057;
  double t36066;
  double t36070;
  double t31637;
  double t35897;
  double t35913;
  double t35929;
  double t35933;
  double t35934;
  double t35937;
  double t35938;
  double t35941;
  double t35944;
  double t35945;
  double t35949;
  double t35960;
  double t35972;
  double t35977;
  double t35982;
  double t35988;
  double t35992;
  double t35995;
  double t36000;
  double t36082;
  double t36304;
  double t36310;
  double t36312;
  double t36313;
  double t36314;
  double t36319;
  double t36320;
  double t36324;
  double t36326;
  double t36329;
  double t36330;
  double t36336;
  double t36338;
  double t36342;
  double t36344;
  double t36346;
  double t36351;
  double t36353;
  double t36357;
  double t36366;
  double t36367;
  double t36370;
  double t36185;
  double t36189;
  double t36199;
  double t36200;
  double t36207;
  double t36221;
  double t36227;
  double t36231;
  double t36237;
  double t36242;
  double t36248;
  double t36252;
  double t36262;
  double t36267;
  double t36271;
  double t36272;
  double t36275;
  double t36276;
  double t36278;
  double t36280;
  double t36286;
  double t36292;
  double t36385;
  double t36395;
  double t36396;
  double t36401;
  double t36405;
  double t36409;
  double t36410;
  double t36411;
  double t36417;
  double t36421;
  double t36429;
  double t36430;
  double t36431;
  double t36433;
  double t36434;
  double t36435;
  double t36442;
  double t36447;
  double t36452;
  double t36453;
  double t36573;
  double t36595;
  double t36606;
  double t36609;
  double t36616;
  double t36621;
  double t36630;
  double t36633;
  double t36641;
  double t36747;
  double t36757;
  double t36765;
  double t36835;
  double t36933;
  double t36962;
  double t37017;
  double t37018;
  double t37026;
  double t36454;
  double t36461;
  double t36464;
  double t36476;
  double t36482;
  double t36486;
  double t36495;
  double t36502;
  double t36510;
  double t36514;
  double t36518;
  double t36520;
  double t36522;
  double t36525;
  double t36536;
  double t36544;
  double t36548;
  double t36551;
  double t36556;
  double t36557;
  double t36563;
  double t36566;
  double t37086;
  double t37087;
  double t37095;
  double t37101;
  double t37107;
  double t37120;
  double t37125;
  double t37127;
  double t37212;
  double t37217;
  double t37219;
  double t37221;
  double t37223;
  double t37227;
  double t37230;
  double t37237;
  double t37239;
  double t37243;
  double t37244;
  double t37339;
  double t37341;
  double t37345;
  double t37352;
  double t37366;
  double t37367;
  double t37375;
  double t37388;
  double t37389;
  double t37472;
  double t37474;
  double t37475;
  double t37480;
  double t37481;
  double t37487;
  double t37494;
  double t37496;
  double t37497;
  double t37078;
  double t37083;
  double t37097;
  double t37108;
  double t37130;
  double t37131;
  double t37134;
  double t37140;
  double t37141;
  double t37154;
  double t37159;
  double t37161;
  double t37164;
  double t37165;
  double t37173;
  double t37174;
  double t37189;
  double t37194;
  double t37200;
  double t37204;
  double t37206;
  double t37605;
  double t37608;
  double t37625;
  double t37712;
  double t37713;
  double t37722;
  double t37707;
  double t37727;
  double t37728;
  double t37736;
  double t37737;
  double t37761;
  double t37763;
  double t37849;
  double t37850;
  double t37852;
  double t37902;
  double t37930;
  double t37933;
  double t37330;
  double t37331;
  double t37334;
  double t37351;
  double t37376;
  double t37398;
  double t37399;
  double t37417;
  double t37419;
  double t37420;
  double t37422;
  double t37426;
  double t37432;
  double t37434;
  double t37435;
  double t37436;
  double t37437;
  double t37439;
  double t37444;
  double t37445;
  double t37448;
  double t37455;
  double t38019;
  double t38020;
  double t38028;
  double t38032;
  double t38033;
  double t38043;
  double t38049;
  double t38056;
  double t38057;
  double t38058;
  double t37837;
  double t37839;
  double t37865;
  double t37871;
  double t37937;
  double t37939;
  double t37943;
  double t37948;
  double t37949;
  double t37951;
  double t37954;
  double t37957;
  double t37958;
  double t37962;
  double t37963;
  double t37965;
  double t37970;
  double t37974;
  double t37979;
  double t37985;
  double t37987;
  double t38173;
  double t38176;
  double t38188;
  double t38190;
  double t38194;
  double t38196;
  double t38201;
  double t38203;
  double t37222;
  double t37233;
  double t37250;
  double t37252;
  double t37253;
  double t37266;
  double t37268;
  double t37270;
  double t37277;
  double t37278;
  double t37290;
  double t37291;
  double t37292;
  double t37293;
  double t37303;
  double t37305;
  double t37306;
  double t37321;
  double t37323;
  double t37735;
  double t37758;
  double t37767;
  double t37773;
  double t37785;
  double t37786;
  double t37787;
  double t37788;
  double t37790;
  double t37795;
  double t37799;
  double t37806;
  double t37812;
  double t37813;
  double t37814;
  double t37815;
  double t37822;
  double t37825;
  double t37829;
  double t38304;
  double t38309;
  double t38311;
  double t38315;
  double t38328;
  double t38329;
  double t38351;
  double t38357;
  double t38183;
  double t38195;
  double t38229;
  double t38234;
  double t38237;
  double t38238;
  double t38239;
  double t38240;
  double t38246;
  double t38248;
  double t38252;
  double t38258;
  double t38259;
  double t38271;
  double t38276;
  double t38278;
  double t38280;
  double t38281;
  double t38282;
  double t38367;
  t1400 = Cos(var1[15]);
  t1451 = -1.*t1400;
  t1459 = 1. + t1451;
  t1484 = Cos(var1[4]);
  t1588 = Cos(var1[17]);
  t1590 = -1.*t1588;
  t1593 = 1. + t1590;
  t1606 = -3.e-6*t1593;
  t1663 = Sin(var1[17]);
  t1488 = Cos(var1[5]);
  t1492 = Sin(var1[15]);
  t1502 = Sin(var1[4]);
  t1570 = Sin(var1[5]);
  t1678 = 3.e-6*t1663;
  t1679 = t1606 + t1678;
  t1993 = 9.e-13*var1[17];
  t1674 = -3.e-6*t1663;
  t1675 = t1606 + t1674;
  t2026 = -9.e-12*t1593;
  t1758 = -3.e-6*t1459*t1484*t1488;
  t1759 = 3.e-6*t1492*t1502;
  t1761 = -9.e-12*t1459;
  t1812 = 1. + t1761;
  t1814 = t1812*t1484*t1570;
  t1830 = t1758 + t1759 + t1814;
  t2059 = -1.*t1400*t1484*t1488;
  t2067 = -1.*t1492*t1502;
  t2068 = 3.e-6*t1459*t1484*t1570;
  t3693 = t2059 + t2067 + t2068;
  t14129 = t1484*t1488*t1492;
  t20297 = -1.000000000009*t1459;
  t20404 = 1. + t20297;
  t20409 = -1.*t20404*t1502;
  t20410 = 3.e-6*t1484*t1492*t1570;
  t20459 = t14129 + t20409 + t20410;
  t20477 = 3.e-6*t1593;
  t23514 = -1.000000000009*t1593;
  t23588 = 1. + t23514;
  t23104 = 9.e-12*t1593;
  t2027 = -1.*t1663;
  t22036 = t20477 + t1674;
  t23827 = t20477 + t1678;
  t1587 = 3.e-7*var1[17];
  t1595 = -1.62e-17*t1593;
  t1677 = 0.2*t1675;
  t1680 = 0.1*t1679;
  t1706 = t1587 + t1595 + t1677 + t1680;
  t2021 = 0.2000000000018*t1593;
  t2031 = t2026 + t2027;
  t2032 = 0.1*t2031;
  t2033 = -9.e-7*t1679;
  t2058 = t1993 + t2021 + t2032 + t2033;
  t6582 = 0.1000000000009*t1593;
  t10899 = -9.e-7*t1675;
  t11740 = t2026 + t1663;
  t12052 = 0.2*t11740;
  t12083 = t1993 + t6582 + t10899 + t12052;
  t25662 = t1812*t1488*t1502;
  t27024 = 3.e-6*t1459*t1502*t1570;
  t27434 = t25662 + t27024;
  t23327 = t23104 + t1663;
  t27982 = 3.e-6*t1459*t1488*t1502;
  t28166 = t1400*t1502*t1570;
  t28190 = t27982 + t28166;
  t28219 = 3.e-6*t1488*t1492*t1502;
  t28310 = -1.*t1492*t1502*t1570;
  t28331 = t28219 + t28310;
  t24076 = t23104 + t2027;
  t25071 = -1.8e-11*t1593;
  t25081 = 1. + t25071;
  t29420 = 3.e-6*t1588;
  t29434 = t29420 + t1674;
  t29170 = -3.e-6*t1588;
  t29393 = t29170 + t1674;
  t29494 = -9.e-12*t1663;
  t29444 = -3.e-6*t1484*t1492;
  t29446 = -3.e-6*t1459*t1488*t1502;
  t29455 = t1812*t1502*t1570;
  t29467 = t29444 + t29446 + t29455;
  t29601 = t1484*t1492;
  t29609 = -1.*t1400*t1488*t1502;
  t29619 = t29601 + t29609 + t27024;
  t29771 = t20404*t1484;
  t29774 = t1488*t1492*t1502;
  t29776 = 3.e-6*t1492*t1502*t1570;
  t29782 = t29771 + t29774 + t29776;
  t29791 = t29420 + t1678;
  t30015 = t29170 + t1678;
  t29820 = 9.e-12*t1663;
  t30075 = -1.000000000009*t1484*t1492;
  t30078 = t1400*t1488*t1502;
  t30082 = 3.e-6*t1400*t1502*t1570;
  t30087 = t30075 + t30078 + t30082;
  t30135 = -3.e-6*t1400*t1484;
  t30162 = -3.e-6*t1488*t1492*t1502;
  t30175 = -9.e-12*t1492*t1502*t1570;
  t30222 = t30135 + t30162 + t30175;
  t30246 = t1400*t1484;
  t30262 = t30246 + t29774 + t29776;
  t1489 = -0.2000000000018*t1459*t1484*t1488;
  t1586 = -6.000000000054e-7*t1459*t1484*t1570;
  t30458 = t1758 + t1814;
  t30486 = t2059 + t2068;
  t30529 = t14129 + t20410;
  t29405 = 0.2*t29393;
  t29436 = 0.1*t29434;
  t29438 = -1.62e-17*t1663;
  t29442 = 3.e-7 + t29405 + t29436 + t29438;
  t29480 = -9.e-7*t29434;
  t29496 = t1590 + t29494;
  t29519 = 0.1*t29496;
  t29540 = 0.2000000000018*t1663;
  t29582 = 9.e-13 + t29480 + t29519 + t29540;
  t29723 = -9.e-7*t29393;
  t29735 = t1588 + t29494;
  t29753 = 0.2*t29735;
  t29757 = 0.1000000000009*t1663;
  t29770 = 9.e-13 + t29723 + t29753 + t29757;
  t30751 = -1.*t1812*t1484*t1488;
  t30769 = -3.e-6*t1459*t1484*t1570;
  t30804 = t30751 + t30769;
  t30831 = -1.*t1400*t1484*t1570;
  t30834 = t1758 + t30831;
  t29833 = t1590 + t29820;
  t30840 = -3.e-6*t1484*t1488*t1492;
  t30843 = t1484*t1492*t1570;
  t30847 = t30840 + t30843;
  t30040 = t1588 + t29820;
  t31048 = -3.e-6*t1400*t1484*t1488;
  t31049 = t1400*t1484*t1570;
  t31051 = t31048 + t31049;
  t31056 = 9.e-12*t1484*t1488*t1492;
  t31062 = -3.e-6*t1484*t1492*t1570;
  t31066 = t31056 + t31062;
  t25639 = -6.000000000054e-7*t1459*t1488*t1502;
  t25641 = 0.2000000000018*t1459*t1502*t1570;
  t27806 = t1706*t27434;
  t28198 = t2058*t28190;
  t28359 = t12083*t28331;
  t28609 = t22036*t27434;
  t28628 = t23327*t28190;
  t28653 = t23588*t28331;
  t28686 = t28609 + t28628 + t28653;
  t28716 = -0.3*t28686;
  t28847 = t23827*t27434;
  t28970 = t23588*t28190;
  t29029 = t24076*t28331;
  t29112 = t28847 + t28970 + t29029;
  t29133 = 0.2*t29112;
  t29145 = t25081*t27434;
  t29146 = t22036*t28190;
  t29147 = t23827*t28331;
  t29153 = t29145 + t29146 + t29147;
  t29165 = -0.099999*t29153;
  t29166 = t25639 + t25641 + t27806 + t28198 + t28359 + t28716 + t29133 + t29165;
  t31183 = -1.000000000009*t1492*t1502;
  t31188 = -3.e-6*t1400*t1484*t1570;
  t31190 = t2059 + t31183 + t31188;
  t31195 = -1.*t1484*t1488*t1492;
  t31196 = t1400*t1502;
  t31197 = t31195 + t31196 + t31062;
  t31206 = 3.e-6*t1484*t1488*t1492;
  t31211 = -3.e-6*t1400*t1502;
  t31213 = 9.e-12*t1484*t1492*t1570;
  t31215 = t31206 + t31211 + t31213;
  t1551 = 0.2000000000018*t1492*t1502;
  t31317 = t2059 + t2067 + t31188;
  t31323 = 3.e-6*t1400*t1484*t1488;
  t31327 = 9.e-12*t1400*t1484*t1570;
  t31328 = t31323 + t1759 + t31327;
  t31332 = -1.000000000009*t1400*t1502;
  t31347 = t14129 + t31332 + t20410;
  t31035 = 6.000000000054e-7*t1484*t1488*t1492;
  t31044 = -0.2000000000018*t1484*t1492*t1570;
  t31053 = t12083*t31051;
  t31068 = t1706*t31066;
  t31073 = t2058*t30847;
  t31078 = t24076*t31051;
  t31084 = t23827*t31066;
  t31086 = t23588*t30847;
  t31087 = t31078 + t31084 + t31086;
  t31089 = 0.2*t31087;
  t31096 = t23827*t31051;
  t31099 = t25081*t31066;
  t31101 = t22036*t30847;
  t31111 = t31096 + t31099 + t31101;
  t31114 = -0.099999*t31111;
  t31116 = t23588*t31051;
  t31123 = t22036*t31066;
  t31133 = t23327*t30847;
  t31146 = t31116 + t31123 + t31133;
  t31160 = -0.3*t31146;
  t31165 = t31035 + t31044 + t31053 + t31068 + t31073 + t31089 + t31114 + t31160;
  t30066 = -0.2000000000018*t1400*t1484;
  t30068 = -0.2000000000018*t1488*t1492*t1502;
  t30072 = -6.000000000054e-7*t1492*t1502*t1570;
  t30101 = t12083*t30087;
  t30240 = t1706*t30222;
  t30306 = t2058*t30262;
  t30363 = t24076*t30087;
  t30364 = t23827*t30222;
  t30368 = t23588*t30262;
  t30378 = t30363 + t30364 + t30368;
  t30380 = 0.2*t30378;
  t30387 = t23827*t30087;
  t30388 = t25081*t30222;
  t30392 = t22036*t30262;
  t30394 = t30387 + t30388 + t30392;
  t30396 = -0.099999*t30394;
  t30400 = t23588*t30087;
  t30402 = t22036*t30222;
  t30404 = t23327*t30262;
  t30406 = t30400 + t30402 + t30404;
  t30411 = -0.3*t30406;
  t30421 = t30066 + t30068 + t30072 + t30101 + t30240 + t30306 + t30380 + t30396 + t30411;
  t31509 = -9.e-12*t1588;
  t31484 = 3.e-6*t1459*t1484*t1488;
  t31485 = -3.e-6*t1492*t1502;
  t31486 = -1.*t1812*t1484*t1570;
  t31497 = t31484 + t31485 + t31486;
  t31526 = t1400*t1484*t1488;
  t31528 = t1492*t1502;
  t31530 = t31526 + t31528 + t30769;
  t31544 = t20404*t1502;
  t31546 = t31195 + t31544 + t31062;
  t31590 = 9.e-12*t1588;
  t31193 = t29770*t31190;
  t31201 = t29582*t31197;
  t31219 = t29442*t31215;
  t31221 = -1.000000000009*t1663*t31190;
  t31223 = t30040*t31197;
  t31226 = t30015*t31215;
  t31230 = t31221 + t31223 + t31226;
  t31232 = -0.3*t31230;
  t31245 = t29833*t31190;
  t31263 = -1.000000000009*t1663*t31197;
  t31281 = t29791*t31215;
  t31283 = t31245 + t31263 + t31281;
  t31288 = 0.2*t31283;
  t31290 = t29791*t31190;
  t31292 = t30015*t31197;
  t31298 = -1.8e-11*t1663*t31215;
  t31302 = t31290 + t31292 + t31298;
  t31304 = -0.099999*t31302;
  t31306 = t31193 + t31201 + t31219 + t31232 + t31288 + t31304;
  t30815 = t29442*t30804;
  t30836 = t29582*t30834;
  t30855 = t29770*t30847;
  t30892 = t29791*t30804;
  t30894 = -1.000000000009*t1663*t30834;
  t30897 = t29833*t30847;
  t30898 = t30892 + t30894 + t30897;
  t30909 = 0.2*t30898;
  t30924 = -1.8e-11*t1663*t30804;
  t30936 = t30015*t30834;
  t30949 = t29791*t30847;
  t30961 = t30924 + t30936 + t30949;
  t30963 = -0.099999*t30961;
  t30965 = t30015*t30804;
  t30972 = t30040*t30834;
  t30978 = -1.000000000009*t1663*t30847;
  t31004 = t30965 + t30972 + t30978;
  t31024 = -0.3*t31004;
  t31032 = t30815 + t30836 + t30855 + t30909 + t30963 + t31024;
  t29476 = t29442*t29467;
  t29688 = t29582*t29619;
  t29784 = t29770*t29782;
  t29806 = t29791*t29467;
  t29818 = -1.000000000009*t1663*t29619;
  t29945 = t29833*t29782;
  t29991 = t29806 + t29818 + t29945;
  t30009 = 0.2*t29991;
  t30013 = -1.8e-11*t1663*t29467;
  t30020 = t30015*t29619;
  t30023 = t29791*t29782;
  t30026 = t30013 + t30020 + t30023;
  t30028 = -0.099999*t30026;
  t30036 = t30015*t29467;
  t30042 = t30040*t29619;
  t30046 = -1.000000000009*t1663*t29782;
  t30050 = t30036 + t30042 + t30046;
  t30051 = -0.3*t30050;
  t30054 = t29476 + t29688 + t29784 + t30009 + t30028 + t30051;
  t31577 = t29791*t31497;
  t31975 = Cos(var1[3]);
  t31992 = 3.e-6*t1459*t31975*t1484*t1488;
  t31994 = -3.e-6*t31975*t1492*t1502;
  t31996 = -1.*t1812*t31975*t1484*t1570;
  t31998 = t31992 + t31994 + t31996;
  t32005 = t1400*t31975*t1484*t1488;
  t32006 = t31975*t1492*t1502;
  t32010 = -3.e-6*t1459*t31975*t1484*t1570;
  t32011 = t32005 + t32006 + t32010;
  t32013 = -1.*t31975*t1484*t1488*t1492;
  t32016 = t20404*t31975*t1502;
  t32020 = -3.e-6*t31975*t1484*t1492*t1570;
  t32027 = t32013 + t32016 + t32020;
  t32131 = Sin(var1[3]);
  t32128 = -1.*t31975*t1488*t1502;
  t32134 = t32131*t1570;
  t32135 = t32128 + t32134;
  t32142 = -1.*t1488*t32131;
  t32144 = -1.*t31975*t1502*t1570;
  t32147 = t32142 + t32144;
  t32154 = t1812*t32135;
  t32156 = 3.e-6*t1459*t32147;
  t32160 = t32154 + t32156;
  t32164 = 3.e-6*t1459*t32135;
  t32172 = t1400*t32147;
  t32173 = t32164 + t32172;
  t32201 = 3.e-6*t1492*t32135;
  t32204 = -1.*t1492*t32147;
  t32228 = t32201 + t32204;
  t32291 = t31975*t1488*t1502;
  t32292 = -1.*t32131*t1570;
  t32298 = t32291 + t32292;
  t32289 = 3.e-6*t31975*t1484*t1492;
  t32301 = 3.e-6*t1459*t32298;
  t32302 = t1812*t32147;
  t32307 = t32289 + t32301 + t32302;
  t32310 = -1.*t31975*t1484*t1492;
  t32314 = t1400*t32298;
  t32316 = t32310 + t32314 + t32156;
  t32318 = -1.*t20404*t31975*t1484;
  t32321 = -1.*t1492*t32298;
  t32323 = 3.e-6*t1492*t32147;
  t32327 = t32318 + t32321 + t32323;
  t32413 = 1.000000000009*t31975*t1484*t1492;
  t32414 = -1.*t1400*t32298;
  t32416 = 3.e-6*t1400*t32147;
  t32417 = t32413 + t32414 + t32416;
  t32422 = 3.e-6*t1400*t31975*t1484;
  t32425 = 3.e-6*t1492*t32298;
  t32430 = -9.e-12*t1492*t32147;
  t32437 = t32422 + t32425 + t32430;
  t32443 = -1.*t1400*t31975*t1484;
  t32446 = t32443 + t32321 + t32323;
  t32523 = -1.*t1488*t32131*t1502;
  t32530 = -1.*t31975*t1570;
  t32536 = t32523 + t32530;
  t32553 = -1.*t31975*t1488;
  t32555 = t32131*t1502*t1570;
  t32562 = t32553 + t32555;
  t32566 = -3.e-6*t1484*t1492*t32131;
  t32567 = 3.e-6*t1459*t32536;
  t32568 = t1812*t32562;
  t32569 = t32566 + t32567 + t32568;
  t32579 = t1484*t1492*t32131;
  t32582 = t1400*t32536;
  t32586 = 3.e-6*t1459*t32562;
  t32589 = t32579 + t32582 + t32586;
  t32597 = t20404*t1484*t32131;
  t32603 = -1.*t1492*t32536;
  t32607 = 3.e-6*t1492*t32562;
  t32609 = t32597 + t32603 + t32607;
  t31979 = 0.2000000000018*t1459*t31975*t1484*t1488;
  t31984 = -0.2000000000018*t31975*t1492*t1502;
  t31988 = 6.000000000054e-7*t1459*t31975*t1484*t1570;
  t32004 = t1706*t31998;
  t32012 = t2058*t32011;
  t32031 = t12083*t32027;
  t32033 = t22036*t31998;
  t32043 = t23327*t32011;
  t32047 = t23588*t32027;
  t32048 = t32033 + t32043 + t32047;
  t32050 = -0.3*t32048;
  t32051 = t23827*t31998;
  t32054 = t23588*t32011;
  t32058 = t24076*t32027;
  t32060 = t32051 + t32054 + t32058;
  t32064 = 0.2*t32060;
  t32082 = t25081*t31998;
  t32084 = t22036*t32011;
  t32089 = t23827*t32027;
  t32095 = t32082 + t32084 + t32089;
  t32116 = -0.099999*t32095;
  t32122 = t31979 + t31984 + t31988 + t32004 + t32012 + t32031 + t32050 + t32064 + t32116;
  t32683 = 3.e-6*t1459*t1484*t1488*t32131;
  t32686 = -3.e-6*t1492*t32131*t1502;
  t32690 = -1.*t1812*t1484*t32131*t1570;
  t32693 = t32683 + t32686 + t32690;
  t32700 = t1400*t1484*t1488*t32131;
  t32701 = t1492*t32131*t1502;
  t32703 = -3.e-6*t1459*t1484*t32131*t1570;
  t32710 = t32700 + t32701 + t32703;
  t32725 = -1.*t1484*t1488*t1492*t32131;
  t32727 = t20404*t32131*t1502;
  t32733 = -3.e-6*t1484*t1492*t32131*t1570;
  t32753 = t32725 + t32727 + t32733;
  t32820 = -1.*t1400*t1484*t1488*t32131;
  t32824 = -1.000000000009*t1492*t32131*t1502;
  t32828 = -3.e-6*t1400*t1484*t32131*t1570;
  t32834 = t32820 + t32824 + t32828;
  t32838 = t1400*t32131*t1502;
  t32844 = t32725 + t32838 + t32733;
  t32862 = 3.e-6*t1484*t1488*t1492*t32131;
  t32869 = -3.e-6*t1400*t32131*t1502;
  t32875 = 9.e-12*t1484*t1492*t32131*t1570;
  t32878 = t32862 + t32869 + t32875;
  t32986 = -1.*t1812*t1484*t1488*t32131;
  t33003 = t32986 + t32703;
  t33017 = -3.e-6*t1459*t1484*t1488*t32131;
  t33021 = -1.*t1400*t1484*t32131*t1570;
  t33030 = t33017 + t33021;
  t33050 = -3.e-6*t1484*t1488*t1492*t32131;
  t33054 = t1484*t1492*t32131*t1570;
  t33063 = t33050 + t33054;
  t32520 = -0.2000000000018*t1484*t1492*t32131;
  t33312 = -3.e-6*t1459*t1488*t32131*t1502;
  t33318 = t1812*t32131*t1502*t1570;
  t33321 = t32566 + t33312 + t33318;
  t33324 = -1.*t1400*t1488*t32131*t1502;
  t33327 = 3.e-6*t1459*t32131*t1502*t1570;
  t33333 = t32579 + t33324 + t33327;
  t33348 = t1488*t1492*t32131*t1502;
  t33353 = 3.e-6*t1492*t32131*t1502*t1570;
  t33356 = t32597 + t33348 + t33353;
  t32978 = 6.000000000054e-7*t1459*t1484*t1488*t32131;
  t32982 = -0.2000000000018*t1459*t1484*t32131*t1570;
  t33008 = t1706*t33003;
  t33046 = t2058*t33030;
  t33075 = t12083*t33063;
  t33083 = t22036*t33003;
  t33100 = t23327*t33030;
  t33203 = t23588*t33063;
  t33227 = t33083 + t33100 + t33203;
  t33262 = -0.3*t33227;
  t33269 = t23827*t33003;
  t33273 = t23588*t33030;
  t33274 = t24076*t33063;
  t33276 = t33269 + t33273 + t33274;
  t33281 = 0.2*t33276;
  t33283 = t25081*t33003;
  t33285 = t22036*t33030;
  t33288 = t23827*t33063;
  t33290 = t33283 + t33285 + t33288;
  t33293 = -0.099999*t33290;
  t33296 = t32978 + t32982 + t33008 + t33046 + t33075 + t33262 + t33281 + t33293;
  t32137 = -6.000000000054e-7*t1459*t32135;
  t32151 = 0.2000000000018*t1459*t32147;
  t32161 = t1706*t32160;
  t32181 = t2058*t32173;
  t32229 = t12083*t32228;
  t32232 = t22036*t32160;
  t32238 = t23327*t32173;
  t32240 = t23588*t32228;
  t32245 = t32232 + t32238 + t32240;
  t32247 = -0.3*t32245;
  t32253 = t23827*t32160;
  t32258 = t23588*t32173;
  t32264 = t24076*t32228;
  t32267 = t32253 + t32258 + t32264;
  t32271 = 0.2*t32267;
  t32273 = t25081*t32160;
  t32274 = t22036*t32173;
  t32275 = t23827*t32228;
  t32278 = t32273 + t32274 + t32275;
  t32282 = -0.099999*t32278;
  t32285 = t32137 + t32151 + t32161 + t32181 + t32229 + t32247 + t32271 + t32282;
  t33525 = t31975*t1488;
  t33530 = -1.*t32131*t1502*t1570;
  t33532 = t33525 + t33530;
  t33523 = t1812*t32536;
  t33533 = 3.e-6*t1459*t33532;
  t33536 = t33523 + t33533;
  t33568 = t1400*t33532;
  t33570 = t32567 + t33568;
  t33584 = 3.e-6*t1492*t32536;
  t33588 = -1.*t1492*t33532;
  t33591 = t33584 + t33588;
  t33816 = 3.e-6*t1400*t32536;
  t33817 = -1.*t1400*t33532;
  t33827 = t33816 + t33817;
  t33925 = -9.e-12*t1492*t32536;
  t33948 = 3.e-6*t1492*t33532;
  t34001 = t33925 + t33948;
  t32544 = 0.2000000000018*t1459*t32536;
  t32565 = -6.000000000054e-7*t1459*t32562;
  t34434 = t32567 + t32568;
  t34446 = t32582 + t32586;
  t34457 = t32603 + t32607;
  t32810 = 0.2000000000018*t1484*t1488*t1492*t32131;
  t32813 = -0.2000000000018*t1400*t32131*t1502;
  t32817 = 6.000000000054e-7*t1484*t1492*t32131*t1570;
  t32835 = t12083*t32834;
  t32847 = t2058*t32844;
  t32882 = t1706*t32878;
  t32886 = t23827*t32834;
  t32893 = t22036*t32844;
  t32897 = t25081*t32878;
  t32903 = t32886 + t32893 + t32897;
  t32907 = -0.099999*t32903;
  t32915 = t23588*t32834;
  t32919 = t23327*t32844;
  t32927 = t22036*t32878;
  t32933 = t32915 + t32919 + t32927;
  t32939 = -0.3*t32933;
  t32944 = t24076*t32834;
  t32949 = t23588*t32844;
  t32952 = t23827*t32878;
  t32958 = t32944 + t32949 + t32952;
  t32959 = 0.2*t32958;
  t32965 = t32810 + t32813 + t32817 + t32835 + t32847 + t32882 + t32907 + t32939 + t32959;
  t32400 = 0.2000000000018*t1400*t31975*t1484;
  t32407 = 0.2000000000018*t1492*t32298;
  t32408 = -6.000000000054e-7*t1492*t32147;
  t32421 = t12083*t32417;
  t32440 = t1706*t32437;
  t32447 = t2058*t32446;
  t32451 = t24076*t32417;
  t32455 = t23827*t32437;
  t32457 = t23588*t32446;
  t32461 = t32451 + t32455 + t32457;
  t32462 = 0.2*t32461;
  t32470 = t23827*t32417;
  t32475 = t25081*t32437;
  t32480 = t22036*t32446;
  t32482 = t32470 + t32475 + t32480;
  t32486 = -0.099999*t32482;
  t32493 = t23588*t32417;
  t32500 = t22036*t32437;
  t32505 = t23327*t32446;
  t32506 = t32493 + t32500 + t32505;
  t32509 = -0.3*t32506;
  t32513 = t32400 + t32407 + t32408 + t32421 + t32440 + t32447 + t32462 + t32486 + t32509;
  t34720 = t1488*t32131*t1502;
  t34728 = t31975*t1570;
  t34739 = t34720 + t34728;
  t34773 = 3.e-6*t1400*t34739;
  t35077 = -9.e-12*t1400*t33532;
  t35090 = t32566 + t34773 + t35077;
  t35240 = -1.*t1400*t34739;
  t35305 = 3.e-6*t1400*t33532;
  t35323 = t32579 + t35240 + t35305;
  t35427 = 1.000000000009*t1400*t1484*t32131;
  t35433 = t1492*t34739;
  t35472 = -3.e-6*t1492*t33532;
  t35661 = t35427 + t35433 + t35472;
  t33811 = -6.000000000054e-7*t1492*t32536;
  t33815 = 0.2000000000018*t1492*t33532;
  t33846 = t12083*t33827;
  t33918 = t2058*t33591;
  t34074 = t1706*t34001;
  t34100 = t23827*t33827;
  t34120 = t22036*t33591;
  t34157 = t25081*t34001;
  t34169 = t34100 + t34120 + t34157;
  t34171 = -0.099999*t34169;
  t34175 = t23588*t33827;
  t34204 = t23327*t33591;
  t34302 = t22036*t34001;
  t34362 = t34175 + t34204 + t34302;
  t34408 = -0.3*t34362;
  t34409 = t24076*t33827;
  t34410 = t23588*t33591;
  t34419 = t23827*t34001;
  t34422 = t34409 + t34410 + t34419;
  t34425 = 0.2*t34422;
  t34427 = t33811 + t33815 + t33846 + t33918 + t34074 + t34171 + t34408 + t34425;
  t35889 = 1.000000000009*t1484*t1492*t32131;
  t35893 = t35889 + t35240 + t35305;
  t35900 = 3.e-6*t1400*t1484*t32131;
  t35901 = 3.e-6*t1492*t34739;
  t35905 = -9.e-12*t1492*t33532;
  t35909 = t35900 + t35901 + t35905;
  t35917 = -1.*t1400*t1484*t32131;
  t35921 = -1.*t1492*t34739;
  t35925 = t35917 + t35921 + t33948;
  t32698 = t29442*t32693;
  t32714 = t29582*t32710;
  t32756 = t29770*t32753;
  t32757 = t29791*t32693;
  t32758 = -1.000000000009*t1663*t32710;
  t32760 = t29833*t32753;
  t32763 = t32757 + t32758 + t32760;
  t32767 = 0.2*t32763;
  t32770 = -1.8e-11*t1663*t32693;
  t32775 = t30015*t32710;
  t32777 = t29791*t32753;
  t32781 = t32770 + t32775 + t32777;
  t32783 = -0.099999*t32781;
  t32787 = t30015*t32693;
  t32791 = t30040*t32710;
  t32796 = -1.000000000009*t1663*t32753;
  t32800 = t32787 + t32791 + t32796;
  t32801 = -0.3*t32800;
  t32804 = t32698 + t32714 + t32756 + t32767 + t32783 + t32801;
  t32308 = t29442*t32307;
  t32317 = t29582*t32316;
  t32331 = t29770*t32327;
  t32335 = t29791*t32307;
  t32342 = -1.000000000009*t1663*t32316;
  t32346 = t29833*t32327;
  t32351 = t32335 + t32342 + t32346;
  t32352 = 0.2*t32351;
  t32356 = -1.8e-11*t1663*t32307;
  t32362 = t30015*t32316;
  t32365 = t29791*t32327;
  t32366 = t32356 + t32362 + t32365;
  t32369 = -0.099999*t32366;
  t32376 = t30015*t32307;
  t32377 = t30040*t32316;
  t32382 = -1.000000000009*t1663*t32327;
  t32389 = t32376 + t32377 + t32382;
  t32390 = -0.3*t32389;
  t32393 = t32308 + t32317 + t32331 + t32352 + t32369 + t32390;
  t33567 = t29442*t33536;
  t33575 = t29582*t33570;
  t33593 = t29770*t33591;
  t33597 = t29791*t33536;
  t33600 = -1.000000000009*t1663*t33570;
  t33603 = t29833*t33591;
  t33604 = t33597 + t33600 + t33603;
  t33677 = 0.2*t33604;
  t33695 = -1.8e-11*t1663*t33536;
  t33701 = t30015*t33570;
  t33702 = t29791*t33591;
  t33715 = t33695 + t33701 + t33702;
  t33719 = -0.099999*t33715;
  t33733 = t30015*t33536;
  t33777 = t30040*t33570;
  t33779 = -1.000000000009*t1663*t33591;
  t33783 = t33733 + t33777 + t33779;
  t33795 = -0.3*t33783;
  t33797 = t33567 + t33575 + t33593 + t33677 + t33719 + t33795;
  t31453 = -1.62e-17*t1588;
  t31460 = 0.1*t29393;
  t31477 = 0.2*t30015;
  t31482 = t31453 + t31460 + t31477;
  t31504 = 0.2000000000018*t1588;
  t31511 = t31509 + t1663;
  t31513 = 0.1*t31511;
  t31517 = t31504 + t29723 + t31513;
  t31533 = 0.1000000000009*t1588;
  t31537 = t31509 + t2027;
  t31538 = 0.2*t31537;
  t31540 = -9.e-7*t30015;
  t31542 = t31533 + t31538 + t31540;
  t36031 = 3.e-6*t1484*t1492*t32131;
  t36032 = 3.e-6*t1459*t34739;
  t36040 = t1812*t33532;
  t36042 = t36031 + t36032 + t36040;
  t31594 = t31590 + t2027;
  t36046 = -1.*t1484*t1492*t32131;
  t36053 = t1400*t34739;
  t36057 = t36046 + t36053 + t33533;
  t36066 = -1.*t20404*t1484*t32131;
  t36070 = t36066 + t35921 + t33948;
  t31637 = t31590 + t1663;
  t35897 = t29770*t35893;
  t35913 = t29442*t35909;
  t35929 = t29582*t35925;
  t35933 = -1.000000000009*t1663*t35893;
  t35934 = t30015*t35909;
  t35937 = t30040*t35925;
  t35938 = t35933 + t35934 + t35937;
  t35941 = -0.3*t35938;
  t35944 = t29791*t35893;
  t35945 = -1.8e-11*t1663*t35909;
  t35949 = t30015*t35925;
  t35960 = t35944 + t35945 + t35949;
  t35972 = -0.099999*t35960;
  t35977 = t29833*t35893;
  t35982 = t29791*t35909;
  t35988 = -1.000000000009*t1663*t35925;
  t35992 = t35977 + t35982 + t35988;
  t35995 = 0.2*t35992;
  t36000 = t35897 + t35913 + t35929 + t35941 + t35972 + t35995;
  t36082 = t29791*t36042;
  t36304 = 0.2000000000018*t1459*t1484*t1488*t32131;
  t36310 = -0.2000000000018*t1492*t32131*t1502;
  t36312 = 6.000000000054e-7*t1459*t1484*t32131*t1570;
  t36313 = t1706*t32693;
  t36314 = t2058*t32710;
  t36319 = t12083*t32753;
  t36320 = t22036*t32693;
  t36324 = t23327*t32710;
  t36326 = t23588*t32753;
  t36329 = t36320 + t36324 + t36326;
  t36330 = -0.3*t36329;
  t36336 = t23827*t32693;
  t36338 = t23588*t32710;
  t36342 = t24076*t32753;
  t36344 = t36336 + t36338 + t36342;
  t36346 = 0.2*t36344;
  t36351 = t25081*t32693;
  t36353 = t22036*t32710;
  t36357 = t23827*t32753;
  t36366 = t36351 + t36353 + t36357;
  t36367 = -0.099999*t36366;
  t36370 = t36304 + t36310 + t36312 + t36313 + t36314 + t36319 + t36330 + t36346 + t36367;
  t36185 = 0.2000000000018*t31975*t1484*t1492;
  t36189 = 0.2000000000018*t1459*t32298;
  t36199 = -6.000000000054e-7*t1459*t32147;
  t36200 = t1706*t32307;
  t36207 = t2058*t32316;
  t36221 = t12083*t32327;
  t36227 = t22036*t32307;
  t36231 = t23327*t32316;
  t36237 = t23588*t32327;
  t36242 = t36227 + t36231 + t36237;
  t36248 = -0.3*t36242;
  t36252 = t23827*t32307;
  t36262 = t23588*t32316;
  t36267 = t24076*t32327;
  t36271 = t36252 + t36262 + t36267;
  t36272 = 0.2*t36271;
  t36275 = t25081*t32307;
  t36276 = t22036*t32316;
  t36278 = t23827*t32327;
  t36280 = t36275 + t36276 + t36278;
  t36286 = -0.099999*t36280;
  t36292 = t36185 + t36189 + t36199 + t36200 + t36207 + t36221 + t36248 + t36272 + t36286;
  t36385 = -6.000000000054e-7*t1459*t32536;
  t36395 = 0.2000000000018*t1459*t33532;
  t36396 = t1706*t33536;
  t36401 = t2058*t33570;
  t36405 = t12083*t33591;
  t36409 = t22036*t33536;
  t36410 = t23327*t33570;
  t36411 = t36409 + t36410 + t34410;
  t36417 = -0.3*t36411;
  t36421 = t23827*t33536;
  t36429 = t23588*t33570;
  t36430 = t24076*t33591;
  t36431 = t36421 + t36429 + t36430;
  t36433 = 0.2*t36431;
  t36434 = t25081*t33536;
  t36435 = t22036*t33570;
  t36442 = t23827*t33591;
  t36447 = t36434 + t36435 + t36442;
  t36452 = -0.099999*t36447;
  t36453 = t36385 + t36395 + t36396 + t36401 + t36405 + t36417 + t36433 + t36452;
  t36573 = t29442*t36042;
  t36595 = t29582*t36057;
  t36606 = t29770*t36070;
  t36609 = -1.000000000009*t1663*t36057;
  t36616 = t29833*t36070;
  t36621 = t36082 + t36609 + t36616;
  t36630 = 0.2*t36621;
  t36633 = -1.8e-11*t1663*t36042;
  t36641 = t30015*t36057;
  t36747 = t29791*t36070;
  t36757 = t36633 + t36641 + t36747;
  t36765 = -0.099999*t36757;
  t36835 = t30015*t36042;
  t36933 = t30040*t36057;
  t36962 = -1.000000000009*t1663*t36070;
  t37017 = t36835 + t36933 + t36962;
  t37018 = -0.3*t37017;
  t37026 = t36573 + t36595 + t36606 + t36630 + t36765 + t37018;
  t36454 = 0.2000000000018*t1400*t1484*t32131;
  t36461 = 0.2000000000018*t1492*t34739;
  t36464 = -6.000000000054e-7*t1492*t33532;
  t36476 = t12083*t35893;
  t36482 = t1706*t35909;
  t36486 = t2058*t35925;
  t36495 = t24076*t35893;
  t36502 = t23827*t35909;
  t36510 = t23588*t35925;
  t36514 = t36495 + t36502 + t36510;
  t36518 = 0.2*t36514;
  t36520 = t23827*t35893;
  t36522 = t25081*t35909;
  t36525 = t22036*t35925;
  t36536 = t36520 + t36522 + t36525;
  t36544 = -0.099999*t36536;
  t36548 = t23588*t35893;
  t36551 = t22036*t35909;
  t36556 = t23327*t35925;
  t36557 = t36548 + t36551 + t36556;
  t36563 = -0.3*t36557;
  t36566 = t36454 + t36461 + t36464 + t36476 + t36482 + t36486 + t36518 + t36544 + t36563;
  t37086 = t1812*t31975*t1484*t1488;
  t37087 = 3.e-6*t1459*t31975*t1484*t1570;
  t37095 = t37086 + t37087;
  t37101 = t1400*t31975*t1484*t1570;
  t37107 = t31992 + t37101;
  t37120 = 3.e-6*t31975*t1484*t1488*t1492;
  t37125 = -1.*t31975*t1484*t1492*t1570;
  t37127 = t37120 + t37125;
  t37212 = -3.e-6*t1459*t31975*t1484*t1488;
  t37217 = 3.e-6*t31975*t1492*t1502;
  t37219 = t1812*t31975*t1484*t1570;
  t37221 = t37212 + t37217 + t37219;
  t37223 = -1.*t1400*t31975*t1484*t1488;
  t37227 = -1.*t31975*t1492*t1502;
  t37230 = t37223 + t37227 + t37087;
  t37237 = t31975*t1484*t1488*t1492;
  t37239 = -1.*t20404*t31975*t1502;
  t37243 = 3.e-6*t31975*t1484*t1492*t1570;
  t37244 = t37237 + t37239 + t37243;
  t37339 = 1.000000000009*t31975*t1492*t1502;
  t37341 = 3.e-6*t1400*t31975*t1484*t1570;
  t37345 = t32005 + t37339 + t37341;
  t37352 = -3.e-6*t31975*t1484*t1488*t1492;
  t37366 = 3.e-6*t1400*t31975*t1502;
  t37367 = -9.e-12*t31975*t1484*t1492*t1570;
  t37375 = t37352 + t37366 + t37367;
  t37388 = -1.*t1400*t31975*t1502;
  t37389 = t37237 + t37388 + t37243;
  t37472 = 3.e-6*t1459*t31975*t1488*t1502;
  t37474 = -1.*t1812*t31975*t1502*t1570;
  t37475 = t32289 + t37472 + t37474;
  t37480 = t1400*t31975*t1488*t1502;
  t37481 = -3.e-6*t1459*t31975*t1502*t1570;
  t37487 = t32310 + t37480 + t37481;
  t37494 = -1.*t31975*t1488*t1492*t1502;
  t37496 = -3.e-6*t31975*t1492*t1502*t1570;
  t37497 = t32318 + t37494 + t37496;
  t37078 = -6.000000000054e-7*t1459*t31975*t1484*t1488;
  t37083 = 0.2000000000018*t1459*t31975*t1484*t1570;
  t37097 = t1706*t37095;
  t37108 = t2058*t37107;
  t37130 = t12083*t37127;
  t37131 = t22036*t37095;
  t37134 = t23327*t37107;
  t37140 = t23588*t37127;
  t37141 = t37131 + t37134 + t37140;
  t37154 = -0.3*t37141;
  t37159 = t23827*t37095;
  t37161 = t23588*t37107;
  t37164 = t24076*t37127;
  t37165 = t37159 + t37161 + t37164;
  t37173 = 0.2*t37165;
  t37174 = t25081*t37095;
  t37189 = t22036*t37107;
  t37194 = t23827*t37127;
  t37200 = t37174 + t37189 + t37194;
  t37204 = -0.099999*t37200;
  t37206 = t37078 + t37083 + t37097 + t37108 + t37130 + t37154 + t37173 + t37204;
  t37605 = t32301 + t32302;
  t37608 = t32314 + t32156;
  t37625 = t32321 + t32323;
  t37712 = t1488*t32131;
  t37713 = t31975*t1502*t1570;
  t37722 = t37712 + t37713;
  t37707 = t1812*t32298;
  t37727 = 3.e-6*t1459*t37722;
  t37728 = t37707 + t37727;
  t37736 = t1400*t37722;
  t37737 = t32301 + t37736;
  t37761 = -1.*t1492*t37722;
  t37763 = t32425 + t37761;
  t37849 = 3.e-6*t1400*t32298;
  t37850 = -1.*t1400*t37722;
  t37852 = t37849 + t37850;
  t37902 = -9.e-12*t1492*t32298;
  t37930 = 3.e-6*t1492*t37722;
  t37933 = t37902 + t37930;
  t37330 = -0.2000000000018*t31975*t1484*t1488*t1492;
  t37331 = 0.2000000000018*t1400*t31975*t1502;
  t37334 = -6.000000000054e-7*t31975*t1484*t1492*t1570;
  t37351 = t12083*t37345;
  t37376 = t1706*t37375;
  t37398 = t2058*t37389;
  t37399 = t24076*t37345;
  t37417 = t23827*t37375;
  t37419 = t23588*t37389;
  t37420 = t37399 + t37417 + t37419;
  t37422 = 0.2*t37420;
  t37426 = t23827*t37345;
  t37432 = t25081*t37375;
  t37434 = t22036*t37389;
  t37435 = t37426 + t37432 + t37434;
  t37436 = -0.099999*t37435;
  t37437 = t23588*t37345;
  t37439 = t22036*t37375;
  t37444 = t23327*t37389;
  t37445 = t37437 + t37439 + t37444;
  t37448 = -0.3*t37445;
  t37455 = t37330 + t37331 + t37334 + t37351 + t37376 + t37398 + t37422 + t37436 + t37448;
  t38019 = 3.e-6*t1400*t32135;
  t38020 = -9.e-12*t1400*t37722;
  t38028 = t32289 + t38019 + t38020;
  t38032 = -1.*t1400*t32135;
  t38033 = 3.e-6*t1400*t37722;
  t38043 = t32310 + t38032 + t38033;
  t38049 = -1.000000000009*t1400*t31975*t1484;
  t38056 = t1492*t32135;
  t38057 = -3.e-6*t1492*t37722;
  t38058 = t38049 + t38056 + t38057;
  t37837 = -6.000000000054e-7*t1492*t32298;
  t37839 = 0.2000000000018*t1492*t37722;
  t37865 = t12083*t37852;
  t37871 = t2058*t37763;
  t37937 = t1706*t37933;
  t37939 = t23827*t37852;
  t37943 = t22036*t37763;
  t37948 = t25081*t37933;
  t37949 = t37939 + t37943 + t37948;
  t37951 = -0.099999*t37949;
  t37954 = t23588*t37852;
  t37957 = t23327*t37763;
  t37958 = t22036*t37933;
  t37962 = t37954 + t37957 + t37958;
  t37963 = -0.3*t37962;
  t37965 = t24076*t37852;
  t37970 = t23588*t37763;
  t37974 = t23827*t37933;
  t37979 = t37965 + t37970 + t37974;
  t37985 = 0.2*t37979;
  t37987 = t37837 + t37839 + t37865 + t37871 + t37937 + t37951 + t37963 + t37985;
  t38173 = -1.000000000009*t31975*t1484*t1492;
  t38176 = t38173 + t38032 + t38033;
  t38188 = -3.e-6*t1400*t31975*t1484;
  t38190 = -9.e-12*t1492*t37722;
  t38194 = t38188 + t32201 + t38190;
  t38196 = t1400*t31975*t1484;
  t38201 = -1.*t1492*t32135;
  t38203 = t38196 + t38201 + t37930;
  t37222 = t29442*t37221;
  t37233 = t29582*t37230;
  t37250 = t29770*t37244;
  t37252 = t29791*t37221;
  t37253 = -1.000000000009*t1663*t37230;
  t37266 = t29833*t37244;
  t37268 = t37252 + t37253 + t37266;
  t37270 = 0.2*t37268;
  t37277 = -1.8e-11*t1663*t37221;
  t37278 = t30015*t37230;
  t37290 = t29791*t37244;
  t37291 = t37277 + t37278 + t37290;
  t37292 = -0.099999*t37291;
  t37293 = t30015*t37221;
  t37303 = t30040*t37230;
  t37305 = -1.000000000009*t1663*t37244;
  t37306 = t37293 + t37303 + t37305;
  t37321 = -0.3*t37306;
  t37323 = t37222 + t37233 + t37250 + t37270 + t37292 + t37321;
  t37735 = t29442*t37728;
  t37758 = t29582*t37737;
  t37767 = t29770*t37763;
  t37773 = t29791*t37728;
  t37785 = -1.000000000009*t1663*t37737;
  t37786 = t29833*t37763;
  t37787 = t37773 + t37785 + t37786;
  t37788 = 0.2*t37787;
  t37790 = -1.8e-11*t1663*t37728;
  t37795 = t30015*t37737;
  t37799 = t29791*t37763;
  t37806 = t37790 + t37795 + t37799;
  t37812 = -0.099999*t37806;
  t37813 = t30015*t37728;
  t37814 = t30040*t37737;
  t37815 = -1.000000000009*t1663*t37763;
  t37822 = t37813 + t37814 + t37815;
  t37825 = -0.3*t37822;
  t37829 = t37735 + t37758 + t37767 + t37788 + t37812 + t37825;
  t38304 = -3.e-6*t31975*t1484*t1492;
  t38309 = t1812*t37722;
  t38311 = t38304 + t32164 + t38309;
  t38315 = t31975*t1484*t1492;
  t38328 = t1400*t32135;
  t38329 = t38315 + t38328 + t37727;
  t38351 = t20404*t31975*t1484;
  t38357 = t38351 + t38201 + t37930;
  t38183 = t29770*t38176;
  t38195 = t29442*t38194;
  t38229 = t29582*t38203;
  t38234 = -1.000000000009*t1663*t38176;
  t38237 = t30015*t38194;
  t38238 = t30040*t38203;
  t38239 = t38234 + t38237 + t38238;
  t38240 = -0.3*t38239;
  t38246 = t29791*t38176;
  t38248 = -1.8e-11*t1663*t38194;
  t38252 = t30015*t38203;
  t38258 = t38246 + t38248 + t38252;
  t38259 = -0.099999*t38258;
  t38271 = t29833*t38176;
  t38276 = t29791*t38194;
  t38278 = -1.000000000009*t1663*t38203;
  t38280 = t38271 + t38276 + t38278;
  t38281 = 0.2*t38280;
  t38282 = t38183 + t38195 + t38229 + t38240 + t38259 + t38281;
  t38367 = t29791*t38311;
  p_output1[0]=(t1489 + t1551 + t1586 + t1706*t1830 + t12083*t20459 + t2058*t3693 - 0.099999*(t20459*t23827 + t1830*t25081 + t22036*t3693) - 0.3*(t1830*t22036 + t20459*t23588 + t23327*t3693) + 0.2*(t1830*t23827 + t20459*t24076 + t23588*t3693))*var2[4] + t29166*var2[5] + t30421*var2[15] + t30054*var2[17];
  p_output1[1]=t29166*var2[4] + (t1489 + t1586 + t1706*t30458 + t2058*t30486 + t12083*t30529 - 0.3*(t22036*t30458 + t23327*t30486 + t23588*t30529) - 0.099999*(t25081*t30458 + t22036*t30486 + t23827*t30529) + 0.2*(t23827*t30458 + t23588*t30486 + t24076*t30529))*var2[5] + t31165*var2[15] + t31032*var2[17];
  p_output1[2]=t30421*var2[4] + t31165*var2[5] + (0.2000000000018*t1400*t1484*t1488 + t1551 + 6.000000000054e-7*t1400*t1484*t1570 + t2058*t31317 + t1706*t31328 + t12083*t31347 - 0.3*(t23327*t31317 + t22036*t31328 + t23588*t31347) - 0.099999*(t22036*t31317 + t25081*t31328 + t23827*t31347) + 0.2*(t23588*t31317 + t23827*t31328 + t24076*t31347))*var2[15] + t31306*var2[17];
  p_output1[3]=t30054*var2[4] + t31032*var2[5] + t31306*var2[15] + (t31482*t31497 + t31517*t31530 + t31542*t31546 - 0.099999*(-1.8e-11*t1588*t31497 + t29791*t31530 + t29434*t31546) - 0.3*(-1.000000000009*t1588*t31546 + t31577 + t31530*t31594) + 0.2*(t29434*t31497 - 1.000000000009*t1588*t31530 + t31546*t31637))*var2[17];
  p_output1[4]=1.;
  p_output1[5]=-0.2000000000018*t1484*t1492 - 0.2000000000018*t1459*t1488*t1502 - 6.000000000054e-7*t1459*t1502*t1570 + t1706*t29467 + t2058*t29619 + t12083*t29782 - 0.3*(t22036*t29467 + t23327*t29619 + t23588*t29782) - 0.099999*(t25081*t29467 + t22036*t29619 + t23827*t29782) + 0.2*(t23827*t29467 + t23588*t29619 + t24076*t29782);
  p_output1[6]=6.000000000054e-7*t1459*t1484*t1488 - 0.2000000000018*t1459*t1484*t1570 + t1706*t30804 + t2058*t30834 + t12083*t30847 - 0.099999*(t25081*t30804 + t22036*t30834 + t23827*t30847) + 0.2*(t23827*t30804 + t23588*t30834 + t24076*t30847) - 0.3*(t22036*t30804 + t23327*t30834 + t31086);
  p_output1[7]=0.2000000000018*t1484*t1488*t1492 - 0.2000000000018*t1400*t1502 + 6.000000000054e-7*t1484*t1492*t1570 + t12083*t31190 + t2058*t31197 + t1706*t31215 - 0.3*(t23588*t31190 + t23327*t31197 + t22036*t31215) + 0.2*(t24076*t31190 + t23588*t31197 + t23827*t31215) - 0.099999*(t23827*t31190 + t22036*t31197 + t25081*t31215);
  p_output1[8]=t29442*t31497 + t29582*t31530 + t29770*t31546 - 0.3*(t30015*t31497 + t30040*t31530 - 1.000000000009*t1663*t31546) - 0.099999*(-1.8e-11*t1663*t31497 + t30015*t31530 + t29791*t31546) + 0.2*(-1.000000000009*t1663*t31530 + t29833*t31546 + t31577);
  p_output1[9]=(t32520 + t32544 + t32565 + t1706*t32569 + t2058*t32589 + t12083*t32609 - 0.3*(t22036*t32569 + t23327*t32589 + t23588*t32609) - 0.099999*(t25081*t32569 + t22036*t32589 + t23827*t32609) + 0.2*(t23827*t32569 + t23588*t32589 + t24076*t32609))*var2[3] + t32122*var2[4] + t32285*var2[5] + t32513*var2[15] + t32393*var2[17];
  p_output1[10]=t32122*var2[3] + (-0.2000000000018*t1459*t1488*t1502*t32131 - 6.000000000054e-7*t1459*t1502*t1570*t32131 + t32520 + t1706*t33321 + t2058*t33333 + t12083*t33356 - 0.3*(t22036*t33321 + t23327*t33333 + t23588*t33356) - 0.099999*(t25081*t33321 + t22036*t33333 + t23827*t33356) + 0.2*(t23827*t33321 + t23588*t33333 + t24076*t33356))*var2[4] + t33296*var2[5] + t32965*var2[15] + t32804*var2[17];
  p_output1[11]=t32285*var2[3] + t33296*var2[4] + (t32544 + t32565 + t1706*t34434 + t2058*t34446 + t12083*t34457 - 0.3*(t22036*t34434 + t23327*t34446 + t23588*t34457) - 0.099999*(t25081*t34434 + t22036*t34446 + t23827*t34457) + 0.2*(t23827*t34434 + t23588*t34446 + t24076*t34457))*var2[5] + t34427*var2[15] + t33797*var2[17];
  p_output1[12]=t32513*var2[3] + t32965*var2[4] + t34427*var2[5] + (t32520 - 6.000000000054e-7*t1400*t33532 + 0.2000000000018*t1400*t34739 + t1706*t35090 + t2058*t35323 + t12083*t35661 - 0.3*(t22036*t35090 + t23327*t35323 + t23588*t35661) - 0.099999*(t25081*t35090 + t22036*t35323 + t23827*t35661) + 0.2*(t23827*t35090 + t23588*t35323 + t24076*t35661))*var2[15] + t36000*var2[17];
  p_output1[13]=t32393*var2[3] + t32804*var2[4] + t33797*var2[5] + t36000*var2[15] + (t31482*t36042 + t31517*t36057 + t31542*t36070 - 0.099999*(-1.8e-11*t1588*t36042 + t29791*t36057 + t29434*t36070) + 0.2*(t29434*t36042 - 1.000000000009*t1588*t36057 + t31637*t36070) - 0.3*(t31594*t36057 - 1.000000000009*t1588*t36070 + t36082))*var2[17];
  p_output1[14]=1.;
  p_output1[15]=t36292;
  p_output1[16]=t36370;
  p_output1[17]=t36453;
  p_output1[18]=t36566;
  p_output1[19]=t37026;
  p_output1[20]=t36292*var2[3] + t36370*var2[4] + t36453*var2[5] + t36566*var2[15] + t37026*var2[17];
  p_output1[21]=t36370*var2[3] + (0.2000000000018*t1459*t1488*t1502*t31975 + 6.000000000054e-7*t1459*t1502*t1570*t31975 + t36185 + t1706*t37475 + t2058*t37487 + t12083*t37497 - 0.3*(t22036*t37475 + t23327*t37487 + t23588*t37497) - 0.099999*(t25081*t37475 + t22036*t37487 + t23827*t37497) + 0.2*(t23827*t37475 + t23588*t37487 + t24076*t37497))*var2[4] + t37206*var2[5] + t37455*var2[15] + t37323*var2[17];
  p_output1[22]=t36453*var2[3] + t37206*var2[4] + (t36189 + t36199 + t1706*t37605 + t2058*t37608 + t12083*t37625 - 0.3*(t22036*t37605 + t23327*t37608 + t23588*t37625) - 0.099999*(t25081*t37605 + t22036*t37608 + t23827*t37625) + 0.2*(t23827*t37605 + t23588*t37608 + t24076*t37625))*var2[5] + t37987*var2[15] + t37829*var2[17];
  p_output1[23]=t36566*var2[3] + t37455*var2[4] + t37987*var2[5] + (0.2000000000018*t1400*t32135 + t36185 - 6.000000000054e-7*t1400*t37722 + t1706*t38028 + t2058*t38043 + t12083*t38058 - 0.3*(t22036*t38028 + t23327*t38043 + t23588*t38058) - 0.099999*(t25081*t38028 + t22036*t38043 + t23827*t38058) + 0.2*(t23827*t38028 + t23588*t38043 + t24076*t38058))*var2[15] + t38282*var2[17];
  p_output1[24]=t37026*var2[3] + t37323*var2[4] + t37829*var2[5] + t38282*var2[15] + (t31482*t38311 + t31517*t38329 + t31542*t38357 - 0.099999*(-1.8e-11*t1588*t38311 + t29791*t38329 + t29434*t38357) + 0.2*(t29434*t38311 - 1.000000000009*t1588*t38329 + t31637*t38357) - 0.3*(t31594*t38329 - 1.000000000009*t1588*t38357 + t38367))*var2[17];
  p_output1[25]=1.;
  p_output1[26]=0.2000000000018*t1484*t1492*t32131 - 6.000000000054e-7*t1459*t33532 + 0.2000000000018*t1459*t34739 + t1706*t36042 + t2058*t36057 + t12083*t36070 - 0.3*(t22036*t36042 + t23327*t36057 + t23588*t36070) - 0.099999*(t25081*t36042 + t22036*t36057 + t23827*t36070) + 0.2*(t23827*t36042 + t23588*t36057 + t24076*t36070);
  p_output1[27]=-0.2000000000018*t1459*t1484*t1488*t31975 + 0.2000000000018*t1492*t1502*t31975 - 6.000000000054e-7*t1459*t1484*t1570*t31975 + t1706*t37221 + t2058*t37230 + t12083*t37244 - 0.3*(t22036*t37221 + t23327*t37230 + t23588*t37244) - 0.099999*(t25081*t37221 + t22036*t37230 + t23827*t37244) + 0.2*(t23827*t37221 + t23588*t37230 + t24076*t37244);
  p_output1[28]=-6.000000000054e-7*t1459*t32298 + 0.2000000000018*t1459*t37722 + t1706*t37728 + t2058*t37737 + t12083*t37763 - 0.099999*(t25081*t37728 + t22036*t37737 + t23827*t37763) + 0.2*(t23827*t37728 + t23588*t37737 + t24076*t37763) - 0.3*(t22036*t37728 + t23327*t37737 + t37970);
  p_output1[29]=-0.2000000000018*t1400*t1484*t31975 + 0.2000000000018*t1492*t32135 - 6.000000000054e-7*t1492*t37722 + t12083*t38176 + t1706*t38194 + t2058*t38203 - 0.099999*(t23827*t38176 + t25081*t38194 + t22036*t38203) - 0.3*(t23588*t38176 + t22036*t38194 + t23327*t38203) + 0.2*(t24076*t38176 + t23827*t38194 + t23588*t38203);
  p_output1[30]=t29442*t38311 + t29582*t38329 + t29770*t38357 - 0.3*(t30015*t38311 + t30040*t38329 - 1.000000000009*t1663*t38357) - 0.099999*(-1.8e-11*t1663*t38311 + t30015*t38329 + t29791*t38357) + 0.2*(-1.000000000009*t1663*t38329 + t29833*t38357 + t38367);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RightFrontFoot_FrontStance.hh"

namespace FrontStance
{

void J_dh_RightFrontFoot_FrontStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
