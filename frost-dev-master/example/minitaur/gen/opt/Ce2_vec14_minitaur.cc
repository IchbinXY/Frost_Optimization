/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:10:56 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6334;
  double t12159;
  double t4899;
  double t12605;
  double t18178;
  double t27754;
  double t32922;
  double t13165;
  double t55004;
  double t60900;
  double t61322;
  double t61452;
  double t61328;
  double t61333;
  double t61415;
  double t61417;
  double t61418;
  double t61444;
  double t61453;
  double t61494;
  double t61505;
  double t61533;
  double t61534;
  double t61535;
  double t61568;
  double t61621;
  double t61623;
  double t61625;
  double t61360;
  double t61374;
  double t61396;
  double t61462;
  double t61471;
  double t61648;
  double t61649;
  double t61488;
  double t61491;
  double t61492;
  double t61398;
  double t61411;
  double t61412;
  double t61666;
  double t61485;
  double t61486;
  double t61725;
  double t61727;
  double t61712;
  double t61713;
  double t61714;
  double t61717;
  double t61719;
  double t59035;
  double t61658;
  double t61659;
  double t11055;
  double t15808;
  double t19464;
  double t49201;
  double t50243;
  double t51272;
  double t53298;
  double t55635;
  double t55658;
  double t55677;
  double t57380;
  double t61650;
  double t61753;
  double t61755;
  double t61756;
  double t61759;
  double t61760;
  double t61762;
  double t61764;
  double t61652;
  double t61653;
  double t58083;
  double t59285;
  double t59550;
  double t59605;
  double t59827;
  double t59830;
  double t59832;
  double t59834;
  double t59851;
  double t59852;
  double t61414;
  double t61455;
  double t61487;
  double t61493;
  double t61546;
  double t61880;
  double t61884;
  double t61627;
  double t61862;
  double t61865;
  double t61821;
  double t61851;
  double t61852;
  double t62019;
  double t62022;
  double t62024;
  double t62025;
  double t61957;
  double t61959;
  double t61966;
  double t62007;
  double t62009;
  double t62011;
  double t62012;
  double t62015;
  double t61982;
  double t61983;
  double t61984;
  double t62048;
  double t62049;
  double t62052;
  double t62042;
  double t62044;
  double t62045;
  double t61730;
  double t61731;
  double t61734;
  double t61736;
  double t61748;
  double t61806;
  double t61810;
  double t61855;
  double t61867;
  double t61873;
  double t61875;
  double t61876;
  double t61878;
  double t62082;
  double t62087;
  double t62088;
  double t62105;
  double t62107;
  double t62108;
  double t61980;
  double t61986;
  double t61991;
  double t61994;
  double t61995;
  double t61998;
  double t62172;
  double t62183;
  double t62179;
  double t62180;
  double t62181;
  double t62188;
  double t62189;
  double t62190;
  double t62199;
  double t62200;
  double t62202;
  double t62204;
  double t62205;
  double t62209;
  double t62215;
  double t62216;
  double t62217;
  double t62222;
  double t62223;
  double t62224;
  double t62228;
  double t62231;
  double t62236;
  double t62238;
  double t62239;
  double t62240;
  double t62285;
  double t62287;
  double t62291;
  double t62112;
  double t62297;
  double t62299;
  double t62301;
  double t62293;
  double t62294;
  double t62295;
  double t62124;
  double t62319;
  double t62320;
  double t62323;
  double t62076;
  double t62094;
  double t62097;
  double t62351;
  double t62352;
  double t62353;
  double t62344;
  double t62345;
  double t62346;
  double t62028;
  double t62036;
  double t62046;
  double t62055;
  double t62062;
  double t62065;
  double t62296;
  double t62303;
  double t62307;
  double t62136;
  double t62149;
  double t62151;
  double t62310;
  double t62461;
  double t62462;
  double t62463;
  double t62483;
  double t62485;
  double t62486;
  double t62467;
  double t62469;
  double t62473;
  double t62475;
  double t62502;
  double t62503;
  double t62430;
  double t62439;
  double t62441;
  double t62516;
  double t62517;
  double t62518;
  double t62522;
  double t62523;
  double t62524;
  double t62332;
  double t62538;
  double t62539;
  double t62541;
  double t62350;
  double t62364;
  double t62366;
  double t62377;
  double t62414;
  double t62415;
  double t62395;
  double t62402;
  double t62403;
  double t62257;
  double t62259;
  double t62261;
  double t62267;
  double t62271;
  double t62272;
  double t61646;
  double t61647;
  double t61654;
  double t61656;
  double t61687;
  double t61711;
  double t61721;
  double t61723;
  double t61724;
  double t61801;
  double t61805;
  double t61808;
  double t61812;
  double t61813;
  double t61814;
  double t62248;
  double t62250;
  double t62253;
  double t61887;
  double t61898;
  double t61903;
  double t61907;
  double t61919;
  double t61927;
  double t61928;
  double t61937;
  double t61941;
  double t61945;
  double t61946;
  double t61951;
  double t61953;
  double t62274;
  double t62275;
  double t62276;
  double t62018;
  double t62029;
  double t62032;
  double t62038;
  double t62039;
  double t62040;
  double t62041;
  double t62053;
  double t62057;
  double t62058;
  double t62060;
  double t62066;
  double t62067;
  double t62073;
  double t62074;
  double t62615;
  double t62616;
  double t62617;
  double t62077;
  double t62079;
  double t62080;
  double t62089;
  double t62090;
  double t62091;
  double t62092;
  double t62095;
  double t62098;
  double t62102;
  double t62103;
  double t62109;
  double t62110;
  double t62111;
  double t62114;
  double t62115;
  double t62116;
  double t62121;
  double t62122;
  double t62126;
  double t62127;
  double t62128;
  double t62129;
  double t62134;
  double t62138;
  double t62139;
  double t62141;
  double t62144;
  double t62146;
  double t62147;
  double t62153;
  double t62154;
  double t62157;
  double t62158;
  double t62254;
  double t62262;
  double t62273;
  double t62277;
  double t62279;
  double t62218;
  double t62225;
  double t62226;
  double t62182;
  double t62192;
  double t62194;
  double t62237;
  double t62241;
  double t62242;
  double t62203;
  double t62211;
  double t62212;
  double t62308;
  double t62309;
  double t62312;
  double t62313;
  double t62315;
  double t62330;
  double t62331;
  double t62333;
  double t62334;
  double t62335;
  double t62342;
  double t62356;
  double t62357;
  double t62359;
  double t62361;
  double t62363;
  double t62368;
  double t62369;
  double t62372;
  double t62375;
  double t62386;
  double t62393;
  double t62394;
  double t62396;
  double t62397;
  double t62399;
  double t62401;
  double t62405;
  double t62407;
  double t62410;
  double t62411;
  double t62416;
  double t62425;
  double t62427;
  double t62429;
  double t62432;
  double t62433;
  double t62434;
  double t62435;
  double t62437;
  double t62443;
  double t62444;
  double t62451;
  double t62504;
  double t62505;
  double t62506;
  double t62507;
  double t62508;
  double t62509;
  double t62514;
  double t62521;
  double t62525;
  double t62526;
  double t62527;
  double t62529;
  double t62530;
  double t62531;
  double t62532;
  double t62534;
  double t62535;
  double t62536;
  double t62542;
  double t62543;
  double t62544;
  double t62545;
  double t62546;
  double t62548;
  double t62552;
  double t62553;
  double t62557;
  double t62558;
  double t62559;
  double t62560;
  double t62561;
  double t62563;
  double t62564;
  double t62566;
  double t62570;
  double t62571;
  double t62573;
  double t62574;
  double t62575;
  double t62577;
  double t62579;
  double t62581;
  double t62583;
  double t62584;
  double t62585;
  double t62586;
  double t62588;
  double t62589;
  double t62591;
  double t62592;
  double t62593;
  double t62594;
  double t62597;
  double t62598;
  double t62599;
  double t62600;
  double t62601;
  double t62679;
  double t62680;
  double t62681;
  double t62198;
  double t62213;
  double t62227;
  double t62244;
  double t62245;
  double t62639;
  double t62640;
  double t62641;
  double t62643;
  double t62644;
  double t62750;
  double t62753;
  double t62754;
  double t62512;
  double t62537;
  double t62550;
  double t62572;
  double t62604;
  double t62605;
  double t62727;
  double t62728;
  double t62729;
  double t62730;
  double t62731;
  double t62732;
  double t62664;
  double t62665;
  double t62666;
  double t62667;
  double t62669;
  double t62670;
  double t62825;
  double t62827;
  double t62828;
  double t62758;
  double t62759;
  double t62762;
  double t62764;
  double t62766;
  double t62767;
  double t62768;
  double t62792;
  double t62793;
  double t62795;
  double t62317;
  double t62337;
  double t62373;
  double t62428;
  double t62452;
  double t62458;
  double t62714;
  double t62715;
  double t62718;
  double t62719;
  double t62722;
  double t62723;
  double t62650;
  double t62655;
  double t62656;
  double t62657;
  double t62658;
  double t62659;
  double t62810;
  double t62812;
  double t62814;
  double t62815;
  double t62816;
  double t62818;
  double t62820;
  double t62823;
  double t62824;
  double t62829;
  double t62832;
  double t62075;
  double t62104;
  double t62118;
  double t62131;
  double t62161;
  double t62162;
  double t62690;
  double t62691;
  double t62692;
  double t62693;
  double t62694;
  double t62696;
  double t62629;
  double t62630;
  double t62631;
  double t62633;
  double t62635;
  double t62636;
  double t62872;
  double t62873;
  double t62874;
  double t62875;
  double t62876;
  double t62878;
  double t62880;
  double t62882;
  double t62883;
  double t62884;
  double t62886;
  double t62776;
  double t62777;
  double t62778;
  double t62781;
  double t62782;
  double t62783;
  double t62784;
  double t62785;
  double t62790;
  double t62799;
  double t62800;
  double t62920;
  double t62922;
  double t62923;
  double t62924;
  double t62925;
  double t62926;
  double t62930;
  double t62935;
  double t62938;
  double t62939;
  double t62941;
  double t61752;
  double t61879;
  double t61905;
  double t61932;
  double t62000;
  double t62002;
  double t62682;
  double t62683;
  double t62684;
  double t62685;
  double t62686;
  double t62687;
  double t62618;
  double t62620;
  double t62621;
  double t62624;
  double t62625;
  double t62626;
  double t62859;
  double t62860;
  double t62861;
  double t62862;
  double t62863;
  double t62864;
  double t62865;
  double t62866;
  double t62867;
  double t62869;
  double t62870;
  double t62743;
  double t62744;
  double t62745;
  double t62746;
  double t62747;
  double t62748;
  double t62749;
  double t62755;
  double t62757;
  double t62769;
  double t62770;
  double t62970;
  double t62971;
  double t62976;
  double t62977;
  double t62906;
  double t62907;
  double t62908;
  double t62909;
  double t57917;
  double t59932;
  double t60161;
  double t62675;
  double t62676;
  double t62677;
  double t62611;
  double t62612;
  double t62613;
  double t62854;
  double t62855;
  double t62856;
  double t62857;
  double t62737;
  double t62739;
  double t62740;
  double t62741;
  t6334 = Cos(var1[13]);
  t12159 = Sin(var1[11]);
  t4899 = Cos(var1[11]);
  t12605 = Sin(var1[13]);
  t18178 = Sin(var1[4]);
  t27754 = Cos(var1[4]);
  t32922 = Cos(var1[5]);
  t13165 = 1.000000000009*t12159*t12605;
  t55004 = Sin(var1[5]);
  t60900 = -1.*t6334;
  t61322 = 1. + t60900;
  t61452 = 0.0999997000009*t12605;
  t61328 = -9.e-12*t61322;
  t61333 = 1. + t61328;
  t61415 = 1.000000000009*t61322;
  t61417 = -1. + t61415;
  t61418 = 0.2*t61417;
  t61444 = -0.2000000000048*t61322;
  t61453 = t61418 + t61444 + t61452;
  t61494 = 4.e-7*var1[13];
  t61505 = 0.1*t61333;
  t61533 = 3.000000000027e-7*t61322;
  t61534 = 9.e-18*t12605;
  t61535 = t61494 + t61505 + t61533 + t61534;
  t61568 = -1.2e-12*var1[13];
  t61621 = 0.0999997000009*t61322;
  t61623 = 3.e-12*t12605;
  t61625 = t61568 + t61621 + t61623;
  t61360 = -3.e-6*t61333;
  t61374 = 3.e-6*t61322;
  t61396 = t61360 + t61374;
  t61462 = 9.e-12*t61322;
  t61471 = t61462 + t60900;
  t61648 = -1.000000000009*t61322;
  t61649 = 1. + t61648;
  t61488 = 0.0999997000009*t6334;
  t61491 = -3.000000000027e-12*t12605;
  t61492 = t61488 + t61491;
  t61398 = 9.e-18*t6334;
  t61411 = 2.999991000027e-7*t12605;
  t61412 = 4.e-7 + t61398 + t61411;
  t61666 = -1.000000000009*t61453*t12605;
  t61485 = 3.e-12*t6334;
  t61486 = -1.2e-12 + t61485 + t61452;
  t61725 = 3.e-6*t6334;
  t61727 = t61374 + t61725;
  t61712 = t61649*t61492;
  t61713 = 3.e-6*t6334*t61535;
  t61714 = t6334*t61625;
  t61717 = 3.e-6*t61412*t12605;
  t61719 = t61486*t12605;
  t59035 = 1.000000000009*t4899*t12605;
  t61658 = -1.*t61396*t61535;
  t61659 = -1.*t61471*t61625;
  t11055 = t4899*t6334;
  t15808 = t11055 + t13165;
  t19464 = t15808*t18178;
  t49201 = t6334*t12159;
  t50243 = -1.000000000009*t4899*t12605;
  t51272 = t49201 + t50243;
  t53298 = t32922*t51272;
  t55635 = -3.e-6*t6334*t55004;
  t55658 = t53298 + t55635;
  t55677 = t27754*t55658;
  t57380 = t19464 + t55677;
  t61650 = t61649*t61453;
  t61753 = -4.e-7*var1[13];
  t61755 = -1. + t61462;
  t61756 = 0.1*t61755;
  t61759 = -3.000000000027e-7*t61322;
  t61760 = t61727*t61625;
  t61762 = -9.e-18*t12605;
  t61764 = t61753 + t61756 + t61759 + t61760 + t61762;
  t61652 = 3.e-6*t61535*t12605;
  t61653 = t61625*t12605;
  t58083 = -1.000000000009*t6334*t12159;
  t59285 = t58083 + t59035;
  t59550 = t59285*t18178;
  t59605 = 1.000000000009*t4899*t6334;
  t59827 = t59605 + t13165;
  t59830 = t32922*t59827;
  t59832 = -3.000000000027e-6*t12605*t55004;
  t59834 = t59830 + t59832;
  t59851 = t27754*t59834;
  t59852 = t59550 + t59851;
  t61414 = -1.*t61396*t61412;
  t61455 = -1.000000000009*t6334*t61453;
  t61487 = -1.*t61471*t61486;
  t61493 = -1.000000000009*t61492*t12605;
  t61546 = -3.000000000027e-6*t61535*t12605;
  t61880 = -1.*t61727*t61625;
  t61884 = t61494 + t61505 + t61533 + t61880 + t61534;
  t61627 = -1.000000000009*t61625*t12605;
  t61862 = t61471*t12159;
  t61865 = t61862 + t59035;
  t61821 = t4899*t61471;
  t61851 = -1.000000000009*t12159*t12605;
  t61852 = t61821 + t61851;
  t62019 = -0.2*t12159;
  t62022 = t4899*t61625;
  t62024 = -1.*t12159*t61453;
  t62025 = t62019 + t62022 + t62024;
  t61957 = -1.*t61649*t12159;
  t61959 = t4899*t12605;
  t61966 = t61957 + t61959;
  t62007 = -1. + t4899;
  t62009 = 0.2*t62007;
  t62011 = t12159*t61625;
  t62012 = t4899*t61453;
  t62015 = t62009 + t62011 + t62012;
  t61982 = t4899*t61649;
  t61983 = t12159*t12605;
  t61984 = t61982 + t61983;
  t62048 = t4899*t61492;
  t62049 = t12159*t61486;
  t62052 = t62048 + t62049;
  t62042 = -1.*t12159*t61492;
  t62044 = t4899*t61486;
  t62045 = t62042 + t62044;
  t61730 = t4899*t61727*t18178;
  t61731 = t61727*t32922*t12159;
  t61734 = t61731 + t55004;
  t61736 = t27754*t61734;
  t61748 = t61730 + t61736;
  t61806 = -9.e-18*t6334;
  t61810 = -2.999991000027e-7*t12605;
  t61855 = t61852*t18178;
  t61867 = t32922*t61865;
  t61873 = -1.*t61396*t55004;
  t61875 = t61867 + t61873;
  t61876 = t27754*t61875;
  t61878 = t61855 + t61876;
  t62082 = t61727*t12159*t62015;
  t62087 = t4899*t61727*t62025;
  t62088 = t61753 + t61756 + t61759 + t62082 + t62087 + t61762;
  t62105 = -1.*t61727*t12159*t62015;
  t62107 = -1.*t4899*t61727*t62025;
  t62108 = t61494 + t61505 + t61533 + t62105 + t62107 + t61534;
  t61980 = t61966*t18178;
  t61986 = t32922*t61984;
  t61991 = -3.e-6*t12605*t55004;
  t61994 = t61986 + t61991;
  t61995 = t27754*t61994;
  t61998 = t61980 + t61995;
  t62172 = Sin(var1[3]);
  t62183 = Cos(var1[3]);
  t62179 = t61396*t32922;
  t62180 = t61865*t55004;
  t62181 = t62179 + t62180;
  t62188 = t27754*t61852;
  t62189 = -1.*t18178*t61875;
  t62190 = t62188 + t62189;
  t62199 = 3.e-6*t6334*t32922;
  t62200 = t51272*t55004;
  t62202 = t62199 + t62200;
  t62204 = t27754*t15808;
  t62205 = -1.*t18178*t55658;
  t62209 = t62204 + t62205;
  t62215 = 3.000000000027e-6*t32922*t12605;
  t62216 = t59827*t55004;
  t62217 = t62215 + t62216;
  t62222 = t27754*t59285;
  t62223 = -1.*t18178*t59834;
  t62224 = t62222 + t62223;
  t62228 = 3.e-6*t32922*t12605;
  t62231 = t61984*t55004;
  t62236 = t62228 + t62231;
  t62238 = t27754*t61966;
  t62239 = -1.*t18178*t61994;
  t62240 = t62238 + t62239;
  t62285 = -1.*t32922;
  t62287 = t61727*t12159*t55004;
  t62291 = t62285 + t62287;
  t62112 = t62025*t61852;
  t62297 = t32922*t62015;
  t62299 = -1.*t61535*t55004;
  t62301 = t62297 + t62299;
  t62293 = t32922*t61535;
  t62294 = t62015*t55004;
  t62295 = t62293 + t62294;
  t62124 = -1.*t62025*t61966;
  t62319 = t62291*t62295;
  t62320 = t61734*t62301;
  t62323 = t62087 + t62319 + t62320;
  t62076 = t4899*t61727*t62045;
  t62094 = -1.*t62045*t61966;
  t62097 = -1.*t62025*t15808;
  t62351 = t32922*t62052;
  t62352 = -1.*t61412*t55004;
  t62353 = t62351 + t62352;
  t62344 = t32922*t61412;
  t62345 = t62052*t55004;
  t62346 = t62344 + t62345;
  t62028 = -1.*t62025*t61852;
  t62036 = t62025*t61966;
  t62046 = t62045*t61966;
  t62055 = t62025*t15808;
  t62062 = -1.*t62025*t59285;
  t62065 = -1.*t62045*t61852;
  t62296 = -1.*t62291*t62295;
  t62303 = -1.*t61734*t62301;
  t62307 = t62107 + t62296 + t62303;
  t62136 = -1.*t4899*t61727*t62045;
  t62149 = t62025*t59285;
  t62151 = t62045*t61852;
  t62310 = t62295*t62181;
  t62461 = t62025*t18178;
  t62462 = t27754*t62301;
  t62463 = t62461 + t62462;
  t62483 = t27754*t62025;
  t62485 = -1.*t18178*t62301;
  t62486 = t62483 + t62485;
  t62467 = -1.*t61748*t62463;
  t62469 = t4899*t61727*t27754;
  t62473 = -1.*t18178*t61734;
  t62475 = t62469 + t62473;
  t62502 = -1.*t62475*t62486;
  t62503 = t62296 + t62467 + t62502;
  t62430 = -1.*t62291*t62346;
  t62439 = t62346*t62181;
  t62441 = t62295*t62217;
  t62516 = t62045*t18178;
  t62517 = t27754*t62353;
  t62518 = t62516 + t62517;
  t62522 = t27754*t62045;
  t62523 = -1.*t18178*t62353;
  t62524 = t62522 + t62523;
  t62332 = -1.*t62295*t62236;
  t62538 = t61748*t62463;
  t62539 = t62475*t62486;
  t62541 = t62319 + t62538 + t62539;
  t62350 = t62291*t62346;
  t62364 = -1.*t62295*t62202;
  t62366 = -1.*t62346*t62236;
  t62377 = -1.*t62295*t62181;
  t62414 = -1.*t62346*t62181;
  t62415 = -1.*t62295*t62217;
  t62395 = t62295*t62236;
  t62402 = t62295*t62202;
  t62403 = t62346*t62236;
  t62257 = t62183*t62202;
  t62259 = -1.*t62172*t62209;
  t62261 = t62257 + t62259;
  t62267 = t62183*t62217;
  t62271 = -1.*t62172*t62224;
  t62272 = t62267 + t62271;
  t61646 = t61414 + t61455 + t61487 + t61493 + t61546 + t61627;
  t61647 = 3.e-6*t12605*t61646;
  t61654 = t61650 + t61652 + t61653;
  t61656 = 3.000000000027e-6*t12605*t61654;
  t61687 = t61658 + t61659 + t61666;
  t61711 = 3.e-6*t6334*t61687;
  t61721 = t61712 + t61713 + t61714 + t61717 + t61666 + t61719;
  t61723 = t61396*t61721;
  t61724 = t61647 + t61656 + t61711 + t61723;
  t61801 = 3.e-6*t6334*t61764;
  t61805 = -0.2000000000018*t12605;
  t61808 = t61727*t61486;
  t61812 = -4.e-7 + t61806 + t61808 + t61810;
  t61813 = 3.e-6*t61812*t12605;
  t61814 = t61712 + t61801 + t61713 + t61714 + t61805 + t61813 + t61717 + t61666 + t61719;
  t62248 = t62183*t62181;
  t62250 = -1.*t62172*t62190;
  t62253 = t62248 + t62250;
  t61887 = t61396*t61884;
  t61898 = -0.2*t12605;
  t61903 = t61658 + t61887 + t61659 + t61898 + t61666;
  t61907 = t61328 + t6334;
  t61919 = 0.2*t61907;
  t61927 = 3.e-6*t61764*t12605;
  t61928 = t61919 + t61650 + t61927 + t61652 + t61653;
  t61937 = -0.2*t6334;
  t61941 = -1.*t61727*t61486;
  t61945 = 4.e-7 + t61398 + t61941 + t61411;
  t61946 = t61396*t61945;
  t61951 = 3.000000000027e-6*t61884*t12605;
  t61953 = t61937 + t61414 + t61946 + t61455 + t61487 + t61493 + t61546 + t61951 + t61627;
  t62274 = t62183*t62236;
  t62275 = -1.*t62172*t62240;
  t62276 = t62274 + t62275;
  t62018 = -1.*t62015*t61865;
  t62029 = t61658 + t62018 + t62028;
  t62032 = t15808*t62029;
  t62038 = t62015*t61984;
  t62039 = t61652 + t62036 + t62038;
  t62040 = t59285*t62039;
  t62041 = t62015*t51272;
  t62053 = t62052*t61984;
  t62057 = t61713 + t61717 + t62041 + t62046 + t62053 + t62055;
  t62058 = t61852*t62057;
  t62060 = -1.*t62052*t61865;
  t62066 = -1.*t62015*t59827;
  t62067 = t61414 + t61546 + t62060 + t62062 + t62065 + t62066;
  t62073 = t61966*t62067;
  t62074 = t62032 + t62040 + t62058 + t62073;
  t62615 = t62183*t62291;
  t62616 = -1.*t62172*t62475;
  t62617 = t62615 + t62616;
  t62077 = t61727*t12159*t62052;
  t62079 = -4.e-7 + t61806 + t62076 + t62077 + t61810;
  t62080 = t62079*t61966;
  t62089 = t62088*t15808;
  t62090 = -3.e-6*t6334*t61535;
  t62091 = -3.e-6*t61412*t12605;
  t62092 = -1.*t62015*t51272;
  t62095 = -1.*t62052*t61984;
  t62098 = t62090 + t62091 + t62092 + t62094 + t62095 + t62097;
  t62102 = t4899*t61727*t62098;
  t62103 = t62080 + t62089 + t62102;
  t62109 = t62108*t61852;
  t62110 = t61396*t61535;
  t62111 = t62015*t61865;
  t62114 = t62110 + t62111 + t62112;
  t62115 = t4899*t61727*t62114;
  t62116 = t62109 + t62115;
  t62121 = t62088*t61966;
  t62122 = -3.e-6*t61535*t12605;
  t62126 = -1.*t62015*t61984;
  t62127 = t62122 + t62124 + t62126;
  t62128 = t4899*t61727*t62127;
  t62129 = t62121 + t62128;
  t62134 = t62108*t59285;
  t62138 = -1.*t61727*t12159*t62052;
  t62139 = 4.e-7 + t61398 + t62136 + t62138 + t61411;
  t62141 = t62139*t61852;
  t62144 = t61396*t61412;
  t62146 = 3.000000000027e-6*t61535*t12605;
  t62147 = t62052*t61865;
  t62153 = t62015*t59827;
  t62154 = t62144 + t62146 + t62147 + t62149 + t62151 + t62153;
  t62157 = t4899*t61727*t62154;
  t62158 = t62134 + t62141 + t62157;
  t62254 = 0.043*t59852*t62253;
  t62262 = 0.043*t61998*t62261;
  t62273 = 0.043*t61878*t62272;
  t62277 = 0.043*t57380*t62276;
  t62279 = t62254 + t62262 + t62273 + t62277;
  t62218 = t62172*t62217;
  t62225 = t62183*t62224;
  t62226 = t62218 + t62225;
  t62182 = t62172*t62181;
  t62192 = t62183*t62190;
  t62194 = t62182 + t62192;
  t62237 = t62172*t62236;
  t62241 = t62183*t62240;
  t62242 = t62237 + t62241;
  t62203 = t62172*t62202;
  t62211 = t62183*t62209;
  t62212 = t62203 + t62211;
  t62308 = t62181*t62307;
  t62309 = t61875*t62301;
  t62312 = t62112 + t62309 + t62310;
  t62313 = t62291*t62312;
  t62315 = t62308 + t62313;
  t62330 = t62236*t62323;
  t62331 = -1.*t62301*t61994;
  t62333 = t62124 + t62331 + t62332;
  t62334 = t62291*t62333;
  t62335 = t62330 + t62334;
  t62342 = t62202*t62323;
  t62356 = t61734*t62353;
  t62357 = t62076 + t62350 + t62356;
  t62359 = t62236*t62357;
  t62361 = -1.*t55658*t62301;
  t62363 = -1.*t62353*t61994;
  t62368 = t62094 + t62097 + t62361 + t62363 + t62364 + t62366;
  t62369 = t62291*t62368;
  t62372 = t62342 + t62359 + t62369;
  t62375 = -1.*t61875*t62301;
  t62386 = t62028 + t62375 + t62377;
  t62393 = t62202*t62386;
  t62394 = t62301*t61994;
  t62396 = t62036 + t62394 + t62395;
  t62397 = t62217*t62396;
  t62399 = t55658*t62301;
  t62401 = t62353*t61994;
  t62405 = t62046 + t62055 + t62399 + t62401 + t62402 + t62403;
  t62407 = t62181*t62405;
  t62410 = -1.*t61875*t62353;
  t62411 = -1.*t62301*t59834;
  t62416 = t62062 + t62065 + t62410 + t62411 + t62414 + t62415;
  t62425 = t62236*t62416;
  t62427 = t62393 + t62397 + t62407 + t62425;
  t62429 = t62217*t62307;
  t62432 = -1.*t61734*t62353;
  t62433 = t62136 + t62430 + t62432;
  t62434 = t62181*t62433;
  t62435 = t61875*t62353;
  t62437 = t62301*t59834;
  t62443 = t62149 + t62151 + t62435 + t62437 + t62439 + t62441;
  t62444 = t62291*t62443;
  t62451 = t62429 + t62434 + t62444;
  t62504 = t61878*t62503;
  t62505 = t61878*t62463;
  t62506 = t62190*t62486;
  t62507 = t62310 + t62505 + t62506;
  t62508 = t61748*t62507;
  t62509 = t62504 + t62508;
  t62514 = t59852*t62503;
  t62521 = -1.*t61748*t62518;
  t62525 = -1.*t62475*t62524;
  t62526 = t62430 + t62521 + t62525;
  t62527 = t61878*t62526;
  t62529 = t61878*t62518;
  t62530 = t62190*t62524;
  t62531 = t62463*t59852;
  t62532 = t62486*t62224;
  t62534 = t62439 + t62441 + t62529 + t62530 + t62531 + t62532;
  t62535 = t61748*t62534;
  t62536 = t62514 + t62527 + t62535;
  t62542 = t61998*t62541;
  t62543 = -1.*t62463*t61998;
  t62544 = -1.*t62486*t62240;
  t62545 = t62332 + t62543 + t62544;
  t62546 = t61748*t62545;
  t62548 = t62542 + t62546;
  t62552 = t57380*t62541;
  t62553 = t61748*t62518;
  t62557 = t62475*t62524;
  t62558 = t62350 + t62553 + t62557;
  t62559 = t61998*t62558;
  t62560 = -1.*t57380*t62463;
  t62561 = -1.*t62209*t62486;
  t62563 = -1.*t62518*t61998;
  t62564 = -1.*t62524*t62240;
  t62566 = t62364 + t62366 + t62560 + t62561 + t62563 + t62564;
  t62570 = t61748*t62566;
  t62571 = t62552 + t62559 + t62570;
  t62573 = -1.*t61878*t62463;
  t62574 = -1.*t62190*t62486;
  t62575 = t62377 + t62573 + t62574;
  t62577 = t57380*t62575;
  t62579 = -1.*t61878*t62518;
  t62581 = -1.*t62190*t62524;
  t62583 = -1.*t62463*t59852;
  t62584 = -1.*t62486*t62224;
  t62585 = t62414 + t62415 + t62579 + t62581 + t62583 + t62584;
  t62586 = t61998*t62585;
  t62588 = t62463*t61998;
  t62589 = t62486*t62240;
  t62591 = t62395 + t62588 + t62589;
  t62592 = t59852*t62591;
  t62593 = t57380*t62463;
  t62594 = t62209*t62486;
  t62597 = t62518*t61998;
  t62598 = t62524*t62240;
  t62599 = t62402 + t62403 + t62593 + t62594 + t62597 + t62598;
  t62600 = t61878*t62599;
  t62601 = t62577 + t62586 + t62592 + t62600;
  t62679 = t62172*t62291;
  t62680 = t62183*t62475;
  t62681 = t62679 + t62680;
  t62198 = 0.043*t59852*t62194;
  t62213 = 0.043*t61998*t62212;
  t62227 = 0.043*t61878*t62226;
  t62244 = 0.043*t57380*t62242;
  t62245 = t62198 + t62213 + t62227 + t62244;
  t62639 = 0.043*t62253*t62226;
  t62640 = 0.043*t62194*t62272;
  t62641 = 0.043*t62261*t62242;
  t62643 = 0.043*t62212*t62276;
  t62644 = t62639 + t62640 + t62641 + t62643;
  t62750 = t61998*t62575;
  t62753 = t61878*t62591;
  t62754 = t62750 + t62753;
  t62512 = 0.043*t57380*t62509;
  t62537 = 0.043*t61998*t62536;
  t62550 = 0.043*t59852*t62548;
  t62572 = 0.043*t61878*t62571;
  t62604 = 0.043*t61748*t62601;
  t62605 = t62512 + t62537 + t62550 + t62572 + t62604;
  t62727 = 0.043*t62212*t62509;
  t62728 = 0.043*t62242*t62536;
  t62729 = 0.043*t62226*t62548;
  t62730 = 0.043*t62194*t62571;
  t62731 = 0.043*t62681*t62601;
  t62732 = t62727 + t62728 + t62729 + t62730 + t62731;
  t62664 = 0.043*t62261*t62509;
  t62665 = 0.043*t62276*t62536;
  t62666 = 0.043*t62272*t62548;
  t62667 = 0.043*t62253*t62571;
  t62669 = 0.043*t62617*t62601;
  t62670 = t62664 + t62665 + t62666 + t62667 + t62669;
  t62825 = t62236*t62386;
  t62827 = t62181*t62396;
  t62828 = t62825 + t62827;
  t62758 = -3.e-6*t61322;
  t62759 = -3.e-6*t6334;
  t62762 = t62758 + t62759;
  t62764 = 0.2*t62762;
  t62766 = t61396*t61654;
  t62767 = 3.e-6*t12605*t61687;
  t62768 = t62764 + t62766 + t62767;
  t62792 = t61966*t62029;
  t62793 = t61852*t62039;
  t62795 = t62792 + t62793;
  t62317 = 0.043*t57380*t62315;
  t62337 = 0.043*t59852*t62335;
  t62373 = 0.043*t61878*t62372;
  t62428 = 0.043*t61748*t62427;
  t62452 = 0.043*t61998*t62451;
  t62458 = t62317 + t62337 + t62373 + t62428 + t62452;
  t62714 = 0.043*t62212*t62315;
  t62715 = 0.043*t62226*t62335;
  t62718 = 0.043*t62194*t62372;
  t62719 = 0.043*t62681*t62427;
  t62722 = 0.043*t62242*t62451;
  t62723 = t62714 + t62715 + t62718 + t62719 + t62722;
  t62650 = 0.043*t62261*t62315;
  t62655 = 0.043*t62272*t62335;
  t62656 = 0.043*t62253*t62372;
  t62657 = 0.043*t62617*t62427;
  t62658 = 0.043*t62276*t62451;
  t62659 = t62650 + t62655 + t62656 + t62657 + t62658;
  t62810 = 0.000271*t62217*t61878;
  t62812 = 2.e-6*t62236*t57380;
  t62814 = 0.000271*t62181*t59852;
  t62815 = 2.e-6*t62202*t61998;
  t62816 = 0.043*t62451*t62509;
  t62818 = 0.043*t62315*t62536;
  t62820 = 0.043*t62372*t62548;
  t62823 = 0.043*t62427*t62754;
  t62824 = 0.043*t62335*t62571;
  t62829 = 0.043*t62828*t62601;
  t62832 = t62810 + t62812 + t62814 + t62815 + t62816 + t62818 + t62820 + t62823 + t62824 + t62829;
  t62075 = 0.043*t62074*t61748;
  t62104 = 0.043*t62103*t61878;
  t62118 = 0.043*t62116*t57380;
  t62131 = 0.043*t62129*t59852;
  t62161 = 0.043*t62158*t61998;
  t62162 = t62075 + t62104 + t62118 + t62131 + t62161;
  t62690 = 0.043*t62074*t62681;
  t62691 = 0.043*t62103*t62194;
  t62692 = 0.043*t62116*t62212;
  t62693 = 0.043*t62129*t62226;
  t62694 = 0.043*t62158*t62242;
  t62696 = t62690 + t62691 + t62692 + t62693 + t62694;
  t62629 = 0.043*t62074*t62617;
  t62630 = 0.043*t62103*t62253;
  t62631 = 0.043*t62116*t62261;
  t62633 = 0.043*t62129*t62272;
  t62635 = 0.043*t62158*t62276;
  t62636 = t62629 + t62630 + t62631 + t62633 + t62635;
  t62872 = 2.e-6*t61966*t62202;
  t62873 = 0.000271*t59285*t62181;
  t62874 = 2.e-6*t15808*t62236;
  t62875 = 0.000271*t61852*t62217;
  t62876 = 0.043*t62158*t62315;
  t62878 = 0.043*t62103*t62335;
  t62880 = 0.043*t62074*t62828;
  t62882 = 0.043*t62129*t62372;
  t62883 = 0.043*t62795*t62427;
  t62884 = 0.043*t62116*t62451;
  t62886 = t62872 + t62873 + t62874 + t62875 + t62876 + t62878 + t62880 + t62882 + t62883 + t62884;
  t62776 = 0.000271*t59285*t61878;
  t62777 = 2.e-6*t61966*t57380;
  t62778 = 0.000271*t61852*t59852;
  t62781 = 2.e-6*t15808*t61998;
  t62782 = 0.043*t62158*t62509;
  t62783 = 0.043*t62116*t62536;
  t62784 = 0.043*t62103*t62548;
  t62785 = 0.043*t62074*t62754;
  t62790 = 0.043*t62129*t62571;
  t62799 = 0.043*t62795*t62601;
  t62800 = t62776 + t62777 + t62778 + t62781 + t62782 + t62783 + t62784 + t62785 + t62790 + t62799;
  t62920 = 6.e-12*t6334*t61966;
  t62922 = 0.000271*t61396*t59285;
  t62923 = 8.13000000007317e-10*t12605*t61852;
  t62924 = 6.e-12*t12605*t15808;
  t62925 = 0.043*t61953*t62116;
  t62926 = 0.043*t61814*t62129;
  t62930 = 0.043*t61724*t62795;
  t62935 = 0.043*t61928*t62103;
  t62938 = 0.043*t62768*t62074;
  t62939 = 0.043*t61903*t62158;
  t62941 = t62920 + t62922 + t62923 + t62924 + t62925 + t62926 + t62930 + t62935 + t62938 + t62939;
  t61752 = 0.043*t61724*t61748;
  t61879 = 0.043*t61814*t61878;
  t61905 = 0.043*t61903*t57380;
  t61932 = 0.043*t61928*t59852;
  t62000 = 0.043*t61953*t61998;
  t62002 = t61752 + t61879 + t61905 + t61932 + t62000;
  t62682 = 0.043*t61724*t62681;
  t62683 = 0.043*t61814*t62194;
  t62684 = 0.043*t61903*t62212;
  t62685 = 0.043*t61928*t62226;
  t62686 = 0.043*t61953*t62242;
  t62687 = t62682 + t62683 + t62684 + t62685 + t62686;
  t62618 = 0.043*t61724*t62617;
  t62620 = 0.043*t61814*t62253;
  t62621 = 0.043*t61903*t62261;
  t62624 = 0.043*t61928*t62272;
  t62625 = 0.043*t61953*t62276;
  t62626 = t62618 + t62620 + t62621 + t62624 + t62625;
  t62859 = 6.e-12*t12605*t62202;
  t62860 = 8.13000000007317e-10*t12605*t62181;
  t62861 = 6.e-12*t6334*t62236;
  t62862 = 0.000271*t61396*t62217;
  t62863 = 0.043*t61953*t62315;
  t62864 = 0.043*t61814*t62335;
  t62865 = 0.043*t61724*t62828;
  t62866 = 0.043*t61928*t62372;
  t62867 = 0.043*t62768*t62427;
  t62869 = 0.043*t61903*t62451;
  t62870 = t62859 + t62860 + t62861 + t62862 + t62863 + t62864 + t62865 + t62866 + t62867 + t62869;
  t62743 = 8.13000000007317e-10*t12605*t61878;
  t62744 = 6.e-12*t12605*t57380;
  t62745 = 0.000271*t61396*t59852;
  t62746 = 6.e-12*t6334*t61998;
  t62747 = 0.043*t61953*t62509;
  t62748 = 0.043*t61903*t62536;
  t62749 = 0.043*t61814*t62548;
  t62755 = 0.043*t61724*t62754;
  t62757 = 0.043*t61928*t62571;
  t62769 = 0.043*t62768*t62601;
  t62770 = t62743 + t62744 + t62745 + t62746 + t62747 + t62748 + t62749 + t62755 + t62757 + t62769;
  t62970 = 0.0042999871*t61953;
  t62971 = -5.16e-14*t61814;
  t62976 = -1.72e-8*t61724;
  t62977 = t62970 + t62971 + t62976;
  t62906 = -5.16e-14*t62103;
  t62907 = -1.72e-8*t62074;
  t62908 = 0.0042999871*t62158;
  t62909 = t62906 + t62907 + t62908;
  t57917 = 0.0042999871*t57380;
  t59932 = -5.16e-14*t59852;
  t60161 = t57917 + t59932;
  t62675 = 0.0042999871*t62212;
  t62676 = -5.16e-14*t62226;
  t62677 = t62675 + t62676;
  t62611 = 0.0042999871*t62261;
  t62612 = -5.16e-14*t62272;
  t62613 = t62611 + t62612;
  t62854 = -5.16e-14*t62372;
  t62855 = -1.72e-8*t62427;
  t62856 = 0.0042999871*t62451;
  t62857 = t62854 + t62855 + t62856;
  t62737 = 0.0042999871*t62536;
  t62739 = -5.16e-14*t62571;
  t62740 = -1.72e-8*t62601;
  t62741 = t62737 + t62739 + t62740;
  p_output1[0]=var2[13]*(-0.5*(0.086*t59852*t61878 + 0.086*t57380*t61998)*var2[0] - 0.5*t62279*var2[1] - 0.5*t62245*var2[2] - 0.5*t62605*var2[3] - 0.5*t62458*var2[4] - 0.5*t62162*var2[5] - 0.5*t62002*var2[11] - 0.5*t60161*var2[13]);
  p_output1[1]=var2[13]*(-0.5*t62279*var2[0] - 0.5*(0.086*t62253*t62272 + 0.086*t62261*t62276)*var2[1] - 0.5*t62644*var2[2] - 0.5*t62670*var2[3] - 0.5*t62659*var2[4] - 0.5*t62636*var2[5] - 0.5*t62626*var2[11] - 0.5*t62613*var2[13]);
  p_output1[2]=var2[13]*(-0.5*t62245*var2[0] - 0.5*t62644*var2[1] - 0.5*(0.086*t62194*t62226 + 0.086*t62212*t62242)*var2[2] - 0.5*t62732*var2[3] - 0.5*t62723*var2[4] - 0.5*t62696*var2[5] - 0.5*t62687*var2[11] - 0.5*t62677*var2[13]);
  p_output1[3]=var2[13]*(-0.5*t62605*var2[0] - 0.5*t62670*var2[1] - 0.5*t62732*var2[2] - 0.5*(0.000542*t59852*t61878 + 4.e-6*t57380*t61998 + 0.086*t62509*t62536 + 0.086*t62548*t62571 + 0.086*t62601*t62754)*var2[3] - 0.5*t62832*var2[4] - 0.5*t62800*var2[5] - 0.5*t62770*var2[11] - 0.5*t62741*var2[13]);
  p_output1[4]=var2[13]*(-0.5*t62458*var2[0] - 0.5*t62659*var2[1] - 0.5*t62723*var2[2] - 0.5*t62832*var2[3] - 0.5*(0.000542*t62181*t62217 + 4.e-6*t62202*t62236 + 0.086*t62335*t62372 + 0.086*t62315*t62451 + 0.086*t62427*t62828)*var2[4] - 0.5*t62886*var2[5] - 0.5*t62870*var2[11] - 0.5*t62857*var2[13]);
  p_output1[5]=var2[13]*(-0.5*t62162*var2[0] - 0.5*t62636*var2[1] - 0.5*t62696*var2[2] - 0.5*t62800*var2[3] - 0.5*t62886*var2[4] - 0.5*(0.000542*t59285*t61852 + 4.e-6*t15808*t61966 + 0.086*t62103*t62129 + 0.086*t62116*t62158 + 0.086*t62074*t62795)*var2[5] - 0.5*t62941*var2[11] - 0.5*t62909*var2[13]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=var2[13]*(-0.5*t62002*var2[0] - 0.5*t62626*var2[1] - 0.5*t62687*var2[2] - 0.5*t62770*var2[3] - 0.5*t62870*var2[4] - 0.5*t62941*var2[5] - 0.5*(1.62600000001463e-9*t12605*t61396 + 0.086*t61814*t61928 + 0.086*t61903*t61953 + 0.086*t61724*t62768 + 3.6e-17*t12605*t6334)*var2[11] - 0.5*t62977*var2[13]);
  p_output1[12]=0;
  p_output1[13]=(-0.5*t60161*var2[0] - 0.5*t62613*var2[1] - 0.5*t62677*var2[2] - 0.5*t62741*var2[3] - 0.5*t62857*var2[4] - 0.5*t62909*var2[5] - 0.5*t62977*var2[11])*var2[13];
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec14_minitaur.hh"

namespace FrontStance
{

void Ce2_vec14_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
