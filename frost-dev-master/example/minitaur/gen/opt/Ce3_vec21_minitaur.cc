/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:13:58 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t19464;
  double t22021;
  double t22280;
  double t29754;
  double t33206;
  double t40375;
  double t8310;
  double t41653;
  double t41656;
  double t38;
  double t43873;
  double t43802;
  double t45282;
  double t51194;
  double t51220;
  double t51472;
  double t47146;
  double t51350;
  double t52031;
  double t52111;
  double t50449;
  double t50938;
  double t50943;
  double t51007;
  double t53732;
  double t53822;
  double t54060;
  double t54527;
  double t54780;
  double t9558;
  double t41686;
  double t42681;
  double t46796;
  double t47444;
  double t47460;
  double t48569;
  double t48677;
  double t51074;
  double t52113;
  double t52119;
  double t52226;
  double t52686;
  double t52806;
  double t52825;
  double t52836;
  double t52918;
  double t52955;
  double t52976;
  double t53073;
  double t53633;
  double t54790;
  double t54791;
  double t54848;
  double t54907;
  double t54914;
  double t55552;
  double t55690;
  double t55797;
  double t55847;
  double t55864;
  double t55879;
  double t57271;
  double t57358;
  double t57368;
  double t57431;
  double t57709;
  double t58366;
  double t58882;
  double t58985;
  double t59462;
  double t61714;
  double t61723;
  double t61814;
  double t61873;
  double t62066;
  double t62067;
  double t62080;
  double t62087;
  double t62089;
  double t62111;
  double t61659;
  double t62009;
  double t62205;
  double t62299;
  double t62312;
  double t62364;
  double t62373;
  double t62375;
  double t62377;
  double t62411;
  double t62427;
  double t62428;
  double t62514;
  double t62517;
  double t62522;
  double t62523;
  double t62524;
  double t62525;
  double t62541;
  double t62545;
  double t62547;
  double t62550;
  double t62552;
  double t62553;
  double t62535;
  double t62536;
  double t62537;
  double t62310;
  double t62529;
  double t62531;
  double t61412;
  double t61414;
  double t61455;
  double t62571;
  double t62573;
  double t62574;
  double t62666;
  double t62677;
  double t62681;
  double t63895;
  double t63916;
  double t63960;
  double t63966;
  double t63977;
  double t64052;
  double t64054;
  double t64233;
  double t62584;
  double t62617;
  double t67971;
  double t67977;
  double t68073;
  double t62785;
  double t62923;
  double t63059;
  double t63125;
  double t68099;
  double t68117;
  double t68643;
  double t68699;
  double t62586;
  double t62589;
  double t62592;
  double t62620;
  double t62625;
  double t62628;
  double t68834;
  double t68848;
  double t62792;
  double t62829;
  double t62832;
  double t68999;
  double t69016;
  double t62954;
  double t62955;
  double t62997;
  double t69073;
  double t69088;
  double t63062;
  double t63077;
  double t63078;
  double t69131;
  double t69167;
  double t63137;
  double t63138;
  double t63528;
  double t67930;
  double t70240;
  double t70241;
  double t70242;
  double t70273;
  double t70977;
  double t71856;
  double t71938;
  double t68235;
  double t68778;
  double t68867;
  double t73606;
  double t73613;
  double t73614;
  double t69054;
  double t69106;
  double t74033;
  double t74034;
  double t74312;
  double t74323;
  double t74324;
  double t74325;
  double t74342;
  double t74343;
  double t74345;
  double t72233;
  double t67931;
  double t67955;
  double t72396;
  double t72834;
  double t68276;
  double t68388;
  double t73470;
  double t68783;
  double t68789;
  double t73659;
  double t73669;
  double t68874;
  double t68888;
  double t73679;
  double t73700;
  double t69056;
  double t69061;
  double t73871;
  double t73876;
  double t69107;
  double t69124;
  double t73905;
  double t73909;
  double t73921;
  double t74508;
  double t74509;
  double t74522;
  double t74528;
  double t74860;
  double t74869;
  double t74875;
  double t74884;
  double t74909;
  double t74915;
  double t73941;
  double t73942;
  double t73943;
  double t74594;
  double t74595;
  double t73948;
  double t73949;
  double t74027;
  double t74602;
  double t74609;
  double t74635;
  double t74641;
  double t74663;
  double t74679;
  double t83534;
  double t83535;
  double t83695;
  double t84442;
  double t86214;
  double t86231;
  double t86232;
  double t73562;
  double t73563;
  double t73567;
  double t73596;
  double t83542;
  double t83682;
  double t84447;
  double t84453;
  double t86233;
  double t86240;
  double t86246;
  double t73857;
  double t73824;
  double t86655;
  double t86276;
  double t86284;
  double t86285;
  double t86645;
  double t86669;
  double t86612;
  double t86617;
  double t73587;
  double t73602;
  double t87134;
  double t87278;
  double t87280;
  double t87285;
  double t87287;
  double t87289;
  double t87294;
  double t87297;
  double t87305;
  double t73825;
  double t73827;
  double t73858;
  double t73859;
  double t87325;
  double t87336;
  double t87430;
  double t87431;
  double t70238;
  double t70239;
  double t87589;
  double t87593;
  double t87946;
  double t87947;
  double t87968;
  double t87999;
  double t88003;
  double t88005;
  double t88110;
  double t88114;
  double t88116;
  double t88123;
  double t88124;
  double t88144;
  double t88154;
  double t88155;
  double t88159;
  double t88186;
  double t88200;
  double t88207;
  double t87281;
  double t87339;
  double t87345;
  double t88283;
  double t88285;
  double t88286;
  double t88269;
  double t88270;
  double t88272;
  double t87554;
  double t87562;
  double t87583;
  double t87587;
  double t87743;
  double t87875;
  double t87877;
  double t87995;
  double t88006;
  double t88014;
  double t88325;
  double t88332;
  double t88333;
  double t88347;
  double t88348;
  double t88349;
  double t88351;
  double t88352;
  double t88353;
  double t87940;
  double t87982;
  double t87988;
  double t88278;
  double t88293;
  double t88294;
  double t88316;
  double t88317;
  double t88308;
  double t88309;
  t19464 = Cos(var1[20]);
  t22021 = -1.*t19464;
  t22280 = 1. + t22021;
  t29754 = 3.e-6*t22280;
  t33206 = 3.e-6*t19464;
  t40375 = t29754 + t33206;
  t8310 = Cos(var1[5]);
  t41653 = Sin(var1[18]);
  t41656 = Sin(var1[5]);
  t38 = Sin(var1[3]);
  t43873 = Cos(var1[18]);
  t43802 = Cos(var1[3]);
  t45282 = Cos(var1[4]);
  t51194 = 9.e-12*t22280;
  t51220 = t51194 + t22021;
  t51472 = Sin(var1[20]);
  t47146 = Sin(var1[4]);
  t51350 = t51220*t41653;
  t52031 = 1.000000000009*t43873*t51472;
  t52111 = t51350 + t52031;
  t50449 = -9.e-12*t22280;
  t50938 = 1. + t50449;
  t50943 = -3.e-6*t50938;
  t51007 = t50943 + t29754;
  t53732 = -1.000000000009*t22280;
  t53822 = 1. + t53732;
  t54060 = t43873*t53822;
  t54527 = t41653*t51472;
  t54780 = t54060 + t54527;
  t9558 = -1.*t8310;
  t41686 = t40375*t41653*t41656;
  t42681 = t9558 + t41686;
  t46796 = t43873*t40375*t45282;
  t47444 = t40375*t8310*t41653;
  t47460 = t47444 + t41656;
  t48569 = -1.*t47146*t47460;
  t48677 = t46796 + t48569;
  t51074 = t51007*t8310;
  t52113 = t52111*t41656;
  t52119 = t51074 + t52113;
  t52226 = t43873*t51220;
  t52686 = -1.000000000009*t41653*t51472;
  t52806 = t52226 + t52686;
  t52825 = t45282*t52806;
  t52836 = t8310*t52111;
  t52918 = -1.*t51007*t41656;
  t52955 = t52836 + t52918;
  t52976 = -1.*t47146*t52955;
  t53073 = t52825 + t52976;
  t53633 = 3.e-6*t8310*t51472;
  t54790 = t54780*t41656;
  t54791 = t53633 + t54790;
  t54848 = -1.*t53822*t41653;
  t54907 = t43873*t51472;
  t54914 = t54848 + t54907;
  t55552 = t45282*t54914;
  t55690 = t8310*t54780;
  t55797 = -3.e-6*t51472*t41656;
  t55847 = t55690 + t55797;
  t55864 = -1.*t47146*t55847;
  t55879 = t55552 + t55864;
  t57271 = -1.*t43873*t40375*t47146;
  t57358 = -1.*t45282*t47460;
  t57368 = t57271 + t57358;
  t57431 = -1.*t52806*t47146;
  t57709 = -1.*t45282*t52955;
  t58366 = t57431 + t57709;
  t58882 = -1.*t54914*t47146;
  t58985 = -1.*t45282*t55847;
  t59462 = t58882 + t58985;
  t61714 = -1.2e-12*var1[20];
  t61723 = 0.1000003000009*t22280;
  t61814 = 3.e-12*t51472;
  t61873 = t61714 + t61723 + t61814;
  t62066 = 1.000000000009*t22280;
  t62067 = -1. + t62066;
  t62080 = 0.2*t62067;
  t62087 = -0.2000000000048*t22280;
  t62089 = 0.1000003000009*t51472;
  t62111 = t62080 + t62087 + t62089;
  t61659 = -0.2*t41653;
  t62009 = t43873*t61873;
  t62205 = -1.*t41653*t62111;
  t62299 = t61659 + t62009 + t62205;
  t62312 = -1. + t43873;
  t62364 = 0.2*t62312;
  t62373 = t41653*t61873;
  t62375 = t43873*t62111;
  t62377 = t62364 + t62373 + t62375;
  t62411 = t8310*t62377;
  t62427 = 4.e-7*var1[20];
  t62428 = -1. + t51194;
  t62514 = 0.1*t62428;
  t62517 = 3.000000000027e-7*t22280;
  t62522 = 9.e-18*t51472;
  t62523 = t62427 + t62514 + t62517 + t62522;
  t62524 = -1.*t62523*t41656;
  t62525 = t62411 + t62524;
  t62541 = t45282*t62299;
  t62545 = -1.*t47146*t62525;
  t62547 = t62541 + t62545;
  t62550 = t43873*t40375*t47146;
  t62552 = t45282*t47460;
  t62553 = t62550 + t62552;
  t62535 = t62299*t47146;
  t62536 = t45282*t62525;
  t62537 = t62535 + t62536;
  t62310 = -1.*t62299*t47146;
  t62529 = -1.*t45282*t62525;
  t62531 = t62310 + t62529;
  t61412 = t52806*t47146;
  t61414 = t45282*t52955;
  t61455 = t61412 + t61414;
  t62571 = t8310*t62523;
  t62573 = t62377*t41656;
  t62574 = t62571 + t62573;
  t62666 = t54914*t47146;
  t62677 = t45282*t55847;
  t62681 = t62666 + t62677;
  t63895 = -1.*t40375*t41653*t41656;
  t63916 = t8310 + t63895;
  t63960 = -1.*t51007*t8310;
  t63966 = -1.*t52111*t41656;
  t63977 = t63960 + t63966;
  t64052 = -3.e-6*t8310*t51472;
  t64054 = -1.*t54780*t41656;
  t64233 = t64052 + t64054;
  t62584 = -1.*t42681*t62574;
  t62617 = t62574*t52119;
  t67971 = -1.*t8310*t62523;
  t67977 = -1.*t62377*t41656;
  t68073 = t67971 + t67977;
  t62785 = t42681*t62574;
  t62923 = -1.*t62574*t54791;
  t63059 = -1.*t62574*t52119;
  t63125 = t62574*t54791;
  t68099 = -1.*t47460*t62574;
  t68117 = -1.*t42681*t62525;
  t68643 = t52955*t62574;
  t68699 = t62525*t52119;
  t62586 = -1.*t62553*t62537;
  t62589 = -1.*t48677*t62547;
  t62592 = t62584 + t62586 + t62589;
  t62620 = t61455*t62537;
  t62625 = t53073*t62547;
  t62628 = t62617 + t62620 + t62625;
  t68834 = t47460*t62574;
  t68848 = t42681*t62525;
  t62792 = t62553*t62537;
  t62829 = t48677*t62547;
  t62832 = t62785 + t62792 + t62829;
  t68999 = -1.*t62574*t55847;
  t69016 = -1.*t62525*t54791;
  t62954 = -1.*t62537*t62681;
  t62955 = -1.*t62547*t55879;
  t62997 = t62923 + t62954 + t62955;
  t69073 = -1.*t52955*t62574;
  t69088 = -1.*t62525*t52119;
  t63062 = -1.*t61455*t62537;
  t63077 = -1.*t53073*t62547;
  t63078 = t63059 + t63062 + t63077;
  t69131 = t62574*t55847;
  t69167 = t62525*t54791;
  t63137 = t62537*t62681;
  t63138 = t62547*t55879;
  t63528 = t63125 + t63137 + t63138;
  t67930 = -1.*t43873*t40375*t62299;
  t70240 = -1.*t51220*t41653;
  t70241 = -1.000000000009*t43873*t51472;
  t70242 = t70240 + t70241;
  t70273 = -0.2*t43873;
  t70977 = -1.*t41653*t61873;
  t71856 = -1.*t43873*t62111;
  t71938 = t70273 + t70977 + t71856;
  t68235 = t62299*t52806;
  t68778 = t43873*t40375*t62299;
  t68867 = -1.*t62299*t54914;
  t73606 = -1.*t43873*t53822;
  t73613 = -1.*t41653*t51472;
  t73614 = t73606 + t73613;
  t69054 = -1.*t62299*t52806;
  t69106 = t62299*t54914;
  t74033 = -1.*t40375*t45282*t41653;
  t74034 = -1.*t43873*t40375*t8310*t47146;
  t74312 = t74033 + t74034;
  t74323 = t45282*t73614;
  t74324 = -1.*t8310*t54914*t47146;
  t74325 = t74323 + t74324;
  t74342 = t45282*t70242;
  t74343 = -1.*t8310*t52806*t47146;
  t74345 = t74342 + t74343;
  t72233 = -1.*t43873*t40375*t71938;
  t67931 = -1.*t47460*t62525;
  t67955 = t67930 + t62584 + t67931;
  t72396 = t62299*t70242;
  t72834 = t71938*t52806;
  t68276 = t52955*t62525;
  t68388 = t68235 + t68276 + t62617;
  t73470 = t43873*t40375*t71938;
  t68783 = t47460*t62525;
  t68789 = t68778 + t62785 + t68783;
  t73659 = -1.*t71938*t54914;
  t73669 = -1.*t62299*t73614;
  t68874 = -1.*t62525*t55847;
  t68888 = t68867 + t68874 + t62923;
  t73679 = -1.*t62299*t70242;
  t73700 = -1.*t71938*t52806;
  t69056 = -1.*t52955*t62525;
  t69061 = t69054 + t69056 + t63059;
  t73871 = t71938*t54914;
  t73876 = t62299*t73614;
  t69107 = t62525*t55847;
  t69124 = t69106 + t69107 + t63125;
  t73905 = t43873*t40375*t45282*t8310;
  t73909 = -1.*t40375*t41653*t47146;
  t73921 = t73905 + t73909;
  t74508 = -1.*t62299*t41656*t42681;
  t74509 = -1.*t43873*t40375*t41656*t62574;
  t74522 = t52806*t41656*t62574;
  t74528 = t62299*t41656*t52119;
  t74860 = t45282*t8310*t62299;
  t74869 = t71938*t47146;
  t74875 = t74860 + t74869;
  t74884 = t45282*t71938;
  t74909 = -1.*t8310*t62299*t47146;
  t74915 = t74884 + t74909;
  t73941 = t45282*t8310*t52806;
  t73942 = t70242*t47146;
  t73943 = t73941 + t73942;
  t74594 = t62299*t41656*t42681;
  t74595 = t43873*t40375*t41656*t62574;
  t73948 = t45282*t8310*t54914;
  t73949 = t73614*t47146;
  t74027 = t73948 + t73949;
  t74602 = -1.*t54914*t41656*t62574;
  t74609 = -1.*t62299*t41656*t54791;
  t74635 = -1.*t52806*t41656*t62574;
  t74641 = -1.*t62299*t41656*t52119;
  t74663 = t54914*t41656*t62574;
  t74679 = t62299*t41656*t54791;
  t83534 = 9.e-18*t19464;
  t83535 = 3.000009000027e-7*t51472;
  t83695 = 3.e-12*t19464;
  t84442 = -1.2e-12 + t83695 + t62089;
  t86214 = 0.1000003000009*t19464;
  t86231 = -3.000000000027e-12*t51472;
  t86232 = t86214 + t86231;
  t73562 = -4.e-7*var1[20];
  t73563 = 0.1*t50938;
  t73567 = -3.000000000027e-7*t22280;
  t73596 = -9.e-18*t51472;
  t83542 = 4.e-7 + t83534 + t83535;
  t83682 = -1.*t51007*t83542;
  t84447 = -1.000000000009*t19464*t62111;
  t84453 = -1.*t51220*t84442;
  t86233 = -1.000000000009*t86232*t51472;
  t86240 = -3.000000000027e-6*t62523*t51472;
  t86246 = -1.000000000009*t61873*t51472;
  t73857 = 3.e-6*t62523*t51472;
  t73824 = -1.*t51007*t62523;
  t86655 = -1.000000000009*t62111*t51472;
  t86276 = t53822*t86232;
  t86284 = 3.e-6*t19464*t62523;
  t86285 = t19464*t61873;
  t86645 = 3.e-6*t83542*t51472;
  t86669 = t84442*t51472;
  t86612 = -9.e-18*t19464;
  t86617 = -3.000009000027e-7*t51472;
  t73587 = t40375*t41653*t62377;
  t73602 = t73562 + t73563 + t73567 + t73587 + t68778 + t73596;
  t87134 = -1.*t41653*t86232;
  t87278 = t43873*t84442;
  t87280 = t87134 + t87278;
  t87285 = t43873*t86232;
  t87287 = t41653*t84442;
  t87289 = t87285 + t87287;
  t87294 = t43873*t19464;
  t87297 = 1.000000000009*t41653*t51472;
  t87305 = t87294 + t87297;
  t73825 = -1.*t62377*t52111;
  t73827 = t73824 + t73825 + t69054;
  t73858 = t62377*t54780;
  t73859 = t73857 + t69106 + t73858;
  t87325 = t19464*t41653;
  t87336 = t87325 + t70241;
  t87430 = -1.000000000009*t19464*t41653;
  t87431 = t87430 + t52031;
  t70238 = -1.*t40375*t41653*t62377;
  t70239 = t62427 + t62514 + t62517 + t70238 + t67930 + t62522;
  t87589 = 1.000000000009*t43873*t19464;
  t87593 = t87589 + t87297;
  t87946 = t8310*t87336;
  t87947 = -3.e-6*t19464*t41656;
  t87968 = t87946 + t87947;
  t87999 = t8310*t87593;
  t88003 = -3.000000000027e-6*t51472*t41656;
  t88005 = t87999 + t88003;
  t88110 = 3.e-6*t19464*t8310;
  t88114 = t87336*t41656;
  t88116 = t88110 + t88114;
  t88123 = t45282*t87305;
  t88124 = -1.*t47146*t87968;
  t88144 = t88123 + t88124;
  t88154 = 3.000000000027e-6*t8310*t51472;
  t88155 = t87593*t41656;
  t88159 = t88154 + t88155;
  t88186 = t45282*t87431;
  t88200 = -1.*t47146*t88005;
  t88207 = t88186 + t88200;
  t87281 = t43873*t40375*t87280;
  t87339 = -1.*t87280*t54914;
  t87345 = -1.*t62299*t87305;
  t88283 = t8310*t87289;
  t88285 = -1.*t83542*t41656;
  t88286 = t88283 + t88285;
  t88269 = t8310*t83542;
  t88270 = t87289*t41656;
  t88272 = t88269 + t88270;
  t87554 = t87280*t54914;
  t87562 = t62299*t87305;
  t87583 = -1.*t62299*t87431;
  t87587 = -1.*t87280*t52806;
  t87743 = -1.*t43873*t40375*t87280;
  t87875 = t62299*t87431;
  t87877 = t87280*t52806;
  t87995 = t87431*t47146;
  t88006 = t45282*t88005;
  t88014 = t87995 + t88006;
  t88325 = -1.*t42681*t88272;
  t88332 = t88272*t52119;
  t88333 = t62574*t88159;
  t88347 = t87280*t47146;
  t88348 = t45282*t88286;
  t88349 = t88347 + t88348;
  t88351 = t45282*t87280;
  t88352 = -1.*t47146*t88286;
  t88353 = t88351 + t88352;
  t87940 = t87305*t47146;
  t87982 = t45282*t87968;
  t87988 = t87940 + t87982;
  t88278 = t42681*t88272;
  t88293 = -1.*t62574*t88116;
  t88294 = -1.*t88272*t54791;
  t88316 = -1.*t88272*t52119;
  t88317 = -1.*t62574*t88159;
  t88308 = t62574*t88116;
  t88309 = t88272*t54791;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(2.0744e-8*(-1.*t38*t42681 - 1.*t43802*t48677) + 6.2232e-14*(-1.*t38*t52119 - 1.*t43802*t53073) - 0.005186015558*(-1.*t38*t54791 - 1.*t43802*t55879))*var2[1] - 0.5*(2.0744e-8*(t42681*t43802 - 1.*t38*t48677) + 6.2232e-14*(t43802*t52119 - 1.*t38*t53073) - 0.005186015558*(t43802*t54791 - 1.*t38*t55879))*var2[2])*var2[20];
  p_output1[4]=(-0.5*(2.0744e-8*t48677 + 6.2232e-14*t53073 - 0.005186015558*t55879)*var2[0] - 0.5*(-2.0744e-8*t38*t57368 - 6.2232e-14*t38*t58366 + 0.005186015558*t38*t59462)*var2[1] - 0.5*(2.0744e-8*t43802*t57368 + 6.2232e-14*t43802*t58366 - 0.005186015558*t43802*t59462)*var2[2] - 0.5*(-0.000245000000002205*t48677 - 0.005186015558*((t53073*t62531 + t53073*t62537 + t58366*t62547 + t61455*t62547)*t62553 + t61455*(-1.*t48677*t62531 - 1.*t48677*t62537 - 1.*t57368*t62547 - 1.*t62547*t62553) + t53073*t62592 + t48677*t62628) + 6.2232e-14*((t48677*t62531 + t48677*t62537 + t57368*t62547 + t62547*t62553)*t62681 + t62553*(-1.*t55879*t62531 - 1.*t55879*t62537 - 1.*t59462*t62547 - 1.*t62547*t62681) + t55879*t62832 + t48677*t62997) + 2.0744e-8*((-1.*t53073*t62531 - 1.*t53073*t62537 - 1.*t58366*t62547 - 1.*t61455*t62547)*t62681 + t61455*(t55879*t62531 + t55879*t62537 + t59462*t62547 + t62547*t62681) + t55879*t63078 + t53073*t63528))*var2[3])*var2[20];
  p_output1[5]=(-0.5*(2.0744e-8*t45282*t63916 + 6.2232e-14*t45282*t63977 - 0.005186015558*t45282*t64233)*var2[0] - 0.5*(2.0744e-8*(t43802*t47460 + t38*t47146*t63916) + 6.2232e-14*(t43802*t52955 + t38*t47146*t63977) - 0.005186015558*(t43802*t55847 + t38*t47146*t64233))*var2[1] - 0.5*(2.0744e-8*(t38*t47460 - 1.*t43802*t47146*t63916) + 6.2232e-14*(t38*t52955 - 1.*t43802*t47146*t63977) - 0.005186015558*(t38*t55847 - 1.*t43802*t47146*t64233))*var2[2] - 0.5*(-0.000245000000002205*t45282*t63916 - 0.005186015558*(t45282*t62628*t63916 + t45282*t62592*t63977 + t61455*(-1.*t45282*t62537*t63916 + t47146*t62547*t63916 + t47146*t48677*t68073 - 1.*t45282*t62553*t68073 + t68099 + t68117) + t62553*(t45282*t62537*t63977 - 1.*t47146*t62547*t63977 - 1.*t47146*t53073*t68073 + t45282*t61455*t68073 + t68643 + t68699)) + 6.2232e-14*(t45282*t62997*t63916 + t45282*t62832*t64233 + t62681*(t45282*t62537*t63916 - 1.*t47146*t62547*t63916 - 1.*t47146*t48677*t68073 + t45282*t62553*t68073 + t68834 + t68848) + t62553*(-1.*t45282*t62537*t64233 + t47146*t62547*t64233 + t47146*t55879*t68073 - 1.*t45282*t62681*t68073 + t68999 + t69016)) + 2.0744e-8*(t45282*t63528*t63977 + t45282*t63078*t64233 + t62681*(-1.*t45282*t62537*t63977 + t47146*t62547*t63977 + t47146*t53073*t68073 - 1.*t45282*t61455*t68073 + t69073 + t69088) + t61455*(t45282*t62537*t64233 - 1.*t47146*t62547*t64233 - 1.*t47146*t55879*t68073 + t45282*t62681*t68073 + t69131 + t69167)))*var2[3] - 0.5*(-0.000245000000002205*t47460 - 0.005186015558*(t52955*t67955 + t52119*(-1.*t62525*t63916 - 1.*t47460*t68073 + t68099 + t68117) + t47460*t68388 + t42681*(t62525*t63977 + t52955*t68073 + t68643 + t68699)) + 6.2232e-14*(t55847*t68789 + t54791*(t62525*t63916 + t47460*t68073 + t68834 + t68848) + t47460*t68888 + t42681*(-1.*t62525*t64233 - 1.*t55847*t68073 + t68999 + t69016)) + 2.0744e-8*(t55847*t69061 + t54791*(-1.*t62525*t63977 - 1.*t52955*t68073 + t69073 + t69088) + t52955*t69124 + t52119*(t62525*t64233 + t55847*t68073 + t69131 + t69167)))*var2[4])*var2[20];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=(-0.5*(2.0744e-8*t73921 + 6.2232e-14*t73943 - 0.005186015558*t74027)*var2[0] - 0.5*(2.0744e-8*(t40375*t41656*t43802*t43873 - 1.*t38*t74312) - 0.005186015558*(t41656*t43802*t54914 - 1.*t38*t74325) + 6.2232e-14*(t41656*t43802*t52806 - 1.*t38*t74345))*var2[1] - 0.5*(2.0744e-8*(t38*t40375*t41656*t43873 + t43802*t74312) - 0.005186015558*(t38*t41656*t54914 + t43802*t74325) + 6.2232e-14*(t38*t41656*t52806 + t43802*t74345))*var2[2] - 0.5*(-0.000245000000002205*t73921 - 0.005186015558*(t62628*t73921 + t62592*t73943 + t61455*(-1.*t62537*t73921 - 1.*t62547*t74312 + t74508 + t74509 - 1.*t62553*t74875 - 1.*t48677*t74915) + t62553*(t62537*t73943 + t62547*t74345 + t74522 + t74528 + t61455*t74875 + t53073*t74915)) + 6.2232e-14*(t62997*t73921 + t62832*t74027 + t62681*(t62537*t73921 + t62547*t74312 + t74594 + t74595 + t62553*t74875 + t48677*t74915) + t62553*(-1.*t62537*t74027 - 1.*t62547*t74325 + t74602 + t74609 - 1.*t62681*t74875 - 1.*t55879*t74915)) + 2.0744e-8*(t63528*t73943 + t63078*t74027 + t62681*(-1.*t62537*t73943 - 1.*t62547*t74345 + t74635 + t74641 - 1.*t61455*t74875 - 1.*t53073*t74915) + t61455*(t62537*t74027 + t62547*t74325 + t74663 + t74679 + t62681*t74875 + t55879*t74915)))*var2[3] - 0.5*(-0.000245000000002205*t40375*t41656*t43873 - 0.005186015558*(t41656*t52806*t67955 + t40375*t41656*t43873*t68388 + t52119*(t40375*t41653*t62299 + t72233 + t74508 + t74509 - 1.*t47460*t62299*t8310 - 1.*t40375*t43873*t62525*t8310) + t42681*(t72396 + t72834 + t74522 + t74528 + t52955*t62299*t8310 + t52806*t62525*t8310)) + 6.2232e-14*(t41656*t54914*t68789 + t40375*t41656*t43873*t68888 + t54791*(-1.*t40375*t41653*t62299 + t73470 + t74594 + t74595 + t47460*t62299*t8310 + t40375*t43873*t62525*t8310) + t42681*(t73659 + t73669 + t74602 + t74609 - 1.*t55847*t62299*t8310 - 1.*t54914*t62525*t8310)) + 2.0744e-8*(t41656*t54914*t69061 + t41656*t52806*t69124 + t54791*(t73679 + t73700 + t74635 + t74641 - 1.*t52955*t62299*t8310 - 1.*t52806*t62525*t8310) + t52119*(t73871 + t73876 + t74663 + t74679 + t55847*t62299*t8310 + t54914*t62525*t8310)))*var2[4] - 0.5*(0.000245000000002205*t40375*t41653 - 0.005186015558*(-1.*t40375*t41653*(t52111*t62377 + t51007*t62523 + t68235) + t70239*t70242 + t52806*(-1.*t40375*t43873*t62377 + t72233) + t40375*t43873*(t52111*t62299 + t52806*t62377 + t72396 + t72834)) + 6.2232e-14*(-1.*t40375*t41653*(-1.*t54780*t62377 - 3.e-6*t51472*t62523 + t68867) + t54914*(t40375*t43873*t62377 + t73470) + t73602*t73614 + t40375*t43873*(-1.*t54780*t62299 - 1.*t54914*t62377 + t73659 + t73669)) + 2.0744e-8*(t54914*(-1.*t52111*t62299 - 1.*t52806*t62377 + t73679 + t73700) + t73614*t73827 + t70242*t73859 + t52806*(t54780*t62299 + t54914*t62377 + t73871 + t73876)))*var2[5])*var2[20];
  p_output1[19]=0;
  p_output1[20]=(-0.5*(-0.005186015558*t87988 + 6.2232e-14*t88014)*var2[0] - 0.5*(-0.005186015558*(t43802*t88116 - 1.*t38*t88144) + 6.2232e-14*(t43802*t88159 - 1.*t38*t88207))*var2[1] - 0.5*(-0.005186015558*(t38*t88116 + t43802*t88144) + 6.2232e-14*(t38*t88159 + t43802*t88207))*var2[2] - 0.5*(-0.005186015558*(t62592*t88014 + t61455*(t88325 - 1.*t62553*t88349 - 1.*t48677*t88353) + t62553*(t62537*t88014 + t62547*t88207 + t88332 + t88333 + t61455*t88349 + t53073*t88353)) + 6.2232e-14*(t62832*t87988 + t62681*(t88278 + t62553*t88349 + t48677*t88353) + t62553*(-1.*t62537*t87988 - 1.*t62547*t88144 + t88293 + t88294 - 1.*t62681*t88349 - 1.*t55879*t88353)) + 2.0744e-8*(t63078*t87988 + t63528*t88014 + t62681*(-1.*t62537*t88014 - 1.*t62547*t88207 + t88316 + t88317 - 1.*t61455*t88349 - 1.*t53073*t88353) + t61455*(t62537*t87988 + t62547*t88144 + t88308 + t88309 + t62681*t88349 + t55879*t88353)))*var2[3] - 0.5*(6.2232e-14*(t68789*t88116 + t54791*(t87281 + t88278 + t47460*t88286) + t42681*(t87339 + t87345 - 1.*t62525*t87968 - 1.*t55847*t88286 + t88293 + t88294)) + 2.0744e-8*(t69061*t88116 + t69124*t88159 + t52119*(t87554 + t87562 + t62525*t87968 + t55847*t88286 + t88308 + t88309) + t54791*(t87583 + t87587 - 1.*t62525*t88005 - 1.*t52955*t88286 + t88316 + t88317)) - 0.005186015558*(t67955*t88159 + t52119*(t87743 - 1.*t47460*t88286 + t88325) + t42681*(t87875 + t87877 + t62525*t88005 + t52955*t88286 + t88332 + t88333)))*var2[4] - 0.5*(6.2232e-14*(t54914*(-4.e-7 + t86612 + t86617 + t87281 + t40375*t41653*t87289) + t73602*t87305 + t40375*t43873*(-3.e-6*t19464*t62523 - 3.e-6*t51472*t83542 - 1.*t54780*t87289 - 1.*t62377*t87336 + t87339 + t87345)) + 2.0744e-8*(t73827*t87305 + t73859*t87431 + t52806*(t86284 + t86645 + t54780*t87289 + t62377*t87336 + t87554 + t87562) + t54914*(t83682 + t86240 - 1.*t52111*t87289 + t87583 + t87587 - 1.*t62377*t87593)) - 0.005186015558*(t70239*t87431 + t52806*(4.e-7 + t83534 + t83535 - 1.*t40375*t41653*t87289 + t87743) + t40375*t43873*(3.000000000027e-6*t51472*t62523 + t51007*t83542 + t52111*t87289 + t62377*t87593 + t87875 + t87877)))*var2[5] - 0.5*(-0.005186015558*(-0.2*t19464 + 3.000000000027e-6*t51472*(-1.*t40375*t61873 + t62427 + t62514 + t62517 + t62522) + t83682 + t51007*(4.e-7 + t83534 + t83535 - 1.*t40375*t84442) + t84447 + t84453 + t86233 + t86240 + t86246) + 6.2232e-14*(-0.2000000000018*t51472 + 3.e-6*t19464*(t40375*t61873 + t73562 + t73563 + t73567 + t73596) + t86276 + t86284 + t86285 + 3.e-6*t51472*(-4.e-7 + t40375*t84442 + t86612 + t86617) + t86645 + t86655 + t86669) + 2.0744e-8*(3.000000000027e-6*t51472*(t51472*t61873 + t53822*t62111 + t73857) + 3.e-6*t51472*(t83682 + t84447 + t84453 + t86233 + t86240 + t86246) + 3.e-6*t19464*(-1.*t51220*t61873 + t73824 + t86655) + t51007*(t86276 + t86284 + t86285 + t86645 + t86655 + t86669)))*var2[18])*var2[20];
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec21_minitaur.hh"

namespace FrontStance
{

void Ce3_vec21_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
