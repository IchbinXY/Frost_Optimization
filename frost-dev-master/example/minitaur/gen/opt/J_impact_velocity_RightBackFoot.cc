/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 22:49:53 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t720;
  double t1735;
  double t2960;
  double t3938;
  double t5260;
  double t5453;
  double t5594;
  double t7107;
  double t12108;
  double t4002;
  double t4082;
  double t4243;
  double t4421;
  double t12375;
  double t12385;
  double t15076;
  double t12135;
  double t12146;
  double t15104;
  double t14390;
  double t14493;
  double t14860;
  double t14948;
  double t15023;
  double t15065;
  double t15484;
  double t15518;
  double t16357;
  double t22637;
  double t31456;
  double t31491;
  double t31516;
  double t31546;
  double t31557;
  double t31575;
  double t31607;
  double t31655;
  double t31773;
  double t31634;
  double t15302;
  double t31608;
  double t31802;
  double t3063;
  double t3453;
  double t3643;
  double t3869;
  double t4855;
  double t6472;
  double t12372;
  double t12462;
  double t13562;
  double t15092;
  double t15367;
  double t15440;
  double t15463;
  double t15466;
  double t29923;
  double t31411;
  double t31414;
  double t31449;
  double t31454;
  double t31845;
  double t31852;
  double t31860;
  double t31639;
  double t31890;
  double t31896;
  double t31898;
  double t31907;
  double t31914;
  double t31915;
  double t31806;
  double t31826;
  double t31827;
  double t32231;
  double t32232;
  double t32227;
  double t32228;
  double t32268;
  double t32249;
  double t32251;
  double t32252;
  double t32257;
  double t33112;
  double t33129;
  double t33161;
  double t33704;
  double t33733;
  double t33796;
  double t33811;
  double t33815;
  double t34091;
  double t33827;
  double t34430;
  double t34432;
  double t34434;
  double t34435;
  double t34493;
  double t34509;
  double t34512;
  double t34522;
  double t34539;
  double t34540;
  double t4059;
  double t4596;
  double t37722;
  double t37871;
  double t38382;
  double t32229;
  double t32238;
  double t32241;
  double t32242;
  double t32261;
  double t32270;
  double t32272;
  double t32567;
  double t33038;
  double t33192;
  double t33276;
  double t33511;
  double t33695;
  double t33701;
  double t40515;
  double t40516;
  double t40518;
  double t40522;
  double t40634;
  double t33846;
  double t40702;
  double t40821;
  double t40898;
  double t34410;
  double t43572;
  double t43586;
  double t43588;
  double t43976;
  double t44019;
  double t44060;
  double t31839;
  double t31840;
  double t31868;
  double t31903;
  double t31919;
  double t31920;
  double t31925;
  double t31936;
  double t31940;
  double t31954;
  double t31955;
  double t31956;
  double t31959;
  double t31970;
  double t31975;
  double t31978;
  double t32139;
  double t32143;
  double t32144;
  double t32167;
  double t32217;
  double t44535;
  double t44536;
  double t44538;
  double t44559;
  double t44569;
  double t44584;
  double t44593;
  double t44596;
  double t44598;
  double t44599;
  double t4404;
  double t44665;
  double t44673;
  double t44674;
  double t44677;
  double t44681;
  double t44682;
  double t43511;
  double t43546;
  double t43590;
  double t44134;
  double t44136;
  double t44369;
  double t44380;
  double t44398;
  double t44399;
  double t44400;
  double t44402;
  double t44403;
  double t44404;
  double t44436;
  double t44438;
  double t44466;
  double t44475;
  double t44479;
  double t44483;
  double t44501;
  double t44502;
  double t34425;
  double t34426;
  double t34427;
  double t34479;
  double t34538;
  double t34543;
  double t35835;
  double t35839;
  double t35841;
  double t35843;
  double t35849;
  double t35864;
  double t35878;
  double t35891;
  double t35934;
  double t35944;
  double t35956;
  double t35960;
  double t35972;
  double t35978;
  double t36031;
  double t36069;
  double t44778;
  double t44753;
  double t44754;
  double t44755;
  double t44757;
  double t44782;
  double t44803;
  double t44815;
  double t44868;
  double t44870;
  double t44882;
  double t44541;
  double t44592;
  double t44600;
  double t44606;
  double t44616;
  double t44617;
  double t44625;
  double t44629;
  double t44630;
  double t44645;
  double t44646;
  double t44647;
  double t44649;
  double t44650;
  double t44651;
  double t44653;
  double t44654;
  double t44655;
  double t44658;
  double t40521;
  double t40667;
  double t40923;
  double t41374;
  double t41406;
  double t41424;
  double t41427;
  double t41440;
  double t41442;
  double t42516;
  double t42698;
  double t42914;
  double t43361;
  double t43383;
  double t43388;
  double t43397;
  double t43398;
  double t43444;
  double t43445;
  double t32260;
  double t33191;
  double t33812;
  double t33816;
  double t33817;
  double t33936;
  double t34001;
  double t34074;
  double t34083;
  double t34385;
  double t34392;
  double t34398;
  double t34408;
  double t34409;
  double t34411;
  double t34418;
  double t34419;
  double t34420;
  double t34422;
  double t45331;
  double t45336;
  double t45337;
  double t45338;
  double t45343;
  double t45348;
  double t45349;
  double t45350;
  double t45351;
  double t45353;
  double t45354;
  double t45355;
  double t45356;
  double t45389;
  double t45388;
  double t45390;
  double t45394;
  double t45397;
  double t45398;
  double t45399;
  double t45401;
  double t45402;
  double t45403;
  double t45405;
  double t45406;
  double t45407;
  double t45409;
  double t45411;
  double t45412;
  double t45451;
  double t45453;
  double t45454;
  double t45449;
  double t45455;
  double t45456;
  double t45457;
  double t45459;
  double t45460;
  double t45461;
  double t45464;
  double t45465;
  double t45466;
  double t45467;
  double t45540;
  double t45541;
  double t45542;
  double t45543;
  double t45546;
  double t45547;
  double t45548;
  double t45549;
  double t45551;
  double t45552;
  double t45577;
  double t45578;
  double t45579;
  double t45581;
  double t45582;
  double t45583;
  double t45587;
  double t45588;
  double t45589;
  double t45590;
  double t45592;
  double t45596;
  double t45598;
  double t45599;
  double t45603;
  double t45604;
  double t45605;
  double t45606;
  double t45332;
  double t45333;
  double t45334;
  double t45347;
  double t45352;
  double t45357;
  double t45358;
  double t45360;
  double t45361;
  double t45362;
  double t45363;
  double t45364;
  double t45365;
  double t45366;
  double t45367;
  double t45368;
  double t45370;
  double t45374;
  double t45375;
  double t45376;
  double t45379;
  double t45380;
  double t45636;
  double t45637;
  double t45638;
  double t45639;
  double t45641;
  double t45643;
  double t45644;
  double t45645;
  double t45647;
  double t45648;
  double t45649;
  double t45650;
  double t45793;
  double t45796;
  double t45798;
  double t45799;
  double t45801;
  double t45802;
  double t45804;
  double t45805;
  double t45807;
  double t45809;
  double t45874;
  double t45875;
  double t45879;
  double t45881;
  double t45883;
  double t45886;
  double t45891;
  double t45892;
  double t45576;
  double t45945;
  double t45946;
  double t45950;
  double t46023;
  double t46027;
  double t46028;
  double t46032;
  double t46033;
  double t46035;
  double t45871;
  double t45872;
  double t45878;
  double t45884;
  double t45893;
  double t45895;
  double t45896;
  double t45900;
  double t45906;
  double t45911;
  double t45913;
  double t45914;
  double t45917;
  double t45919;
  double t45924;
  double t45925;
  double t45929;
  double t45930;
  double t45933;
  double t45935;
  double t45937;
  double t45395;
  double t45400;
  double t45404;
  double t45408;
  double t45413;
  double t45414;
  double t45417;
  double t45419;
  double t45420;
  double t45422;
  double t45423;
  double t45426;
  double t45427;
  double t45428;
  double t45429;
  double t45432;
  double t45433;
  double t45434;
  double t45438;
  double t45441;
  double t45443;
  double t46243;
  double t46244;
  double t46251;
  double t46231;
  double t46252;
  double t46255;
  double t46283;
  double t46315;
  double t46333;
  double t46337;
  double t46338;
  double t46504;
  double t46506;
  double t46507;
  double t46517;
  double t46518;
  double t46522;
  double t45580;
  double t45586;
  double t46620;
  double t46636;
  double t46669;
  double t45766;
  double t45785;
  double t45787;
  double t45800;
  double t45803;
  double t45810;
  double t45811;
  double t45812;
  double t45814;
  double t45815;
  double t45816;
  double t45825;
  double t45827;
  double t45834;
  double t45843;
  double t45846;
  double t45849;
  double t45850;
  double t45851;
  double t45853;
  double t45866;
  double t45867;
  double t45537;
  double t45538;
  double t45539;
  double t45544;
  double t45550;
  double t45553;
  double t45554;
  double t45557;
  double t45558;
  double t45559;
  double t45560;
  double t45561;
  double t45562;
  double t45563;
  double t45564;
  double t45566;
  double t45568;
  double t45569;
  double t45570;
  double t45572;
  double t45573;
  double t45574;
  double t46755;
  double t46757;
  double t46758;
  double t46765;
  double t46767;
  double t46769;
  double t46775;
  double t46776;
  double t46779;
  double t46786;
  double t46787;
  double t46788;
  double t46792;
  double t46490;
  double t46498;
  double t46508;
  double t46510;
  double t46523;
  double t46524;
  double t46525;
  double t46526;
  double t46527;
  double t46528;
  double t46535;
  double t46542;
  double t46547;
  double t46551;
  double t46556;
  double t46583;
  double t46584;
  double t46586;
  double t46588;
  double t46589;
  double t46595;
  double t46831;
  double t46832;
  double t46834;
  double t46836;
  double t46837;
  double t46838;
  double t46869;
  double t46883;
  double t46893;
  double t45640;
  double t45646;
  double t45651;
  double t45653;
  double t45654;
  double t45655;
  double t45659;
  double t45662;
  double t45663;
  double t45666;
  double t45667;
  double t45668;
  double t45670;
  double t45671;
  double t45715;
  double t45720;
  double t45729;
  double t45753;
  double t45754;
  double t45458;
  double t45463;
  double t45468;
  double t45469;
  double t45470;
  double t45471;
  double t45473;
  double t45476;
  double t45477;
  double t45482;
  double t45483;
  double t45486;
  double t45487;
  double t45488;
  double t45513;
  double t45515;
  double t45517;
  double t45525;
  double t45530;
  double t46256;
  double t46332;
  double t46340;
  double t46348;
  double t46352;
  double t46353;
  double t46361;
  double t46370;
  double t46371;
  double t46376;
  double t46382;
  double t46397;
  double t46402;
  double t46405;
  double t46408;
  double t46422;
  double t46437;
  double t46440;
  double t46460;
  double t44745;
  double t44748;
  double t44749;
  double t44752;
  double t44776;
  double t44779;
  double t44780;
  double t44781;
  double t44850;
  double t44855;
  double t44861;
  double t44866;
  double t44867;
  double t47081;
  double t47082;
  double t47096;
  double t47101;
  double t44884;
  double t47112;
  double t47113;
  double t47145;
  double t47165;
  double t47166;
  double t44931;
  double t46833;
  double t46841;
  double t46897;
  double t46904;
  double t46978;
  double t46997;
  double t47002;
  double t47023;
  double t47029;
  double t47030;
  double t47033;
  double t47051;
  double t47052;
  double t47055;
  double t47058;
  double t47060;
  double t47062;
  double t47066;
  double t47067;
  double t47387;
  double t47388;
  double t47389;
  double t47394;
  double t47396;
  double t47400;
  double t47402;
  double t47405;
  double t47406;
  double t47407;
  double t47408;
  double t47409;
  double t47410;
  double t47411;
  double t47413;
  double t47414;
  double t47415;
  double t47416;
  double t47417;
  double t47424;
  double t47457;
  double t47458;
  double t47287;
  double t47293;
  double t47331;
  double t47334;
  double t47337;
  double t47341;
  double t47342;
  double t47343;
  double t47347;
  double t47351;
  double t47353;
  double t47355;
  double t47356;
  double t47359;
  double t47361;
  double t47362;
  double t47363;
  double t47365;
  double t47370;
  double t47371;
  double t47379;
  double t47380;
  double t47462;
  double t47472;
  double t47477;
  double t47482;
  double t47486;
  double t47487;
  double t47488;
  double t47492;
  double t47512;
  double t47528;
  double t47543;
  double t47555;
  double t47557;
  double t47574;
  double t47583;
  double t47587;
  double t47603;
  double t47604;
  double t47605;
  double t47606;
  double t47607;
  double t47792;
  double t47794;
  double t47795;
  double t47800;
  double t47805;
  double t47808;
  double t47809;
  double t47815;
  double t47816;
  double t47818;
  double t47822;
  double t47823;
  double t47824;
  double t47826;
  double t47831;
  double t47832;
  double t47838;
  double t47839;
  double t47846;
  double t47652;
  double t47653;
  double t47657;
  double t47658;
  double t47659;
  double t47667;
  double t47670;
  double t47674;
  double t47677;
  double t47680;
  double t47684;
  double t47702;
  double t47707;
  double t47708;
  double t47731;
  double t47735;
  double t47742;
  double t47745;
  double t47760;
  double t47769;
  double t47781;
  double t47791;
  double t47871;
  double t47872;
  double t47879;
  double t47892;
  double t47912;
  double t47920;
  double t47929;
  double t47942;
  double t47988;
  double t47991;
  double t47995;
  double t47996;
  double t47999;
  double t48001;
  double t48003;
  double t48009;
  double t48013;
  double t48015;
  double t48017;
  double t48077;
  double t48078;
  double t48079;
  double t48081;
  double t48082;
  double t48088;
  double t48090;
  double t48097;
  double t48101;
  double t48149;
  double t48150;
  double t48152;
  double t48155;
  double t48157;
  double t48158;
  double t48160;
  double t48161;
  double t48162;
  double t47869;
  double t47870;
  double t47886;
  double t47916;
  double t47943;
  double t47944;
  double t47945;
  double t47951;
  double t47952;
  double t47957;
  double t47962;
  double t47964;
  double t47965;
  double t47966;
  double t47967;
  double t47968;
  double t47970;
  double t47973;
  double t47976;
  double t47978;
  double t47980;
  double t48212;
  double t48215;
  double t48218;
  double t48254;
  double t48260;
  double t48261;
  double t48251;
  double t48262;
  double t48263;
  double t48266;
  double t48268;
  double t48271;
  double t48272;
  double t48308;
  double t48310;
  double t48311;
  double t48317;
  double t48329;
  double t48330;
  double t48068;
  double t48074;
  double t48076;
  double t48080;
  double t48094;
  double t48102;
  double t48104;
  double t48106;
  double t48109;
  double t48112;
  double t48113;
  double t48114;
  double t48116;
  double t48117;
  double t48119;
  double t48123;
  double t48127;
  double t48128;
  double t48129;
  double t48132;
  double t48133;
  double t48139;
  double t48386;
  double t48388;
  double t48396;
  double t48406;
  double t48407;
  double t48409;
  double t48416;
  double t48419;
  double t48420;
  double t48427;
  double t48306;
  double t48307;
  double t48313;
  double t48315;
  double t48331;
  double t48332;
  double t48336;
  double t48337;
  double t48339;
  double t48345;
  double t48346;
  double t48348;
  double t48349;
  double t48350;
  double t48352;
  double t48353;
  double t48356;
  double t48359;
  double t48360;
  double t48361;
  double t48363;
  double t48454;
  double t48455;
  double t48458;
  double t48459;
  double t48460;
  double t48462;
  double t48464;
  double t48465;
  double t47997;
  double t48005;
  double t48019;
  double t48020;
  double t48021;
  double t48022;
  double t48025;
  double t48027;
  double t48028;
  double t48029;
  double t48030;
  double t48031;
  double t48033;
  double t48035;
  double t48037;
  double t48039;
  double t48041;
  double t48043;
  double t48055;
  double t48265;
  double t48269;
  double t48273;
  double t48274;
  double t48275;
  double t48277;
  double t48278;
  double t48279;
  double t48280;
  double t48282;
  double t48285;
  double t48286;
  double t48287;
  double t48288;
  double t48290;
  double t48291;
  double t48293;
  double t48296;
  double t48299;
  double t48498;
  double t48499;
  double t48503;
  double t48505;
  double t48506;
  double t48509;
  double t48512;
  double t48515;
  double t48457;
  double t48461;
  double t48466;
  double t48469;
  double t48471;
  double t48472;
  double t48473;
  double t48474;
  double t48475;
  double t48476;
  double t48477;
  double t48479;
  double t48480;
  double t48481;
  double t48482;
  double t48483;
  double t48484;
  double t48485;
  double t48487;
  t720 = Cos(var1[19]);
  t1735 = -1.*t720;
  t2960 = 1. + t1735;
  t3938 = Cos(var1[4]);
  t5260 = Cos(var1[21]);
  t5453 = -1.*t5260;
  t5594 = 1. + t5453;
  t7107 = -3.e-6*t5594;
  t12108 = Sin(var1[21]);
  t4002 = Cos(var1[5]);
  t4082 = Sin(var1[19]);
  t4243 = Sin(var1[4]);
  t4421 = Sin(var1[5]);
  t12375 = 3.e-6*t12108;
  t12385 = t7107 + t12375;
  t15076 = 3.e-13*var1[21];
  t12135 = -3.e-6*t12108;
  t12146 = t7107 + t12135;
  t15104 = -9.e-12*t5594;
  t14390 = -3.e-6*t2960*t3938*t4002;
  t14493 = 3.e-6*t4082*t4243;
  t14860 = -9.e-12*t2960;
  t14948 = 1. + t14860;
  t15023 = t14948*t3938*t4421;
  t15065 = t14390 + t14493 + t15023;
  t15484 = -1.*t720*t3938*t4002;
  t15518 = -1.*t4082*t4243;
  t16357 = 3.e-6*t2960*t3938*t4421;
  t22637 = t15484 + t15518 + t16357;
  t31456 = t3938*t4002*t4082;
  t31491 = -1.000000000009*t2960;
  t31516 = 1. + t31491;
  t31546 = -1.*t31516*t4243;
  t31557 = 3.e-6*t3938*t4082*t4421;
  t31575 = t31456 + t31546 + t31557;
  t31607 = 3.e-6*t5594;
  t31655 = -1.000000000009*t5594;
  t31773 = 1. + t31655;
  t31634 = 9.e-12*t5594;
  t15302 = -1.*t12108;
  t31608 = t31607 + t12135;
  t31802 = t31607 + t12375;
  t3063 = -1.8e-12*t2960;
  t3453 = -1. + t720;
  t3643 = 0.2*t3453;
  t3869 = t3063 + t3643;
  t4855 = 1.e-7*var1[21];
  t6472 = 5.4e-18*t5594;
  t12372 = -0.200000000003*t12146;
  t12462 = 0.100000000003*t12385;
  t13562 = t4855 + t6472 + t12372 + t12462;
  t15092 = -0.2000000000048*t5594;
  t15367 = t15104 + t15302;
  t15440 = 0.100000000003*t15367;
  t15463 = 3.e-7*t12385;
  t15466 = t15076 + t15092 + t15440 + t15463;
  t29923 = 0.1000000000039*t5594;
  t31411 = 3.e-7*t12146;
  t31414 = t15104 + t12108;
  t31449 = -0.200000000003*t31414;
  t31454 = t15076 + t29923 + t31411 + t31449;
  t31845 = t14948*t4002*t4243;
  t31852 = 3.e-6*t2960*t4243*t4421;
  t31860 = t31845 + t31852;
  t31639 = t31634 + t12108;
  t31890 = 3.e-6*t2960*t4002*t4243;
  t31896 = t720*t4243*t4421;
  t31898 = t31890 + t31896;
  t31907 = 3.e-6*t4002*t4082*t4243;
  t31914 = -1.*t4082*t4243*t4421;
  t31915 = t31907 + t31914;
  t31806 = t31634 + t15302;
  t31826 = -1.8e-11*t5594;
  t31827 = 1. + t31826;
  t32231 = 3.e-6*t5260;
  t32232 = t32231 + t12135;
  t32227 = -3.e-6*t5260;
  t32228 = t32227 + t12135;
  t32268 = -9.e-12*t12108;
  t32249 = -3.e-6*t3938*t4082;
  t32251 = -3.e-6*t2960*t4002*t4243;
  t32252 = t14948*t4243*t4421;
  t32257 = t32249 + t32251 + t32252;
  t33112 = t3938*t4082;
  t33129 = -1.*t720*t4002*t4243;
  t33161 = t33112 + t33129 + t31852;
  t33704 = t31516*t3938;
  t33733 = t4002*t4082*t4243;
  t33796 = 3.e-6*t4082*t4243*t4421;
  t33811 = t33704 + t33733 + t33796;
  t33815 = t32231 + t12375;
  t34091 = t32227 + t12375;
  t33827 = 9.e-12*t12108;
  t34430 = -1.000000000009*t3938*t4082;
  t34432 = t720*t4002*t4243;
  t34434 = 3.e-6*t720*t4243*t4421;
  t34435 = t34430 + t34432 + t34434;
  t34493 = -3.e-6*t720*t3938;
  t34509 = -3.e-6*t4002*t4082*t4243;
  t34512 = -9.e-12*t4082*t4243*t4421;
  t34522 = t34493 + t34509 + t34512;
  t34539 = t720*t3938;
  t34540 = t34539 + t33733 + t33796;
  t4059 = -1.*t3869*t3938*t4002;
  t4596 = 6.000000000054e-7*t2960*t3938*t4421;
  t37722 = t14390 + t15023;
  t37871 = t15484 + t16357;
  t38382 = t31456 + t31557;
  t32229 = -0.200000000003*t32228;
  t32238 = 0.100000000003*t32232;
  t32241 = 5.4e-18*t12108;
  t32242 = 1.e-7 + t32229 + t32238 + t32241;
  t32261 = 3.e-7*t32232;
  t32270 = t5453 + t32268;
  t32272 = 0.100000000003*t32270;
  t32567 = -0.2000000000048*t12108;
  t33038 = 3.e-13 + t32261 + t32272 + t32567;
  t33192 = 3.e-7*t32228;
  t33276 = t5260 + t32268;
  t33511 = -0.200000000003*t33276;
  t33695 = 0.1000000000039*t12108;
  t33701 = 3.e-13 + t33192 + t33511 + t33695;
  t40515 = -1.*t14948*t3938*t4002;
  t40516 = -3.e-6*t2960*t3938*t4421;
  t40518 = t40515 + t40516;
  t40522 = -1.*t720*t3938*t4421;
  t40634 = t14390 + t40522;
  t33846 = t5453 + t33827;
  t40702 = -3.e-6*t3938*t4002*t4082;
  t40821 = t3938*t4082*t4421;
  t40898 = t40702 + t40821;
  t34410 = t5260 + t33827;
  t43572 = -3.e-6*t720*t3938*t4002;
  t43586 = t720*t3938*t4421;
  t43588 = t43572 + t43586;
  t43976 = 9.e-12*t3938*t4002*t4082;
  t44019 = -3.e-6*t3938*t4082*t4421;
  t44060 = t43976 + t44019;
  t31839 = 6.000000000054e-7*t2960*t4002*t4243;
  t31840 = t3869*t4243*t4421;
  t31868 = t13562*t31860;
  t31903 = t15466*t31898;
  t31919 = t31454*t31915;
  t31920 = t31608*t31860;
  t31925 = t31639*t31898;
  t31936 = t31773*t31915;
  t31940 = t31920 + t31925 + t31936;
  t31954 = -0.3*t31940;
  t31955 = -1.*t31802*t31860;
  t31956 = -1.*t31773*t31898;
  t31959 = -1.*t31806*t31915;
  t31970 = t31955 + t31956 + t31959;
  t31975 = 0.2*t31970;
  t31978 = t31827*t31860;
  t32139 = t31608*t31898;
  t32143 = t31802*t31915;
  t32144 = t31978 + t32139 + t32143;
  t32167 = -0.099999*t32144;
  t32217 = t31839 + t31840 + t31868 + t31903 + t31919 + t31954 + t31975 + t32167;
  t44535 = -1.000000000009*t4082*t4243;
  t44536 = -3.e-6*t720*t3938*t4421;
  t44538 = t15484 + t44535 + t44536;
  t44559 = -1.*t3938*t4002*t4082;
  t44569 = t720*t4243;
  t44584 = t44559 + t44569 + t44019;
  t44593 = 3.e-6*t3938*t4002*t4082;
  t44596 = -3.e-6*t720*t4243;
  t44598 = 9.e-12*t3938*t4082*t4421;
  t44599 = t44593 + t44596 + t44598;
  t4404 = -0.2000000000018*t4082*t4243;
  t44665 = t15484 + t15518 + t44536;
  t44673 = 3.e-6*t720*t3938*t4002;
  t44674 = 9.e-12*t720*t3938*t4421;
  t44677 = t44673 + t14493 + t44674;
  t44681 = -1.000000000009*t720*t4243;
  t44682 = t31456 + t44681 + t31557;
  t43511 = -6.000000000054e-7*t3938*t4002*t4082;
  t43546 = 0.2000000000018*t3938*t4082*t4421;
  t43590 = t31454*t43588;
  t44134 = t13562*t44060;
  t44136 = t15466*t40898;
  t44369 = -1.*t31806*t43588;
  t44380 = -1.*t31802*t44060;
  t44398 = -1.*t31773*t40898;
  t44399 = t44369 + t44380 + t44398;
  t44400 = 0.2*t44399;
  t44402 = t31802*t43588;
  t44403 = t31827*t44060;
  t44404 = t31608*t40898;
  t44436 = t44402 + t44403 + t44404;
  t44438 = -0.099999*t44436;
  t44466 = t31773*t43588;
  t44475 = t31608*t44060;
  t44479 = t31639*t40898;
  t44483 = t44466 + t44475 + t44479;
  t44501 = -0.3*t44483;
  t44502 = t43511 + t43546 + t43590 + t44134 + t44136 + t44400 + t44438 + t44501;
  t34425 = 0.2000000000018*t720*t3938;
  t34426 = 0.2000000000018*t4002*t4082*t4243;
  t34427 = 6.000000000054e-7*t4082*t4243*t4421;
  t34479 = t31454*t34435;
  t34538 = t13562*t34522;
  t34543 = t15466*t34540;
  t35835 = -1.*t31806*t34435;
  t35839 = -1.*t31802*t34522;
  t35841 = -1.*t31773*t34540;
  t35843 = t35835 + t35839 + t35841;
  t35849 = 0.2*t35843;
  t35864 = t31802*t34435;
  t35878 = t31827*t34522;
  t35891 = t31608*t34540;
  t35934 = t35864 + t35878 + t35891;
  t35944 = -0.099999*t35934;
  t35956 = t31773*t34435;
  t35960 = t31608*t34522;
  t35972 = t31639*t34540;
  t35978 = t35956 + t35960 + t35972;
  t36031 = -0.3*t35978;
  t36069 = t34425 + t34426 + t34427 + t34479 + t34538 + t34543 + t35849 + t35944 + t36031;
  t44778 = -9.e-12*t5260;
  t44753 = 3.e-6*t2960*t3938*t4002;
  t44754 = -3.e-6*t4082*t4243;
  t44755 = -1.*t14948*t3938*t4421;
  t44757 = t44753 + t44754 + t44755;
  t44782 = t720*t3938*t4002;
  t44803 = t4082*t4243;
  t44815 = t44782 + t44803 + t40516;
  t44868 = t31516*t4243;
  t44870 = t44559 + t44868 + t44019;
  t44882 = 9.e-12*t5260;
  t44541 = t33701*t44538;
  t44592 = t33038*t44584;
  t44600 = t32242*t44599;
  t44606 = -1.000000000009*t12108*t44538;
  t44616 = t34410*t44584;
  t44617 = t34091*t44599;
  t44625 = t44606 + t44616 + t44617;
  t44629 = -0.3*t44625;
  t44630 = -1.*t33846*t44538;
  t44645 = 1.000000000009*t12108*t44584;
  t44646 = -1.*t33815*t44599;
  t44647 = t44630 + t44645 + t44646;
  t44649 = 0.2*t44647;
  t44650 = t33815*t44538;
  t44651 = t34091*t44584;
  t44653 = -1.8e-11*t12108*t44599;
  t44654 = t44650 + t44651 + t44653;
  t44655 = -0.099999*t44654;
  t44658 = t44541 + t44592 + t44600 + t44629 + t44649 + t44655;
  t40521 = t32242*t40518;
  t40667 = t33038*t40634;
  t40923 = t33701*t40898;
  t41374 = -1.*t33815*t40518;
  t41406 = 1.000000000009*t12108*t40634;
  t41424 = -1.*t33846*t40898;
  t41427 = t41374 + t41406 + t41424;
  t41440 = 0.2*t41427;
  t41442 = -1.8e-11*t12108*t40518;
  t42516 = t34091*t40634;
  t42698 = t33815*t40898;
  t42914 = t41442 + t42516 + t42698;
  t43361 = -0.099999*t42914;
  t43383 = t34091*t40518;
  t43388 = t34410*t40634;
  t43397 = -1.000000000009*t12108*t40898;
  t43398 = t43383 + t43388 + t43397;
  t43444 = -0.3*t43398;
  t43445 = t40521 + t40667 + t40923 + t41440 + t43361 + t43444;
  t32260 = t32242*t32257;
  t33191 = t33038*t33161;
  t33812 = t33701*t33811;
  t33816 = -1.*t33815*t32257;
  t33817 = 1.000000000009*t12108*t33161;
  t33936 = -1.*t33846*t33811;
  t34001 = t33816 + t33817 + t33936;
  t34074 = 0.2*t34001;
  t34083 = -1.8e-11*t12108*t32257;
  t34385 = t34091*t33161;
  t34392 = t33815*t33811;
  t34398 = t34083 + t34385 + t34392;
  t34408 = -0.099999*t34398;
  t34409 = t34091*t32257;
  t34411 = t34410*t33161;
  t34418 = -1.000000000009*t12108*t33811;
  t34419 = t34409 + t34411 + t34418;
  t34420 = -0.3*t34419;
  t34422 = t32260 + t33191 + t33812 + t34074 + t34408 + t34420;
  t45331 = Cos(var1[3]);
  t45336 = 3.e-6*t2960*t45331*t3938*t4002;
  t45337 = -3.e-6*t45331*t4082*t4243;
  t45338 = -1.*t14948*t45331*t3938*t4421;
  t45343 = t45336 + t45337 + t45338;
  t45348 = t720*t45331*t3938*t4002;
  t45349 = t45331*t4082*t4243;
  t45350 = -3.e-6*t2960*t45331*t3938*t4421;
  t45351 = t45348 + t45349 + t45350;
  t45353 = -1.*t45331*t3938*t4002*t4082;
  t45354 = t31516*t45331*t4243;
  t45355 = -3.e-6*t45331*t3938*t4082*t4421;
  t45356 = t45353 + t45354 + t45355;
  t45389 = Sin(var1[3]);
  t45388 = -1.*t45331*t4002*t4243;
  t45390 = t45389*t4421;
  t45394 = t45388 + t45390;
  t45397 = -1.*t4002*t45389;
  t45398 = -1.*t45331*t4243*t4421;
  t45399 = t45397 + t45398;
  t45401 = t14948*t45394;
  t45402 = 3.e-6*t2960*t45399;
  t45403 = t45401 + t45402;
  t45405 = 3.e-6*t2960*t45394;
  t45406 = t720*t45399;
  t45407 = t45405 + t45406;
  t45409 = 3.e-6*t4082*t45394;
  t45411 = -1.*t4082*t45399;
  t45412 = t45409 + t45411;
  t45451 = t45331*t4002*t4243;
  t45453 = -1.*t45389*t4421;
  t45454 = t45451 + t45453;
  t45449 = 3.e-6*t45331*t3938*t4082;
  t45455 = 3.e-6*t2960*t45454;
  t45456 = t14948*t45399;
  t45457 = t45449 + t45455 + t45456;
  t45459 = -1.*t45331*t3938*t4082;
  t45460 = t720*t45454;
  t45461 = t45459 + t45460 + t45402;
  t45464 = -1.*t31516*t45331*t3938;
  t45465 = -1.*t4082*t45454;
  t45466 = 3.e-6*t4082*t45399;
  t45467 = t45464 + t45465 + t45466;
  t45540 = 1.000000000009*t45331*t3938*t4082;
  t45541 = -1.*t720*t45454;
  t45542 = 3.e-6*t720*t45399;
  t45543 = t45540 + t45541 + t45542;
  t45546 = 3.e-6*t720*t45331*t3938;
  t45547 = 3.e-6*t4082*t45454;
  t45548 = -9.e-12*t4082*t45399;
  t45549 = t45546 + t45547 + t45548;
  t45551 = -1.*t720*t45331*t3938;
  t45552 = t45551 + t45465 + t45466;
  t45577 = -1.*t4002*t45389*t4243;
  t45578 = -1.*t45331*t4421;
  t45579 = t45577 + t45578;
  t45581 = -1.*t45331*t4002;
  t45582 = t45389*t4243*t4421;
  t45583 = t45581 + t45582;
  t45587 = -3.e-6*t3938*t4082*t45389;
  t45588 = 3.e-6*t2960*t45579;
  t45589 = t14948*t45583;
  t45590 = t45587 + t45588 + t45589;
  t45592 = t3938*t4082*t45389;
  t45596 = t720*t45579;
  t45598 = 3.e-6*t2960*t45583;
  t45599 = t45592 + t45596 + t45598;
  t45603 = t31516*t3938*t45389;
  t45604 = -1.*t4082*t45579;
  t45605 = 3.e-6*t4082*t45583;
  t45606 = t45603 + t45604 + t45605;
  t45332 = t3869*t45331*t3938*t4002;
  t45333 = 0.2000000000018*t45331*t4082*t4243;
  t45334 = -6.000000000054e-7*t2960*t45331*t3938*t4421;
  t45347 = t13562*t45343;
  t45352 = t15466*t45351;
  t45357 = t31454*t45356;
  t45358 = t31608*t45343;
  t45360 = t31639*t45351;
  t45361 = t31773*t45356;
  t45362 = t45358 + t45360 + t45361;
  t45363 = -0.3*t45362;
  t45364 = -1.*t31802*t45343;
  t45365 = -1.*t31773*t45351;
  t45366 = -1.*t31806*t45356;
  t45367 = t45364 + t45365 + t45366;
  t45368 = 0.2*t45367;
  t45370 = t31827*t45343;
  t45374 = t31608*t45351;
  t45375 = t31802*t45356;
  t45376 = t45370 + t45374 + t45375;
  t45379 = -0.099999*t45376;
  t45380 = t45332 + t45333 + t45334 + t45347 + t45352 + t45357 + t45363 + t45368 + t45379;
  t45636 = 3.e-6*t2960*t3938*t4002*t45389;
  t45637 = -3.e-6*t4082*t45389*t4243;
  t45638 = -1.*t14948*t3938*t45389*t4421;
  t45639 = t45636 + t45637 + t45638;
  t45641 = t720*t3938*t4002*t45389;
  t45643 = t4082*t45389*t4243;
  t45644 = -3.e-6*t2960*t3938*t45389*t4421;
  t45645 = t45641 + t45643 + t45644;
  t45647 = -1.*t3938*t4002*t4082*t45389;
  t45648 = t31516*t45389*t4243;
  t45649 = -3.e-6*t3938*t4082*t45389*t4421;
  t45650 = t45647 + t45648 + t45649;
  t45793 = -1.*t720*t3938*t4002*t45389;
  t45796 = -1.000000000009*t4082*t45389*t4243;
  t45798 = -3.e-6*t720*t3938*t45389*t4421;
  t45799 = t45793 + t45796 + t45798;
  t45801 = t720*t45389*t4243;
  t45802 = t45647 + t45801 + t45649;
  t45804 = 3.e-6*t3938*t4002*t4082*t45389;
  t45805 = -3.e-6*t720*t45389*t4243;
  t45807 = 9.e-12*t3938*t4082*t45389*t4421;
  t45809 = t45804 + t45805 + t45807;
  t45874 = -1.*t14948*t3938*t4002*t45389;
  t45875 = t45874 + t45644;
  t45879 = -3.e-6*t2960*t3938*t4002*t45389;
  t45881 = -1.*t720*t3938*t45389*t4421;
  t45883 = t45879 + t45881;
  t45886 = -3.e-6*t3938*t4002*t4082*t45389;
  t45891 = t3938*t4082*t45389*t4421;
  t45892 = t45886 + t45891;
  t45576 = 0.2000000000018*t3938*t4082*t45389;
  t45945 = -3.e-6*t2960*t4002*t45389*t4243;
  t45946 = t14948*t45389*t4243*t4421;
  t45950 = t45587 + t45945 + t45946;
  t46023 = -1.*t720*t4002*t45389*t4243;
  t46027 = 3.e-6*t2960*t45389*t4243*t4421;
  t46028 = t45592 + t46023 + t46027;
  t46032 = t4002*t4082*t45389*t4243;
  t46033 = 3.e-6*t4082*t45389*t4243*t4421;
  t46035 = t45603 + t46032 + t46033;
  t45871 = -6.000000000054e-7*t2960*t3938*t4002*t45389;
  t45872 = -1.*t3869*t3938*t45389*t4421;
  t45878 = t13562*t45875;
  t45884 = t15466*t45883;
  t45893 = t31454*t45892;
  t45895 = t31608*t45875;
  t45896 = t31639*t45883;
  t45900 = t31773*t45892;
  t45906 = t45895 + t45896 + t45900;
  t45911 = -0.3*t45906;
  t45913 = -1.*t31802*t45875;
  t45914 = -1.*t31773*t45883;
  t45917 = -1.*t31806*t45892;
  t45919 = t45913 + t45914 + t45917;
  t45924 = 0.2*t45919;
  t45925 = t31827*t45875;
  t45929 = t31608*t45883;
  t45930 = t31802*t45892;
  t45933 = t45925 + t45929 + t45930;
  t45935 = -0.099999*t45933;
  t45937 = t45871 + t45872 + t45878 + t45884 + t45893 + t45911 + t45924 + t45935;
  t45395 = 6.000000000054e-7*t2960*t45394;
  t45400 = t3869*t45399;
  t45404 = t13562*t45403;
  t45408 = t15466*t45407;
  t45413 = t31454*t45412;
  t45414 = t31608*t45403;
  t45417 = t31639*t45407;
  t45419 = t31773*t45412;
  t45420 = t45414 + t45417 + t45419;
  t45422 = -0.3*t45420;
  t45423 = -1.*t31802*t45403;
  t45426 = -1.*t31773*t45407;
  t45427 = -1.*t31806*t45412;
  t45428 = t45423 + t45426 + t45427;
  t45429 = 0.2*t45428;
  t45432 = t31827*t45403;
  t45433 = t31608*t45407;
  t45434 = t31802*t45412;
  t45438 = t45432 + t45433 + t45434;
  t45441 = -0.099999*t45438;
  t45443 = t45395 + t45400 + t45404 + t45408 + t45413 + t45422 + t45429 + t45441;
  t46243 = t45331*t4002;
  t46244 = -1.*t45389*t4243*t4421;
  t46251 = t46243 + t46244;
  t46231 = t14948*t45579;
  t46252 = 3.e-6*t2960*t46251;
  t46255 = t46231 + t46252;
  t46283 = t720*t46251;
  t46315 = t45588 + t46283;
  t46333 = 3.e-6*t4082*t45579;
  t46337 = -1.*t4082*t46251;
  t46338 = t46333 + t46337;
  t46504 = 3.e-6*t720*t45579;
  t46506 = -1.*t720*t46251;
  t46507 = t46504 + t46506;
  t46517 = -9.e-12*t4082*t45579;
  t46518 = 3.e-6*t4082*t46251;
  t46522 = t46517 + t46518;
  t45580 = t3869*t45579;
  t45586 = 6.000000000054e-7*t2960*t45583;
  t46620 = t45588 + t45589;
  t46636 = t45596 + t45598;
  t46669 = t45604 + t45605;
  t45766 = -0.2000000000018*t3938*t4002*t4082*t45389;
  t45785 = 0.2000000000018*t720*t45389*t4243;
  t45787 = -6.000000000054e-7*t3938*t4082*t45389*t4421;
  t45800 = t31454*t45799;
  t45803 = t15466*t45802;
  t45810 = t13562*t45809;
  t45811 = t31802*t45799;
  t45812 = t31608*t45802;
  t45814 = t31827*t45809;
  t45815 = t45811 + t45812 + t45814;
  t45816 = -0.099999*t45815;
  t45825 = t31773*t45799;
  t45827 = t31639*t45802;
  t45834 = t31608*t45809;
  t45843 = t45825 + t45827 + t45834;
  t45846 = -0.3*t45843;
  t45849 = -1.*t31806*t45799;
  t45850 = -1.*t31773*t45802;
  t45851 = -1.*t31802*t45809;
  t45853 = t45849 + t45850 + t45851;
  t45866 = 0.2*t45853;
  t45867 = t45766 + t45785 + t45787 + t45800 + t45803 + t45810 + t45816 + t45846 + t45866;
  t45537 = -0.2000000000018*t720*t45331*t3938;
  t45538 = -0.2000000000018*t4082*t45454;
  t45539 = 6.000000000054e-7*t4082*t45399;
  t45544 = t31454*t45543;
  t45550 = t13562*t45549;
  t45553 = t15466*t45552;
  t45554 = -1.*t31806*t45543;
  t45557 = -1.*t31802*t45549;
  t45558 = -1.*t31773*t45552;
  t45559 = t45554 + t45557 + t45558;
  t45560 = 0.2*t45559;
  t45561 = t31802*t45543;
  t45562 = t31827*t45549;
  t45563 = t31608*t45552;
  t45564 = t45561 + t45562 + t45563;
  t45566 = -0.099999*t45564;
  t45568 = t31773*t45543;
  t45569 = t31608*t45549;
  t45570 = t31639*t45552;
  t45572 = t45568 + t45569 + t45570;
  t45573 = -0.3*t45572;
  t45574 = t45537 + t45538 + t45539 + t45544 + t45550 + t45553 + t45560 + t45566 + t45573;
  t46755 = t4002*t45389*t4243;
  t46757 = t45331*t4421;
  t46758 = t46755 + t46757;
  t46765 = 3.e-6*t720*t46758;
  t46767 = -9.e-12*t720*t46251;
  t46769 = t45587 + t46765 + t46767;
  t46775 = -1.*t720*t46758;
  t46776 = 3.e-6*t720*t46251;
  t46779 = t45592 + t46775 + t46776;
  t46786 = 1.000000000009*t720*t3938*t45389;
  t46787 = t4082*t46758;
  t46788 = -3.e-6*t4082*t46251;
  t46792 = t46786 + t46787 + t46788;
  t46490 = 6.000000000054e-7*t4082*t45579;
  t46498 = -0.2000000000018*t4082*t46251;
  t46508 = t31454*t46507;
  t46510 = t15466*t46338;
  t46523 = t13562*t46522;
  t46524 = t31802*t46507;
  t46525 = t31608*t46338;
  t46526 = t31827*t46522;
  t46527 = t46524 + t46525 + t46526;
  t46528 = -0.099999*t46527;
  t46535 = t31773*t46507;
  t46542 = t31639*t46338;
  t46547 = t31608*t46522;
  t46551 = t46535 + t46542 + t46547;
  t46556 = -0.3*t46551;
  t46583 = -1.*t31806*t46507;
  t46584 = -1.*t31773*t46338;
  t46586 = -1.*t31802*t46522;
  t46588 = t46583 + t46584 + t46586;
  t46589 = 0.2*t46588;
  t46595 = t46490 + t46498 + t46508 + t46510 + t46523 + t46528 + t46556 + t46589;
  t46831 = 1.000000000009*t3938*t4082*t45389;
  t46832 = t46831 + t46775 + t46776;
  t46834 = 3.e-6*t720*t3938*t45389;
  t46836 = 3.e-6*t4082*t46758;
  t46837 = -9.e-12*t4082*t46251;
  t46838 = t46834 + t46836 + t46837;
  t46869 = -1.*t720*t3938*t45389;
  t46883 = -1.*t4082*t46758;
  t46893 = t46869 + t46883 + t46518;
  t45640 = t32242*t45639;
  t45646 = t33038*t45645;
  t45651 = t33701*t45650;
  t45653 = -1.*t33815*t45639;
  t45654 = 1.000000000009*t12108*t45645;
  t45655 = -1.*t33846*t45650;
  t45659 = t45653 + t45654 + t45655;
  t45662 = 0.2*t45659;
  t45663 = -1.8e-11*t12108*t45639;
  t45666 = t34091*t45645;
  t45667 = t33815*t45650;
  t45668 = t45663 + t45666 + t45667;
  t45670 = -0.099999*t45668;
  t45671 = t34091*t45639;
  t45715 = t34410*t45645;
  t45720 = -1.000000000009*t12108*t45650;
  t45729 = t45671 + t45715 + t45720;
  t45753 = -0.3*t45729;
  t45754 = t45640 + t45646 + t45651 + t45662 + t45670 + t45753;
  t45458 = t32242*t45457;
  t45463 = t33038*t45461;
  t45468 = t33701*t45467;
  t45469 = -1.*t33815*t45457;
  t45470 = 1.000000000009*t12108*t45461;
  t45471 = -1.*t33846*t45467;
  t45473 = t45469 + t45470 + t45471;
  t45476 = 0.2*t45473;
  t45477 = -1.8e-11*t12108*t45457;
  t45482 = t34091*t45461;
  t45483 = t33815*t45467;
  t45486 = t45477 + t45482 + t45483;
  t45487 = -0.099999*t45486;
  t45488 = t34091*t45457;
  t45513 = t34410*t45461;
  t45515 = -1.000000000009*t12108*t45467;
  t45517 = t45488 + t45513 + t45515;
  t45525 = -0.3*t45517;
  t45530 = t45458 + t45463 + t45468 + t45476 + t45487 + t45525;
  t46256 = t32242*t46255;
  t46332 = t33038*t46315;
  t46340 = t33701*t46338;
  t46348 = -1.*t33815*t46255;
  t46352 = 1.000000000009*t12108*t46315;
  t46353 = -1.*t33846*t46338;
  t46361 = t46348 + t46352 + t46353;
  t46370 = 0.2*t46361;
  t46371 = -1.8e-11*t12108*t46255;
  t46376 = t34091*t46315;
  t46382 = t33815*t46338;
  t46397 = t46371 + t46376 + t46382;
  t46402 = -0.099999*t46397;
  t46405 = t34091*t46255;
  t46408 = t34410*t46315;
  t46422 = -1.000000000009*t12108*t46338;
  t46437 = t46405 + t46408 + t46422;
  t46440 = -0.3*t46437;
  t46460 = t46256 + t46332 + t46340 + t46370 + t46402 + t46440;
  t44745 = 5.4e-18*t5260;
  t44748 = 0.100000000003*t32228;
  t44749 = -0.200000000003*t34091;
  t44752 = t44745 + t44748 + t44749;
  t44776 = -0.2000000000048*t5260;
  t44779 = t44778 + t12108;
  t44780 = 0.100000000003*t44779;
  t44781 = t44776 + t33192 + t44780;
  t44850 = 0.1000000000039*t5260;
  t44855 = t44778 + t15302;
  t44861 = -0.200000000003*t44855;
  t44866 = 3.e-7*t34091;
  t44867 = t44850 + t44861 + t44866;
  t47081 = 3.e-6*t3938*t4082*t45389;
  t47082 = 3.e-6*t2960*t46758;
  t47096 = t14948*t46251;
  t47101 = t47081 + t47082 + t47096;
  t44884 = t44882 + t15302;
  t47112 = -1.*t3938*t4082*t45389;
  t47113 = t720*t46758;
  t47145 = t47112 + t47113 + t46252;
  t47165 = -1.*t31516*t3938*t45389;
  t47166 = t47165 + t46883 + t46518;
  t44931 = t44882 + t12108;
  t46833 = t33701*t46832;
  t46841 = t32242*t46838;
  t46897 = t33038*t46893;
  t46904 = -1.000000000009*t12108*t46832;
  t46978 = t34091*t46838;
  t46997 = t34410*t46893;
  t47002 = t46904 + t46978 + t46997;
  t47023 = -0.3*t47002;
  t47029 = t33815*t46832;
  t47030 = -1.8e-11*t12108*t46838;
  t47033 = t34091*t46893;
  t47051 = t47029 + t47030 + t47033;
  t47052 = -0.099999*t47051;
  t47055 = -1.*t33846*t46832;
  t47058 = -1.*t33815*t46838;
  t47060 = 1.000000000009*t12108*t46893;
  t47062 = t47055 + t47058 + t47060;
  t47066 = 0.2*t47062;
  t47067 = t46833 + t46841 + t46897 + t47023 + t47052 + t47066;
  t47387 = t3869*t3938*t4002*t45389;
  t47388 = 0.2000000000018*t4082*t45389*t4243;
  t47389 = -6.000000000054e-7*t2960*t3938*t45389*t4421;
  t47394 = t13562*t45639;
  t47396 = t15466*t45645;
  t47400 = t31454*t45650;
  t47402 = t31608*t45639;
  t47405 = t31639*t45645;
  t47406 = t31773*t45650;
  t47407 = t47402 + t47405 + t47406;
  t47408 = -0.3*t47407;
  t47409 = -1.*t31802*t45639;
  t47410 = -1.*t31773*t45645;
  t47411 = -1.*t31806*t45650;
  t47413 = t47409 + t47410 + t47411;
  t47414 = 0.2*t47413;
  t47415 = t31827*t45639;
  t47416 = t31608*t45645;
  t47417 = t31802*t45650;
  t47424 = t47415 + t47416 + t47417;
  t47457 = -0.099999*t47424;
  t47458 = t47387 + t47388 + t47389 + t47394 + t47396 + t47400 + t47408 + t47414 + t47457;
  t47287 = -0.2000000000018*t45331*t3938*t4082;
  t47293 = t3869*t45454;
  t47331 = 6.000000000054e-7*t2960*t45399;
  t47334 = t13562*t45457;
  t47337 = t15466*t45461;
  t47341 = t31454*t45467;
  t47342 = t31608*t45457;
  t47343 = t31639*t45461;
  t47347 = t31773*t45467;
  t47351 = t47342 + t47343 + t47347;
  t47353 = -0.3*t47351;
  t47355 = -1.*t31802*t45457;
  t47356 = -1.*t31773*t45461;
  t47359 = -1.*t31806*t45467;
  t47361 = t47355 + t47356 + t47359;
  t47362 = 0.2*t47361;
  t47363 = t31827*t45457;
  t47365 = t31608*t45461;
  t47370 = t31802*t45467;
  t47371 = t47363 + t47365 + t47370;
  t47379 = -0.099999*t47371;
  t47380 = t47287 + t47293 + t47331 + t47334 + t47337 + t47341 + t47353 + t47362 + t47379;
  t47462 = 6.000000000054e-7*t2960*t45579;
  t47472 = t3869*t46251;
  t47477 = t13562*t46255;
  t47482 = t15466*t46315;
  t47486 = t31454*t46338;
  t47487 = t31608*t46255;
  t47488 = t31639*t46315;
  t47492 = t31773*t46338;
  t47512 = t47487 + t47488 + t47492;
  t47528 = -0.3*t47512;
  t47543 = -1.*t31802*t46255;
  t47555 = -1.*t31773*t46315;
  t47557 = -1.*t31806*t46338;
  t47574 = t47543 + t47555 + t47557;
  t47583 = 0.2*t47574;
  t47587 = t31827*t46255;
  t47603 = t31608*t46315;
  t47604 = t31802*t46338;
  t47605 = t47587 + t47603 + t47604;
  t47606 = -0.099999*t47605;
  t47607 = t47462 + t47472 + t47477 + t47482 + t47486 + t47528 + t47583 + t47606;
  t47792 = t32242*t47101;
  t47794 = t33038*t47145;
  t47795 = t33701*t47166;
  t47800 = -1.*t33815*t47101;
  t47805 = 1.000000000009*t12108*t47145;
  t47808 = -1.*t33846*t47166;
  t47809 = t47800 + t47805 + t47808;
  t47815 = 0.2*t47809;
  t47816 = -1.8e-11*t12108*t47101;
  t47818 = t34091*t47145;
  t47822 = t33815*t47166;
  t47823 = t47816 + t47818 + t47822;
  t47824 = -0.099999*t47823;
  t47826 = t34091*t47101;
  t47831 = t34410*t47145;
  t47832 = -1.000000000009*t12108*t47166;
  t47838 = t47826 + t47831 + t47832;
  t47839 = -0.3*t47838;
  t47846 = t47792 + t47794 + t47795 + t47815 + t47824 + t47839;
  t47652 = -0.2000000000018*t720*t3938*t45389;
  t47653 = -0.2000000000018*t4082*t46758;
  t47657 = 6.000000000054e-7*t4082*t46251;
  t47658 = t31454*t46832;
  t47659 = t13562*t46838;
  t47667 = t15466*t46893;
  t47670 = -1.*t31806*t46832;
  t47674 = -1.*t31802*t46838;
  t47677 = -1.*t31773*t46893;
  t47680 = t47670 + t47674 + t47677;
  t47684 = 0.2*t47680;
  t47702 = t31802*t46832;
  t47707 = t31827*t46838;
  t47708 = t31608*t46893;
  t47731 = t47702 + t47707 + t47708;
  t47735 = -0.099999*t47731;
  t47742 = t31773*t46832;
  t47745 = t31608*t46838;
  t47760 = t31639*t46893;
  t47769 = t47742 + t47745 + t47760;
  t47781 = -0.3*t47769;
  t47791 = t47652 + t47653 + t47657 + t47658 + t47659 + t47667 + t47684 + t47735 + t47781;
  t47871 = t14948*t45331*t3938*t4002;
  t47872 = 3.e-6*t2960*t45331*t3938*t4421;
  t47879 = t47871 + t47872;
  t47892 = t720*t45331*t3938*t4421;
  t47912 = t45336 + t47892;
  t47920 = 3.e-6*t45331*t3938*t4002*t4082;
  t47929 = -1.*t45331*t3938*t4082*t4421;
  t47942 = t47920 + t47929;
  t47988 = -3.e-6*t2960*t45331*t3938*t4002;
  t47991 = 3.e-6*t45331*t4082*t4243;
  t47995 = t14948*t45331*t3938*t4421;
  t47996 = t47988 + t47991 + t47995;
  t47999 = -1.*t720*t45331*t3938*t4002;
  t48001 = -1.*t45331*t4082*t4243;
  t48003 = t47999 + t48001 + t47872;
  t48009 = t45331*t3938*t4002*t4082;
  t48013 = -1.*t31516*t45331*t4243;
  t48015 = 3.e-6*t45331*t3938*t4082*t4421;
  t48017 = t48009 + t48013 + t48015;
  t48077 = 1.000000000009*t45331*t4082*t4243;
  t48078 = 3.e-6*t720*t45331*t3938*t4421;
  t48079 = t45348 + t48077 + t48078;
  t48081 = -3.e-6*t45331*t3938*t4002*t4082;
  t48082 = 3.e-6*t720*t45331*t4243;
  t48088 = -9.e-12*t45331*t3938*t4082*t4421;
  t48090 = t48081 + t48082 + t48088;
  t48097 = -1.*t720*t45331*t4243;
  t48101 = t48009 + t48097 + t48015;
  t48149 = 3.e-6*t2960*t45331*t4002*t4243;
  t48150 = -1.*t14948*t45331*t4243*t4421;
  t48152 = t45449 + t48149 + t48150;
  t48155 = t720*t45331*t4002*t4243;
  t48157 = -3.e-6*t2960*t45331*t4243*t4421;
  t48158 = t45459 + t48155 + t48157;
  t48160 = -1.*t45331*t4002*t4082*t4243;
  t48161 = -3.e-6*t45331*t4082*t4243*t4421;
  t48162 = t45464 + t48160 + t48161;
  t47869 = 6.000000000054e-7*t2960*t45331*t3938*t4002;
  t47870 = t3869*t45331*t3938*t4421;
  t47886 = t13562*t47879;
  t47916 = t15466*t47912;
  t47943 = t31454*t47942;
  t47944 = t31608*t47879;
  t47945 = t31639*t47912;
  t47951 = t31773*t47942;
  t47952 = t47944 + t47945 + t47951;
  t47957 = -0.3*t47952;
  t47962 = -1.*t31802*t47879;
  t47964 = -1.*t31773*t47912;
  t47965 = -1.*t31806*t47942;
  t47966 = t47962 + t47964 + t47965;
  t47967 = 0.2*t47966;
  t47968 = t31827*t47879;
  t47970 = t31608*t47912;
  t47973 = t31802*t47942;
  t47976 = t47968 + t47970 + t47973;
  t47978 = -0.099999*t47976;
  t47980 = t47869 + t47870 + t47886 + t47916 + t47943 + t47957 + t47967 + t47978;
  t48212 = t45455 + t45456;
  t48215 = t45460 + t45402;
  t48218 = t45465 + t45466;
  t48254 = t4002*t45389;
  t48260 = t45331*t4243*t4421;
  t48261 = t48254 + t48260;
  t48251 = t14948*t45454;
  t48262 = 3.e-6*t2960*t48261;
  t48263 = t48251 + t48262;
  t48266 = t720*t48261;
  t48268 = t45455 + t48266;
  t48271 = -1.*t4082*t48261;
  t48272 = t45547 + t48271;
  t48308 = 3.e-6*t720*t45454;
  t48310 = -1.*t720*t48261;
  t48311 = t48308 + t48310;
  t48317 = -9.e-12*t4082*t45454;
  t48329 = 3.e-6*t4082*t48261;
  t48330 = t48317 + t48329;
  t48068 = 0.2000000000018*t45331*t3938*t4002*t4082;
  t48074 = -0.2000000000018*t720*t45331*t4243;
  t48076 = 6.000000000054e-7*t45331*t3938*t4082*t4421;
  t48080 = t31454*t48079;
  t48094 = t13562*t48090;
  t48102 = t15466*t48101;
  t48104 = -1.*t31806*t48079;
  t48106 = -1.*t31802*t48090;
  t48109 = -1.*t31773*t48101;
  t48112 = t48104 + t48106 + t48109;
  t48113 = 0.2*t48112;
  t48114 = t31802*t48079;
  t48116 = t31827*t48090;
  t48117 = t31608*t48101;
  t48119 = t48114 + t48116 + t48117;
  t48123 = -0.099999*t48119;
  t48127 = t31773*t48079;
  t48128 = t31608*t48090;
  t48129 = t31639*t48101;
  t48132 = t48127 + t48128 + t48129;
  t48133 = -0.3*t48132;
  t48139 = t48068 + t48074 + t48076 + t48080 + t48094 + t48102 + t48113 + t48123 + t48133;
  t48386 = 3.e-6*t720*t45394;
  t48388 = -9.e-12*t720*t48261;
  t48396 = t45449 + t48386 + t48388;
  t48406 = -1.*t720*t45394;
  t48407 = 3.e-6*t720*t48261;
  t48409 = t45459 + t48406 + t48407;
  t48416 = -1.000000000009*t720*t45331*t3938;
  t48419 = t4082*t45394;
  t48420 = -3.e-6*t4082*t48261;
  t48427 = t48416 + t48419 + t48420;
  t48306 = 6.000000000054e-7*t4082*t45454;
  t48307 = -0.2000000000018*t4082*t48261;
  t48313 = t31454*t48311;
  t48315 = t15466*t48272;
  t48331 = t13562*t48330;
  t48332 = t31802*t48311;
  t48336 = t31608*t48272;
  t48337 = t31827*t48330;
  t48339 = t48332 + t48336 + t48337;
  t48345 = -0.099999*t48339;
  t48346 = t31773*t48311;
  t48348 = t31639*t48272;
  t48349 = t31608*t48330;
  t48350 = t48346 + t48348 + t48349;
  t48352 = -0.3*t48350;
  t48353 = -1.*t31806*t48311;
  t48356 = -1.*t31773*t48272;
  t48359 = -1.*t31802*t48330;
  t48360 = t48353 + t48356 + t48359;
  t48361 = 0.2*t48360;
  t48363 = t48306 + t48307 + t48313 + t48315 + t48331 + t48345 + t48352 + t48361;
  t48454 = -1.000000000009*t45331*t3938*t4082;
  t48455 = t48454 + t48406 + t48407;
  t48458 = -3.e-6*t720*t45331*t3938;
  t48459 = -9.e-12*t4082*t48261;
  t48460 = t48458 + t45409 + t48459;
  t48462 = t720*t45331*t3938;
  t48464 = -1.*t4082*t45394;
  t48465 = t48462 + t48464 + t48329;
  t47997 = t32242*t47996;
  t48005 = t33038*t48003;
  t48019 = t33701*t48017;
  t48020 = -1.*t33815*t47996;
  t48021 = 1.000000000009*t12108*t48003;
  t48022 = -1.*t33846*t48017;
  t48025 = t48020 + t48021 + t48022;
  t48027 = 0.2*t48025;
  t48028 = -1.8e-11*t12108*t47996;
  t48029 = t34091*t48003;
  t48030 = t33815*t48017;
  t48031 = t48028 + t48029 + t48030;
  t48033 = -0.099999*t48031;
  t48035 = t34091*t47996;
  t48037 = t34410*t48003;
  t48039 = -1.000000000009*t12108*t48017;
  t48041 = t48035 + t48037 + t48039;
  t48043 = -0.3*t48041;
  t48055 = t47997 + t48005 + t48019 + t48027 + t48033 + t48043;
  t48265 = t32242*t48263;
  t48269 = t33038*t48268;
  t48273 = t33701*t48272;
  t48274 = -1.*t33815*t48263;
  t48275 = 1.000000000009*t12108*t48268;
  t48277 = -1.*t33846*t48272;
  t48278 = t48274 + t48275 + t48277;
  t48279 = 0.2*t48278;
  t48280 = -1.8e-11*t12108*t48263;
  t48282 = t34091*t48268;
  t48285 = t33815*t48272;
  t48286 = t48280 + t48282 + t48285;
  t48287 = -0.099999*t48286;
  t48288 = t34091*t48263;
  t48290 = t34410*t48268;
  t48291 = -1.000000000009*t12108*t48272;
  t48293 = t48288 + t48290 + t48291;
  t48296 = -0.3*t48293;
  t48299 = t48265 + t48269 + t48273 + t48279 + t48287 + t48296;
  t48498 = -3.e-6*t45331*t3938*t4082;
  t48499 = t14948*t48261;
  t48503 = t48498 + t45405 + t48499;
  t48505 = t45331*t3938*t4082;
  t48506 = t720*t45394;
  t48509 = t48505 + t48506 + t48262;
  t48512 = t31516*t45331*t3938;
  t48515 = t48512 + t48464 + t48329;
  t48457 = t33701*t48455;
  t48461 = t32242*t48460;
  t48466 = t33038*t48465;
  t48469 = -1.000000000009*t12108*t48455;
  t48471 = t34091*t48460;
  t48472 = t34410*t48465;
  t48473 = t48469 + t48471 + t48472;
  t48474 = -0.3*t48473;
  t48475 = t33815*t48455;
  t48476 = -1.8e-11*t12108*t48460;
  t48477 = t34091*t48465;
  t48479 = t48475 + t48476 + t48477;
  t48480 = -0.099999*t48479;
  t48481 = -1.*t33846*t48455;
  t48482 = -1.*t33815*t48460;
  t48483 = 1.000000000009*t12108*t48465;
  t48484 = t48481 + t48482 + t48483;
  t48485 = 0.2*t48484;
  t48487 = t48457 + t48461 + t48466 + t48474 + t48480 + t48485;
  p_output1[0]=(t13562*t15065 + t15466*t22637 + t31454*t31575 - 0.3*(t15065*t31608 + t22637*t31639 + t31575*t31773) + 0.2*(-1.*t22637*t31773 - 1.*t15065*t31802 - 1.*t31575*t31806) - 0.099999*(t22637*t31608 + t31575*t31802 + t15065*t31827) + t4059 + t4404 + t4596)*var2[4] + t32217*var2[5] + t36069*var2[19] + t34422*var2[21];
  p_output1[1]=t32217*var2[4] + (t13562*t37722 + t15466*t37871 + t31454*t38382 - 0.3*(t31608*t37722 + t31639*t37871 + t31773*t38382) - 0.099999*(t31827*t37722 + t31608*t37871 + t31802*t38382) + 0.2*(-1.*t31802*t37722 - 1.*t31773*t37871 - 1.*t31806*t38382) + t4059 + t4596)*var2[5] + t44502*var2[19] + t43445*var2[21];
  p_output1[2]=t36069*var2[4] + t44502*var2[5] + (t4404 + t15466*t44665 + t13562*t44677 + t31454*t44682 - 0.3*(t31639*t44665 + t31608*t44677 + t31773*t44682) - 0.099999*(t31608*t44665 + t31827*t44677 + t31802*t44682) + 0.2*(-1.*t31773*t44665 - 1.*t31802*t44677 - 1.*t31806*t44682) - 0.2000000000018*t3938*t4002*t720 - 6.000000000054e-7*t3938*t4421*t720)*var2[19] + t44658*var2[21];
  p_output1[3]=t34422*var2[4] + t43445*var2[5] + t44658*var2[19] + (t44752*t44757 + t44781*t44815 + t44867*t44870 - 0.099999*(t33815*t44815 + t32232*t44870 - 1.8e-11*t44757*t5260) + 0.2*(-1.*t32232*t44757 - 1.*t44870*t44931 + 1.000000000009*t44815*t5260) - 0.3*(t33815*t44757 + t44815*t44884 - 1.000000000009*t44870*t5260))*var2[21];
  p_output1[4]=1.;
  p_output1[5]=t13562*t32257 + t15466*t33161 + t31454*t33811 - 0.3*(t31608*t32257 + t31639*t33161 + t31773*t33811) - 0.099999*(t31827*t32257 + t31608*t33161 + t31802*t33811) + 0.2*(-1.*t31802*t32257 - 1.*t31773*t33161 - 1.*t31806*t33811) + 0.2000000000018*t3938*t4082 - 1.*t3869*t4002*t4243 + 6.000000000054e-7*t2960*t4243*t4421;
  p_output1[6]=-6.000000000054e-7*t2960*t3938*t4002 + t13562*t40518 + t15466*t40634 + t31454*t40898 - 0.3*(t31608*t40518 + t31639*t40634 + t31773*t40898) - 0.099999*(t31827*t40518 + t31608*t40634 + t31802*t40898) + 0.2*(-1.*t31802*t40518 - 1.*t31773*t40634 - 1.*t31806*t40898) - 1.*t3869*t3938*t4421;
  p_output1[7]=-0.2000000000018*t3938*t4002*t4082 - 6.000000000054e-7*t3938*t4082*t4421 + t31454*t44538 + t15466*t44584 + t13562*t44599 - 0.3*(t31773*t44538 + t31639*t44584 + t31608*t44599) + 0.2*(-1.*t31806*t44538 - 1.*t31773*t44584 - 1.*t31802*t44599) - 0.099999*(t31802*t44538 + t31608*t44584 + t31827*t44599) + 0.2000000000018*t4243*t720;
  p_output1[8]=t32242*t44757 + t33038*t44815 + t33701*t44870 - 0.3*(t34091*t44757 + t34410*t44815 - 1.000000000009*t12108*t44870) - 0.099999*(-1.8e-11*t12108*t44757 + t34091*t44815 + t33815*t44870) + 0.2*(-1.*t33815*t44757 + 1.000000000009*t12108*t44815 - 1.*t33846*t44870);
  p_output1[9]=(t45576 + t45580 + t45586 + t13562*t45590 + t15466*t45599 + t31454*t45606 - 0.3*(t31608*t45590 + t31639*t45599 + t31773*t45606) - 0.099999*(t31827*t45590 + t31608*t45599 + t31802*t45606) + 0.2*(-1.*t31802*t45590 - 1.*t31773*t45599 - 1.*t31806*t45606))*var2[3] + t45380*var2[4] + t45443*var2[5] + t45574*var2[19] + t45530*var2[21];
  p_output1[10]=t45380*var2[3] + (-1.*t3869*t4002*t4243*t45389 + 6.000000000054e-7*t2960*t4243*t4421*t45389 + t45576 + t13562*t45950 + t15466*t46028 + t31454*t46035 - 0.3*(t31608*t45950 + t31639*t46028 + t31773*t46035) - 0.099999*(t31827*t45950 + t31608*t46028 + t31802*t46035) + 0.2*(-1.*t31802*t45950 - 1.*t31773*t46028 - 1.*t31806*t46035))*var2[4] + t45937*var2[5] + t45867*var2[19] + t45754*var2[21];
  p_output1[11]=t45443*var2[3] + t45937*var2[4] + (t45580 + t45586 + t13562*t46620 + t15466*t46636 + t31454*t46669 - 0.3*(t31608*t46620 + t31639*t46636 + t31773*t46669) - 0.099999*(t31827*t46620 + t31608*t46636 + t31802*t46669) + 0.2*(-1.*t31802*t46620 - 1.*t31773*t46636 - 1.*t31806*t46669))*var2[5] + t46595*var2[19] + t46460*var2[21];
  p_output1[12]=t45574*var2[3] + t45867*var2[4] + t46595*var2[5] + (t45576 + t13562*t46769 + t15466*t46779 + t31454*t46792 - 0.3*(t31608*t46769 + t31639*t46779 + t31773*t46792) - 0.099999*(t31827*t46769 + t31608*t46779 + t31802*t46792) + 0.2*(-1.*t31802*t46769 - 1.*t31773*t46779 - 1.*t31806*t46792) + 6.000000000054e-7*t46251*t720 - 0.2000000000018*t46758*t720)*var2[19] + t47067*var2[21];
  p_output1[13]=t45530*var2[3] + t45754*var2[4] + t46460*var2[5] + t47067*var2[19] + (t44752*t47101 + t44781*t47145 + t44867*t47166 - 0.099999*(t33815*t47145 + t32232*t47166 - 1.8e-11*t47101*t5260) + 0.2*(-1.*t32232*t47101 - 1.*t44931*t47166 + 1.000000000009*t47145*t5260) - 0.3*(t33815*t47101 + t44884*t47145 - 1.000000000009*t47166*t5260))*var2[21];
  p_output1[14]=1.;
  p_output1[15]=t47380;
  p_output1[16]=t47458;
  p_output1[17]=t47607;
  p_output1[18]=t47791;
  p_output1[19]=t47846;
  p_output1[20]=t47380*var2[3] + t47458*var2[4] + t47607*var2[5] + t47791*var2[19] + t47846*var2[21];
  p_output1[21]=t47458*var2[3] + (t3869*t4002*t4243*t45331 - 6.000000000054e-7*t2960*t4243*t4421*t45331 + t47287 + t13562*t48152 + t15466*t48158 + t31454*t48162 - 0.3*(t31608*t48152 + t31639*t48158 + t31773*t48162) - 0.099999*(t31827*t48152 + t31608*t48158 + t31802*t48162) + 0.2*(-1.*t31802*t48152 - 1.*t31773*t48158 - 1.*t31806*t48162))*var2[4] + t47980*var2[5] + t48139*var2[19] + t48055*var2[21];
  p_output1[22]=t47607*var2[3] + t47980*var2[4] + (t47293 + t47331 + t13562*t48212 + t15466*t48215 + t31454*t48218 - 0.3*(t31608*t48212 + t31639*t48215 + t31773*t48218) - 0.099999*(t31827*t48212 + t31608*t48215 + t31802*t48218) + 0.2*(-1.*t31802*t48212 - 1.*t31773*t48215 - 1.*t31806*t48218))*var2[5] + t48363*var2[19] + t48299*var2[21];
  p_output1[23]=t47791*var2[3] + t48139*var2[4] + t48363*var2[5] + (t47287 + t13562*t48396 + t15466*t48409 + t31454*t48427 - 0.3*(t31608*t48396 + t31639*t48409 + t31773*t48427) - 0.099999*(t31827*t48396 + t31608*t48409 + t31802*t48427) + 0.2*(-1.*t31802*t48396 - 1.*t31773*t48409 - 1.*t31806*t48427) - 0.2000000000018*t45394*t720 + 6.000000000054e-7*t48261*t720)*var2[19] + t48487*var2[21];
  p_output1[24]=t47846*var2[3] + t48055*var2[4] + t48299*var2[5] + t48487*var2[19] + (t44752*t48503 + t44781*t48509 + t44867*t48515 - 0.099999*(t33815*t48509 + t32232*t48515 - 1.8e-11*t48503*t5260) + 0.2*(-1.*t32232*t48503 - 1.*t44931*t48515 + 1.000000000009*t48509*t5260) - 0.3*(t33815*t48503 + t44884*t48509 - 1.000000000009*t48515*t5260))*var2[21];
  p_output1[25]=1.;
  p_output1[26]=-0.2000000000018*t3938*t4082*t45389 + 6.000000000054e-7*t2960*t46251 + t3869*t46758 + t13562*t47101 + t15466*t47145 + t31454*t47166 - 0.3*(t31608*t47101 + t31639*t47145 + t31773*t47166) - 0.099999*(t31827*t47101 + t31608*t47145 + t31802*t47166) + 0.2*(-1.*t31802*t47101 - 1.*t31773*t47145 - 1.*t31806*t47166);
  p_output1[27]=-1.*t3869*t3938*t4002*t45331 - 0.2000000000018*t4082*t4243*t45331 + 6.000000000054e-7*t2960*t3938*t4421*t45331 + t13562*t47996 + t15466*t48003 + t31454*t48017 - 0.3*(t31608*t47996 + t31639*t48003 + t31773*t48017) - 0.099999*(t31827*t47996 + t31608*t48003 + t31802*t48017) + 0.2*(-1.*t31802*t47996 - 1.*t31773*t48003 - 1.*t31806*t48017);
  p_output1[28]=6.000000000054e-7*t2960*t45454 + t3869*t48261 + t13562*t48263 + t15466*t48268 + t31454*t48272 - 0.3*(t31608*t48263 + t31639*t48268 + t31773*t48272) - 0.099999*(t31827*t48263 + t31608*t48268 + t31802*t48272) + 0.2*(-1.*t31802*t48263 - 1.*t31773*t48268 - 1.*t31806*t48272);
  p_output1[29]=-0.2000000000018*t4082*t45394 + 6.000000000054e-7*t4082*t48261 + t31454*t48455 + t13562*t48460 + t15466*t48465 - 0.099999*(t31802*t48455 + t31827*t48460 + t31608*t48465) - 0.3*(t31773*t48455 + t31608*t48460 + t31639*t48465) + 0.2*(-1.*t31806*t48455 - 1.*t31802*t48460 - 1.*t31773*t48465) + 0.2000000000018*t3938*t45331*t720;
  p_output1[30]=t32242*t48503 + t33038*t48509 + t33701*t48515 - 0.3*(t34091*t48503 + t34410*t48509 - 1.000000000009*t12108*t48515) - 0.099999*(-1.8e-11*t12108*t48503 + t34091*t48509 + t33815*t48515) + 0.2*(-1.*t33815*t48503 + 1.000000000009*t12108*t48509 - 1.*t33846*t48515);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RightBackFoot.hh"

namespace Flight2
{

void J_impact_velocity_RightBackFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
