/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:08:54 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3947;
  double t4033;
  double t4074;
  double t4131;
  double t4748;
  double t4757;
  double t4922;
  double t5279;
  double t5136;
  double t5141;
  double t5144;
  double t5155;
  double t4413;
  double t4670;
  double t4728;
  double t4733;
  double t5274;
  double t5280;
  double t5281;
  double t5286;
  double t5304;
  double t5308;
  double t4885;
  double t4920;
  double t4965;
  double t5007;
  double t2312;
  double t4246;
  double t4353;
  double t300;
  double t319;
  double t331;
  double t3677;
  double t5467;
  double t5129;
  double t5156;
  double t5361;
  double t5491;
  double t6035;
  double t6162;
  double t4368;
  double t5382;
  double t5440;
  double t6183;
  double t6203;
  double t6219;
  double t12478;
  double t6392;
  double t6446;
  double t6447;
  double t6731;
  double t6745;
  double t7088;
  double t7104;
  double t7227;
  double t7241;
  double t9616;
  double t11128;
  double t12134;
  double t12210;
  double t12213;
  double t14208;
  double t14230;
  double t14232;
  double t13104;
  double t13110;
  double t13196;
  double t13280;
  double t14040;
  double t14540;
  double t14551;
  double t14573;
  double t14604;
  double t14619;
  double t7294;
  double t7297;
  double t7393;
  double t12579;
  double t12585;
  double t12608;
  double t8341;
  double t19486;
  double t13201;
  double t13214;
  double t14125;
  double t14131;
  double t14150;
  double t14361;
  double t12235;
  double t12240;
  double t12250;
  double t12823;
  double t12833;
  double t12837;
  double t14680;
  double t14839;
  double t18199;
  double t18226;
  double t18233;
  double t21442;
  double t21458;
  double t21658;
  double t24555;
  double t24784;
  double t12309;
  double t12333;
  double t12335;
  double t8189;
  double t8346;
  double t12492;
  double t12558;
  double t12567;
  double t12655;
  double t12783;
  double t12805;
  double t12855;
  double t12872;
  double t22497;
  double t22511;
  double t22519;
  double t22619;
  double t22693;
  double t22742;
  double t23190;
  double t23220;
  double t23419;
  double t23474;
  double t23525;
  double t23559;
  double t13091;
  double t14508;
  double t14526;
  double t14531;
  double t14624;
  double t14625;
  double t14634;
  double t39077;
  double t39083;
  double t39110;
  double t17928;
  double t18076;
  double t18101;
  double t18114;
  double t18136;
  double t18144;
  double t18162;
  double t18190;
  double t40388;
  double t41447;
  double t41471;
  double t19896;
  double t19912;
  double t18985;
  double t19730;
  double t19926;
  double t19966;
  double t19968;
  double t20236;
  double t20248;
  double t20079;
  double t20083;
  double t20292;
  double t20456;
  double t20717;
  double t21012;
  double t21161;
  double t21195;
  double t21217;
  double t21398;
  double t21401;
  double t42514;
  double t42539;
  double t45100;
  double t24571;
  double t24662;
  double t24756;
  double t27652;
  double t27666;
  double t28995;
  double t31330;
  double t31593;
  double t31684;
  double t32373;
  double t32410;
  double t32455;
  double t32775;
  double t32801;
  double t32811;
  double t32880;
  double t32887;
  double t32923;
  double t32979;
  double t33004;
  double t33016;
  double t33088;
  double t33203;
  double t33227;
  double t48957;
  double t48981;
  double t48990;
  double t49066;
  double t49094;
  double t49122;
  double t49231;
  double t49240;
  double t49263;
  double t49274;
  double t49277;
  double t49279;
  double t48560;
  double t48563;
  double t48571;
  double t48596;
  double t48654;
  double t48659;
  double t49311;
  double t49353;
  double t49357;
  double t6348;
  double t6349;
  double t6366;
  double t7493;
  double t8400;
  double t8746;
  double t12306;
  double t12346;
  double t12362;
  double t52165;
  double t52229;
  double t52255;
  double t52291;
  double t52353;
  double t52404;
  double t52407;
  double t52456;
  double t52460;
  double t51896;
  double t51928;
  double t51936;
  double t51987;
  double t51990;
  double t51991;
  double t51957;
  double t51963;
  double t51976;
  double t52125;
  double t52128;
  double t52158;
  double t52159;
  double t52509;
  double t52532;
  double t52578;
  double t52587;
  double t52589;
  double t52602;
  double t52614;
  double t52630;
  double t18192;
  double t18414;
  double t18423;
  double t52862;
  double t52867;
  double t52945;
  double t52956;
  double t14647;
  double t14908;
  double t17014;
  double t53120;
  double t53140;
  double t53146;
  double t52990;
  double t52996;
  double t53033;
  double t53266;
  double t53280;
  double t53334;
  double t52985;
  double t53036;
  double t53062;
  double t53119;
  double t53156;
  double t53179;
  double t53214;
  double t53218;
  double t53221;
  double t53257;
  double t53398;
  double t53413;
  double t53458;
  double t53459;
  double t53472;
  double t21418;
  double t21667;
  double t22022;
  double t52576;
  double t52591;
  double t52634;
  double t52636;
  double t52663;
  double t52672;
  double t52676;
  double t55841;
  double t55884;
  double t55971;
  double t58141;
  double t58159;
  double t58160;
  double t53658;
  double t53677;
  double t53784;
  double t53818;
  double t53901;
  double t53949;
  double t54057;
  double t54109;
  double t54683;
  double t54711;
  double t54785;
  double t54799;
  double t54961;
  double t54969;
  double t54983;
  double t54995;
  double t55489;
  double t55490;
  double t55501;
  double t55510;
  double t55749;
  double t55751;
  double t55752;
  double t55753;
  double t413;
  double t3885;
  double t3933;
  double t59615;
  double t59618;
  double t59623;
  double t57894;
  double t57912;
  double t57918;
  double t57946;
  double t59833;
  double t59842;
  double t59843;
  double t19785;
  double t19972;
  double t20025;
  double t20231;
  double t20770;
  double t20811;
  double t60349;
  double t60352;
  double t60399;
  double t60412;
  double t60413;
  double t60414;
  double t60416;
  double t60417;
  double t60439;
  double t60340;
  double t60402;
  double t60404;
  double t60415;
  double t60444;
  double t60455;
  double t60457;
  double t60458;
  double t60459;
  double t52696;
  double t52718;
  double t52721;
  double t52967;
  double t53071;
  double t53525;
  double t53527;
  double t54237;
  double t54247;
  double t54880;
  double t54885;
  double t55120;
  double t55123;
  double t55537;
  double t55570;
  double t60912;
  double t60913;
  double t56439;
  double t57781;
  double t60979;
  double t60982;
  double t60984;
  double t58017;
  double t58073;
  double t61038;
  double t61050;
  double t61054;
  double t58262;
  double t58264;
  double t61130;
  double t61134;
  double t61143;
  double t58482;
  double t58485;
  double t61180;
  double t61191;
  double t61192;
  double t58812;
  double t58846;
  double t61241;
  double t61242;
  double t61243;
  double t58930;
  double t58931;
  double t61251;
  double t61252;
  double t61254;
  double t59129;
  double t59363;
  double t60730;
  double t60742;
  double t60744;
  double t60828;
  double t60830;
  double t60794;
  double t60796;
  double t60408;
  double t60608;
  double t60639;
  double t60946;
  double t60987;
  double t60992;
  double t61074;
  double t61158;
  double t61159;
  double t61233;
  double t61235;
  double t61245;
  double t61246;
  double t61968;
  double t61970;
  double t62030;
  double t62047;
  double t62071;
  double t62113;
  double t62117;
  double t62137;
  double t62140;
  double t62143;
  double t62302;
  double t62306;
  double t62321;
  double t62325;
  double t61739;
  double t61765;
  double t61776;
  double t61842;
  double t61847;
  double t61858;
  double t61859;
  double t61890;
  double t61923;
  double t61924;
  t3947 = Cos(var1[16]);
  t4033 = -1.*t3947;
  t4074 = 1. + t4033;
  t4131 = 3.e-6*t4074;
  t4748 = -1.000000000009*t4074;
  t4757 = 1. + t4748;
  t4922 = Sin(var1[16]);
  t5279 = 9.e-12*t4074;
  t5136 = 1.2e-12*var1[16];
  t5141 = 0.1000003000009*t4074;
  t5144 = -3.e-12*t4922;
  t5155 = t5136 + t5141 + t5144;
  t4413 = -9.e-12*t4074;
  t4670 = 1. + t4413;
  t4728 = -3.e-6*t4670;
  t4733 = t4728 + t4131;
  t5274 = -4.e-7*var1[16];
  t5280 = -1. + t5279;
  t5281 = 0.1*t5280;
  t5286 = 3.000000000027e-7*t4074;
  t5304 = -9.e-18*t4922;
  t5308 = t5274 + t5281 + t5286 + t5304;
  t4885 = 0.2*t4757;
  t4920 = 0.2000000000048*t4074;
  t4965 = 0.1000003000009*t4922;
  t5007 = t4885 + t4920 + t4965;
  t2312 = Cos(var1[14]);
  t4246 = 3.e-6*t3947;
  t4353 = t4131 + t4246;
  t300 = Cos(var1[4]);
  t319 = Cos(var1[5]);
  t331 = Sin(var1[14]);
  t3677 = Sin(var1[4]);
  t5467 = t5279 + t4033;
  t5129 = t4757*t5007;
  t5156 = t5155*t4922;
  t5361 = 3.e-6*t5308*t4922;
  t5491 = -1.*t5467*t5155;
  t6035 = -1.*t4733*t5308;
  t6162 = -1.000000000009*t5007*t4922;
  t4368 = 0.2*t4353;
  t5382 = t5129 + t5156 + t5361;
  t5440 = t4733*t5382;
  t6183 = t5491 + t6035 + t6162;
  t6203 = 3.e-6*t4922*t6183;
  t6219 = t4368 + t5440 + t6203;
  t12478 = Sin(var1[5]);
  t6392 = 0.2*t5467;
  t6446 = 4.e-7*var1[16];
  t6447 = 0.1*t4670;
  t6731 = -3.000000000027e-7*t4074;
  t6745 = t4353*t5155;
  t7088 = 9.e-18*t4922;
  t7104 = t6446 + t6447 + t6731 + t6745 + t7088;
  t7227 = 3.e-6*t7104*t4922;
  t7241 = t6392 + t5129 + t5156 + t5361 + t7227;
  t9616 = -1.*t4353*t5155;
  t11128 = t5274 + t5281 + t5286 + t9616 + t5304;
  t12134 = t4733*t11128;
  t12210 = 0.2*t4922;
  t12213 = t5491 + t6035 + t12134 + t12210 + t6162;
  t14208 = 0.1000003000009*t3947;
  t14230 = 3.000000000027e-12*t4922;
  t14232 = t14208 + t14230;
  t13104 = -9.e-18*t3947;
  t13110 = 3.000009000027e-7*t4922;
  t13196 = -4.e-7 + t13104 + t13110;
  t13280 = -3.e-12*t3947;
  t14040 = 1.2e-12 + t13280 + t4965;
  t14540 = t3947*t5155;
  t14551 = 3.e-6*t3947*t5308;
  t14573 = t4757*t14232;
  t14604 = 3.e-6*t13196*t4922;
  t14619 = t14040*t4922;
  t7294 = t2312*t5467;
  t7297 = -1.000000000009*t331*t4922;
  t7393 = t7294 + t7297;
  t12579 = t5467*t331;
  t12585 = 1.000000000009*t2312*t4922;
  t12608 = t12579 + t12585;
  t8341 = -1.000000000009*t2312*t4922;
  t19486 = 1.000000000009*t331*t4922;
  t13201 = -1.*t4733*t13196;
  t13214 = -1.000000000009*t3947*t5007;
  t14125 = -1.*t5467*t14040;
  t14131 = -1.000000000009*t5155*t4922;
  t14150 = -3.000000000027e-6*t5308*t4922;
  t14361 = -1.000000000009*t14232*t4922;
  t12235 = -1.*t4757*t331;
  t12240 = t2312*t4922;
  t12250 = t12235 + t12240;
  t12823 = t2312*t4757;
  t12833 = t331*t4922;
  t12837 = t12823 + t12833;
  t14680 = t4353*t319*t331;
  t14839 = t14680 + t12478;
  t18199 = t319*t12608;
  t18226 = -1.*t4733*t12478;
  t18233 = t18199 + t18226;
  t21442 = t319*t12837;
  t21458 = -3.e-6*t4922*t12478;
  t21658 = t21442 + t21458;
  t24555 = Sin(var1[3]);
  t24784 = Cos(var1[3]);
  t12309 = -1.*t2312*t4757;
  t12333 = -1.*t331*t4922;
  t12335 = t12309 + t12333;
  t8189 = -1.*t5467*t331;
  t8346 = t8189 + t8341;
  t12492 = -1.*t4353*t331*t12478;
  t12558 = t319 + t12492;
  t12567 = -1.*t4733*t319;
  t12655 = -1.*t12608*t12478;
  t12783 = t12567 + t12655;
  t12805 = -3.e-6*t319*t4922;
  t12855 = -1.*t12837*t12478;
  t12872 = t12805 + t12855;
  t22497 = -1.*t300*t331;
  t22511 = -1.*t2312*t319*t3677;
  t22519 = t22497 + t22511;
  t22619 = t2312*t4353*t300;
  t22693 = -1.*t3677*t14839;
  t22742 = t22619 + t22693;
  t23190 = t300*t7393;
  t23220 = -1.*t3677*t18233;
  t23419 = t23190 + t23220;
  t23474 = t300*t12250;
  t23525 = -1.*t3677*t21658;
  t23559 = t23474 + t23525;
  t13091 = 3.000000000027e-6*t4922*t5382;
  t14508 = t13201 + t13214 + t14125 + t14131 + t14150 + t14361;
  t14526 = 3.e-6*t4922*t14508;
  t14531 = 3.e-6*t3947*t6183;
  t14624 = t14540 + t14551 + t14573 + t14604 + t6162 + t14619;
  t14625 = t4733*t14624;
  t14634 = t13091 + t14526 + t14531 + t14625;
  t39077 = -1.*t319;
  t39083 = t4353*t331*t12478;
  t39110 = t39077 + t39083;
  t17928 = 3.e-6*t3947*t7104;
  t18076 = 0.2000000000018*t4922;
  t18101 = 9.e-18*t3947;
  t18114 = t4353*t14040;
  t18136 = -3.000009000027e-7*t4922;
  t18144 = 4.e-7 + t18101 + t18114 + t18136;
  t18162 = 3.e-6*t18144*t4922;
  t18190 = t14540 + t14551 + t17928 + t14573 + t18076 + t18162 + t14604 + t6162 + t14619;
  t40388 = t4733*t319;
  t41447 = t12608*t12478;
  t41471 = t40388 + t41447;
  t19896 = t3947*t331;
  t19912 = t19896 + t8341;
  t18985 = t2312*t3947;
  t19730 = t18985 + t19486;
  t19926 = t319*t19912;
  t19966 = -3.e-6*t3947*t12478;
  t19968 = t19926 + t19966;
  t20236 = 1.000000000009*t2312*t3947;
  t20248 = t20236 + t19486;
  t20079 = -1.000000000009*t3947*t331;
  t20083 = t20079 + t12585;
  t20292 = t319*t20248;
  t20456 = -3.000000000027e-6*t4922*t12478;
  t20717 = t20292 + t20456;
  t21012 = 0.2*t3947;
  t21161 = -1.*t4353*t14040;
  t21195 = -4.e-7 + t13104 + t21161 + t13110;
  t21217 = t4733*t21195;
  t21398 = 3.000000000027e-6*t11128*t4922;
  t21401 = t21012 + t13201 + t21217 + t13214 + t14125 + t14131 + t14150 + t21398 + t14361;
  t42514 = 3.e-6*t319*t4922;
  t42539 = t12837*t12478;
  t45100 = t42514 + t42539;
  t24571 = -1.*t4353*t300*t331;
  t24662 = -1.*t2312*t4353*t319*t3677;
  t24756 = t24571 + t24662;
  t27652 = -1.*t2312*t300;
  t27666 = t319*t331*t3677;
  t28995 = t27652 + t27666;
  t31330 = t300*t12335;
  t31593 = -1.*t319*t12250*t3677;
  t31684 = t31330 + t31593;
  t32373 = t300*t8346;
  t32410 = -1.*t319*t7393*t3677;
  t32455 = t32373 + t32410;
  t32775 = -1.*t2312*t300*t319;
  t32801 = t331*t3677;
  t32811 = t32775 + t32801;
  t32880 = -1.*t2312*t4353*t3677;
  t32887 = -1.*t300*t14839;
  t32923 = t32880 + t32887;
  t32979 = -1.*t7393*t3677;
  t33004 = -1.*t300*t18233;
  t33016 = t32979 + t33004;
  t33088 = -1.*t12250*t3677;
  t33203 = -1.*t300*t21658;
  t33227 = t33088 + t33203;
  t48957 = 3.e-6*t3947*t319;
  t48981 = t19912*t12478;
  t48990 = t48957 + t48981;
  t49066 = t300*t19730;
  t49094 = -1.*t3677*t19968;
  t49122 = t49066 + t49094;
  t49231 = 3.000000000027e-6*t319*t4922;
  t49240 = t20248*t12478;
  t49263 = t49231 + t49240;
  t49274 = t300*t20083;
  t49277 = -1.*t3677*t20717;
  t49279 = t49274 + t49277;
  t48560 = t24784*t39110;
  t48563 = -1.*t24555*t22742;
  t48571 = t48560 + t48563;
  t48596 = t24784*t41471;
  t48654 = -1.*t24555*t23419;
  t48659 = t48596 + t48654;
  t49311 = t24784*t45100;
  t49353 = -1.*t24555*t23559;
  t49357 = t49311 + t49353;
  t6348 = t2312*t4353*t300*t319;
  t6349 = -1.*t4353*t331*t3677;
  t6366 = t6348 + t6349;
  t7493 = t300*t319*t7393;
  t8400 = t8346*t3677;
  t8746 = t7493 + t8400;
  t12306 = t300*t319*t12250;
  t12346 = t12335*t3677;
  t12362 = t12306 + t12346;
  t52165 = -1.*t2312;
  t52229 = 1. + t52165;
  t52255 = 0.2*t52229;
  t52291 = 0.2*t2312;
  t52353 = 0.05*t331;
  t52404 = t52255 + t52291 + t52353;
  t52407 = t319*t52404;
  t52456 = 0.1*t12478;
  t52460 = t52407 + t52456;
  t51896 = t300*t319*t331;
  t51928 = t2312*t3677;
  t51936 = t51896 + t51928;
  t51987 = 0.05*t2312*t300*t319;
  t51990 = -0.05*t331*t3677;
  t51991 = t51987 + t51990;
  t51957 = -0.05*t300*t331;
  t51963 = -0.05*t2312*t319*t3677;
  t51976 = t51957 + t51963;
  t52125 = t2312*t300*t319;
  t52128 = -1.*t331*t3677;
  t52158 = t52125 + t52128;
  t52159 = 0.05*t2312*t3677;
  t52509 = t300*t52460;
  t52532 = t52159 + t52509;
  t52578 = 0.05*t2312*t300;
  t52587 = -1.*t3677*t52460;
  t52589 = t52578 + t52587;
  t52602 = -0.1*t319;
  t52614 = t52404*t12478;
  t52630 = t52602 + t52614;
  t18192 = t7393*t3677;
  t18414 = t300*t18233;
  t18423 = t18192 + t18414;
  t52862 = 0.2*t331;
  t52867 = t2312*t5155;
  t52945 = -1.*t331*t5007;
  t52956 = t52862 + t52867 + t52945;
  t14647 = t2312*t4353*t3677;
  t14908 = t300*t14839;
  t17014 = t14647 + t14908;
  t53120 = -1.*t331*t5155;
  t53140 = -1.*t2312*t5007;
  t53146 = t52291 + t53120 + t53140;
  t52990 = t331*t5155;
  t52996 = t2312*t5007;
  t53033 = t52255 + t52990 + t52996;
  t53266 = t319*t53033;
  t53280 = -1.*t5308*t12478;
  t53334 = t53266 + t53280;
  t52985 = t319*t5308;
  t53036 = t53033*t12478;
  t53062 = t52985 + t53036;
  t53119 = t300*t319*t52956;
  t53156 = t53146*t3677;
  t53179 = t53119 + t53156;
  t53214 = t300*t53146;
  t53218 = -1.*t319*t52956*t3677;
  t53221 = t53214 + t53218;
  t53257 = t52956*t3677;
  t53398 = t300*t53334;
  t53413 = t53257 + t53398;
  t53458 = t300*t52956;
  t53459 = -1.*t3677*t53334;
  t53472 = t53458 + t53459;
  t21418 = t12250*t3677;
  t21667 = t300*t21658;
  t22022 = t21418 + t21667;
  t52576 = t300*t52532*t12478;
  t52591 = -1.*t3677*t52589*t12478;
  t52634 = -1.*t319*t52630;
  t52636 = t52576 + t52591 + t52634;
  t52663 = t2312*t300;
  t52672 = -1.*t319*t331*t3677;
  t52676 = t52663 + t52672;
  t55841 = 0.1*t319;
  t55884 = -1.*t52404*t12478;
  t55971 = t55841 + t55884;
  t58141 = -1.*t319*t5308;
  t58159 = -1.*t53033*t12478;
  t58160 = t58141 + t58159;
  t53658 = -1.*t39110*t53062;
  t53677 = -1.*t17014*t53413;
  t53784 = -1.*t22742*t53472;
  t53818 = t53658 + t53677 + t53784;
  t53901 = t53062*t41471;
  t53949 = t18423*t53413;
  t54057 = t23419*t53472;
  t54109 = t53901 + t53949 + t54057;
  t54683 = t39110*t53062;
  t54711 = t17014*t53413;
  t54785 = t22742*t53472;
  t54799 = t54683 + t54711 + t54785;
  t54961 = -1.*t53062*t45100;
  t54969 = -1.*t53413*t22022;
  t54983 = -1.*t53472*t23559;
  t54995 = t54961 + t54969 + t54983;
  t55489 = -1.*t53062*t41471;
  t55490 = -1.*t18423*t53413;
  t55501 = -1.*t23419*t53472;
  t55510 = t55489 + t55490 + t55501;
  t55749 = t53062*t45100;
  t55751 = t53413*t22022;
  t55752 = t53472*t23559;
  t55753 = t55749 + t55751 + t55752;
  t413 = -1.*t300*t319*t331;
  t3885 = -1.*t2312*t3677;
  t3933 = t413 + t3885;
  t59615 = -0.05*t2312*t3677;
  t59618 = -1.*t300*t52460;
  t59623 = t59615 + t59618;
  t57894 = t51936*t52532;
  t57912 = t52676*t52589;
  t57918 = t331*t12478*t52630;
  t57946 = t57894 + t57912 + t57918;
  t59833 = -1.*t52956*t3677;
  t59842 = -1.*t300*t53334;
  t59843 = t59833 + t59842;
  t19785 = t19730*t3677;
  t19972 = t300*t19968;
  t20025 = t19785 + t19972;
  t20231 = t20083*t3677;
  t20770 = t300*t20717;
  t20811 = t20231 + t20770;
  t60349 = t2312*t14232;
  t60352 = t331*t14040;
  t60399 = t60349 + t60352;
  t60412 = -1.*t331*t14232;
  t60413 = t2312*t14040;
  t60414 = t60412 + t60413;
  t60416 = t319*t60399;
  t60417 = -1.*t13196*t12478;
  t60439 = t60416 + t60417;
  t60340 = t319*t13196;
  t60402 = t60399*t12478;
  t60404 = t60340 + t60402;
  t60415 = t60414*t3677;
  t60444 = t300*t60439;
  t60455 = t60415 + t60444;
  t60457 = t300*t60414;
  t60458 = -1.*t3677*t60439;
  t60459 = t60457 + t60458;
  t52696 = Power(t12478,2);
  t52718 = 0.05*t2312*t331*t52696;
  t52721 = t2312*t12478*t52630;
  t52967 = -1.*t52956*t12478*t39110;
  t53071 = -1.*t2312*t4353*t12478*t53062;
  t53525 = t7393*t12478*t53062;
  t53527 = t52956*t12478*t41471;
  t54237 = t52956*t12478*t39110;
  t54247 = t2312*t4353*t12478*t53062;
  t54880 = -1.*t12250*t12478*t53062;
  t54885 = -1.*t52956*t12478*t45100;
  t55120 = -1.*t7393*t12478*t53062;
  t55123 = -1.*t52956*t12478*t41471;
  t55537 = t12250*t12478*t53062;
  t55570 = t52956*t12478*t45100;
  t60912 = t52460*t12478;
  t60913 = t60912 + t52634;
  t56439 = t319*t331*t52630;
  t57781 = t12478*t52630;
  t60979 = -1.*t2312*t4353*t52956;
  t60982 = -1.*t14839*t53334;
  t60984 = t60979 + t53658 + t60982;
  t58017 = -1.*t14839*t53062;
  t58073 = -1.*t39110*t53334;
  t61038 = t52956*t7393;
  t61050 = t18233*t53334;
  t61054 = t61038 + t61050 + t53901;
  t58262 = t18233*t53062;
  t58264 = t53334*t41471;
  t61130 = t2312*t4353*t52956;
  t61134 = t14839*t53334;
  t61143 = t61130 + t54683 + t61134;
  t58482 = t14839*t53062;
  t58485 = t39110*t53334;
  t61180 = -1.*t52956*t12250;
  t61191 = -1.*t53334*t21658;
  t61192 = t61180 + t61191 + t54961;
  t58812 = -1.*t53062*t21658;
  t58846 = -1.*t53334*t45100;
  t61241 = -1.*t52956*t7393;
  t61242 = -1.*t18233*t53334;
  t61243 = t61241 + t61242 + t55489;
  t58930 = -1.*t18233*t53062;
  t58931 = -1.*t53334*t41471;
  t61251 = t52956*t12250;
  t61252 = t53334*t21658;
  t61254 = t61251 + t61252 + t55749;
  t59129 = t53062*t21658;
  t59363 = t53334*t45100;
  t60730 = t39110*t60404;
  t60742 = -1.*t53062*t48990;
  t60744 = -1.*t60404*t45100;
  t60828 = t53062*t48990;
  t60830 = t60404*t45100;
  t60794 = -1.*t60404*t41471;
  t60796 = -1.*t53062*t49263;
  t60408 = -1.*t39110*t60404;
  t60608 = t60404*t41471;
  t60639 = t53062*t49263;
  t60946 = -1.*t2312*t4353*t53146;
  t60987 = t52956*t8346;
  t60992 = t53146*t7393;
  t61074 = t2312*t4353*t53146;
  t61158 = -1.*t53146*t12250;
  t61159 = -1.*t52956*t12335;
  t61233 = -1.*t52956*t8346;
  t61235 = -1.*t53146*t7393;
  t61245 = t53146*t12250;
  t61246 = t52956*t12335;
  t61968 = -1.*t4353*t331*t53033;
  t61970 = t5274 + t5281 + t5286 + t61968 + t60979 + t5304;
  t62030 = t4733*t5308;
  t62047 = t53033*t12608;
  t62071 = t62030 + t62047 + t61038;
  t62113 = t4353*t331*t53033;
  t62117 = t6446 + t6447 + t6731 + t62113 + t61130 + t7088;
  t62137 = -3.e-6*t5308*t4922;
  t62140 = -1.*t53033*t12837;
  t62143 = t62137 + t61180 + t62140;
  t62302 = -1.*t53033*t12608;
  t62306 = t6035 + t62302 + t61241;
  t62321 = t53033*t12837;
  t62325 = t5361 + t61251 + t62321;
  t61739 = t2312*t4353*t60414;
  t61765 = -1.*t60414*t12250;
  t61776 = -1.*t52956*t19730;
  t61842 = t60414*t12250;
  t61847 = t52956*t19730;
  t61858 = -1.*t52956*t20083;
  t61859 = -1.*t60414*t7393;
  t61890 = -1.*t2312*t4353*t60414;
  t61923 = t52956*t20083;
  t61924 = t60414*t7393;
  p_output1[0]=var2[14]*(-0.5*(0.0013*t22519 + 0.05186*t12213*t23559 + 0.05186*t22742*t6219 + 0.05186*t23419*t7241)*var2[4] - 0.5*(0.05186*t12213*t12872*t300 - 0.0013*t12478*t2312*t300 + 0.05186*t12558*t300*t6219 + 0.05186*t12783*t300*t7241)*var2[5] - 0.5*(0.05186*t12213*t12362 + 0.0013*t3933 + 0.05186*t6219*t6366 + 0.05186*t7241*t8746)*var2[14] - 0.5*(0.05186*t14634*t17014 + 0.05186*t18190*t18423 + 0.05186*t12213*t20025 + 0.05186*t21401*t22022 + 0.05186*t20811*t7241)*var2[16]);
  p_output1[1]=var2[14]*(-0.5*(0.0013*(-1.*t12478*t2312*t24555 - 1.*t22519*t24784) + 0.05186*t12213*(-1.*t23559*t24784 - 1.*t24555*t45100) + 0.05186*(-1.*t22742*t24784 - 1.*t24555*t39110)*t6219 + 0.05186*(-1.*t23419*t24784 - 1.*t24555*t41471)*t7241)*var2[3] - 0.5*(-0.0013*t24555*t32811 - 0.05186*t12213*t24555*t33227 - 0.05186*t24555*t32923*t6219 - 0.05186*t24555*t33016*t7241)*var2[4] - 0.5*(0.05186*t12213*(t21658*t24784 + t12872*t24555*t3677) + 0.0013*(t2312*t24784*t319 - 1.*t12478*t2312*t24555*t3677) + 0.05186*(t14839*t24784 + t12558*t24555*t3677)*t6219 + 0.05186*(t18233*t24784 + t12783*t24555*t3677)*t7241)*var2[5] - 0.5*(0.05186*t12213*(t12250*t12478*t24784 - 1.*t24555*t31684) + 0.0013*(-1.*t24555*t28995 - 1.*t12478*t24784*t331) + 0.05186*(-1.*t24555*t24756 + t12478*t2312*t24784*t4353)*t6219 + 0.05186*t7241*(-1.*t24555*t32455 + t12478*t24784*t7393))*var2[14] - 0.5*(0.05186*t14634*t48571 + 0.05186*t18190*t48659 + 0.05186*t12213*(t24784*t48990 - 1.*t24555*t49122) + 0.05186*t21401*t49357 + 0.05186*(t24784*t49263 - 1.*t24555*t49279)*t7241)*var2[16]);
  p_output1[2]=var2[14]*(-0.5*(0.0013*(-1.*t22519*t24555 + t12478*t2312*t24784) + 0.05186*t12213*t49357 + 0.05186*t48571*t6219 + 0.05186*t48659*t7241)*var2[3] - 0.5*(0.0013*t24784*t32811 + 0.05186*t12213*t24784*t33227 + 0.05186*t24784*t32923*t6219 + 0.05186*t24784*t33016*t7241)*var2[4] - 0.5*(0.05186*t12213*(t21658*t24555 - 1.*t12872*t24784*t3677) + 0.0013*(t2312*t24555*t319 + t12478*t2312*t24784*t3677) + 0.05186*(t14839*t24555 - 1.*t12558*t24784*t3677)*t6219 + 0.05186*(t18233*t24555 - 1.*t12783*t24784*t3677)*t7241)*var2[5] - 0.5*(0.05186*t12213*(t12250*t12478*t24555 + t24784*t31684) + 0.0013*(t24784*t28995 - 1.*t12478*t24555*t331) + 0.05186*(t24756*t24784 + t12478*t2312*t24555*t4353)*t6219 + 0.05186*t7241*(t24784*t32455 + t12478*t24555*t7393))*var2[14] - 0.5*(0.05186*t14634*(t22742*t24784 + t24555*t39110) + 0.05186*t18190*(t23419*t24784 + t24555*t41471) + 0.05186*t21401*(t23559*t24784 + t24555*t45100) + 0.05186*t12213*(t24555*t48990 + t24784*t49122) + 0.05186*(t24555*t49263 + t24784*t49279)*t7241)*var2[16]);
  p_output1[3]=var2[14]*(-0.5*(-0.000245*t22742 + 0.000046*t12478*t3677 + 0.000245*t23419*t4733 + 6.e-12*t23559*t4922 + 0.0013*(t52636*t52676 + t12478*t3677*t57946 + t51936*(-1.*t12478*t3677*t52532 - 1.*t12478*t3677*t59623) - 1.*t12478*t300*(t3933*t52589 + t51936*t52589 + t52532*t52676 + t52676*t59623)) + 0.05186*t12213*(t23419*t53818 + t22742*t54109 + t18423*(-1.*t22742*t53413 - 1.*t17014*t53472 - 1.*t32923*t53472 - 1.*t22742*t59843) + t17014*(t23419*t53413 + t18423*t53472 + t33016*t53472 + t23419*t59843)) + 0.05186*(t23559*t55510 + t23419*t55753 + t22022*(-1.*t23419*t53413 - 1.*t18423*t53472 - 1.*t33016*t53472 - 1.*t23419*t59843) + t18423*(t23559*t53413 + t22022*t53472 + t33227*t53472 + t23559*t59843))*t6219 + 0.05186*(t23559*t54799 + t22742*t54995 + t22022*(t22742*t53413 + t17014*t53472 + t32923*t53472 + t22742*t59843) + t17014*(-1.*t23559*t53413 - 1.*t22022*t53472 - 1.*t33227*t53472 - 1.*t23559*t59843))*t7241)*var2[4] - 0.5*(-0.000245*t12558*t300 - 0.000046*t300*t319 + 0.000245*t12783*t300*t4733 + 6.e-12*t12872*t300*t4922 + 0.0013*(-1.*t12478*t300*t331*t52636 - 1.*t12478*t300*(t12478*t331*t52460 - 1.*t12478*t300*t331*t52532 + t12478*t331*t3677*t52589 + t300*t51936*t55971 - 1.*t3677*t52676*t55971 + t56439) + t51936*(-1.*t319*t52460 + t300*t319*t52532 - 1.*t319*t3677*t52589 + t12478*Power(t300,2)*t55971 + t12478*Power(t3677,2)*t55971 + t57781) - 1.*t300*t319*t57946) + 0.05186*t12213*(t12783*t300*t53818 + t12558*t300*t54109 + t18423*(-1.*t12558*t300*t53413 + t12558*t3677*t53472 + t58017 + t58073 - 1.*t17014*t300*t58160 + t22742*t3677*t58160) + t17014*(t12783*t300*t53413 - 1.*t12783*t3677*t53472 + t18423*t300*t58160 - 1.*t23419*t3677*t58160 + t58262 + t58264)) + 0.05186*(t12872*t300*t55510 + t12783*t300*t55753 + t22022*(-1.*t12783*t300*t53413 + t12783*t3677*t53472 - 1.*t18423*t300*t58160 + t23419*t3677*t58160 + t58930 + t58931) + t18423*(t12872*t300*t53413 - 1.*t12872*t3677*t53472 + t22022*t300*t58160 - 1.*t23559*t3677*t58160 + t59129 + t59363))*t6219 + 0.05186*(t12872*t300*t54799 + t12558*t300*t54995 + t22022*(t12558*t300*t53413 - 1.*t12558*t3677*t53472 + t17014*t300*t58160 - 1.*t22742*t3677*t58160 + t58482 + t58485) + t17014*(-1.*t12872*t300*t53413 + t12872*t3677*t53472 - 1.*t22022*t300*t58160 + t23559*t3677*t58160 + t58812 + t58846))*t7241)*var2[5] - 0.5*(6.e-12*t12362*t4922 + 0.0013*(t51936*(-0.05*t12478*t2312*t319 - 1.*t12478*t3677*t51976 + t12478*t300*t51991) + t52158*t52636 - 1.*t12478*t300*(t51936*t51991 + t52158*t52532 + t22519*t52589 + t51976*t52676 + t52718 + t52721)) - 0.000245*t6366 + 0.05186*(t12362*t54799 + t17014*(-1.*t22022*t53179 - 1.*t23559*t53221 - 1.*t12362*t53413 - 1.*t31684*t53472 + t54880 + t54885) + t54995*t6366 + t22022*(t17014*t53179 + t22742*t53221 + t24756*t53472 + t54237 + t54247 + t53413*t6366))*t7241 + 0.000245*t4733*t8746 + 0.05186*t6219*(t12362*t55510 + t18423*(t22022*t53179 + t23559*t53221 + t12362*t53413 + t31684*t53472 + t55537 + t55570) + t55753*t8746 + t22022*(-1.*t18423*t53179 - 1.*t23419*t53221 - 1.*t32455*t53472 + t55120 + t55123 - 1.*t53413*t8746)) + 0.05186*t12213*(t54109*t6366 + t18423*(t52967 + t53071 - 1.*t17014*t53179 - 1.*t22742*t53221 - 1.*t24756*t53472 - 1.*t53413*t6366) + t53818*t8746 + t17014*(t18423*t53179 + t23419*t53221 + t32455*t53472 + t53525 + t53527 + t53413*t8746)))*var2[14] - 0.5*(6.e-12*t22022*t3947 + 0.000245*t20811*t4733 + 7.35000000006615e-10*t18423*t4922 + 6.e-12*t20025*t4922 + 0.05186*t21401*(t18423*t53818 + t17014*t54109) + 0.05186*t18190*(t22022*t54799 + t17014*t54995) + 0.05186*t14634*(t22022*t55510 + t18423*t55753) + 0.05186*t12213*(t20811*t53818 + t18423*(t60408 - 1.*t17014*t60455 - 1.*t22742*t60459) + t17014*(t20811*t53413 + t49279*t53472 + t18423*t60455 + t23419*t60459 + t60608 + t60639)) + 0.05186*(t20025*t55510 + t20811*t55753 + t22022*(-1.*t20811*t53413 - 1.*t49279*t53472 - 1.*t18423*t60455 - 1.*t23419*t60459 + t60794 + t60796) + t18423*(t20025*t53413 + t49122*t53472 + t22022*t60455 + t23559*t60459 + t60828 + t60830))*t6219 + 0.05186*(t20025*t54799 + t22022*(t17014*t60455 + t22742*t60459 + t60730) + t17014*(-1.*t20025*t53413 - 1.*t49122*t53472 - 1.*t22022*t60455 - 1.*t23559*t60459 + t60742 + t60744))*t7241)*var2[16]);
  p_output1[4]=var2[14]*(-0.5*(-0.000046*t12478 - 0.000245*t14839 + 0.000245*t18233*t4733 + 6.e-12*t21658*t4922 + 0.0013*(t319*(t319*t331*t55971 + t56439) + t12478*t331*(t12478*t55971 + t57781) - 1.*t12478*(0.05*Power(t2312,2) + t319*t331*t52460 + t57918) + t319*t331*t60913) + 0.05186*t12213*(t41471*(-1.*t12558*t53334 + t58017 + t58073 - 1.*t14839*t58160) + t39110*(t12783*t53334 + t18233*t58160 + t58262 + t58264) + t18233*t60984 + t14839*t61054) + 0.05186*(t45100*(-1.*t12783*t53334 - 1.*t18233*t58160 + t58930 + t58931) + t41471*(t12872*t53334 + t21658*t58160 + t59129 + t59363) + t21658*t61243 + t18233*t61254)*t6219 + 0.05186*(t45100*(t12558*t53334 + t14839*t58160 + t58482 + t58485) + t39110*(-1.*t12872*t53334 - 1.*t21658*t58160 + t58812 + t58846) + t21658*t61143 + t14839*t61192)*t7241)*var2[5] - 0.5*(-0.000245*t12478*t2312*t4353 + 6.e-12*t12250*t12478*t4922 + 0.0013*(t319*(-0.1*t2312*t331 + 0.05*t2312*Power(t319,2)*t331 + t2312*t319*t52460 + t52718 + t52721) + t12478*t2312*t60913) + 0.05186*(t45100*(t14839*t319*t52956 - 1.*t331*t4353*t52956 + t2312*t319*t4353*t53334 + t54237 + t54247 + t61074) + t12250*t12478*t61143 + t39110*(-1.*t21658*t319*t52956 - 1.*t12250*t319*t53334 + t54880 + t54885 + t61158 + t61159) + t12478*t2312*t4353*t61192)*t7241 + 0.000245*t12478*t4733*t7393 + 0.05186*t6219*(t12250*t12478*t61243 + t41471*(t21658*t319*t52956 + t12250*t319*t53334 + t55537 + t55570 + t61245 + t61246) + t12478*t61254*t7393 + t45100*(-1.*t18233*t319*t52956 + t55120 + t55123 + t61233 + t61235 - 1.*t319*t53334*t7393)) + 0.05186*t12213*(t41471*(-1.*t14839*t319*t52956 + t331*t4353*t52956 + t52967 + t53071 - 1.*t2312*t319*t4353*t53334 + t60946) + t12478*t2312*t4353*t61054 + t12478*t60984*t7393 + t39110*(t18233*t319*t52956 + t53525 + t53527 + t60987 + t60992 + t319*t53334*t7393)))*var2[14] - 0.5*(6.e-12*t3947*t45100 + 7.35000000006615e-10*t41471*t4922 + 6.e-12*t48990*t4922 + 0.000245*t4733*t49263 + 0.05186*t21401*(t41471*t60984 + t39110*t61054) + 0.05186*t18190*(t45100*t61143 + t39110*t61192) + 0.05186*t14634*(t45100*t61243 + t41471*t61254) + 0.05186*t12213*(t49263*t60984 + t41471*(t60408 - 1.*t14839*t60439 + t61890) + t39110*(t20717*t53334 + t18233*t60439 + t60608 + t60639 + t61923 + t61924)) + 0.05186*(t48990*t61243 + t49263*t61254 + t41471*(t19968*t53334 + t21658*t60439 + t60828 + t60830 + t61842 + t61847) + t45100*(-1.*t20717*t53334 - 1.*t18233*t60439 + t60794 + t60796 + t61858 + t61859))*t6219 + 0.05186*(t48990*t61143 + t45100*(t14839*t60439 + t60730 + t61739) + t39110*(-1.*t19968*t53334 - 1.*t21658*t60439 + t60742 + t60744 + t61765 + t61776))*t7241)*var2[16]);
  p_output1[5]=var2[14]*(-0.5*(-0.00013*t331 + 0.000245*t331*t4353 + 6.e-12*t12335*t4922 + 0.05186*(t12250*(t2312*t4353*t53033 + t61074) + t2312*t4353*(-1.*t12837*t52956 - 1.*t12250*t53033 + t61158 + t61159) + t12335*t62117 - 1.*t331*t4353*t62143)*t7241 + 0.000245*t4733*t8346 + 0.05186*t12213*(-1.*t331*t4353*t62071 + (-1.*t2312*t4353*t53033 + t60946)*t7393 + t2312*t4353*(t12608*t52956 + t60987 + t60992 + t53033*t7393) + t61970*t8346) + 0.05186*t6219*(t12335*t62306 + (t12837*t52956 + t12250*t53033 + t61245 + t61246)*t7393 + t12250*(-1.*t12608*t52956 + t61233 + t61235 - 1.*t53033*t7393) + t62325*t8346))*var2[14] - 0.5*(6.e-12*t12250*t3947 + 0.000245*t20083*t4733 + 6.e-12*t19730*t4922 + 0.05186*t18190*(t12250*t62117 + t2312*t4353*t62143) + 0.05186*(t12250*(4.e-7 + t18101 + t18136 + t331*t4353*t60399 + t61739) + t2312*t4353*(-3.e-6*t13196*t4922 - 1.*t19912*t53033 - 3.e-6*t3947*t5308 - 1.*t12837*t60399 + t61765 + t61776) + t19730*t62117)*t7241 + 7.35000000006615e-10*t4922*t7393 + 0.05186*t6219*(t12250*(t13201 + t14150 - 1.*t20248*t53033 - 1.*t12608*t60399 + t61858 + t61859) + t19730*t62306 + t20083*t62325 + (t14551 + t14604 + t19912*t53033 + t12837*t60399 + t61842 + t61847)*t7393) + 0.05186*t12213*(t2312*t4353*(t13196*t4733 + t20248*t53033 + 3.000000000027e-6*t4922*t5308 + t12608*t60399 + t61923 + t61924) + t20083*t61970 + (-4.e-7 + t13104 + t13110 - 1.*t331*t4353*t60399 + t61890)*t7393) + 0.05186*t21401*(t2312*t4353*t62071 + t61970*t7393) + 0.05186*t14634*(t12250*t62306 + t62325*t7393))*var2[16]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=-0.5*(0.10372*t12213*t21401 + 3.6e-17*t3947*t4922 + 1.47000000001323e-9*t4733*t4922 + 0.10372*t14634*t6219 + 0.10372*t18190*t7241)*var2[14]*var2[16];
  p_output1[15]=0;
  p_output1[16]=-0.5*(2.0744e-8*t14634 + 6.2232e-14*t18190 + 0.005186015558*t21401)*var2[14]*var2[16];
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec15_minitaur.hh"

namespace FrontStance
{

void Ce1_vec15_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
