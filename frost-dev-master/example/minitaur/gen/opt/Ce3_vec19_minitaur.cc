/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:13:48 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t14697;
  double t44960;
  double t45492;
  double t45912;
  double t49118;
  double t48488;
  double t48542;
  double t48561;
  double t48634;
  double t48664;
  double t49191;
  double t49217;
  double t49253;
  double t49289;
  double t49610;
  double t49635;
  double t49864;
  double t49910;
  double t49932;
  double t49947;
  double t49972;
  double t48730;
  double t48744;
  double t49073;
  double t49108;
  double t49127;
  double t49183;
  double t38871;
  double t18123;
  double t13036;
  double t39150;
  double t6975;
  double t50791;
  double t50814;
  double t7222;
  double t19973;
  double t48674;
  double t48721;
  double t49187;
  double t49875;
  double t50160;
  double t50584;
  double t51344;
  double t51365;
  double t51386;
  double t50399;
  double t50593;
  double t50619;
  double t52211;
  double t52339;
  double t52343;
  double t14018;
  double t19976;
  double t20006;
  double t45949;
  double t45983;
  double t48023;
  double t48166;
  double t50170;
  double t50250;
  double t50629;
  double t50695;
  double t50729;
  double t50758;
  double t50817;
  double t50825;
  double t50837;
  double t50846;
  double t50892;
  double t50894;
  double t50895;
  double t50962;
  double t50969;
  double t50996;
  double t51018;
  double t51058;
  double t51162;
  double t51205;
  double t51208;
  double t51222;
  double t51238;
  double t51255;
  double t51458;
  double t51479;
  double t51509;
  double t51517;
  double t51528;
  double t51926;
  double t51958;
  double t52021;
  double t52057;
  double t52066;
  double t52067;
  double t52117;
  double t52121;
  double t52130;
  double t52150;
  double t52187;
  double t52189;
  double t52344;
  double t52347;
  double t52415;
  double t52424;
  double t52495;
  double t52514;
  double t52536;
  double t52557;
  double t52563;
  double t52565;
  double t52574;
  double t53653;
  double t53783;
  double t53856;
  double t54171;
  double t54220;
  double t54435;
  double t54549;
  double t54688;
  double t54720;
  double t54800;
  double t54804;
  double t54827;
  double t55518;
  double t55524;
  double t55609;
  double t55621;
  double t55685;
  double t55700;
  double t55854;
  double t55868;
  double t55880;
  double t55911;
  double t56015;
  double t56320;
  double t56332;
  double t56785;
  double t57239;
  double t57253;
  double t57259;
  double t55612;
  double t56041;
  double t56069;
  double t56147;
  double t56214;
  double t56228;
  double t58354;
  double t58504;
  double t58839;
  double t59691;
  double t59880;
  double t59898;
  double t59999;
  double t60232;
  double t60286;
  double t60338;
  double t60366;
  double t60685;
  double t61002;
  double t61411;
  double t61415;
  double t61521;
  double t61647;
  double t61717;
  double t61730;
  double t61211;
  double t61213;
  double t61396;
  double t60114;
  double t61034;
  double t61153;
  double t59627;
  double t59653;
  double t59685;
  double t61867;
  double t61875;
  double t61878;
  double t62309;
  double t62315;
  double t62320;
  double t63809;
  double t63813;
  double t63821;
  double t63831;
  double t63858;
  double t63899;
  double t63900;
  double t63903;
  double t59362;
  double t68171;
  double t68176;
  double t68182;
  double t59547;
  double t62015;
  double t62136;
  double t68315;
  double t68327;
  double t68332;
  double t62579;
  double t62876;
  double t63424;
  double t63537;
  double t57698;
  double t57785;
  double t59413;
  double t68186;
  double t68201;
  double t59532;
  double t59534;
  double t59552;
  double t68357;
  double t68374;
  double t68506;
  double t68520;
  double t62046;
  double t62048;
  double t62053;
  double t62202;
  double t62209;
  double t62213;
  double t68698;
  double t68708;
  double t62680;
  double t62718;
  double t62723;
  double t68785;
  double t68794;
  double t62882;
  double t62886;
  double t63094;
  double t68871;
  double t68923;
  double t63429;
  double t63446;
  double t63449;
  double t69008;
  double t69021;
  double t63541;
  double t63588;
  double t63611;
  double t68282;
  double t75401;
  double t75404;
  double t75409;
  double t75449;
  double t75452;
  double t75455;
  double t68410;
  double t68535;
  double t75411;
  double t75413;
  double t75428;
  double t68722;
  double t68850;
  double t68949;
  double t56290;
  double t56309;
  double t56317;
  double t80781;
  double t80788;
  double t80798;
  double t80840;
  double t80843;
  double t80844;
  double t80852;
  double t80904;
  double t80933;
  double t80996;
  double t80998;
  double t81000;
  double t68166;
  double t68168;
  double t75456;
  double t68283;
  double t68292;
  double t75505;
  double t75511;
  double t68486;
  double t68488;
  double t75600;
  double t68553;
  double t68654;
  double t75653;
  double t75656;
  double t68731;
  double t68747;
  double t75667;
  double t75706;
  double t68854;
  double t68858;
  double t76097;
  double t76207;
  double t68958;
  double t68962;
  double t80455;
  double t80456;
  double t80625;
  double t80639;
  double t80669;
  double t80735;
  double t80748;
  double t80754;
  double t80757;
  double t86227;
  double t86229;
  double t86230;
  double t86218;
  double t86219;
  double t86221;
  double t86236;
  double t86237;
  double t86238;
  double t81161;
  double t81162;
  double t81188;
  double t81344;
  double t81350;
  double t82426;
  double t83132;
  double t86261;
  double t86262;
  double t86263;
  double t86266;
  double t86267;
  double t86273;
  double t83360;
  double t83361;
  double t83419;
  double t83425;
  double t83541;
  double t83545;
  double t83705;
  double t84410;
  double t87028;
  double t87061;
  double t87067;
  double t87074;
  double t87088;
  double t87089;
  double t87090;
  double t87065;
  double t87066;
  double t87081;
  double t87083;
  double t87091;
  double t87092;
  double t87094;
  double t87102;
  double t87104;
  double t87107;
  double t87124;
  double t87131;
  double t87027;
  double t87075;
  double t87078;
  double t87079;
  double t87093;
  double t87096;
  double t87103;
  double t87109;
  double t87110;
  double t87115;
  double t87117;
  double t87118;
  double t87123;
  double t87133;
  double t87135;
  double t87136;
  double t87140;
  double t87245;
  double t87246;
  double t87247;
  double t87248;
  double t75438;
  double t75440;
  double t75568;
  double t75594;
  double t75596;
  double t75604;
  double t75608;
  double t75632;
  double t75646;
  double t75651;
  double t75800;
  double t75801;
  double t75803;
  double t75840;
  double t87310;
  double t87314;
  double t87315;
  double t87418;
  double t87419;
  double t87423;
  double t87425;
  double t87426;
  double t87427;
  double t87300;
  double t87301;
  double t87560;
  double t87561;
  double t87691;
  double t87694;
  double t87842;
  double t87844;
  double t87848;
  double t87861;
  double t87862;
  double t87865;
  double t52850;
  double t52880;
  double t52914;
  double t53007;
  double t53114;
  double t53141;
  double t87935;
  double t87936;
  double t87937;
  double t87942;
  double t87943;
  double t87945;
  double t87949;
  double t87950;
  double t87959;
  double t87963;
  double t87965;
  double t87966;
  double t53167;
  double t53186;
  double t53187;
  double t87424;
  double t87563;
  double t87568;
  double t88140;
  double t88142;
  double t88143;
  double t88127;
  double t88131;
  double t88133;
  double t87591;
  double t87595;
  double t87689;
  double t87690;
  double t87713;
  double t87737;
  double t87742;
  double t87840;
  double t87851;
  double t87853;
  double t87859;
  double t87867;
  double t87868;
  double t88220;
  double t88229;
  double t88230;
  double t88274;
  double t88275;
  double t88276;
  double t88279;
  double t88280;
  double t88281;
  double t88134;
  double t88152;
  double t88153;
  double t88203;
  double t88204;
  double t88195;
  double t88196;
  t14697 = Cos(var1[18]);
  t44960 = Cos(var1[20]);
  t45492 = -1.*t44960;
  t45912 = 1. + t45492;
  t49118 = Sin(var1[20]);
  t48488 = -9.e-12*t45912;
  t48542 = 1. + t48488;
  t48561 = -3.e-6*t48542;
  t48634 = 3.e-6*t45912;
  t48664 = t48561 + t48634;
  t49191 = 4.e-7*var1[20];
  t49217 = 9.e-12*t45912;
  t49253 = -1. + t49217;
  t49289 = 0.1*t49253;
  t49610 = 3.000000000027e-7*t45912;
  t49635 = 9.e-18*t49118;
  t49864 = t49191 + t49289 + t49610 + t49635;
  t49910 = -1.2e-12*var1[20];
  t49932 = 0.1000003000009*t45912;
  t49947 = 3.e-12*t49118;
  t49972 = t49910 + t49932 + t49947;
  t48730 = 1.000000000009*t45912;
  t48744 = -1. + t48730;
  t49073 = 0.2*t48744;
  t49108 = -0.2000000000048*t45912;
  t49127 = 0.1000003000009*t49118;
  t49183 = t49073 + t49108 + t49127;
  t38871 = Sin(var1[3]);
  t18123 = Cos(var1[5]);
  t13036 = Sin(var1[18]);
  t39150 = Sin(var1[5]);
  t6975 = Cos(var1[3]);
  t50791 = 3.e-6*t44960;
  t50814 = t48634 + t50791;
  t7222 = Cos(var1[4]);
  t19973 = Sin(var1[4]);
  t48674 = -1.000000000009*t45912;
  t48721 = 1. + t48674;
  t49187 = t48721*t49183;
  t49875 = 3.e-6*t49864*t49118;
  t50160 = t49972*t49118;
  t50584 = t49217 + t45492;
  t51344 = t50584*t13036;
  t51365 = 1.000000000009*t14697*t49118;
  t51386 = t51344 + t51365;
  t50399 = -1.*t48664*t49864;
  t50593 = -1.*t50584*t49972;
  t50619 = -1.000000000009*t49183*t49118;
  t52211 = t14697*t48721;
  t52339 = t13036*t49118;
  t52343 = t52211 + t52339;
  t14018 = -1.*t7222*t13036;
  t19976 = -1.*t14697*t18123*t19973;
  t20006 = t14018 + t19976;
  t45949 = -3.e-6*t45912;
  t45983 = -3.e-6*t44960;
  t48023 = t45949 + t45983;
  t48166 = 0.2*t48023;
  t50170 = t49187 + t49875 + t50160;
  t50250 = t48664*t50170;
  t50629 = t50399 + t50593 + t50619;
  t50695 = 3.e-6*t49118*t50629;
  t50729 = t48166 + t50250 + t50695;
  t50758 = -1.*t18123;
  t50817 = t50814*t13036*t39150;
  t50825 = t50758 + t50817;
  t50837 = t14697*t50814*t7222;
  t50846 = t50814*t18123*t13036;
  t50892 = t50846 + t39150;
  t50894 = -1.*t19973*t50892;
  t50895 = t50837 + t50894;
  t50962 = t48488 + t44960;
  t50969 = 0.2*t50962;
  t50996 = -4.e-7*var1[20];
  t51018 = 0.1*t48542;
  t51058 = -3.000000000027e-7*t45912;
  t51162 = t50814*t49972;
  t51205 = -9.e-18*t49118;
  t51208 = t50996 + t51018 + t51058 + t51162 + t51205;
  t51222 = 3.e-6*t51208*t49118;
  t51238 = t50969 + t49187 + t51222 + t49875 + t50160;
  t51255 = t48664*t18123;
  t51458 = t51386*t39150;
  t51479 = t51255 + t51458;
  t51509 = t14697*t50584;
  t51517 = -1.000000000009*t13036*t49118;
  t51528 = t51509 + t51517;
  t51926 = t7222*t51528;
  t51958 = t18123*t51386;
  t52021 = -1.*t48664*t39150;
  t52057 = t51958 + t52021;
  t52066 = -1.*t19973*t52057;
  t52067 = t51926 + t52066;
  t52117 = -1.*t50814*t49972;
  t52121 = t49191 + t49289 + t49610 + t52117 + t49635;
  t52130 = t48664*t52121;
  t52150 = -0.2*t49118;
  t52187 = t50399 + t52130 + t50593 + t52150 + t50619;
  t52189 = 3.e-6*t18123*t49118;
  t52344 = t52343*t39150;
  t52347 = t52189 + t52344;
  t52415 = -1.*t48721*t13036;
  t52424 = t14697*t49118;
  t52495 = t52415 + t52424;
  t52514 = t7222*t52495;
  t52536 = t18123*t52343;
  t52557 = -3.e-6*t49118*t39150;
  t52563 = t52536 + t52557;
  t52565 = -1.*t19973*t52563;
  t52574 = t52514 + t52565;
  t53653 = -1.*t14697*t7222*t18123;
  t53783 = t13036*t19973;
  t53856 = t53653 + t53783;
  t54171 = -1.*t14697*t50814*t19973;
  t54220 = -1.*t7222*t50892;
  t54435 = t54171 + t54220;
  t54549 = -1.*t51528*t19973;
  t54688 = -1.*t7222*t52057;
  t54720 = t54549 + t54688;
  t54800 = -1.*t52495*t19973;
  t54804 = -1.*t7222*t52563;
  t54827 = t54800 + t54804;
  t55518 = t14697*t7222;
  t55524 = -1.*t18123*t13036*t19973;
  t55609 = t55518 + t55524;
  t55621 = -1. + t14697;
  t55685 = 0.2*t55621;
  t55700 = -0.2*t14697;
  t55854 = 0.05*t13036;
  t55868 = t55685 + t55700 + t55854;
  t55880 = t18123*t55868;
  t55911 = 0.1*t39150;
  t56015 = t55880 + t55911;
  t56320 = 0.05*t14697*t7222;
  t56332 = -1.*t19973*t56015;
  t56785 = t56320 + t56332;
  t57239 = t7222*t18123*t13036;
  t57253 = t14697*t19973;
  t57259 = t57239 + t57253;
  t55612 = -0.05*t14697*t19973;
  t56041 = -1.*t7222*t56015;
  t56069 = t55612 + t56041;
  t56147 = 0.05*t14697*t19973;
  t56214 = t7222*t56015;
  t56228 = t56147 + t56214;
  t58354 = -0.1*t18123;
  t58504 = t55868*t39150;
  t58839 = t58354 + t58504;
  t59691 = -0.2*t13036;
  t59880 = t14697*t49972;
  t59898 = -1.*t13036*t49183;
  t59999 = t59691 + t59880 + t59898;
  t60232 = t13036*t49972;
  t60286 = t14697*t49183;
  t60338 = t55685 + t60232 + t60286;
  t60366 = t18123*t60338;
  t60685 = -1.*t49864*t39150;
  t61002 = t60366 + t60685;
  t61411 = t7222*t59999;
  t61415 = -1.*t19973*t61002;
  t61521 = t61411 + t61415;
  t61647 = t14697*t50814*t19973;
  t61717 = t7222*t50892;
  t61730 = t61647 + t61717;
  t61211 = t59999*t19973;
  t61213 = t7222*t61002;
  t61396 = t61211 + t61213;
  t60114 = -1.*t59999*t19973;
  t61034 = -1.*t7222*t61002;
  t61153 = t60114 + t61034;
  t59627 = t51528*t19973;
  t59653 = t7222*t52057;
  t59685 = t59627 + t59653;
  t61867 = t18123*t49864;
  t61875 = t60338*t39150;
  t61878 = t61867 + t61875;
  t62309 = t52495*t19973;
  t62315 = t7222*t52563;
  t62320 = t62309 + t62315;
  t63809 = -1.*t50814*t13036*t39150;
  t63813 = t18123 + t63809;
  t63821 = -1.*t48664*t18123;
  t63831 = -1.*t51386*t39150;
  t63858 = t63821 + t63831;
  t63899 = -3.e-6*t18123*t49118;
  t63900 = -1.*t52343*t39150;
  t63903 = t63899 + t63900;
  t59362 = -1.*t18123*t58839;
  t68171 = 0.1*t18123;
  t68176 = -1.*t55868*t39150;
  t68182 = t68171 + t68176;
  t59547 = t13036*t39150*t58839;
  t62015 = -1.*t50825*t61878;
  t62136 = t61878*t51479;
  t68315 = -1.*t18123*t49864;
  t68327 = -1.*t60338*t39150;
  t68332 = t68315 + t68327;
  t62579 = t50825*t61878;
  t62876 = -1.*t61878*t52347;
  t63424 = -1.*t61878*t51479;
  t63537 = t61878*t52347;
  t57698 = t7222*t56228*t39150;
  t57785 = -1.*t19973*t56785*t39150;
  t59413 = t57698 + t57785 + t59362;
  t68186 = t18123*t13036*t58839;
  t68201 = t39150*t58839;
  t59532 = t57259*t56228;
  t59534 = t55609*t56785;
  t59552 = t59532 + t59534 + t59547;
  t68357 = -1.*t50892*t61878;
  t68374 = -1.*t50825*t61002;
  t68506 = t52057*t61878;
  t68520 = t61002*t51479;
  t62046 = -1.*t61730*t61396;
  t62048 = -1.*t50895*t61521;
  t62053 = t62015 + t62046 + t62048;
  t62202 = t59685*t61396;
  t62209 = t52067*t61521;
  t62213 = t62136 + t62202 + t62209;
  t68698 = t50892*t61878;
  t68708 = t50825*t61002;
  t62680 = t61730*t61396;
  t62718 = t50895*t61521;
  t62723 = t62579 + t62680 + t62718;
  t68785 = -1.*t61878*t52563;
  t68794 = -1.*t61002*t52347;
  t62882 = -1.*t61396*t62320;
  t62886 = -1.*t61521*t52574;
  t63094 = t62876 + t62882 + t62886;
  t68871 = -1.*t52057*t61878;
  t68923 = -1.*t61002*t51479;
  t63429 = -1.*t59685*t61396;
  t63446 = -1.*t52067*t61521;
  t63449 = t63424 + t63429 + t63446;
  t69008 = t61878*t52563;
  t69021 = t61002*t52347;
  t63541 = t61396*t62320;
  t63588 = t61521*t52574;
  t63611 = t63537 + t63541 + t63588;
  t68282 = -1.*t14697*t50814*t59999;
  t75401 = -1.*t50584*t13036;
  t75404 = -1.000000000009*t14697*t49118;
  t75409 = t75401 + t75404;
  t75449 = -1.*t13036*t49972;
  t75452 = -1.*t14697*t49183;
  t75455 = t55700 + t75449 + t75452;
  t68410 = t59999*t51528;
  t68535 = t14697*t50814*t59999;
  t75411 = -1.*t14697*t48721;
  t75413 = -1.*t13036*t49118;
  t75428 = t75411 + t75413;
  t68722 = -1.*t59999*t52495;
  t68850 = -1.*t59999*t51528;
  t68949 = t59999*t52495;
  t56290 = -1.*t7222*t18123*t13036;
  t56309 = -1.*t14697*t19973;
  t56317 = t56290 + t56309;
  t80781 = -1.*t50814*t7222*t13036;
  t80788 = -1.*t14697*t50814*t18123*t19973;
  t80798 = t80781 + t80788;
  t80840 = -1.*t14697*t7222;
  t80843 = t18123*t13036*t19973;
  t80844 = t80840 + t80843;
  t80852 = t7222*t75428;
  t80904 = -1.*t18123*t52495*t19973;
  t80933 = t80852 + t80904;
  t80996 = t7222*t75409;
  t80998 = -1.*t18123*t51528*t19973;
  t81000 = t80996 + t80998;
  t68166 = t56015*t39150;
  t68168 = t68166 + t59362;
  t75456 = -1.*t14697*t50814*t75455;
  t68283 = -1.*t50892*t61002;
  t68292 = t68282 + t62015 + t68283;
  t75505 = t59999*t75409;
  t75511 = t75455*t51528;
  t68486 = t52057*t61002;
  t68488 = t68410 + t68486 + t62136;
  t75600 = t14697*t50814*t75455;
  t68553 = t50892*t61002;
  t68654 = t68535 + t62579 + t68553;
  t75653 = -1.*t75455*t52495;
  t75656 = -1.*t59999*t75428;
  t68731 = -1.*t61002*t52563;
  t68747 = t68722 + t68731 + t62876;
  t75667 = -1.*t59999*t75409;
  t75706 = -1.*t75455*t51528;
  t68854 = -1.*t52057*t61002;
  t68858 = t68850 + t68854 + t63424;
  t76097 = t75455*t52495;
  t76207 = t59999*t75428;
  t68958 = t61002*t52563;
  t68962 = t68949 + t68958 + t63537;
  t80455 = t14697*t50814*t7222*t18123;
  t80456 = -1.*t50814*t13036*t19973;
  t80625 = t80455 + t80456;
  t80639 = t7222*t18123*t51528;
  t80669 = t75409*t19973;
  t80735 = t80639 + t80669;
  t80748 = t7222*t18123*t52495;
  t80754 = t75428*t19973;
  t80757 = t80748 + t80754;
  t86227 = 0.05*t14697*t7222*t18123;
  t86229 = -0.05*t13036*t19973;
  t86230 = t86227 + t86229;
  t86218 = -0.05*t7222*t13036;
  t86219 = -0.05*t14697*t18123*t19973;
  t86221 = t86218 + t86219;
  t86236 = t14697*t7222*t18123;
  t86237 = -1.*t13036*t19973;
  t86238 = t86236 + t86237;
  t81161 = Power(t39150,2);
  t81162 = 0.05*t14697*t13036*t81161;
  t81188 = t14697*t39150*t58839;
  t81344 = -1.*t59999*t39150*t50825;
  t81350 = -1.*t14697*t50814*t39150*t61878;
  t82426 = t51528*t39150*t61878;
  t83132 = t59999*t39150*t51479;
  t86261 = t7222*t18123*t59999;
  t86262 = t75455*t19973;
  t86263 = t86261 + t86262;
  t86266 = t7222*t75455;
  t86267 = -1.*t18123*t59999*t19973;
  t86273 = t86266 + t86267;
  t83360 = t59999*t39150*t50825;
  t83361 = t14697*t50814*t39150*t61878;
  t83419 = -1.*t52495*t39150*t61878;
  t83425 = -1.*t59999*t39150*t52347;
  t83541 = -1.*t51528*t39150*t61878;
  t83545 = -1.*t59999*t39150*t51479;
  t83705 = t52495*t39150*t61878;
  t84410 = t59999*t39150*t52347;
  t87028 = 9.e-18*t44960;
  t87061 = 3.000009000027e-7*t49118;
  t87067 = 3.e-12*t44960;
  t87074 = -1.2e-12 + t87067 + t49127;
  t87088 = 0.1000003000009*t44960;
  t87089 = -3.000000000027e-12*t49118;
  t87090 = t87088 + t87089;
  t87065 = 4.e-7 + t87028 + t87061;
  t87066 = -1.*t48664*t87065;
  t87081 = -1.000000000009*t44960*t49183;
  t87083 = -1.*t50584*t87074;
  t87091 = -1.000000000009*t87090*t49118;
  t87092 = -3.000000000027e-6*t49864*t49118;
  t87094 = -1.000000000009*t49972*t49118;
  t87102 = t48721*t87090;
  t87104 = 3.e-6*t44960*t49864;
  t87107 = t44960*t49972;
  t87124 = 3.e-6*t87065*t49118;
  t87131 = t87074*t49118;
  t87027 = -0.2*t44960;
  t87075 = -1.*t50814*t87074;
  t87078 = 4.e-7 + t87028 + t87075 + t87061;
  t87079 = t48664*t87078;
  t87093 = 3.000000000027e-6*t52121*t49118;
  t87096 = t87027 + t87066 + t87079 + t87081 + t87083 + t87091 + t87092 + t87093 + t87094;
  t87103 = 3.e-6*t44960*t51208;
  t87109 = -0.2000000000018*t49118;
  t87110 = -9.e-18*t44960;
  t87115 = t50814*t87074;
  t87117 = -3.000009000027e-7*t49118;
  t87118 = -4.e-7 + t87110 + t87115 + t87117;
  t87123 = 3.e-6*t87118*t49118;
  t87133 = t87102 + t87103 + t87104 + t87107 + t87109 + t87123 + t87124 + t50619 + t87131;
  t87135 = t87066 + t87081 + t87083 + t87091 + t87092 + t87094;
  t87136 = 3.e-6*t49118*t87135;
  t87140 = 3.000000000027e-6*t49118*t50170;
  t87245 = 3.e-6*t44960*t50629;
  t87246 = t87102 + t87104 + t87107 + t87124 + t50619 + t87131;
  t87247 = t48664*t87246;
  t87248 = t87136 + t87140 + t87245 + t87247;
  t75438 = -1.*t50814*t13036*t60338;
  t75440 = t49191 + t49289 + t49610 + t75438 + t68282 + t49635;
  t75568 = t48664*t49864;
  t75594 = t60338*t51386;
  t75596 = t75568 + t75594 + t68410;
  t75604 = t50814*t13036*t60338;
  t75608 = t50996 + t51018 + t51058 + t75604 + t68535 + t51205;
  t75632 = -3.e-6*t49864*t49118;
  t75646 = -1.*t60338*t52343;
  t75651 = t75632 + t68722 + t75646;
  t75800 = -1.*t60338*t51386;
  t75801 = t50399 + t75800 + t68850;
  t75803 = t60338*t52343;
  t75840 = t49875 + t68949 + t75803;
  t87310 = t14697*t44960;
  t87314 = 1.000000000009*t13036*t49118;
  t87315 = t87310 + t87314;
  t87418 = -1.*t13036*t87090;
  t87419 = t14697*t87074;
  t87423 = t87418 + t87419;
  t87425 = t14697*t87090;
  t87426 = t13036*t87074;
  t87427 = t87425 + t87426;
  t87300 = -1.000000000009*t44960*t13036;
  t87301 = t87300 + t51365;
  t87560 = t44960*t13036;
  t87561 = t87560 + t75404;
  t87691 = 1.000000000009*t14697*t44960;
  t87694 = t87691 + t87314;
  t87842 = t18123*t87561;
  t87844 = -3.e-6*t44960*t39150;
  t87848 = t87842 + t87844;
  t87861 = t18123*t87694;
  t87862 = -3.000000000027e-6*t49118*t39150;
  t87865 = t87861 + t87862;
  t52850 = t6975*t50825;
  t52880 = -1.*t38871*t50895;
  t52914 = t52850 + t52880;
  t53007 = t6975*t51479;
  t53114 = -1.*t38871*t52067;
  t53141 = t53007 + t53114;
  t87935 = 3.e-6*t44960*t18123;
  t87936 = t87561*t39150;
  t87937 = t87935 + t87936;
  t87942 = t7222*t87315;
  t87943 = -1.*t19973*t87848;
  t87945 = t87942 + t87943;
  t87949 = 3.000000000027e-6*t18123*t49118;
  t87950 = t87694*t39150;
  t87959 = t87949 + t87950;
  t87963 = t7222*t87301;
  t87965 = -1.*t19973*t87865;
  t87966 = t87963 + t87965;
  t53167 = t6975*t52347;
  t53186 = -1.*t38871*t52574;
  t53187 = t53167 + t53186;
  t87424 = t14697*t50814*t87423;
  t87563 = -1.*t87423*t52495;
  t87568 = -1.*t59999*t87315;
  t88140 = t18123*t87427;
  t88142 = -1.*t87065*t39150;
  t88143 = t88140 + t88142;
  t88127 = t18123*t87065;
  t88131 = t87427*t39150;
  t88133 = t88127 + t88131;
  t87591 = t87423*t52495;
  t87595 = t59999*t87315;
  t87689 = -1.*t59999*t87301;
  t87690 = -1.*t87423*t51528;
  t87713 = -1.*t14697*t50814*t87423;
  t87737 = t59999*t87301;
  t87742 = t87423*t51528;
  t87840 = t87315*t19973;
  t87851 = t7222*t87848;
  t87853 = t87840 + t87851;
  t87859 = t87301*t19973;
  t87867 = t7222*t87865;
  t87868 = t87859 + t87867;
  t88220 = -1.*t50825*t88133;
  t88229 = t88133*t51479;
  t88230 = t61878*t87959;
  t88274 = t87423*t19973;
  t88275 = t7222*t88143;
  t88276 = t88274 + t88275;
  t88279 = t7222*t87423;
  t88280 = -1.*t19973*t88143;
  t88281 = t88279 + t88280;
  t88134 = t50825*t88133;
  t88152 = -1.*t61878*t87937;
  t88153 = -1.*t88133*t52347;
  t88203 = -1.*t88133*t51479;
  t88204 = -1.*t61878*t87959;
  t88195 = t61878*t87937;
  t88196 = t88133*t52347;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.0013*(-1.*t14697*t38871*t39150 - 1.*t20006*t6975) - 0.05186*t50729*(-1.*t38871*t50825 - 1.*t50895*t6975) - 0.05186*t51238*(-1.*t38871*t51479 - 1.*t52067*t6975) - 0.05186*t52187*(-1.*t38871*t52347 - 1.*t52574*t6975))*var2[1] - 0.5*(-0.05186*t50729*t52914 - 0.05186*t51238*t53141 - 0.05186*t52187*t53187 - 0.0013*(-1.*t20006*t38871 + t14697*t39150*t6975))*var2[2])*var2[18];
  p_output1[4]=(-0.5*(-0.0013*t20006 - 0.05186*t50729*t50895 - 0.05186*t51238*t52067 - 0.05186*t52187*t52574)*var2[0] - 0.5*(0.0013*t38871*t53856 + 0.05186*t38871*t50729*t54435 + 0.05186*t38871*t51238*t54720 + 0.05186*t38871*t52187*t54827)*var2[1] - 0.5*(-0.0013*t53856*t6975 - 0.05186*t50729*t54435*t6975 - 0.05186*t51238*t54720*t6975 - 0.05186*t52187*t54827*t6975)*var2[2] - 0.5*(-0.000046*t19973*t39150 + 0.000245*t50895 - 0.000245*t48664*t52067 - 6.e-12*t49118*t52574 - 0.05186*t52187*((t52067*t61153 + t52067*t61396 + t54720*t61521 + t59685*t61521)*t61730 + t59685*(-1.*t50895*t61153 - 1.*t50895*t61396 - 1.*t54435*t61521 - 1.*t61521*t61730) + t52067*t62053 + t50895*t62213) - 0.05186*t51238*((t50895*t61153 + t50895*t61396 + t54435*t61521 + t61521*t61730)*t62320 + t61730*(-1.*t52574*t61153 - 1.*t52574*t61396 - 1.*t54827*t61521 - 1.*t61521*t62320) + t52574*t62723 + t50895*t63094) - 0.05186*t50729*((-1.*t52067*t61153 - 1.*t52067*t61396 - 1.*t54720*t61521 - 1.*t59685*t61521)*t62320 + t59685*(t52574*t61153 + t52574*t61396 + t54827*t61521 + t61521*t62320) + t52574*t63449 + t52067*t63611) - 0.0013*((-1.*t19973*t39150*t56069 - 1.*t19973*t39150*t56228)*t57259 + t55609*t59413 + t19973*t39150*t59552 - 1.*t39150*(t55609*t56069 + t55609*t56228 + t56317*t56785 + t56785*t57259)*t7222))*var2[3])*var2[18];
  p_output1[5]=(-0.5*(0.0013*t14697*t39150*t7222 - 0.05186*t50729*t63813*t7222 - 0.05186*t51238*t63858*t7222 - 0.05186*t52187*t63903*t7222)*var2[0] - 0.5*(-0.0013*(-1.*t14697*t19973*t38871*t39150 + t14697*t18123*t6975) - 0.05186*t50729*(t19973*t38871*t63813 + t50892*t6975) - 0.05186*t51238*(t19973*t38871*t63858 + t52057*t6975) - 0.05186*t52187*(t19973*t38871*t63903 + t52563*t6975))*var2[1] - 0.5*(-0.0013*(t14697*t18123*t38871 + t14697*t19973*t39150*t6975) - 0.05186*t50729*(t38871*t50892 - 1.*t19973*t63813*t6975) - 0.05186*t51238*(t38871*t52057 - 1.*t19973*t63858*t6975) - 0.05186*t52187*(t38871*t52563 - 1.*t19973*t63903*t6975))*var2[2] - 0.5*(0.000046*t18123*t7222 + 0.000245*t63813*t7222 - 0.000245*t48664*t63858*t7222 - 6.e-12*t49118*t63903*t7222 - 0.05186*t52187*(t62213*t63813*t7222 + t62053*t63858*t7222 + t61730*(-1.*t19973*t61521*t63858 - 1.*t19973*t52067*t68332 + t68506 + t68520 + t61396*t63858*t7222 + t59685*t68332*t7222) + t59685*(t19973*t61521*t63813 + t19973*t50895*t68332 + t68357 + t68374 - 1.*t61396*t63813*t7222 - 1.*t61730*t68332*t7222)) - 0.05186*t51238*(t63094*t63813*t7222 + t62723*t63903*t7222 + t62320*(-1.*t19973*t61521*t63813 - 1.*t19973*t50895*t68332 + t68698 + t68708 + t61396*t63813*t7222 + t61730*t68332*t7222) + t61730*(t19973*t61521*t63903 + t19973*t52574*t68332 + t68785 + t68794 - 1.*t61396*t63903*t7222 - 1.*t62320*t68332*t7222)) - 0.05186*t50729*(t63611*t63858*t7222 + t63449*t63903*t7222 + t62320*(t19973*t61521*t63858 + t19973*t52067*t68332 + t68871 + t68923 - 1.*t61396*t63858*t7222 - 1.*t59685*t68332*t7222) + t59685*(-1.*t19973*t61521*t63903 - 1.*t19973*t52574*t68332 + t69008 + t69021 + t61396*t63903*t7222 + t62320*t68332*t7222)) - 0.0013*(-1.*t13036*t39150*t59413*t7222 - 1.*t18123*t59552*t7222 - 1.*t39150*t7222*(t13036*t39150*t56015 + t13036*t19973*t39150*t56785 - 1.*t19973*t55609*t68182 + t68186 - 1.*t13036*t39150*t56228*t7222 + t57259*t68182*t7222) + t57259*(-1.*t18123*t56015 - 1.*t18123*t19973*t56785 + Power(t19973,2)*t39150*t68182 + t68201 + t18123*t56228*t7222 + t39150*t68182*Power(t7222,2))))*var2[3] - 0.5*(0.000046*t39150 + 0.000245*t50892 - 0.000245*t48664*t52057 - 6.e-12*t49118*t52563 - 0.0013*(-1.*t39150*(0.05*Power(t14697,2) + t13036*t18123*t56015 + t59547) + t13036*t18123*t68168 + t18123*(t13036*t18123*t68182 + t68186) + t13036*t39150*(t39150*t68182 + t68201)) - 0.05186*t52187*(t52057*t68292 + t51479*(-1.*t61002*t63813 - 1.*t50892*t68332 + t68357 + t68374) + t50892*t68488 + t50825*(t61002*t63858 + t52057*t68332 + t68506 + t68520)) - 0.05186*t51238*(t52563*t68654 + t52347*(t61002*t63813 + t50892*t68332 + t68698 + t68708) + t50892*t68747 + t50825*(-1.*t61002*t63903 - 1.*t52563*t68332 + t68785 + t68794)) - 0.05186*t50729*(t52563*t68858 + t52347*(-1.*t61002*t63858 - 1.*t52057*t68332 + t68871 + t68923) + t52057*t68962 + t51479*(t61002*t63903 + t52563*t68332 + t69008 + t69021)))*var2[4])*var2[18];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=(-0.5*(-0.0013*t56317 - 0.05186*t50729*t80625 - 0.05186*t51238*t80735 - 0.05186*t52187*t80757)*var2[0] - 0.5*(-0.05186*t50729*(t14697*t39150*t50814*t6975 - 1.*t38871*t80798) - 0.0013*(-1.*t13036*t39150*t6975 - 1.*t38871*t80844) - 0.05186*t52187*(t39150*t52495*t6975 - 1.*t38871*t80933) - 0.05186*t51238*(t39150*t51528*t6975 - 1.*t38871*t81000))*var2[1] - 0.5*(-0.05186*t50729*(t14697*t38871*t39150*t50814 + t6975*t80798) - 0.0013*(-1.*t13036*t38871*t39150 + t6975*t80844) - 0.05186*t52187*(t38871*t39150*t52495 + t6975*t80933) - 0.05186*t51238*(t38871*t39150*t51528 + t6975*t81000))*var2[2] - 0.5*(0.000245*t80625 - 0.000245*t48664*t80735 - 6.e-12*t49118*t80757 - 0.0013*(t57259*(-0.05*t14697*t18123*t39150 - 1.*t19973*t39150*t86221 + t39150*t7222*t86230) + t59413*t86238 - 1.*t39150*t7222*(t20006*t56785 + t81162 + t81188 + t55609*t86221 + t57259*t86230 + t56228*t86238)) - 0.05186*t52187*(t62213*t80625 + t62053*t80735 + t59685*(-1.*t61396*t80625 - 1.*t61521*t80798 + t81344 + t81350 - 1.*t61730*t86263 - 1.*t50895*t86273) + t61730*(t61396*t80735 + t61521*t81000 + t82426 + t83132 + t59685*t86263 + t52067*t86273)) - 0.05186*t51238*(t63094*t80625 + t62723*t80757 + t62320*(t61396*t80625 + t61521*t80798 + t83360 + t83361 + t61730*t86263 + t50895*t86273) + t61730*(-1.*t61396*t80757 - 1.*t61521*t80933 + t83419 + t83425 - 1.*t62320*t86263 - 1.*t52574*t86273)) - 0.05186*t50729*(t63611*t80735 + t63449*t80757 + t62320*(-1.*t61396*t80735 - 1.*t61521*t81000 + t83541 + t83545 - 1.*t59685*t86263 - 1.*t52067*t86273) + t59685*(t61396*t80757 + t61521*t80933 + t83705 + t84410 + t62320*t86263 + t52574*t86273)))*var2[3] - 0.5*(0.000245*t14697*t39150*t50814 - 0.000245*t39150*t48664*t51528 - 6.e-12*t39150*t49118*t52495 - 0.0013*(t14697*t39150*t68168 + t18123*(-0.1*t13036*t14697 + 0.05*t13036*t14697*Power(t18123,2) + t14697*t18123*t56015 + t81162 + t81188)) - 0.05186*t52187*(t39150*t51528*t68292 + t14697*t39150*t50814*t68488 + t51479*(t13036*t50814*t59999 - 1.*t18123*t50892*t59999 - 1.*t14697*t18123*t50814*t61002 + t75456 + t81344 + t81350) + t50825*(t18123*t52057*t59999 + t18123*t51528*t61002 + t75505 + t75511 + t82426 + t83132)) - 0.05186*t51238*(t39150*t52495*t68654 + t14697*t39150*t50814*t68747 + t52347*(-1.*t13036*t50814*t59999 + t18123*t50892*t59999 + t14697*t18123*t50814*t61002 + t75600 + t83360 + t83361) + t50825*(-1.*t18123*t52563*t59999 - 1.*t18123*t52495*t61002 + t75653 + t75656 + t83419 + t83425)) - 0.05186*t50729*(t39150*t52495*t68858 + t39150*t51528*t68962 + t52347*(-1.*t18123*t52057*t59999 - 1.*t18123*t51528*t61002 + t75667 + t75706 + t83541 + t83545) + t51479*(t18123*t52563*t59999 + t18123*t52495*t61002 + t76097 + t76207 + t83705 + t84410)))*var2[4] - 0.5*(0.00013*t13036 - 0.000245*t13036*t50814 - 0.000245*t48664*t75409 - 6.e-12*t49118*t75428 - 0.05186*t52187*(t75409*t75440 + t51528*(-1.*t14697*t50814*t60338 + t75456) + t14697*t50814*(t51386*t59999 + t51528*t60338 + t75505 + t75511) - 1.*t13036*t50814*t75596) - 0.05186*t51238*(t52495*(t14697*t50814*t60338 + t75600) + t75428*t75608 - 1.*t13036*t50814*t75651 + t14697*t50814*(-1.*t52343*t59999 - 1.*t52495*t60338 + t75653 + t75656)) - 0.05186*t50729*(t52495*(-1.*t51386*t59999 - 1.*t51528*t60338 + t75667 + t75706) + t75428*t75801 + t75409*t75840 + t51528*(t52343*t59999 + t52495*t60338 + t76097 + t76207)))*var2[5])*var2[18];
  p_output1[19]=0;
  p_output1[20]=var2[18]*(-0.5*(-0.05186*t62320*t87096 - 0.05186*t59685*t87133 - 0.05186*t61730*t87248 - 0.05186*t52187*t87853 - 0.05186*t51238*t87868)*var2[0] - 0.5*(-0.05186*t53187*t87096 - 0.05186*t53141*t87133 - 0.05186*t52914*t87248 - 0.05186*t52187*(t6975*t87937 - 1.*t38871*t87945) - 0.05186*t51238*(t6975*t87959 - 1.*t38871*t87966))*var2[1] - 0.5*(-0.05186*(t38871*t52347 + t52574*t6975)*t87096 - 0.05186*(t38871*t51479 + t52067*t6975)*t87133 - 0.05186*(t38871*t50825 + t50895*t6975)*t87248 - 0.05186*t52187*(t38871*t87937 + t6975*t87945) - 0.05186*t51238*(t38871*t87959 + t6975*t87966))*var2[2] - 0.5*(-7.35000000006615e-10*t49118*t59685 - 6.e-12*t44960*t62320 - 0.05186*(t59685*t62053 + t61730*t62213)*t87096 - 0.05186*(t62320*t62723 + t61730*t63094)*t87133 - 0.05186*(t62320*t63449 + t59685*t63611)*t87248 - 6.e-12*t49118*t87853 - 0.000245*t48664*t87868 - 0.05186*t52187*(t62053*t87868 + t59685*(t88220 - 1.*t61730*t88276 - 1.*t50895*t88281) + t61730*(t61396*t87868 + t61521*t87966 + t88229 + t88230 + t59685*t88276 + t52067*t88281)) - 0.05186*t51238*(t62723*t87853 + t62320*(t88134 + t61730*t88276 + t50895*t88281) + t61730*(-1.*t61396*t87853 - 1.*t61521*t87945 + t88152 + t88153 - 1.*t62320*t88276 - 1.*t52574*t88281)) - 0.05186*t50729*(t63449*t87853 + t63611*t87868 + t62320*(-1.*t61396*t87868 - 1.*t61521*t87966 + t88203 + t88204 - 1.*t59685*t88276 - 1.*t52067*t88281) + t59685*(t61396*t87853 + t61521*t87945 + t88195 + t88196 + t62320*t88276 + t52574*t88281)))*var2[3] - 0.5*(-7.35000000006615e-10*t49118*t51479 - 6.e-12*t44960*t52347 - 0.05186*(t51479*t68292 + t50825*t68488)*t87096 - 0.05186*(t52347*t68654 + t50825*t68747)*t87133 - 0.05186*(t52347*t68858 + t51479*t68962)*t87248 - 6.e-12*t49118*t87937 - 0.000245*t48664*t87959 - 0.05186*t51238*(t68654*t87937 + t52347*(t87424 + t88134 + t50892*t88143) + t50825*(t87563 + t87568 - 1.*t61002*t87848 - 1.*t52563*t88143 + t88152 + t88153)) - 0.05186*t50729*(t68858*t87937 + t68962*t87959 + t51479*(t87591 + t87595 + t61002*t87848 + t52563*t88143 + t88195 + t88196) + t52347*(t87689 + t87690 - 1.*t61002*t87865 - 1.*t52057*t88143 + t88203 + t88204)) - 0.05186*t52187*(t68292*t87959 + t51479*(t87713 - 1.*t50892*t88143 + t88220) + t50825*(t87737 + t87742 + t61002*t87865 + t52057*t88143 + t88229 + t88230)))*var2[4] - 0.5*(-7.35000000006615e-10*t49118*t51528 - 6.e-12*t44960*t52495 - 0.05186*(t51528*t75440 + t14697*t50814*t75596)*t87096 - 0.05186*(t52495*t75608 + t14697*t50814*t75651)*t87133 - 0.05186*(t52495*t75801 + t51528*t75840)*t87248 - 0.000245*t48664*t87301 - 6.e-12*t49118*t87315 - 0.05186*t51238*(t75608*t87315 + t52495*(-4.e-7 + t87110 + t87117 + t87424 + t13036*t50814*t87427) + t14697*t50814*(-3.e-6*t44960*t49864 - 3.e-6*t49118*t87065 - 1.*t52343*t87427 - 1.*t60338*t87561 + t87563 + t87568)) - 0.05186*t50729*(t75840*t87301 + t75801*t87315 + t51528*(t87104 + t87124 + t52343*t87427 + t60338*t87561 + t87591 + t87595) + t52495*(t87066 + t87092 - 1.*t51386*t87427 + t87689 + t87690 - 1.*t60338*t87694)) - 0.05186*t52187*(t75440*t87301 + t51528*(4.e-7 + t87028 + t87061 - 1.*t13036*t50814*t87427 + t87713) + t14697*t50814*(3.000000000027e-6*t49118*t49864 + t48664*t87065 + t51386*t87427 + t60338*t87694 + t87737 + t87742)))*var2[5] - 0.5*(-3.6e-17*t44960*t49118 - 1.47000000001323e-9*t48664*t49118 - 0.10372*t52187*t87096 - 0.10372*t51238*t87133 - 0.10372*t50729*t87248)*var2[18] - 0.5*(-0.005186015558*t87096 + 6.2232e-14*t87133 + 2.0744e-8*t87248)*var2[20]);
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec19_minitaur.hh"

namespace FrontStance
{

void Ce3_vec19_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
