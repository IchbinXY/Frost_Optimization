/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:09:16 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3239;
  double t3246;
  double t3468;
  double t8270;
  double t4261;
  double t4299;
  double t4393;
  double t4558;
  double t4612;
  double t12663;
  double t12857;
  double t12920;
  double t12931;
  double t12968;
  double t12981;
  double t13072;
  double t13202;
  double t13943;
  double t14876;
  double t15107;
  double t5332;
  double t6270;
  double t6814;
  double t7299;
  double t8342;
  double t11161;
  double t2504;
  double t203;
  double t332;
  double t19970;
  double t19984;
  double t738;
  double t2902;
  double t4907;
  double t5287;
  double t12614;
  double t13156;
  double t15219;
  double t17084;
  double t15714;
  double t18849;
  double t19189;
  double t3653;
  double t3676;
  double t3955;
  double t4214;
  double t15230;
  double t15408;
  double t19917;
  double t19919;
  double t19969;
  double t36479;
  double t20073;
  double t20076;
  double t21552;
  double t21834;
  double t22002;
  double t22006;
  double t22030;
  double t22358;
  double t22609;
  double t22621;
  double t24396;
  double t24903;
  double t26309;
  double t26922;
  double t27535;
  double t46861;
  double t47245;
  double t47251;
  double t46276;
  double t46481;
  double t46483;
  double t46489;
  double t46495;
  double t49112;
  double t49246;
  double t49251;
  double t49319;
  double t49358;
  double t23014;
  double t23918;
  double t24044;
  double t42575;
  double t43161;
  double t44321;
  double t24092;
  double t51164;
  double t46485;
  double t46487;
  double t46496;
  double t47473;
  double t47530;
  double t47848;
  double t27754;
  double t27814;
  double t27967;
  double t44385;
  double t44387;
  double t44746;
  double t50106;
  double t50129;
  double t50802;
  double t50805;
  double t50983;
  double t53109;
  double t53110;
  double t53111;
  double t53819;
  double t54171;
  double t31547;
  double t32861;
  double t33131;
  double t24063;
  double t24094;
  double t42027;
  double t42116;
  double t42233;
  double t44366;
  double t44368;
  double t44378;
  double t45593;
  double t45983;
  double t53298;
  double t53361;
  double t53440;
  double t53449;
  double t53452;
  double t53456;
  double t53508;
  double t53520;
  double t53529;
  double t53559;
  double t53588;
  double t53595;
  double t48253;
  double t48630;
  double t48637;
  double t48765;
  double t49527;
  double t49760;
  double t49984;
  double t55192;
  double t55208;
  double t55292;
  double t50245;
  double t50254;
  double t50286;
  double t50638;
  double t50731;
  double t50734;
  double t50735;
  double t50753;
  double t55311;
  double t55314;
  double t55316;
  double t51189;
  double t51190;
  double t51074;
  double t51183;
  double t51192;
  double t51256;
  double t51266;
  double t51477;
  double t51487;
  double t51285;
  double t51352;
  double t51496;
  double t51501;
  double t51608;
  double t52066;
  double t52070;
  double t52267;
  double t52274;
  double t52298;
  double t52374;
  double t55321;
  double t55331;
  double t55342;
  double t54100;
  double t54103;
  double t54104;
  double t54266;
  double t54273;
  double t54349;
  double t54423;
  double t54426;
  double t54524;
  double t54556;
  double t54612;
  double t54656;
  double t54790;
  double t54797;
  double t54800;
  double t54825;
  double t54832;
  double t54837;
  double t54848;
  double t54853;
  double t54854;
  double t54866;
  double t54871;
  double t54877;
  double t55503;
  double t55504;
  double t55506;
  double t55511;
  double t55513;
  double t55515;
  double t55573;
  double t55602;
  double t55609;
  double t55642;
  double t55672;
  double t55701;
  double t55391;
  double t55392;
  double t55396;
  double t55467;
  double t55468;
  double t55469;
  double t55711;
  double t55713;
  double t55715;
  double t20012;
  double t20015;
  double t20062;
  double t24059;
  double t24099;
  double t24107;
  double t30738;
  double t33219;
  double t33506;
  double t56763;
  double t56765;
  double t56796;
  double t56882;
  double t56883;
  double t56886;
  double t56888;
  double t56890;
  double t56541;
  double t56542;
  double t56551;
  double t56738;
  double t56740;
  double t56741;
  double t56683;
  double t56685;
  double t56732;
  double t56751;
  double t56755;
  double t56757;
  double t56762;
  double t56894;
  double t56899;
  double t56918;
  double t56919;
  double t56920;
  double t56926;
  double t56927;
  double t56928;
  double t50774;
  double t50993;
  double t50997;
  double t57029;
  double t57030;
  double t57031;
  double t57033;
  double t49989;
  double t50133;
  double t50217;
  double t57131;
  double t57132;
  double t57134;
  double t57048;
  double t57092;
  double t57122;
  double t57148;
  double t57149;
  double t57150;
  double t57035;
  double t57123;
  double t57124;
  double t57128;
  double t57135;
  double t57137;
  double t57140;
  double t57141;
  double t57142;
  double t57144;
  double t57152;
  double t57158;
  double t57234;
  double t57235;
  double t57236;
  double t53095;
  double t53114;
  double t53117;
  double t56902;
  double t56923;
  double t56937;
  double t56970;
  double t56997;
  double t56998;
  double t57000;
  double t57583;
  double t57584;
  double t57586;
  double t57699;
  double t57700;
  double t57701;
  double t57251;
  double t57252;
  double t57253;
  double t57254;
  double t57259;
  double t57260;
  double t57261;
  double t57278;
  double t57359;
  double t57360;
  double t57361;
  double t57363;
  double t57401;
  double t57404;
  double t57413;
  double t57415;
  double t57441;
  double t57442;
  double t57468;
  double t57470;
  double t57506;
  double t57529;
  double t57534;
  double t57535;
  double t1642;
  double t3235;
  double t3236;
  double t57905;
  double t57906;
  double t57908;
  double t57676;
  double t57678;
  double t57679;
  double t57682;
  double t57929;
  double t57931;
  double t57934;
  double t51185;
  double t51272;
  double t51279;
  double t51469;
  double t51912;
  double t51988;
  double t58083;
  double t58084;
  double t58086;
  double t58121;
  double t58123;
  double t58125;
  double t58131;
  double t58133;
  double t58134;
  double t58082;
  double t58087;
  double t58111;
  double t58130;
  double t58135;
  double t58136;
  double t58139;
  double t58140;
  double t58142;
  double t57007;
  double t57008;
  double t57009;
  double t57034;
  double t57125;
  double t57240;
  double t57241;
  double t57346;
  double t57350;
  double t57377;
  double t57380;
  double t57423;
  double t57427;
  double t57472;
  double t57473;
  double t58361;
  double t58362;
  double t57595;
  double t57673;
  double t58452;
  double t58453;
  double t58454;
  double t57697;
  double t57698;
  double t58524;
  double t58525;
  double t58526;
  double t57716;
  double t57718;
  double t58608;
  double t58614;
  double t58626;
  double t57736;
  double t57737;
  double t58851;
  double t58859;
  double t58871;
  double t57778;
  double t57779;
  double t59958;
  double t60308;
  double t60426;
  double t57816;
  double t57818;
  double t60642;
  double t60748;
  double t60755;
  double t57837;
  double t57838;
  double t58198;
  double t58207;
  double t58208;
  double t58265;
  double t58269;
  double t58222;
  double t58240;
  double t58120;
  double t58149;
  double t58150;
  double t58385;
  double t58458;
  double t58511;
  double t58531;
  double t58648;
  double t58658;
  double t59423;
  double t59432;
  double t60600;
  double t60602;
  double t63302;
  double t63325;
  double t63468;
  double t63477;
  double t63497;
  double t63549;
  double t63552;
  double t63562;
  double t63566;
  double t63574;
  double t64343;
  double t64346;
  double t64454;
  double t64455;
  double t62718;
  double t62856;
  double t62857;
  double t62908;
  double t62920;
  double t62944;
  double t62947;
  double t63114;
  double t63214;
  double t63226;
  t3239 = Cos(var1[20]);
  t3246 = -1.*t3239;
  t3468 = 1. + t3246;
  t8270 = Sin(var1[20]);
  t4261 = -9.e-12*t3468;
  t4299 = 1. + t4261;
  t4393 = -3.e-6*t4299;
  t4558 = 3.e-6*t3468;
  t4612 = t4393 + t4558;
  t12663 = 4.e-7*var1[20];
  t12857 = 9.e-12*t3468;
  t12920 = -1. + t12857;
  t12931 = 0.1*t12920;
  t12968 = 3.000000000027e-7*t3468;
  t12981 = 9.e-18*t8270;
  t13072 = t12663 + t12931 + t12968 + t12981;
  t13202 = -1.2e-12*var1[20];
  t13943 = 0.1000003000009*t3468;
  t14876 = 3.e-12*t8270;
  t15107 = t13202 + t13943 + t14876;
  t5332 = 1.000000000009*t3468;
  t6270 = -1. + t5332;
  t6814 = 0.2*t6270;
  t7299 = -0.2000000000048*t3468;
  t8342 = 0.1000003000009*t8270;
  t11161 = t6814 + t7299 + t8342;
  t2504 = Cos(var1[18]);
  t203 = Cos(var1[4]);
  t332 = Cos(var1[5]);
  t19970 = 3.e-6*t3239;
  t19984 = t4558 + t19970;
  t738 = Sin(var1[18]);
  t2902 = Sin(var1[4]);
  t4907 = -1.000000000009*t3468;
  t5287 = 1. + t4907;
  t12614 = t5287*t11161;
  t13156 = 3.e-6*t13072*t8270;
  t15219 = t15107*t8270;
  t17084 = t12857 + t3246;
  t15714 = -1.*t4612*t13072;
  t18849 = -1.*t17084*t15107;
  t19189 = -1.000000000009*t11161*t8270;
  t3653 = -3.e-6*t3468;
  t3676 = -3.e-6*t3239;
  t3955 = t3653 + t3676;
  t4214 = 0.2*t3955;
  t15230 = t12614 + t13156 + t15219;
  t15408 = t4612*t15230;
  t19917 = t15714 + t18849 + t19189;
  t19919 = 3.e-6*t8270*t19917;
  t19969 = t4214 + t15408 + t19919;
  t36479 = Sin(var1[5]);
  t20073 = t4261 + t3239;
  t20076 = 0.2*t20073;
  t21552 = -4.e-7*var1[20];
  t21834 = 0.1*t4299;
  t22002 = -3.000000000027e-7*t3468;
  t22006 = t19984*t15107;
  t22030 = -9.e-18*t8270;
  t22358 = t21552 + t21834 + t22002 + t22006 + t22030;
  t22609 = 3.e-6*t22358*t8270;
  t22621 = t20076 + t12614 + t22609 + t13156 + t15219;
  t24396 = -1.*t19984*t15107;
  t24903 = t12663 + t12931 + t12968 + t24396 + t12981;
  t26309 = t4612*t24903;
  t26922 = -0.2*t8270;
  t27535 = t15714 + t26309 + t18849 + t26922 + t19189;
  t46861 = 0.1000003000009*t3239;
  t47245 = -3.000000000027e-12*t8270;
  t47251 = t46861 + t47245;
  t46276 = 9.e-18*t3239;
  t46481 = 3.000009000027e-7*t8270;
  t46483 = 4.e-7 + t46276 + t46481;
  t46489 = 3.e-12*t3239;
  t46495 = -1.2e-12 + t46489 + t8342;
  t49112 = t5287*t47251;
  t49246 = 3.e-6*t3239*t13072;
  t49251 = t3239*t15107;
  t49319 = 3.e-6*t46483*t8270;
  t49358 = t46495*t8270;
  t23014 = t2504*t17084;
  t23918 = -1.000000000009*t738*t8270;
  t24044 = t23014 + t23918;
  t42575 = t17084*t738;
  t43161 = 1.000000000009*t2504*t8270;
  t44321 = t42575 + t43161;
  t24092 = -1.000000000009*t2504*t8270;
  t51164 = 1.000000000009*t738*t8270;
  t46485 = -1.*t4612*t46483;
  t46487 = -1.000000000009*t3239*t11161;
  t46496 = -1.*t17084*t46495;
  t47473 = -1.000000000009*t47251*t8270;
  t47530 = -3.000000000027e-6*t13072*t8270;
  t47848 = -1.000000000009*t15107*t8270;
  t27754 = -1.*t5287*t738;
  t27814 = t2504*t8270;
  t27967 = t27754 + t27814;
  t44385 = t2504*t5287;
  t44387 = t738*t8270;
  t44746 = t44385 + t44387;
  t50106 = t19984*t332*t738;
  t50129 = t50106 + t36479;
  t50802 = t332*t44321;
  t50805 = -1.*t4612*t36479;
  t50983 = t50802 + t50805;
  t53109 = t332*t44746;
  t53110 = -3.e-6*t8270*t36479;
  t53111 = t53109 + t53110;
  t53819 = Sin(var1[3]);
  t54171 = Cos(var1[3]);
  t31547 = -1.*t2504*t5287;
  t32861 = -1.*t738*t8270;
  t33131 = t31547 + t32861;
  t24063 = -1.*t17084*t738;
  t24094 = t24063 + t24092;
  t42027 = -1.*t19984*t738*t36479;
  t42116 = t332 + t42027;
  t42233 = -1.*t4612*t332;
  t44366 = -1.*t44321*t36479;
  t44368 = t42233 + t44366;
  t44378 = -3.e-6*t332*t8270;
  t45593 = -1.*t44746*t36479;
  t45983 = t44378 + t45593;
  t53298 = -1.*t203*t738;
  t53361 = -1.*t2504*t332*t2902;
  t53440 = t53298 + t53361;
  t53449 = t2504*t19984*t203;
  t53452 = -1.*t2902*t50129;
  t53456 = t53449 + t53452;
  t53508 = t203*t24044;
  t53520 = -1.*t2902*t50983;
  t53529 = t53508 + t53520;
  t53559 = t203*t27967;
  t53588 = -1.*t2902*t53111;
  t53595 = t53559 + t53588;
  t48253 = t46485 + t46487 + t46496 + t47473 + t47530 + t47848;
  t48630 = 3.e-6*t8270*t48253;
  t48637 = 3.000000000027e-6*t8270*t15230;
  t48765 = 3.e-6*t3239*t19917;
  t49527 = t49112 + t49246 + t49251 + t49319 + t19189 + t49358;
  t49760 = t4612*t49527;
  t49984 = t48630 + t48637 + t48765 + t49760;
  t55192 = -1.*t332;
  t55208 = t19984*t738*t36479;
  t55292 = t55192 + t55208;
  t50245 = 3.e-6*t3239*t22358;
  t50254 = -0.2000000000018*t8270;
  t50286 = -9.e-18*t3239;
  t50638 = t19984*t46495;
  t50731 = -3.000009000027e-7*t8270;
  t50734 = -4.e-7 + t50286 + t50638 + t50731;
  t50735 = 3.e-6*t50734*t8270;
  t50753 = t49112 + t50245 + t49246 + t49251 + t50254 + t50735 + t49319 + t19189 + t49358;
  t55311 = t4612*t332;
  t55314 = t44321*t36479;
  t55316 = t55311 + t55314;
  t51189 = t3239*t738;
  t51190 = t51189 + t24092;
  t51074 = t2504*t3239;
  t51183 = t51074 + t51164;
  t51192 = t332*t51190;
  t51256 = -3.e-6*t3239*t36479;
  t51266 = t51192 + t51256;
  t51477 = 1.000000000009*t2504*t3239;
  t51487 = t51477 + t51164;
  t51285 = -1.000000000009*t3239*t738;
  t51352 = t51285 + t43161;
  t51496 = t332*t51487;
  t51501 = -3.000000000027e-6*t8270*t36479;
  t51608 = t51496 + t51501;
  t52066 = -0.2*t3239;
  t52070 = -1.*t19984*t46495;
  t52267 = 4.e-7 + t46276 + t52070 + t46481;
  t52274 = t4612*t52267;
  t52298 = 3.000000000027e-6*t24903*t8270;
  t52374 = t52066 + t46485 + t52274 + t46487 + t46496 + t47473 + t47530 + t52298 + t47848;
  t55321 = 3.e-6*t332*t8270;
  t55331 = t44746*t36479;
  t55342 = t55321 + t55331;
  t54100 = -1.*t19984*t203*t738;
  t54103 = -1.*t2504*t19984*t332*t2902;
  t54104 = t54100 + t54103;
  t54266 = -1.*t2504*t203;
  t54273 = t332*t738*t2902;
  t54349 = t54266 + t54273;
  t54423 = t203*t33131;
  t54426 = -1.*t332*t27967*t2902;
  t54524 = t54423 + t54426;
  t54556 = t203*t24094;
  t54612 = -1.*t332*t24044*t2902;
  t54656 = t54556 + t54612;
  t54790 = -1.*t2504*t203*t332;
  t54797 = t738*t2902;
  t54800 = t54790 + t54797;
  t54825 = -1.*t2504*t19984*t2902;
  t54832 = -1.*t203*t50129;
  t54837 = t54825 + t54832;
  t54848 = -1.*t24044*t2902;
  t54853 = -1.*t203*t50983;
  t54854 = t54848 + t54853;
  t54866 = -1.*t27967*t2902;
  t54871 = -1.*t203*t53111;
  t54877 = t54866 + t54871;
  t55503 = 3.e-6*t3239*t332;
  t55504 = t51190*t36479;
  t55506 = t55503 + t55504;
  t55511 = t203*t51183;
  t55513 = -1.*t2902*t51266;
  t55515 = t55511 + t55513;
  t55573 = 3.000000000027e-6*t332*t8270;
  t55602 = t51487*t36479;
  t55609 = t55573 + t55602;
  t55642 = t203*t51352;
  t55672 = -1.*t2902*t51608;
  t55701 = t55642 + t55672;
  t55391 = t54171*t55292;
  t55392 = -1.*t53819*t53456;
  t55396 = t55391 + t55392;
  t55467 = t54171*t55316;
  t55468 = -1.*t53819*t53529;
  t55469 = t55467 + t55468;
  t55711 = t54171*t55342;
  t55713 = -1.*t53819*t53595;
  t55715 = t55711 + t55713;
  t20012 = t2504*t19984*t203*t332;
  t20015 = -1.*t19984*t738*t2902;
  t20062 = t20012 + t20015;
  t24059 = t203*t332*t24044;
  t24099 = t24094*t2902;
  t24107 = t24059 + t24099;
  t30738 = t203*t332*t27967;
  t33219 = t33131*t2902;
  t33506 = t30738 + t33219;
  t56763 = -1. + t2504;
  t56765 = 0.2*t56763;
  t56796 = -0.2*t2504;
  t56882 = 0.05*t738;
  t56883 = t56765 + t56796 + t56882;
  t56886 = t332*t56883;
  t56888 = 0.1*t36479;
  t56890 = t56886 + t56888;
  t56541 = t203*t332*t738;
  t56542 = t2504*t2902;
  t56551 = t56541 + t56542;
  t56738 = 0.05*t2504*t203*t332;
  t56740 = -0.05*t738*t2902;
  t56741 = t56738 + t56740;
  t56683 = -0.05*t203*t738;
  t56685 = -0.05*t2504*t332*t2902;
  t56732 = t56683 + t56685;
  t56751 = t2504*t203*t332;
  t56755 = -1.*t738*t2902;
  t56757 = t56751 + t56755;
  t56762 = 0.05*t2504*t2902;
  t56894 = t203*t56890;
  t56899 = t56762 + t56894;
  t56918 = 0.05*t2504*t203;
  t56919 = -1.*t2902*t56890;
  t56920 = t56918 + t56919;
  t56926 = -0.1*t332;
  t56927 = t56883*t36479;
  t56928 = t56926 + t56927;
  t50774 = t24044*t2902;
  t50993 = t203*t50983;
  t50997 = t50774 + t50993;
  t57029 = -0.2*t738;
  t57030 = t2504*t15107;
  t57031 = -1.*t738*t11161;
  t57033 = t57029 + t57030 + t57031;
  t49989 = t2504*t19984*t2902;
  t50133 = t203*t50129;
  t50217 = t49989 + t50133;
  t57131 = -1.*t738*t15107;
  t57132 = -1.*t2504*t11161;
  t57134 = t56796 + t57131 + t57132;
  t57048 = t738*t15107;
  t57092 = t2504*t11161;
  t57122 = t56765 + t57048 + t57092;
  t57148 = t332*t57122;
  t57149 = -1.*t13072*t36479;
  t57150 = t57148 + t57149;
  t57035 = t332*t13072;
  t57123 = t57122*t36479;
  t57124 = t57035 + t57123;
  t57128 = t203*t332*t57033;
  t57135 = t57134*t2902;
  t57137 = t57128 + t57135;
  t57140 = t203*t57134;
  t57141 = -1.*t332*t57033*t2902;
  t57142 = t57140 + t57141;
  t57144 = t57033*t2902;
  t57152 = t203*t57150;
  t57158 = t57144 + t57152;
  t57234 = t203*t57033;
  t57235 = -1.*t2902*t57150;
  t57236 = t57234 + t57235;
  t53095 = t27967*t2902;
  t53114 = t203*t53111;
  t53117 = t53095 + t53114;
  t56902 = t203*t56899*t36479;
  t56923 = -1.*t2902*t56920*t36479;
  t56937 = -1.*t332*t56928;
  t56970 = t56902 + t56923 + t56937;
  t56997 = t2504*t203;
  t56998 = -1.*t332*t738*t2902;
  t57000 = t56997 + t56998;
  t57583 = 0.1*t332;
  t57584 = -1.*t56883*t36479;
  t57586 = t57583 + t57584;
  t57699 = -1.*t332*t13072;
  t57700 = -1.*t57122*t36479;
  t57701 = t57699 + t57700;
  t57251 = -1.*t55292*t57124;
  t57252 = -1.*t50217*t57158;
  t57253 = -1.*t53456*t57236;
  t57254 = t57251 + t57252 + t57253;
  t57259 = t57124*t55316;
  t57260 = t50997*t57158;
  t57261 = t53529*t57236;
  t57278 = t57259 + t57260 + t57261;
  t57359 = t55292*t57124;
  t57360 = t50217*t57158;
  t57361 = t53456*t57236;
  t57363 = t57359 + t57360 + t57361;
  t57401 = -1.*t57124*t55342;
  t57404 = -1.*t57158*t53117;
  t57413 = -1.*t57236*t53595;
  t57415 = t57401 + t57404 + t57413;
  t57441 = -1.*t57124*t55316;
  t57442 = -1.*t50997*t57158;
  t57468 = -1.*t53529*t57236;
  t57470 = t57441 + t57442 + t57468;
  t57506 = t57124*t55342;
  t57529 = t57158*t53117;
  t57534 = t57236*t53595;
  t57535 = t57506 + t57529 + t57534;
  t1642 = -1.*t203*t332*t738;
  t3235 = -1.*t2504*t2902;
  t3236 = t1642 + t3235;
  t57905 = -0.05*t2504*t2902;
  t57906 = -1.*t203*t56890;
  t57908 = t57905 + t57906;
  t57676 = t56551*t56899;
  t57678 = t57000*t56920;
  t57679 = t738*t36479*t56928;
  t57682 = t57676 + t57678 + t57679;
  t57929 = -1.*t57033*t2902;
  t57931 = -1.*t203*t57150;
  t57934 = t57929 + t57931;
  t51185 = t51183*t2902;
  t51272 = t203*t51266;
  t51279 = t51185 + t51272;
  t51469 = t51352*t2902;
  t51912 = t203*t51608;
  t51988 = t51469 + t51912;
  t58083 = t2504*t47251;
  t58084 = t738*t46495;
  t58086 = t58083 + t58084;
  t58121 = -1.*t738*t47251;
  t58123 = t2504*t46495;
  t58125 = t58121 + t58123;
  t58131 = t332*t58086;
  t58133 = -1.*t46483*t36479;
  t58134 = t58131 + t58133;
  t58082 = t332*t46483;
  t58087 = t58086*t36479;
  t58111 = t58082 + t58087;
  t58130 = t58125*t2902;
  t58135 = t203*t58134;
  t58136 = t58130 + t58135;
  t58139 = t203*t58125;
  t58140 = -1.*t2902*t58134;
  t58142 = t58139 + t58140;
  t57007 = Power(t36479,2);
  t57008 = 0.05*t2504*t738*t57007;
  t57009 = t2504*t36479*t56928;
  t57034 = -1.*t57033*t36479*t55292;
  t57125 = -1.*t2504*t19984*t36479*t57124;
  t57240 = t24044*t36479*t57124;
  t57241 = t57033*t36479*t55316;
  t57346 = t57033*t36479*t55292;
  t57350 = t2504*t19984*t36479*t57124;
  t57377 = -1.*t27967*t36479*t57124;
  t57380 = -1.*t57033*t36479*t55342;
  t57423 = -1.*t24044*t36479*t57124;
  t57427 = -1.*t57033*t36479*t55316;
  t57472 = t27967*t36479*t57124;
  t57473 = t57033*t36479*t55342;
  t58361 = t56890*t36479;
  t58362 = t58361 + t56937;
  t57595 = t332*t738*t56928;
  t57673 = t36479*t56928;
  t58452 = -1.*t2504*t19984*t57033;
  t58453 = -1.*t50129*t57150;
  t58454 = t58452 + t57251 + t58453;
  t57697 = -1.*t50129*t57124;
  t57698 = -1.*t55292*t57150;
  t58524 = t57033*t24044;
  t58525 = t50983*t57150;
  t58526 = t58524 + t58525 + t57259;
  t57716 = t50983*t57124;
  t57718 = t57150*t55316;
  t58608 = t2504*t19984*t57033;
  t58614 = t50129*t57150;
  t58626 = t58608 + t57359 + t58614;
  t57736 = t50129*t57124;
  t57737 = t55292*t57150;
  t58851 = -1.*t57033*t27967;
  t58859 = -1.*t57150*t53111;
  t58871 = t58851 + t58859 + t57401;
  t57778 = -1.*t57124*t53111;
  t57779 = -1.*t57150*t55342;
  t59958 = -1.*t57033*t24044;
  t60308 = -1.*t50983*t57150;
  t60426 = t59958 + t60308 + t57441;
  t57816 = -1.*t50983*t57124;
  t57818 = -1.*t57150*t55316;
  t60642 = t57033*t27967;
  t60748 = t57150*t53111;
  t60755 = t60642 + t60748 + t57506;
  t57837 = t57124*t53111;
  t57838 = t57150*t55342;
  t58198 = t55292*t58111;
  t58207 = -1.*t57124*t55506;
  t58208 = -1.*t58111*t55342;
  t58265 = t57124*t55506;
  t58269 = t58111*t55342;
  t58222 = -1.*t58111*t55316;
  t58240 = -1.*t57124*t55609;
  t58120 = -1.*t55292*t58111;
  t58149 = t58111*t55316;
  t58150 = t57124*t55609;
  t58385 = -1.*t2504*t19984*t57134;
  t58458 = t57033*t24094;
  t58511 = t57134*t24044;
  t58531 = t2504*t19984*t57134;
  t58648 = -1.*t57134*t27967;
  t58658 = -1.*t57033*t33131;
  t59423 = -1.*t57033*t24094;
  t59432 = -1.*t57134*t24044;
  t60600 = t57134*t27967;
  t60602 = t57033*t33131;
  t63302 = -1.*t19984*t738*t57122;
  t63325 = t12663 + t12931 + t12968 + t63302 + t58452 + t12981;
  t63468 = t4612*t13072;
  t63477 = t57122*t44321;
  t63497 = t63468 + t63477 + t58524;
  t63549 = t19984*t738*t57122;
  t63552 = t21552 + t21834 + t22002 + t63549 + t58608 + t22030;
  t63562 = -3.e-6*t13072*t8270;
  t63566 = -1.*t57122*t44746;
  t63574 = t63562 + t58851 + t63566;
  t64343 = -1.*t57122*t44321;
  t64346 = t15714 + t64343 + t59958;
  t64454 = t57122*t44746;
  t64455 = t13156 + t60642 + t64454;
  t62718 = t2504*t19984*t58125;
  t62856 = -1.*t58125*t27967;
  t62857 = -1.*t57033*t51183;
  t62908 = t58125*t27967;
  t62920 = t57033*t51183;
  t62944 = -1.*t57033*t51352;
  t62947 = -1.*t58125*t24044;
  t63114 = -1.*t2504*t19984*t58125;
  t63214 = t57033*t51352;
  t63226 = t58125*t24044;
  p_output1[0]=var2[18]*(-0.5*(0.0013*t53440 + 0.05186*t19969*t53456 + 0.05186*t22621*t53529 + 0.05186*t27535*t53595)*var2[4] - 0.5*(-0.0013*t203*t2504*t36479 + 0.05186*t19969*t203*t42116 + 0.05186*t203*t22621*t44368 + 0.05186*t203*t27535*t45983)*var2[5] - 0.5*(0.05186*t19969*t20062 + 0.05186*t22621*t24107 + 0.0013*t3236 + 0.05186*t27535*t33506)*var2[18] - 0.5*(0.05186*t49984*t50217 + 0.05186*t50753*t50997 + 0.05186*t27535*t51279 + 0.05186*t22621*t51988 + 0.05186*t52374*t53117)*var2[20]);
  p_output1[1]=var2[18]*(-0.5*(0.0013*(-1.*t2504*t36479*t53819 - 1.*t53440*t54171) + 0.05186*t19969*(-1.*t53456*t54171 - 1.*t53819*t55292) + 0.05186*t22621*(-1.*t53529*t54171 - 1.*t53819*t55316) + 0.05186*t27535*(-1.*t53595*t54171 - 1.*t53819*t55342))*var2[3] - 0.5*(-0.0013*t53819*t54800 - 0.05186*t19969*t53819*t54837 - 0.05186*t22621*t53819*t54854 - 0.05186*t27535*t53819*t54877)*var2[4] - 0.5*(0.0013*(-1.*t2504*t2902*t36479*t53819 + t2504*t332*t54171) + 0.05186*t19969*(t2902*t42116*t53819 + t50129*t54171) + 0.05186*t22621*(t2902*t44368*t53819 + t50983*t54171) + 0.05186*t27535*(t2902*t45983*t53819 + t53111*t54171))*var2[5] - 0.5*(0.05186*t19969*(-1.*t53819*t54104 + t19984*t2504*t36479*t54171) + 0.05186*t27535*(t27967*t36479*t54171 - 1.*t53819*t54524) + 0.05186*t22621*(t24044*t36479*t54171 - 1.*t53819*t54656) + 0.0013*(-1.*t53819*t54349 - 1.*t36479*t54171*t738))*var2[18] - 0.5*(0.05186*t49984*t55396 + 0.05186*t50753*t55469 + 0.05186*t27535*(t54171*t55506 - 1.*t53819*t55515) + 0.05186*t22621*(t54171*t55609 - 1.*t53819*t55701) + 0.05186*t52374*t55715)*var2[20]);
  p_output1[2]=var2[18]*(-0.5*(0.0013*(-1.*t53440*t53819 + t2504*t36479*t54171) + 0.05186*t19969*t55396 + 0.05186*t22621*t55469 + 0.05186*t27535*t55715)*var2[3] - 0.5*(0.0013*t54171*t54800 + 0.05186*t19969*t54171*t54837 + 0.05186*t22621*t54171*t54854 + 0.05186*t27535*t54171*t54877)*var2[4] - 0.5*(0.0013*(t2504*t332*t53819 + t2504*t2902*t36479*t54171) + 0.05186*t19969*(t50129*t53819 - 1.*t2902*t42116*t54171) + 0.05186*t22621*(t50983*t53819 - 1.*t2902*t44368*t54171) + 0.05186*t27535*(t53111*t53819 - 1.*t2902*t45983*t54171))*var2[5] - 0.5*(0.05186*t19969*(t19984*t2504*t36479*t53819 + t54104*t54171) + 0.05186*t27535*(t27967*t36479*t53819 + t54171*t54524) + 0.05186*t22621*(t24044*t36479*t53819 + t54171*t54656) + 0.0013*(t54171*t54349 - 1.*t36479*t53819*t738))*var2[18] - 0.5*(0.05186*t49984*(t53456*t54171 + t53819*t55292) + 0.05186*t50753*(t53529*t54171 + t53819*t55316) + 0.05186*t52374*(t53595*t54171 + t53819*t55342) + 0.05186*t27535*(t53819*t55506 + t54171*t55515) + 0.05186*t22621*(t53819*t55609 + t54171*t55701))*var2[20]);
  p_output1[3]=var2[18]*(-0.5*(0.000046*t2902*t36479 - 0.000245*t53456 + 0.000245*t4612*t53529 + 0.0013*(t56970*t57000 + t2902*t36479*t57682 + t56551*(-1.*t2902*t36479*t56899 - 1.*t2902*t36479*t57908) - 1.*t203*t36479*(t3236*t56920 + t56551*t56920 + t56899*t57000 + t57000*t57908)) + 0.05186*t27535*(t53529*t57254 + t53456*t57278 + t50997*(-1.*t53456*t57158 - 1.*t50217*t57236 - 1.*t54837*t57236 - 1.*t53456*t57934) + t50217*(t53529*t57158 + t50997*t57236 + t54854*t57236 + t53529*t57934)) + 0.05186*t22621*(t53595*t57363 + t53456*t57415 + t53117*(t53456*t57158 + t50217*t57236 + t54837*t57236 + t53456*t57934) + t50217*(-1.*t53595*t57158 - 1.*t53117*t57236 - 1.*t54877*t57236 - 1.*t53595*t57934)) + 0.05186*t19969*(t53595*t57470 + t53529*t57535 + t53117*(-1.*t53529*t57158 - 1.*t50997*t57236 - 1.*t54854*t57236 - 1.*t53529*t57934) + t50997*(t53595*t57158 + t53117*t57236 + t54877*t57236 + t53595*t57934)) + 6.e-12*t53595*t8270)*var2[4] - 0.5*(-0.000046*t203*t332 - 0.000245*t203*t42116 + 0.000245*t203*t44368*t4612 + 0.05186*t27535*(t203*t44368*t57254 + t203*t42116*t57278 + t50997*(-1.*t203*t42116*t57158 + t2902*t42116*t57236 + t57697 + t57698 - 1.*t203*t50217*t57701 + t2902*t53456*t57701) + t50217*(t203*t44368*t57158 - 1.*t2902*t44368*t57236 + t203*t50997*t57701 - 1.*t2902*t53529*t57701 + t57716 + t57718)) + 0.05186*t22621*(t203*t45983*t57363 + t203*t42116*t57415 + t53117*(t203*t42116*t57158 - 1.*t2902*t42116*t57236 + t203*t50217*t57701 - 1.*t2902*t53456*t57701 + t57736 + t57737) + t50217*(-1.*t203*t45983*t57158 + t2902*t45983*t57236 - 1.*t203*t53117*t57701 + t2902*t53595*t57701 + t57778 + t57779)) + 0.05186*t19969*(t203*t45983*t57470 + t203*t44368*t57535 + t53117*(-1.*t203*t44368*t57158 + t2902*t44368*t57236 - 1.*t203*t50997*t57701 + t2902*t53529*t57701 + t57816 + t57818) + t50997*(t203*t45983*t57158 - 1.*t2902*t45983*t57236 + t203*t53117*t57701 - 1.*t2902*t53595*t57701 + t57837 + t57838)) + 0.0013*(t56551*(-1.*t332*t56890 + t203*t332*t56899 - 1.*t2902*t332*t56920 + Power(t203,2)*t36479*t57586 + Power(t2902,2)*t36479*t57586 + t57673) - 1.*t203*t332*t57682 - 1.*t203*t36479*t56970*t738 - 1.*t203*t36479*(t203*t56551*t57586 - 1.*t2902*t57000*t57586 + t57595 + t36479*t56890*t738 - 1.*t203*t36479*t56899*t738 + t2902*t36479*t56920*t738)) + 6.e-12*t203*t45983*t8270)*var2[5] - 0.5*(-0.000245*t20062 + 0.000245*t24107*t4612 + 0.0013*(t56551*(-0.05*t2504*t332*t36479 - 1.*t2902*t36479*t56732 + t203*t36479*t56741) + t56757*t56970 - 1.*t203*t36479*(t56551*t56741 + t56757*t56899 + t53440*t56920 + t56732*t57000 + t57008 + t57009)) + 0.05186*t27535*(t50997*(t57034 + t57125 - 1.*t50217*t57137 - 1.*t53456*t57142 - 1.*t20062*t57158 - 1.*t54104*t57236) + t50217*(t50997*t57137 + t53529*t57142 + t24107*t57158 + t54656*t57236 + t57240 + t57241) + t24107*t57254 + t20062*t57278) + 0.05186*t22621*(t53117*(t50217*t57137 + t53456*t57142 + t20062*t57158 + t54104*t57236 + t57346 + t57350) + t33506*t57363 + t50217*(-1.*t53117*t57137 - 1.*t53595*t57142 - 1.*t33506*t57158 - 1.*t54524*t57236 + t57377 + t57380) + t20062*t57415) + 0.05186*t19969*(t53117*(-1.*t50997*t57137 - 1.*t53529*t57142 - 1.*t24107*t57158 - 1.*t54656*t57236 + t57423 + t57427) + t33506*t57470 + t50997*(t53117*t57137 + t53595*t57142 + t33506*t57158 + t54524*t57236 + t57472 + t57473) + t24107*t57535) + 6.e-12*t33506*t8270)*var2[18] - 0.5*(0.000245*t4612*t51988 + 6.e-12*t3239*t53117 + 0.05186*t52374*(t50997*t57254 + t50217*t57278) + 0.05186*t50753*(t53117*t57363 + t50217*t57415) + 0.05186*t49984*(t53117*t57470 + t50997*t57535) + 0.05186*t27535*(t51988*t57254 + t50997*(t58120 - 1.*t50217*t58136 - 1.*t53456*t58142) + t50217*(t51988*t57158 + t55701*t57236 + t50997*t58136 + t53529*t58142 + t58149 + t58150)) + 0.05186*t22621*(t51279*t57363 + t53117*(t50217*t58136 + t53456*t58142 + t58198) + t50217*(-1.*t51279*t57158 - 1.*t55515*t57236 - 1.*t53117*t58136 - 1.*t53595*t58142 + t58207 + t58208)) + 0.05186*t19969*(t51279*t57470 + t51988*t57535 + t53117*(-1.*t51988*t57158 - 1.*t55701*t57236 - 1.*t50997*t58136 - 1.*t53529*t58142 + t58222 + t58240) + t50997*(t51279*t57158 + t55515*t57236 + t53117*t58136 + t53595*t58142 + t58265 + t58269)) + 7.35000000006615e-10*t50997*t8270 + 6.e-12*t51279*t8270)*var2[20]);
  p_output1[4]=var2[18]*(-0.5*(-0.000046*t36479 - 0.000245*t50129 + 0.000245*t4612*t50983 + 0.05186*t27535*(t55316*(-1.*t42116*t57150 + t57697 + t57698 - 1.*t50129*t57701) + t55292*(t44368*t57150 + t50983*t57701 + t57716 + t57718) + t50983*t58454 + t50129*t58526) + 0.05186*t22621*(t55342*(t42116*t57150 + t50129*t57701 + t57736 + t57737) + t55292*(-1.*t45983*t57150 - 1.*t53111*t57701 + t57778 + t57779) + t53111*t58626 + t50129*t58871) + 0.05186*t19969*(t55342*(-1.*t44368*t57150 - 1.*t50983*t57701 + t57816 + t57818) + t55316*(t45983*t57150 + t53111*t57701 + t57837 + t57838) + t53111*t60426 + t50983*t60755) + 0.0013*(t36479*(t36479*t57586 + t57673)*t738 + t332*t58362*t738 - 1.*t36479*(0.05*Power(t2504,2) + t57679 + t332*t56890*t738) + t332*(t57595 + t332*t57586*t738)) + 6.e-12*t53111*t8270)*var2[5] - 0.5*(-0.000245*t19984*t2504*t36479 + 0.000245*t24044*t36479*t4612 + 0.05186*t19969*(t55342*(-1.*t332*t50983*t57033 - 1.*t24044*t332*t57150 + t57423 + t57427 + t59423 + t59432) + t27967*t36479*t60426 + t55316*(t332*t53111*t57033 + t27967*t332*t57150 + t57472 + t57473 + t60600 + t60602) + t24044*t36479*t60755) + 0.0013*(t2504*t36479*t58362 + t332*(t2504*t332*t56890 + t57008 + t57009 - 0.1*t2504*t738 + 0.05*t2504*Power(t332,2)*t738)) + 0.05186*t22621*(t27967*t36479*t58626 + t55292*(-1.*t332*t53111*t57033 - 1.*t27967*t332*t57150 + t57377 + t57380 + t58648 + t58658) + t19984*t2504*t36479*t58871 + t55342*(t332*t50129*t57033 + t19984*t2504*t332*t57150 + t57346 + t57350 + t58531 - 1.*t19984*t57033*t738)) + 0.05186*t27535*(t24044*t36479*t58454 + t55292*(t332*t50983*t57033 + t24044*t332*t57150 + t57240 + t57241 + t58458 + t58511) + t19984*t2504*t36479*t58526 + t55316*(-1.*t332*t50129*t57033 + t57034 + t57125 - 1.*t19984*t2504*t332*t57150 + t58385 + t19984*t57033*t738)) + 6.e-12*t27967*t36479*t8270)*var2[18] - 0.5*(6.e-12*t3239*t55342 + 0.000245*t4612*t55609 + 0.05186*t52374*(t55316*t58454 + t55292*t58526) + 0.05186*t50753*(t55342*t58626 + t55292*t58871) + 0.05186*t49984*(t55342*t60426 + t55316*t60755) + 0.05186*t22621*(t55506*t58626 + t55342*(t50129*t58134 + t58198 + t62718) + t55292*(-1.*t51266*t57150 - 1.*t53111*t58134 + t58207 + t58208 + t62856 + t62857)) + 0.05186*t19969*(t55506*t60426 + t55609*t60755 + t55316*(t51266*t57150 + t53111*t58134 + t58265 + t58269 + t62908 + t62920) + t55342*(-1.*t51608*t57150 - 1.*t50983*t58134 + t58222 + t58240 + t62944 + t62947)) + 0.05186*t27535*(t55609*t58454 + t55316*(t58120 - 1.*t50129*t58134 + t63114) + t55292*(t51608*t57150 + t50983*t58134 + t58149 + t58150 + t63214 + t63226)) + 7.35000000006615e-10*t55316*t8270 + 6.e-12*t55506*t8270)*var2[20]);
  p_output1[5]=var2[18]*(-0.5*(0.000245*t24094*t4612 + 0.05186*t19969*(t27967*(-1.*t44321*t57033 - 1.*t24044*t57122 + t59423 + t59432) + t24044*(t44746*t57033 + t27967*t57122 + t60600 + t60602) + t33131*t64346 + t24094*t64455) - 0.00013*t738 + 0.000245*t19984*t738 + 0.05186*t27535*(t24044*(-1.*t19984*t2504*t57122 + t58385) + t19984*t2504*(t44321*t57033 + t24044*t57122 + t58458 + t58511) + t24094*t63325 - 1.*t19984*t63497*t738) + 0.05186*t22621*(t27967*(t19984*t2504*t57122 + t58531) + t19984*t2504*(-1.*t44746*t57033 - 1.*t27967*t57122 + t58648 + t58658) + t33131*t63552 - 1.*t19984*t63574*t738) + 6.e-12*t33131*t8270)*var2[18] - 0.5*(6.e-12*t27967*t3239 + 0.000245*t4612*t51352 + 0.05186*t52374*(t24044*t63325 + t19984*t2504*t63497) + 0.05186*t50753*(t27967*t63552 + t19984*t2504*t63574) + 0.05186*t49984*(t27967*t64346 + t24044*t64455) + 0.05186*t19969*(t24044*(t49246 + t49319 + t51190*t57122 + t44746*t58086 + t62908 + t62920) + t27967*(t46485 + t47530 - 1.*t51487*t57122 - 1.*t44321*t58086 + t62944 + t62947) + t51183*t64346 + t51352*t64455) + 7.35000000006615e-10*t24044*t8270 + 6.e-12*t51183*t8270 + 0.05186*t27535*(t51352*t63325 + t24044*(4.e-7 + t46276 + t46481 + t63114 - 1.*t19984*t58086*t738) + t19984*t2504*(t4612*t46483 + t51487*t57122 + t44321*t58086 + t63214 + t63226 + 3.000000000027e-6*t13072*t8270)) + 0.05186*t22621*(t51183*t63552 + t27967*(-4.e-7 + t50286 + t50731 + t62718 + t19984*t58086*t738) + t19984*t2504*(-3.e-6*t13072*t3239 - 1.*t51190*t57122 - 1.*t44746*t58086 + t62856 + t62857 - 3.e-6*t46483*t8270)))*var2[20]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=-0.5*(0.10372*t19969*t49984 + 0.10372*t22621*t50753 + 0.10372*t27535*t52374 + 3.6e-17*t3239*t8270 + 1.47000000001323e-9*t4612*t8270)*var2[18]*var2[20];
  p_output1[19]=0;
  p_output1[20]=-0.5*(-2.0744e-8*t49984 - 6.2232e-14*t50753 + 0.005186015558*t52374)*var2[18]*var2[20];
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec19_minitaur.hh"

namespace FrontStance
{

void Ce1_vec19_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
