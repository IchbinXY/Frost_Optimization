/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:05:46 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t428;
  double t574;
  double t817;
  double t861;
  double t443;
  double t21674;
  double t23537;
  double t24001;
  double t27315;
  double t27612;
  double t28873;
  double t29089;
  double t29437;
  double t29438;
  double t29457;
  double t25366;
  double t25429;
  double t25624;
  double t25954;
  double t29368;
  double t29461;
  double t29462;
  double t29463;
  double t29464;
  double t29465;
  double t29466;
  double t29598;
  double t29473;
  double t29588;
  double t29589;
  double t29591;
  double t29592;
  double t29593;
  double t29594;
  double t29599;
  double t27072;
  double t29478;
  double t29011;
  double t29531;
  double t29579;
  double t29606;
  double t29595;
  double t29708;
  double t29709;
  double t29711;
  double t29712;
  double t29718;
  double t29755;
  double t29766;
  double t29753;
  double t29710;
  double t29713;
  double t29714;
  double t29715;
  double t29716;
  double t29717;
  double t29719;
  double t29720;
  double t29721;
  double t29722;
  double t29723;
  double t29724;
  double t29734;
  double t29743;
  double t29744;
  double t29750;
  double t29752;
  double t29754;
  double t29756;
  double t29757;
  double t29758;
  double t29764;
  double t29767;
  double t29769;
  double t29770;
  double t29771;
  double t29772;
  double t29773;
  double t29774;
  double t29775;
  double t29776;
  double t29777;
  double t29778;
  double t29779;
  double t29780;
  double t28970;
  double t29394;
  double t29424;
  double t29458;
  double t29459;
  double t29467;
  double t29468;
  double t29479;
  double t29484;
  double t29485;
  double t29785;
  double t29786;
  double t29787;
  double t29596;
  double t29789;
  double t29790;
  double t29603;
  double t29604;
  double t29793;
  double t29794;
  double t29795;
  double t29690;
  double t29691;
  double t29692;
  double t29694;
  double t29698;
  double t29704;
  double t29783;
  double t29784;
  double t29788;
  double t29791;
  double t29792;
  double t29796;
  double t29797;
  double t29798;
  double t29799;
  double t29800;
  double t29801;
  double t29802;
  double t29803;
  double t29804;
  double t29805;
  double t29806;
  double t29807;
  double t29808;
  double t29809;
  double t29810;
  double t29811;
  double t29817;
  double t29818;
  double t29819;
  double t29820;
  double t29822;
  double t29823;
  double t29824;
  double t29825;
  double t29828;
  double t29829;
  double t29830;
  double t29831;
  double t29814;
  double t29815;
  double t29816;
  double t29821;
  double t29826;
  double t29827;
  double t29832;
  double t29833;
  double t29834;
  double t29835;
  double t29836;
  double t29837;
  double t29838;
  double t29839;
  double t29841;
  double t29843;
  double t29845;
  double t29846;
  double t29847;
  double t29848;
  double t29849;
  double t29850;
  double t29859;
  double t29868;
  double t29903;
  double t29961;
  double t29856;
  double t29857;
  double t29994;
  double t29995;
  double t29997;
  double t29998;
  double t29853;
  double t29854;
  double t29855;
  double t29858;
  double t29979;
  double t29987;
  double t29988;
  double t30003;
  double t30006;
  double t30010;
  double t30015;
  double t30016;
  double t30020;
  double t30023;
  double t30027;
  double t30028;
  double t30044;
  double t30049;
  double t30050;
  double t30051;
  double t30101;
  double t30138;
  double t30244;
  double t30246;
  double t30294;
  double t30295;
  double t30338;
  double t30340;
  double t30343;
  double t30411;
  double t30413;
  double t30424;
  double t30454;
  double t30455;
  double t30463;
  double t30480;
  double t30485;
  double t30506;
  double t30507;
  double t30523;
  double t30524;
  double t30530;
  double t30794;
  double t30796;
  double t30800;
  double t30801;
  double t30802;
  double t30803;
  double t30808;
  double t30809;
  double t30503;
  double t30504;
  double t30505;
  double t30508;
  double t30511;
  double t30522;
  double t30531;
  double t30532;
  double t30533;
  double t30535;
  double t30538;
  double t30540;
  double t30541;
  double t30542;
  double t30543;
  double t30544;
  double t30545;
  double t30546;
  double t30547;
  double t30550;
  double t30949;
  double t30950;
  double t30951;
  double t30952;
  double t30946;
  double t30947;
  double t30961;
  double t30991;
  double t30992;
  double t31049;
  double t30373;
  double t30410;
  double t30453;
  double t30458;
  double t30462;
  double t30486;
  double t30487;
  double t30488;
  double t30489;
  double t30490;
  double t30491;
  double t30492;
  double t30493;
  double t30494;
  double t30495;
  double t30496;
  double t30497;
  double t30498;
  double t30499;
  double t30500;
  double t30501;
  double t30242;
  double t30243;
  double t30793;
  double t31143;
  double t31156;
  double t31165;
  double t31166;
  double t30942;
  double t30944;
  double t30945;
  double t30948;
  double t30953;
  double t30954;
  double t30956;
  double t31050;
  double t31051;
  double t31053;
  double t31057;
  double t31058;
  double t31063;
  double t31064;
  double t31065;
  double t31066;
  double t31067;
  double t31068;
  double t31069;
  double t31070;
  double t31071;
  double t31072;
  double t30600;
  double t30607;
  double t30614;
  double t30639;
  double t30655;
  double t30687;
  double t30688;
  double t30689;
  double t30690;
  double t30691;
  double t30692;
  double t30733;
  double t30735;
  double t30745;
  double t30770;
  double t30771;
  double t30772;
  double t30777;
  double t30781;
  double t30208;
  double t30209;
  double t30210;
  double t30214;
  double t30219;
  double t30221;
  double t30225;
  double t30226;
  double t30227;
  double t30228;
  double t30229;
  double t30230;
  double t30231;
  double t30232;
  double t30234;
  double t30235;
  double t30236;
  double t30238;
  double t30239;
  double t31080;
  double t31081;
  double t31083;
  double t31084;
  double t31105;
  double t31106;
  double t31107;
  double t31108;
  double t31109;
  double t31110;
  double t31111;
  double t31112;
  double t31116;
  double t31120;
  double t31121;
  double t31126;
  double t31128;
  double t31129;
  double t31130;
  double t31216;
  double t31248;
  double t31277;
  double t31275;
  double t31276;
  double t31278;
  double t31279;
  double t31281;
  double t31282;
  double t31283;
  double t31286;
  double t31287;
  double t31288;
  double t31289;
  double t31291;
  double t31292;
  double t31293;
  double t31294;
  double t31297;
  double t31298;
  double t31299;
  double t31300;
  double t31316;
  double t31317;
  double t31318;
  double t31319;
  double t31320;
  double t31321;
  double t31322;
  double t31323;
  double t31324;
  double t31325;
  double t31326;
  double t31327;
  double t31328;
  double t31329;
  double t31330;
  double t31331;
  double t31332;
  double t31333;
  double t31334;
  double t31337;
  double t31338;
  double t31339;
  double t31342;
  double t31343;
  double t31344;
  double t31346;
  double t31347;
  double t31350;
  double t31351;
  double t31352;
  double t31340;
  double t31341;
  double t31345;
  double t31348;
  double t31349;
  double t31353;
  double t31354;
  double t31355;
  double t31356;
  double t31357;
  double t31358;
  double t31359;
  double t31360;
  double t31361;
  double t31362;
  double t31363;
  double t31364;
  double t31365;
  double t31366;
  double t31367;
  double t31368;
  double t31371;
  double t31372;
  double t31373;
  double t31375;
  double t31376;
  double t31377;
  double t31380;
  double t31381;
  double t31382;
  double t31383;
  double t31385;
  double t31386;
  double t31387;
  double t31388;
  double t31391;
  double t31392;
  double t31393;
  double t31394;
  double t31374;
  double t31378;
  double t31379;
  double t31384;
  double t31389;
  double t31390;
  double t31395;
  double t31396;
  double t31397;
  double t31398;
  double t31399;
  double t31400;
  double t31401;
  double t31402;
  double t31403;
  double t31404;
  double t31405;
  double t31406;
  double t31407;
  double t31410;
  double t31411;
  double t31424;
  double t31430;
  double t31431;
  double t31432;
  double t31433;
  double t31435;
  double t31436;
  double t31437;
  double t31438;
  double t31441;
  double t31442;
  double t31443;
  double t31444;
  double t31427;
  double t31428;
  double t31429;
  double t31434;
  double t31439;
  double t31440;
  double t31445;
  double t31446;
  double t31447;
  double t31448;
  double t31449;
  double t31450;
  double t31451;
  double t31452;
  double t31453;
  double t31454;
  double t31456;
  double t31457;
  double t31458;
  double t31459;
  double t31460;
  double t31461;
  double t31470;
  double t31471;
  double t31472;
  double t31473;
  double t31467;
  double t31468;
  double t31477;
  double t31478;
  double t31479;
  double t31480;
  double t31464;
  double t31465;
  double t31466;
  double t31469;
  double t31474;
  double t31475;
  double t31476;
  double t31481;
  double t31482;
  double t31483;
  double t31484;
  double t31485;
  double t31486;
  double t31487;
  double t31489;
  double t31490;
  double t31491;
  double t31492;
  double t31493;
  double t31494;
  double t31495;
  double t31496;
  double t31525;
  double t31526;
  double t31527;
  double t31530;
  double t31531;
  double t31554;
  double t31555;
  double t31556;
  double t31577;
  double t31578;
  double t31579;
  double t31580;
  double t31582;
  double t31584;
  double t31585;
  double t31586;
  double t31589;
  double t31590;
  double t31591;
  double t31592;
  double t31616;
  double t31638;
  double t31639;
  double t31640;
  double t31644;
  double t31645;
  double t31647;
  double t31648;
  double t31651;
  double t31652;
  double t31653;
  double t31654;
  double t31692;
  double t31693;
  double t31694;
  double t31695;
  double t31689;
  double t31690;
  double t31699;
  double t31700;
  double t31701;
  double t31704;
  double t31761;
  double t31762;
  double t31763;
  double t31766;
  double t31767;
  double t31768;
  double t31770;
  double t31771;
  double t31774;
  double t31775;
  double t31776;
  double t31576;
  double t31795;
  double t31796;
  double t31797;
  double t31799;
  double t31800;
  double t31801;
  double t31803;
  double t31804;
  double t31807;
  double t31808;
  double t31809;
  double t31610;
  double t31612;
  double t31614;
  double t31643;
  double t31649;
  double t31650;
  double t31665;
  double t31668;
  double t31669;
  double t31670;
  double t31673;
  double t31674;
  double t31675;
  double t31676;
  double t31677;
  double t31678;
  double t31679;
  double t31680;
  double t31681;
  double t31682;
  double t31683;
  double t31684;
  double t31834;
  double t31835;
  double t31836;
  double t31837;
  double t31831;
  double t31832;
  double t31841;
  double t31842;
  double t31843;
  double t31848;
  double t31891;
  double t31893;
  double t31894;
  double t31895;
  double t31898;
  double t31899;
  double t31900;
  double t31901;
  double t31686;
  double t31687;
  double t31688;
  double t31691;
  double t31696;
  double t31697;
  double t31698;
  double t31707;
  double t31708;
  double t31709;
  double t31710;
  double t31712;
  double t31713;
  double t31714;
  double t31716;
  double t31717;
  double t31722;
  double t31723;
  double t31725;
  double t31726;
  double t31728;
  double t31729;
  double t31828;
  double t31829;
  double t31830;
  double t31833;
  double t31838;
  double t31839;
  double t31840;
  double t31850;
  double t31851;
  double t31852;
  double t31853;
  double t31854;
  double t31855;
  double t31856;
  double t31857;
  double t31858;
  double t31859;
  double t31860;
  double t31861;
  double t31862;
  double t31863;
  double t31864;
  double t31925;
  double t31926;
  double t31930;
  double t31931;
  double t31932;
  double t31522;
  double t31523;
  double t31529;
  double t31534;
  double t31553;
  double t31557;
  double t31558;
  double t31559;
  double t31560;
  double t31561;
  double t31562;
  double t31563;
  double t31564;
  double t31565;
  double t31566;
  double t31567;
  double t31568;
  double t31569;
  double t31570;
  double t31571;
  double t31572;
  double t31764;
  double t31765;
  double t31769;
  double t31772;
  double t31773;
  double t31777;
  double t31778;
  double t31779;
  double t31780;
  double t31781;
  double t31782;
  double t31783;
  double t31784;
  double t31785;
  double t31786;
  double t31787;
  double t31788;
  double t31789;
  double t31790;
  double t31791;
  double t31792;
  double t31794;
  double t31798;
  double t32003;
  double t32005;
  double t32008;
  double t31922;
  double t31923;
  double t31924;
  double t31927;
  double t31928;
  double t31929;
  double t31933;
  double t31934;
  double t31935;
  double t31936;
  double t31937;
  double t31938;
  double t31939;
  double t31940;
  double t31941;
  double t31945;
  double t31946;
  double t31947;
  double t31948;
  double t31949;
  double t31499;
  double t31500;
  double t31501;
  double t31502;
  double t31503;
  double t31504;
  double t31505;
  double t31506;
  double t31507;
  double t31508;
  double t31509;
  double t31510;
  double t31511;
  double t31512;
  double t31513;
  double t31514;
  double t31515;
  double t31516;
  double t31517;
  double t31741;
  double t31742;
  double t31743;
  double t31744;
  double t31745;
  double t31746;
  double t31747;
  double t31748;
  double t31749;
  double t31750;
  double t31751;
  double t31752;
  double t31753;
  double t31754;
  double t31755;
  double t31756;
  double t31757;
  double t31758;
  double t31759;
  double t31954;
  double t31955;
  double t31956;
  double t31959;
  double t31960;
  double t31963;
  double t31964;
  double t31966;
  double t31967;
  double t31971;
  double t31977;
  double t31979;
  double t31981;
  double t31982;
  double t31992;
  double t31994;
  double t31996;
  double t31997;
  double t31999;
  double t31868;
  double t31869;
  double t31870;
  double t31871;
  double t31872;
  double t31873;
  double t31874;
  double t31875;
  double t31876;
  double t31877;
  double t31878;
  double t31880;
  double t31881;
  double t31882;
  double t31883;
  double t31884;
  double t31885;
  double t31886;
  double t31887;
  double t31215;
  double t31228;
  double t31232;
  double t31236;
  double t31240;
  double t31242;
  double t31243;
  double t31244;
  double t31245;
  double t31249;
  double t31258;
  double t31259;
  double t31260;
  double t31261;
  double t31265;
  double t32058;
  double t32059;
  double t32061;
  double t32064;
  double t32065;
  double t32067;
  double t32068;
  double t32071;
  double t32072;
  double t32073;
  double t32083;
  double t32089;
  double t32094;
  double t32095;
  double t32111;
  double t32112;
  double t32113;
  double t32114;
  double t32115;
  double t32116;
  double t32117;
  double t32118;
  double t32119;
  double t32120;
  double t32122;
  double t32123;
  double t32124;
  double t32125;
  double t32126;
  double t32127;
  double t32128;
  double t32129;
  double t32130;
  double t32136;
  double t32137;
  double t32140;
  double t32143;
  double t32154;
  double t32156;
  double t32134;
  double t32135;
  double t32138;
  double t32144;
  double t32151;
  double t32160;
  double t32163;
  double t32164;
  double t32165;
  double t32170;
  double t32172;
  double t32173;
  double t32177;
  double t32180;
  double t32181;
  double t32182;
  double t32184;
  double t32185;
  double t32186;
  double t32187;
  double t32189;
  double t31280;
  double t31284;
  double t31285;
  double t31290;
  double t31295;
  double t31296;
  double t31301;
  double t31302;
  double t31303;
  double t31304;
  double t31305;
  double t31306;
  double t31307;
  double t31308;
  double t31309;
  double t31310;
  double t31311;
  double t31312;
  double t31313;
  double t31314;
  double t31315;
  double t32192;
  double t32201;
  double t32204;
  double t32206;
  double t32208;
  double t32211;
  double t32213;
  double t32216;
  double t32217;
  double t32220;
  double t32221;
  double t32222;
  double t32223;
  double t32196;
  double t32197;
  double t32200;
  double t32210;
  double t32218;
  double t32219;
  double t32224;
  double t32225;
  double t32226;
  double t32227;
  double t32229;
  double t32230;
  double t32231;
  double t32232;
  double t32234;
  double t32236;
  double t32237;
  double t32238;
  double t32239;
  double t32240;
  double t32241;
  double t32242;
  double t32254;
  double t32255;
  double t32256;
  double t32250;
  double t32251;
  double t32261;
  double t32262;
  double t32265;
  double t32266;
  double t32247;
  double t32248;
  double t32249;
  double t32253;
  double t32257;
  double t32259;
  double t32260;
  double t32268;
  double t32270;
  double t32272;
  double t32273;
  double t32276;
  double t32279;
  double t32280;
  double t32282;
  double t32284;
  double t32285;
  double t32286;
  double t32288;
  double t32289;
  double t32291;
  double t32293;
  double t32336;
  double t32337;
  double t32339;
  double t32340;
  double t32345;
  double t32346;
  double t32347;
  double t32375;
  double t32376;
  double t32377;
  double t32380;
  double t32382;
  double t32383;
  double t32390;
  double t32392;
  double t32395;
  double t32431;
  double t32433;
  double t32436;
  double t32438;
  double t32427;
  double t32428;
  double t32445;
  double t32447;
  double t32448;
  double t32333;
  double t32334;
  double t32338;
  double t32342;
  double t32343;
  double t32348;
  double t32349;
  double t32351;
  double t32353;
  double t32354;
  double t32355;
  double t32356;
  double t32358;
  double t32359;
  double t32360;
  double t32362;
  double t32363;
  double t32364;
  double t32365;
  double t32366;
  double t32367;
  double t32512;
  double t32515;
  double t32521;
  double t32556;
  double t32560;
  double t32568;
  double t32570;
  double t32574;
  double t32636;
  double t32638;
  double t32639;
  double t32641;
  double t32645;
  double t32646;
  double t32647;
  double t32648;
  double t32424;
  double t32425;
  double t32426;
  double t32429;
  double t32439;
  double t32443;
  double t32444;
  double t32449;
  double t32450;
  double t32452;
  double t32453;
  double t32456;
  double t32457;
  double t32458;
  double t32459;
  double t32460;
  double t32461;
  double t32463;
  double t32464;
  double t32465;
  double t32466;
  double t32468;
  double t32551;
  double t32552;
  double t32554;
  double t32561;
  double t32563;
  double t32564;
  double t32575;
  double t32577;
  double t32580;
  double t32581;
  double t32582;
  double t32583;
  double t32584;
  double t32585;
  double t32586;
  double t32590;
  double t32591;
  double t32593;
  double t32594;
  double t32595;
  double t31336;
  double t31370;
  double t31426;
  double t31463;
  double t31498;
  double t32298;
  double t32299;
  double t32300;
  double t32302;
  double t32305;
  double t32306;
  double t32308;
  double t32310;
  double t32312;
  double t32314;
  double t32315;
  double t32318;
  double t32321;
  double t32323;
  double t32325;
  double t32326;
  double t32328;
  double t32329;
  double t32331;
  double t32472;
  double t32473;
  double t32475;
  double t32476;
  double t32479;
  double t32480;
  double t32481;
  double t32482;
  double t32484;
  double t32486;
  double t32487;
  double t32490;
  double t32494;
  double t32495;
  double t32497;
  double t32498;
  double t32500;
  double t32504;
  double t32507;
  double t32602;
  double t32605;
  double t32606;
  double t32607;
  double t32608;
  double t32609;
  double t32611;
  double t32613;
  double t32614;
  double t32615;
  double t32616;
  double t32617;
  double t32618;
  double t32619;
  double t32621;
  double t32624;
  double t32626;
  double t32627;
  double t32630;
  t428 = Cos(var1[4]);
  t574 = Cos(var1[6]);
  t817 = -1.*t574;
  t861 = 1. + t817;
  t443 = Cos(var1[5]);
  t21674 = Sin(var1[5]);
  t23537 = Sin(var1[4]);
  t24001 = Sin(var1[6]);
  t27315 = Cos(var1[8]);
  t27612 = -1.*t27315;
  t28873 = 1. + t27612;
  t29089 = Sin(var1[8]);
  t29437 = -3.e-6*t28873;
  t29438 = 3.e-6*t29089;
  t29457 = t29437 + t29438;
  t25366 = t428*t443*t574;
  t25429 = -3.e-6*t428*t861*t21674;
  t25624 = t23537*t24001;
  t25954 = t25366 + t25429 + t25624;
  t29368 = -1.*t29089;
  t29461 = 3.e-6*t428*t443*t861;
  t29462 = -9.e-12*t861;
  t29463 = 1. + t29462;
  t29464 = -1.*t428*t29463*t21674;
  t29465 = -3.e-6*t23537*t24001;
  t29466 = t29461 + t29464 + t29465;
  t29598 = 3.e-6*t28873;
  t29473 = -3.e-6*t29089;
  t29588 = -1.000000000009*t861;
  t29589 = 1. + t29588;
  t29591 = t29589*t23537;
  t29592 = -1.*t428*t443*t24001;
  t29593 = -3.e-6*t428*t21674*t24001;
  t29594 = t29591 + t29592 + t29593;
  t29599 = t29598 + t29438;
  t27072 = 9.e-13*var1[8];
  t29478 = t29437 + t29473;
  t29011 = -9.e-12*t28873;
  t29531 = -1.000000000009*t28873;
  t29579 = 1. + t29531;
  t29606 = t29598 + t29473;
  t29595 = 9.e-12*t28873;
  t29708 = -3.e-6*t27315;
  t29709 = t29708 + t29473;
  t29711 = 3.e-6*t27315;
  t29712 = t29711 + t29473;
  t29718 = -9.e-12*t29089;
  t29755 = t29711 + t29438;
  t29766 = 9.e-12*t29089;
  t29753 = t29708 + t29438;
  t29710 = 0.2*t29709;
  t29713 = 0.1*t29712;
  t29714 = -1.62e-17*t29089;
  t29715 = 3.e-7 + t29710 + t29713 + t29714;
  t29716 = t29466*t29715;
  t29717 = -9.e-7*t29709;
  t29719 = t27315 + t29718;
  t29720 = 0.2*t29719;
  t29721 = 0.1000000000009*t29089;
  t29722 = 9.e-13 + t29717 + t29720 + t29721;
  t29723 = t29594*t29722;
  t29724 = -9.e-7*t29712;
  t29734 = t27612 + t29718;
  t29743 = 0.1*t29734;
  t29744 = 0.2000000000018*t29089;
  t29750 = 9.e-13 + t29724 + t29743 + t29744;
  t29752 = t25954*t29750;
  t29754 = t25954*t29753;
  t29756 = t29594*t29755;
  t29757 = -1.8e-11*t29466*t29089;
  t29758 = t29754 + t29756 + t29757;
  t29764 = 0.100001*t29758;
  t29767 = t27612 + t29766;
  t29769 = t29594*t29767;
  t29770 = t29466*t29755;
  t29771 = -1.000000000009*t25954*t29089;
  t29772 = t29769 + t29770 + t29771;
  t29773 = 0.2*t29772;
  t29774 = t27315 + t29766;
  t29775 = t25954*t29774;
  t29776 = t29466*t29753;
  t29777 = -1.000000000009*t29594*t29089;
  t29778 = t29775 + t29776 + t29777;
  t29779 = -0.3*t29778;
  t29780 = t29716 + t29723 + t29752 + t29764 + t29773 + t29779;
  t28970 = 0.2000000000018*t28873;
  t29394 = t29011 + t29368;
  t29424 = 0.1*t29394;
  t29458 = -9.e-7*t29457;
  t29459 = t27072 + t28970 + t29424 + t29458;
  t29467 = 3.e-7*var1[8];
  t29468 = -1.62e-17*t28873;
  t29479 = 0.2*t29478;
  t29484 = 0.1*t29457;
  t29485 = t29467 + t29468 + t29479 + t29484;
  t29785 = -3.e-6*t428*t443*t861;
  t29786 = -1.*t428*t574*t21674;
  t29787 = t29785 + t29786;
  t29596 = t29595 + t29368;
  t29789 = -1.*t428*t443*t29463;
  t29790 = t29789 + t25429;
  t29603 = -1.8e-11*t28873;
  t29604 = 1. + t29603;
  t29793 = -3.e-6*t428*t443*t24001;
  t29794 = t428*t21674*t24001;
  t29795 = t29793 + t29794;
  t29690 = 0.1000000000009*t28873;
  t29691 = -9.e-7*t29478;
  t29692 = t29011 + t29089;
  t29694 = 0.2*t29692;
  t29698 = t27072 + t29690 + t29691 + t29694;
  t29704 = t29595 + t29089;
  t29783 = 6.000000000054e-7*t428*t443*t861;
  t29784 = -0.2000000000018*t428*t861*t21674;
  t29788 = t29787*t29459;
  t29791 = t29790*t29485;
  t29792 = t29579*t29787;
  t29796 = t29795*t29596;
  t29797 = t29790*t29599;
  t29798 = t29792 + t29796 + t29797;
  t29799 = 0.2*t29798;
  t29800 = t29604*t29790;
  t29801 = t29787*t29606;
  t29802 = t29795*t29599;
  t29803 = t29800 + t29801 + t29802;
  t29804 = 0.100001*t29803;
  t29805 = t29795*t29698;
  t29806 = t29579*t29795;
  t29807 = t29790*t29606;
  t29808 = t29787*t29704;
  t29809 = t29806 + t29807 + t29808;
  t29810 = -0.3*t29809;
  t29811 = t29783 + t29784 + t29788 + t29791 + t29799 + t29804 + t29805 + t29810;
  t29817 = -1.*t443*t574*t23537;
  t29818 = 3.e-6*t861*t23537*t21674;
  t29819 = t428*t24001;
  t29820 = t29817 + t29818 + t29819;
  t29822 = -3.e-6*t443*t861*t23537;
  t29823 = t29463*t23537*t21674;
  t29824 = -3.e-6*t428*t24001;
  t29825 = t29822 + t29823 + t29824;
  t29828 = t428*t29589;
  t29829 = t443*t23537*t24001;
  t29830 = 3.e-6*t23537*t21674*t24001;
  t29831 = t29828 + t29829 + t29830;
  t29814 = -0.2000000000018*t443*t861*t23537;
  t29815 = -6.000000000054e-7*t861*t23537*t21674;
  t29816 = -0.2000000000018*t428*t24001;
  t29821 = t29820*t29459;
  t29826 = t29825*t29485;
  t29827 = t29579*t29820;
  t29832 = t29831*t29596;
  t29833 = t29825*t29599;
  t29834 = t29827 + t29832 + t29833;
  t29835 = 0.2*t29834;
  t29836 = t29604*t29825;
  t29837 = t29820*t29606;
  t29838 = t29831*t29599;
  t29839 = t29836 + t29837 + t29838;
  t29841 = 0.100001*t29839;
  t29843 = t29831*t29698;
  t29845 = t29579*t29831;
  t29846 = t29825*t29606;
  t29847 = t29820*t29704;
  t29848 = t29845 + t29846 + t29847;
  t29849 = -0.3*t29848;
  t29850 = t29814 + t29815 + t29816 + t29821 + t29826 + t29835 + t29841 + t29843 + t29849;
  t29859 = -3.e-6*t574*t23537;
  t29868 = 3.e-6*t428*t443*t24001;
  t29903 = 9.e-12*t428*t21674*t24001;
  t29961 = t29859 + t29868 + t29903;
  t29856 = t574*t23537;
  t29857 = t29856 + t29592 + t29593;
  t29994 = -1.*t428*t443*t574;
  t29995 = -3.e-6*t428*t574*t21674;
  t29997 = -1.000000000009*t23537*t24001;
  t29998 = t29994 + t29995 + t29997;
  t29853 = -0.2000000000018*t574*t23537;
  t29854 = 0.2000000000018*t428*t443*t24001;
  t29855 = 6.000000000054e-7*t428*t21674*t24001;
  t29858 = t29857*t29459;
  t29979 = t29961*t29485;
  t29987 = t29604*t29961;
  t29988 = t29857*t29606;
  t30003 = t29998*t29599;
  t30006 = t29987 + t29988 + t30003;
  t30010 = 0.100001*t30006;
  t30015 = t29579*t29857;
  t30016 = t29998*t29596;
  t30020 = t29961*t29599;
  t30023 = t30015 + t30016 + t30020;
  t30027 = 0.2*t30023;
  t30028 = t29998*t29698;
  t30044 = t29579*t29998;
  t30049 = t29961*t29606;
  t30050 = t29857*t29704;
  t30051 = t30044 + t30049 + t30050;
  t30101 = -0.3*t30051;
  t30138 = t29853 + t29854 + t29855 + t29858 + t29979 + t30010 + t30027 + t30028 + t30101;
  t30244 = 3.e-6*t428*t861*t21674;
  t30246 = t29994 + t30244;
  t30294 = t428*t29463*t21674;
  t30295 = t29785 + t30294;
  t30338 = t428*t443*t24001;
  t30340 = 3.e-6*t428*t21674*t24001;
  t30343 = t30338 + t30340;
  t30411 = 3.e-6*t443*t861*t23537;
  t30413 = t574*t23537*t21674;
  t30424 = t30411 + t30413;
  t30454 = t443*t29463*t23537;
  t30455 = t30454 + t29818;
  t30463 = 3.e-6*t443*t23537*t24001;
  t30480 = -1.*t23537*t21674*t24001;
  t30485 = t30463 + t30480;
  t30506 = 9.e-12*t428*t443*t24001;
  t30507 = t30506 + t29593;
  t30523 = -3.e-6*t428*t443*t574;
  t30524 = t428*t574*t21674;
  t30530 = t30523 + t30524;
  t30794 = -1.*t23537*t24001;
  t30796 = t29994 + t29995 + t30794;
  t30800 = 3.e-6*t428*t443*t574;
  t30801 = 9.e-12*t428*t574*t21674;
  t30802 = 3.e-6*t23537*t24001;
  t30803 = t30800 + t30801 + t30802;
  t30808 = -1.000000000009*t574*t23537;
  t30809 = t30808 + t30338 + t30340;
  t30503 = 6.000000000054e-7*t428*t443*t24001;
  t30504 = -0.2000000000018*t428*t21674*t24001;
  t30505 = t29795*t29459;
  t30508 = t30507*t29485;
  t30511 = t29604*t30507;
  t30522 = t29795*t29606;
  t30531 = t30530*t29599;
  t30532 = t30511 + t30522 + t30531;
  t30533 = 0.100001*t30532;
  t30535 = t30530*t29596;
  t30538 = t30507*t29599;
  t30540 = t29806 + t30535 + t30538;
  t30541 = 0.2*t30540;
  t30542 = t30530*t29698;
  t30543 = t29579*t30530;
  t30544 = t30507*t29606;
  t30545 = t29795*t29704;
  t30546 = t30543 + t30544 + t30545;
  t30547 = -0.3*t30546;
  t30550 = t30503 + t30504 + t30505 + t30508 + t30533 + t30541 + t30542 + t30547;
  t30949 = -3.e-6*t428*t574;
  t30950 = -3.e-6*t443*t23537*t24001;
  t30951 = -9.e-12*t23537*t21674*t24001;
  t30952 = t30949 + t30950 + t30951;
  t30946 = t428*t574;
  t30947 = t30946 + t29829 + t29830;
  t30961 = t443*t574*t23537;
  t30991 = 3.e-6*t574*t23537*t21674;
  t30992 = -1.000000000009*t428*t24001;
  t31049 = t30961 + t30991 + t30992;
  t30373 = -6.000000000054e-7*t443*t861*t23537;
  t30410 = 0.2000000000018*t861*t23537*t21674;
  t30453 = t30424*t29459;
  t30458 = t30455*t29485;
  t30462 = t29579*t30424;
  t30486 = t30485*t29596;
  t30487 = t30455*t29599;
  t30488 = t30462 + t30486 + t30487;
  t30489 = 0.2*t30488;
  t30490 = t29604*t30455;
  t30491 = t30424*t29606;
  t30492 = t30485*t29599;
  t30493 = t30490 + t30491 + t30492;
  t30494 = 0.100001*t30493;
  t30495 = t30485*t29698;
  t30496 = t29579*t30485;
  t30497 = t30455*t29606;
  t30498 = t30424*t29704;
  t30499 = t30496 + t30497 + t30498;
  t30500 = -0.3*t30499;
  t30501 = t30373 + t30410 + t30453 + t30458 + t30489 + t30494 + t30495 + t30500;
  t30242 = -0.2000000000018*t428*t443*t861;
  t30243 = -6.000000000054e-7*t428*t861*t21674;
  t30793 = 0.2000000000018*t23537*t24001;
  t31143 = t29994 + t30244 + t30794;
  t31156 = t29785 + t30294 + t30802;
  t31165 = -1.*t29589*t23537;
  t31166 = t31165 + t30338 + t30340;
  t30942 = -0.2000000000018*t428*t574;
  t30944 = -0.2000000000018*t443*t23537*t24001;
  t30945 = -6.000000000054e-7*t23537*t21674*t24001;
  t30948 = t30947*t29459;
  t30953 = t30952*t29485;
  t30954 = t29604*t30952;
  t30956 = t30947*t29606;
  t31050 = t31049*t29599;
  t31051 = t30954 + t30956 + t31050;
  t31053 = 0.100001*t31051;
  t31057 = t29579*t30947;
  t31058 = t31049*t29596;
  t31063 = t30952*t29599;
  t31064 = t31057 + t31058 + t31063;
  t31065 = 0.2*t31064;
  t31066 = t31049*t29698;
  t31067 = t29579*t31049;
  t31068 = t30952*t29606;
  t31069 = t30947*t29704;
  t31070 = t31067 + t31068 + t31069;
  t31071 = -0.3*t31070;
  t31072 = t30942 + t30944 + t30945 + t30948 + t30953 + t31053 + t31065 + t31066 + t31071;
  t30600 = t29961*t29715;
  t30607 = t29998*t29722;
  t30614 = t29857*t29750;
  t30639 = t29857*t29774;
  t30655 = t29961*t29753;
  t30687 = -1.000000000009*t29998*t29089;
  t30688 = t30639 + t30655 + t30687;
  t30689 = -0.3*t30688;
  t30690 = t29998*t29767;
  t30691 = t29961*t29755;
  t30692 = -1.000000000009*t29857*t29089;
  t30733 = t30690 + t30691 + t30692;
  t30735 = 0.2*t30733;
  t30745 = t29857*t29753;
  t30770 = t29998*t29755;
  t30771 = -1.8e-11*t29961*t29089;
  t30772 = t30745 + t30770 + t30771;
  t30777 = 0.100001*t30772;
  t30781 = t30600 + t30607 + t30614 + t30689 + t30735 + t30777;
  t30208 = t29790*t29715;
  t30209 = t29795*t29722;
  t30210 = t29787*t29750;
  t30214 = t29787*t29753;
  t30219 = t29795*t29755;
  t30221 = -1.8e-11*t29790*t29089;
  t30225 = t30214 + t30219 + t30221;
  t30226 = 0.100001*t30225;
  t30227 = t29795*t29767;
  t30228 = t29790*t29755;
  t30229 = -1.000000000009*t29787*t29089;
  t30230 = t30227 + t30228 + t30229;
  t30231 = 0.2*t30230;
  t30232 = t29787*t29774;
  t30234 = t29790*t29753;
  t30235 = -1.000000000009*t29795*t29089;
  t30236 = t30232 + t30234 + t30235;
  t30238 = -0.3*t30236;
  t30239 = t30208 + t30209 + t30210 + t30226 + t30231 + t30238;
  t31080 = t29825*t29715;
  t31081 = t29831*t29722;
  t31083 = t29820*t29750;
  t31084 = t29820*t29753;
  t31105 = t29831*t29755;
  t31106 = -1.8e-11*t29825*t29089;
  t31107 = t31084 + t31105 + t31106;
  t31108 = 0.100001*t31107;
  t31109 = t29831*t29767;
  t31110 = t29825*t29755;
  t31111 = -1.000000000009*t29820*t29089;
  t31112 = t31109 + t31110 + t31111;
  t31116 = 0.2*t31112;
  t31120 = t29820*t29774;
  t31121 = t29825*t29753;
  t31126 = -1.000000000009*t29831*t29089;
  t31128 = t31120 + t31121 + t31126;
  t31129 = -0.3*t31128;
  t31130 = t31080 + t31081 + t31083 + t31108 + t31116 + t31129;
  t31216 = -9.e-12*t27315;
  t31248 = 9.e-12*t27315;
  t31277 = Cos(var1[3]);
  t31275 = Sin(var1[3]);
  t31276 = t443*t31275*t23537;
  t31278 = t31277*t21674;
  t31279 = t31276 + t31278;
  t31281 = t31277*t443;
  t31282 = -1.*t31275*t23537*t21674;
  t31283 = t31281 + t31282;
  t31286 = t574*t31279;
  t31287 = 3.e-6*t861*t31283;
  t31288 = -1.*t428*t31275*t24001;
  t31289 = t31286 + t31287 + t31288;
  t31291 = 3.e-6*t861*t31279;
  t31292 = t29463*t31283;
  t31293 = 3.e-6*t428*t31275*t24001;
  t31294 = t31291 + t31292 + t31293;
  t31297 = -1.*t428*t29589*t31275;
  t31298 = -1.*t31279*t24001;
  t31299 = 3.e-6*t31283*t24001;
  t31300 = t31297 + t31298 + t31299;
  t31316 = t31294*t29715;
  t31317 = t31300*t29722;
  t31318 = t31289*t29750;
  t31319 = t31300*t29767;
  t31320 = t31294*t29755;
  t31321 = -1.000000000009*t31289*t29089;
  t31322 = t31319 + t31320 + t31321;
  t31323 = 0.2*t31322;
  t31324 = t31289*t29753;
  t31325 = t31300*t29755;
  t31326 = -1.8e-11*t31294*t29089;
  t31327 = t31324 + t31325 + t31326;
  t31328 = 0.100001*t31327;
  t31329 = t31289*t29774;
  t31330 = t31294*t29753;
  t31331 = -1.000000000009*t31300*t29089;
  t31332 = t31329 + t31330 + t31331;
  t31333 = -0.3*t31332;
  t31334 = t31316 + t31317 + t31318 + t31323 + t31328 + t31333;
  t31337 = -1.*t443*t31275*t23537;
  t31338 = -1.*t31277*t21674;
  t31339 = t31337 + t31338;
  t31342 = 3.e-6*t861*t31339;
  t31343 = t574*t31283;
  t31344 = t31342 + t31343;
  t31346 = t29463*t31339;
  t31347 = t31346 + t31287;
  t31350 = 3.e-6*t31339*t24001;
  t31351 = -1.*t31283*t24001;
  t31352 = t31350 + t31351;
  t31340 = -6.000000000054e-7*t861*t31339;
  t31341 = 0.2000000000018*t861*t31283;
  t31345 = t31344*t29459;
  t31348 = t31347*t29485;
  t31349 = t29579*t31344;
  t31353 = t31352*t29596;
  t31354 = t31347*t29599;
  t31355 = t31349 + t31353 + t31354;
  t31356 = 0.2*t31355;
  t31357 = t29604*t31347;
  t31358 = t31344*t29606;
  t31359 = t31352*t29599;
  t31360 = t31357 + t31358 + t31359;
  t31361 = 0.100001*t31360;
  t31362 = t31352*t29698;
  t31363 = t29579*t31352;
  t31364 = t31347*t29606;
  t31365 = t31344*t29704;
  t31366 = t31363 + t31364 + t31365;
  t31367 = -0.3*t31366;
  t31368 = t31340 + t31341 + t31345 + t31348 + t31356 + t31361 + t31362 + t31367;
  t31371 = t31277*t443*t23537;
  t31372 = -1.*t31275*t21674;
  t31373 = t31371 + t31372;
  t31375 = -1.*t443*t31275;
  t31376 = -1.*t31277*t23537*t21674;
  t31377 = t31375 + t31376;
  t31380 = t574*t31373;
  t31381 = 3.e-6*t861*t31377;
  t31382 = -1.*t31277*t428*t24001;
  t31383 = t31380 + t31381 + t31382;
  t31385 = 3.e-6*t861*t31373;
  t31386 = t29463*t31377;
  t31387 = 3.e-6*t31277*t428*t24001;
  t31388 = t31385 + t31386 + t31387;
  t31391 = -1.*t31277*t428*t29589;
  t31392 = -1.*t31373*t24001;
  t31393 = 3.e-6*t31377*t24001;
  t31394 = t31391 + t31392 + t31393;
  t31374 = 0.2000000000018*t861*t31373;
  t31378 = -6.000000000054e-7*t861*t31377;
  t31379 = 0.2000000000018*t31277*t428*t24001;
  t31384 = t31383*t29459;
  t31389 = t31388*t29485;
  t31390 = t29579*t31383;
  t31395 = t31394*t29596;
  t31396 = t31388*t29599;
  t31397 = t31390 + t31395 + t31396;
  t31398 = 0.2*t31397;
  t31399 = t29604*t31388;
  t31400 = t31383*t29606;
  t31401 = t31394*t29599;
  t31402 = t31399 + t31400 + t31401;
  t31403 = 0.100001*t31402;
  t31404 = t31394*t29698;
  t31405 = t29579*t31394;
  t31406 = t31388*t29606;
  t31407 = t31383*t29704;
  t31410 = t31405 + t31406 + t31407;
  t31411 = -0.3*t31410;
  t31424 = t31374 + t31378 + t31379 + t31384 + t31389 + t31398 + t31403 + t31404 + t31411;
  t31430 = t428*t443*t574*t31275;
  t31431 = -3.e-6*t428*t861*t31275*t21674;
  t31432 = t31275*t23537*t24001;
  t31433 = t31430 + t31431 + t31432;
  t31435 = 3.e-6*t428*t443*t861*t31275;
  t31436 = -1.*t428*t29463*t31275*t21674;
  t31437 = -3.e-6*t31275*t23537*t24001;
  t31438 = t31435 + t31436 + t31437;
  t31441 = t29589*t31275*t23537;
  t31442 = -1.*t428*t443*t31275*t24001;
  t31443 = -3.e-6*t428*t31275*t21674*t24001;
  t31444 = t31441 + t31442 + t31443;
  t31427 = 0.2000000000018*t428*t443*t861*t31275;
  t31428 = 6.000000000054e-7*t428*t861*t31275*t21674;
  t31429 = -0.2000000000018*t31275*t23537*t24001;
  t31434 = t31433*t29459;
  t31439 = t31438*t29485;
  t31440 = t29579*t31433;
  t31445 = t31444*t29596;
  t31446 = t31438*t29599;
  t31447 = t31440 + t31445 + t31446;
  t31448 = 0.2*t31447;
  t31449 = t29604*t31438;
  t31450 = t31433*t29606;
  t31451 = t31444*t29599;
  t31452 = t31449 + t31450 + t31451;
  t31453 = 0.100001*t31452;
  t31454 = t31444*t29698;
  t31456 = t29579*t31444;
  t31457 = t31438*t29606;
  t31458 = t31433*t29704;
  t31459 = t31456 + t31457 + t31458;
  t31460 = -0.3*t31459;
  t31461 = t31427 + t31428 + t31429 + t31434 + t31439 + t31448 + t31453 + t31454 + t31460;
  t31470 = 3.e-6*t428*t574*t31275;
  t31471 = 3.e-6*t31279*t24001;
  t31472 = -9.e-12*t31283*t24001;
  t31473 = t31470 + t31471 + t31472;
  t31467 = -1.*t428*t574*t31275;
  t31468 = t31467 + t31298 + t31299;
  t31477 = -1.*t574*t31279;
  t31478 = 3.e-6*t574*t31283;
  t31479 = 1.000000000009*t428*t31275*t24001;
  t31480 = t31477 + t31478 + t31479;
  t31464 = 0.2000000000018*t428*t574*t31275;
  t31465 = 0.2000000000018*t31279*t24001;
  t31466 = -6.000000000054e-7*t31283*t24001;
  t31469 = t31468*t29459;
  t31474 = t31473*t29485;
  t31475 = t29604*t31473;
  t31476 = t31468*t29606;
  t31481 = t31480*t29599;
  t31482 = t31475 + t31476 + t31481;
  t31483 = 0.100001*t31482;
  t31484 = t29579*t31468;
  t31485 = t31480*t29596;
  t31486 = t31473*t29599;
  t31487 = t31484 + t31485 + t31486;
  t31489 = 0.2*t31487;
  t31490 = t31480*t29698;
  t31491 = t29579*t31480;
  t31492 = t31473*t29606;
  t31493 = t31468*t29704;
  t31494 = t31491 + t31492 + t31493;
  t31495 = -0.3*t31494;
  t31496 = t31464 + t31465 + t31466 + t31469 + t31474 + t31483 + t31489 + t31490 + t31495;
  t31525 = -3.e-6*t428*t443*t861*t31275;
  t31526 = -1.*t428*t574*t31275*t21674;
  t31527 = t31525 + t31526;
  t31530 = -1.*t428*t443*t29463*t31275;
  t31531 = t31530 + t31431;
  t31554 = -3.e-6*t428*t443*t31275*t24001;
  t31555 = t428*t31275*t21674*t24001;
  t31556 = t31554 + t31555;
  t31577 = -1.*t443*t574*t31275*t23537;
  t31578 = 3.e-6*t861*t31275*t23537*t21674;
  t31579 = t428*t31275*t24001;
  t31580 = t31577 + t31578 + t31579;
  t31582 = -3.e-6*t443*t861*t31275*t23537;
  t31584 = t29463*t31275*t23537*t21674;
  t31585 = -3.e-6*t428*t31275*t24001;
  t31586 = t31582 + t31584 + t31585;
  t31589 = t428*t29589*t31275;
  t31590 = t443*t31275*t23537*t24001;
  t31591 = 3.e-6*t31275*t23537*t21674*t24001;
  t31592 = t31589 + t31590 + t31591;
  t31616 = t31277*t428*t443*t574;
  t31638 = -3.e-6*t31277*t428*t861*t21674;
  t31639 = t31277*t23537*t24001;
  t31640 = t31616 + t31638 + t31639;
  t31644 = 3.e-6*t31277*t428*t443*t861;
  t31645 = -1.*t31277*t428*t29463*t21674;
  t31647 = -3.e-6*t31277*t23537*t24001;
  t31648 = t31644 + t31645 + t31647;
  t31651 = t31277*t29589*t23537;
  t31652 = -1.*t31277*t428*t443*t24001;
  t31653 = -3.e-6*t31277*t428*t21674*t24001;
  t31654 = t31651 + t31652 + t31653;
  t31692 = -3.e-6*t574*t31275*t23537;
  t31693 = 3.e-6*t428*t443*t31275*t24001;
  t31694 = 9.e-12*t428*t31275*t21674*t24001;
  t31695 = t31692 + t31693 + t31694;
  t31689 = t574*t31275*t23537;
  t31690 = t31689 + t31442 + t31443;
  t31699 = -1.*t428*t443*t574*t31275;
  t31700 = -3.e-6*t428*t574*t31275*t21674;
  t31701 = -1.000000000009*t31275*t23537*t24001;
  t31704 = t31699 + t31700 + t31701;
  t31761 = -1.*t31277*t443*t23537;
  t31762 = t31275*t21674;
  t31763 = t31761 + t31762;
  t31766 = 3.e-6*t861*t31763;
  t31767 = t574*t31377;
  t31768 = t31766 + t31767;
  t31770 = t29463*t31763;
  t31771 = t31770 + t31381;
  t31774 = 3.e-6*t31763*t24001;
  t31775 = -1.*t31377*t24001;
  t31776 = t31774 + t31775;
  t31576 = -0.2000000000018*t428*t31275*t24001;
  t31795 = -1.*t31277*t443;
  t31796 = t31275*t23537*t21674;
  t31797 = t31795 + t31796;
  t31799 = t574*t31339;
  t31800 = 3.e-6*t861*t31797;
  t31801 = t31799 + t31800 + t31579;
  t31803 = t29463*t31797;
  t31804 = t31342 + t31803 + t31585;
  t31807 = -1.*t31339*t24001;
  t31808 = 3.e-6*t31797*t24001;
  t31809 = t31589 + t31807 + t31808;
  t31610 = 0.2000000000018*t31277*t428*t443*t861;
  t31612 = 6.000000000054e-7*t31277*t428*t861*t21674;
  t31614 = -0.2000000000018*t31277*t23537*t24001;
  t31643 = t31640*t29459;
  t31649 = t31648*t29485;
  t31650 = t29579*t31640;
  t31665 = t31654*t29596;
  t31668 = t31648*t29599;
  t31669 = t31650 + t31665 + t31668;
  t31670 = 0.2*t31669;
  t31673 = t29604*t31648;
  t31674 = t31640*t29606;
  t31675 = t31654*t29599;
  t31676 = t31673 + t31674 + t31675;
  t31677 = 0.100001*t31676;
  t31678 = t31654*t29698;
  t31679 = t29579*t31654;
  t31680 = t31648*t29606;
  t31681 = t31640*t29704;
  t31682 = t31679 + t31680 + t31681;
  t31683 = -0.3*t31682;
  t31684 = t31610 + t31612 + t31614 + t31643 + t31649 + t31670 + t31677 + t31678 + t31683;
  t31834 = 3.e-6*t31277*t428*t574;
  t31835 = 3.e-6*t31373*t24001;
  t31836 = -9.e-12*t31377*t24001;
  t31837 = t31834 + t31835 + t31836;
  t31831 = -1.*t31277*t428*t574;
  t31832 = t31831 + t31392 + t31393;
  t31841 = -1.*t574*t31373;
  t31842 = 3.e-6*t574*t31377;
  t31843 = 1.000000000009*t31277*t428*t24001;
  t31848 = t31841 + t31842 + t31843;
  t31891 = t31477 + t31478 + t31579;
  t31893 = 3.e-6*t574*t31279;
  t31894 = -9.e-12*t574*t31283;
  t31895 = t31893 + t31894 + t31585;
  t31898 = 1.000000000009*t428*t574*t31275;
  t31899 = t31279*t24001;
  t31900 = -3.e-6*t31283*t24001;
  t31901 = t31898 + t31899 + t31900;
  t31686 = -0.2000000000018*t574*t31275*t23537;
  t31687 = 0.2000000000018*t428*t443*t31275*t24001;
  t31688 = 6.000000000054e-7*t428*t31275*t21674*t24001;
  t31691 = t31690*t29459;
  t31696 = t31695*t29485;
  t31697 = t29604*t31695;
  t31698 = t31690*t29606;
  t31707 = t31704*t29599;
  t31708 = t31697 + t31698 + t31707;
  t31709 = 0.100001*t31708;
  t31710 = t29579*t31690;
  t31712 = t31704*t29596;
  t31713 = t31695*t29599;
  t31714 = t31710 + t31712 + t31713;
  t31716 = 0.2*t31714;
  t31717 = t31704*t29698;
  t31722 = t29579*t31704;
  t31723 = t31695*t29606;
  t31725 = t31690*t29704;
  t31726 = t31722 + t31723 + t31725;
  t31728 = -0.3*t31726;
  t31729 = t31686 + t31687 + t31688 + t31691 + t31696 + t31709 + t31716 + t31717 + t31728;
  t31828 = 0.2000000000018*t31277*t428*t574;
  t31829 = 0.2000000000018*t31373*t24001;
  t31830 = -6.000000000054e-7*t31377*t24001;
  t31833 = t31832*t29459;
  t31838 = t31837*t29485;
  t31839 = t29604*t31837;
  t31840 = t31832*t29606;
  t31850 = t31848*t29599;
  t31851 = t31839 + t31840 + t31850;
  t31852 = 0.100001*t31851;
  t31853 = t29579*t31832;
  t31854 = t31848*t29596;
  t31855 = t31837*t29599;
  t31856 = t31853 + t31854 + t31855;
  t31857 = 0.2*t31856;
  t31858 = t31848*t29698;
  t31859 = t29579*t31848;
  t31860 = t31837*t29606;
  t31861 = t31832*t29704;
  t31862 = t31859 + t31860 + t31861;
  t31863 = -0.3*t31862;
  t31864 = t31828 + t31829 + t31830 + t31833 + t31838 + t31852 + t31857 + t31858 + t31863;
  t31925 = -9.e-12*t31339*t24001;
  t31926 = t31925 + t31299;
  t31930 = 3.e-6*t574*t31339;
  t31931 = -1.*t574*t31283;
  t31932 = t31930 + t31931;
  t31522 = 6.000000000054e-7*t428*t443*t861*t31275;
  t31523 = -0.2000000000018*t428*t861*t31275*t21674;
  t31529 = t31527*t29459;
  t31534 = t31531*t29485;
  t31553 = t29579*t31527;
  t31557 = t31556*t29596;
  t31558 = t31531*t29599;
  t31559 = t31553 + t31557 + t31558;
  t31560 = 0.2*t31559;
  t31561 = t29604*t31531;
  t31562 = t31527*t29606;
  t31563 = t31556*t29599;
  t31564 = t31561 + t31562 + t31563;
  t31565 = 0.100001*t31564;
  t31566 = t31556*t29698;
  t31567 = t29579*t31556;
  t31568 = t31531*t29606;
  t31569 = t31527*t29704;
  t31570 = t31567 + t31568 + t31569;
  t31571 = -0.3*t31570;
  t31572 = t31522 + t31523 + t31529 + t31534 + t31560 + t31565 + t31566 + t31571;
  t31764 = -6.000000000054e-7*t861*t31763;
  t31765 = 0.2000000000018*t861*t31377;
  t31769 = t31768*t29459;
  t31772 = t31771*t29485;
  t31773 = t29579*t31768;
  t31777 = t31776*t29596;
  t31778 = t31771*t29599;
  t31779 = t31773 + t31777 + t31778;
  t31780 = 0.2*t31779;
  t31781 = t29604*t31771;
  t31782 = t31768*t29606;
  t31783 = t31776*t29599;
  t31784 = t31781 + t31782 + t31783;
  t31785 = 0.100001*t31784;
  t31786 = t31776*t29698;
  t31787 = t29579*t31776;
  t31788 = t31771*t29606;
  t31789 = t31768*t29704;
  t31790 = t31787 + t31788 + t31789;
  t31791 = -0.3*t31790;
  t31792 = t31764 + t31765 + t31769 + t31772 + t31780 + t31785 + t31786 + t31791;
  t31794 = 0.2000000000018*t861*t31339;
  t31798 = -6.000000000054e-7*t861*t31797;
  t32003 = t31799 + t31800;
  t32005 = t31342 + t31803;
  t32008 = t31807 + t31808;
  t31922 = -6.000000000054e-7*t31339*t24001;
  t31923 = 0.2000000000018*t31283*t24001;
  t31924 = t31352*t29459;
  t31927 = t31926*t29485;
  t31928 = t29604*t31926;
  t31929 = t31352*t29606;
  t31933 = t31932*t29599;
  t31934 = t31928 + t31929 + t31933;
  t31935 = 0.100001*t31934;
  t31936 = t31932*t29596;
  t31937 = t31926*t29599;
  t31938 = t31363 + t31936 + t31937;
  t31939 = 0.2*t31938;
  t31940 = t31932*t29698;
  t31941 = t29579*t31932;
  t31945 = t31926*t29606;
  t31946 = t31352*t29704;
  t31947 = t31941 + t31945 + t31946;
  t31948 = -0.3*t31947;
  t31949 = t31922 + t31923 + t31924 + t31927 + t31935 + t31939 + t31940 + t31948;
  t31499 = t31438*t29715;
  t31500 = t31444*t29722;
  t31501 = t31433*t29750;
  t31502 = t31433*t29753;
  t31503 = t31444*t29755;
  t31504 = -1.8e-11*t31438*t29089;
  t31505 = t31502 + t31503 + t31504;
  t31506 = 0.100001*t31505;
  t31507 = t31444*t29767;
  t31508 = t31438*t29755;
  t31509 = -1.000000000009*t31433*t29089;
  t31510 = t31507 + t31508 + t31509;
  t31511 = 0.2*t31510;
  t31512 = t31433*t29774;
  t31513 = t31438*t29753;
  t31514 = -1.000000000009*t31444*t29089;
  t31515 = t31512 + t31513 + t31514;
  t31516 = -0.3*t31515;
  t31517 = t31499 + t31500 + t31501 + t31506 + t31511 + t31516;
  t31741 = t31388*t29715;
  t31742 = t31394*t29722;
  t31743 = t31383*t29750;
  t31744 = t31394*t29767;
  t31745 = t31388*t29755;
  t31746 = -1.000000000009*t31383*t29089;
  t31747 = t31744 + t31745 + t31746;
  t31748 = 0.2*t31747;
  t31749 = t31383*t29753;
  t31750 = t31394*t29755;
  t31751 = -1.8e-11*t31388*t29089;
  t31752 = t31749 + t31750 + t31751;
  t31753 = 0.100001*t31752;
  t31754 = t31383*t29774;
  t31755 = t31388*t29753;
  t31756 = -1.000000000009*t31394*t29089;
  t31757 = t31754 + t31755 + t31756;
  t31758 = -0.3*t31757;
  t31759 = t31741 + t31742 + t31743 + t31748 + t31753 + t31758;
  t31954 = t31347*t29715;
  t31955 = t31352*t29722;
  t31956 = t31344*t29750;
  t31959 = t31344*t29753;
  t31960 = t31352*t29755;
  t31963 = -1.8e-11*t31347*t29089;
  t31964 = t31959 + t31960 + t31963;
  t31966 = 0.100001*t31964;
  t31967 = t31352*t29767;
  t31971 = t31347*t29755;
  t31977 = -1.000000000009*t31344*t29089;
  t31979 = t31967 + t31971 + t31977;
  t31981 = 0.2*t31979;
  t31982 = t31344*t29774;
  t31992 = t31347*t29753;
  t31994 = -1.000000000009*t31352*t29089;
  t31996 = t31982 + t31992 + t31994;
  t31997 = -0.3*t31996;
  t31999 = t31954 + t31955 + t31956 + t31966 + t31981 + t31997;
  t31868 = t31473*t29715;
  t31869 = t31480*t29722;
  t31870 = t31468*t29750;
  t31871 = t31468*t29774;
  t31872 = t31473*t29753;
  t31873 = -1.000000000009*t31480*t29089;
  t31874 = t31871 + t31872 + t31873;
  t31875 = -0.3*t31874;
  t31876 = t31468*t29753;
  t31877 = t31480*t29755;
  t31878 = -1.8e-11*t31473*t29089;
  t31880 = t31876 + t31877 + t31878;
  t31881 = 0.100001*t31880;
  t31882 = t31480*t29767;
  t31883 = t31473*t29755;
  t31884 = -1.000000000009*t31468*t29089;
  t31885 = t31882 + t31883 + t31884;
  t31886 = 0.2*t31885;
  t31887 = t31868 + t31869 + t31870 + t31875 + t31881 + t31886;
  t31215 = 0.1000000000009*t27315;
  t31228 = t31216 + t29368;
  t31232 = 0.2*t31228;
  t31236 = -9.e-7*t29753;
  t31240 = t31215 + t31232 + t31236;
  t31242 = -1.62e-17*t27315;
  t31243 = 0.1*t29709;
  t31244 = 0.2*t29753;
  t31245 = t31242 + t31243 + t31244;
  t31249 = t31248 + t29368;
  t31258 = 0.2000000000018*t27315;
  t31259 = t31216 + t29089;
  t31260 = 0.1*t31259;
  t31261 = t31258 + t29717 + t31260;
  t31265 = t31248 + t29089;
  t32058 = t443*t31275;
  t32059 = t31277*t23537*t21674;
  t32061 = t32058 + t32059;
  t32064 = t574*t31763;
  t32065 = 3.e-6*t861*t32061;
  t32067 = t31277*t428*t24001;
  t32068 = t32064 + t32065 + t32067;
  t32071 = t29463*t32061;
  t32072 = -3.e-6*t31277*t428*t24001;
  t32073 = t31766 + t32071 + t32072;
  t32083 = t31277*t428*t29589;
  t32089 = -1.*t31763*t24001;
  t32094 = 3.e-6*t32061*t24001;
  t32095 = t32083 + t32089 + t32094;
  t32111 = t32073*t29715;
  t32112 = t32095*t29722;
  t32113 = t32068*t29750;
  t32114 = t32068*t29753;
  t32115 = t32095*t29755;
  t32116 = -1.8e-11*t32073*t29089;
  t32117 = t32114 + t32115 + t32116;
  t32118 = 0.100001*t32117;
  t32119 = t32095*t29767;
  t32120 = t32073*t29755;
  t32122 = -1.000000000009*t32068*t29089;
  t32123 = t32119 + t32120 + t32122;
  t32124 = 0.2*t32123;
  t32125 = t32068*t29774;
  t32126 = t32073*t29753;
  t32127 = -1.000000000009*t32095*t29089;
  t32128 = t32125 + t32126 + t32127;
  t32129 = -0.3*t32128;
  t32130 = t32111 + t32112 + t32113 + t32118 + t32124 + t32129;
  t32136 = t574*t32061;
  t32137 = t31385 + t32136;
  t32140 = t29463*t31373;
  t32143 = t32140 + t32065;
  t32154 = -1.*t32061*t24001;
  t32156 = t31835 + t32154;
  t32134 = -6.000000000054e-7*t861*t31373;
  t32135 = 0.2000000000018*t861*t32061;
  t32138 = t32137*t29459;
  t32144 = t32143*t29485;
  t32151 = t29579*t32137;
  t32160 = t32156*t29596;
  t32163 = t32143*t29599;
  t32164 = t32151 + t32160 + t32163;
  t32165 = 0.2*t32164;
  t32170 = t29604*t32143;
  t32172 = t32137*t29606;
  t32173 = t32156*t29599;
  t32177 = t32170 + t32172 + t32173;
  t32180 = 0.100001*t32177;
  t32181 = t32156*t29698;
  t32182 = t29579*t32156;
  t32184 = t32143*t29606;
  t32185 = t32137*t29704;
  t32186 = t32182 + t32184 + t32185;
  t32187 = -0.3*t32186;
  t32189 = t32134 + t32135 + t32138 + t32144 + t32165 + t32180 + t32181 + t32187;
  t31280 = 0.2000000000018*t861*t31279;
  t31284 = -6.000000000054e-7*t861*t31283;
  t31285 = 0.2000000000018*t428*t31275*t24001;
  t31290 = t31289*t29459;
  t31295 = t31294*t29485;
  t31296 = t29579*t31289;
  t31301 = t31300*t29596;
  t31302 = t31294*t29599;
  t31303 = t31296 + t31301 + t31302;
  t31304 = 0.2*t31303;
  t31305 = t29604*t31294;
  t31306 = t31289*t29606;
  t31307 = t31300*t29599;
  t31308 = t31305 + t31306 + t31307;
  t31309 = 0.100001*t31308;
  t31310 = t31300*t29698;
  t31311 = t29579*t31300;
  t31312 = t31294*t29606;
  t31313 = t31289*t29704;
  t31314 = t31311 + t31312 + t31313;
  t31315 = -0.3*t31314;
  t32192 = t31280 + t31284 + t31285 + t31290 + t31295 + t31304 + t31309 + t31310 + t31315;
  t32201 = -1.*t31277*t428*t443*t574;
  t32204 = 3.e-6*t31277*t428*t861*t21674;
  t32206 = -1.*t31277*t23537*t24001;
  t32208 = t32201 + t32204 + t32206;
  t32211 = -3.e-6*t31277*t428*t443*t861;
  t32213 = t31277*t428*t29463*t21674;
  t32216 = 3.e-6*t31277*t23537*t24001;
  t32217 = t32211 + t32213 + t32216;
  t32220 = -1.*t31277*t29589*t23537;
  t32221 = t31277*t428*t443*t24001;
  t32222 = 3.e-6*t31277*t428*t21674*t24001;
  t32223 = t32220 + t32221 + t32222;
  t32196 = -0.2000000000018*t31277*t428*t443*t861;
  t32197 = -6.000000000054e-7*t31277*t428*t861*t21674;
  t32200 = 0.2000000000018*t31277*t23537*t24001;
  t32210 = t32208*t29459;
  t32218 = t32217*t29485;
  t32219 = t29579*t32208;
  t32224 = t32223*t29596;
  t32225 = t32217*t29599;
  t32226 = t32219 + t32224 + t32225;
  t32227 = 0.2*t32226;
  t32229 = t29604*t32217;
  t32230 = t32208*t29606;
  t32231 = t32223*t29599;
  t32232 = t32229 + t32230 + t32231;
  t32234 = 0.100001*t32232;
  t32236 = t32223*t29698;
  t32237 = t29579*t32223;
  t32238 = t32217*t29606;
  t32239 = t32208*t29704;
  t32240 = t32237 + t32238 + t32239;
  t32241 = -0.3*t32240;
  t32242 = t32196 + t32197 + t32200 + t32210 + t32218 + t32227 + t32234 + t32236 + t32241;
  t32254 = -3.e-6*t31277*t428*t574;
  t32255 = -9.e-12*t32061*t24001;
  t32256 = t32254 + t31774 + t32255;
  t32250 = t31277*t428*t574;
  t32251 = t32250 + t32089 + t32094;
  t32261 = -1.*t574*t31763;
  t32262 = 3.e-6*t574*t32061;
  t32265 = -1.000000000009*t31277*t428*t24001;
  t32266 = t32261 + t32262 + t32265;
  t32247 = -0.2000000000018*t31277*t428*t574;
  t32248 = 0.2000000000018*t31763*t24001;
  t32249 = -6.000000000054e-7*t32061*t24001;
  t32253 = t32251*t29459;
  t32257 = t32256*t29485;
  t32259 = t29604*t32256;
  t32260 = t32251*t29606;
  t32268 = t32266*t29599;
  t32270 = t32259 + t32260 + t32268;
  t32272 = 0.100001*t32270;
  t32273 = t29579*t32251;
  t32276 = t32266*t29596;
  t32279 = t32256*t29599;
  t32280 = t32273 + t32276 + t32279;
  t32282 = 0.2*t32280;
  t32284 = t32266*t29698;
  t32285 = t29579*t32266;
  t32286 = t32256*t29606;
  t32288 = t32251*t29704;
  t32289 = t32285 + t32286 + t32288;
  t32291 = -0.3*t32289;
  t32293 = t32247 + t32248 + t32249 + t32253 + t32257 + t32272 + t32282 + t32284 + t32291;
  t32336 = t31277*t428*t574*t21674;
  t32337 = t31644 + t32336;
  t32339 = t31277*t428*t443*t29463;
  t32340 = t32339 + t32204;
  t32345 = 3.e-6*t31277*t428*t443*t24001;
  t32346 = -1.*t31277*t428*t21674*t24001;
  t32347 = t32345 + t32346;
  t32375 = t31277*t443*t574*t23537;
  t32376 = -3.e-6*t31277*t861*t23537*t21674;
  t32377 = t32375 + t32376 + t31382;
  t32380 = 3.e-6*t31277*t443*t861*t23537;
  t32382 = -1.*t31277*t29463*t23537*t21674;
  t32383 = t32380 + t32382 + t31387;
  t32390 = -1.*t31277*t443*t23537*t24001;
  t32392 = -3.e-6*t31277*t23537*t21674*t24001;
  t32395 = t31391 + t32390 + t32392;
  t32431 = 3.e-6*t31277*t574*t23537;
  t32433 = -3.e-6*t31277*t428*t443*t24001;
  t32436 = -9.e-12*t31277*t428*t21674*t24001;
  t32438 = t32431 + t32433 + t32436;
  t32427 = -1.*t31277*t574*t23537;
  t32428 = t32427 + t32221 + t32222;
  t32445 = 3.e-6*t31277*t428*t574*t21674;
  t32447 = 1.000000000009*t31277*t23537*t24001;
  t32448 = t31616 + t32445 + t32447;
  t32333 = -6.000000000054e-7*t31277*t428*t443*t861;
  t32334 = 0.2000000000018*t31277*t428*t861*t21674;
  t32338 = t32337*t29459;
  t32342 = t32340*t29485;
  t32343 = t29579*t32337;
  t32348 = t32347*t29596;
  t32349 = t32340*t29599;
  t32351 = t32343 + t32348 + t32349;
  t32353 = 0.2*t32351;
  t32354 = t29604*t32340;
  t32355 = t32337*t29606;
  t32356 = t32347*t29599;
  t32358 = t32354 + t32355 + t32356;
  t32359 = 0.100001*t32358;
  t32360 = t32347*t29698;
  t32362 = t29579*t32347;
  t32363 = t32340*t29606;
  t32364 = t32337*t29704;
  t32365 = t32362 + t32363 + t32364;
  t32366 = -0.3*t32365;
  t32367 = t32333 + t32334 + t32338 + t32342 + t32353 + t32359 + t32360 + t32366;
  t32512 = t31380 + t31381;
  t32515 = t31385 + t31386;
  t32521 = t31392 + t31393;
  t32556 = -9.e-12*t31373*t24001;
  t32560 = t32556 + t32094;
  t32568 = 3.e-6*t574*t31373;
  t32570 = -1.*t574*t32061;
  t32574 = t32568 + t32570;
  t32636 = t32261 + t32262 + t31382;
  t32638 = 3.e-6*t574*t31763;
  t32639 = -9.e-12*t574*t32061;
  t32641 = t32638 + t32639 + t31387;
  t32645 = -1.000000000009*t31277*t428*t574;
  t32646 = t31763*t24001;
  t32647 = -3.e-6*t32061*t24001;
  t32648 = t32645 + t32646 + t32647;
  t32424 = 0.2000000000018*t31277*t574*t23537;
  t32425 = -0.2000000000018*t31277*t428*t443*t24001;
  t32426 = -6.000000000054e-7*t31277*t428*t21674*t24001;
  t32429 = t32428*t29459;
  t32439 = t32438*t29485;
  t32443 = t29604*t32438;
  t32444 = t32428*t29606;
  t32449 = t32448*t29599;
  t32450 = t32443 + t32444 + t32449;
  t32452 = 0.100001*t32450;
  t32453 = t29579*t32428;
  t32456 = t32448*t29596;
  t32457 = t32438*t29599;
  t32458 = t32453 + t32456 + t32457;
  t32459 = 0.2*t32458;
  t32460 = t32448*t29698;
  t32461 = t29579*t32448;
  t32463 = t32438*t29606;
  t32464 = t32428*t29704;
  t32465 = t32461 + t32463 + t32464;
  t32466 = -0.3*t32465;
  t32468 = t32424 + t32425 + t32426 + t32429 + t32439 + t32452 + t32459 + t32460 + t32466;
  t32551 = -6.000000000054e-7*t31373*t24001;
  t32552 = 0.2000000000018*t32061*t24001;
  t32554 = t32156*t29459;
  t32561 = t32560*t29485;
  t32563 = t29604*t32560;
  t32564 = t32156*t29606;
  t32575 = t32574*t29599;
  t32577 = t32563 + t32564 + t32575;
  t32580 = 0.100001*t32577;
  t32581 = t32574*t29596;
  t32582 = t32560*t29599;
  t32583 = t32182 + t32581 + t32582;
  t32584 = 0.2*t32583;
  t32585 = t32574*t29698;
  t32586 = t29579*t32574;
  t32590 = t32560*t29606;
  t32591 = t32156*t29704;
  t32593 = t32586 + t32590 + t32591;
  t32594 = -0.3*t32593;
  t32595 = t32551 + t32552 + t32554 + t32561 + t32580 + t32584 + t32585 + t32594;
  t31336 = var2[8]*t31334;
  t31370 = var2[5]*t31368;
  t31426 = var2[3]*t31424;
  t31463 = var2[4]*t31461;
  t31498 = var2[6]*t31496;
  t32298 = t32217*t29715;
  t32299 = t32223*t29722;
  t32300 = t32208*t29750;
  t32302 = t32223*t29767;
  t32305 = t32217*t29755;
  t32306 = -1.000000000009*t32208*t29089;
  t32308 = t32302 + t32305 + t32306;
  t32310 = 0.2*t32308;
  t32312 = t32208*t29753;
  t32314 = t32223*t29755;
  t32315 = -1.8e-11*t32217*t29089;
  t32318 = t32312 + t32314 + t32315;
  t32321 = 0.100001*t32318;
  t32323 = t32208*t29774;
  t32325 = t32217*t29753;
  t32326 = -1.000000000009*t32223*t29089;
  t32328 = t32323 + t32325 + t32326;
  t32329 = -0.3*t32328;
  t32331 = t32298 + t32299 + t32300 + t32310 + t32321 + t32329;
  t32472 = t32143*t29715;
  t32473 = t32156*t29722;
  t32475 = t32137*t29750;
  t32476 = t32137*t29753;
  t32479 = t32156*t29755;
  t32480 = -1.8e-11*t32143*t29089;
  t32481 = t32476 + t32479 + t32480;
  t32482 = 0.100001*t32481;
  t32484 = t32156*t29767;
  t32486 = t32143*t29755;
  t32487 = -1.000000000009*t32137*t29089;
  t32490 = t32484 + t32486 + t32487;
  t32494 = 0.2*t32490;
  t32495 = t32137*t29774;
  t32497 = t32143*t29753;
  t32498 = -1.000000000009*t32156*t29089;
  t32500 = t32495 + t32497 + t32498;
  t32504 = -0.3*t32500;
  t32507 = t32472 + t32473 + t32475 + t32482 + t32494 + t32504;
  t32602 = t32256*t29715;
  t32605 = t32266*t29722;
  t32606 = t32251*t29750;
  t32607 = t32251*t29774;
  t32608 = t32256*t29753;
  t32609 = -1.000000000009*t32266*t29089;
  t32611 = t32607 + t32608 + t32609;
  t32613 = -0.3*t32611;
  t32614 = t32251*t29753;
  t32615 = t32266*t29755;
  t32616 = -1.8e-11*t32256*t29089;
  t32617 = t32614 + t32615 + t32616;
  t32618 = 0.100001*t32617;
  t32619 = t32266*t29767;
  t32621 = t32256*t29755;
  t32624 = -1.000000000009*t32251*t29089;
  t32626 = t32619 + t32621 + t32624;
  t32627 = 0.2*t32626;
  t32630 = t32602 + t32605 + t32606 + t32613 + t32618 + t32627;
  p_output1[0]=-0.2000000000018*t23537*t24001 + t25954*t29459 + t29466*t29485 + 0.2*(t25954*t29579 + t29594*t29596 + t29466*t29599) + 0.100001*(t29594*t29599 + t29466*t29604 + t25954*t29606) + t29594*t29698 - 0.3*(t29579*t29594 + t29466*t29606 + t25954*t29704) + 6.000000000054e-7*t21674*t428*t861 + 0.2000000000018*t428*t443*t861 + var1[0] + var2[0] + t29850*var2[4] + t29811*var2[5] + t30138*var2[6] + t29780*var2[8] + var2[5]*(t30501*var2[4] + (t30242 + t30243 + t29459*t30246 + t29485*t30295 + t29698*t30343 - 0.3*(t29704*t30246 + t29606*t30295 + t29579*t30343) + 0.2*(t29579*t30246 + t29599*t30295 + t29596*t30343) + 0.100001*(t29606*t30246 + t29604*t30295 + t29599*t30343))*var2[5] + t30550*var2[6] + t30239*var2[8]) + var2[6]*(t31072*var2[4] + t30550*var2[5] + (t30793 + t29459*t30796 + t29485*t30803 + t29698*t30809 - 0.3*(t29704*t30796 + t29606*t30803 + t29579*t30809) + 0.2*(t29579*t30796 + t29599*t30803 + t29596*t30809) + 0.100001*(t29606*t30796 + t29604*t30803 + t29599*t30809) + 6.000000000054e-7*t21674*t428*t574 + 0.2000000000018*t428*t443*t574)*var2[6] + t30781*var2[8]) + var2[4]*((t30242 + t30243 + t30793 + t29459*t31143 + t29485*t31156 + t29698*t31166 - 0.3*(t29704*t31143 + t29606*t31156 + t29579*t31166) + 0.2*(t29579*t31143 + t29599*t31156 + t29596*t31166) + 0.100001*(t29606*t31143 + t29604*t31156 + t29599*t31166))*var2[4] + t30501*var2[5] + t31072*var2[6] + t31130*var2[8]) + var2[8]*(t31130*var2[4] + t30239*var2[5] + t30781*var2[6] + (0.100001*(-1.8e-11*t27315*t29466 + t29594*t29712 + t25954*t29755) + t29594*t31240 + t29466*t31245 - 0.3*(-1.000000000009*t27315*t29594 + t29770 + t25954*t31249) + t25954*t31261 + 0.2*(-1.000000000009*t25954*t27315 + t29466*t29712 + t29594*t31265))*var2[8]) + var3[0] + t29850*var3[4] + t29811*var3[5] + t30138*var3[6] + t29780*var3[8] - 1.*var4[0];
  p_output1[1]=t31280 + t31284 + t31285 + t31290 + t31295 + t31304 + t31309 + t31310 + t31315 + t31336 + t31370 + t31426 + t31463 + t31498 + var1[1] + var2[1] + var2[8]*(t31759*var2[3] + t31517*var2[4] + t31999*var2[5] + t31887*var2[6] + (t31261*t31289 + t31245*t31294 + t31240*t31300 + 0.100001*(t29755*t31289 - 1.8e-11*t27315*t31294 + t29712*t31300) + 0.2*(-1.000000000009*t27315*t31289 + t29712*t31294 + t31265*t31300) - 0.3*(t31249*t31289 - 1.000000000009*t27315*t31300 + t31320))*var2[8]) + var2[4]*(t31684*var2[3] + (t31576 + t29459*t31580 + t29485*t31586 + t29698*t31592 - 0.3*(t29704*t31580 + t29606*t31586 + t29579*t31592) + 0.2*(t29579*t31580 + t29599*t31586 + t29596*t31592) + 0.100001*(t29606*t31580 + t29604*t31586 + t29599*t31592) - 6.000000000054e-7*t21674*t23537*t31275*t861 - 0.2000000000018*t23537*t31275*t443*t861)*var2[4] + t31572*var2[5] + t31729*var2[6] + t31517*var2[8]) + var2[3]*((t31576 + t31794 + t31798 + t29459*t31801 + t29485*t31804 + t29698*t31809 - 0.3*(t29704*t31801 + t29606*t31804 + t29579*t31809) + 0.2*(t29579*t31801 + t29599*t31804 + t29596*t31809) + 0.100001*(t29606*t31801 + t29604*t31804 + t29599*t31809))*var2[3] + t31684*var2[4] + t31792*var2[5] + t31864*var2[6] + t31759*var2[8]) + var2[6]*(t31864*var2[3] + t31729*var2[4] + t31949*var2[5] + (t31576 + t29459*t31891 + t29485*t31895 + t29698*t31901 - 0.3*(t29704*t31891 + t29606*t31895 + t29579*t31901) + 0.2*(t29579*t31891 + t29599*t31895 + t29596*t31901) + 0.100001*(t29606*t31891 + t29604*t31895 + t29599*t31901) + 0.2000000000018*t31279*t574 - 6.000000000054e-7*t31283*t574)*var2[6] + t31887*var2[8]) + var2[5]*(t31792*var2[3] + t31572*var2[4] + (t31794 + t31798 + t29459*t32003 + t29485*t32005 + t29698*t32008 - 0.3*(t29704*t32003 + t29606*t32005 + t29579*t32008) + 0.2*(t29579*t32003 + t29599*t32005 + t29596*t32008) + 0.100001*(t29606*t32003 + t29604*t32005 + t29599*t32008))*var2[5] + t31949*var2[6] + t31999*var2[8]) + var3[1] + t31424*var3[3] + t31461*var3[4] + t31368*var3[5] + t31496*var3[6] + t31334*var3[8] - 1.*var4[1];
  p_output1[2]=t29459*t32068 + t29485*t32073 + t29698*t32095 - 0.3*(t29704*t32068 + t29606*t32073 + t29579*t32095) + 0.2*(t29579*t32068 + t29599*t32073 + t29596*t32095) + 0.100001*(t29606*t32068 + t29604*t32073 + t29599*t32095) - 0.2000000000018*t24001*t31277*t428 + 0.2000000000018*t31763*t861 - 6.000000000054e-7*t32061*t861 + var1[2] + var2[2] + (t31336 + t31370 + t31426 + t31463 + t31498)*var2[3] + t32192*var2[3] + t32242*var2[4] + t32189*var2[5] + t32293*var2[6] + t32130*var2[8] + var2[8]*(t31334*var2[3] + t32331*var2[4] + t32507*var2[5] + t32630*var2[6] + (t31261*t32068 + t31245*t32073 + t31240*t32095 + 0.100001*(t29755*t32068 - 1.8e-11*t27315*t32073 + t29712*t32095) + 0.2*(-1.000000000009*t27315*t32068 + t29712*t32073 + t31265*t32095) - 0.3*(t31249*t32068 - 1.000000000009*t27315*t32095 + t32120))*var2[8]) + var2[4]*(t31461*var2[3] + (t31379 + t29459*t32377 + t29485*t32383 + t29698*t32395 - 0.3*(t29704*t32377 + t29606*t32383 + t29579*t32395) + 0.2*(t29579*t32377 + t29599*t32383 + t29596*t32395) + 0.100001*(t29606*t32377 + t29604*t32383 + t29599*t32395) + 6.000000000054e-7*t21674*t23537*t31277*t861 + 0.2000000000018*t23537*t31277*t443*t861)*var2[4] + t32367*var2[5] + t32468*var2[6] + t32331*var2[8]) + var2[5]*(t31368*var2[3] + t32367*var2[4] + (t31374 + t31378 + t29459*t32512 + t29485*t32515 + t29698*t32521 - 0.3*(t29704*t32512 + t29606*t32515 + t29579*t32521) + 0.2*(t29579*t32512 + t29599*t32515 + t29596*t32521) + 0.100001*(t29606*t32512 + t29604*t32515 + t29599*t32521))*var2[5] + t32595*var2[6] + t32507*var2[8]) + var2[6]*(t31496*var2[3] + t32468*var2[4] + t32595*var2[5] + (t31379 + t29459*t32636 + t29485*t32641 + t29698*t32648 - 0.3*(t29704*t32636 + t29606*t32641 + t29579*t32648) + 0.2*(t29579*t32636 + t29599*t32641 + t29596*t32648) + 0.100001*(t29606*t32636 + t29604*t32641 + t29599*t32648) + 0.2000000000018*t31763*t574 - 6.000000000054e-7*t32061*t574)*var2[6] + t32630*var2[8]) + var3[2] + t32192*var3[3] + t32242*var3[4] + t32189*var3[5] + t32293*var3[6] + t32130*var3[8] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_LeftFrontFoot_FrontStance.hh"

namespace FrontStance
{

void ddh_LeftFrontFoot_FrontStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
