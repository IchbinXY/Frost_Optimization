/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 23:45:46 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1456;
  double t1541;
  double t1594;
  double t1730;
  double t1469;
  double t1824;
  double t1947;
  double t2053;
  double t15620;
  double t17851;
  double t19752;
  double t20503;
  double t23416;
  double t23488;
  double t24209;
  double t2063;
  double t4227;
  double t7833;
  double t11971;
  double t21821;
  double t28607;
  double t28717;
  double t28723;
  double t28977;
  double t29276;
  double t29847;
  double t38392;
  double t30248;
  double t31258;
  double t31271;
  double t31277;
  double t31441;
  double t31561;
  double t35432;
  double t39431;
  double t12089;
  double t30328;
  double t20219;
  double t30748;
  double t31243;
  double t39675;
  double t38184;
  double t39895;
  double t39906;
  double t39916;
  double t39921;
  double t39948;
  double t40080;
  double t40093;
  double t40006;
  double t39907;
  double t39922;
  double t39927;
  double t39941;
  double t39942;
  double t39947;
  double t39949;
  double t39950;
  double t39951;
  double t39952;
  double t39953;
  double t39954;
  double t39961;
  double t39962;
  double t39963;
  double t39964;
  double t40005;
  double t40079;
  double t40081;
  double t40083;
  double t40089;
  double t40090;
  double t40094;
  double t40095;
  double t40096;
  double t40099;
  double t40102;
  double t40103;
  double t40107;
  double t40108;
  double t40109;
  double t40110;
  double t40111;
  double t40112;
  double t40118;
  double t19806;
  double t22585;
  double t22597;
  double t24220;
  double t24371;
  double t29983;
  double t30208;
  double t30501;
  double t30528;
  double t30554;
  double t40140;
  double t40142;
  double t40143;
  double t38228;
  double t40145;
  double t40157;
  double t39654;
  double t39658;
  double t40179;
  double t40184;
  double t40190;
  double t39680;
  double t39681;
  double t39682;
  double t39683;
  double t39684;
  double t39697;
  double t40138;
  double t40139;
  double t40144;
  double t40171;
  double t40172;
  double t40195;
  double t40197;
  double t40203;
  double t40211;
  double t40212;
  double t40236;
  double t40238;
  double t40239;
  double t40241;
  double t40242;
  double t40247;
  double t40248;
  double t40249;
  double t40250;
  double t40252;
  double t40254;
  double t40290;
  double t40313;
  double t40314;
  double t40315;
  double t40318;
  double t40319;
  double t40320;
  double t40322;
  double t40364;
  double t40380;
  double t40424;
  double t40451;
  double t40281;
  double t40283;
  double t40284;
  double t40317;
  double t40323;
  double t40331;
  double t40486;
  double t40492;
  double t40495;
  double t40496;
  double t40502;
  double t40504;
  double t40510;
  double t40634;
  double t40686;
  double t40693;
  double t40702;
  double t40827;
  double t40832;
  double t40898;
  double t40905;
  double t40906;
  double t41229;
  double t41255;
  double t41256;
  double t41263;
  double t41018;
  double t41130;
  double t41277;
  double t41278;
  double t41281;
  double t41314;
  double t40923;
  double t40948;
  double t41007;
  double t41131;
  double t41265;
  double t41268;
  double t41273;
  double t41342;
  double t41346;
  double t41347;
  double t41351;
  double t41355;
  double t41361;
  double t41368;
  double t41374;
  double t41409;
  double t41425;
  double t41429;
  double t41432;
  double t41438;
  double t41439;
  double t41441;
  double t44500;
  double t44584;
  double t44598;
  double t45228;
  double t45547;
  double t48180;
  double t48612;
  double t50004;
  double t50005;
  double t50008;
  double t50106;
  double t50168;
  double t50311;
  double t52442;
  double t52447;
  double t53880;
  double t53881;
  double t54339;
  double t54343;
  double t54350;
  double t54628;
  double t54633;
  double t54636;
  double t54639;
  double t54643;
  double t54644;
  double t55810;
  double t55825;
  double t53866;
  double t53869;
  double t53870;
  double t53882;
  double t54182;
  double t54185;
  double t54359;
  double t54376;
  double t54377;
  double t54396;
  double t54398;
  double t54408;
  double t54411;
  double t54412;
  double t54420;
  double t54426;
  double t54428;
  double t54429;
  double t54430;
  double t54431;
  double t56620;
  double t56645;
  double t56652;
  double t56656;
  double t56605;
  double t56608;
  double t57333;
  double t57345;
  double t57355;
  double t57363;
  double t49987;
  double t49989;
  double t50016;
  double t50224;
  double t50227;
  double t53634;
  double t53645;
  double t53646;
  double t53728;
  double t53751;
  double t53752;
  double t53817;
  double t53823;
  double t53824;
  double t53838;
  double t53840;
  double t53849;
  double t53851;
  double t53858;
  double t53862;
  double t53864;
  double t44216;
  double t44333;
  double t54626;
  double t58134;
  double t58145;
  double t58170;
  double t58171;
  double t56578;
  double t56583;
  double t56591;
  double t56613;
  double t56938;
  double t56943;
  double t57324;
  double t57379;
  double t57380;
  double t57389;
  double t57401;
  double t57402;
  double t57409;
  double t57412;
  double t57414;
  double t57416;
  double t57419;
  double t57421;
  double t57426;
  double t57427;
  double t57430;
  double t57437;
  double t54451;
  double t54458;
  double t54460;
  double t54469;
  double t54475;
  double t54476;
  double t54488;
  double t54489;
  double t54497;
  double t54498;
  double t54505;
  double t54514;
  double t54563;
  double t54564;
  double t54575;
  double t54602;
  double t54603;
  double t54605;
  double t54610;
  double t41447;
  double t41450;
  double t41451;
  double t41456;
  double t41458;
  double t41460;
  double t41462;
  double t41467;
  double t41680;
  double t42895;
  double t43603;
  double t43690;
  double t43691;
  double t43842;
  double t43844;
  double t43845;
  double t43908;
  double t43976;
  double t43982;
  double t57661;
  double t57667;
  double t57967;
  double t57969;
  double t57973;
  double t57978;
  double t58001;
  double t58002;
  double t58061;
  double t58066;
  double t58067;
  double t58068;
  double t58076;
  double t58085;
  double t58090;
  double t58096;
  double t58105;
  double t58110;
  double t58118;
  double t58390;
  double t58493;
  double t59662;
  double t59652;
  double t59653;
  double t59663;
  double t59666;
  double t59685;
  double t59698;
  double t59723;
  double t59728;
  double t59729;
  double t59732;
  double t59734;
  double t59739;
  double t59782;
  double t59802;
  double t59827;
  double t59860;
  double t59861;
  double t59872;
  double t59891;
  double t60016;
  double t60041;
  double t60068;
  double t60069;
  double t60111;
  double t60112;
  double t60113;
  double t60115;
  double t60116;
  double t60117;
  double t60119;
  double t60120;
  double t60132;
  double t60197;
  double t60222;
  double t60239;
  double t60243;
  double t60245;
  double t60246;
  double t60251;
  double t60273;
  double t60303;
  double t60461;
  double t60464;
  double t60526;
  double t60593;
  double t60595;
  double t60600;
  double t60602;
  double t60605;
  double t60326;
  double t60331;
  double t60583;
  double t60596;
  double t60597;
  double t60619;
  double t60623;
  double t60640;
  double t60641;
  double t60642;
  double t60644;
  double t60645;
  double t60646;
  double t60648;
  double t60650;
  double t60651;
  double t60653;
  double t60687;
  double t60688;
  double t60696;
  double t60732;
  double t60792;
  double t60793;
  double t60795;
  double t60807;
  double t60808;
  double t60820;
  double t60884;
  double t60889;
  double t60890;
  double t60891;
  double t60899;
  double t60907;
  double t60909;
  double t60914;
  double t60924;
  double t60930;
  double t60931;
  double t60934;
  double t60805;
  double t60837;
  double t60857;
  double t60898;
  double t60922;
  double t60923;
  double t60935;
  double t60936;
  double t60939;
  double t60942;
  double t60944;
  double t60947;
  double t60965;
  double t60970;
  double t60994;
  double t60998;
  double t61004;
  double t61007;
  double t61058;
  double t61086;
  double t61154;
  double t61160;
  double t61274;
  double t61277;
  double t61286;
  double t61289;
  double t61297;
  double t61299;
  double t61305;
  double t61307;
  double t61329;
  double t61335;
  double t61368;
  double t61370;
  double t61263;
  double t61270;
  double t61271;
  double t61290;
  double t61308;
  double t61315;
  double t61371;
  double t61372;
  double t61380;
  double t61381;
  double t61384;
  double t61385;
  double t61386;
  double t61388;
  double t61390;
  double t61398;
  double t61406;
  double t61419;
  double t61423;
  double t61427;
  double t61442;
  double t61461;
  double t61578;
  double t61581;
  double t61583;
  double t61585;
  double t61575;
  double t61576;
  double t61636;
  double t61637;
  double t61640;
  double t61641;
  double t61518;
  double t61542;
  double t61569;
  double t61577;
  double t61586;
  double t61587;
  double t61616;
  double t61643;
  double t61644;
  double t61645;
  double t61646;
  double t61647;
  double t61652;
  double t61653;
  double t61655;
  double t61658;
  double t61660;
  double t61665;
  double t61667;
  double t61668;
  double t61672;
  double t61682;
  double t61921;
  double t61933;
  double t61967;
  double t61981;
  double t61985;
  double t62003;
  double t62016;
  double t62023;
  double t62078;
  double t62081;
  double t62084;
  double t62101;
  double t62104;
  double t62105;
  double t62121;
  double t62125;
  double t62134;
  double t62148;
  double t62152;
  double t62164;
  double t62282;
  double t62289;
  double t62292;
  double t62295;
  double t62300;
  double t62305;
  double t62308;
  double t62322;
  double t62341;
  double t62346;
  double t62348;
  double t62350;
  double t62477;
  double t62478;
  double t62484;
  double t62487;
  double t62472;
  double t62474;
  double t62494;
  double t62495;
  double t62497;
  double t62500;
  double t62699;
  double t62700;
  double t62701;
  double t62712;
  double t62715;
  double t62717;
  double t62723;
  double t62724;
  double t62732;
  double t62737;
  double t62742;
  double t62075;
  double t62812;
  double t62814;
  double t62820;
  double t62828;
  double t62853;
  double t62858;
  double t62861;
  double t62864;
  double t62886;
  double t62891;
  double t62897;
  double t62271;
  double t62275;
  double t62277;
  double t62297;
  double t62326;
  double t62337;
  double t62358;
  double t62359;
  double t62365;
  double t62374;
  double t62385;
  double t62398;
  double t62404;
  double t62406;
  double t62412;
  double t62413;
  double t62417;
  double t62418;
  double t62424;
  double t62426;
  double t62436;
  double t62442;
  double t63021;
  double t63085;
  double t63092;
  double t63154;
  double t62986;
  double t62999;
  double t63203;
  double t63206;
  double t63212;
  double t63222;
  double t63402;
  double t63406;
  double t63407;
  double t63408;
  double t63412;
  double t63413;
  double t63414;
  double t63415;
  double t62454;
  double t62468;
  double t62471;
  double t62476;
  double t62490;
  double t62491;
  double t62493;
  double t62504;
  double t62505;
  double t62511;
  double t62513;
  double t62519;
  double t62522;
  double t62528;
  double t62533;
  double t62542;
  double t62543;
  double t62547;
  double t62551;
  double t62554;
  double t62555;
  double t62562;
  double t62983;
  double t62984;
  double t62985;
  double t63018;
  double t63193;
  double t63195;
  double t63197;
  double t63230;
  double t63250;
  double t63262;
  double t63264;
  double t63266;
  double t63271;
  double t63274;
  double t63282;
  double t63286;
  double t63288;
  double t63290;
  double t63293;
  double t63295;
  double t63300;
  double t63308;
  double t63513;
  double t63515;
  double t63536;
  double t63540;
  double t63542;
  double t61914;
  double t61917;
  double t61972;
  double t61988;
  double t61999;
  double t62025;
  double t62026;
  double t62028;
  double t62032;
  double t62033;
  double t62034;
  double t62036;
  double t62037;
  double t62043;
  double t62048;
  double t62051;
  double t62052;
  double t62054;
  double t62056;
  double t62057;
  double t62061;
  double t62707;
  double t62709;
  double t62721;
  double t62725;
  double t62729;
  double t62743;
  double t62746;
  double t62763;
  double t62765;
  double t62767;
  double t62769;
  double t62770;
  double t62774;
  double t62775;
  double t62777;
  double t62780;
  double t62782;
  double t62783;
  double t62793;
  double t62794;
  double t62797;
  double t62802;
  double t62827;
  double t63718;
  double t63720;
  double t63726;
  double t63500;
  double t63503;
  double t63509;
  double t63522;
  double t63527;
  double t63532;
  double t63544;
  double t63556;
  double t63558;
  double t63565;
  double t63570;
  double t63574;
  double t63582;
  double t63586;
  double t63587;
  double t63593;
  double t63597;
  double t63613;
  double t63615;
  double t63617;
  double t61698;
  double t61707;
  double t61731;
  double t61741;
  double t61744;
  double t61753;
  double t61754;
  double t61755;
  double t61762;
  double t61764;
  double t61777;
  double t61782;
  double t61797;
  double t61812;
  double t61813;
  double t61832;
  double t61837;
  double t61873;
  double t61886;
  double t62595;
  double t62607;
  double t62619;
  double t62623;
  double t62627;
  double t62632;
  double t62634;
  double t62636;
  double t62642;
  double t62651;
  double t62658;
  double t62660;
  double t62662;
  double t62677;
  double t62679;
  double t62686;
  double t62688;
  double t62693;
  double t62695;
  double t63633;
  double t63634;
  double t63639;
  double t63653;
  double t63656;
  double t63658;
  double t63661;
  double t63663;
  double t63667;
  double t63683;
  double t63685;
  double t63690;
  double t63693;
  double t63694;
  double t63699;
  double t63703;
  double t63706;
  double t63707;
  double t63708;
  double t63319;
  double t63330;
  double t63334;
  double t63338;
  double t63340;
  double t63350;
  double t63353;
  double t63355;
  double t63366;
  double t63367;
  double t63373;
  double t63375;
  double t63378;
  double t63380;
  double t63381;
  double t63383;
  double t63385;
  double t63387;
  double t63394;
  double t58384;
  double t58393;
  double t58396;
  double t58402;
  double t58408;
  double t58420;
  double t58426;
  double t58433;
  double t58444;
  double t58501;
  double t58981;
  double t59055;
  double t59253;
  double t59326;
  double t59489;
  double t63914;
  double t63916;
  double t63918;
  double t63926;
  double t63927;
  double t63929;
  double t63932;
  double t63934;
  double t63936;
  double t63944;
  double t63955;
  double t63967;
  double t63969;
  double t63971;
  double t64026;
  double t64029;
  double t64031;
  double t64039;
  double t64042;
  double t64044;
  double t64045;
  double t64053;
  double t64056;
  double t64058;
  double t64059;
  double t64063;
  double t64065;
  double t64068;
  double t64070;
  double t64071;
  double t64074;
  double t64078;
  double t64081;
  double t64093;
  double t64094;
  double t64097;
  double t64102;
  double t64119;
  double t64120;
  double t64088;
  double t64091;
  double t64095;
  double t64103;
  double t64106;
  double t64123;
  double t64129;
  double t64131;
  double t64134;
  double t64136;
  double t64141;
  double t64143;
  double t64145;
  double t64151;
  double t64154;
  double t64161;
  double t64163;
  double t64164;
  double t64165;
  double t64166;
  double t64171;
  double t59668;
  double t59725;
  double t59726;
  double t59735;
  double t59835;
  double t59837;
  double t59903;
  double t59932;
  double t59935;
  double t59936;
  double t59939;
  double t59944;
  double t59948;
  double t59951;
  double t59953;
  double t59956;
  double t59957;
  double t59970;
  double t60002;
  double t60005;
  double t60010;
  double t64174;
  double t64183;
  double t64184;
  double t64185;
  double t64186;
  double t64189;
  double t64193;
  double t64195;
  double t64199;
  double t64204;
  double t64205;
  double t64206;
  double t64209;
  double t64179;
  double t64180;
  double t64182;
  double t64187;
  double t64200;
  double t64201;
  double t64213;
  double t64215;
  double t64217;
  double t64220;
  double t64221;
  double t64222;
  double t64226;
  double t64228;
  double t64230;
  double t64232;
  double t64234;
  double t64235;
  double t64237;
  double t64242;
  double t64251;
  double t64253;
  double t64292;
  double t64293;
  double t64300;
  double t64281;
  double t64286;
  double t64308;
  double t64309;
  double t64318;
  double t64319;
  double t64273;
  double t64278;
  double t64279;
  double t64289;
  double t64301;
  double t64303;
  double t64306;
  double t64320;
  double t64328;
  double t64338;
  double t64339;
  double t64342;
  double t64351;
  double t64353;
  double t64361;
  double t64366;
  double t64368;
  double t64372;
  double t64377;
  double t64379;
  double t64381;
  double t64387;
  double t64447;
  double t64448;
  double t64462;
  double t64464;
  double t64484;
  double t64486;
  double t64493;
  double t64657;
  double t64658;
  double t64659;
  double t64664;
  double t64666;
  double t64668;
  double t64671;
  double t64672;
  double t64673;
  double t64830;
  double t64831;
  double t64833;
  double t64834;
  double t64826;
  double t64827;
  double t64839;
  double t64843;
  double t64845;
  double t64441;
  double t64443;
  double t64452;
  double t64474;
  double t64476;
  double t64495;
  double t64502;
  double t64539;
  double t64583;
  double t64607;
  double t64614;
  double t64627;
  double t64633;
  double t64640;
  double t64643;
  double t64644;
  double t64646;
  double t64647;
  double t64649;
  double t64650;
  double t64652;
  double t65028;
  double t65040;
  double t65052;
  double t65213;
  double t65227;
  double t65257;
  double t65305;
  double t65306;
  double t65432;
  double t65438;
  double t65439;
  double t65442;
  double t65449;
  double t65450;
  double t65452;
  double t65453;
  double t64820;
  double t64824;
  double t64825;
  double t64828;
  double t64836;
  double t64837;
  double t64838;
  double t64857;
  double t64860;
  double t64862;
  double t64863;
  double t64865;
  double t64875;
  double t64876;
  double t64877;
  double t64879;
  double t64880;
  double t64882;
  double t64884;
  double t64900;
  double t64962;
  double t64964;
  double t65203;
  double t65204;
  double t65205;
  double t65228;
  double t65234;
  double t65256;
  double t65307;
  double t65308;
  double t65311;
  double t65312;
  double t65313;
  double t65314;
  double t65317;
  double t65323;
  double t65325;
  double t65328;
  double t65331;
  double t65336;
  double t65339;
  double t65342;
  double t60249;
  double t60791;
  double t61260;
  double t61496;
  double t61688;
  double t64390;
  double t64391;
  double t64392;
  double t64394;
  double t64397;
  double t64398;
  double t64399;
  double t64401;
  double t64402;
  double t64404;
  double t64406;
  double t64408;
  double t64410;
  double t64412;
  double t64414;
  double t64415;
  double t64421;
  double t64424;
  double t64428;
  double t64970;
  double t64971;
  double t64972;
  double t64974;
  double t64976;
  double t64982;
  double t64983;
  double t64987;
  double t64988;
  double t64989;
  double t64994;
  double t64997;
  double t65002;
  double t65003;
  double t65004;
  double t65006;
  double t65007;
  double t65010;
  double t65014;
  double t65352;
  double t65354;
  double t65355;
  double t65365;
  double t65368;
  double t65370;
  double t65379;
  double t65382;
  double t65383;
  double t65384;
  double t65393;
  double t65414;
  double t65418;
  double t65419;
  double t65420;
  double t65421;
  double t65422;
  double t65424;
  double t65425;
  t1456 = Cos(var1[4]);
  t1541 = Cos(var1[6]);
  t1594 = -1.*t1541;
  t1730 = 1. + t1594;
  t1469 = Cos(var1[5]);
  t1824 = Sin(var1[5]);
  t1947 = Sin(var1[4]);
  t2053 = Sin(var1[6]);
  t15620 = Cos(var1[8]);
  t17851 = -1.*t15620;
  t19752 = 1. + t17851;
  t20503 = Sin(var1[8]);
  t23416 = -3.e-6*t19752;
  t23488 = 3.e-6*t20503;
  t24209 = t23416 + t23488;
  t2063 = t1456*t1469*t1541;
  t4227 = -3.e-6*t1456*t1730*t1824;
  t7833 = t1947*t2053;
  t11971 = t2063 + t4227 + t7833;
  t21821 = -1.*t20503;
  t28607 = 3.e-6*t1456*t1469*t1730;
  t28717 = -9.e-12*t1730;
  t28723 = 1. + t28717;
  t28977 = -1.*t1456*t28723*t1824;
  t29276 = -3.e-6*t1947*t2053;
  t29847 = t28607 + t28977 + t29276;
  t38392 = 3.e-6*t19752;
  t30248 = -3.e-6*t20503;
  t31258 = -1.000000000009*t1730;
  t31271 = 1. + t31258;
  t31277 = t31271*t1947;
  t31441 = -1.*t1456*t1469*t2053;
  t31561 = -3.e-6*t1456*t1824*t2053;
  t35432 = t31277 + t31441 + t31561;
  t39431 = t38392 + t23488;
  t12089 = 9.e-13*var1[8];
  t30328 = t23416 + t30248;
  t20219 = -9.e-12*t19752;
  t30748 = -1.000000000009*t19752;
  t31243 = 1. + t30748;
  t39675 = t38392 + t30248;
  t38184 = 9.e-12*t19752;
  t39895 = -3.e-6*t15620;
  t39906 = t39895 + t30248;
  t39916 = 3.e-6*t15620;
  t39921 = t39916 + t30248;
  t39948 = -9.e-12*t20503;
  t40080 = t39916 + t23488;
  t40093 = 9.e-12*t20503;
  t40006 = t39895 + t23488;
  t39907 = 0.2*t39906;
  t39922 = 0.1*t39921;
  t39927 = -1.62e-17*t20503;
  t39941 = 3.e-7 + t39907 + t39922 + t39927;
  t39942 = t29847*t39941;
  t39947 = -9.e-7*t39906;
  t39949 = t15620 + t39948;
  t39950 = 0.2*t39949;
  t39951 = 0.1000000000009*t20503;
  t39952 = 9.e-13 + t39947 + t39950 + t39951;
  t39953 = t35432*t39952;
  t39954 = -9.e-7*t39921;
  t39961 = t17851 + t39948;
  t39962 = 0.1*t39961;
  t39963 = 0.2000000000018*t20503;
  t39964 = 9.e-13 + t39954 + t39962 + t39963;
  t40005 = t11971*t39964;
  t40079 = t11971*t40006;
  t40081 = t35432*t40080;
  t40083 = -1.8e-11*t29847*t20503;
  t40089 = t40079 + t40081 + t40083;
  t40090 = 0.100001*t40089;
  t40094 = t17851 + t40093;
  t40095 = t35432*t40094;
  t40096 = t29847*t40080;
  t40099 = -1.000000000009*t11971*t20503;
  t40102 = t40095 + t40096 + t40099;
  t40103 = 0.2*t40102;
  t40107 = t15620 + t40093;
  t40108 = t11971*t40107;
  t40109 = t29847*t40006;
  t40110 = -1.000000000009*t35432*t20503;
  t40111 = t40108 + t40109 + t40110;
  t40112 = -0.3*t40111;
  t40118 = t39942 + t39953 + t40005 + t40090 + t40103 + t40112;
  t19806 = 0.2000000000018*t19752;
  t22585 = t20219 + t21821;
  t22597 = 0.1*t22585;
  t24220 = -9.e-7*t24209;
  t24371 = t12089 + t19806 + t22597 + t24220;
  t29983 = 3.e-7*var1[8];
  t30208 = -1.62e-17*t19752;
  t30501 = 0.2*t30328;
  t30528 = 0.1*t24209;
  t30554 = t29983 + t30208 + t30501 + t30528;
  t40140 = -3.e-6*t1456*t1469*t1730;
  t40142 = -1.*t1456*t1541*t1824;
  t40143 = t40140 + t40142;
  t38228 = t38184 + t21821;
  t40145 = -1.*t1456*t1469*t28723;
  t40157 = t40145 + t4227;
  t39654 = -1.8e-11*t19752;
  t39658 = 1. + t39654;
  t40179 = -3.e-6*t1456*t1469*t2053;
  t40184 = t1456*t1824*t2053;
  t40190 = t40179 + t40184;
  t39680 = 0.1000000000009*t19752;
  t39681 = -9.e-7*t30328;
  t39682 = t20219 + t20503;
  t39683 = 0.2*t39682;
  t39684 = t12089 + t39680 + t39681 + t39683;
  t39697 = t38184 + t20503;
  t40138 = 6.000000000054e-7*t1456*t1469*t1730;
  t40139 = -0.2000000000018*t1456*t1730*t1824;
  t40144 = t40143*t24371;
  t40171 = t40157*t30554;
  t40172 = t31243*t40143;
  t40195 = t40190*t38228;
  t40197 = t40157*t39431;
  t40203 = t40172 + t40195 + t40197;
  t40211 = 0.2*t40203;
  t40212 = t39658*t40157;
  t40236 = t40143*t39675;
  t40238 = t40190*t39431;
  t40239 = t40212 + t40236 + t40238;
  t40241 = 0.100001*t40239;
  t40242 = t40190*t39684;
  t40247 = t31243*t40190;
  t40248 = t40157*t39675;
  t40249 = t40143*t39697;
  t40250 = t40247 + t40248 + t40249;
  t40252 = -0.3*t40250;
  t40254 = t40138 + t40139 + t40144 + t40171 + t40211 + t40241 + t40242 + t40252;
  t40290 = -1.*t1469*t1541*t1947;
  t40313 = 3.e-6*t1730*t1947*t1824;
  t40314 = t1456*t2053;
  t40315 = t40290 + t40313 + t40314;
  t40318 = -3.e-6*t1469*t1730*t1947;
  t40319 = t28723*t1947*t1824;
  t40320 = -3.e-6*t1456*t2053;
  t40322 = t40318 + t40319 + t40320;
  t40364 = t1456*t31271;
  t40380 = t1469*t1947*t2053;
  t40424 = 3.e-6*t1947*t1824*t2053;
  t40451 = t40364 + t40380 + t40424;
  t40281 = -0.2000000000018*t1469*t1730*t1947;
  t40283 = -6.000000000054e-7*t1730*t1947*t1824;
  t40284 = -0.2000000000018*t1456*t2053;
  t40317 = t40315*t24371;
  t40323 = t40322*t30554;
  t40331 = t31243*t40315;
  t40486 = t40451*t38228;
  t40492 = t40322*t39431;
  t40495 = t40331 + t40486 + t40492;
  t40496 = 0.2*t40495;
  t40502 = t39658*t40322;
  t40504 = t40315*t39675;
  t40510 = t40451*t39431;
  t40634 = t40502 + t40504 + t40510;
  t40686 = 0.100001*t40634;
  t40693 = t40451*t39684;
  t40702 = t31243*t40451;
  t40827 = t40322*t39675;
  t40832 = t40315*t39697;
  t40898 = t40702 + t40827 + t40832;
  t40905 = -0.3*t40898;
  t40906 = t40281 + t40283 + t40284 + t40317 + t40323 + t40496 + t40686 + t40693 + t40905;
  t41229 = -3.e-6*t1541*t1947;
  t41255 = 3.e-6*t1456*t1469*t2053;
  t41256 = 9.e-12*t1456*t1824*t2053;
  t41263 = t41229 + t41255 + t41256;
  t41018 = t1541*t1947;
  t41130 = t41018 + t31441 + t31561;
  t41277 = -1.*t1456*t1469*t1541;
  t41278 = -3.e-6*t1456*t1541*t1824;
  t41281 = -1.000000000009*t1947*t2053;
  t41314 = t41277 + t41278 + t41281;
  t40923 = -0.2000000000018*t1541*t1947;
  t40948 = 0.2000000000018*t1456*t1469*t2053;
  t41007 = 6.000000000054e-7*t1456*t1824*t2053;
  t41131 = t41130*t24371;
  t41265 = t41263*t30554;
  t41268 = t39658*t41263;
  t41273 = t41130*t39675;
  t41342 = t41314*t39431;
  t41346 = t41268 + t41273 + t41342;
  t41347 = 0.100001*t41346;
  t41351 = t31243*t41130;
  t41355 = t41314*t38228;
  t41361 = t41263*t39431;
  t41368 = t41351 + t41355 + t41361;
  t41374 = 0.2*t41368;
  t41409 = t41314*t39684;
  t41425 = t31243*t41314;
  t41429 = t41263*t39675;
  t41432 = t41130*t39697;
  t41438 = t41425 + t41429 + t41432;
  t41439 = -0.3*t41438;
  t41441 = t40923 + t40948 + t41007 + t41131 + t41265 + t41347 + t41374 + t41409 + t41439;
  t44500 = 3.e-6*t1456*t1730*t1824;
  t44584 = t41277 + t44500;
  t44598 = t1456*t28723*t1824;
  t45228 = t40140 + t44598;
  t45547 = t1456*t1469*t2053;
  t48180 = 3.e-6*t1456*t1824*t2053;
  t48612 = t45547 + t48180;
  t50004 = 3.e-6*t1469*t1730*t1947;
  t50005 = t1541*t1947*t1824;
  t50008 = t50004 + t50005;
  t50106 = t1469*t28723*t1947;
  t50168 = t50106 + t40313;
  t50311 = 3.e-6*t1469*t1947*t2053;
  t52442 = -1.*t1947*t1824*t2053;
  t52447 = t50311 + t52442;
  t53880 = 9.e-12*t1456*t1469*t2053;
  t53881 = t53880 + t31561;
  t54339 = -3.e-6*t1456*t1469*t1541;
  t54343 = t1456*t1541*t1824;
  t54350 = t54339 + t54343;
  t54628 = -1.*t1947*t2053;
  t54633 = t41277 + t41278 + t54628;
  t54636 = 3.e-6*t1456*t1469*t1541;
  t54639 = 9.e-12*t1456*t1541*t1824;
  t54643 = 3.e-6*t1947*t2053;
  t54644 = t54636 + t54639 + t54643;
  t55810 = -1.000000000009*t1541*t1947;
  t55825 = t55810 + t45547 + t48180;
  t53866 = 6.000000000054e-7*t1456*t1469*t2053;
  t53869 = -0.2000000000018*t1456*t1824*t2053;
  t53870 = t40190*t24371;
  t53882 = t53881*t30554;
  t54182 = t39658*t53881;
  t54185 = t40190*t39675;
  t54359 = t54350*t39431;
  t54376 = t54182 + t54185 + t54359;
  t54377 = 0.100001*t54376;
  t54396 = t54350*t38228;
  t54398 = t53881*t39431;
  t54408 = t40247 + t54396 + t54398;
  t54411 = 0.2*t54408;
  t54412 = t54350*t39684;
  t54420 = t31243*t54350;
  t54426 = t53881*t39675;
  t54428 = t40190*t39697;
  t54429 = t54420 + t54426 + t54428;
  t54430 = -0.3*t54429;
  t54431 = t53866 + t53869 + t53870 + t53882 + t54377 + t54411 + t54412 + t54430;
  t56620 = -3.e-6*t1456*t1541;
  t56645 = -3.e-6*t1469*t1947*t2053;
  t56652 = -9.e-12*t1947*t1824*t2053;
  t56656 = t56620 + t56645 + t56652;
  t56605 = t1456*t1541;
  t56608 = t56605 + t40380 + t40424;
  t57333 = t1469*t1541*t1947;
  t57345 = 3.e-6*t1541*t1947*t1824;
  t57355 = -1.000000000009*t1456*t2053;
  t57363 = t57333 + t57345 + t57355;
  t49987 = -6.000000000054e-7*t1469*t1730*t1947;
  t49989 = 0.2000000000018*t1730*t1947*t1824;
  t50016 = t50008*t24371;
  t50224 = t50168*t30554;
  t50227 = t31243*t50008;
  t53634 = t52447*t38228;
  t53645 = t50168*t39431;
  t53646 = t50227 + t53634 + t53645;
  t53728 = 0.2*t53646;
  t53751 = t39658*t50168;
  t53752 = t50008*t39675;
  t53817 = t52447*t39431;
  t53823 = t53751 + t53752 + t53817;
  t53824 = 0.100001*t53823;
  t53838 = t52447*t39684;
  t53840 = t31243*t52447;
  t53849 = t50168*t39675;
  t53851 = t50008*t39697;
  t53858 = t53840 + t53849 + t53851;
  t53862 = -0.3*t53858;
  t53864 = t49987 + t49989 + t50016 + t50224 + t53728 + t53824 + t53838 + t53862;
  t44216 = -0.2000000000018*t1456*t1469*t1730;
  t44333 = -6.000000000054e-7*t1456*t1730*t1824;
  t54626 = 0.2000000000018*t1947*t2053;
  t58134 = t41277 + t44500 + t54628;
  t58145 = t40140 + t44598 + t54643;
  t58170 = -1.*t31271*t1947;
  t58171 = t58170 + t45547 + t48180;
  t56578 = -0.2000000000018*t1456*t1541;
  t56583 = -0.2000000000018*t1469*t1947*t2053;
  t56591 = -6.000000000054e-7*t1947*t1824*t2053;
  t56613 = t56608*t24371;
  t56938 = t56656*t30554;
  t56943 = t39658*t56656;
  t57324 = t56608*t39675;
  t57379 = t57363*t39431;
  t57380 = t56943 + t57324 + t57379;
  t57389 = 0.100001*t57380;
  t57401 = t31243*t56608;
  t57402 = t57363*t38228;
  t57409 = t56656*t39431;
  t57412 = t57401 + t57402 + t57409;
  t57414 = 0.2*t57412;
  t57416 = t57363*t39684;
  t57419 = t31243*t57363;
  t57421 = t56656*t39675;
  t57426 = t56608*t39697;
  t57427 = t57419 + t57421 + t57426;
  t57430 = -0.3*t57427;
  t57437 = t56578 + t56583 + t56591 + t56613 + t56938 + t57389 + t57414 + t57416 + t57430;
  t54451 = t41263*t39941;
  t54458 = t41314*t39952;
  t54460 = t41130*t39964;
  t54469 = t41130*t40107;
  t54475 = t41263*t40006;
  t54476 = -1.000000000009*t41314*t20503;
  t54488 = t54469 + t54475 + t54476;
  t54489 = -0.3*t54488;
  t54497 = t41314*t40094;
  t54498 = t41263*t40080;
  t54505 = -1.000000000009*t41130*t20503;
  t54514 = t54497 + t54498 + t54505;
  t54563 = 0.2*t54514;
  t54564 = t41130*t40006;
  t54575 = t41314*t40080;
  t54602 = -1.8e-11*t41263*t20503;
  t54603 = t54564 + t54575 + t54602;
  t54605 = 0.100001*t54603;
  t54610 = t54451 + t54458 + t54460 + t54489 + t54563 + t54605;
  t41447 = t40157*t39941;
  t41450 = t40190*t39952;
  t41451 = t40143*t39964;
  t41456 = t40143*t40006;
  t41458 = t40190*t40080;
  t41460 = -1.8e-11*t40157*t20503;
  t41462 = t41456 + t41458 + t41460;
  t41467 = 0.100001*t41462;
  t41680 = t40190*t40094;
  t42895 = t40157*t40080;
  t43603 = -1.000000000009*t40143*t20503;
  t43690 = t41680 + t42895 + t43603;
  t43691 = 0.2*t43690;
  t43842 = t40143*t40107;
  t43844 = t40157*t40006;
  t43845 = -1.000000000009*t40190*t20503;
  t43908 = t43842 + t43844 + t43845;
  t43976 = -0.3*t43908;
  t43982 = t41447 + t41450 + t41451 + t41467 + t43691 + t43976;
  t57661 = t40322*t39941;
  t57667 = t40451*t39952;
  t57967 = t40315*t39964;
  t57969 = t40315*t40006;
  t57973 = t40451*t40080;
  t57978 = -1.8e-11*t40322*t20503;
  t58001 = t57969 + t57973 + t57978;
  t58002 = 0.100001*t58001;
  t58061 = t40451*t40094;
  t58066 = t40322*t40080;
  t58067 = -1.000000000009*t40315*t20503;
  t58068 = t58061 + t58066 + t58067;
  t58076 = 0.2*t58068;
  t58085 = t40315*t40107;
  t58090 = t40322*t40006;
  t58096 = -1.000000000009*t40451*t20503;
  t58105 = t58085 + t58090 + t58096;
  t58110 = -0.3*t58105;
  t58118 = t57661 + t57667 + t57967 + t58002 + t58076 + t58110;
  t58390 = -9.e-12*t15620;
  t58493 = 9.e-12*t15620;
  t59662 = Cos(var1[3]);
  t59652 = Sin(var1[3]);
  t59653 = t1469*t59652*t1947;
  t59663 = t59662*t1824;
  t59666 = t59653 + t59663;
  t59685 = t59662*t1469;
  t59698 = -1.*t59652*t1947*t1824;
  t59723 = t59685 + t59698;
  t59728 = t1541*t59666;
  t59729 = 3.e-6*t1730*t59723;
  t59732 = -1.*t1456*t59652*t2053;
  t59734 = t59728 + t59729 + t59732;
  t59739 = 3.e-6*t1730*t59666;
  t59782 = t28723*t59723;
  t59802 = 3.e-6*t1456*t59652*t2053;
  t59827 = t59739 + t59782 + t59802;
  t59860 = -1.*t1456*t31271*t59652;
  t59861 = -1.*t59666*t2053;
  t59872 = 3.e-6*t59723*t2053;
  t59891 = t59860 + t59861 + t59872;
  t60016 = t59827*t39941;
  t60041 = t59891*t39952;
  t60068 = t59734*t39964;
  t60069 = t59891*t40094;
  t60111 = t59827*t40080;
  t60112 = -1.000000000009*t59734*t20503;
  t60113 = t60069 + t60111 + t60112;
  t60115 = 0.2*t60113;
  t60116 = t59734*t40006;
  t60117 = t59891*t40080;
  t60119 = -1.8e-11*t59827*t20503;
  t60120 = t60116 + t60117 + t60119;
  t60132 = 0.100001*t60120;
  t60197 = t59734*t40107;
  t60222 = t59827*t40006;
  t60239 = -1.000000000009*t59891*t20503;
  t60243 = t60197 + t60222 + t60239;
  t60245 = -0.3*t60243;
  t60246 = t60016 + t60041 + t60068 + t60115 + t60132 + t60245;
  t60251 = -1.*t1469*t59652*t1947;
  t60273 = -1.*t59662*t1824;
  t60303 = t60251 + t60273;
  t60461 = 3.e-6*t1730*t60303;
  t60464 = t1541*t59723;
  t60526 = t60461 + t60464;
  t60593 = t28723*t60303;
  t60595 = t60593 + t59729;
  t60600 = 3.e-6*t60303*t2053;
  t60602 = -1.*t59723*t2053;
  t60605 = t60600 + t60602;
  t60326 = -6.000000000054e-7*t1730*t60303;
  t60331 = 0.2000000000018*t1730*t59723;
  t60583 = t60526*t24371;
  t60596 = t60595*t30554;
  t60597 = t31243*t60526;
  t60619 = t60605*t38228;
  t60623 = t60595*t39431;
  t60640 = t60597 + t60619 + t60623;
  t60641 = 0.2*t60640;
  t60642 = t39658*t60595;
  t60644 = t60526*t39675;
  t60645 = t60605*t39431;
  t60646 = t60642 + t60644 + t60645;
  t60648 = 0.100001*t60646;
  t60650 = t60605*t39684;
  t60651 = t31243*t60605;
  t60653 = t60595*t39675;
  t60687 = t60526*t39697;
  t60688 = t60651 + t60653 + t60687;
  t60696 = -0.3*t60688;
  t60732 = t60326 + t60331 + t60583 + t60596 + t60641 + t60648 + t60650 + t60696;
  t60792 = t59662*t1469*t1947;
  t60793 = -1.*t59652*t1824;
  t60795 = t60792 + t60793;
  t60807 = -1.*t1469*t59652;
  t60808 = -1.*t59662*t1947*t1824;
  t60820 = t60807 + t60808;
  t60884 = t1541*t60795;
  t60889 = 3.e-6*t1730*t60820;
  t60890 = -1.*t59662*t1456*t2053;
  t60891 = t60884 + t60889 + t60890;
  t60899 = 3.e-6*t1730*t60795;
  t60907 = t28723*t60820;
  t60909 = 3.e-6*t59662*t1456*t2053;
  t60914 = t60899 + t60907 + t60909;
  t60924 = -1.*t59662*t1456*t31271;
  t60930 = -1.*t60795*t2053;
  t60931 = 3.e-6*t60820*t2053;
  t60934 = t60924 + t60930 + t60931;
  t60805 = 0.2000000000018*t1730*t60795;
  t60837 = -6.000000000054e-7*t1730*t60820;
  t60857 = 0.2000000000018*t59662*t1456*t2053;
  t60898 = t60891*t24371;
  t60922 = t60914*t30554;
  t60923 = t31243*t60891;
  t60935 = t60934*t38228;
  t60936 = t60914*t39431;
  t60939 = t60923 + t60935 + t60936;
  t60942 = 0.2*t60939;
  t60944 = t39658*t60914;
  t60947 = t60891*t39675;
  t60965 = t60934*t39431;
  t60970 = t60944 + t60947 + t60965;
  t60994 = 0.100001*t60970;
  t60998 = t60934*t39684;
  t61004 = t31243*t60934;
  t61007 = t60914*t39675;
  t61058 = t60891*t39697;
  t61086 = t61004 + t61007 + t61058;
  t61154 = -0.3*t61086;
  t61160 = t60805 + t60837 + t60857 + t60898 + t60922 + t60942 + t60994 + t60998 + t61154;
  t61274 = t1456*t1469*t1541*t59652;
  t61277 = -3.e-6*t1456*t1730*t59652*t1824;
  t61286 = t59652*t1947*t2053;
  t61289 = t61274 + t61277 + t61286;
  t61297 = 3.e-6*t1456*t1469*t1730*t59652;
  t61299 = -1.*t1456*t28723*t59652*t1824;
  t61305 = -3.e-6*t59652*t1947*t2053;
  t61307 = t61297 + t61299 + t61305;
  t61329 = t31271*t59652*t1947;
  t61335 = -1.*t1456*t1469*t59652*t2053;
  t61368 = -3.e-6*t1456*t59652*t1824*t2053;
  t61370 = t61329 + t61335 + t61368;
  t61263 = 0.2000000000018*t1456*t1469*t1730*t59652;
  t61270 = 6.000000000054e-7*t1456*t1730*t59652*t1824;
  t61271 = -0.2000000000018*t59652*t1947*t2053;
  t61290 = t61289*t24371;
  t61308 = t61307*t30554;
  t61315 = t31243*t61289;
  t61371 = t61370*t38228;
  t61372 = t61307*t39431;
  t61380 = t61315 + t61371 + t61372;
  t61381 = 0.2*t61380;
  t61384 = t39658*t61307;
  t61385 = t61289*t39675;
  t61386 = t61370*t39431;
  t61388 = t61384 + t61385 + t61386;
  t61390 = 0.100001*t61388;
  t61398 = t61370*t39684;
  t61406 = t31243*t61370;
  t61419 = t61307*t39675;
  t61423 = t61289*t39697;
  t61427 = t61406 + t61419 + t61423;
  t61442 = -0.3*t61427;
  t61461 = t61263 + t61270 + t61271 + t61290 + t61308 + t61381 + t61390 + t61398 + t61442;
  t61578 = 3.e-6*t1456*t1541*t59652;
  t61581 = 3.e-6*t59666*t2053;
  t61583 = -9.e-12*t59723*t2053;
  t61585 = t61578 + t61581 + t61583;
  t61575 = -1.*t1456*t1541*t59652;
  t61576 = t61575 + t59861 + t59872;
  t61636 = -1.*t1541*t59666;
  t61637 = 3.e-6*t1541*t59723;
  t61640 = 1.000000000009*t1456*t59652*t2053;
  t61641 = t61636 + t61637 + t61640;
  t61518 = 0.2000000000018*t1456*t1541*t59652;
  t61542 = 0.2000000000018*t59666*t2053;
  t61569 = -6.000000000054e-7*t59723*t2053;
  t61577 = t61576*t24371;
  t61586 = t61585*t30554;
  t61587 = t39658*t61585;
  t61616 = t61576*t39675;
  t61643 = t61641*t39431;
  t61644 = t61587 + t61616 + t61643;
  t61645 = 0.100001*t61644;
  t61646 = t31243*t61576;
  t61647 = t61641*t38228;
  t61652 = t61585*t39431;
  t61653 = t61646 + t61647 + t61652;
  t61655 = 0.2*t61653;
  t61658 = t61641*t39684;
  t61660 = t31243*t61641;
  t61665 = t61585*t39675;
  t61667 = t61576*t39697;
  t61668 = t61660 + t61665 + t61667;
  t61672 = -0.3*t61668;
  t61682 = t61518 + t61542 + t61569 + t61577 + t61586 + t61645 + t61655 + t61658 + t61672;
  t61921 = -3.e-6*t1456*t1469*t1730*t59652;
  t61933 = -1.*t1456*t1541*t59652*t1824;
  t61967 = t61921 + t61933;
  t61981 = -1.*t1456*t1469*t28723*t59652;
  t61985 = t61981 + t61277;
  t62003 = -3.e-6*t1456*t1469*t59652*t2053;
  t62016 = t1456*t59652*t1824*t2053;
  t62023 = t62003 + t62016;
  t62078 = -1.*t1469*t1541*t59652*t1947;
  t62081 = 3.e-6*t1730*t59652*t1947*t1824;
  t62084 = t1456*t59652*t2053;
  t62101 = t62078 + t62081 + t62084;
  t62104 = -3.e-6*t1469*t1730*t59652*t1947;
  t62105 = t28723*t59652*t1947*t1824;
  t62121 = -3.e-6*t1456*t59652*t2053;
  t62125 = t62104 + t62105 + t62121;
  t62134 = t1456*t31271*t59652;
  t62148 = t1469*t59652*t1947*t2053;
  t62152 = 3.e-6*t59652*t1947*t1824*t2053;
  t62164 = t62134 + t62148 + t62152;
  t62282 = t59662*t1456*t1469*t1541;
  t62289 = -3.e-6*t59662*t1456*t1730*t1824;
  t62292 = t59662*t1947*t2053;
  t62295 = t62282 + t62289 + t62292;
  t62300 = 3.e-6*t59662*t1456*t1469*t1730;
  t62305 = -1.*t59662*t1456*t28723*t1824;
  t62308 = -3.e-6*t59662*t1947*t2053;
  t62322 = t62300 + t62305 + t62308;
  t62341 = t59662*t31271*t1947;
  t62346 = -1.*t59662*t1456*t1469*t2053;
  t62348 = -3.e-6*t59662*t1456*t1824*t2053;
  t62350 = t62341 + t62346 + t62348;
  t62477 = -3.e-6*t1541*t59652*t1947;
  t62478 = 3.e-6*t1456*t1469*t59652*t2053;
  t62484 = 9.e-12*t1456*t59652*t1824*t2053;
  t62487 = t62477 + t62478 + t62484;
  t62472 = t1541*t59652*t1947;
  t62474 = t62472 + t61335 + t61368;
  t62494 = -1.*t1456*t1469*t1541*t59652;
  t62495 = -3.e-6*t1456*t1541*t59652*t1824;
  t62497 = -1.000000000009*t59652*t1947*t2053;
  t62500 = t62494 + t62495 + t62497;
  t62699 = -1.*t59662*t1469*t1947;
  t62700 = t59652*t1824;
  t62701 = t62699 + t62700;
  t62712 = 3.e-6*t1730*t62701;
  t62715 = t1541*t60820;
  t62717 = t62712 + t62715;
  t62723 = t28723*t62701;
  t62724 = t62723 + t60889;
  t62732 = 3.e-6*t62701*t2053;
  t62737 = -1.*t60820*t2053;
  t62742 = t62732 + t62737;
  t62075 = -0.2000000000018*t1456*t59652*t2053;
  t62812 = -1.*t59662*t1469;
  t62814 = t59652*t1947*t1824;
  t62820 = t62812 + t62814;
  t62828 = t1541*t60303;
  t62853 = 3.e-6*t1730*t62820;
  t62858 = t62828 + t62853 + t62084;
  t62861 = t28723*t62820;
  t62864 = t60461 + t62861 + t62121;
  t62886 = -1.*t60303*t2053;
  t62891 = 3.e-6*t62820*t2053;
  t62897 = t62134 + t62886 + t62891;
  t62271 = 0.2000000000018*t59662*t1456*t1469*t1730;
  t62275 = 6.000000000054e-7*t59662*t1456*t1730*t1824;
  t62277 = -0.2000000000018*t59662*t1947*t2053;
  t62297 = t62295*t24371;
  t62326 = t62322*t30554;
  t62337 = t31243*t62295;
  t62358 = t62350*t38228;
  t62359 = t62322*t39431;
  t62365 = t62337 + t62358 + t62359;
  t62374 = 0.2*t62365;
  t62385 = t39658*t62322;
  t62398 = t62295*t39675;
  t62404 = t62350*t39431;
  t62406 = t62385 + t62398 + t62404;
  t62412 = 0.100001*t62406;
  t62413 = t62350*t39684;
  t62417 = t31243*t62350;
  t62418 = t62322*t39675;
  t62424 = t62295*t39697;
  t62426 = t62417 + t62418 + t62424;
  t62436 = -0.3*t62426;
  t62442 = t62271 + t62275 + t62277 + t62297 + t62326 + t62374 + t62412 + t62413 + t62436;
  t63021 = 3.e-6*t59662*t1456*t1541;
  t63085 = 3.e-6*t60795*t2053;
  t63092 = -9.e-12*t60820*t2053;
  t63154 = t63021 + t63085 + t63092;
  t62986 = -1.*t59662*t1456*t1541;
  t62999 = t62986 + t60930 + t60931;
  t63203 = -1.*t1541*t60795;
  t63206 = 3.e-6*t1541*t60820;
  t63212 = 1.000000000009*t59662*t1456*t2053;
  t63222 = t63203 + t63206 + t63212;
  t63402 = t61636 + t61637 + t62084;
  t63406 = 3.e-6*t1541*t59666;
  t63407 = -9.e-12*t1541*t59723;
  t63408 = t63406 + t63407 + t62121;
  t63412 = 1.000000000009*t1456*t1541*t59652;
  t63413 = t59666*t2053;
  t63414 = -3.e-6*t59723*t2053;
  t63415 = t63412 + t63413 + t63414;
  t62454 = -0.2000000000018*t1541*t59652*t1947;
  t62468 = 0.2000000000018*t1456*t1469*t59652*t2053;
  t62471 = 6.000000000054e-7*t1456*t59652*t1824*t2053;
  t62476 = t62474*t24371;
  t62490 = t62487*t30554;
  t62491 = t39658*t62487;
  t62493 = t62474*t39675;
  t62504 = t62500*t39431;
  t62505 = t62491 + t62493 + t62504;
  t62511 = 0.100001*t62505;
  t62513 = t31243*t62474;
  t62519 = t62500*t38228;
  t62522 = t62487*t39431;
  t62528 = t62513 + t62519 + t62522;
  t62533 = 0.2*t62528;
  t62542 = t62500*t39684;
  t62543 = t31243*t62500;
  t62547 = t62487*t39675;
  t62551 = t62474*t39697;
  t62554 = t62543 + t62547 + t62551;
  t62555 = -0.3*t62554;
  t62562 = t62454 + t62468 + t62471 + t62476 + t62490 + t62511 + t62533 + t62542 + t62555;
  t62983 = 0.2000000000018*t59662*t1456*t1541;
  t62984 = 0.2000000000018*t60795*t2053;
  t62985 = -6.000000000054e-7*t60820*t2053;
  t63018 = t62999*t24371;
  t63193 = t63154*t30554;
  t63195 = t39658*t63154;
  t63197 = t62999*t39675;
  t63230 = t63222*t39431;
  t63250 = t63195 + t63197 + t63230;
  t63262 = 0.100001*t63250;
  t63264 = t31243*t62999;
  t63266 = t63222*t38228;
  t63271 = t63154*t39431;
  t63274 = t63264 + t63266 + t63271;
  t63282 = 0.2*t63274;
  t63286 = t63222*t39684;
  t63288 = t31243*t63222;
  t63290 = t63154*t39675;
  t63293 = t62999*t39697;
  t63295 = t63288 + t63290 + t63293;
  t63300 = -0.3*t63295;
  t63308 = t62983 + t62984 + t62985 + t63018 + t63193 + t63262 + t63282 + t63286 + t63300;
  t63513 = -9.e-12*t60303*t2053;
  t63515 = t63513 + t59872;
  t63536 = 3.e-6*t1541*t60303;
  t63540 = -1.*t1541*t59723;
  t63542 = t63536 + t63540;
  t61914 = 6.000000000054e-7*t1456*t1469*t1730*t59652;
  t61917 = -0.2000000000018*t1456*t1730*t59652*t1824;
  t61972 = t61967*t24371;
  t61988 = t61985*t30554;
  t61999 = t31243*t61967;
  t62025 = t62023*t38228;
  t62026 = t61985*t39431;
  t62028 = t61999 + t62025 + t62026;
  t62032 = 0.2*t62028;
  t62033 = t39658*t61985;
  t62034 = t61967*t39675;
  t62036 = t62023*t39431;
  t62037 = t62033 + t62034 + t62036;
  t62043 = 0.100001*t62037;
  t62048 = t62023*t39684;
  t62051 = t31243*t62023;
  t62052 = t61985*t39675;
  t62054 = t61967*t39697;
  t62056 = t62051 + t62052 + t62054;
  t62057 = -0.3*t62056;
  t62061 = t61914 + t61917 + t61972 + t61988 + t62032 + t62043 + t62048 + t62057;
  t62707 = -6.000000000054e-7*t1730*t62701;
  t62709 = 0.2000000000018*t1730*t60820;
  t62721 = t62717*t24371;
  t62725 = t62724*t30554;
  t62729 = t31243*t62717;
  t62743 = t62742*t38228;
  t62746 = t62724*t39431;
  t62763 = t62729 + t62743 + t62746;
  t62765 = 0.2*t62763;
  t62767 = t39658*t62724;
  t62769 = t62717*t39675;
  t62770 = t62742*t39431;
  t62774 = t62767 + t62769 + t62770;
  t62775 = 0.100001*t62774;
  t62777 = t62742*t39684;
  t62780 = t31243*t62742;
  t62782 = t62724*t39675;
  t62783 = t62717*t39697;
  t62793 = t62780 + t62782 + t62783;
  t62794 = -0.3*t62793;
  t62797 = t62707 + t62709 + t62721 + t62725 + t62765 + t62775 + t62777 + t62794;
  t62802 = 0.2000000000018*t1730*t60303;
  t62827 = -6.000000000054e-7*t1730*t62820;
  t63718 = t62828 + t62853;
  t63720 = t60461 + t62861;
  t63726 = t62886 + t62891;
  t63500 = -6.000000000054e-7*t60303*t2053;
  t63503 = 0.2000000000018*t59723*t2053;
  t63509 = t60605*t24371;
  t63522 = t63515*t30554;
  t63527 = t39658*t63515;
  t63532 = t60605*t39675;
  t63544 = t63542*t39431;
  t63556 = t63527 + t63532 + t63544;
  t63558 = 0.100001*t63556;
  t63565 = t63542*t38228;
  t63570 = t63515*t39431;
  t63574 = t60651 + t63565 + t63570;
  t63582 = 0.2*t63574;
  t63586 = t63542*t39684;
  t63587 = t31243*t63542;
  t63593 = t63515*t39675;
  t63597 = t60605*t39697;
  t63613 = t63587 + t63593 + t63597;
  t63615 = -0.3*t63613;
  t63617 = t63500 + t63503 + t63509 + t63522 + t63558 + t63582 + t63586 + t63615;
  t61698 = t61307*t39941;
  t61707 = t61370*t39952;
  t61731 = t61289*t39964;
  t61741 = t61289*t40006;
  t61744 = t61370*t40080;
  t61753 = -1.8e-11*t61307*t20503;
  t61754 = t61741 + t61744 + t61753;
  t61755 = 0.100001*t61754;
  t61762 = t61370*t40094;
  t61764 = t61307*t40080;
  t61777 = -1.000000000009*t61289*t20503;
  t61782 = t61762 + t61764 + t61777;
  t61797 = 0.2*t61782;
  t61812 = t61289*t40107;
  t61813 = t61307*t40006;
  t61832 = -1.000000000009*t61370*t20503;
  t61837 = t61812 + t61813 + t61832;
  t61873 = -0.3*t61837;
  t61886 = t61698 + t61707 + t61731 + t61755 + t61797 + t61873;
  t62595 = t60914*t39941;
  t62607 = t60934*t39952;
  t62619 = t60891*t39964;
  t62623 = t60934*t40094;
  t62627 = t60914*t40080;
  t62632 = -1.000000000009*t60891*t20503;
  t62634 = t62623 + t62627 + t62632;
  t62636 = 0.2*t62634;
  t62642 = t60891*t40006;
  t62651 = t60934*t40080;
  t62658 = -1.8e-11*t60914*t20503;
  t62660 = t62642 + t62651 + t62658;
  t62662 = 0.100001*t62660;
  t62677 = t60891*t40107;
  t62679 = t60914*t40006;
  t62686 = -1.000000000009*t60934*t20503;
  t62688 = t62677 + t62679 + t62686;
  t62693 = -0.3*t62688;
  t62695 = t62595 + t62607 + t62619 + t62636 + t62662 + t62693;
  t63633 = t60595*t39941;
  t63634 = t60605*t39952;
  t63639 = t60526*t39964;
  t63653 = t60526*t40006;
  t63656 = t60605*t40080;
  t63658 = -1.8e-11*t60595*t20503;
  t63661 = t63653 + t63656 + t63658;
  t63663 = 0.100001*t63661;
  t63667 = t60605*t40094;
  t63683 = t60595*t40080;
  t63685 = -1.000000000009*t60526*t20503;
  t63690 = t63667 + t63683 + t63685;
  t63693 = 0.2*t63690;
  t63694 = t60526*t40107;
  t63699 = t60595*t40006;
  t63703 = -1.000000000009*t60605*t20503;
  t63706 = t63694 + t63699 + t63703;
  t63707 = -0.3*t63706;
  t63708 = t63633 + t63634 + t63639 + t63663 + t63693 + t63707;
  t63319 = t61585*t39941;
  t63330 = t61641*t39952;
  t63334 = t61576*t39964;
  t63338 = t61576*t40107;
  t63340 = t61585*t40006;
  t63350 = -1.000000000009*t61641*t20503;
  t63353 = t63338 + t63340 + t63350;
  t63355 = -0.3*t63353;
  t63366 = t61576*t40006;
  t63367 = t61641*t40080;
  t63373 = -1.8e-11*t61585*t20503;
  t63375 = t63366 + t63367 + t63373;
  t63378 = 0.100001*t63375;
  t63380 = t61641*t40094;
  t63381 = t61585*t40080;
  t63383 = -1.000000000009*t61576*t20503;
  t63385 = t63380 + t63381 + t63383;
  t63387 = 0.2*t63385;
  t63394 = t63319 + t63330 + t63334 + t63355 + t63378 + t63387;
  t58384 = 0.1000000000009*t15620;
  t58393 = t58390 + t21821;
  t58396 = 0.2*t58393;
  t58402 = -9.e-7*t40006;
  t58408 = t58384 + t58396 + t58402;
  t58420 = -1.62e-17*t15620;
  t58426 = 0.1*t39906;
  t58433 = 0.2*t40006;
  t58444 = t58420 + t58426 + t58433;
  t58501 = t58493 + t21821;
  t58981 = 0.2000000000018*t15620;
  t59055 = t58390 + t20503;
  t59253 = 0.1*t59055;
  t59326 = t58981 + t39947 + t59253;
  t59489 = t58493 + t20503;
  t63914 = t1469*t59652;
  t63916 = t59662*t1947*t1824;
  t63918 = t63914 + t63916;
  t63926 = t1541*t62701;
  t63927 = 3.e-6*t1730*t63918;
  t63929 = t59662*t1456*t2053;
  t63932 = t63926 + t63927 + t63929;
  t63934 = t28723*t63918;
  t63936 = -3.e-6*t59662*t1456*t2053;
  t63944 = t62712 + t63934 + t63936;
  t63955 = t59662*t1456*t31271;
  t63967 = -1.*t62701*t2053;
  t63969 = 3.e-6*t63918*t2053;
  t63971 = t63955 + t63967 + t63969;
  t64026 = t63944*t39941;
  t64029 = t63971*t39952;
  t64031 = t63932*t39964;
  t64039 = t63932*t40006;
  t64042 = t63971*t40080;
  t64044 = -1.8e-11*t63944*t20503;
  t64045 = t64039 + t64042 + t64044;
  t64053 = 0.100001*t64045;
  t64056 = t63971*t40094;
  t64058 = t63944*t40080;
  t64059 = -1.000000000009*t63932*t20503;
  t64063 = t64056 + t64058 + t64059;
  t64065 = 0.2*t64063;
  t64068 = t63932*t40107;
  t64070 = t63944*t40006;
  t64071 = -1.000000000009*t63971*t20503;
  t64074 = t64068 + t64070 + t64071;
  t64078 = -0.3*t64074;
  t64081 = t64026 + t64029 + t64031 + t64053 + t64065 + t64078;
  t64093 = t1541*t63918;
  t64094 = t60899 + t64093;
  t64097 = t28723*t60795;
  t64102 = t64097 + t63927;
  t64119 = -1.*t63918*t2053;
  t64120 = t63085 + t64119;
  t64088 = -6.000000000054e-7*t1730*t60795;
  t64091 = 0.2000000000018*t1730*t63918;
  t64095 = t64094*t24371;
  t64103 = t64102*t30554;
  t64106 = t31243*t64094;
  t64123 = t64120*t38228;
  t64129 = t64102*t39431;
  t64131 = t64106 + t64123 + t64129;
  t64134 = 0.2*t64131;
  t64136 = t39658*t64102;
  t64141 = t64094*t39675;
  t64143 = t64120*t39431;
  t64145 = t64136 + t64141 + t64143;
  t64151 = 0.100001*t64145;
  t64154 = t64120*t39684;
  t64161 = t31243*t64120;
  t64163 = t64102*t39675;
  t64164 = t64094*t39697;
  t64165 = t64161 + t64163 + t64164;
  t64166 = -0.3*t64165;
  t64171 = t64088 + t64091 + t64095 + t64103 + t64134 + t64151 + t64154 + t64166;
  t59668 = 0.2000000000018*t1730*t59666;
  t59725 = -6.000000000054e-7*t1730*t59723;
  t59726 = 0.2000000000018*t1456*t59652*t2053;
  t59735 = t59734*t24371;
  t59835 = t59827*t30554;
  t59837 = t31243*t59734;
  t59903 = t59891*t38228;
  t59932 = t59827*t39431;
  t59935 = t59837 + t59903 + t59932;
  t59936 = 0.2*t59935;
  t59939 = t39658*t59827;
  t59944 = t59734*t39675;
  t59948 = t59891*t39431;
  t59951 = t59939 + t59944 + t59948;
  t59953 = 0.100001*t59951;
  t59956 = t59891*t39684;
  t59957 = t31243*t59891;
  t59970 = t59827*t39675;
  t60002 = t59734*t39697;
  t60005 = t59957 + t59970 + t60002;
  t60010 = -0.3*t60005;
  t64174 = t59668 + t59725 + t59726 + t59735 + t59835 + t59936 + t59953 + t59956 + t60010;
  t64183 = -1.*t59662*t1456*t1469*t1541;
  t64184 = 3.e-6*t59662*t1456*t1730*t1824;
  t64185 = -1.*t59662*t1947*t2053;
  t64186 = t64183 + t64184 + t64185;
  t64189 = -3.e-6*t59662*t1456*t1469*t1730;
  t64193 = t59662*t1456*t28723*t1824;
  t64195 = 3.e-6*t59662*t1947*t2053;
  t64199 = t64189 + t64193 + t64195;
  t64204 = -1.*t59662*t31271*t1947;
  t64205 = t59662*t1456*t1469*t2053;
  t64206 = 3.e-6*t59662*t1456*t1824*t2053;
  t64209 = t64204 + t64205 + t64206;
  t64179 = -0.2000000000018*t59662*t1456*t1469*t1730;
  t64180 = -6.000000000054e-7*t59662*t1456*t1730*t1824;
  t64182 = 0.2000000000018*t59662*t1947*t2053;
  t64187 = t64186*t24371;
  t64200 = t64199*t30554;
  t64201 = t31243*t64186;
  t64213 = t64209*t38228;
  t64215 = t64199*t39431;
  t64217 = t64201 + t64213 + t64215;
  t64220 = 0.2*t64217;
  t64221 = t39658*t64199;
  t64222 = t64186*t39675;
  t64226 = t64209*t39431;
  t64228 = t64221 + t64222 + t64226;
  t64230 = 0.100001*t64228;
  t64232 = t64209*t39684;
  t64234 = t31243*t64209;
  t64235 = t64199*t39675;
  t64237 = t64186*t39697;
  t64242 = t64234 + t64235 + t64237;
  t64251 = -0.3*t64242;
  t64253 = t64179 + t64180 + t64182 + t64187 + t64200 + t64220 + t64230 + t64232 + t64251;
  t64292 = -3.e-6*t59662*t1456*t1541;
  t64293 = -9.e-12*t63918*t2053;
  t64300 = t64292 + t62732 + t64293;
  t64281 = t59662*t1456*t1541;
  t64286 = t64281 + t63967 + t63969;
  t64308 = -1.*t1541*t62701;
  t64309 = 3.e-6*t1541*t63918;
  t64318 = -1.000000000009*t59662*t1456*t2053;
  t64319 = t64308 + t64309 + t64318;
  t64273 = -0.2000000000018*t59662*t1456*t1541;
  t64278 = 0.2000000000018*t62701*t2053;
  t64279 = -6.000000000054e-7*t63918*t2053;
  t64289 = t64286*t24371;
  t64301 = t64300*t30554;
  t64303 = t39658*t64300;
  t64306 = t64286*t39675;
  t64320 = t64319*t39431;
  t64328 = t64303 + t64306 + t64320;
  t64338 = 0.100001*t64328;
  t64339 = t31243*t64286;
  t64342 = t64319*t38228;
  t64351 = t64300*t39431;
  t64353 = t64339 + t64342 + t64351;
  t64361 = 0.2*t64353;
  t64366 = t64319*t39684;
  t64368 = t31243*t64319;
  t64372 = t64300*t39675;
  t64377 = t64286*t39697;
  t64379 = t64368 + t64372 + t64377;
  t64381 = -0.3*t64379;
  t64387 = t64273 + t64278 + t64279 + t64289 + t64301 + t64338 + t64361 + t64366 + t64381;
  t64447 = t59662*t1456*t1541*t1824;
  t64448 = t62300 + t64447;
  t64462 = t59662*t1456*t1469*t28723;
  t64464 = t64462 + t64184;
  t64484 = 3.e-6*t59662*t1456*t1469*t2053;
  t64486 = -1.*t59662*t1456*t1824*t2053;
  t64493 = t64484 + t64486;
  t64657 = t59662*t1469*t1541*t1947;
  t64658 = -3.e-6*t59662*t1730*t1947*t1824;
  t64659 = t64657 + t64658 + t60890;
  t64664 = 3.e-6*t59662*t1469*t1730*t1947;
  t64666 = -1.*t59662*t28723*t1947*t1824;
  t64668 = t64664 + t64666 + t60909;
  t64671 = -1.*t59662*t1469*t1947*t2053;
  t64672 = -3.e-6*t59662*t1947*t1824*t2053;
  t64673 = t60924 + t64671 + t64672;
  t64830 = 3.e-6*t59662*t1541*t1947;
  t64831 = -3.e-6*t59662*t1456*t1469*t2053;
  t64833 = -9.e-12*t59662*t1456*t1824*t2053;
  t64834 = t64830 + t64831 + t64833;
  t64826 = -1.*t59662*t1541*t1947;
  t64827 = t64826 + t64205 + t64206;
  t64839 = 3.e-6*t59662*t1456*t1541*t1824;
  t64843 = 1.000000000009*t59662*t1947*t2053;
  t64845 = t62282 + t64839 + t64843;
  t64441 = -6.000000000054e-7*t59662*t1456*t1469*t1730;
  t64443 = 0.2000000000018*t59662*t1456*t1730*t1824;
  t64452 = t64448*t24371;
  t64474 = t64464*t30554;
  t64476 = t31243*t64448;
  t64495 = t64493*t38228;
  t64502 = t64464*t39431;
  t64539 = t64476 + t64495 + t64502;
  t64583 = 0.2*t64539;
  t64607 = t39658*t64464;
  t64614 = t64448*t39675;
  t64627 = t64493*t39431;
  t64633 = t64607 + t64614 + t64627;
  t64640 = 0.100001*t64633;
  t64643 = t64493*t39684;
  t64644 = t31243*t64493;
  t64646 = t64464*t39675;
  t64647 = t64448*t39697;
  t64649 = t64644 + t64646 + t64647;
  t64650 = -0.3*t64649;
  t64652 = t64441 + t64443 + t64452 + t64474 + t64583 + t64640 + t64643 + t64650;
  t65028 = t60884 + t60889;
  t65040 = t60899 + t60907;
  t65052 = t60930 + t60931;
  t65213 = -9.e-12*t60795*t2053;
  t65227 = t65213 + t63969;
  t65257 = 3.e-6*t1541*t60795;
  t65305 = -1.*t1541*t63918;
  t65306 = t65257 + t65305;
  t65432 = t64308 + t64309 + t60890;
  t65438 = 3.e-6*t1541*t62701;
  t65439 = -9.e-12*t1541*t63918;
  t65442 = t65438 + t65439 + t60909;
  t65449 = -1.000000000009*t59662*t1456*t1541;
  t65450 = t62701*t2053;
  t65452 = -3.e-6*t63918*t2053;
  t65453 = t65449 + t65450 + t65452;
  t64820 = 0.2000000000018*t59662*t1541*t1947;
  t64824 = -0.2000000000018*t59662*t1456*t1469*t2053;
  t64825 = -6.000000000054e-7*t59662*t1456*t1824*t2053;
  t64828 = t64827*t24371;
  t64836 = t64834*t30554;
  t64837 = t39658*t64834;
  t64838 = t64827*t39675;
  t64857 = t64845*t39431;
  t64860 = t64837 + t64838 + t64857;
  t64862 = 0.100001*t64860;
  t64863 = t31243*t64827;
  t64865 = t64845*t38228;
  t64875 = t64834*t39431;
  t64876 = t64863 + t64865 + t64875;
  t64877 = 0.2*t64876;
  t64879 = t64845*t39684;
  t64880 = t31243*t64845;
  t64882 = t64834*t39675;
  t64884 = t64827*t39697;
  t64900 = t64880 + t64882 + t64884;
  t64962 = -0.3*t64900;
  t64964 = t64820 + t64824 + t64825 + t64828 + t64836 + t64862 + t64877 + t64879 + t64962;
  t65203 = -6.000000000054e-7*t60795*t2053;
  t65204 = 0.2000000000018*t63918*t2053;
  t65205 = t64120*t24371;
  t65228 = t65227*t30554;
  t65234 = t39658*t65227;
  t65256 = t64120*t39675;
  t65307 = t65306*t39431;
  t65308 = t65234 + t65256 + t65307;
  t65311 = 0.100001*t65308;
  t65312 = t65306*t38228;
  t65313 = t65227*t39431;
  t65314 = t64161 + t65312 + t65313;
  t65317 = 0.2*t65314;
  t65323 = t65306*t39684;
  t65325 = t31243*t65306;
  t65328 = t65227*t39675;
  t65331 = t64120*t39697;
  t65336 = t65325 + t65328 + t65331;
  t65339 = -0.3*t65336;
  t65342 = t65203 + t65204 + t65205 + t65228 + t65311 + t65317 + t65323 + t65339;
  t60249 = var2[8]*t60246;
  t60791 = var2[5]*t60732;
  t61260 = var2[3]*t61160;
  t61496 = var2[4]*t61461;
  t61688 = var2[6]*t61682;
  t64390 = t64199*t39941;
  t64391 = t64209*t39952;
  t64392 = t64186*t39964;
  t64394 = t64209*t40094;
  t64397 = t64199*t40080;
  t64398 = -1.000000000009*t64186*t20503;
  t64399 = t64394 + t64397 + t64398;
  t64401 = 0.2*t64399;
  t64402 = t64186*t40006;
  t64404 = t64209*t40080;
  t64406 = -1.8e-11*t64199*t20503;
  t64408 = t64402 + t64404 + t64406;
  t64410 = 0.100001*t64408;
  t64412 = t64186*t40107;
  t64414 = t64199*t40006;
  t64415 = -1.000000000009*t64209*t20503;
  t64421 = t64412 + t64414 + t64415;
  t64424 = -0.3*t64421;
  t64428 = t64390 + t64391 + t64392 + t64401 + t64410 + t64424;
  t64970 = t64102*t39941;
  t64971 = t64120*t39952;
  t64972 = t64094*t39964;
  t64974 = t64094*t40006;
  t64976 = t64120*t40080;
  t64982 = -1.8e-11*t64102*t20503;
  t64983 = t64974 + t64976 + t64982;
  t64987 = 0.100001*t64983;
  t64988 = t64120*t40094;
  t64989 = t64102*t40080;
  t64994 = -1.000000000009*t64094*t20503;
  t64997 = t64988 + t64989 + t64994;
  t65002 = 0.2*t64997;
  t65003 = t64094*t40107;
  t65004 = t64102*t40006;
  t65006 = -1.000000000009*t64120*t20503;
  t65007 = t65003 + t65004 + t65006;
  t65010 = -0.3*t65007;
  t65014 = t64970 + t64971 + t64972 + t64987 + t65002 + t65010;
  t65352 = t64300*t39941;
  t65354 = t64319*t39952;
  t65355 = t64286*t39964;
  t65365 = t64286*t40107;
  t65368 = t64300*t40006;
  t65370 = -1.000000000009*t64319*t20503;
  t65379 = t65365 + t65368 + t65370;
  t65382 = -0.3*t65379;
  t65383 = t64286*t40006;
  t65384 = t64319*t40080;
  t65393 = -1.8e-11*t64300*t20503;
  t65414 = t65383 + t65384 + t65393;
  t65418 = 0.100001*t65414;
  t65419 = t64319*t40094;
  t65420 = t64300*t40080;
  t65421 = -1.000000000009*t64286*t20503;
  t65422 = t65419 + t65420 + t65421;
  t65424 = 0.2*t65422;
  t65425 = t65352 + t65354 + t65355 + t65382 + t65418 + t65424;
  p_output1[0]=0.2000000000018*t1456*t1469*t1730 + 6.000000000054e-7*t1456*t1730*t1824 - 0.2000000000018*t1947*t2053 + t11971*t24371 + t29847*t30554 + 0.2*(t11971*t31243 + t35432*t38228 + t29847*t39431) + 0.100001*(t35432*t39431 + t29847*t39658 + t11971*t39675) + t35432*t39684 - 0.3*(t31243*t35432 + t29847*t39675 + t11971*t39697) + var1[0] + var2[0] + t40906*var2[4] + t40254*var2[5] + t41441*var2[6] + t40118*var2[8] + var2[5]*(t53864*var2[4] + (t44216 + t44333 + t24371*t44584 + t30554*t45228 + t39684*t48612 - 0.3*(t39697*t44584 + t39675*t45228 + t31243*t48612) + 0.2*(t31243*t44584 + t39431*t45228 + t38228*t48612) + 0.100001*(t39675*t44584 + t39658*t45228 + t39431*t48612))*var2[5] + t54431*var2[6] + t43982*var2[8]) + var2[6]*(t57437*var2[4] + t54431*var2[5] + (0.2000000000018*t1456*t1469*t1541 + 6.000000000054e-7*t1456*t1541*t1824 + t54626 + t24371*t54633 + t30554*t54644 + t39684*t55825 - 0.3*(t39697*t54633 + t39675*t54644 + t31243*t55825) + 0.2*(t31243*t54633 + t39431*t54644 + t38228*t55825) + 0.100001*(t39675*t54633 + t39658*t54644 + t39431*t55825))*var2[6] + t54610*var2[8]) + var2[4]*((t44216 + t44333 + t54626 + t24371*t58134 + t30554*t58145 + t39684*t58171 - 0.3*(t39697*t58134 + t39675*t58145 + t31243*t58171) + 0.2*(t31243*t58134 + t39431*t58145 + t38228*t58171) + 0.100001*(t39675*t58134 + t39658*t58145 + t39431*t58171))*var2[4] + t53864*var2[5] + t57437*var2[6] + t58118*var2[8]) + var2[8]*(t58118*var2[4] + t43982*var2[5] + t54610*var2[6] + (0.100001*(-1.8e-11*t15620*t29847 + t35432*t39921 + t11971*t40080) + t35432*t58408 + t29847*t58444 - 0.3*(-1.000000000009*t15620*t35432 + t40096 + t11971*t58501) + t11971*t59326 + 0.2*(-1.000000000009*t11971*t15620 + t29847*t39921 + t35432*t59489))*var2[8]) + var3[0] + t40906*var3[4] + t40254*var3[5] + t41441*var3[6] + t40118*var3[8] - 1.*var4[0];
  p_output1[1]=t59668 + t59725 + t59726 + t59735 + t59835 + t59936 + t59953 + t59956 + t60010 + t60249 + t60791 + t61260 + t61496 + t61688 + var1[1] + var2[1] + var2[8]*(t62695*var2[3] + t61886*var2[4] + t63708*var2[5] + t63394*var2[6] + (t59326*t59734 + t58444*t59827 + t58408*t59891 + 0.100001*(t40080*t59734 - 1.8e-11*t15620*t59827 + t39921*t59891) + 0.2*(-1.000000000009*t15620*t59734 + t39921*t59827 + t59489*t59891) - 0.3*(t58501*t59734 - 1.000000000009*t15620*t59891 + t60111))*var2[8]) + var2[4]*(t62442*var2[3] + (-0.2000000000018*t1469*t1730*t1947*t59652 - 6.000000000054e-7*t1730*t1824*t1947*t59652 + t62075 + t24371*t62101 + t30554*t62125 + t39684*t62164 - 0.3*(t39697*t62101 + t39675*t62125 + t31243*t62164) + 0.2*(t31243*t62101 + t39431*t62125 + t38228*t62164) + 0.100001*(t39675*t62101 + t39658*t62125 + t39431*t62164))*var2[4] + t62061*var2[5] + t62562*var2[6] + t61886*var2[8]) + var2[3]*((t62075 + t62802 + t62827 + t24371*t62858 + t30554*t62864 + t39684*t62897 - 0.3*(t39697*t62858 + t39675*t62864 + t31243*t62897) + 0.2*(t31243*t62858 + t39431*t62864 + t38228*t62897) + 0.100001*(t39675*t62858 + t39658*t62864 + t39431*t62897))*var2[3] + t62442*var2[4] + t62797*var2[5] + t63308*var2[6] + t62695*var2[8]) + var2[6]*(t63308*var2[3] + t62562*var2[4] + t63617*var2[5] + (0.2000000000018*t1541*t59666 - 6.000000000054e-7*t1541*t59723 + t62075 + t24371*t63402 + t30554*t63408 + t39684*t63415 - 0.3*(t39697*t63402 + t39675*t63408 + t31243*t63415) + 0.2*(t31243*t63402 + t39431*t63408 + t38228*t63415) + 0.100001*(t39675*t63402 + t39658*t63408 + t39431*t63415))*var2[6] + t63394*var2[8]) + var2[5]*(t62797*var2[3] + t62061*var2[4] + (t62802 + t62827 + t24371*t63718 + t30554*t63720 + t39684*t63726 - 0.3*(t39697*t63718 + t39675*t63720 + t31243*t63726) + 0.2*(t31243*t63718 + t39431*t63720 + t38228*t63726) + 0.100001*(t39675*t63718 + t39658*t63720 + t39431*t63726))*var2[5] + t63617*var2[6] + t63708*var2[8]) + var3[1] + t61160*var3[3] + t61461*var3[4] + t60732*var3[5] + t61682*var3[6] + t60246*var3[8] - 1.*var4[1];
  p_output1[2]=-0.2000000000018*t1456*t2053*t59662 + 0.2000000000018*t1730*t62701 - 6.000000000054e-7*t1730*t63918 + t24371*t63932 + t30554*t63944 + t39684*t63971 - 0.3*(t39697*t63932 + t39675*t63944 + t31243*t63971) + 0.2*(t31243*t63932 + t39431*t63944 + t38228*t63971) + 0.100001*(t39675*t63932 + t39658*t63944 + t39431*t63971) + var1[2] + var2[2] + (t60249 + t60791 + t61260 + t61496 + t61688)*var2[3] + t64174*var2[3] + t64253*var2[4] + t64171*var2[5] + t64387*var2[6] + t64081*var2[8] + var2[8]*(t60246*var2[3] + t64428*var2[4] + t65014*var2[5] + t65425*var2[6] + (t59326*t63932 + t58444*t63944 + t58408*t63971 + 0.100001*(t40080*t63932 - 1.8e-11*t15620*t63944 + t39921*t63971) + 0.2*(-1.000000000009*t15620*t63932 + t39921*t63944 + t59489*t63971) - 0.3*(t58501*t63932 - 1.000000000009*t15620*t63971 + t64058))*var2[8]) + var2[4]*(t61461*var2[3] + (0.2000000000018*t1469*t1730*t1947*t59662 + 6.000000000054e-7*t1730*t1824*t1947*t59662 + t60857 + t24371*t64659 + t30554*t64668 + t39684*t64673 - 0.3*(t39697*t64659 + t39675*t64668 + t31243*t64673) + 0.2*(t31243*t64659 + t39431*t64668 + t38228*t64673) + 0.100001*(t39675*t64659 + t39658*t64668 + t39431*t64673))*var2[4] + t64652*var2[5] + t64964*var2[6] + t64428*var2[8]) + var2[5]*(t60732*var2[3] + t64652*var2[4] + (t60805 + t60837 + t24371*t65028 + t30554*t65040 + t39684*t65052 - 0.3*(t39697*t65028 + t39675*t65040 + t31243*t65052) + 0.2*(t31243*t65028 + t39431*t65040 + t38228*t65052) + 0.100001*(t39675*t65028 + t39658*t65040 + t39431*t65052))*var2[5] + t65342*var2[6] + t65014*var2[8]) + var2[6]*(t61682*var2[3] + t64964*var2[4] + t65342*var2[5] + (t60857 + 0.2000000000018*t1541*t62701 - 6.000000000054e-7*t1541*t63918 + t24371*t65432 + t30554*t65442 + t39684*t65453 - 0.3*(t39697*t65432 + t39675*t65442 + t31243*t65453) + 0.2*(t31243*t65432 + t39431*t65442 + t38228*t65453) + 0.100001*(t39675*t65432 + t39658*t65442 + t39431*t65453))*var2[6] + t65425*var2[8]) + var3[2] + t64174*var3[3] + t64253*var3[4] + t64171*var3[5] + t64387*var3[6] + t64081*var3[8] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_LeftFrontFoot_FrontStance.hh"

namespace FrontStance
{

void ddh_LeftFrontFoot_FrontStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
