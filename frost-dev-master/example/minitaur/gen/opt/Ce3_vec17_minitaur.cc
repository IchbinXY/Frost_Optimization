/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:13:37 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t5186;
  double t6371;
  double t7712;
  double t11049;
  double t12117;
  double t12125;
  double t4434;
  double t12136;
  double t12159;
  double t2964;
  double t12686;
  double t12651;
  double t12735;
  double t26817;
  double t29626;
  double t31811;
  double t12841;
  double t29745;
  double t33253;
  double t33334;
  double t23072;
  double t23642;
  double t26814;
  double t26815;
  double t41681;
  double t41682;
  double t41693;
  double t41705;
  double t41712;
  double t4649;
  double t12161;
  double t12198;
  double t12803;
  double t12966;
  double t14337;
  double t14690;
  double t14693;
  double t26816;
  double t33506;
  double t33534;
  double t34192;
  double t34371;
  double t36093;
  double t36160;
  double t36178;
  double t38327;
  double t38509;
  double t40707;
  double t40775;
  double t41677;
  double t41743;
  double t41795;
  double t42227;
  double t42610;
  double t42662;
  double t42952;
  double t43197;
  double t43719;
  double t44551;
  double t44560;
  double t44644;
  double t45140;
  double t45143;
  double t45145;
  double t45232;
  double t45277;
  double t45289;
  double t45490;
  double t45616;
  double t45617;
  double t46695;
  double t46696;
  double t46744;
  double t46759;
  double t46816;
  double t47629;
  double t47774;
  double t47819;
  double t46691;
  double t46782;
  double t48007;
  double t48018;
  double t48169;
  double t48171;
  double t48183;
  double t48199;
  double t48207;
  double t48248;
  double t48295;
  double t48309;
  double t48343;
  double t48371;
  double t48378;
  double t48411;
  double t48494;
  double t48502;
  double t48543;
  double t48840;
  double t48944;
  double t48947;
  double t49063;
  double t49065;
  double t49068;
  double t48751;
  double t48802;
  double t48817;
  double t48063;
  double t48557;
  double t48573;
  double t46489;
  double t46493;
  double t46682;
  double t49097;
  double t49113;
  double t49114;
  double t49193;
  double t49207;
  double t49209;
  double t50638;
  double t50663;
  double t50738;
  double t50754;
  double t50787;
  double t50797;
  double t50798;
  double t50802;
  double t49116;
  double t49171;
  double t51416;
  double t51422;
  double t51439;
  double t49445;
  double t49994;
  double t50253;
  double t50506;
  double t51462;
  double t51499;
  double t51531;
  double t51547;
  double t49117;
  double t49128;
  double t49131;
  double t49175;
  double t49178;
  double t49182;
  double t51571;
  double t51584;
  double t49532;
  double t49551;
  double t49563;
  double t51630;
  double t51638;
  double t50012;
  double t50041;
  double t50052;
  double t51673;
  double t51677;
  double t50270;
  double t50296;
  double t50319;
  double t51719;
  double t51736;
  double t50518;
  double t50522;
  double t50530;
  double t51371;
  double t52272;
  double t52273;
  double t52274;
  double t52281;
  double t52292;
  double t52293;
  double t52296;
  double t51512;
  double t51558;
  double t51611;
  double t52684;
  double t52700;
  double t52726;
  double t51664;
  double t51697;
  double t53636;
  double t53735;
  double t53746;
  double t53924;
  double t53937;
  double t54065;
  double t54155;
  double t54168;
  double t54262;
  double t52298;
  double t51378;
  double t51385;
  double t52382;
  double t52423;
  double t51513;
  double t51515;
  double t52559;
  double t51564;
  double t51565;
  double t52782;
  double t52807;
  double t51612;
  double t51627;
  double t52885;
  double t52916;
  double t51665;
  double t51666;
  double t53122;
  double t53158;
  double t51698;
  double t51700;
  double t53440;
  double t53456;
  double t53488;
  double t55296;
  double t55306;
  double t55383;
  double t55457;
  double t56285;
  double t56288;
  double t56292;
  double t56315;
  double t56316;
  double t56319;
  double t53491;
  double t53504;
  double t53529;
  double t55637;
  double t55647;
  double t53550;
  double t53591;
  double t53618;
  double t55794;
  double t55856;
  double t56027;
  double t56033;
  double t56103;
  double t56142;
  double t61013;
  double t61023;
  double t61124;
  double t61151;
  double t52580;
  double t52593;
  double t52641;
  double t52671;
  double t61418;
  double t61444;
  double t61494;
  double t61026;
  double t53014;
  double t61120;
  double t61215;
  double t61328;
  double t61333;
  double t61365;
  double t61533;
  double t52973;
  double t61898;
  double t61649;
  double t61713;
  double t61760;
  double t61876;
  double t61951;
  double t61806;
  double t61862;
  double t52656;
  double t52680;
  double t62241;
  double t62245;
  double t62254;
  double t62294;
  double t62303;
  double t62307;
  double t62331;
  double t62333;
  double t62334;
  double t52978;
  double t53004;
  double t53061;
  double t53111;
  double t62399;
  double t62506;
  double t62631;
  double t62633;
  double t52266;
  double t52271;
  double t62714;
  double t62735;
  double t63143;
  double t63144;
  double t63146;
  double t63174;
  double t63175;
  double t63192;
  double t63231;
  double t63233;
  double t63237;
  double t63281;
  double t63283;
  double t63289;
  double t63310;
  double t63326;
  double t63333;
  double t63344;
  double t63370;
  double t63377;
  double t62261;
  double t62509;
  double t62534;
  double t63604;
  double t63606;
  double t63609;
  double t63519;
  double t63531;
  double t63562;
  double t62641;
  double t62682;
  double t62691;
  double t62706;
  double t62781;
  double t62857;
  double t62862;
  double t63164;
  double t63194;
  double t63204;
  double t63829;
  double t63891;
  double t63893;
  double t63928;
  double t63931;
  double t63943;
  double t63945;
  double t63947;
  double t63953;
  double t63107;
  double t63149;
  double t63153;
  double t63596;
  double t63664;
  double t63705;
  double t63795;
  double t63800;
  double t63763;
  double t63769;
  t5186 = Cos(var1[16]);
  t6371 = -1.*t5186;
  t7712 = 1. + t6371;
  t11049 = 3.e-6*t7712;
  t12117 = 3.e-6*t5186;
  t12125 = t11049 + t12117;
  t4434 = Cos(var1[5]);
  t12136 = Sin(var1[14]);
  t12159 = Sin(var1[5]);
  t2964 = Sin(var1[3]);
  t12686 = Cos(var1[14]);
  t12651 = Cos(var1[3]);
  t12735 = Cos(var1[4]);
  t26817 = 9.e-12*t7712;
  t29626 = t26817 + t6371;
  t31811 = Sin(var1[16]);
  t12841 = Sin(var1[4]);
  t29745 = t29626*t12136;
  t33253 = 1.000000000009*t12686*t31811;
  t33334 = t29745 + t33253;
  t23072 = -9.e-12*t7712;
  t23642 = 1. + t23072;
  t26814 = -3.e-6*t23642;
  t26815 = t26814 + t11049;
  t41681 = -1.000000000009*t7712;
  t41682 = 1. + t41681;
  t41693 = t12686*t41682;
  t41705 = t12136*t31811;
  t41712 = t41693 + t41705;
  t4649 = -1.*t4434;
  t12161 = t12125*t12136*t12159;
  t12198 = t4649 + t12161;
  t12803 = t12686*t12125*t12735;
  t12966 = t12125*t4434*t12136;
  t14337 = t12966 + t12159;
  t14690 = -1.*t12841*t14337;
  t14693 = t12803 + t14690;
  t26816 = t26815*t4434;
  t33506 = t33334*t12159;
  t33534 = t26816 + t33506;
  t34192 = t12686*t29626;
  t34371 = -1.000000000009*t12136*t31811;
  t36093 = t34192 + t34371;
  t36160 = t12735*t36093;
  t36178 = t4434*t33334;
  t38327 = -1.*t26815*t12159;
  t38509 = t36178 + t38327;
  t40707 = -1.*t12841*t38509;
  t40775 = t36160 + t40707;
  t41677 = 3.e-6*t4434*t31811;
  t41743 = t41712*t12159;
  t41795 = t41677 + t41743;
  t42227 = -1.*t41682*t12136;
  t42610 = t12686*t31811;
  t42662 = t42227 + t42610;
  t42952 = t12735*t42662;
  t43197 = t4434*t41712;
  t43719 = -3.e-6*t31811*t12159;
  t44551 = t43197 + t43719;
  t44560 = -1.*t12841*t44551;
  t44644 = t42952 + t44560;
  t45140 = -1.*t12686*t12125*t12841;
  t45143 = -1.*t12735*t14337;
  t45145 = t45140 + t45143;
  t45232 = -1.*t36093*t12841;
  t45277 = -1.*t12735*t38509;
  t45289 = t45232 + t45277;
  t45490 = -1.*t42662*t12841;
  t45616 = -1.*t12735*t44551;
  t45617 = t45490 + t45616;
  t46695 = 1.2e-12*var1[16];
  t46696 = 0.1000003000009*t7712;
  t46744 = -3.e-12*t31811;
  t46759 = t46695 + t46696 + t46744;
  t46816 = 0.2*t41682;
  t47629 = 0.2000000000048*t7712;
  t47774 = 0.1000003000009*t31811;
  t47819 = t46816 + t47629 + t47774;
  t46691 = 0.2*t12136;
  t46782 = t12686*t46759;
  t48007 = -1.*t12136*t47819;
  t48018 = t46691 + t46782 + t48007;
  t48169 = -1.*t12686;
  t48171 = 1. + t48169;
  t48183 = 0.2*t48171;
  t48199 = t12136*t46759;
  t48207 = t12686*t47819;
  t48248 = t48183 + t48199 + t48207;
  t48295 = t4434*t48248;
  t48309 = -4.e-7*var1[16];
  t48343 = -1. + t26817;
  t48371 = 0.1*t48343;
  t48378 = 3.000000000027e-7*t7712;
  t48411 = -9.e-18*t31811;
  t48494 = t48309 + t48371 + t48378 + t48411;
  t48502 = -1.*t48494*t12159;
  t48543 = t48295 + t48502;
  t48840 = t12735*t48018;
  t48944 = -1.*t12841*t48543;
  t48947 = t48840 + t48944;
  t49063 = t12686*t12125*t12841;
  t49065 = t12735*t14337;
  t49068 = t49063 + t49065;
  t48751 = t48018*t12841;
  t48802 = t12735*t48543;
  t48817 = t48751 + t48802;
  t48063 = -1.*t48018*t12841;
  t48557 = -1.*t12735*t48543;
  t48573 = t48063 + t48557;
  t46489 = t36093*t12841;
  t46493 = t12735*t38509;
  t46682 = t46489 + t46493;
  t49097 = t4434*t48494;
  t49113 = t48248*t12159;
  t49114 = t49097 + t49113;
  t49193 = t42662*t12841;
  t49207 = t12735*t44551;
  t49209 = t49193 + t49207;
  t50638 = -1.*t12125*t12136*t12159;
  t50663 = t4434 + t50638;
  t50738 = -1.*t26815*t4434;
  t50754 = -1.*t33334*t12159;
  t50787 = t50738 + t50754;
  t50797 = -3.e-6*t4434*t31811;
  t50798 = -1.*t41712*t12159;
  t50802 = t50797 + t50798;
  t49116 = -1.*t12198*t49114;
  t49171 = t49114*t33534;
  t51416 = -1.*t4434*t48494;
  t51422 = -1.*t48248*t12159;
  t51439 = t51416 + t51422;
  t49445 = t12198*t49114;
  t49994 = -1.*t49114*t41795;
  t50253 = -1.*t49114*t33534;
  t50506 = t49114*t41795;
  t51462 = -1.*t14337*t49114;
  t51499 = -1.*t12198*t48543;
  t51531 = t38509*t49114;
  t51547 = t48543*t33534;
  t49117 = -1.*t49068*t48817;
  t49128 = -1.*t14693*t48947;
  t49131 = t49116 + t49117 + t49128;
  t49175 = t46682*t48817;
  t49178 = t40775*t48947;
  t49182 = t49171 + t49175 + t49178;
  t51571 = t14337*t49114;
  t51584 = t12198*t48543;
  t49532 = t49068*t48817;
  t49551 = t14693*t48947;
  t49563 = t49445 + t49532 + t49551;
  t51630 = -1.*t49114*t44551;
  t51638 = -1.*t48543*t41795;
  t50012 = -1.*t48817*t49209;
  t50041 = -1.*t48947*t44644;
  t50052 = t49994 + t50012 + t50041;
  t51673 = -1.*t38509*t49114;
  t51677 = -1.*t48543*t33534;
  t50270 = -1.*t46682*t48817;
  t50296 = -1.*t40775*t48947;
  t50319 = t50253 + t50270 + t50296;
  t51719 = t49114*t44551;
  t51736 = t48543*t41795;
  t50518 = t48817*t49209;
  t50522 = t48947*t44644;
  t50530 = t50506 + t50518 + t50522;
  t51371 = -1.*t12686*t12125*t48018;
  t52272 = -1.*t29626*t12136;
  t52273 = -1.000000000009*t12686*t31811;
  t52274 = t52272 + t52273;
  t52281 = 0.2*t12686;
  t52292 = -1.*t12136*t46759;
  t52293 = -1.*t12686*t47819;
  t52296 = t52281 + t52292 + t52293;
  t51512 = t48018*t36093;
  t51558 = t12686*t12125*t48018;
  t51611 = -1.*t48018*t42662;
  t52684 = -1.*t12686*t41682;
  t52700 = -1.*t12136*t31811;
  t52726 = t52684 + t52700;
  t51664 = -1.*t48018*t36093;
  t51697 = t48018*t42662;
  t53636 = -1.*t12125*t12735*t12136;
  t53735 = -1.*t12686*t12125*t4434*t12841;
  t53746 = t53636 + t53735;
  t53924 = t12735*t52726;
  t53937 = -1.*t4434*t42662*t12841;
  t54065 = t53924 + t53937;
  t54155 = t12735*t52274;
  t54168 = -1.*t4434*t36093*t12841;
  t54262 = t54155 + t54168;
  t52298 = -1.*t12686*t12125*t52296;
  t51378 = -1.*t14337*t48543;
  t51385 = t51371 + t49116 + t51378;
  t52382 = t48018*t52274;
  t52423 = t52296*t36093;
  t51513 = t38509*t48543;
  t51515 = t51512 + t51513 + t49171;
  t52559 = t12686*t12125*t52296;
  t51564 = t14337*t48543;
  t51565 = t51558 + t49445 + t51564;
  t52782 = -1.*t52296*t42662;
  t52807 = -1.*t48018*t52726;
  t51612 = -1.*t48543*t44551;
  t51627 = t51611 + t51612 + t49994;
  t52885 = -1.*t48018*t52274;
  t52916 = -1.*t52296*t36093;
  t51665 = -1.*t38509*t48543;
  t51666 = t51664 + t51665 + t50253;
  t53122 = t52296*t42662;
  t53158 = t48018*t52726;
  t51698 = t48543*t44551;
  t51700 = t51697 + t51698 + t50506;
  t53440 = t12686*t12125*t12735*t4434;
  t53456 = -1.*t12125*t12136*t12841;
  t53488 = t53440 + t53456;
  t55296 = -1.*t48018*t12159*t12198;
  t55306 = -1.*t12686*t12125*t12159*t49114;
  t55383 = t36093*t12159*t49114;
  t55457 = t48018*t12159*t33534;
  t56285 = t12735*t4434*t48018;
  t56288 = t52296*t12841;
  t56292 = t56285 + t56288;
  t56315 = t12735*t52296;
  t56316 = -1.*t4434*t48018*t12841;
  t56319 = t56315 + t56316;
  t53491 = t12735*t4434*t36093;
  t53504 = t52274*t12841;
  t53529 = t53491 + t53504;
  t55637 = t48018*t12159*t12198;
  t55647 = t12686*t12125*t12159*t49114;
  t53550 = t12735*t4434*t42662;
  t53591 = t52726*t12841;
  t53618 = t53550 + t53591;
  t55794 = -1.*t42662*t12159*t49114;
  t55856 = -1.*t48018*t12159*t41795;
  t56027 = -1.*t36093*t12159*t49114;
  t56033 = -1.*t48018*t12159*t33534;
  t56103 = t42662*t12159*t49114;
  t56142 = t48018*t12159*t41795;
  t61013 = -9.e-18*t5186;
  t61023 = 3.000009000027e-7*t31811;
  t61124 = -3.e-12*t5186;
  t61151 = 1.2e-12 + t61124 + t47774;
  t52580 = 4.e-7*var1[16];
  t52593 = 0.1*t23642;
  t52641 = -3.000000000027e-7*t7712;
  t52671 = 9.e-18*t31811;
  t61418 = 0.1000003000009*t5186;
  t61444 = 3.000000000027e-12*t31811;
  t61494 = t61418 + t61444;
  t61026 = -4.e-7 + t61013 + t61023;
  t53014 = 3.e-6*t48494*t31811;
  t61120 = -1.*t26815*t61026;
  t61215 = -1.000000000009*t5186*t47819;
  t61328 = -1.*t29626*t61151;
  t61333 = -1.000000000009*t46759*t31811;
  t61365 = -3.000000000027e-6*t48494*t31811;
  t61533 = -1.000000000009*t61494*t31811;
  t52973 = -1.*t26815*t48494;
  t61898 = -1.000000000009*t47819*t31811;
  t61649 = t5186*t46759;
  t61713 = 3.e-6*t5186*t48494;
  t61760 = t41682*t61494;
  t61876 = 3.e-6*t61026*t31811;
  t61951 = t61151*t31811;
  t61806 = 9.e-18*t5186;
  t61862 = -3.000009000027e-7*t31811;
  t52656 = t12125*t12136*t48248;
  t52680 = t52580 + t52593 + t52641 + t52656 + t51558 + t52671;
  t62241 = -1.*t12136*t61494;
  t62245 = t12686*t61151;
  t62254 = t62241 + t62245;
  t62294 = t12686*t61494;
  t62303 = t12136*t61151;
  t62307 = t62294 + t62303;
  t62331 = t12686*t5186;
  t62333 = 1.000000000009*t12136*t31811;
  t62334 = t62331 + t62333;
  t52978 = -1.*t48248*t33334;
  t53004 = t52973 + t52978 + t51664;
  t53061 = t48248*t41712;
  t53111 = t53014 + t51697 + t53061;
  t62399 = t5186*t12136;
  t62506 = t62399 + t52273;
  t62631 = -1.000000000009*t5186*t12136;
  t62633 = t62631 + t33253;
  t52266 = -1.*t12125*t12136*t48248;
  t52271 = t48309 + t48371 + t48378 + t52266 + t51371 + t48411;
  t62714 = 1.000000000009*t12686*t5186;
  t62735 = t62714 + t62333;
  t63143 = t4434*t62506;
  t63144 = -3.e-6*t5186*t12159;
  t63146 = t63143 + t63144;
  t63174 = t4434*t62735;
  t63175 = -3.000000000027e-6*t31811*t12159;
  t63192 = t63174 + t63175;
  t63231 = 3.e-6*t5186*t4434;
  t63233 = t62506*t12159;
  t63237 = t63231 + t63233;
  t63281 = t12735*t62334;
  t63283 = -1.*t12841*t63146;
  t63289 = t63281 + t63283;
  t63310 = 3.000000000027e-6*t4434*t31811;
  t63326 = t62735*t12159;
  t63333 = t63310 + t63326;
  t63344 = t12735*t62633;
  t63370 = -1.*t12841*t63192;
  t63377 = t63344 + t63370;
  t62261 = t12686*t12125*t62254;
  t62509 = -1.*t62254*t42662;
  t62534 = -1.*t48018*t62334;
  t63604 = t4434*t62307;
  t63606 = -1.*t61026*t12159;
  t63609 = t63604 + t63606;
  t63519 = t4434*t61026;
  t63531 = t62307*t12159;
  t63562 = t63519 + t63531;
  t62641 = t62254*t42662;
  t62682 = t48018*t62334;
  t62691 = -1.*t48018*t62633;
  t62706 = -1.*t62254*t36093;
  t62781 = -1.*t12686*t12125*t62254;
  t62857 = t48018*t62633;
  t62862 = t62254*t36093;
  t63164 = t62633*t12841;
  t63194 = t12735*t63192;
  t63204 = t63164 + t63194;
  t63829 = -1.*t12198*t63562;
  t63891 = t63562*t33534;
  t63893 = t49114*t63333;
  t63928 = t62254*t12841;
  t63931 = t12735*t63609;
  t63943 = t63928 + t63931;
  t63945 = t12735*t62254;
  t63947 = -1.*t12841*t63609;
  t63953 = t63945 + t63947;
  t63107 = t62334*t12841;
  t63149 = t12735*t63146;
  t63153 = t63107 + t63149;
  t63596 = t12198*t63562;
  t63664 = -1.*t49114*t63237;
  t63705 = -1.*t63562*t41795;
  t63795 = -1.*t63562*t33534;
  t63800 = -1.*t49114*t63333;
  t63763 = t49114*t63237;
  t63769 = t63562*t41795;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-2.0744e-8*(-1.*t12651*t14693 - 1.*t12198*t2964) - 6.2232e-14*(-1.*t2964*t33534 - 1.*t12651*t40775) - 0.005186015558*(-1.*t2964*t41795 - 1.*t12651*t44644))*var2[1] - 0.5*(-2.0744e-8*(t12198*t12651 - 1.*t14693*t2964) - 6.2232e-14*(t12651*t33534 - 1.*t2964*t40775) - 0.005186015558*(t12651*t41795 - 1.*t2964*t44644))*var2[2])*var2[16];
  p_output1[4]=(-0.5*(-2.0744e-8*t14693 - 6.2232e-14*t40775 - 0.005186015558*t44644)*var2[0] - 0.5*(2.0744e-8*t2964*t45145 + 6.2232e-14*t2964*t45289 + 0.005186015558*t2964*t45617)*var2[1] - 0.5*(-2.0744e-8*t12651*t45145 - 6.2232e-14*t12651*t45289 - 0.005186015558*t12651*t45617)*var2[2] - 0.5*(-0.000245000000002205*t14693 - 0.005186015558*((t40775*t48573 + t40775*t48817 + t45289*t48947 + t46682*t48947)*t49068 + t46682*(-1.*t14693*t48573 - 1.*t14693*t48817 - 1.*t45145*t48947 - 1.*t48947*t49068) + t40775*t49131 + t14693*t49182) - 6.2232e-14*((t14693*t48573 + t14693*t48817 + t45145*t48947 + t48947*t49068)*t49209 + t49068*(-1.*t44644*t48573 - 1.*t44644*t48817 - 1.*t45617*t48947 - 1.*t48947*t49209) + t44644*t49563 + t14693*t50052) - 2.0744e-8*((-1.*t40775*t48573 - 1.*t40775*t48817 - 1.*t45289*t48947 - 1.*t46682*t48947)*t49209 + t46682*(t44644*t48573 + t44644*t48817 + t45617*t48947 + t48947*t49209) + t44644*t50319 + t40775*t50530))*var2[3])*var2[16];
  p_output1[5]=(-0.5*(-2.0744e-8*t12735*t50663 - 6.2232e-14*t12735*t50787 - 0.005186015558*t12735*t50802)*var2[0] - 0.5*(-2.0744e-8*(t12651*t14337 + t12841*t2964*t50663) - 6.2232e-14*(t12651*t38509 + t12841*t2964*t50787) - 0.005186015558*(t12651*t44551 + t12841*t2964*t50802))*var2[1] - 0.5*(-2.0744e-8*(t14337*t2964 - 1.*t12651*t12841*t50663) - 6.2232e-14*(t2964*t38509 - 1.*t12651*t12841*t50787) - 0.005186015558*(t2964*t44551 - 1.*t12651*t12841*t50802))*var2[2] - 0.5*(-0.000245000000002205*t12735*t50663 - 0.005186015558*(t12735*t49182*t50663 + t12735*t49131*t50787 + t46682*(-1.*t12735*t48817*t50663 + t12841*t48947*t50663 + t12841*t14693*t51439 - 1.*t12735*t49068*t51439 + t51462 + t51499) + t49068*(t12735*t48817*t50787 - 1.*t12841*t48947*t50787 - 1.*t12841*t40775*t51439 + t12735*t46682*t51439 + t51531 + t51547)) - 6.2232e-14*(t12735*t50052*t50663 + t12735*t49563*t50802 + t49209*(t12735*t48817*t50663 - 1.*t12841*t48947*t50663 - 1.*t12841*t14693*t51439 + t12735*t49068*t51439 + t51571 + t51584) + t49068*(-1.*t12735*t48817*t50802 + t12841*t48947*t50802 + t12841*t44644*t51439 - 1.*t12735*t49209*t51439 + t51630 + t51638)) - 2.0744e-8*(t12735*t50530*t50787 + t12735*t50319*t50802 + t49209*(-1.*t12735*t48817*t50787 + t12841*t48947*t50787 + t12841*t40775*t51439 - 1.*t12735*t46682*t51439 + t51673 + t51677) + t46682*(t12735*t48817*t50802 - 1.*t12841*t48947*t50802 - 1.*t12841*t44644*t51439 + t12735*t49209*t51439 + t51719 + t51736)))*var2[3] - 0.5*(-0.000245000000002205*t14337 - 0.005186015558*(t38509*t51385 + t33534*(-1.*t48543*t50663 - 1.*t14337*t51439 + t51462 + t51499) + t14337*t51515 + t12198*(t48543*t50787 + t38509*t51439 + t51531 + t51547)) - 6.2232e-14*(t44551*t51565 + t41795*(t48543*t50663 + t14337*t51439 + t51571 + t51584) + t14337*t51627 + t12198*(-1.*t48543*t50802 - 1.*t44551*t51439 + t51630 + t51638)) - 2.0744e-8*(t44551*t51666 + t41795*(-1.*t48543*t50787 - 1.*t38509*t51439 + t51673 + t51677) + t38509*t51700 + t33534*(t48543*t50802 + t44551*t51439 + t51719 + t51736)))*var2[4])*var2[16];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=(-0.5*(-2.0744e-8*t53488 - 6.2232e-14*t53529 - 0.005186015558*t53618)*var2[0] - 0.5*(-2.0744e-8*(t12125*t12159*t12651*t12686 - 1.*t2964*t53746) - 0.005186015558*(t12159*t12651*t42662 - 1.*t2964*t54065) - 6.2232e-14*(t12159*t12651*t36093 - 1.*t2964*t54262))*var2[1] - 0.5*(-2.0744e-8*(t12125*t12159*t12686*t2964 + t12651*t53746) - 0.005186015558*(t12159*t2964*t42662 + t12651*t54065) - 6.2232e-14*(t12159*t2964*t36093 + t12651*t54262))*var2[2] - 0.5*(-0.000245000000002205*t53488 - 0.005186015558*(t49182*t53488 + t49131*t53529 + t46682*(-1.*t48817*t53488 - 1.*t48947*t53746 + t55296 + t55306 - 1.*t49068*t56292 - 1.*t14693*t56319) + t49068*(t48817*t53529 + t48947*t54262 + t55383 + t55457 + t46682*t56292 + t40775*t56319)) - 6.2232e-14*(t50052*t53488 + t49563*t53618 + t49209*(t48817*t53488 + t48947*t53746 + t55637 + t55647 + t49068*t56292 + t14693*t56319) + t49068*(-1.*t48817*t53618 - 1.*t48947*t54065 + t55794 + t55856 - 1.*t49209*t56292 - 1.*t44644*t56319)) - 2.0744e-8*(t50530*t53529 + t50319*t53618 + t49209*(-1.*t48817*t53529 - 1.*t48947*t54262 + t56027 + t56033 - 1.*t46682*t56292 - 1.*t40775*t56319) + t46682*(t48817*t53618 + t48947*t54065 + t56103 + t56142 + t49209*t56292 + t44644*t56319)))*var2[3] - 0.5*(-0.000245000000002205*t12125*t12159*t12686 - 0.005186015558*(t12159*t36093*t51385 + t12125*t12159*t12686*t51515 + t33534*(t12125*t12136*t48018 - 1.*t14337*t4434*t48018 - 1.*t12125*t12686*t4434*t48543 + t52298 + t55296 + t55306) + t12198*(t38509*t4434*t48018 + t36093*t4434*t48543 + t52382 + t52423 + t55383 + t55457)) - 6.2232e-14*(t12159*t42662*t51565 + t12125*t12159*t12686*t51627 + t41795*(-1.*t12125*t12136*t48018 + t14337*t4434*t48018 + t12125*t12686*t4434*t48543 + t52559 + t55637 + t55647) + t12198*(-1.*t4434*t44551*t48018 - 1.*t42662*t4434*t48543 + t52782 + t52807 + t55794 + t55856)) - 2.0744e-8*(t12159*t42662*t51666 + t12159*t36093*t51700 + t41795*(-1.*t38509*t4434*t48018 - 1.*t36093*t4434*t48543 + t52885 + t52916 + t56027 + t56033) + t33534*(t4434*t44551*t48018 + t42662*t4434*t48543 + t53122 + t53158 + t56103 + t56142)))*var2[4] - 0.5*(0.000245000000002205*t12125*t12136 - 0.005186015558*(-1.*t12125*t12136*(t33334*t48248 + t26815*t48494 + t51512) + t52271*t52274 + t36093*(-1.*t12125*t12686*t48248 + t52298) + t12125*t12686*(t33334*t48018 + t36093*t48248 + t52382 + t52423)) - 6.2232e-14*(-1.*t12125*t12136*(-1.*t41712*t48248 - 3.e-6*t31811*t48494 + t51611) + t42662*(t12125*t12686*t48248 + t52559) + t52680*t52726 + t12125*t12686*(-1.*t41712*t48018 - 1.*t42662*t48248 + t52782 + t52807)) - 2.0744e-8*(t42662*(-1.*t33334*t48018 - 1.*t36093*t48248 + t52885 + t52916) + t52726*t53004 + t52274*t53111 + t36093*(t41712*t48018 + t42662*t48248 + t53122 + t53158)))*var2[5])*var2[16];
  p_output1[15]=0;
  p_output1[16]=(-0.5*(-0.005186015558*t63153 - 6.2232e-14*t63204)*var2[0] - 0.5*(-0.005186015558*(t12651*t63237 - 1.*t2964*t63289) - 6.2232e-14*(t12651*t63333 - 1.*t2964*t63377))*var2[1] - 0.5*(-0.005186015558*(t2964*t63237 + t12651*t63289) - 6.2232e-14*(t2964*t63333 + t12651*t63377))*var2[2] - 0.5*(-0.005186015558*(t49131*t63204 + t46682*(t63829 - 1.*t49068*t63943 - 1.*t14693*t63953) + t49068*(t48817*t63204 + t48947*t63377 + t63891 + t63893 + t46682*t63943 + t40775*t63953)) - 6.2232e-14*(t49563*t63153 + t49209*(t63596 + t49068*t63943 + t14693*t63953) + t49068*(-1.*t48817*t63153 - 1.*t48947*t63289 + t63664 + t63705 - 1.*t49209*t63943 - 1.*t44644*t63953)) - 2.0744e-8*(t50319*t63153 + t50530*t63204 + t49209*(-1.*t48817*t63204 - 1.*t48947*t63377 + t63795 + t63800 - 1.*t46682*t63943 - 1.*t40775*t63953) + t46682*(t48817*t63153 + t48947*t63289 + t63763 + t63769 + t49209*t63943 + t44644*t63953)))*var2[3] - 0.5*(-6.2232e-14*(t51565*t63237 + t41795*(t62261 + t63596 + t14337*t63609) + t12198*(t62509 + t62534 - 1.*t48543*t63146 - 1.*t44551*t63609 + t63664 + t63705)) - 2.0744e-8*(t51666*t63237 + t51700*t63333 + t33534*(t62641 + t62682 + t48543*t63146 + t44551*t63609 + t63763 + t63769) + t41795*(t62691 + t62706 - 1.*t48543*t63192 - 1.*t38509*t63609 + t63795 + t63800)) - 0.005186015558*(t51385*t63333 + t33534*(t62781 - 1.*t14337*t63609 + t63829) + t12198*(t62857 + t62862 + t48543*t63192 + t38509*t63609 + t63891 + t63893)))*var2[4] - 0.5*(-6.2232e-14*(t42662*(4.e-7 + t61806 + t61862 + t62261 + t12125*t12136*t62307) + t52680*t62334 + t12125*t12686*(-3.e-6*t48494*t5186 - 3.e-6*t31811*t61026 - 1.*t41712*t62307 - 1.*t48248*t62506 + t62509 + t62534)) - 2.0744e-8*(t53004*t62334 + t53111*t62633 + t36093*(t61713 + t61876 + t41712*t62307 + t48248*t62506 + t62641 + t62682) + t42662*(t61120 + t61365 - 1.*t33334*t62307 + t62691 + t62706 - 1.*t48248*t62735)) - 0.005186015558*(t52271*t62633 + t36093*(-4.e-7 + t61013 + t61023 - 1.*t12125*t12136*t62307 + t62781) + t12125*t12686*(3.000000000027e-6*t31811*t48494 + t26815*t61026 + t33334*t62307 + t48248*t62735 + t62857 + t62862)))*var2[5] - 0.5*(-0.005186015558*(3.000000000027e-6*t31811*(-1.*t12125*t46759 + t48309 + t48371 + t48378 + t48411) + 0.2*t5186 + t61120 + t26815*(-4.e-7 + t61013 + t61023 - 1.*t12125*t61151) + t61215 + t61328 + t61333 + t61365 + t61533) - 6.2232e-14*(0.2000000000018*t31811 + 3.e-6*t5186*(t12125*t46759 + t52580 + t52593 + t52641 + t52671) + t61649 + t61713 + t61760 + 3.e-6*t31811*(4.e-7 + t12125*t61151 + t61806 + t61862) + t61876 + t61898 + t61951) - 2.0744e-8*(3.000000000027e-6*t31811*(t31811*t46759 + t41682*t47819 + t53014) + 3.e-6*t31811*(t61120 + t61215 + t61328 + t61333 + t61365 + t61533) + 3.e-6*t5186*(-1.*t29626*t46759 + t52973 + t61898) + t26815*(t61649 + t61713 + t61760 + t61876 + t61898 + t61951)))*var2[14])*var2[16];
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec17_minitaur.hh"

namespace FrontStance
{

void Ce3_vec17_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
