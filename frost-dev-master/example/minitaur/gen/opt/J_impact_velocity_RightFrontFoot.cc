/*
 * Automatically Generated from Mathematica.
 * Thu 30 May 2019 00:02:51 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t12143;
  double t22641;
  double t30204;
  double t30240;
  double t31568;
  double t34657;
  double t36877;
  double t43824;
  double t44125;
  double t30880;
  double t30972;
  double t30984;
  double t31086;
  double t44151;
  double t44157;
  double t44183;
  double t44140;
  double t44143;
  double t44337;
  double t44168;
  double t44169;
  double t44171;
  double t44173;
  double t44175;
  double t44177;
  double t44630;
  double t44645;
  double t44649;
  double t44673;
  double t44730;
  double t44732;
  double t44752;
  double t44753;
  double t44754;
  double t44755;
  double t44776;
  double t44791;
  double t44792;
  double t44782;
  double t44484;
  double t44778;
  double t44796;
  double t31337;
  double t37372;
  double t44147;
  double t44162;
  double t44167;
  double t44327;
  double t44485;
  double t44486;
  double t44542;
  double t44567;
  double t44682;
  double t44692;
  double t44718;
  double t44720;
  double t44724;
  double t44837;
  double t44842;
  double t44847;
  double t44786;
  double t44850;
  double t44851;
  double t44852;
  double t44856;
  double t44857;
  double t44858;
  double t44800;
  double t44804;
  double t44805;
  double t45517;
  double t45525;
  double t45345;
  double t45429;
  double t45620;
  double t45560;
  double t45561;
  double t45562;
  double t45566;
  double t46033;
  double t46037;
  double t46040;
  double t46244;
  double t46251;
  double t46255;
  double t46256;
  double t46508;
  double t47048;
  double t46837;
  double t47442;
  double t48079;
  double t48080;
  double t48081;
  double t48291;
  double t48296;
  double t48305;
  double t48311;
  double t48330;
  double t48341;
  double t30952;
  double t31296;
  double t48981;
  double t48999;
  double t49016;
  double t45513;
  double t45540;
  double t45544;
  double t45551;
  double t45599;
  double t45803;
  double t45935;
  double t46028;
  double t46032;
  double t46074;
  double t46115;
  double t46123;
  double t46202;
  double t46243;
  double t49957;
  double t49958;
  double t49965;
  double t49976;
  double t49981;
  double t46889;
  double t49988;
  double t49990;
  double t50007;
  double t47112;
  double t50359;
  double t50360;
  double t50362;
  double t50462;
  double t50477;
  double t50490;
  double t44826;
  double t44833;
  double t44848;
  double t44853;
  double t44859;
  double t44860;
  double t44862;
  double t44863;
  double t44864;
  double t44865;
  double t44869;
  double t45045;
  double t45066;
  double t45093;
  double t45113;
  double t45120;
  double t45126;
  double t45127;
  double t45128;
  double t45132;
  double t45230;
  double t50686;
  double t50698;
  double t50704;
  double t50706;
  double t50710;
  double t50713;
  double t50756;
  double t50760;
  double t50776;
  double t50806;
  double t31077;
  double t51285;
  double t51342;
  double t51343;
  double t51363;
  double t51372;
  double t51374;
  double t50310;
  double t50348;
  double t50368;
  double t50495;
  double t50497;
  double t50498;
  double t50505;
  double t50556;
  double t50566;
  double t50579;
  double t50582;
  double t50586;
  double t50590;
  double t50591;
  double t50596;
  double t50598;
  double t50600;
  double t50606;
  double t50607;
  double t50608;
  double t50615;
  double t47355;
  double t47356;
  double t47392;
  double t48215;
  double t48329;
  double t48351;
  double t48364;
  double t48374;
  double t48417;
  double t48425;
  double t48451;
  double t48458;
  double t48459;
  double t48460;
  double t48461;
  double t48471;
  double t48851;
  double t48904;
  double t48918;
  double t48953;
  double t48957;
  double t48959;
  double t52516;
  double t52485;
  double t52490;
  double t52492;
  double t52495;
  double t52539;
  double t52549;
  double t52551;
  double t52591;
  double t52594;
  double t52614;
  double t50705;
  double t50719;
  double t50813;
  double t50826;
  double t50829;
  double t50833;
  double t50838;
  double t50888;
  double t50898;
  double t50900;
  double t50901;
  double t50923;
  double t50931;
  double t51135;
  double t51157;
  double t51158;
  double t51160;
  double t51161;
  double t51177;
  double t49971;
  double t49982;
  double t50019;
  double t50029;
  double t50036;
  double t50075;
  double t50101;
  double t50107;
  double t50252;
  double t50255;
  double t50260;
  double t50266;
  double t50269;
  double t50277;
  double t50278;
  double t50280;
  double t50283;
  double t50284;
  double t50299;
  double t45570;
  double t46072;
  double t46507;
  double t46689;
  double t46774;
  double t46966;
  double t47032;
  double t47036;
  double t47041;
  double t47051;
  double t47060;
  double t47065;
  double t47081;
  double t47096;
  double t47133;
  double t47206;
  double t47293;
  double t47329;
  double t47334;
  double t52610;
  double t53120;
  double t53146;
  double t53147;
  double t53150;
  double t53156;
  double t53171;
  double t53174;
  double t53189;
  double t53193;
  double t53198;
  double t53202;
  double t53205;
  double t53207;
  double t53370;
  double t53356;
  double t53398;
  double t53413;
  double t53423;
  double t53424;
  double t53435;
  double t53437;
  double t53439;
  double t53449;
  double t53454;
  double t53459;
  double t53464;
  double t53472;
  double t53492;
  double t53497;
  double t53574;
  double t53578;
  double t53582;
  double t53570;
  double t53586;
  double t53587;
  double t53589;
  double t53600;
  double t53613;
  double t53616;
  double t53621;
  double t53626;
  double t53629;
  double t53630;
  double t53781;
  double t53797;
  double t53804;
  double t53805;
  double t53815;
  double t53816;
  double t53831;
  double t53839;
  double t53847;
  double t54027;
  double t54099;
  double t54100;
  double t54101;
  double t54105;
  double t54107;
  double t54108;
  double t54114;
  double t54126;
  double t54132;
  double t54135;
  double t54143;
  double t54144;
  double t54153;
  double t54237;
  double t54251;
  double t54337;
  double t54349;
  double t54441;
  double t53134;
  double t53136;
  double t53140;
  double t53168;
  double t53194;
  double t53210;
  double t53287;
  double t53292;
  double t53295;
  double t53296;
  double t53312;
  double t53317;
  double t53318;
  double t53319;
  double t53323;
  double t53328;
  double t53329;
  double t53334;
  double t53339;
  double t53340;
  double t53342;
  double t53353;
  double t54880;
  double t55311;
  double t55397;
  double t55489;
  double t55501;
  double t55570;
  double t55619;
  double t55746;
  double t55753;
  double t55762;
  double t55838;
  double t55841;
  double t56905;
  double t57026;
  double t57031;
  double t57132;
  double t57439;
  double t57443;
  double t57499;
  double t57756;
  double t57775;
  double t57776;
  double t58472;
  double t58503;
  double t58523;
  double t58594;
  double t58812;
  double t58823;
  double t58825;
  double t58853;
  double t54094;
  double t59461;
  double t59498;
  double t59499;
  double t59504;
  double t59516;
  double t59534;
  double t59553;
  double t59582;
  double t59592;
  double t58414;
  double t58463;
  double t58505;
  double t58821;
  double t58854;
  double t58860;
  double t58861;
  double t58907;
  double t58923;
  double t58930;
  double t58931;
  double t58935;
  double t58941;
  double t59015;
  double t59123;
  double t59182;
  double t59361;
  double t59363;
  double t59398;
  double t59425;
  double t59426;
  double t53419;
  double t53436;
  double t53450;
  double t53465;
  double t53499;
  double t53500;
  double t53502;
  double t53510;
  double t53513;
  double t53515;
  double t53518;
  double t53519;
  double t53525;
  double t53527;
  double t53532;
  double t53535;
  double t53537;
  double t53544;
  double t53547;
  double t53548;
  double t53558;
  double t60011;
  double t60121;
  double t60128;
  double t60006;
  double t60137;
  double t60158;
  double t60182;
  double t60193;
  double t60248;
  double t60250;
  double t60329;
  double t60733;
  double t60742;
  double t60744;
  double t60796;
  double t60823;
  double t60828;
  double t54104;
  double t54113;
  double t61008;
  double t61050;
  double t61074;
  double t56856;
  double t56874;
  double t56879;
  double t57245;
  double t57444;
  double t57781;
  double t57894;
  double t57914;
  double t57925;
  double t57947;
  double t58054;
  double t58075;
  double t58312;
  double t58322;
  double t58323;
  double t58324;
  double t58325;
  double t58331;
  double t58332;
  double t58333;
  double t58372;
  double t58378;
  double t53771;
  double t53776;
  double t53777;
  double t53814;
  double t53845;
  double t54030;
  double t54031;
  double t54043;
  double t54044;
  double t54046;
  double t54047;
  double t54048;
  double t54052;
  double t54053;
  double t54055;
  double t54056;
  double t54057;
  double t54058;
  double t54059;
  double t54063;
  double t54067;
  double t54082;
  double t61246;
  double t61250;
  double t61251;
  double t61255;
  double t61257;
  double t61327;
  double t61348;
  double t61402;
  double t61416;
  double t61439;
  double t61478;
  double t61480;
  double t61489;
  double t60469;
  double t60704;
  double t60786;
  double t60794;
  double t60830;
  double t60887;
  double t60888;
  double t60893;
  double t60894;
  double t60897;
  double t60910;
  double t60912;
  double t60915;
  double t60940;
  double t60946;
  double t60948;
  double t60982;
  double t60984;
  double t60987;
  double t60988;
  double t60992;
  double t61829;
  double t61842;
  double t61888;
  double t61890;
  double t61910;
  double t61912;
  double t61924;
  double t61929;
  double t61942;
  double t55490;
  double t55752;
  double t55850;
  double t55853;
  double t56378;
  double t56400;
  double t56431;
  double t56446;
  double t56449;
  double t56512;
  double t56517;
  double t56518;
  double t56523;
  double t56527;
  double t56533;
  double t56541;
  double t56571;
  double t56594;
  double t56736;
  double t53598;
  double t53617;
  double t53651;
  double t53654;
  double t53657;
  double t53658;
  double t53665;
  double t53666;
  double t53668;
  double t53683;
  double t53687;
  double t53694;
  double t53697;
  double t53704;
  double t53707;
  double t53713;
  double t53723;
  double t53724;
  double t53761;
  double t60181;
  double t60213;
  double t60336;
  double t60349;
  double t60352;
  double t60399;
  double t60402;
  double t60404;
  double t60408;
  double t60412;
  double t60413;
  double t60416;
  double t60417;
  double t60442;
  double t60444;
  double t60455;
  double t60457;
  double t60459;
  double t60462;
  double t52464;
  double t52471;
  double t52473;
  double t52476;
  double t52512;
  double t52521;
  double t52532;
  double t52536;
  double t52568;
  double t52569;
  double t52577;
  double t52578;
  double t52587;
  double t62567;
  double t62568;
  double t62570;
  double t62571;
  double t52626;
  double t62576;
  double t62577;
  double t62580;
  double t62594;
  double t62596;
  double t52670;
  double t61885;
  double t61918;
  double t61986;
  double t62004;
  double t62131;
  double t62137;
  double t62143;
  double t62264;
  double t62268;
  double t62269;
  double t62270;
  double t62302;
  double t62306;
  double t62321;
  double t62325;
  double t62449;
  double t62464;
  double t62488;
  double t62538;
  double t62603;
  double t63127;
  double t63166;
  double t63167;
  double t63168;
  double t63169;
  double t63170;
  double t63171;
  double t63186;
  double t63199;
  double t63219;
  double t63243;
  double t63268;
  double t63298;
  double t63312;
  double t63316;
  double t63317;
  double t63328;
  double t63331;
  double t63332;
  double t63393;
  double t63397;
  double t63400;
  double t62835;
  double t62836;
  double t62859;
  double t62867;
  double t62872;
  double t62875;
  double t62885;
  double t62896;
  double t62901;
  double t62913;
  double t62915;
  double t62918;
  double t62927;
  double t62955;
  double t62960;
  double t62963;
  double t62964;
  double t62970;
  double t62971;
  double t63049;
  double t63116;
  double t63126;
  double t63401;
  double t63405;
  double t63409;
  double t63410;
  double t63417;
  double t63420;
  double t63423;
  double t63430;
  double t63447;
  double t63450;
  double t63457;
  double t63465;
  double t63467;
  double t63480;
  double t63481;
  double t63485;
  double t63490;
  double t63491;
  double t63533;
  double t63534;
  double t66511;
  double t66514;
  double t66515;
  double t66516;
  double t66517;
  double t66518;
  double t66519;
  double t66520;
  double t66521;
  double t66522;
  double t66523;
  double t66524;
  double t66525;
  double t66526;
  double t66680;
  double t67298;
  double t67533;
  double t67590;
  double t63535;
  double t64090;
  double t64240;
  double t64246;
  double t64333;
  double t64340;
  double t64360;
  double t64423;
  double t65778;
  double t65784;
  double t65904;
  double t65906;
  double t65934;
  double t65970;
  double t66286;
  double t66370;
  double t66385;
  double t66415;
  double t66433;
  double t66508;
  double t66509;
  double t66510;
  double t67777;
  double t67880;
  double t67881;
  double t67910;
  double t67911;
  double t67914;
  double t67956;
  double t67957;
  double t68228;
  double t68229;
  double t68230;
  double t68231;
  double t68235;
  double t68240;
  double t68241;
  double t68253;
  double t68259;
  double t68260;
  double t68261;
  double t68297;
  double t68298;
  double t68300;
  double t68302;
  double t68304;
  double t68305;
  double t68307;
  double t68309;
  double t68310;
  double t68962;
  double t69082;
  double t69096;
  double t69100;
  double t69102;
  double t69103;
  double t69105;
  double t69106;
  double t69107;
  double t67775;
  double t67776;
  double t67909;
  double t67912;
  double t68027;
  double t68028;
  double t68065;
  double t68067;
  double t68070;
  double t68072;
  double t68073;
  double t68074;
  double t68075;
  double t68118;
  double t68119;
  double t68120;
  double t68121;
  double t68122;
  double t68124;
  double t68161;
  double t68162;
  double t69440;
  double t69486;
  double t69825;
  double t70208;
  double t70209;
  double t70211;
  double t70161;
  double t70260;
  double t70261;
  double t70309;
  double t70362;
  double t70391;
  double t70393;
  double t70469;
  double t70470;
  double t70471;
  double t70474;
  double t70475;
  double t70476;
  double t68293;
  double t68294;
  double t68295;
  double t68301;
  double t68308;
  double t68311;
  double t68312;
  double t68313;
  double t68315;
  double t68316;
  double t68317;
  double t68318;
  double t68319;
  double t68320;
  double t68321;
  double t68322;
  double t68323;
  double t68324;
  double t68325;
  double t68326;
  double t68393;
  double t68455;
  double t70558;
  double t70560;
  double t70561;
  double t70563;
  double t70566;
  double t70567;
  double t70569;
  double t70570;
  double t70571;
  double t70573;
  double t70467;
  double t70468;
  double t70472;
  double t70473;
  double t70477;
  double t70478;
  double t70479;
  double t70480;
  double t70492;
  double t70509;
  double t70511;
  double t70533;
  double t70536;
  double t70538;
  double t70539;
  double t70540;
  double t70542;
  double t70543;
  double t70545;
  double t70546;
  double t70547;
  double t70599;
  double t70602;
  double t70604;
  double t70607;
  double t70608;
  double t70610;
  double t70611;
  double t70612;
  double t68233;
  double t68248;
  double t68262;
  double t68263;
  double t68264;
  double t68265;
  double t68266;
  double t68267;
  double t68268;
  double t68269;
  double t68270;
  double t68271;
  double t68272;
  double t68275;
  double t68278;
  double t68280;
  double t68283;
  double t68285;
  double t68289;
  double t70289;
  double t70365;
  double t70441;
  double t70442;
  double t70443;
  double t70444;
  double t70445;
  double t70446;
  double t70450;
  double t70452;
  double t70457;
  double t70458;
  double t70459;
  double t70460;
  double t70461;
  double t70462;
  double t70463;
  double t70464;
  double t70465;
  double t70684;
  double t70789;
  double t70790;
  double t70834;
  double t70878;
  double t70879;
  double t70884;
  double t70934;
  double t70603;
  double t70609;
  double t70613;
  double t70614;
  double t70615;
  double t70616;
  double t70621;
  double t70622;
  double t70636;
  double t70637;
  double t70661;
  double t70662;
  double t70663;
  double t70664;
  double t70666;
  double t70667;
  double t70668;
  double t70669;
  double t70671;
  double t71058;
  t12143 = Cos(var1[15]);
  t22641 = -1.*t12143;
  t30204 = 1. + t22641;
  t30240 = Cos(var1[4]);
  t31568 = Cos(var1[17]);
  t34657 = -1.*t31568;
  t36877 = 1. + t34657;
  t43824 = -3.e-6*t36877;
  t44125 = Sin(var1[17]);
  t30880 = Cos(var1[5]);
  t30972 = Sin(var1[15]);
  t30984 = Sin(var1[4]);
  t31086 = Sin(var1[5]);
  t44151 = 3.e-6*t44125;
  t44157 = t43824 + t44151;
  t44183 = 9.e-13*var1[17];
  t44140 = -3.e-6*t44125;
  t44143 = t43824 + t44140;
  t44337 = -9.e-12*t36877;
  t44168 = -3.e-6*t30204*t30240*t30880;
  t44169 = 3.e-6*t30972*t30984;
  t44171 = -9.e-12*t30204;
  t44173 = 1. + t44171;
  t44175 = t44173*t30240*t31086;
  t44177 = t44168 + t44169 + t44175;
  t44630 = -1.*t12143*t30240*t30880;
  t44645 = -1.*t30972*t30984;
  t44649 = 3.e-6*t30204*t30240*t31086;
  t44673 = t44630 + t44645 + t44649;
  t44730 = t30240*t30880*t30972;
  t44732 = -1.000000000009*t30204;
  t44752 = 1. + t44732;
  t44753 = -1.*t44752*t30984;
  t44754 = 3.e-6*t30240*t30972*t31086;
  t44755 = t44730 + t44753 + t44754;
  t44776 = 3.e-6*t36877;
  t44791 = -1.000000000009*t36877;
  t44792 = 1. + t44791;
  t44782 = 9.e-12*t36877;
  t44484 = -1.*t44125;
  t44778 = t44776 + t44140;
  t44796 = t44776 + t44151;
  t31337 = 3.e-7*var1[17];
  t37372 = -1.62e-17*t36877;
  t44147 = 0.2*t44143;
  t44162 = 0.1*t44157;
  t44167 = t31337 + t37372 + t44147 + t44162;
  t44327 = 0.2000000000018*t36877;
  t44485 = t44337 + t44484;
  t44486 = 0.1*t44485;
  t44542 = -9.e-7*t44157;
  t44567 = t44183 + t44327 + t44486 + t44542;
  t44682 = 0.1000000000009*t36877;
  t44692 = -9.e-7*t44143;
  t44718 = t44337 + t44125;
  t44720 = 0.2*t44718;
  t44724 = t44183 + t44682 + t44692 + t44720;
  t44837 = t44173*t30880*t30984;
  t44842 = 3.e-6*t30204*t30984*t31086;
  t44847 = t44837 + t44842;
  t44786 = t44782 + t44125;
  t44850 = 3.e-6*t30204*t30880*t30984;
  t44851 = t12143*t30984*t31086;
  t44852 = t44850 + t44851;
  t44856 = 3.e-6*t30880*t30972*t30984;
  t44857 = -1.*t30972*t30984*t31086;
  t44858 = t44856 + t44857;
  t44800 = t44782 + t44484;
  t44804 = -1.8e-11*t36877;
  t44805 = 1. + t44804;
  t45517 = 3.e-6*t31568;
  t45525 = t45517 + t44140;
  t45345 = -3.e-6*t31568;
  t45429 = t45345 + t44140;
  t45620 = -9.e-12*t44125;
  t45560 = -3.e-6*t30240*t30972;
  t45561 = -3.e-6*t30204*t30880*t30984;
  t45562 = t44173*t30984*t31086;
  t45566 = t45560 + t45561 + t45562;
  t46033 = t30240*t30972;
  t46037 = -1.*t12143*t30880*t30984;
  t46040 = t46033 + t46037 + t44842;
  t46244 = t44752*t30240;
  t46251 = t30880*t30972*t30984;
  t46255 = 3.e-6*t30972*t30984*t31086;
  t46256 = t46244 + t46251 + t46255;
  t46508 = t45517 + t44151;
  t47048 = t45345 + t44151;
  t46837 = 9.e-12*t44125;
  t47442 = -1.000000000009*t30240*t30972;
  t48079 = t12143*t30880*t30984;
  t48080 = 3.e-6*t12143*t30984*t31086;
  t48081 = t47442 + t48079 + t48080;
  t48291 = -3.e-6*t12143*t30240;
  t48296 = -3.e-6*t30880*t30972*t30984;
  t48305 = -9.e-12*t30972*t30984*t31086;
  t48311 = t48291 + t48296 + t48305;
  t48330 = t12143*t30240;
  t48341 = t48330 + t46251 + t46255;
  t30952 = -0.2000000000018*t30204*t30240*t30880;
  t31296 = -6.000000000054e-7*t30204*t30240*t31086;
  t48981 = t44168 + t44175;
  t48999 = t44630 + t44649;
  t49016 = t44730 + t44754;
  t45513 = 0.2*t45429;
  t45540 = 0.1*t45525;
  t45544 = -1.62e-17*t44125;
  t45551 = 3.e-7 + t45513 + t45540 + t45544;
  t45599 = -9.e-7*t45525;
  t45803 = t34657 + t45620;
  t45935 = 0.1*t45803;
  t46028 = 0.2000000000018*t44125;
  t46032 = 9.e-13 + t45599 + t45935 + t46028;
  t46074 = -9.e-7*t45429;
  t46115 = t31568 + t45620;
  t46123 = 0.2*t46115;
  t46202 = 0.1000000000009*t44125;
  t46243 = 9.e-13 + t46074 + t46123 + t46202;
  t49957 = -1.*t44173*t30240*t30880;
  t49958 = -3.e-6*t30204*t30240*t31086;
  t49965 = t49957 + t49958;
  t49976 = -1.*t12143*t30240*t31086;
  t49981 = t44168 + t49976;
  t46889 = t34657 + t46837;
  t49988 = -3.e-6*t30240*t30880*t30972;
  t49990 = t30240*t30972*t31086;
  t50007 = t49988 + t49990;
  t47112 = t31568 + t46837;
  t50359 = -3.e-6*t12143*t30240*t30880;
  t50360 = t12143*t30240*t31086;
  t50362 = t50359 + t50360;
  t50462 = 9.e-12*t30240*t30880*t30972;
  t50477 = -3.e-6*t30240*t30972*t31086;
  t50490 = t50462 + t50477;
  t44826 = -6.000000000054e-7*t30204*t30880*t30984;
  t44833 = 0.2000000000018*t30204*t30984*t31086;
  t44848 = t44167*t44847;
  t44853 = t44567*t44852;
  t44859 = t44724*t44858;
  t44860 = t44778*t44847;
  t44862 = t44786*t44852;
  t44863 = t44792*t44858;
  t44864 = t44860 + t44862 + t44863;
  t44865 = -0.3*t44864;
  t44869 = t44796*t44847;
  t45045 = t44792*t44852;
  t45066 = t44800*t44858;
  t45093 = t44869 + t45045 + t45066;
  t45113 = 0.2*t45093;
  t45120 = t44805*t44847;
  t45126 = t44778*t44852;
  t45127 = t44796*t44858;
  t45128 = t45120 + t45126 + t45127;
  t45132 = -0.099999*t45128;
  t45230 = t44826 + t44833 + t44848 + t44853 + t44859 + t44865 + t45113 + t45132;
  t50686 = -1.000000000009*t30972*t30984;
  t50698 = -3.e-6*t12143*t30240*t31086;
  t50704 = t44630 + t50686 + t50698;
  t50706 = -1.*t30240*t30880*t30972;
  t50710 = t12143*t30984;
  t50713 = t50706 + t50710 + t50477;
  t50756 = 3.e-6*t30240*t30880*t30972;
  t50760 = -3.e-6*t12143*t30984;
  t50776 = 9.e-12*t30240*t30972*t31086;
  t50806 = t50756 + t50760 + t50776;
  t31077 = 0.2000000000018*t30972*t30984;
  t51285 = t44630 + t44645 + t50698;
  t51342 = 3.e-6*t12143*t30240*t30880;
  t51343 = 9.e-12*t12143*t30240*t31086;
  t51363 = t51342 + t44169 + t51343;
  t51372 = -1.000000000009*t12143*t30984;
  t51374 = t44730 + t51372 + t44754;
  t50310 = 6.000000000054e-7*t30240*t30880*t30972;
  t50348 = -0.2000000000018*t30240*t30972*t31086;
  t50368 = t44724*t50362;
  t50495 = t44167*t50490;
  t50497 = t44567*t50007;
  t50498 = t44800*t50362;
  t50505 = t44796*t50490;
  t50556 = t44792*t50007;
  t50566 = t50498 + t50505 + t50556;
  t50579 = 0.2*t50566;
  t50582 = t44796*t50362;
  t50586 = t44805*t50490;
  t50590 = t44778*t50007;
  t50591 = t50582 + t50586 + t50590;
  t50596 = -0.099999*t50591;
  t50598 = t44792*t50362;
  t50600 = t44778*t50490;
  t50606 = t44786*t50007;
  t50607 = t50598 + t50600 + t50606;
  t50608 = -0.3*t50607;
  t50615 = t50310 + t50348 + t50368 + t50495 + t50497 + t50579 + t50596 + t50608;
  t47355 = -0.2000000000018*t12143*t30240;
  t47356 = -0.2000000000018*t30880*t30972*t30984;
  t47392 = -6.000000000054e-7*t30972*t30984*t31086;
  t48215 = t44724*t48081;
  t48329 = t44167*t48311;
  t48351 = t44567*t48341;
  t48364 = t44800*t48081;
  t48374 = t44796*t48311;
  t48417 = t44792*t48341;
  t48425 = t48364 + t48374 + t48417;
  t48451 = 0.2*t48425;
  t48458 = t44796*t48081;
  t48459 = t44805*t48311;
  t48460 = t44778*t48341;
  t48461 = t48458 + t48459 + t48460;
  t48471 = -0.099999*t48461;
  t48851 = t44792*t48081;
  t48904 = t44778*t48311;
  t48918 = t44786*t48341;
  t48953 = t48851 + t48904 + t48918;
  t48957 = -0.3*t48953;
  t48959 = t47355 + t47356 + t47392 + t48215 + t48329 + t48351 + t48451 + t48471 + t48957;
  t52516 = -9.e-12*t31568;
  t52485 = 3.e-6*t30204*t30240*t30880;
  t52490 = -3.e-6*t30972*t30984;
  t52492 = -1.*t44173*t30240*t31086;
  t52495 = t52485 + t52490 + t52492;
  t52539 = t12143*t30240*t30880;
  t52549 = t30972*t30984;
  t52551 = t52539 + t52549 + t49958;
  t52591 = t44752*t30984;
  t52594 = t50706 + t52591 + t50477;
  t52614 = 9.e-12*t31568;
  t50705 = t46243*t50704;
  t50719 = t46032*t50713;
  t50813 = t45551*t50806;
  t50826 = -1.000000000009*t44125*t50704;
  t50829 = t47112*t50713;
  t50833 = t47048*t50806;
  t50838 = t50826 + t50829 + t50833;
  t50888 = -0.3*t50838;
  t50898 = t46889*t50704;
  t50900 = -1.000000000009*t44125*t50713;
  t50901 = t46508*t50806;
  t50923 = t50898 + t50900 + t50901;
  t50931 = 0.2*t50923;
  t51135 = t46508*t50704;
  t51157 = t47048*t50713;
  t51158 = -1.8e-11*t44125*t50806;
  t51160 = t51135 + t51157 + t51158;
  t51161 = -0.099999*t51160;
  t51177 = t50705 + t50719 + t50813 + t50888 + t50931 + t51161;
  t49971 = t45551*t49965;
  t49982 = t46032*t49981;
  t50019 = t46243*t50007;
  t50029 = t46508*t49965;
  t50036 = -1.000000000009*t44125*t49981;
  t50075 = t46889*t50007;
  t50101 = t50029 + t50036 + t50075;
  t50107 = 0.2*t50101;
  t50252 = -1.8e-11*t44125*t49965;
  t50255 = t47048*t49981;
  t50260 = t46508*t50007;
  t50266 = t50252 + t50255 + t50260;
  t50269 = -0.099999*t50266;
  t50277 = t47048*t49965;
  t50278 = t47112*t49981;
  t50280 = -1.000000000009*t44125*t50007;
  t50283 = t50277 + t50278 + t50280;
  t50284 = -0.3*t50283;
  t50299 = t49971 + t49982 + t50019 + t50107 + t50269 + t50284;
  t45570 = t45551*t45566;
  t46072 = t46032*t46040;
  t46507 = t46243*t46256;
  t46689 = t46508*t45566;
  t46774 = -1.000000000009*t44125*t46040;
  t46966 = t46889*t46256;
  t47032 = t46689 + t46774 + t46966;
  t47036 = 0.2*t47032;
  t47041 = -1.8e-11*t44125*t45566;
  t47051 = t47048*t46040;
  t47060 = t46508*t46256;
  t47065 = t47041 + t47051 + t47060;
  t47081 = -0.099999*t47065;
  t47096 = t47048*t45566;
  t47133 = t47112*t46040;
  t47206 = -1.000000000009*t44125*t46256;
  t47293 = t47096 + t47133 + t47206;
  t47329 = -0.3*t47293;
  t47334 = t45570 + t46072 + t46507 + t47036 + t47081 + t47329;
  t52610 = t46508*t52495;
  t53120 = Cos(var1[3]);
  t53146 = 3.e-6*t30204*t53120*t30240*t30880;
  t53147 = -3.e-6*t53120*t30972*t30984;
  t53150 = -1.*t44173*t53120*t30240*t31086;
  t53156 = t53146 + t53147 + t53150;
  t53171 = t12143*t53120*t30240*t30880;
  t53174 = t53120*t30972*t30984;
  t53189 = -3.e-6*t30204*t53120*t30240*t31086;
  t53193 = t53171 + t53174 + t53189;
  t53198 = -1.*t53120*t30240*t30880*t30972;
  t53202 = t44752*t53120*t30984;
  t53205 = -3.e-6*t53120*t30240*t30972*t31086;
  t53207 = t53198 + t53202 + t53205;
  t53370 = Sin(var1[3]);
  t53356 = -1.*t53120*t30880*t30984;
  t53398 = t53370*t31086;
  t53413 = t53356 + t53398;
  t53423 = -1.*t30880*t53370;
  t53424 = -1.*t53120*t30984*t31086;
  t53435 = t53423 + t53424;
  t53437 = t44173*t53413;
  t53439 = 3.e-6*t30204*t53435;
  t53449 = t53437 + t53439;
  t53454 = 3.e-6*t30204*t53413;
  t53459 = t12143*t53435;
  t53464 = t53454 + t53459;
  t53472 = 3.e-6*t30972*t53413;
  t53492 = -1.*t30972*t53435;
  t53497 = t53472 + t53492;
  t53574 = t53120*t30880*t30984;
  t53578 = -1.*t53370*t31086;
  t53582 = t53574 + t53578;
  t53570 = 3.e-6*t53120*t30240*t30972;
  t53586 = 3.e-6*t30204*t53582;
  t53587 = t44173*t53435;
  t53589 = t53570 + t53586 + t53587;
  t53600 = -1.*t53120*t30240*t30972;
  t53613 = t12143*t53582;
  t53616 = t53600 + t53613 + t53439;
  t53621 = -1.*t44752*t53120*t30240;
  t53626 = -1.*t30972*t53582;
  t53629 = 3.e-6*t30972*t53435;
  t53630 = t53621 + t53626 + t53629;
  t53781 = 1.000000000009*t53120*t30240*t30972;
  t53797 = -1.*t12143*t53582;
  t53804 = 3.e-6*t12143*t53435;
  t53805 = t53781 + t53797 + t53804;
  t53815 = 3.e-6*t12143*t53120*t30240;
  t53816 = 3.e-6*t30972*t53582;
  t53831 = -9.e-12*t30972*t53435;
  t53839 = t53815 + t53816 + t53831;
  t53847 = -1.*t12143*t53120*t30240;
  t54027 = t53847 + t53626 + t53629;
  t54099 = -1.*t30880*t53370*t30984;
  t54100 = -1.*t53120*t31086;
  t54101 = t54099 + t54100;
  t54105 = -1.*t53120*t30880;
  t54107 = t53370*t30984*t31086;
  t54108 = t54105 + t54107;
  t54114 = -3.e-6*t30240*t30972*t53370;
  t54126 = 3.e-6*t30204*t54101;
  t54132 = t44173*t54108;
  t54135 = t54114 + t54126 + t54132;
  t54143 = t30240*t30972*t53370;
  t54144 = t12143*t54101;
  t54153 = 3.e-6*t30204*t54108;
  t54237 = t54143 + t54144 + t54153;
  t54251 = t44752*t30240*t53370;
  t54337 = -1.*t30972*t54101;
  t54349 = 3.e-6*t30972*t54108;
  t54441 = t54251 + t54337 + t54349;
  t53134 = 0.2000000000018*t30204*t53120*t30240*t30880;
  t53136 = -0.2000000000018*t53120*t30972*t30984;
  t53140 = 6.000000000054e-7*t30204*t53120*t30240*t31086;
  t53168 = t44167*t53156;
  t53194 = t44567*t53193;
  t53210 = t44724*t53207;
  t53287 = t44778*t53156;
  t53292 = t44786*t53193;
  t53295 = t44792*t53207;
  t53296 = t53287 + t53292 + t53295;
  t53312 = -0.3*t53296;
  t53317 = t44796*t53156;
  t53318 = t44792*t53193;
  t53319 = t44800*t53207;
  t53323 = t53317 + t53318 + t53319;
  t53328 = 0.2*t53323;
  t53329 = t44805*t53156;
  t53334 = t44778*t53193;
  t53339 = t44796*t53207;
  t53340 = t53329 + t53334 + t53339;
  t53342 = -0.099999*t53340;
  t53353 = t53134 + t53136 + t53140 + t53168 + t53194 + t53210 + t53312 + t53328 + t53342;
  t54880 = 3.e-6*t30204*t30240*t30880*t53370;
  t55311 = -3.e-6*t30972*t53370*t30984;
  t55397 = -1.*t44173*t30240*t53370*t31086;
  t55489 = t54880 + t55311 + t55397;
  t55501 = t12143*t30240*t30880*t53370;
  t55570 = t30972*t53370*t30984;
  t55619 = -3.e-6*t30204*t30240*t53370*t31086;
  t55746 = t55501 + t55570 + t55619;
  t55753 = -1.*t30240*t30880*t30972*t53370;
  t55762 = t44752*t53370*t30984;
  t55838 = -3.e-6*t30240*t30972*t53370*t31086;
  t55841 = t55753 + t55762 + t55838;
  t56905 = -1.*t12143*t30240*t30880*t53370;
  t57026 = -1.000000000009*t30972*t53370*t30984;
  t57031 = -3.e-6*t12143*t30240*t53370*t31086;
  t57132 = t56905 + t57026 + t57031;
  t57439 = t12143*t53370*t30984;
  t57443 = t55753 + t57439 + t55838;
  t57499 = 3.e-6*t30240*t30880*t30972*t53370;
  t57756 = -3.e-6*t12143*t53370*t30984;
  t57775 = 9.e-12*t30240*t30972*t53370*t31086;
  t57776 = t57499 + t57756 + t57775;
  t58472 = -1.*t44173*t30240*t30880*t53370;
  t58503 = t58472 + t55619;
  t58523 = -3.e-6*t30204*t30240*t30880*t53370;
  t58594 = -1.*t12143*t30240*t53370*t31086;
  t58812 = t58523 + t58594;
  t58823 = -3.e-6*t30240*t30880*t30972*t53370;
  t58825 = t30240*t30972*t53370*t31086;
  t58853 = t58823 + t58825;
  t54094 = -0.2000000000018*t30240*t30972*t53370;
  t59461 = -3.e-6*t30204*t30880*t53370*t30984;
  t59498 = t44173*t53370*t30984*t31086;
  t59499 = t54114 + t59461 + t59498;
  t59504 = -1.*t12143*t30880*t53370*t30984;
  t59516 = 3.e-6*t30204*t53370*t30984*t31086;
  t59534 = t54143 + t59504 + t59516;
  t59553 = t30880*t30972*t53370*t30984;
  t59582 = 3.e-6*t30972*t53370*t30984*t31086;
  t59592 = t54251 + t59553 + t59582;
  t58414 = 6.000000000054e-7*t30204*t30240*t30880*t53370;
  t58463 = -0.2000000000018*t30204*t30240*t53370*t31086;
  t58505 = t44167*t58503;
  t58821 = t44567*t58812;
  t58854 = t44724*t58853;
  t58860 = t44778*t58503;
  t58861 = t44786*t58812;
  t58907 = t44792*t58853;
  t58923 = t58860 + t58861 + t58907;
  t58930 = -0.3*t58923;
  t58931 = t44796*t58503;
  t58935 = t44792*t58812;
  t58941 = t44800*t58853;
  t59015 = t58931 + t58935 + t58941;
  t59123 = 0.2*t59015;
  t59182 = t44805*t58503;
  t59361 = t44778*t58812;
  t59363 = t44796*t58853;
  t59398 = t59182 + t59361 + t59363;
  t59425 = -0.099999*t59398;
  t59426 = t58414 + t58463 + t58505 + t58821 + t58854 + t58930 + t59123 + t59425;
  t53419 = -6.000000000054e-7*t30204*t53413;
  t53436 = 0.2000000000018*t30204*t53435;
  t53450 = t44167*t53449;
  t53465 = t44567*t53464;
  t53499 = t44724*t53497;
  t53500 = t44778*t53449;
  t53502 = t44786*t53464;
  t53510 = t44792*t53497;
  t53513 = t53500 + t53502 + t53510;
  t53515 = -0.3*t53513;
  t53518 = t44796*t53449;
  t53519 = t44792*t53464;
  t53525 = t44800*t53497;
  t53527 = t53518 + t53519 + t53525;
  t53532 = 0.2*t53527;
  t53535 = t44805*t53449;
  t53537 = t44778*t53464;
  t53544 = t44796*t53497;
  t53547 = t53535 + t53537 + t53544;
  t53548 = -0.099999*t53547;
  t53558 = t53419 + t53436 + t53450 + t53465 + t53499 + t53515 + t53532 + t53548;
  t60011 = t53120*t30880;
  t60121 = -1.*t53370*t30984*t31086;
  t60128 = t60011 + t60121;
  t60006 = t44173*t54101;
  t60137 = 3.e-6*t30204*t60128;
  t60158 = t60006 + t60137;
  t60182 = t12143*t60128;
  t60193 = t54126 + t60182;
  t60248 = 3.e-6*t30972*t54101;
  t60250 = -1.*t30972*t60128;
  t60329 = t60248 + t60250;
  t60733 = 3.e-6*t12143*t54101;
  t60742 = -1.*t12143*t60128;
  t60744 = t60733 + t60742;
  t60796 = -9.e-12*t30972*t54101;
  t60823 = 3.e-6*t30972*t60128;
  t60828 = t60796 + t60823;
  t54104 = 0.2000000000018*t30204*t54101;
  t54113 = -6.000000000054e-7*t30204*t54108;
  t61008 = t54126 + t54132;
  t61050 = t54144 + t54153;
  t61074 = t54337 + t54349;
  t56856 = 0.2000000000018*t30240*t30880*t30972*t53370;
  t56874 = -0.2000000000018*t12143*t53370*t30984;
  t56879 = 6.000000000054e-7*t30240*t30972*t53370*t31086;
  t57245 = t44724*t57132;
  t57444 = t44567*t57443;
  t57781 = t44167*t57776;
  t57894 = t44796*t57132;
  t57914 = t44778*t57443;
  t57925 = t44805*t57776;
  t57947 = t57894 + t57914 + t57925;
  t58054 = -0.099999*t57947;
  t58075 = t44792*t57132;
  t58312 = t44786*t57443;
  t58322 = t44778*t57776;
  t58323 = t58075 + t58312 + t58322;
  t58324 = -0.3*t58323;
  t58325 = t44800*t57132;
  t58331 = t44792*t57443;
  t58332 = t44796*t57776;
  t58333 = t58325 + t58331 + t58332;
  t58372 = 0.2*t58333;
  t58378 = t56856 + t56874 + t56879 + t57245 + t57444 + t57781 + t58054 + t58324 + t58372;
  t53771 = 0.2000000000018*t12143*t53120*t30240;
  t53776 = 0.2000000000018*t30972*t53582;
  t53777 = -6.000000000054e-7*t30972*t53435;
  t53814 = t44724*t53805;
  t53845 = t44167*t53839;
  t54030 = t44567*t54027;
  t54031 = t44800*t53805;
  t54043 = t44796*t53839;
  t54044 = t44792*t54027;
  t54046 = t54031 + t54043 + t54044;
  t54047 = 0.2*t54046;
  t54048 = t44796*t53805;
  t54052 = t44805*t53839;
  t54053 = t44778*t54027;
  t54055 = t54048 + t54052 + t54053;
  t54056 = -0.099999*t54055;
  t54057 = t44792*t53805;
  t54058 = t44778*t53839;
  t54059 = t44786*t54027;
  t54063 = t54057 + t54058 + t54059;
  t54067 = -0.3*t54063;
  t54082 = t53771 + t53776 + t53777 + t53814 + t53845 + t54030 + t54047 + t54056 + t54067;
  t61246 = t30880*t53370*t30984;
  t61250 = t53120*t31086;
  t61251 = t61246 + t61250;
  t61255 = 3.e-6*t12143*t61251;
  t61257 = -9.e-12*t12143*t60128;
  t61327 = t54114 + t61255 + t61257;
  t61348 = -1.*t12143*t61251;
  t61402 = 3.e-6*t12143*t60128;
  t61416 = t54143 + t61348 + t61402;
  t61439 = 1.000000000009*t12143*t30240*t53370;
  t61478 = t30972*t61251;
  t61480 = -3.e-6*t30972*t60128;
  t61489 = t61439 + t61478 + t61480;
  t60469 = -6.000000000054e-7*t30972*t54101;
  t60704 = 0.2000000000018*t30972*t60128;
  t60786 = t44724*t60744;
  t60794 = t44567*t60329;
  t60830 = t44167*t60828;
  t60887 = t44796*t60744;
  t60888 = t44778*t60329;
  t60893 = t44805*t60828;
  t60894 = t60887 + t60888 + t60893;
  t60897 = -0.099999*t60894;
  t60910 = t44792*t60744;
  t60912 = t44786*t60329;
  t60915 = t44778*t60828;
  t60940 = t60910 + t60912 + t60915;
  t60946 = -0.3*t60940;
  t60948 = t44800*t60744;
  t60982 = t44792*t60329;
  t60984 = t44796*t60828;
  t60987 = t60948 + t60982 + t60984;
  t60988 = 0.2*t60987;
  t60992 = t60469 + t60704 + t60786 + t60794 + t60830 + t60897 + t60946 + t60988;
  t61829 = 1.000000000009*t30240*t30972*t53370;
  t61842 = t61829 + t61348 + t61402;
  t61888 = 3.e-6*t12143*t30240*t53370;
  t61890 = 3.e-6*t30972*t61251;
  t61910 = -9.e-12*t30972*t60128;
  t61912 = t61888 + t61890 + t61910;
  t61924 = -1.*t12143*t30240*t53370;
  t61929 = -1.*t30972*t61251;
  t61942 = t61924 + t61929 + t60823;
  t55490 = t45551*t55489;
  t55752 = t46032*t55746;
  t55850 = t46243*t55841;
  t55853 = t46508*t55489;
  t56378 = -1.000000000009*t44125*t55746;
  t56400 = t46889*t55841;
  t56431 = t55853 + t56378 + t56400;
  t56446 = 0.2*t56431;
  t56449 = -1.8e-11*t44125*t55489;
  t56512 = t47048*t55746;
  t56517 = t46508*t55841;
  t56518 = t56449 + t56512 + t56517;
  t56523 = -0.099999*t56518;
  t56527 = t47048*t55489;
  t56533 = t47112*t55746;
  t56541 = -1.000000000009*t44125*t55841;
  t56571 = t56527 + t56533 + t56541;
  t56594 = -0.3*t56571;
  t56736 = t55490 + t55752 + t55850 + t56446 + t56523 + t56594;
  t53598 = t45551*t53589;
  t53617 = t46032*t53616;
  t53651 = t46243*t53630;
  t53654 = t46508*t53589;
  t53657 = -1.000000000009*t44125*t53616;
  t53658 = t46889*t53630;
  t53665 = t53654 + t53657 + t53658;
  t53666 = 0.2*t53665;
  t53668 = -1.8e-11*t44125*t53589;
  t53683 = t47048*t53616;
  t53687 = t46508*t53630;
  t53694 = t53668 + t53683 + t53687;
  t53697 = -0.099999*t53694;
  t53704 = t47048*t53589;
  t53707 = t47112*t53616;
  t53713 = -1.000000000009*t44125*t53630;
  t53723 = t53704 + t53707 + t53713;
  t53724 = -0.3*t53723;
  t53761 = t53598 + t53617 + t53651 + t53666 + t53697 + t53724;
  t60181 = t45551*t60158;
  t60213 = t46032*t60193;
  t60336 = t46243*t60329;
  t60349 = t46508*t60158;
  t60352 = -1.000000000009*t44125*t60193;
  t60399 = t46889*t60329;
  t60402 = t60349 + t60352 + t60399;
  t60404 = 0.2*t60402;
  t60408 = -1.8e-11*t44125*t60158;
  t60412 = t47048*t60193;
  t60413 = t46508*t60329;
  t60416 = t60408 + t60412 + t60413;
  t60417 = -0.099999*t60416;
  t60442 = t47048*t60158;
  t60444 = t47112*t60193;
  t60455 = -1.000000000009*t44125*t60329;
  t60457 = t60442 + t60444 + t60455;
  t60459 = -0.3*t60457;
  t60462 = t60181 + t60213 + t60336 + t60404 + t60417 + t60459;
  t52464 = -1.62e-17*t31568;
  t52471 = 0.1*t45429;
  t52473 = 0.2*t47048;
  t52476 = t52464 + t52471 + t52473;
  t52512 = 0.2000000000018*t31568;
  t52521 = t52516 + t44125;
  t52532 = 0.1*t52521;
  t52536 = t52512 + t46074 + t52532;
  t52568 = 0.1000000000009*t31568;
  t52569 = t52516 + t44484;
  t52577 = 0.2*t52569;
  t52578 = -9.e-7*t47048;
  t52587 = t52568 + t52577 + t52578;
  t62567 = 3.e-6*t30240*t30972*t53370;
  t62568 = 3.e-6*t30204*t61251;
  t62570 = t44173*t60128;
  t62571 = t62567 + t62568 + t62570;
  t52626 = t52614 + t44484;
  t62576 = -1.*t30240*t30972*t53370;
  t62577 = t12143*t61251;
  t62580 = t62576 + t62577 + t60137;
  t62594 = -1.*t44752*t30240*t53370;
  t62596 = t62594 + t61929 + t60823;
  t52670 = t52614 + t44125;
  t61885 = t46243*t61842;
  t61918 = t45551*t61912;
  t61986 = t46032*t61942;
  t62004 = -1.000000000009*t44125*t61842;
  t62131 = t47048*t61912;
  t62137 = t47112*t61942;
  t62143 = t62004 + t62131 + t62137;
  t62264 = -0.3*t62143;
  t62268 = t46508*t61842;
  t62269 = -1.8e-11*t44125*t61912;
  t62270 = t47048*t61942;
  t62302 = t62268 + t62269 + t62270;
  t62306 = -0.099999*t62302;
  t62321 = t46889*t61842;
  t62325 = t46508*t61912;
  t62449 = -1.000000000009*t44125*t61942;
  t62464 = t62321 + t62325 + t62449;
  t62488 = 0.2*t62464;
  t62538 = t61885 + t61918 + t61986 + t62264 + t62306 + t62488;
  t62603 = t46508*t62571;
  t63127 = 0.2000000000018*t30204*t30240*t30880*t53370;
  t63166 = -0.2000000000018*t30972*t53370*t30984;
  t63167 = 6.000000000054e-7*t30204*t30240*t53370*t31086;
  t63168 = t44167*t55489;
  t63169 = t44567*t55746;
  t63170 = t44724*t55841;
  t63171 = t44778*t55489;
  t63186 = t44786*t55746;
  t63199 = t44792*t55841;
  t63219 = t63171 + t63186 + t63199;
  t63243 = -0.3*t63219;
  t63268 = t44796*t55489;
  t63298 = t44792*t55746;
  t63312 = t44800*t55841;
  t63316 = t63268 + t63298 + t63312;
  t63317 = 0.2*t63316;
  t63328 = t44805*t55489;
  t63331 = t44778*t55746;
  t63332 = t44796*t55841;
  t63393 = t63328 + t63331 + t63332;
  t63397 = -0.099999*t63393;
  t63400 = t63127 + t63166 + t63167 + t63168 + t63169 + t63170 + t63243 + t63317 + t63397;
  t62835 = 0.2000000000018*t53120*t30240*t30972;
  t62836 = 0.2000000000018*t30204*t53582;
  t62859 = -6.000000000054e-7*t30204*t53435;
  t62867 = t44167*t53589;
  t62872 = t44567*t53616;
  t62875 = t44724*t53630;
  t62885 = t44778*t53589;
  t62896 = t44786*t53616;
  t62901 = t44792*t53630;
  t62913 = t62885 + t62896 + t62901;
  t62915 = -0.3*t62913;
  t62918 = t44796*t53589;
  t62927 = t44792*t53616;
  t62955 = t44800*t53630;
  t62960 = t62918 + t62927 + t62955;
  t62963 = 0.2*t62960;
  t62964 = t44805*t53589;
  t62970 = t44778*t53616;
  t62971 = t44796*t53630;
  t63049 = t62964 + t62970 + t62971;
  t63116 = -0.099999*t63049;
  t63126 = t62835 + t62836 + t62859 + t62867 + t62872 + t62875 + t62915 + t62963 + t63116;
  t63401 = -6.000000000054e-7*t30204*t54101;
  t63405 = 0.2000000000018*t30204*t60128;
  t63409 = t44167*t60158;
  t63410 = t44567*t60193;
  t63417 = t44724*t60329;
  t63420 = t44778*t60158;
  t63423 = t44786*t60193;
  t63430 = t63420 + t63423 + t60982;
  t63447 = -0.3*t63430;
  t63450 = t44796*t60158;
  t63457 = t44792*t60193;
  t63465 = t44800*t60329;
  t63467 = t63450 + t63457 + t63465;
  t63480 = 0.2*t63467;
  t63481 = t44805*t60158;
  t63485 = t44778*t60193;
  t63490 = t44796*t60329;
  t63491 = t63481 + t63485 + t63490;
  t63533 = -0.099999*t63491;
  t63534 = t63401 + t63405 + t63409 + t63410 + t63417 + t63447 + t63480 + t63533;
  t66511 = t45551*t62571;
  t66514 = t46032*t62580;
  t66515 = t46243*t62596;
  t66516 = -1.000000000009*t44125*t62580;
  t66517 = t46889*t62596;
  t66518 = t62603 + t66516 + t66517;
  t66519 = 0.2*t66518;
  t66520 = -1.8e-11*t44125*t62571;
  t66521 = t47048*t62580;
  t66522 = t46508*t62596;
  t66523 = t66520 + t66521 + t66522;
  t66524 = -0.099999*t66523;
  t66525 = t47048*t62571;
  t66526 = t47112*t62580;
  t66680 = -1.000000000009*t44125*t62596;
  t67298 = t66525 + t66526 + t66680;
  t67533 = -0.3*t67298;
  t67590 = t66511 + t66514 + t66515 + t66519 + t66524 + t67533;
  t63535 = 0.2000000000018*t12143*t30240*t53370;
  t64090 = 0.2000000000018*t30972*t61251;
  t64240 = -6.000000000054e-7*t30972*t60128;
  t64246 = t44724*t61842;
  t64333 = t44167*t61912;
  t64340 = t44567*t61942;
  t64360 = t44800*t61842;
  t64423 = t44796*t61912;
  t65778 = t44792*t61942;
  t65784 = t64360 + t64423 + t65778;
  t65904 = 0.2*t65784;
  t65906 = t44796*t61842;
  t65934 = t44805*t61912;
  t65970 = t44778*t61942;
  t66286 = t65906 + t65934 + t65970;
  t66370 = -0.099999*t66286;
  t66385 = t44792*t61842;
  t66415 = t44778*t61912;
  t66433 = t44786*t61942;
  t66508 = t66385 + t66415 + t66433;
  t66509 = -0.3*t66508;
  t66510 = t63535 + t64090 + t64240 + t64246 + t64333 + t64340 + t65904 + t66370 + t66509;
  t67777 = t44173*t53120*t30240*t30880;
  t67880 = 3.e-6*t30204*t53120*t30240*t31086;
  t67881 = t67777 + t67880;
  t67910 = t12143*t53120*t30240*t31086;
  t67911 = t53146 + t67910;
  t67914 = 3.e-6*t53120*t30240*t30880*t30972;
  t67956 = -1.*t53120*t30240*t30972*t31086;
  t67957 = t67914 + t67956;
  t68228 = -3.e-6*t30204*t53120*t30240*t30880;
  t68229 = 3.e-6*t53120*t30972*t30984;
  t68230 = t44173*t53120*t30240*t31086;
  t68231 = t68228 + t68229 + t68230;
  t68235 = -1.*t12143*t53120*t30240*t30880;
  t68240 = -1.*t53120*t30972*t30984;
  t68241 = t68235 + t68240 + t67880;
  t68253 = t53120*t30240*t30880*t30972;
  t68259 = -1.*t44752*t53120*t30984;
  t68260 = 3.e-6*t53120*t30240*t30972*t31086;
  t68261 = t68253 + t68259 + t68260;
  t68297 = 1.000000000009*t53120*t30972*t30984;
  t68298 = 3.e-6*t12143*t53120*t30240*t31086;
  t68300 = t53171 + t68297 + t68298;
  t68302 = -3.e-6*t53120*t30240*t30880*t30972;
  t68304 = 3.e-6*t12143*t53120*t30984;
  t68305 = -9.e-12*t53120*t30240*t30972*t31086;
  t68307 = t68302 + t68304 + t68305;
  t68309 = -1.*t12143*t53120*t30984;
  t68310 = t68253 + t68309 + t68260;
  t68962 = 3.e-6*t30204*t53120*t30880*t30984;
  t69082 = -1.*t44173*t53120*t30984*t31086;
  t69096 = t53570 + t68962 + t69082;
  t69100 = t12143*t53120*t30880*t30984;
  t69102 = -3.e-6*t30204*t53120*t30984*t31086;
  t69103 = t53600 + t69100 + t69102;
  t69105 = -1.*t53120*t30880*t30972*t30984;
  t69106 = -3.e-6*t53120*t30972*t30984*t31086;
  t69107 = t53621 + t69105 + t69106;
  t67775 = -6.000000000054e-7*t30204*t53120*t30240*t30880;
  t67776 = 0.2000000000018*t30204*t53120*t30240*t31086;
  t67909 = t44167*t67881;
  t67912 = t44567*t67911;
  t68027 = t44724*t67957;
  t68028 = t44778*t67881;
  t68065 = t44786*t67911;
  t68067 = t44792*t67957;
  t68070 = t68028 + t68065 + t68067;
  t68072 = -0.3*t68070;
  t68073 = t44796*t67881;
  t68074 = t44792*t67911;
  t68075 = t44800*t67957;
  t68118 = t68073 + t68074 + t68075;
  t68119 = 0.2*t68118;
  t68120 = t44805*t67881;
  t68121 = t44778*t67911;
  t68122 = t44796*t67957;
  t68124 = t68120 + t68121 + t68122;
  t68161 = -0.099999*t68124;
  t68162 = t67775 + t67776 + t67909 + t67912 + t68027 + t68072 + t68119 + t68161;
  t69440 = t53586 + t53587;
  t69486 = t53613 + t53439;
  t69825 = t53626 + t53629;
  t70208 = t30880*t53370;
  t70209 = t53120*t30984*t31086;
  t70211 = t70208 + t70209;
  t70161 = t44173*t53582;
  t70260 = 3.e-6*t30204*t70211;
  t70261 = t70161 + t70260;
  t70309 = t12143*t70211;
  t70362 = t53586 + t70309;
  t70391 = -1.*t30972*t70211;
  t70393 = t53816 + t70391;
  t70469 = 3.e-6*t12143*t53582;
  t70470 = -1.*t12143*t70211;
  t70471 = t70469 + t70470;
  t70474 = -9.e-12*t30972*t53582;
  t70475 = 3.e-6*t30972*t70211;
  t70476 = t70474 + t70475;
  t68293 = -0.2000000000018*t53120*t30240*t30880*t30972;
  t68294 = 0.2000000000018*t12143*t53120*t30984;
  t68295 = -6.000000000054e-7*t53120*t30240*t30972*t31086;
  t68301 = t44724*t68300;
  t68308 = t44167*t68307;
  t68311 = t44567*t68310;
  t68312 = t44800*t68300;
  t68313 = t44796*t68307;
  t68315 = t44792*t68310;
  t68316 = t68312 + t68313 + t68315;
  t68317 = 0.2*t68316;
  t68318 = t44796*t68300;
  t68319 = t44805*t68307;
  t68320 = t44778*t68310;
  t68321 = t68318 + t68319 + t68320;
  t68322 = -0.099999*t68321;
  t68323 = t44792*t68300;
  t68324 = t44778*t68307;
  t68325 = t44786*t68310;
  t68326 = t68323 + t68324 + t68325;
  t68393 = -0.3*t68326;
  t68455 = t68293 + t68294 + t68295 + t68301 + t68308 + t68311 + t68317 + t68322 + t68393;
  t70558 = 3.e-6*t12143*t53413;
  t70560 = -9.e-12*t12143*t70211;
  t70561 = t53570 + t70558 + t70560;
  t70563 = -1.*t12143*t53413;
  t70566 = 3.e-6*t12143*t70211;
  t70567 = t53600 + t70563 + t70566;
  t70569 = -1.000000000009*t12143*t53120*t30240;
  t70570 = t30972*t53413;
  t70571 = -3.e-6*t30972*t70211;
  t70573 = t70569 + t70570 + t70571;
  t70467 = -6.000000000054e-7*t30972*t53582;
  t70468 = 0.2000000000018*t30972*t70211;
  t70472 = t44724*t70471;
  t70473 = t44567*t70393;
  t70477 = t44167*t70476;
  t70478 = t44796*t70471;
  t70479 = t44778*t70393;
  t70480 = t44805*t70476;
  t70492 = t70478 + t70479 + t70480;
  t70509 = -0.099999*t70492;
  t70511 = t44792*t70471;
  t70533 = t44786*t70393;
  t70536 = t44778*t70476;
  t70538 = t70511 + t70533 + t70536;
  t70539 = -0.3*t70538;
  t70540 = t44800*t70471;
  t70542 = t44792*t70393;
  t70543 = t44796*t70476;
  t70545 = t70540 + t70542 + t70543;
  t70546 = 0.2*t70545;
  t70547 = t70467 + t70468 + t70472 + t70473 + t70477 + t70509 + t70539 + t70546;
  t70599 = -1.000000000009*t53120*t30240*t30972;
  t70602 = t70599 + t70563 + t70566;
  t70604 = -3.e-6*t12143*t53120*t30240;
  t70607 = -9.e-12*t30972*t70211;
  t70608 = t70604 + t53472 + t70607;
  t70610 = t12143*t53120*t30240;
  t70611 = -1.*t30972*t53413;
  t70612 = t70610 + t70611 + t70475;
  t68233 = t45551*t68231;
  t68248 = t46032*t68241;
  t68262 = t46243*t68261;
  t68263 = t46508*t68231;
  t68264 = -1.000000000009*t44125*t68241;
  t68265 = t46889*t68261;
  t68266 = t68263 + t68264 + t68265;
  t68267 = 0.2*t68266;
  t68268 = -1.8e-11*t44125*t68231;
  t68269 = t47048*t68241;
  t68270 = t46508*t68261;
  t68271 = t68268 + t68269 + t68270;
  t68272 = -0.099999*t68271;
  t68275 = t47048*t68231;
  t68278 = t47112*t68241;
  t68280 = -1.000000000009*t44125*t68261;
  t68283 = t68275 + t68278 + t68280;
  t68285 = -0.3*t68283;
  t68289 = t68233 + t68248 + t68262 + t68267 + t68272 + t68285;
  t70289 = t45551*t70261;
  t70365 = t46032*t70362;
  t70441 = t46243*t70393;
  t70442 = t46508*t70261;
  t70443 = -1.000000000009*t44125*t70362;
  t70444 = t46889*t70393;
  t70445 = t70442 + t70443 + t70444;
  t70446 = 0.2*t70445;
  t70450 = -1.8e-11*t44125*t70261;
  t70452 = t47048*t70362;
  t70457 = t46508*t70393;
  t70458 = t70450 + t70452 + t70457;
  t70459 = -0.099999*t70458;
  t70460 = t47048*t70261;
  t70461 = t47112*t70362;
  t70462 = -1.000000000009*t44125*t70393;
  t70463 = t70460 + t70461 + t70462;
  t70464 = -0.3*t70463;
  t70465 = t70289 + t70365 + t70441 + t70446 + t70459 + t70464;
  t70684 = -3.e-6*t53120*t30240*t30972;
  t70789 = t44173*t70211;
  t70790 = t70684 + t53454 + t70789;
  t70834 = t53120*t30240*t30972;
  t70878 = t12143*t53413;
  t70879 = t70834 + t70878 + t70260;
  t70884 = t44752*t53120*t30240;
  t70934 = t70884 + t70611 + t70475;
  t70603 = t46243*t70602;
  t70609 = t45551*t70608;
  t70613 = t46032*t70612;
  t70614 = -1.000000000009*t44125*t70602;
  t70615 = t47048*t70608;
  t70616 = t47112*t70612;
  t70621 = t70614 + t70615 + t70616;
  t70622 = -0.3*t70621;
  t70636 = t46508*t70602;
  t70637 = -1.8e-11*t44125*t70608;
  t70661 = t47048*t70612;
  t70662 = t70636 + t70637 + t70661;
  t70663 = -0.099999*t70662;
  t70664 = t46889*t70602;
  t70666 = t46508*t70608;
  t70667 = -1.000000000009*t44125*t70612;
  t70668 = t70664 + t70666 + t70667;
  t70669 = 0.2*t70668;
  t70671 = t70603 + t70609 + t70613 + t70622 + t70663 + t70669;
  t71058 = t46508*t70790;
  p_output1[0]=(t30952 + t31077 + t31296 + t44167*t44177 + t44567*t44673 + t44724*t44755 - 0.3*(t44177*t44778 + t44673*t44786 + t44755*t44792) + 0.2*(t44673*t44792 + t44177*t44796 + t44755*t44800) - 0.099999*(t44673*t44778 + t44755*t44796 + t44177*t44805))*var2[4] + t45230*var2[5] + t48959*var2[15] + t47334*var2[17];
  p_output1[1]=t45230*var2[4] + (t30952 + t31296 + t44167*t48981 + t44567*t48999 + t44724*t49016 - 0.3*(t44778*t48981 + t44786*t48999 + t44792*t49016) - 0.099999*(t44805*t48981 + t44778*t48999 + t44796*t49016) + 0.2*(t44796*t48981 + t44792*t48999 + t44800*t49016))*var2[5] + t50615*var2[15] + t50299*var2[17];
  p_output1[2]=t48959*var2[4] + t50615*var2[5] + (0.2000000000018*t12143*t30240*t30880 + t31077 + 6.000000000054e-7*t12143*t30240*t31086 + t44567*t51285 + t44167*t51363 + t44724*t51374 - 0.3*(t44786*t51285 + t44778*t51363 + t44792*t51374) - 0.099999*(t44778*t51285 + t44805*t51363 + t44796*t51374) + 0.2*(t44792*t51285 + t44796*t51363 + t44800*t51374))*var2[15] + t51177*var2[17];
  p_output1[3]=t47334*var2[4] + t50299*var2[5] + t51177*var2[15] + (t52476*t52495 + t52536*t52551 + t52587*t52594 - 0.099999*(-1.8e-11*t31568*t52495 + t46508*t52551 + t45525*t52594) - 0.3*(-1.000000000009*t31568*t52594 + t52610 + t52551*t52626) + 0.2*(t45525*t52495 - 1.000000000009*t31568*t52551 + t52594*t52670))*var2[17];
  p_output1[4]=1.;
  p_output1[5]=-0.2000000000018*t30240*t30972 - 0.2000000000018*t30204*t30880*t30984 - 6.000000000054e-7*t30204*t30984*t31086 + t44167*t45566 + t44567*t46040 + t44724*t46256 - 0.3*(t44778*t45566 + t44786*t46040 + t44792*t46256) - 0.099999*(t44805*t45566 + t44778*t46040 + t44796*t46256) + 0.2*(t44796*t45566 + t44792*t46040 + t44800*t46256);
  p_output1[6]=6.000000000054e-7*t30204*t30240*t30880 - 0.2000000000018*t30204*t30240*t31086 + t44167*t49965 + t44567*t49981 + t44724*t50007 - 0.099999*(t44805*t49965 + t44778*t49981 + t44796*t50007) + 0.2*(t44796*t49965 + t44792*t49981 + t44800*t50007) - 0.3*(t44778*t49965 + t44786*t49981 + t50556);
  p_output1[7]=0.2000000000018*t30240*t30880*t30972 - 0.2000000000018*t12143*t30984 + 6.000000000054e-7*t30240*t30972*t31086 + t44724*t50704 + t44567*t50713 + t44167*t50806 - 0.3*(t44792*t50704 + t44786*t50713 + t44778*t50806) + 0.2*(t44800*t50704 + t44792*t50713 + t44796*t50806) - 0.099999*(t44796*t50704 + t44778*t50713 + t44805*t50806);
  p_output1[8]=t45551*t52495 + t46032*t52551 + t46243*t52594 - 0.3*(t47048*t52495 + t47112*t52551 - 1.000000000009*t44125*t52594) - 0.099999*(-1.8e-11*t44125*t52495 + t47048*t52551 + t46508*t52594) + 0.2*(-1.000000000009*t44125*t52551 + t46889*t52594 + t52610);
  p_output1[9]=(t54094 + t54104 + t54113 + t44167*t54135 + t44567*t54237 + t44724*t54441 - 0.3*(t44778*t54135 + t44786*t54237 + t44792*t54441) - 0.099999*(t44805*t54135 + t44778*t54237 + t44796*t54441) + 0.2*(t44796*t54135 + t44792*t54237 + t44800*t54441))*var2[3] + t53353*var2[4] + t53558*var2[5] + t54082*var2[15] + t53761*var2[17];
  p_output1[10]=t53353*var2[3] + (-0.2000000000018*t30204*t30880*t30984*t53370 - 6.000000000054e-7*t30204*t30984*t31086*t53370 + t54094 + t44167*t59499 + t44567*t59534 + t44724*t59592 - 0.3*(t44778*t59499 + t44786*t59534 + t44792*t59592) - 0.099999*(t44805*t59499 + t44778*t59534 + t44796*t59592) + 0.2*(t44796*t59499 + t44792*t59534 + t44800*t59592))*var2[4] + t59426*var2[5] + t58378*var2[15] + t56736*var2[17];
  p_output1[11]=t53558*var2[3] + t59426*var2[4] + (t54104 + t54113 + t44167*t61008 + t44567*t61050 + t44724*t61074 - 0.3*(t44778*t61008 + t44786*t61050 + t44792*t61074) - 0.099999*(t44805*t61008 + t44778*t61050 + t44796*t61074) + 0.2*(t44796*t61008 + t44792*t61050 + t44800*t61074))*var2[5] + t60992*var2[15] + t60462*var2[17];
  p_output1[12]=t54082*var2[3] + t58378*var2[4] + t60992*var2[5] + (t54094 - 6.000000000054e-7*t12143*t60128 + 0.2000000000018*t12143*t61251 + t44167*t61327 + t44567*t61416 + t44724*t61489 - 0.3*(t44778*t61327 + t44786*t61416 + t44792*t61489) - 0.099999*(t44805*t61327 + t44778*t61416 + t44796*t61489) + 0.2*(t44796*t61327 + t44792*t61416 + t44800*t61489))*var2[15] + t62538*var2[17];
  p_output1[13]=t53761*var2[3] + t56736*var2[4] + t60462*var2[5] + t62538*var2[15] + (t52476*t62571 + t52536*t62580 + t52587*t62596 - 0.099999*(-1.8e-11*t31568*t62571 + t46508*t62580 + t45525*t62596) + 0.2*(t45525*t62571 - 1.000000000009*t31568*t62580 + t52670*t62596) - 0.3*(t52626*t62580 - 1.000000000009*t31568*t62596 + t62603))*var2[17];
  p_output1[14]=1.;
  p_output1[15]=t63126;
  p_output1[16]=t63400;
  p_output1[17]=t63534;
  p_output1[18]=t66510;
  p_output1[19]=t67590;
  p_output1[20]=t63126*var2[3] + t63400*var2[4] + t63534*var2[5] + t66510*var2[15] + t67590*var2[17];
  p_output1[21]=t63400*var2[3] + (0.2000000000018*t30204*t30880*t30984*t53120 + 6.000000000054e-7*t30204*t30984*t31086*t53120 + t62835 + t44167*t69096 + t44567*t69103 + t44724*t69107 - 0.3*(t44778*t69096 + t44786*t69103 + t44792*t69107) - 0.099999*(t44805*t69096 + t44778*t69103 + t44796*t69107) + 0.2*(t44796*t69096 + t44792*t69103 + t44800*t69107))*var2[4] + t68162*var2[5] + t68455*var2[15] + t68289*var2[17];
  p_output1[22]=t63534*var2[3] + t68162*var2[4] + (t62836 + t62859 + t44167*t69440 + t44567*t69486 + t44724*t69825 - 0.3*(t44778*t69440 + t44786*t69486 + t44792*t69825) - 0.099999*(t44805*t69440 + t44778*t69486 + t44796*t69825) + 0.2*(t44796*t69440 + t44792*t69486 + t44800*t69825))*var2[5] + t70547*var2[15] + t70465*var2[17];
  p_output1[23]=t66510*var2[3] + t68455*var2[4] + t70547*var2[5] + (0.2000000000018*t12143*t53413 + t62835 - 6.000000000054e-7*t12143*t70211 + t44167*t70561 + t44567*t70567 + t44724*t70573 - 0.3*(t44778*t70561 + t44786*t70567 + t44792*t70573) - 0.099999*(t44805*t70561 + t44778*t70567 + t44796*t70573) + 0.2*(t44796*t70561 + t44792*t70567 + t44800*t70573))*var2[15] + t70671*var2[17];
  p_output1[24]=t67590*var2[3] + t68289*var2[4] + t70465*var2[5] + t70671*var2[15] + (t52476*t70790 + t52536*t70879 + t52587*t70934 - 0.099999*(-1.8e-11*t31568*t70790 + t46508*t70879 + t45525*t70934) + 0.2*(t45525*t70790 - 1.000000000009*t31568*t70879 + t52670*t70934) - 0.3*(t52626*t70879 - 1.000000000009*t31568*t70934 + t71058))*var2[17];
  p_output1[25]=1.;
  p_output1[26]=0.2000000000018*t30240*t30972*t53370 - 6.000000000054e-7*t30204*t60128 + 0.2000000000018*t30204*t61251 + t44167*t62571 + t44567*t62580 + t44724*t62596 - 0.3*(t44778*t62571 + t44786*t62580 + t44792*t62596) - 0.099999*(t44805*t62571 + t44778*t62580 + t44796*t62596) + 0.2*(t44796*t62571 + t44792*t62580 + t44800*t62596);
  p_output1[27]=-0.2000000000018*t30204*t30240*t30880*t53120 + 0.2000000000018*t30972*t30984*t53120 - 6.000000000054e-7*t30204*t30240*t31086*t53120 + t44167*t68231 + t44567*t68241 + t44724*t68261 - 0.3*(t44778*t68231 + t44786*t68241 + t44792*t68261) - 0.099999*(t44805*t68231 + t44778*t68241 + t44796*t68261) + 0.2*(t44796*t68231 + t44792*t68241 + t44800*t68261);
  p_output1[28]=-6.000000000054e-7*t30204*t53582 + 0.2000000000018*t30204*t70211 + t44167*t70261 + t44567*t70362 + t44724*t70393 - 0.099999*(t44805*t70261 + t44778*t70362 + t44796*t70393) + 0.2*(t44796*t70261 + t44792*t70362 + t44800*t70393) - 0.3*(t44778*t70261 + t44786*t70362 + t70542);
  p_output1[29]=-0.2000000000018*t12143*t30240*t53120 + 0.2000000000018*t30972*t53413 - 6.000000000054e-7*t30972*t70211 + t44724*t70602 + t44167*t70608 + t44567*t70612 - 0.099999*(t44796*t70602 + t44805*t70608 + t44778*t70612) - 0.3*(t44792*t70602 + t44778*t70608 + t44786*t70612) + 0.2*(t44800*t70602 + t44796*t70608 + t44792*t70612);
  p_output1[30]=t45551*t70790 + t46032*t70879 + t46243*t70934 - 0.3*(t47048*t70790 + t47112*t70879 - 1.000000000009*t44125*t70934) - 0.099999*(-1.8e-11*t44125*t70790 + t47048*t70879 + t46508*t70934) + 0.2*(-1.000000000009*t44125*t70879 + t46889*t70934 + t71058);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RightFrontFoot.hh"

namespace Flight2
{

void J_impact_velocity_RightFrontFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
