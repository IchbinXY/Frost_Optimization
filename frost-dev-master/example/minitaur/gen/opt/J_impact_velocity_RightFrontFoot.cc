/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:17:09 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t27853;
  double t27982;
  double t27995;
  double t27998;
  double t28119;
  double t28122;
  double t28124;
  double t28126;
  double t28127;
  double t27999;
  double t28047;
  double t28048;
  double t28111;
  double t28131;
  double t28132;
  double t28334;
  double t28128;
  double t28129;
  double t28336;
  double t28299;
  double t28302;
  double t28307;
  double t28326;
  double t28327;
  double t28328;
  double t28347;
  double t28348;
  double t28349;
  double t28350;
  double t28365;
  double t28366;
  double t28367;
  double t28368;
  double t28369;
  double t28370;
  double t28372;
  double t28383;
  double t28384;
  double t28378;
  double t28341;
  double t28376;
  double t28410;
  double t28118;
  double t28125;
  double t28130;
  double t28213;
  double t28236;
  double t28335;
  double t28343;
  double t28344;
  double t28345;
  double t28346;
  double t28354;
  double t28358;
  double t28362;
  double t28363;
  double t28364;
  double t28653;
  double t28654;
  double t28655;
  double t28380;
  double t28658;
  double t28659;
  double t28729;
  double t29209;
  double t29210;
  double t29211;
  double t28421;
  double t28479;
  double t28587;
  double t36870;
  double t36952;
  double t36727;
  double t36737;
  double t38167;
  double t37813;
  double t37852;
  double t38019;
  double t38055;
  double t38263;
  double t38269;
  double t38273;
  double t38356;
  double t38357;
  double t38359;
  double t38365;
  double t38368;
  double t38723;
  double t38373;
  double t38769;
  double t38823;
  double t38824;
  double t38889;
  double t38894;
  double t38896;
  double t38903;
  double t38914;
  double t38919;
  double t38920;
  double t28003;
  double t28114;
  double t39058;
  double t39074;
  double t39076;
  double t36747;
  double t36954;
  double t37808;
  double t37809;
  double t38150;
  double t38170;
  double t38172;
  double t38178;
  double t38252;
  double t38329;
  double t38347;
  double t38349;
  double t38354;
  double t38355;
  double t39127;
  double t39132;
  double t39133;
  double t39135;
  double t39136;
  double t38376;
  double t39138;
  double t39139;
  double t39140;
  double t38758;
  double t39198;
  double t39199;
  double t39200;
  double t39204;
  double t39205;
  double t39207;
  double t28651;
  double t28652;
  double t28657;
  double t29073;
  double t29213;
  double t29214;
  double t29215;
  double t29246;
  double t29326;
  double t29330;
  double t29332;
  double t29337;
  double t29392;
  double t29393;
  double t29395;
  double t29396;
  double t29397;
  double t29399;
  double t29404;
  double t29522;
  double t33990;
  double t39256;
  double t39257;
  double t39258;
  double t39260;
  double t39261;
  double t39262;
  double t39266;
  double t39267;
  double t39270;
  double t39272;
  double t28109;
  double t39302;
  double t39306;
  double t39307;
  double t39308;
  double t39311;
  double t39312;
  double t39191;
  double t39193;
  double t39202;
  double t39208;
  double t39210;
  double t39212;
  double t39213;
  double t39214;
  double t39222;
  double t39233;
  double t39238;
  double t39239;
  double t39240;
  double t39241;
  double t39242;
  double t39244;
  double t39245;
  double t39246;
  double t39247;
  double t39248;
  double t39250;
  double t38765;
  double t38767;
  double t38768;
  double t38890;
  double t38918;
  double t38921;
  double t38922;
  double t38923;
  double t38924;
  double t38961;
  double t38962;
  double t39013;
  double t39014;
  double t39019;
  double t39022;
  double t39027;
  double t39028;
  double t39033;
  double t39034;
  double t39035;
  double t39041;
  double t39048;
  double t39358;
  double t39351;
  double t39352;
  double t39353;
  double t39354;
  double t39365;
  double t39366;
  double t39367;
  double t39388;
  double t39389;
  double t39394;
  double t39259;
  double t39265;
  double t39273;
  double t39276;
  double t39279;
  double t39280;
  double t39281;
  double t39282;
  double t39284;
  double t39285;
  double t39286;
  double t39287;
  double t39288;
  double t39290;
  double t39291;
  double t39292;
  double t39293;
  double t39294;
  double t39295;
  double t39134;
  double t39137;
  double t39142;
  double t39143;
  double t39144;
  double t39145;
  double t39146;
  double t39147;
  double t39151;
  double t39152;
  double t39153;
  double t39162;
  double t39168;
  double t39180;
  double t39181;
  double t39182;
  double t39185;
  double t39186;
  double t39187;
  double t38123;
  double t38315;
  double t38366;
  double t38369;
  double t38371;
  double t38377;
  double t38382;
  double t38389;
  double t38392;
  double t38739;
  double t38752;
  double t38753;
  double t38754;
  double t38756;
  double t38759;
  double t38760;
  double t38761;
  double t38762;
  double t38763;
  double t39393;
  double t39603;
  double t39607;
  double t39608;
  double t39609;
  double t39610;
  double t39612;
  double t39613;
  double t39614;
  double t39616;
  double t39619;
  double t39620;
  double t39622;
  double t39623;
  double t39648;
  double t39647;
  double t39649;
  double t39652;
  double t39654;
  double t39656;
  double t39657;
  double t39659;
  double t39661;
  double t39662;
  double t39664;
  double t39665;
  double t39666;
  double t39669;
  double t39670;
  double t39673;
  double t39694;
  double t39695;
  double t39700;
  double t39693;
  double t39707;
  double t39721;
  double t39725;
  double t39732;
  double t39734;
  double t39735;
  double t39738;
  double t39739;
  double t39740;
  double t39741;
  double t39780;
  double t39781;
  double t39782;
  double t39783;
  double t39786;
  double t39792;
  double t39794;
  double t39796;
  double t39833;
  double t39834;
  double t39868;
  double t39871;
  double t39872;
  double t39882;
  double t39892;
  double t39893;
  double t39895;
  double t39896;
  double t39897;
  double t39900;
  double t39902;
  double t39903;
  double t39904;
  double t39905;
  double t39907;
  double t39908;
  double t39909;
  double t39911;
  double t39604;
  double t39605;
  double t39606;
  double t39611;
  double t39617;
  double t39624;
  double t39626;
  double t39627;
  double t39628;
  double t39631;
  double t39633;
  double t39634;
  double t39635;
  double t39636;
  double t39637;
  double t39638;
  double t39639;
  double t39640;
  double t39641;
  double t39642;
  double t39643;
  double t39645;
  double t39951;
  double t39952;
  double t39954;
  double t39955;
  double t39957;
  double t39958;
  double t39960;
  double t39961;
  double t39963;
  double t39964;
  double t39965;
  double t39967;
  double t40022;
  double t40024;
  double t40026;
  double t40027;
  double t40029;
  double t40031;
  double t40033;
  double t40035;
  double t40036;
  double t40037;
  double t40204;
  double t40206;
  double t40208;
  double t40209;
  double t40211;
  double t40213;
  double t40215;
  double t40216;
  double t39867;
  double t40248;
  double t40249;
  double t40250;
  double t40253;
  double t40255;
  double t40256;
  double t40259;
  double t40261;
  double t40262;
  double t40201;
  double t40202;
  double t40207;
  double t40212;
  double t40218;
  double t40219;
  double t40221;
  double t40222;
  double t40223;
  double t40225;
  double t40226;
  double t40227;
  double t40228;
  double t40229;
  double t40230;
  double t40233;
  double t40234;
  double t40236;
  double t40239;
  double t40241;
  double t40243;
  double t39653;
  double t39658;
  double t39663;
  double t39667;
  double t39674;
  double t39675;
  double t39676;
  double t39677;
  double t39678;
  double t39679;
  double t39680;
  double t39681;
  double t39682;
  double t39683;
  double t39684;
  double t39686;
  double t39687;
  double t39688;
  double t39689;
  double t39690;
  double t39691;
  double t40298;
  double t40299;
  double t40300;
  double t40296;
  double t40302;
  double t40304;
  double t40306;
  double t40309;
  double t40312;
  double t40313;
  double t40314;
  double t40343;
  double t40344;
  double t40345;
  double t40349;
  double t40352;
  double t40353;
  double t39873;
  double t39894;
  double t40376;
  double t40379;
  double t40382;
  double t40018;
  double t40020;
  double t40021;
  double t40028;
  double t40032;
  double t40038;
  double t40039;
  double t40041;
  double t40042;
  double t40047;
  double t40048;
  double t40063;
  double t40150;
  double t40188;
  double t40190;
  double t40191;
  double t40192;
  double t40194;
  double t40195;
  double t40197;
  double t40198;
  double t40199;
  double t39776;
  double t39777;
  double t39779;
  double t39784;
  double t39832;
  double t39835;
  double t39837;
  double t39841;
  double t39846;
  double t39849;
  double t39853;
  double t39854;
  double t39855;
  double t39856;
  double t39858;
  double t39859;
  double t39860;
  double t39861;
  double t39862;
  double t39863;
  double t39864;
  double t39865;
  double t40428;
  double t40429;
  double t40445;
  double t40449;
  double t40450;
  double t40452;
  double t40454;
  double t40455;
  double t40456;
  double t40459;
  double t40460;
  double t40462;
  double t40463;
  double t40339;
  double t40342;
  double t40346;
  double t40348;
  double t40354;
  double t40355;
  double t40356;
  double t40358;
  double t40359;
  double t40360;
  double t40362;
  double t40363;
  double t40364;
  double t40365;
  double t40366;
  double t40368;
  double t40369;
  double t40370;
  double t40372;
  double t40373;
  double t40374;
  double t40496;
  double t40498;
  double t40500;
  double t40502;
  double t40504;
  double t40505;
  double t40509;
  double t40510;
  double t40512;
  double t39956;
  double t39962;
  double t39969;
  double t39970;
  double t39971;
  double t39972;
  double t39973;
  double t39977;
  double t39979;
  double t39980;
  double t39981;
  double t39984;
  double t39985;
  double t39988;
  double t39993;
  double t40003;
  double t40014;
  double t40015;
  double t40016;
  double t39731;
  double t39737;
  double t39742;
  double t39743;
  double t39745;
  double t39746;
  double t39747;
  double t39748;
  double t39749;
  double t39750;
  double t39752;
  double t39753;
  double t39754;
  double t39760;
  double t39767;
  double t39771;
  double t39772;
  double t39773;
  double t39774;
  double t40305;
  double t40310;
  double t40316;
  double t40318;
  double t40319;
  double t40320;
  double t40322;
  double t40323;
  double t40324;
  double t40326;
  double t40327;
  double t40328;
  double t40329;
  double t40330;
  double t40332;
  double t40333;
  double t40334;
  double t40335;
  double t40336;
  double t39346;
  double t39347;
  double t39349;
  double t39350;
  double t39356;
  double t39360;
  double t39361;
  double t39362;
  double t39369;
  double t39370;
  double t39372;
  double t39377;
  double t39385;
  double t40545;
  double t40546;
  double t40548;
  double t40549;
  double t39395;
  double t40552;
  double t40553;
  double t40555;
  double t40557;
  double t40559;
  double t39421;
  double t40499;
  double t40506;
  double t40513;
  double t40514;
  double t40515;
  double t40516;
  double t40518;
  double t40519;
  double t40520;
  double t40521;
  double t40523;
  double t40525;
  double t40526;
  double t40527;
  double t40530;
  double t40531;
  double t40532;
  double t40533;
  double t40535;
  double t40562;
  double t40657;
  double t40658;
  double t40660;
  double t40661;
  double t40662;
  double t40664;
  double t40665;
  double t40669;
  double t40672;
  double t40673;
  double t40674;
  double t40676;
  double t40677;
  double t40678;
  double t40681;
  double t40682;
  double t40684;
  double t40685;
  double t40686;
  double t40689;
  double t40690;
  double t40693;
  double t40596;
  double t40598;
  double t40600;
  double t40602;
  double t40616;
  double t40634;
  double t40636;
  double t40637;
  double t40638;
  double t40640;
  double t40641;
  double t40642;
  double t40644;
  double t40645;
  double t40646;
  double t40648;
  double t40649;
  double t40650;
  double t40652;
  double t40653;
  double t40654;
  double t40656;
  double t40694;
  double t40696;
  double t40697;
  double t40698;
  double t40701;
  double t40702;
  double t40704;
  double t40705;
  double t40706;
  double t40708;
  double t40709;
  double t40710;
  double t40712;
  double t40713;
  double t40714;
  double t40716;
  double t40717;
  double t40718;
  double t40720;
  double t40722;
  double t40820;
  double t40822;
  double t40823;
  double t40824;
  double t40825;
  double t40826;
  double t40827;
  double t40828;
  double t40830;
  double t40831;
  double t40832;
  double t40833;
  double t40834;
  double t40836;
  double t40837;
  double t40839;
  double t40840;
  double t40841;
  double t40725;
  double t40728;
  double t40762;
  double t40765;
  double t40766;
  double t40770;
  double t40772;
  double t40773;
  double t40776;
  double t40777;
  double t40780;
  double t40783;
  double t40785;
  double t40786;
  double t40787;
  double t40812;
  double t40814;
  double t40815;
  double t40816;
  double t40817;
  double t40818;
  double t40819;
  double t40858;
  double t40860;
  double t40862;
  double t40881;
  double t40882;
  double t40890;
  double t40891;
  double t40892;
  double t40915;
  double t40916;
  double t40917;
  double t40918;
  double t40920;
  double t40922;
  double t40924;
  double t40926;
  double t40927;
  double t40928;
  double t40929;
  double t40957;
  double t40959;
  double t40960;
  double t40962;
  double t40963;
  double t40964;
  double t40965;
  double t40967;
  double t40968;
  double t40994;
  double t40995;
  double t40997;
  double t40999;
  double t41000;
  double t41001;
  double t41003;
  double t41004;
  double t41005;
  double t40855;
  double t40857;
  double t40863;
  double t40889;
  double t40893;
  double t40894;
  double t40897;
  double t40898;
  double t40899;
  double t40900;
  double t40901;
  double t40902;
  double t40904;
  double t40905;
  double t40906;
  double t40907;
  double t40908;
  double t40909;
  double t40910;
  double t40912;
  double t40913;
  double t41035;
  double t41037;
  double t41039;
  double t41063;
  double t41064;
  double t41065;
  double t41062;
  double t41066;
  double t41067;
  double t41070;
  double t41071;
  double t41073;
  double t41074;
  double t41103;
  double t41105;
  double t41106;
  double t41110;
  double t41111;
  double t41112;
  double t40953;
  double t40955;
  double t40956;
  double t40961;
  double t40966;
  double t40970;
  double t40971;
  double t40972;
  double t40973;
  double t40974;
  double t40975;
  double t40976;
  double t40978;
  double t40979;
  double t40980;
  double t40981;
  double t40982;
  double t40984;
  double t40985;
  double t40987;
  double t40988;
  double t40989;
  double t41181;
  double t41204;
  double t41206;
  double t41208;
  double t41209;
  double t41210;
  double t41212;
  double t41213;
  double t41214;
  double t41216;
  double t41101;
  double t41102;
  double t41107;
  double t41108;
  double t41113;
  double t41114;
  double t41116;
  double t41117;
  double t41118;
  double t41120;
  double t41121;
  double t41122;
  double t41124;
  double t41126;
  double t41127;
  double t41129;
  double t41135;
  double t41136;
  double t41137;
  double t41140;
  double t41141;
  double t41245;
  double t41246;
  double t41248;
  double t41249;
  double t41251;
  double t41256;
  double t41257;
  double t41258;
  double t40919;
  double t40925;
  double t40930;
  double t40933;
  double t40936;
  double t40937;
  double t40938;
  double t40939;
  double t40940;
  double t40941;
  double t40942;
  double t40943;
  double t40944;
  double t40945;
  double t40946;
  double t40947;
  double t40949;
  double t40950;
  double t40951;
  double t41068;
  double t41072;
  double t41075;
  double t41076;
  double t41077;
  double t41078;
  double t41081;
  double t41083;
  double t41084;
  double t41086;
  double t41087;
  double t41088;
  double t41089;
  double t41092;
  double t41093;
  double t41095;
  double t41096;
  double t41097;
  double t41099;
  double t41300;
  double t41301;
  double t41302;
  double t41331;
  double t41332;
  double t41333;
  double t41337;
  double t41338;
  double t41247;
  double t41255;
  double t41259;
  double t41260;
  double t41261;
  double t41262;
  double t41264;
  double t41267;
  double t41268;
  double t41270;
  double t41271;
  double t41272;
  double t41273;
  double t41274;
  double t41275;
  double t41276;
  double t41277;
  double t41279;
  double t41287;
  double t41341;
  t27853 = Cos(var1[15]);
  t27982 = -1.*t27853;
  t27995 = 1. + t27982;
  t27998 = Cos(var1[4]);
  t28119 = Cos(var1[17]);
  t28122 = -1.*t28119;
  t28124 = 1. + t28122;
  t28126 = -3.e-6*t28124;
  t28127 = Sin(var1[17]);
  t27999 = Cos(var1[5]);
  t28047 = Sin(var1[15]);
  t28048 = Sin(var1[4]);
  t28111 = Sin(var1[5]);
  t28131 = 3.e-6*t28127;
  t28132 = t28126 + t28131;
  t28334 = 9.e-13*var1[17];
  t28128 = -3.e-6*t28127;
  t28129 = t28126 + t28128;
  t28336 = -9.e-12*t28124;
  t28299 = -3.e-6*t27995*t27998*t27999;
  t28302 = 3.e-6*t28047*t28048;
  t28307 = -9.e-12*t27995;
  t28326 = 1. + t28307;
  t28327 = t28326*t27998*t28111;
  t28328 = t28299 + t28302 + t28327;
  t28347 = -1.*t27853*t27998*t27999;
  t28348 = -1.*t28047*t28048;
  t28349 = 3.e-6*t27995*t27998*t28111;
  t28350 = t28347 + t28348 + t28349;
  t28365 = t27998*t27999*t28047;
  t28366 = -1.000000000009*t27995;
  t28367 = 1. + t28366;
  t28368 = -1.*t28367*t28048;
  t28369 = 3.e-6*t27998*t28047*t28111;
  t28370 = t28365 + t28368 + t28369;
  t28372 = 3.e-6*t28124;
  t28383 = -1.000000000009*t28124;
  t28384 = 1. + t28383;
  t28378 = 9.e-12*t28124;
  t28341 = -1.*t28127;
  t28376 = t28372 + t28128;
  t28410 = t28372 + t28131;
  t28118 = 3.e-7*var1[17];
  t28125 = -1.62e-17*t28124;
  t28130 = 0.2*t28129;
  t28213 = 0.1*t28132;
  t28236 = t28118 + t28125 + t28130 + t28213;
  t28335 = 0.2000000000018*t28124;
  t28343 = t28336 + t28341;
  t28344 = 0.1*t28343;
  t28345 = -9.e-7*t28132;
  t28346 = t28334 + t28335 + t28344 + t28345;
  t28354 = 0.1000000000009*t28124;
  t28358 = -9.e-7*t28129;
  t28362 = t28336 + t28127;
  t28363 = 0.2*t28362;
  t28364 = t28334 + t28354 + t28358 + t28363;
  t28653 = t28326*t27999*t28048;
  t28654 = 3.e-6*t27995*t28048*t28111;
  t28655 = t28653 + t28654;
  t28380 = t28378 + t28127;
  t28658 = 3.e-6*t27995*t27999*t28048;
  t28659 = t27853*t28048*t28111;
  t28729 = t28658 + t28659;
  t29209 = 3.e-6*t27999*t28047*t28048;
  t29210 = -1.*t28047*t28048*t28111;
  t29211 = t29209 + t29210;
  t28421 = t28378 + t28341;
  t28479 = -1.8e-11*t28124;
  t28587 = 1. + t28479;
  t36870 = 3.e-6*t28119;
  t36952 = t36870 + t28128;
  t36727 = -3.e-6*t28119;
  t36737 = t36727 + t28128;
  t38167 = -9.e-12*t28127;
  t37813 = -3.e-6*t27998*t28047;
  t37852 = -3.e-6*t27995*t27999*t28048;
  t38019 = t28326*t28048*t28111;
  t38055 = t37813 + t37852 + t38019;
  t38263 = t27998*t28047;
  t38269 = -1.*t27853*t27999*t28048;
  t38273 = t38263 + t38269 + t28654;
  t38356 = t28367*t27998;
  t38357 = t27999*t28047*t28048;
  t38359 = 3.e-6*t28047*t28048*t28111;
  t38365 = t38356 + t38357 + t38359;
  t38368 = t36870 + t28131;
  t38723 = t36727 + t28131;
  t38373 = 9.e-12*t28127;
  t38769 = -1.000000000009*t27998*t28047;
  t38823 = t27853*t27999*t28048;
  t38824 = 3.e-6*t27853*t28048*t28111;
  t38889 = t38769 + t38823 + t38824;
  t38894 = -3.e-6*t27853*t27998;
  t38896 = -3.e-6*t27999*t28047*t28048;
  t38903 = -9.e-12*t28047*t28048*t28111;
  t38914 = t38894 + t38896 + t38903;
  t38919 = t27853*t27998;
  t38920 = t38919 + t38357 + t38359;
  t28003 = -0.2000000000018*t27995*t27998*t27999;
  t28114 = -6.000000000054e-7*t27995*t27998*t28111;
  t39058 = t28299 + t28327;
  t39074 = t28347 + t28349;
  t39076 = t28365 + t28369;
  t36747 = 0.2*t36737;
  t36954 = 0.1*t36952;
  t37808 = -1.62e-17*t28127;
  t37809 = 3.e-7 + t36747 + t36954 + t37808;
  t38150 = -9.e-7*t36952;
  t38170 = t28122 + t38167;
  t38172 = 0.1*t38170;
  t38178 = 0.2000000000018*t28127;
  t38252 = 9.e-13 + t38150 + t38172 + t38178;
  t38329 = -9.e-7*t36737;
  t38347 = t28119 + t38167;
  t38349 = 0.2*t38347;
  t38354 = 0.1000000000009*t28127;
  t38355 = 9.e-13 + t38329 + t38349 + t38354;
  t39127 = -1.*t28326*t27998*t27999;
  t39132 = -3.e-6*t27995*t27998*t28111;
  t39133 = t39127 + t39132;
  t39135 = -1.*t27853*t27998*t28111;
  t39136 = t28299 + t39135;
  t38376 = t28122 + t38373;
  t39138 = -3.e-6*t27998*t27999*t28047;
  t39139 = t27998*t28047*t28111;
  t39140 = t39138 + t39139;
  t38758 = t28119 + t38373;
  t39198 = -3.e-6*t27853*t27998*t27999;
  t39199 = t27853*t27998*t28111;
  t39200 = t39198 + t39199;
  t39204 = 9.e-12*t27998*t27999*t28047;
  t39205 = -3.e-6*t27998*t28047*t28111;
  t39207 = t39204 + t39205;
  t28651 = -6.000000000054e-7*t27995*t27999*t28048;
  t28652 = 0.2000000000018*t27995*t28048*t28111;
  t28657 = t28236*t28655;
  t29073 = t28346*t28729;
  t29213 = t28364*t29211;
  t29214 = t28376*t28655;
  t29215 = t28380*t28729;
  t29246 = t28384*t29211;
  t29326 = t29214 + t29215 + t29246;
  t29330 = -0.3*t29326;
  t29332 = t28410*t28655;
  t29337 = t28384*t28729;
  t29392 = t28421*t29211;
  t29393 = t29332 + t29337 + t29392;
  t29395 = 0.2*t29393;
  t29396 = t28587*t28655;
  t29397 = t28376*t28729;
  t29399 = t28410*t29211;
  t29404 = t29396 + t29397 + t29399;
  t29522 = -0.099999*t29404;
  t33990 = t28651 + t28652 + t28657 + t29073 + t29213 + t29330 + t29395 + t29522;
  t39256 = -1.000000000009*t28047*t28048;
  t39257 = -3.e-6*t27853*t27998*t28111;
  t39258 = t28347 + t39256 + t39257;
  t39260 = -1.*t27998*t27999*t28047;
  t39261 = t27853*t28048;
  t39262 = t39260 + t39261 + t39205;
  t39266 = 3.e-6*t27998*t27999*t28047;
  t39267 = -3.e-6*t27853*t28048;
  t39270 = 9.e-12*t27998*t28047*t28111;
  t39272 = t39266 + t39267 + t39270;
  t28109 = 0.2000000000018*t28047*t28048;
  t39302 = t28347 + t28348 + t39257;
  t39306 = 3.e-6*t27853*t27998*t27999;
  t39307 = 9.e-12*t27853*t27998*t28111;
  t39308 = t39306 + t28302 + t39307;
  t39311 = -1.000000000009*t27853*t28048;
  t39312 = t28365 + t39311 + t28369;
  t39191 = 6.000000000054e-7*t27998*t27999*t28047;
  t39193 = -0.2000000000018*t27998*t28047*t28111;
  t39202 = t28364*t39200;
  t39208 = t28236*t39207;
  t39210 = t28346*t39140;
  t39212 = t28421*t39200;
  t39213 = t28410*t39207;
  t39214 = t28384*t39140;
  t39222 = t39212 + t39213 + t39214;
  t39233 = 0.2*t39222;
  t39238 = t28410*t39200;
  t39239 = t28587*t39207;
  t39240 = t28376*t39140;
  t39241 = t39238 + t39239 + t39240;
  t39242 = -0.099999*t39241;
  t39244 = t28384*t39200;
  t39245 = t28376*t39207;
  t39246 = t28380*t39140;
  t39247 = t39244 + t39245 + t39246;
  t39248 = -0.3*t39247;
  t39250 = t39191 + t39193 + t39202 + t39208 + t39210 + t39233 + t39242 + t39248;
  t38765 = -0.2000000000018*t27853*t27998;
  t38767 = -0.2000000000018*t27999*t28047*t28048;
  t38768 = -6.000000000054e-7*t28047*t28048*t28111;
  t38890 = t28364*t38889;
  t38918 = t28236*t38914;
  t38921 = t28346*t38920;
  t38922 = t28421*t38889;
  t38923 = t28410*t38914;
  t38924 = t28384*t38920;
  t38961 = t38922 + t38923 + t38924;
  t38962 = 0.2*t38961;
  t39013 = t28410*t38889;
  t39014 = t28587*t38914;
  t39019 = t28376*t38920;
  t39022 = t39013 + t39014 + t39019;
  t39027 = -0.099999*t39022;
  t39028 = t28384*t38889;
  t39033 = t28376*t38914;
  t39034 = t28380*t38920;
  t39035 = t39028 + t39033 + t39034;
  t39041 = -0.3*t39035;
  t39048 = t38765 + t38767 + t38768 + t38890 + t38918 + t38921 + t38962 + t39027 + t39041;
  t39358 = -9.e-12*t28119;
  t39351 = 3.e-6*t27995*t27998*t27999;
  t39352 = -3.e-6*t28047*t28048;
  t39353 = -1.*t28326*t27998*t28111;
  t39354 = t39351 + t39352 + t39353;
  t39365 = t27853*t27998*t27999;
  t39366 = t28047*t28048;
  t39367 = t39365 + t39366 + t39132;
  t39388 = t28367*t28048;
  t39389 = t39260 + t39388 + t39205;
  t39394 = 9.e-12*t28119;
  t39259 = t38355*t39258;
  t39265 = t38252*t39262;
  t39273 = t37809*t39272;
  t39276 = -1.000000000009*t28127*t39258;
  t39279 = t38758*t39262;
  t39280 = t38723*t39272;
  t39281 = t39276 + t39279 + t39280;
  t39282 = -0.3*t39281;
  t39284 = t38376*t39258;
  t39285 = -1.000000000009*t28127*t39262;
  t39286 = t38368*t39272;
  t39287 = t39284 + t39285 + t39286;
  t39288 = 0.2*t39287;
  t39290 = t38368*t39258;
  t39291 = t38723*t39262;
  t39292 = -1.8e-11*t28127*t39272;
  t39293 = t39290 + t39291 + t39292;
  t39294 = -0.099999*t39293;
  t39295 = t39259 + t39265 + t39273 + t39282 + t39288 + t39294;
  t39134 = t37809*t39133;
  t39137 = t38252*t39136;
  t39142 = t38355*t39140;
  t39143 = t38368*t39133;
  t39144 = -1.000000000009*t28127*t39136;
  t39145 = t38376*t39140;
  t39146 = t39143 + t39144 + t39145;
  t39147 = 0.2*t39146;
  t39151 = -1.8e-11*t28127*t39133;
  t39152 = t38723*t39136;
  t39153 = t38368*t39140;
  t39162 = t39151 + t39152 + t39153;
  t39168 = -0.099999*t39162;
  t39180 = t38723*t39133;
  t39181 = t38758*t39136;
  t39182 = -1.000000000009*t28127*t39140;
  t39185 = t39180 + t39181 + t39182;
  t39186 = -0.3*t39185;
  t39187 = t39134 + t39137 + t39142 + t39147 + t39168 + t39186;
  t38123 = t37809*t38055;
  t38315 = t38252*t38273;
  t38366 = t38355*t38365;
  t38369 = t38368*t38055;
  t38371 = -1.000000000009*t28127*t38273;
  t38377 = t38376*t38365;
  t38382 = t38369 + t38371 + t38377;
  t38389 = 0.2*t38382;
  t38392 = -1.8e-11*t28127*t38055;
  t38739 = t38723*t38273;
  t38752 = t38368*t38365;
  t38753 = t38392 + t38739 + t38752;
  t38754 = -0.099999*t38753;
  t38756 = t38723*t38055;
  t38759 = t38758*t38273;
  t38760 = -1.000000000009*t28127*t38365;
  t38761 = t38756 + t38759 + t38760;
  t38762 = -0.3*t38761;
  t38763 = t38123 + t38315 + t38366 + t38389 + t38754 + t38762;
  t39393 = t38368*t39354;
  t39603 = Cos(var1[3]);
  t39607 = 3.e-6*t27995*t39603*t27998*t27999;
  t39608 = -3.e-6*t39603*t28047*t28048;
  t39609 = -1.*t28326*t39603*t27998*t28111;
  t39610 = t39607 + t39608 + t39609;
  t39612 = t27853*t39603*t27998*t27999;
  t39613 = t39603*t28047*t28048;
  t39614 = -3.e-6*t27995*t39603*t27998*t28111;
  t39616 = t39612 + t39613 + t39614;
  t39619 = -1.*t39603*t27998*t27999*t28047;
  t39620 = t28367*t39603*t28048;
  t39622 = -3.e-6*t39603*t27998*t28047*t28111;
  t39623 = t39619 + t39620 + t39622;
  t39648 = Sin(var1[3]);
  t39647 = -1.*t39603*t27999*t28048;
  t39649 = t39648*t28111;
  t39652 = t39647 + t39649;
  t39654 = -1.*t27999*t39648;
  t39656 = -1.*t39603*t28048*t28111;
  t39657 = t39654 + t39656;
  t39659 = t28326*t39652;
  t39661 = 3.e-6*t27995*t39657;
  t39662 = t39659 + t39661;
  t39664 = 3.e-6*t27995*t39652;
  t39665 = t27853*t39657;
  t39666 = t39664 + t39665;
  t39669 = 3.e-6*t28047*t39652;
  t39670 = -1.*t28047*t39657;
  t39673 = t39669 + t39670;
  t39694 = t39603*t27999*t28048;
  t39695 = -1.*t39648*t28111;
  t39700 = t39694 + t39695;
  t39693 = 3.e-6*t39603*t27998*t28047;
  t39707 = 3.e-6*t27995*t39700;
  t39721 = t28326*t39657;
  t39725 = t39693 + t39707 + t39721;
  t39732 = -1.*t39603*t27998*t28047;
  t39734 = t27853*t39700;
  t39735 = t39732 + t39734 + t39661;
  t39738 = -1.*t28367*t39603*t27998;
  t39739 = -1.*t28047*t39700;
  t39740 = 3.e-6*t28047*t39657;
  t39741 = t39738 + t39739 + t39740;
  t39780 = 1.000000000009*t39603*t27998*t28047;
  t39781 = -1.*t27853*t39700;
  t39782 = 3.e-6*t27853*t39657;
  t39783 = t39780 + t39781 + t39782;
  t39786 = 3.e-6*t27853*t39603*t27998;
  t39792 = 3.e-6*t28047*t39700;
  t39794 = -9.e-12*t28047*t39657;
  t39796 = t39786 + t39792 + t39794;
  t39833 = -1.*t27853*t39603*t27998;
  t39834 = t39833 + t39739 + t39740;
  t39868 = -1.*t27999*t39648*t28048;
  t39871 = -1.*t39603*t28111;
  t39872 = t39868 + t39871;
  t39882 = -1.*t39603*t27999;
  t39892 = t39648*t28048*t28111;
  t39893 = t39882 + t39892;
  t39895 = -3.e-6*t27998*t28047*t39648;
  t39896 = 3.e-6*t27995*t39872;
  t39897 = t28326*t39893;
  t39900 = t39895 + t39896 + t39897;
  t39902 = t27998*t28047*t39648;
  t39903 = t27853*t39872;
  t39904 = 3.e-6*t27995*t39893;
  t39905 = t39902 + t39903 + t39904;
  t39907 = t28367*t27998*t39648;
  t39908 = -1.*t28047*t39872;
  t39909 = 3.e-6*t28047*t39893;
  t39911 = t39907 + t39908 + t39909;
  t39604 = 0.2000000000018*t27995*t39603*t27998*t27999;
  t39605 = -0.2000000000018*t39603*t28047*t28048;
  t39606 = 6.000000000054e-7*t27995*t39603*t27998*t28111;
  t39611 = t28236*t39610;
  t39617 = t28346*t39616;
  t39624 = t28364*t39623;
  t39626 = t28376*t39610;
  t39627 = t28380*t39616;
  t39628 = t28384*t39623;
  t39631 = t39626 + t39627 + t39628;
  t39633 = -0.3*t39631;
  t39634 = t28410*t39610;
  t39635 = t28384*t39616;
  t39636 = t28421*t39623;
  t39637 = t39634 + t39635 + t39636;
  t39638 = 0.2*t39637;
  t39639 = t28587*t39610;
  t39640 = t28376*t39616;
  t39641 = t28410*t39623;
  t39642 = t39639 + t39640 + t39641;
  t39643 = -0.099999*t39642;
  t39645 = t39604 + t39605 + t39606 + t39611 + t39617 + t39624 + t39633 + t39638 + t39643;
  t39951 = 3.e-6*t27995*t27998*t27999*t39648;
  t39952 = -3.e-6*t28047*t39648*t28048;
  t39954 = -1.*t28326*t27998*t39648*t28111;
  t39955 = t39951 + t39952 + t39954;
  t39957 = t27853*t27998*t27999*t39648;
  t39958 = t28047*t39648*t28048;
  t39960 = -3.e-6*t27995*t27998*t39648*t28111;
  t39961 = t39957 + t39958 + t39960;
  t39963 = -1.*t27998*t27999*t28047*t39648;
  t39964 = t28367*t39648*t28048;
  t39965 = -3.e-6*t27998*t28047*t39648*t28111;
  t39967 = t39963 + t39964 + t39965;
  t40022 = -1.*t27853*t27998*t27999*t39648;
  t40024 = -1.000000000009*t28047*t39648*t28048;
  t40026 = -3.e-6*t27853*t27998*t39648*t28111;
  t40027 = t40022 + t40024 + t40026;
  t40029 = t27853*t39648*t28048;
  t40031 = t39963 + t40029 + t39965;
  t40033 = 3.e-6*t27998*t27999*t28047*t39648;
  t40035 = -3.e-6*t27853*t39648*t28048;
  t40036 = 9.e-12*t27998*t28047*t39648*t28111;
  t40037 = t40033 + t40035 + t40036;
  t40204 = -1.*t28326*t27998*t27999*t39648;
  t40206 = t40204 + t39960;
  t40208 = -3.e-6*t27995*t27998*t27999*t39648;
  t40209 = -1.*t27853*t27998*t39648*t28111;
  t40211 = t40208 + t40209;
  t40213 = -3.e-6*t27998*t27999*t28047*t39648;
  t40215 = t27998*t28047*t39648*t28111;
  t40216 = t40213 + t40215;
  t39867 = -0.2000000000018*t27998*t28047*t39648;
  t40248 = -3.e-6*t27995*t27999*t39648*t28048;
  t40249 = t28326*t39648*t28048*t28111;
  t40250 = t39895 + t40248 + t40249;
  t40253 = -1.*t27853*t27999*t39648*t28048;
  t40255 = 3.e-6*t27995*t39648*t28048*t28111;
  t40256 = t39902 + t40253 + t40255;
  t40259 = t27999*t28047*t39648*t28048;
  t40261 = 3.e-6*t28047*t39648*t28048*t28111;
  t40262 = t39907 + t40259 + t40261;
  t40201 = 6.000000000054e-7*t27995*t27998*t27999*t39648;
  t40202 = -0.2000000000018*t27995*t27998*t39648*t28111;
  t40207 = t28236*t40206;
  t40212 = t28346*t40211;
  t40218 = t28364*t40216;
  t40219 = t28376*t40206;
  t40221 = t28380*t40211;
  t40222 = t28384*t40216;
  t40223 = t40219 + t40221 + t40222;
  t40225 = -0.3*t40223;
  t40226 = t28410*t40206;
  t40227 = t28384*t40211;
  t40228 = t28421*t40216;
  t40229 = t40226 + t40227 + t40228;
  t40230 = 0.2*t40229;
  t40233 = t28587*t40206;
  t40234 = t28376*t40211;
  t40236 = t28410*t40216;
  t40239 = t40233 + t40234 + t40236;
  t40241 = -0.099999*t40239;
  t40243 = t40201 + t40202 + t40207 + t40212 + t40218 + t40225 + t40230 + t40241;
  t39653 = -6.000000000054e-7*t27995*t39652;
  t39658 = 0.2000000000018*t27995*t39657;
  t39663 = t28236*t39662;
  t39667 = t28346*t39666;
  t39674 = t28364*t39673;
  t39675 = t28376*t39662;
  t39676 = t28380*t39666;
  t39677 = t28384*t39673;
  t39678 = t39675 + t39676 + t39677;
  t39679 = -0.3*t39678;
  t39680 = t28410*t39662;
  t39681 = t28384*t39666;
  t39682 = t28421*t39673;
  t39683 = t39680 + t39681 + t39682;
  t39684 = 0.2*t39683;
  t39686 = t28587*t39662;
  t39687 = t28376*t39666;
  t39688 = t28410*t39673;
  t39689 = t39686 + t39687 + t39688;
  t39690 = -0.099999*t39689;
  t39691 = t39653 + t39658 + t39663 + t39667 + t39674 + t39679 + t39684 + t39690;
  t40298 = t39603*t27999;
  t40299 = -1.*t39648*t28048*t28111;
  t40300 = t40298 + t40299;
  t40296 = t28326*t39872;
  t40302 = 3.e-6*t27995*t40300;
  t40304 = t40296 + t40302;
  t40306 = t27853*t40300;
  t40309 = t39896 + t40306;
  t40312 = 3.e-6*t28047*t39872;
  t40313 = -1.*t28047*t40300;
  t40314 = t40312 + t40313;
  t40343 = 3.e-6*t27853*t39872;
  t40344 = -1.*t27853*t40300;
  t40345 = t40343 + t40344;
  t40349 = -9.e-12*t28047*t39872;
  t40352 = 3.e-6*t28047*t40300;
  t40353 = t40349 + t40352;
  t39873 = 0.2000000000018*t27995*t39872;
  t39894 = -6.000000000054e-7*t27995*t39893;
  t40376 = t39896 + t39897;
  t40379 = t39903 + t39904;
  t40382 = t39908 + t39909;
  t40018 = 0.2000000000018*t27998*t27999*t28047*t39648;
  t40020 = -0.2000000000018*t27853*t39648*t28048;
  t40021 = 6.000000000054e-7*t27998*t28047*t39648*t28111;
  t40028 = t28364*t40027;
  t40032 = t28346*t40031;
  t40038 = t28236*t40037;
  t40039 = t28410*t40027;
  t40041 = t28376*t40031;
  t40042 = t28587*t40037;
  t40047 = t40039 + t40041 + t40042;
  t40048 = -0.099999*t40047;
  t40063 = t28384*t40027;
  t40150 = t28380*t40031;
  t40188 = t28376*t40037;
  t40190 = t40063 + t40150 + t40188;
  t40191 = -0.3*t40190;
  t40192 = t28421*t40027;
  t40194 = t28384*t40031;
  t40195 = t28410*t40037;
  t40197 = t40192 + t40194 + t40195;
  t40198 = 0.2*t40197;
  t40199 = t40018 + t40020 + t40021 + t40028 + t40032 + t40038 + t40048 + t40191 + t40198;
  t39776 = 0.2000000000018*t27853*t39603*t27998;
  t39777 = 0.2000000000018*t28047*t39700;
  t39779 = -6.000000000054e-7*t28047*t39657;
  t39784 = t28364*t39783;
  t39832 = t28236*t39796;
  t39835 = t28346*t39834;
  t39837 = t28421*t39783;
  t39841 = t28410*t39796;
  t39846 = t28384*t39834;
  t39849 = t39837 + t39841 + t39846;
  t39853 = 0.2*t39849;
  t39854 = t28410*t39783;
  t39855 = t28587*t39796;
  t39856 = t28376*t39834;
  t39858 = t39854 + t39855 + t39856;
  t39859 = -0.099999*t39858;
  t39860 = t28384*t39783;
  t39861 = t28376*t39796;
  t39862 = t28380*t39834;
  t39863 = t39860 + t39861 + t39862;
  t39864 = -0.3*t39863;
  t39865 = t39776 + t39777 + t39779 + t39784 + t39832 + t39835 + t39853 + t39859 + t39864;
  t40428 = t27999*t39648*t28048;
  t40429 = t39603*t28111;
  t40445 = t40428 + t40429;
  t40449 = 3.e-6*t27853*t40445;
  t40450 = -9.e-12*t27853*t40300;
  t40452 = t39895 + t40449 + t40450;
  t40454 = -1.*t27853*t40445;
  t40455 = 3.e-6*t27853*t40300;
  t40456 = t39902 + t40454 + t40455;
  t40459 = 1.000000000009*t27853*t27998*t39648;
  t40460 = t28047*t40445;
  t40462 = -3.e-6*t28047*t40300;
  t40463 = t40459 + t40460 + t40462;
  t40339 = -6.000000000054e-7*t28047*t39872;
  t40342 = 0.2000000000018*t28047*t40300;
  t40346 = t28364*t40345;
  t40348 = t28346*t40314;
  t40354 = t28236*t40353;
  t40355 = t28410*t40345;
  t40356 = t28376*t40314;
  t40358 = t28587*t40353;
  t40359 = t40355 + t40356 + t40358;
  t40360 = -0.099999*t40359;
  t40362 = t28384*t40345;
  t40363 = t28380*t40314;
  t40364 = t28376*t40353;
  t40365 = t40362 + t40363 + t40364;
  t40366 = -0.3*t40365;
  t40368 = t28421*t40345;
  t40369 = t28384*t40314;
  t40370 = t28410*t40353;
  t40372 = t40368 + t40369 + t40370;
  t40373 = 0.2*t40372;
  t40374 = t40339 + t40342 + t40346 + t40348 + t40354 + t40360 + t40366 + t40373;
  t40496 = 1.000000000009*t27998*t28047*t39648;
  t40498 = t40496 + t40454 + t40455;
  t40500 = 3.e-6*t27853*t27998*t39648;
  t40502 = 3.e-6*t28047*t40445;
  t40504 = -9.e-12*t28047*t40300;
  t40505 = t40500 + t40502 + t40504;
  t40509 = -1.*t27853*t27998*t39648;
  t40510 = -1.*t28047*t40445;
  t40512 = t40509 + t40510 + t40352;
  t39956 = t37809*t39955;
  t39962 = t38252*t39961;
  t39969 = t38355*t39967;
  t39970 = t38368*t39955;
  t39971 = -1.000000000009*t28127*t39961;
  t39972 = t38376*t39967;
  t39973 = t39970 + t39971 + t39972;
  t39977 = 0.2*t39973;
  t39979 = -1.8e-11*t28127*t39955;
  t39980 = t38723*t39961;
  t39981 = t38368*t39967;
  t39984 = t39979 + t39980 + t39981;
  t39985 = -0.099999*t39984;
  t39988 = t38723*t39955;
  t39993 = t38758*t39961;
  t40003 = -1.000000000009*t28127*t39967;
  t40014 = t39988 + t39993 + t40003;
  t40015 = -0.3*t40014;
  t40016 = t39956 + t39962 + t39969 + t39977 + t39985 + t40015;
  t39731 = t37809*t39725;
  t39737 = t38252*t39735;
  t39742 = t38355*t39741;
  t39743 = t38368*t39725;
  t39745 = -1.000000000009*t28127*t39735;
  t39746 = t38376*t39741;
  t39747 = t39743 + t39745 + t39746;
  t39748 = 0.2*t39747;
  t39749 = -1.8e-11*t28127*t39725;
  t39750 = t38723*t39735;
  t39752 = t38368*t39741;
  t39753 = t39749 + t39750 + t39752;
  t39754 = -0.099999*t39753;
  t39760 = t38723*t39725;
  t39767 = t38758*t39735;
  t39771 = -1.000000000009*t28127*t39741;
  t39772 = t39760 + t39767 + t39771;
  t39773 = -0.3*t39772;
  t39774 = t39731 + t39737 + t39742 + t39748 + t39754 + t39773;
  t40305 = t37809*t40304;
  t40310 = t38252*t40309;
  t40316 = t38355*t40314;
  t40318 = t38368*t40304;
  t40319 = -1.000000000009*t28127*t40309;
  t40320 = t38376*t40314;
  t40322 = t40318 + t40319 + t40320;
  t40323 = 0.2*t40322;
  t40324 = -1.8e-11*t28127*t40304;
  t40326 = t38723*t40309;
  t40327 = t38368*t40314;
  t40328 = t40324 + t40326 + t40327;
  t40329 = -0.099999*t40328;
  t40330 = t38723*t40304;
  t40332 = t38758*t40309;
  t40333 = -1.000000000009*t28127*t40314;
  t40334 = t40330 + t40332 + t40333;
  t40335 = -0.3*t40334;
  t40336 = t40305 + t40310 + t40316 + t40323 + t40329 + t40335;
  t39346 = -1.62e-17*t28119;
  t39347 = 0.1*t36737;
  t39349 = 0.2*t38723;
  t39350 = t39346 + t39347 + t39349;
  t39356 = 0.2000000000018*t28119;
  t39360 = t39358 + t28127;
  t39361 = 0.1*t39360;
  t39362 = t39356 + t38329 + t39361;
  t39369 = 0.1000000000009*t28119;
  t39370 = t39358 + t28341;
  t39372 = 0.2*t39370;
  t39377 = -9.e-7*t38723;
  t39385 = t39369 + t39372 + t39377;
  t40545 = 3.e-6*t27998*t28047*t39648;
  t40546 = 3.e-6*t27995*t40445;
  t40548 = t28326*t40300;
  t40549 = t40545 + t40546 + t40548;
  t39395 = t39394 + t28341;
  t40552 = -1.*t27998*t28047*t39648;
  t40553 = t27853*t40445;
  t40555 = t40552 + t40553 + t40302;
  t40557 = -1.*t28367*t27998*t39648;
  t40559 = t40557 + t40510 + t40352;
  t39421 = t39394 + t28127;
  t40499 = t38355*t40498;
  t40506 = t37809*t40505;
  t40513 = t38252*t40512;
  t40514 = -1.000000000009*t28127*t40498;
  t40515 = t38723*t40505;
  t40516 = t38758*t40512;
  t40518 = t40514 + t40515 + t40516;
  t40519 = -0.3*t40518;
  t40520 = t38368*t40498;
  t40521 = -1.8e-11*t28127*t40505;
  t40523 = t38723*t40512;
  t40525 = t40520 + t40521 + t40523;
  t40526 = -0.099999*t40525;
  t40527 = t38376*t40498;
  t40530 = t38368*t40505;
  t40531 = -1.000000000009*t28127*t40512;
  t40532 = t40527 + t40530 + t40531;
  t40533 = 0.2*t40532;
  t40535 = t40499 + t40506 + t40513 + t40519 + t40526 + t40533;
  t40562 = t38368*t40549;
  t40657 = 0.2000000000018*t27995*t27998*t27999*t39648;
  t40658 = -0.2000000000018*t28047*t39648*t28048;
  t40660 = 6.000000000054e-7*t27995*t27998*t39648*t28111;
  t40661 = t28236*t39955;
  t40662 = t28346*t39961;
  t40664 = t28364*t39967;
  t40665 = t28376*t39955;
  t40669 = t28380*t39961;
  t40672 = t28384*t39967;
  t40673 = t40665 + t40669 + t40672;
  t40674 = -0.3*t40673;
  t40676 = t28410*t39955;
  t40677 = t28384*t39961;
  t40678 = t28421*t39967;
  t40681 = t40676 + t40677 + t40678;
  t40682 = 0.2*t40681;
  t40684 = t28587*t39955;
  t40685 = t28376*t39961;
  t40686 = t28410*t39967;
  t40689 = t40684 + t40685 + t40686;
  t40690 = -0.099999*t40689;
  t40693 = t40657 + t40658 + t40660 + t40661 + t40662 + t40664 + t40674 + t40682 + t40690;
  t40596 = 0.2000000000018*t39603*t27998*t28047;
  t40598 = 0.2000000000018*t27995*t39700;
  t40600 = -6.000000000054e-7*t27995*t39657;
  t40602 = t28236*t39725;
  t40616 = t28346*t39735;
  t40634 = t28364*t39741;
  t40636 = t28376*t39725;
  t40637 = t28380*t39735;
  t40638 = t28384*t39741;
  t40640 = t40636 + t40637 + t40638;
  t40641 = -0.3*t40640;
  t40642 = t28410*t39725;
  t40644 = t28384*t39735;
  t40645 = t28421*t39741;
  t40646 = t40642 + t40644 + t40645;
  t40648 = 0.2*t40646;
  t40649 = t28587*t39725;
  t40650 = t28376*t39735;
  t40652 = t28410*t39741;
  t40653 = t40649 + t40650 + t40652;
  t40654 = -0.099999*t40653;
  t40656 = t40596 + t40598 + t40600 + t40602 + t40616 + t40634 + t40641 + t40648 + t40654;
  t40694 = -6.000000000054e-7*t27995*t39872;
  t40696 = 0.2000000000018*t27995*t40300;
  t40697 = t28236*t40304;
  t40698 = t28346*t40309;
  t40701 = t28364*t40314;
  t40702 = t28376*t40304;
  t40704 = t28380*t40309;
  t40705 = t40702 + t40704 + t40369;
  t40706 = -0.3*t40705;
  t40708 = t28410*t40304;
  t40709 = t28384*t40309;
  t40710 = t28421*t40314;
  t40712 = t40708 + t40709 + t40710;
  t40713 = 0.2*t40712;
  t40714 = t28587*t40304;
  t40716 = t28376*t40309;
  t40717 = t28410*t40314;
  t40718 = t40714 + t40716 + t40717;
  t40720 = -0.099999*t40718;
  t40722 = t40694 + t40696 + t40697 + t40698 + t40701 + t40706 + t40713 + t40720;
  t40820 = t37809*t40549;
  t40822 = t38252*t40555;
  t40823 = t38355*t40559;
  t40824 = -1.000000000009*t28127*t40555;
  t40825 = t38376*t40559;
  t40826 = t40562 + t40824 + t40825;
  t40827 = 0.2*t40826;
  t40828 = -1.8e-11*t28127*t40549;
  t40830 = t38723*t40555;
  t40831 = t38368*t40559;
  t40832 = t40828 + t40830 + t40831;
  t40833 = -0.099999*t40832;
  t40834 = t38723*t40549;
  t40836 = t38758*t40555;
  t40837 = -1.000000000009*t28127*t40559;
  t40839 = t40834 + t40836 + t40837;
  t40840 = -0.3*t40839;
  t40841 = t40820 + t40822 + t40823 + t40827 + t40833 + t40840;
  t40725 = 0.2000000000018*t27853*t27998*t39648;
  t40728 = 0.2000000000018*t28047*t40445;
  t40762 = -6.000000000054e-7*t28047*t40300;
  t40765 = t28364*t40498;
  t40766 = t28236*t40505;
  t40770 = t28346*t40512;
  t40772 = t28421*t40498;
  t40773 = t28410*t40505;
  t40776 = t28384*t40512;
  t40777 = t40772 + t40773 + t40776;
  t40780 = 0.2*t40777;
  t40783 = t28410*t40498;
  t40785 = t28587*t40505;
  t40786 = t28376*t40512;
  t40787 = t40783 + t40785 + t40786;
  t40812 = -0.099999*t40787;
  t40814 = t28384*t40498;
  t40815 = t28376*t40505;
  t40816 = t28380*t40512;
  t40817 = t40814 + t40815 + t40816;
  t40818 = -0.3*t40817;
  t40819 = t40725 + t40728 + t40762 + t40765 + t40766 + t40770 + t40780 + t40812 + t40818;
  t40858 = t28326*t39603*t27998*t27999;
  t40860 = 3.e-6*t27995*t39603*t27998*t28111;
  t40862 = t40858 + t40860;
  t40881 = t27853*t39603*t27998*t28111;
  t40882 = t39607 + t40881;
  t40890 = 3.e-6*t39603*t27998*t27999*t28047;
  t40891 = -1.*t39603*t27998*t28047*t28111;
  t40892 = t40890 + t40891;
  t40915 = -3.e-6*t27995*t39603*t27998*t27999;
  t40916 = 3.e-6*t39603*t28047*t28048;
  t40917 = t28326*t39603*t27998*t28111;
  t40918 = t40915 + t40916 + t40917;
  t40920 = -1.*t27853*t39603*t27998*t27999;
  t40922 = -1.*t39603*t28047*t28048;
  t40924 = t40920 + t40922 + t40860;
  t40926 = t39603*t27998*t27999*t28047;
  t40927 = -1.*t28367*t39603*t28048;
  t40928 = 3.e-6*t39603*t27998*t28047*t28111;
  t40929 = t40926 + t40927 + t40928;
  t40957 = 1.000000000009*t39603*t28047*t28048;
  t40959 = 3.e-6*t27853*t39603*t27998*t28111;
  t40960 = t39612 + t40957 + t40959;
  t40962 = -3.e-6*t39603*t27998*t27999*t28047;
  t40963 = 3.e-6*t27853*t39603*t28048;
  t40964 = -9.e-12*t39603*t27998*t28047*t28111;
  t40965 = t40962 + t40963 + t40964;
  t40967 = -1.*t27853*t39603*t28048;
  t40968 = t40926 + t40967 + t40928;
  t40994 = 3.e-6*t27995*t39603*t27999*t28048;
  t40995 = -1.*t28326*t39603*t28048*t28111;
  t40997 = t39693 + t40994 + t40995;
  t40999 = t27853*t39603*t27999*t28048;
  t41000 = -3.e-6*t27995*t39603*t28048*t28111;
  t41001 = t39732 + t40999 + t41000;
  t41003 = -1.*t39603*t27999*t28047*t28048;
  t41004 = -3.e-6*t39603*t28047*t28048*t28111;
  t41005 = t39738 + t41003 + t41004;
  t40855 = -6.000000000054e-7*t27995*t39603*t27998*t27999;
  t40857 = 0.2000000000018*t27995*t39603*t27998*t28111;
  t40863 = t28236*t40862;
  t40889 = t28346*t40882;
  t40893 = t28364*t40892;
  t40894 = t28376*t40862;
  t40897 = t28380*t40882;
  t40898 = t28384*t40892;
  t40899 = t40894 + t40897 + t40898;
  t40900 = -0.3*t40899;
  t40901 = t28410*t40862;
  t40902 = t28384*t40882;
  t40904 = t28421*t40892;
  t40905 = t40901 + t40902 + t40904;
  t40906 = 0.2*t40905;
  t40907 = t28587*t40862;
  t40908 = t28376*t40882;
  t40909 = t28410*t40892;
  t40910 = t40907 + t40908 + t40909;
  t40912 = -0.099999*t40910;
  t40913 = t40855 + t40857 + t40863 + t40889 + t40893 + t40900 + t40906 + t40912;
  t41035 = t39707 + t39721;
  t41037 = t39734 + t39661;
  t41039 = t39739 + t39740;
  t41063 = t27999*t39648;
  t41064 = t39603*t28048*t28111;
  t41065 = t41063 + t41064;
  t41062 = t28326*t39700;
  t41066 = 3.e-6*t27995*t41065;
  t41067 = t41062 + t41066;
  t41070 = t27853*t41065;
  t41071 = t39707 + t41070;
  t41073 = -1.*t28047*t41065;
  t41074 = t39792 + t41073;
  t41103 = 3.e-6*t27853*t39700;
  t41105 = -1.*t27853*t41065;
  t41106 = t41103 + t41105;
  t41110 = -9.e-12*t28047*t39700;
  t41111 = 3.e-6*t28047*t41065;
  t41112 = t41110 + t41111;
  t40953 = -0.2000000000018*t39603*t27998*t27999*t28047;
  t40955 = 0.2000000000018*t27853*t39603*t28048;
  t40956 = -6.000000000054e-7*t39603*t27998*t28047*t28111;
  t40961 = t28364*t40960;
  t40966 = t28236*t40965;
  t40970 = t28346*t40968;
  t40971 = t28421*t40960;
  t40972 = t28410*t40965;
  t40973 = t28384*t40968;
  t40974 = t40971 + t40972 + t40973;
  t40975 = 0.2*t40974;
  t40976 = t28410*t40960;
  t40978 = t28587*t40965;
  t40979 = t28376*t40968;
  t40980 = t40976 + t40978 + t40979;
  t40981 = -0.099999*t40980;
  t40982 = t28384*t40960;
  t40984 = t28376*t40965;
  t40985 = t28380*t40968;
  t40987 = t40982 + t40984 + t40985;
  t40988 = -0.3*t40987;
  t40989 = t40953 + t40955 + t40956 + t40961 + t40966 + t40970 + t40975 + t40981 + t40988;
  t41181 = 3.e-6*t27853*t39652;
  t41204 = -9.e-12*t27853*t41065;
  t41206 = t39693 + t41181 + t41204;
  t41208 = -1.*t27853*t39652;
  t41209 = 3.e-6*t27853*t41065;
  t41210 = t39732 + t41208 + t41209;
  t41212 = -1.000000000009*t27853*t39603*t27998;
  t41213 = t28047*t39652;
  t41214 = -3.e-6*t28047*t41065;
  t41216 = t41212 + t41213 + t41214;
  t41101 = -6.000000000054e-7*t28047*t39700;
  t41102 = 0.2000000000018*t28047*t41065;
  t41107 = t28364*t41106;
  t41108 = t28346*t41074;
  t41113 = t28236*t41112;
  t41114 = t28410*t41106;
  t41116 = t28376*t41074;
  t41117 = t28587*t41112;
  t41118 = t41114 + t41116 + t41117;
  t41120 = -0.099999*t41118;
  t41121 = t28384*t41106;
  t41122 = t28380*t41074;
  t41124 = t28376*t41112;
  t41126 = t41121 + t41122 + t41124;
  t41127 = -0.3*t41126;
  t41129 = t28421*t41106;
  t41135 = t28384*t41074;
  t41136 = t28410*t41112;
  t41137 = t41129 + t41135 + t41136;
  t41140 = 0.2*t41137;
  t41141 = t41101 + t41102 + t41107 + t41108 + t41113 + t41120 + t41127 + t41140;
  t41245 = -1.000000000009*t39603*t27998*t28047;
  t41246 = t41245 + t41208 + t41209;
  t41248 = -3.e-6*t27853*t39603*t27998;
  t41249 = -9.e-12*t28047*t41065;
  t41251 = t41248 + t39669 + t41249;
  t41256 = t27853*t39603*t27998;
  t41257 = -1.*t28047*t39652;
  t41258 = t41256 + t41257 + t41111;
  t40919 = t37809*t40918;
  t40925 = t38252*t40924;
  t40930 = t38355*t40929;
  t40933 = t38368*t40918;
  t40936 = -1.000000000009*t28127*t40924;
  t40937 = t38376*t40929;
  t40938 = t40933 + t40936 + t40937;
  t40939 = 0.2*t40938;
  t40940 = -1.8e-11*t28127*t40918;
  t40941 = t38723*t40924;
  t40942 = t38368*t40929;
  t40943 = t40940 + t40941 + t40942;
  t40944 = -0.099999*t40943;
  t40945 = t38723*t40918;
  t40946 = t38758*t40924;
  t40947 = -1.000000000009*t28127*t40929;
  t40949 = t40945 + t40946 + t40947;
  t40950 = -0.3*t40949;
  t40951 = t40919 + t40925 + t40930 + t40939 + t40944 + t40950;
  t41068 = t37809*t41067;
  t41072 = t38252*t41071;
  t41075 = t38355*t41074;
  t41076 = t38368*t41067;
  t41077 = -1.000000000009*t28127*t41071;
  t41078 = t38376*t41074;
  t41081 = t41076 + t41077 + t41078;
  t41083 = 0.2*t41081;
  t41084 = -1.8e-11*t28127*t41067;
  t41086 = t38723*t41071;
  t41087 = t38368*t41074;
  t41088 = t41084 + t41086 + t41087;
  t41089 = -0.099999*t41088;
  t41092 = t38723*t41067;
  t41093 = t38758*t41071;
  t41095 = -1.000000000009*t28127*t41074;
  t41096 = t41092 + t41093 + t41095;
  t41097 = -0.3*t41096;
  t41099 = t41068 + t41072 + t41075 + t41083 + t41089 + t41097;
  t41300 = -3.e-6*t39603*t27998*t28047;
  t41301 = t28326*t41065;
  t41302 = t41300 + t39664 + t41301;
  t41331 = t39603*t27998*t28047;
  t41332 = t27853*t39652;
  t41333 = t41331 + t41332 + t41066;
  t41337 = t28367*t39603*t27998;
  t41338 = t41337 + t41257 + t41111;
  t41247 = t38355*t41246;
  t41255 = t37809*t41251;
  t41259 = t38252*t41258;
  t41260 = -1.000000000009*t28127*t41246;
  t41261 = t38723*t41251;
  t41262 = t38758*t41258;
  t41264 = t41260 + t41261 + t41262;
  t41267 = -0.3*t41264;
  t41268 = t38368*t41246;
  t41270 = -1.8e-11*t28127*t41251;
  t41271 = t38723*t41258;
  t41272 = t41268 + t41270 + t41271;
  t41273 = -0.099999*t41272;
  t41274 = t38376*t41246;
  t41275 = t38368*t41251;
  t41276 = -1.000000000009*t28127*t41258;
  t41277 = t41274 + t41275 + t41276;
  t41279 = 0.2*t41277;
  t41287 = t41247 + t41255 + t41259 + t41267 + t41273 + t41279;
  t41341 = t38368*t41302;
  p_output1[0]=(t28003 + t28109 + t28114 + t28236*t28328 + t28346*t28350 + t28364*t28370 - 0.3*(t28328*t28376 + t28350*t28380 + t28370*t28384) + 0.2*(t28350*t28384 + t28328*t28410 + t28370*t28421) - 0.099999*(t28350*t28376 + t28370*t28410 + t28328*t28587))*var2[4] + t33990*var2[5] + t39048*var2[15] + t38763*var2[17];
  p_output1[1]=t33990*var2[4] + (t28003 + t28114 + t28236*t39058 + t28346*t39074 + t28364*t39076 - 0.3*(t28376*t39058 + t28380*t39074 + t28384*t39076) - 0.099999*(t28587*t39058 + t28376*t39074 + t28410*t39076) + 0.2*(t28410*t39058 + t28384*t39074 + t28421*t39076))*var2[5] + t39250*var2[15] + t39187*var2[17];
  p_output1[2]=t39048*var2[4] + t39250*var2[5] + (0.2000000000018*t27853*t27998*t27999 + t28109 + 6.000000000054e-7*t27853*t27998*t28111 + t28346*t39302 + t28236*t39308 + t28364*t39312 - 0.3*(t28380*t39302 + t28376*t39308 + t28384*t39312) - 0.099999*(t28376*t39302 + t28587*t39308 + t28410*t39312) + 0.2*(t28384*t39302 + t28410*t39308 + t28421*t39312))*var2[15] + t39295*var2[17];
  p_output1[3]=t38763*var2[4] + t39187*var2[5] + t39295*var2[15] + (t39350*t39354 + t39362*t39367 + t39385*t39389 - 0.099999*(-1.8e-11*t28119*t39354 + t38368*t39367 + t36952*t39389) - 0.3*(-1.000000000009*t28119*t39389 + t39393 + t39367*t39395) + 0.2*(t36952*t39354 - 1.000000000009*t28119*t39367 + t39389*t39421))*var2[17];
  p_output1[4]=1.;
  p_output1[5]=-0.2000000000018*t27998*t28047 - 0.2000000000018*t27995*t27999*t28048 - 6.000000000054e-7*t27995*t28048*t28111 + t28236*t38055 + t28346*t38273 + t28364*t38365 - 0.3*(t28376*t38055 + t28380*t38273 + t28384*t38365) - 0.099999*(t28587*t38055 + t28376*t38273 + t28410*t38365) + 0.2*(t28410*t38055 + t28384*t38273 + t28421*t38365);
  p_output1[6]=6.000000000054e-7*t27995*t27998*t27999 - 0.2000000000018*t27995*t27998*t28111 + t28236*t39133 + t28346*t39136 + t28364*t39140 - 0.099999*(t28587*t39133 + t28376*t39136 + t28410*t39140) + 0.2*(t28410*t39133 + t28384*t39136 + t28421*t39140) - 0.3*(t28376*t39133 + t28380*t39136 + t39214);
  p_output1[7]=0.2000000000018*t27998*t27999*t28047 - 0.2000000000018*t27853*t28048 + 6.000000000054e-7*t27998*t28047*t28111 + t28364*t39258 + t28346*t39262 + t28236*t39272 - 0.3*(t28384*t39258 + t28380*t39262 + t28376*t39272) + 0.2*(t28421*t39258 + t28384*t39262 + t28410*t39272) - 0.099999*(t28410*t39258 + t28376*t39262 + t28587*t39272);
  p_output1[8]=t37809*t39354 + t38252*t39367 + t38355*t39389 - 0.3*(t38723*t39354 + t38758*t39367 - 1.000000000009*t28127*t39389) - 0.099999*(-1.8e-11*t28127*t39354 + t38723*t39367 + t38368*t39389) + 0.2*(-1.000000000009*t28127*t39367 + t38376*t39389 + t39393);
  p_output1[9]=(t39867 + t39873 + t39894 + t28236*t39900 + t28346*t39905 + t28364*t39911 - 0.3*(t28376*t39900 + t28380*t39905 + t28384*t39911) - 0.099999*(t28587*t39900 + t28376*t39905 + t28410*t39911) + 0.2*(t28410*t39900 + t28384*t39905 + t28421*t39911))*var2[3] + t39645*var2[4] + t39691*var2[5] + t39865*var2[15] + t39774*var2[17];
  p_output1[10]=t39645*var2[3] + (-0.2000000000018*t27995*t27999*t28048*t39648 - 6.000000000054e-7*t27995*t28048*t28111*t39648 + t39867 + t28236*t40250 + t28346*t40256 + t28364*t40262 - 0.3*(t28376*t40250 + t28380*t40256 + t28384*t40262) - 0.099999*(t28587*t40250 + t28376*t40256 + t28410*t40262) + 0.2*(t28410*t40250 + t28384*t40256 + t28421*t40262))*var2[4] + t40243*var2[5] + t40199*var2[15] + t40016*var2[17];
  p_output1[11]=t39691*var2[3] + t40243*var2[4] + (t39873 + t39894 + t28236*t40376 + t28346*t40379 + t28364*t40382 - 0.3*(t28376*t40376 + t28380*t40379 + t28384*t40382) - 0.099999*(t28587*t40376 + t28376*t40379 + t28410*t40382) + 0.2*(t28410*t40376 + t28384*t40379 + t28421*t40382))*var2[5] + t40374*var2[15] + t40336*var2[17];
  p_output1[12]=t39865*var2[3] + t40199*var2[4] + t40374*var2[5] + (t39867 - 6.000000000054e-7*t27853*t40300 + 0.2000000000018*t27853*t40445 + t28236*t40452 + t28346*t40456 + t28364*t40463 - 0.3*(t28376*t40452 + t28380*t40456 + t28384*t40463) - 0.099999*(t28587*t40452 + t28376*t40456 + t28410*t40463) + 0.2*(t28410*t40452 + t28384*t40456 + t28421*t40463))*var2[15] + t40535*var2[17];
  p_output1[13]=t39774*var2[3] + t40016*var2[4] + t40336*var2[5] + t40535*var2[15] + (t39350*t40549 + t39362*t40555 + t39385*t40559 - 0.099999*(-1.8e-11*t28119*t40549 + t38368*t40555 + t36952*t40559) + 0.2*(t36952*t40549 - 1.000000000009*t28119*t40555 + t39421*t40559) - 0.3*(t39395*t40555 - 1.000000000009*t28119*t40559 + t40562))*var2[17];
  p_output1[14]=1.;
  p_output1[15]=t40656;
  p_output1[16]=t40693;
  p_output1[17]=t40722;
  p_output1[18]=t40819;
  p_output1[19]=t40841;
  p_output1[20]=t40656*var2[3] + t40693*var2[4] + t40722*var2[5] + t40819*var2[15] + t40841*var2[17];
  p_output1[21]=t40693*var2[3] + (0.2000000000018*t27995*t27999*t28048*t39603 + 6.000000000054e-7*t27995*t28048*t28111*t39603 + t40596 + t28236*t40997 + t28346*t41001 + t28364*t41005 - 0.3*(t28376*t40997 + t28380*t41001 + t28384*t41005) - 0.099999*(t28587*t40997 + t28376*t41001 + t28410*t41005) + 0.2*(t28410*t40997 + t28384*t41001 + t28421*t41005))*var2[4] + t40913*var2[5] + t40989*var2[15] + t40951*var2[17];
  p_output1[22]=t40722*var2[3] + t40913*var2[4] + (t40598 + t40600 + t28236*t41035 + t28346*t41037 + t28364*t41039 - 0.3*(t28376*t41035 + t28380*t41037 + t28384*t41039) - 0.099999*(t28587*t41035 + t28376*t41037 + t28410*t41039) + 0.2*(t28410*t41035 + t28384*t41037 + t28421*t41039))*var2[5] + t41141*var2[15] + t41099*var2[17];
  p_output1[23]=t40819*var2[3] + t40989*var2[4] + t41141*var2[5] + (0.2000000000018*t27853*t39652 + t40596 - 6.000000000054e-7*t27853*t41065 + t28236*t41206 + t28346*t41210 + t28364*t41216 - 0.3*(t28376*t41206 + t28380*t41210 + t28384*t41216) - 0.099999*(t28587*t41206 + t28376*t41210 + t28410*t41216) + 0.2*(t28410*t41206 + t28384*t41210 + t28421*t41216))*var2[15] + t41287*var2[17];
  p_output1[24]=t40841*var2[3] + t40951*var2[4] + t41099*var2[5] + t41287*var2[15] + (t39350*t41302 + t39362*t41333 + t39385*t41338 - 0.099999*(-1.8e-11*t28119*t41302 + t38368*t41333 + t36952*t41338) + 0.2*(t36952*t41302 - 1.000000000009*t28119*t41333 + t39421*t41338) - 0.3*(t39395*t41333 - 1.000000000009*t28119*t41338 + t41341))*var2[17];
  p_output1[25]=1.;
  p_output1[26]=0.2000000000018*t27998*t28047*t39648 - 6.000000000054e-7*t27995*t40300 + 0.2000000000018*t27995*t40445 + t28236*t40549 + t28346*t40555 + t28364*t40559 - 0.3*(t28376*t40549 + t28380*t40555 + t28384*t40559) - 0.099999*(t28587*t40549 + t28376*t40555 + t28410*t40559) + 0.2*(t28410*t40549 + t28384*t40555 + t28421*t40559);
  p_output1[27]=-0.2000000000018*t27995*t27998*t27999*t39603 + 0.2000000000018*t28047*t28048*t39603 - 6.000000000054e-7*t27995*t27998*t28111*t39603 + t28236*t40918 + t28346*t40924 + t28364*t40929 - 0.3*(t28376*t40918 + t28380*t40924 + t28384*t40929) - 0.099999*(t28587*t40918 + t28376*t40924 + t28410*t40929) + 0.2*(t28410*t40918 + t28384*t40924 + t28421*t40929);
  p_output1[28]=-6.000000000054e-7*t27995*t39700 + 0.2000000000018*t27995*t41065 + t28236*t41067 + t28346*t41071 + t28364*t41074 - 0.099999*(t28587*t41067 + t28376*t41071 + t28410*t41074) + 0.2*(t28410*t41067 + t28384*t41071 + t28421*t41074) - 0.3*(t28376*t41067 + t28380*t41071 + t41135);
  p_output1[29]=-0.2000000000018*t27853*t27998*t39603 + 0.2000000000018*t28047*t39652 - 6.000000000054e-7*t28047*t41065 + t28364*t41246 + t28236*t41251 + t28346*t41258 - 0.099999*(t28410*t41246 + t28587*t41251 + t28376*t41258) - 0.3*(t28384*t41246 + t28376*t41251 + t28380*t41258) + 0.2*(t28421*t41246 + t28410*t41251 + t28384*t41258);
  p_output1[30]=t37809*t41302 + t38252*t41333 + t38355*t41338 - 0.3*(t38723*t41302 + t38758*t41333 - 1.000000000009*t28127*t41338) - 0.099999*(-1.8e-11*t28127*t41302 + t38723*t41333 + t38368*t41338) + 0.2*(-1.000000000009*t28127*t41333 + t38376*t41338 + t41341);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RightFrontFoot.hh"

namespace Flight2
{

void J_impact_velocity_RightFrontFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
