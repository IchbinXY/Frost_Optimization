/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 22:49:40 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t552;
  double t626;
  double t652;
  double t782;
  double t3067;
  double t3129;
  double t3367;
  double t3549;
  double t3569;
  double t2300;
  double t2988;
  double t3003;
  double t3061;
  double t3813;
  double t3815;
  double t4964;
  double t3574;
  double t3710;
  double t5061;
  double t4074;
  double t4190;
  double t4191;
  double t4376;
  double t4708;
  double t4948;
  double t6663;
  double t6664;
  double t6967;
  double t6990;
  double t7229;
  double t7230;
  double t7231;
  double t7232;
  double t7292;
  double t7297;
  double t7393;
  double t8204;
  double t8626;
  double t7499;
  double t5176;
  double t7464;
  double t12053;
  double t3066;
  double t3425;
  double t3712;
  double t3826;
  double t3885;
  double t5007;
  double t5232;
  double t6159;
  double t6446;
  double t6447;
  double t7157;
  double t7209;
  double t7215;
  double t7216;
  double t7223;
  double t14128;
  double t14200;
  double t14207;
  double t7885;
  double t14209;
  double t14210;
  double t14211;
  double t14215;
  double t14216;
  double t14217;
  double t12116;
  double t12148;
  double t12167;
  double t14438;
  double t14440;
  double t14393;
  double t14395;
  double t14499;
  double t14483;
  double t14491;
  double t14492;
  double t14495;
  double t14531;
  double t14536;
  double t14537;
  double t14544;
  double t14545;
  double t14546;
  double t14547;
  double t14549;
  double t14633;
  double t14565;
  double t15116;
  double t15117;
  double t15214;
  double t15219;
  double t16399;
  double t16518;
  double t17085;
  double t18419;
  double t19604;
  double t19633;
  double t2374;
  double t3062;
  double t22618;
  double t22635;
  double t22641;
  double t14399;
  double t14441;
  double t14443;
  double t14457;
  double t14498;
  double t14501;
  double t14505;
  double t14509;
  double t14525;
  double t14539;
  double t14540;
  double t14541;
  double t14542;
  double t14543;
  double t22956;
  double t22966;
  double t23142;
  double t23179;
  double t23185;
  double t14569;
  double t23220;
  double t23232;
  double t23235;
  double t15052;
  double t23624;
  double t23625;
  double t23632;
  double t23643;
  double t23644;
  double t23645;
  double t13918;
  double t13948;
  double t14208;
  double t14212;
  double t14218;
  double t14219;
  double t14220;
  double t14222;
  double t14223;
  double t14225;
  double t14226;
  double t14228;
  double t14229;
  double t14230;
  double t14232;
  double t14233;
  double t14234;
  double t14289;
  double t14358;
  double t14369;
  double t14389;
  double t30116;
  double t30365;
  double t30373;
  double t30385;
  double t30391;
  double t30408;
  double t30445;
  double t30455;
  double t30461;
  double t30466;
  double t3007;
  double t31417;
  double t31424;
  double t31428;
  double t31430;
  double t31438;
  double t31444;
  double t23611;
  double t23616;
  double t23633;
  double t23646;
  double t23647;
  double t23652;
  double t27647;
  double t27652;
  double t29654;
  double t29758;
  double t29808;
  double t29827;
  double t29848;
  double t29882;
  double t29897;
  double t29903;
  double t29915;
  double t29917;
  double t29919;
  double t29920;
  double t29922;
  double t15098;
  double t15105;
  double t15107;
  double t15230;
  double t19559;
  double t19635;
  double t19687;
  double t19850;
  double t19876;
  double t19898;
  double t19901;
  double t19905;
  double t19906;
  double t19912;
  double t20253;
  double t21416;
  double t21418;
  double t22133;
  double t22240;
  double t22242;
  double t22243;
  double t22344;
  double t31684;
  double t31670;
  double t31676;
  double t31677;
  double t31678;
  double t31696;
  double t31698;
  double t31706;
  double t31749;
  double t31751;
  double t31766;
  double t30382;
  double t30426;
  double t30467;
  double t30477;
  double t30802;
  double t30804;
  double t31328;
  double t31332;
  double t31334;
  double t31337;
  double t31353;
  double t31359;
  double t31378;
  double t31379;
  double t31381;
  double t31382;
  double t31383;
  double t31406;
  double t31410;
  double t23165;
  double t23216;
  double t23239;
  double t23330;
  double t23340;
  double t23350;
  double t23397;
  double t23464;
  double t23466;
  double t23471;
  double t23472;
  double t23474;
  double t23477;
  double t23489;
  double t23507;
  double t23525;
  double t23596;
  double t23605;
  double t23607;
  double t14497;
  double t14538;
  double t14548;
  double t14550;
  double t14551;
  double t14610;
  double t14621;
  double t14629;
  double t14631;
  double t14753;
  double t14861;
  double t14954;
  double t15043;
  double t15049;
  double t15053;
  double t15066;
  double t15067;
  double t15068;
  double t15088;
  double t31764;
  double t32273;
  double t32283;
  double t32289;
  double t32291;
  double t32296;
  double t32302;
  double t32308;
  double t32309;
  double t32316;
  double t32320;
  double t32321;
  double t32325;
  double t32330;
  double t32397;
  double t32390;
  double t32399;
  double t32404;
  double t32410;
  double t32411;
  double t32413;
  double t32422;
  double t32424;
  double t32426;
  double t32432;
  double t32439;
  double t32443;
  double t32446;
  double t32455;
  double t32462;
  double t32581;
  double t32610;
  double t32643;
  double t32568;
  double t32647;
  double t32648;
  double t32651;
  double t32653;
  double t32656;
  double t32672;
  double t32680;
  double t32683;
  double t32693;
  double t32696;
  double t32802;
  double t32806;
  double t32811;
  double t32835;
  double t32854;
  double t32861;
  double t32863;
  double t32864;
  double t32873;
  double t32880;
  double t32974;
  double t32979;
  double t32980;
  double t32987;
  double t32990;
  double t33004;
  double t33012;
  double t33014;
  double t33016;
  double t33018;
  double t33028;
  double t33031;
  double t33032;
  double t33035;
  double t33056;
  double t33061;
  double t33082;
  double t33088;
  double t32275;
  double t32276;
  double t32277;
  double t32300;
  double t32318;
  double t32332;
  double t32333;
  double t32334;
  double t32340;
  double t32341;
  double t32343;
  double t32348;
  double t32351;
  double t32362;
  double t32363;
  double t32364;
  double t32366;
  double t32368;
  double t32373;
  double t32374;
  double t32378;
  double t32386;
  double t33193;
  double t33194;
  double t33197;
  double t33198;
  double t33202;
  double t33203;
  double t33204;
  double t33205;
  double t33211;
  double t33212;
  double t33226;
  double t33227;
  double t33309;
  double t33313;
  double t33322;
  double t33334;
  double t33348;
  double t33349;
  double t33359;
  double t33361;
  double t33363;
  double t33365;
  double t33524;
  double t33530;
  double t33534;
  double t33539;
  double t33567;
  double t33574;
  double t33576;
  double t33585;
  double t32969;
  double t33709;
  double t33712;
  double t33718;
  double t33778;
  double t33782;
  double t33785;
  double t33799;
  double t33801;
  double t33806;
  double t33512;
  double t33522;
  double t33532;
  double t33569;
  double t33590;
  double t33592;
  double t33595;
  double t33598;
  double t33603;
  double t33604;
  double t33605;
  double t33624;
  double t33625;
  double t33648;
  double t33649;
  double t33657;
  double t33658;
  double t33678;
  double t33689;
  double t33690;
  double t33691;
  double t32408;
  double t32421;
  double t32428;
  double t32444;
  double t32465;
  double t32469;
  double t32471;
  double t32473;
  double t32474;
  double t32479;
  double t32494;
  double t32495;
  double t32496;
  double t32501;
  double t32517;
  double t32518;
  double t32550;
  double t32555;
  double t32562;
  double t32565;
  double t32566;
  double t34097;
  double t34100;
  double t34101;
  double t34096;
  double t34105;
  double t34110;
  double t34112;
  double t34120;
  double t34141;
  double t34144;
  double t34145;
  double t34203;
  double t34204;
  double t34208;
  double t34217;
  double t34218;
  double t34304;
  double t32984;
  double t33011;
  double t34380;
  double t34384;
  double t34387;
  double t33283;
  double t33290;
  double t33308;
  double t33338;
  double t33353;
  double t33375;
  double t33376;
  double t33379;
  double t33380;
  double t33381;
  double t33384;
  double t33386;
  double t33389;
  double t33392;
  double t33402;
  double t33415;
  double t33422;
  double t33453;
  double t33462;
  double t33464;
  double t33472;
  double t33509;
  double t32790;
  double t32794;
  double t32801;
  double t32851;
  double t32865;
  double t32884;
  double t32885;
  double t32887;
  double t32891;
  double t32904;
  double t32912;
  double t32913;
  double t32922;
  double t32923;
  double t32931;
  double t32935;
  double t32938;
  double t32940;
  double t32941;
  double t32942;
  double t32943;
  double t32955;
  double t34436;
  double t34438;
  double t34439;
  double t34446;
  double t34447;
  double t34449;
  double t34453;
  double t34454;
  double t34457;
  double t34460;
  double t34462;
  double t34463;
  double t34465;
  double t34197;
  double t34199;
  double t34212;
  double t34215;
  double t34305;
  double t34307;
  double t34310;
  double t34315;
  double t34316;
  double t34337;
  double t34338;
  double t34340;
  double t34349;
  double t34354;
  double t34357;
  double t34358;
  double t34360;
  double t34368;
  double t34370;
  double t34371;
  double t34377;
  double t34544;
  double t34546;
  double t34556;
  double t34557;
  double t34560;
  double t34565;
  double t34579;
  double t34588;
  double t34589;
  double t33199;
  double t33206;
  double t33228;
  double t33230;
  double t33231;
  double t33236;
  double t33239;
  double t33241;
  double t33242;
  double t33244;
  double t33249;
  double t33253;
  double t33254;
  double t33262;
  double t33265;
  double t33267;
  double t33269;
  double t33273;
  double t33274;
  double t32652;
  double t32678;
  double t32700;
  double t32701;
  double t32704;
  double t32707;
  double t32709;
  double t32712;
  double t32718;
  double t32721;
  double t32724;
  double t32727;
  double t32730;
  double t32752;
  double t32757;
  double t32758;
  double t32775;
  double t32776;
  double t32783;
  double t34111;
  double t34140;
  double t34147;
  double t34148;
  double t34151;
  double t34152;
  double t34153;
  double t34155;
  double t34156;
  double t34157;
  double t34161;
  double t34162;
  double t34163;
  double t34169;
  double t34171;
  double t34173;
  double t34175;
  double t34176;
  double t34192;
  double t31656;
  double t31657;
  double t31658;
  double t31666;
  double t31683;
  double t31685;
  double t31691;
  double t31693;
  double t31718;
  double t31727;
  double t31734;
  double t31735;
  double t31747;
  double t35856;
  double t35860;
  double t35862;
  double t35863;
  double t31769;
  double t35867;
  double t35876;
  double t35877;
  double t35884;
  double t35889;
  double t31797;
  double t34553;
  double t34567;
  double t34594;
  double t34595;
  double t34631;
  double t34633;
  double t34634;
  double t34636;
  double t34648;
  double t34650;
  double t34651;
  double t34675;
  double t34728;
  double t34731;
  double t35525;
  double t35646;
  double t35661;
  double t35833;
  double t35834;
  double t35900;
  double t36186;
  double t36193;
  double t36195;
  double t36199;
  double t36200;
  double t36206;
  double t36214;
  double t36215;
  double t36223;
  double t36227;
  double t36231;
  double t36242;
  double t36257;
  double t36267;
  double t36269;
  double t36271;
  double t36272;
  double t36275;
  double t36278;
  double t36282;
  double t36286;
  double t36302;
  double t36090;
  double t36093;
  double t36094;
  double t36103;
  double t36109;
  double t36124;
  double t36134;
  double t36138;
  double t36143;
  double t36156;
  double t36159;
  double t36160;
  double t36166;
  double t36167;
  double t36168;
  double t36172;
  double t36174;
  double t36176;
  double t36177;
  double t36178;
  double t36182;
  double t36185;
  double t36308;
  double t36310;
  double t36313;
  double t36314;
  double t36317;
  double t36319;
  double t36320;
  double t36322;
  double t36323;
  double t36324;
  double t36326;
  double t36329;
  double t36330;
  double t36331;
  double t36332;
  double t36335;
  double t36336;
  double t36338;
  double t36344;
  double t36345;
  double t36469;
  double t36476;
  double t36482;
  double t36519;
  double t36526;
  double t36527;
  double t36548;
  double t36551;
  double t36557;
  double t36570;
  double t36595;
  double t36630;
  double t36758;
  double t36816;
  double t36962;
  double t37162;
  double t37244;
  double t37323;
  double t36346;
  double t36349;
  double t36351;
  double t36352;
  double t36353;
  double t36357;
  double t36366;
  double t36367;
  double t36395;
  double t36396;
  double t36410;
  double t36411;
  double t36417;
  double t36419;
  double t36429;
  double t36430;
  double t36433;
  double t36434;
  double t36452;
  double t36454;
  double t36462;
  double t36464;
  double t38173;
  double t38195;
  double t38198;
  double t38233;
  double t38236;
  double t38240;
  double t38241;
  double t38242;
  double t38490;
  double t38501;
  double t38502;
  double t38503;
  double t38511;
  double t38512;
  double t38513;
  double t38515;
  double t38520;
  double t38522;
  double t38524;
  double t39078;
  double t39079;
  double t39080;
  double t39085;
  double t39091;
  double t39110;
  double t39116;
  double t39122;
  double t39123;
  double t40331;
  double t40364;
  double t40365;
  double t40375;
  double t40377;
  double t40380;
  double t40384;
  double t40388;
  double t40394;
  double t38166;
  double t38168;
  double t38213;
  double t38239;
  double t38243;
  double t38255;
  double t38262;
  double t38264;
  double t38265;
  double t38272;
  double t38274;
  double t38275;
  double t38277;
  double t38279;
  double t38280;
  double t38284;
  double t38285;
  double t38286;
  double t38287;
  double t38327;
  double t38335;
  double t40502;
  double t40506;
  double t40510;
  double t41447;
  double t41451;
  double t41453;
  double t41444;
  double t41468;
  double t41470;
  double t41475;
  double t41480;
  double t41487;
  double t41714;
  double t42526;
  double t42528;
  double t42534;
  double t42540;
  double t42543;
  double t42548;
  double t39044;
  double t39071;
  double t39077;
  double t39083;
  double t39120;
  double t39124;
  double t39125;
  double t39126;
  double t39129;
  double t39130;
  double t39319;
  double t39322;
  double t39327;
  double t39331;
  double t39334;
  double t39583;
  double t39584;
  double t39593;
  double t40166;
  double t40218;
  double t40226;
  double t40227;
  double t42724;
  double t42728;
  double t42734;
  double t42739;
  double t42740;
  double t42742;
  double t43188;
  double t43197;
  double t43210;
  double t43294;
  double t42518;
  double t42523;
  double t42535;
  double t42539;
  double t42549;
  double t42557;
  double t42560;
  double t42571;
  double t42575;
  double t42576;
  double t42578;
  double t42596;
  double t42610;
  double t42635;
  double t42646;
  double t42657;
  double t42662;
  double t42663;
  double t42669;
  double t42677;
  double t42681;
  double t43603;
  double t43625;
  double t43802;
  double t43804;
  double t43817;
  double t43835;
  double t43842;
  double t43844;
  double t38509;
  double t38514;
  double t38526;
  double t38529;
  double t38533;
  double t38537;
  double t38543;
  double t38544;
  double t38545;
  double t38558;
  double t38575;
  double t38736;
  double t38767;
  double t38772;
  double t38774;
  double t38776;
  double t38960;
  double t38964;
  double t38997;
  double t41471;
  double t41481;
  double t41718;
  double t41832;
  double t41839;
  double t41994;
  double t41995;
  double t42126;
  double t42174;
  double t42439;
  double t42440;
  double t42454;
  double t42458;
  double t42460;
  double t42467;
  double t42484;
  double t42500;
  double t42514;
  double t42515;
  double t44166;
  double t44170;
  double t44248;
  double t44252;
  double t44266;
  double t44271;
  double t44300;
  double t44306;
  double t43689;
  double t43831;
  double t43852;
  double t43859;
  double t43873;
  double t43896;
  double t43921;
  double t43925;
  double t43928;
  double t43933;
  double t43935;
  double t43938;
  double t43941;
  double t43942;
  double t43943;
  double t43951;
  double t43961;
  double t43962;
  double t43970;
  double t44312;
  t552 = Cos(var1[15]);
  t626 = -1.*t552;
  t652 = 1. + t626;
  t782 = Cos(var1[4]);
  t3067 = Cos(var1[17]);
  t3129 = -1.*t3067;
  t3367 = 1. + t3129;
  t3549 = -3.e-6*t3367;
  t3569 = Sin(var1[17]);
  t2300 = Cos(var1[5]);
  t2988 = Sin(var1[15]);
  t3003 = Sin(var1[4]);
  t3061 = Sin(var1[5]);
  t3813 = 3.e-6*t3569;
  t3815 = t3549 + t3813;
  t4964 = 9.e-13*var1[17];
  t3574 = -3.e-6*t3569;
  t3710 = t3549 + t3574;
  t5061 = -9.e-12*t3367;
  t4074 = -3.e-6*t652*t782*t2300;
  t4190 = 3.e-6*t2988*t3003;
  t4191 = -9.e-12*t652;
  t4376 = 1. + t4191;
  t4708 = t4376*t782*t3061;
  t4948 = t4074 + t4190 + t4708;
  t6663 = -1.*t552*t782*t2300;
  t6664 = -1.*t2988*t3003;
  t6967 = 3.e-6*t652*t782*t3061;
  t6990 = t6663 + t6664 + t6967;
  t7229 = t782*t2300*t2988;
  t7230 = -1.000000000009*t652;
  t7231 = 1. + t7230;
  t7232 = -1.*t7231*t3003;
  t7292 = 3.e-6*t782*t2988*t3061;
  t7297 = t7229 + t7232 + t7292;
  t7393 = 3.e-6*t3367;
  t8204 = -1.000000000009*t3367;
  t8626 = 1. + t8204;
  t7499 = 9.e-12*t3367;
  t5176 = -1.*t3569;
  t7464 = t7393 + t3574;
  t12053 = t7393 + t3813;
  t3066 = 3.e-7*var1[17];
  t3425 = -1.62e-17*t3367;
  t3712 = 0.2*t3710;
  t3826 = 0.1*t3815;
  t3885 = t3066 + t3425 + t3712 + t3826;
  t5007 = 0.2000000000018*t3367;
  t5232 = t5061 + t5176;
  t6159 = 0.1*t5232;
  t6446 = -9.e-7*t3815;
  t6447 = t4964 + t5007 + t6159 + t6446;
  t7157 = 0.1000000000009*t3367;
  t7209 = -9.e-7*t3710;
  t7215 = t5061 + t3569;
  t7216 = 0.2*t7215;
  t7223 = t4964 + t7157 + t7209 + t7216;
  t14128 = t4376*t2300*t3003;
  t14200 = 3.e-6*t652*t3003*t3061;
  t14207 = t14128 + t14200;
  t7885 = t7499 + t3569;
  t14209 = 3.e-6*t652*t2300*t3003;
  t14210 = t552*t3003*t3061;
  t14211 = t14209 + t14210;
  t14215 = 3.e-6*t2300*t2988*t3003;
  t14216 = -1.*t2988*t3003*t3061;
  t14217 = t14215 + t14216;
  t12116 = t7499 + t5176;
  t12148 = -1.8e-11*t3367;
  t12167 = 1. + t12148;
  t14438 = 3.e-6*t3067;
  t14440 = t14438 + t3574;
  t14393 = -3.e-6*t3067;
  t14395 = t14393 + t3574;
  t14499 = -9.e-12*t3569;
  t14483 = -3.e-6*t782*t2988;
  t14491 = -3.e-6*t652*t2300*t3003;
  t14492 = t4376*t3003*t3061;
  t14495 = t14483 + t14491 + t14492;
  t14531 = t782*t2988;
  t14536 = -1.*t552*t2300*t3003;
  t14537 = t14531 + t14536 + t14200;
  t14544 = t7231*t782;
  t14545 = t2300*t2988*t3003;
  t14546 = 3.e-6*t2988*t3003*t3061;
  t14547 = t14544 + t14545 + t14546;
  t14549 = t14438 + t3813;
  t14633 = t14393 + t3813;
  t14565 = 9.e-12*t3569;
  t15116 = -1.000000000009*t782*t2988;
  t15117 = t552*t2300*t3003;
  t15214 = 3.e-6*t552*t3003*t3061;
  t15219 = t15116 + t15117 + t15214;
  t16399 = -3.e-6*t552*t782;
  t16518 = -3.e-6*t2300*t2988*t3003;
  t17085 = -9.e-12*t2988*t3003*t3061;
  t18419 = t16399 + t16518 + t17085;
  t19604 = t552*t782;
  t19633 = t19604 + t14545 + t14546;
  t2374 = -0.2000000000018*t652*t782*t2300;
  t3062 = -6.000000000054e-7*t652*t782*t3061;
  t22618 = t4074 + t4708;
  t22635 = t6663 + t6967;
  t22641 = t7229 + t7292;
  t14399 = 0.2*t14395;
  t14441 = 0.1*t14440;
  t14443 = -1.62e-17*t3569;
  t14457 = 3.e-7 + t14399 + t14441 + t14443;
  t14498 = -9.e-7*t14440;
  t14501 = t3129 + t14499;
  t14505 = 0.1*t14501;
  t14509 = 0.2000000000018*t3569;
  t14525 = 9.e-13 + t14498 + t14505 + t14509;
  t14539 = -9.e-7*t14395;
  t14540 = t3067 + t14499;
  t14541 = 0.2*t14540;
  t14542 = 0.1000000000009*t3569;
  t14543 = 9.e-13 + t14539 + t14541 + t14542;
  t22956 = -1.*t4376*t782*t2300;
  t22966 = -3.e-6*t652*t782*t3061;
  t23142 = t22956 + t22966;
  t23179 = -1.*t552*t782*t3061;
  t23185 = t4074 + t23179;
  t14569 = t3129 + t14565;
  t23220 = -3.e-6*t782*t2300*t2988;
  t23232 = t782*t2988*t3061;
  t23235 = t23220 + t23232;
  t15052 = t3067 + t14565;
  t23624 = -3.e-6*t552*t782*t2300;
  t23625 = t552*t782*t3061;
  t23632 = t23624 + t23625;
  t23643 = 9.e-12*t782*t2300*t2988;
  t23644 = -3.e-6*t782*t2988*t3061;
  t23645 = t23643 + t23644;
  t13918 = -6.000000000054e-7*t652*t2300*t3003;
  t13948 = 0.2000000000018*t652*t3003*t3061;
  t14208 = t3885*t14207;
  t14212 = t6447*t14211;
  t14218 = t7223*t14217;
  t14219 = t7464*t14207;
  t14220 = t7885*t14211;
  t14222 = t8626*t14217;
  t14223 = t14219 + t14220 + t14222;
  t14225 = -0.3*t14223;
  t14226 = t12053*t14207;
  t14228 = t8626*t14211;
  t14229 = t12116*t14217;
  t14230 = t14226 + t14228 + t14229;
  t14232 = 0.2*t14230;
  t14233 = t12167*t14207;
  t14234 = t7464*t14211;
  t14289 = t12053*t14217;
  t14358 = t14233 + t14234 + t14289;
  t14369 = -0.099999*t14358;
  t14389 = t13918 + t13948 + t14208 + t14212 + t14218 + t14225 + t14232 + t14369;
  t30116 = -1.000000000009*t2988*t3003;
  t30365 = -3.e-6*t552*t782*t3061;
  t30373 = t6663 + t30116 + t30365;
  t30385 = -1.*t782*t2300*t2988;
  t30391 = t552*t3003;
  t30408 = t30385 + t30391 + t23644;
  t30445 = 3.e-6*t782*t2300*t2988;
  t30455 = -3.e-6*t552*t3003;
  t30461 = 9.e-12*t782*t2988*t3061;
  t30466 = t30445 + t30455 + t30461;
  t3007 = 0.2000000000018*t2988*t3003;
  t31417 = t6663 + t6664 + t30365;
  t31424 = 3.e-6*t552*t782*t2300;
  t31428 = 9.e-12*t552*t782*t3061;
  t31430 = t31424 + t4190 + t31428;
  t31438 = -1.000000000009*t552*t3003;
  t31444 = t7229 + t31438 + t7292;
  t23611 = 6.000000000054e-7*t782*t2300*t2988;
  t23616 = -0.2000000000018*t782*t2988*t3061;
  t23633 = t7223*t23632;
  t23646 = t3885*t23645;
  t23647 = t6447*t23235;
  t23652 = t12116*t23632;
  t27647 = t12053*t23645;
  t27652 = t8626*t23235;
  t29654 = t23652 + t27647 + t27652;
  t29758 = 0.2*t29654;
  t29808 = t12053*t23632;
  t29827 = t12167*t23645;
  t29848 = t7464*t23235;
  t29882 = t29808 + t29827 + t29848;
  t29897 = -0.099999*t29882;
  t29903 = t8626*t23632;
  t29915 = t7464*t23645;
  t29917 = t7885*t23235;
  t29919 = t29903 + t29915 + t29917;
  t29920 = -0.3*t29919;
  t29922 = t23611 + t23616 + t23633 + t23646 + t23647 + t29758 + t29897 + t29920;
  t15098 = -0.2000000000018*t552*t782;
  t15105 = -0.2000000000018*t2300*t2988*t3003;
  t15107 = -6.000000000054e-7*t2988*t3003*t3061;
  t15230 = t7223*t15219;
  t19559 = t3885*t18419;
  t19635 = t6447*t19633;
  t19687 = t12116*t15219;
  t19850 = t12053*t18419;
  t19876 = t8626*t19633;
  t19898 = t19687 + t19850 + t19876;
  t19901 = 0.2*t19898;
  t19905 = t12053*t15219;
  t19906 = t12167*t18419;
  t19912 = t7464*t19633;
  t20253 = t19905 + t19906 + t19912;
  t21416 = -0.099999*t20253;
  t21418 = t8626*t15219;
  t22133 = t7464*t18419;
  t22240 = t7885*t19633;
  t22242 = t21418 + t22133 + t22240;
  t22243 = -0.3*t22242;
  t22344 = t15098 + t15105 + t15107 + t15230 + t19559 + t19635 + t19901 + t21416 + t22243;
  t31684 = -9.e-12*t3067;
  t31670 = 3.e-6*t652*t782*t2300;
  t31676 = -3.e-6*t2988*t3003;
  t31677 = -1.*t4376*t782*t3061;
  t31678 = t31670 + t31676 + t31677;
  t31696 = t552*t782*t2300;
  t31698 = t2988*t3003;
  t31706 = t31696 + t31698 + t22966;
  t31749 = t7231*t3003;
  t31751 = t30385 + t31749 + t23644;
  t31766 = 9.e-12*t3067;
  t30382 = t14543*t30373;
  t30426 = t14525*t30408;
  t30467 = t14457*t30466;
  t30477 = -1.000000000009*t3569*t30373;
  t30802 = t15052*t30408;
  t30804 = t14633*t30466;
  t31328 = t30477 + t30802 + t30804;
  t31332 = -0.3*t31328;
  t31334 = t14569*t30373;
  t31337 = -1.000000000009*t3569*t30408;
  t31353 = t14549*t30466;
  t31359 = t31334 + t31337 + t31353;
  t31378 = 0.2*t31359;
  t31379 = t14549*t30373;
  t31381 = t14633*t30408;
  t31382 = -1.8e-11*t3569*t30466;
  t31383 = t31379 + t31381 + t31382;
  t31406 = -0.099999*t31383;
  t31410 = t30382 + t30426 + t30467 + t31332 + t31378 + t31406;
  t23165 = t14457*t23142;
  t23216 = t14525*t23185;
  t23239 = t14543*t23235;
  t23330 = t14549*t23142;
  t23340 = -1.000000000009*t3569*t23185;
  t23350 = t14569*t23235;
  t23397 = t23330 + t23340 + t23350;
  t23464 = 0.2*t23397;
  t23466 = -1.8e-11*t3569*t23142;
  t23471 = t14633*t23185;
  t23472 = t14549*t23235;
  t23474 = t23466 + t23471 + t23472;
  t23477 = -0.099999*t23474;
  t23489 = t14633*t23142;
  t23507 = t15052*t23185;
  t23525 = -1.000000000009*t3569*t23235;
  t23596 = t23489 + t23507 + t23525;
  t23605 = -0.3*t23596;
  t23607 = t23165 + t23216 + t23239 + t23464 + t23477 + t23605;
  t14497 = t14457*t14495;
  t14538 = t14525*t14537;
  t14548 = t14543*t14547;
  t14550 = t14549*t14495;
  t14551 = -1.000000000009*t3569*t14537;
  t14610 = t14569*t14547;
  t14621 = t14550 + t14551 + t14610;
  t14629 = 0.2*t14621;
  t14631 = -1.8e-11*t3569*t14495;
  t14753 = t14633*t14537;
  t14861 = t14549*t14547;
  t14954 = t14631 + t14753 + t14861;
  t15043 = -0.099999*t14954;
  t15049 = t14633*t14495;
  t15053 = t15052*t14537;
  t15066 = -1.000000000009*t3569*t14547;
  t15067 = t15049 + t15053 + t15066;
  t15068 = -0.3*t15067;
  t15088 = t14497 + t14538 + t14548 + t14629 + t15043 + t15068;
  t31764 = t14549*t31678;
  t32273 = Cos(var1[3]);
  t32283 = 3.e-6*t652*t32273*t782*t2300;
  t32289 = -3.e-6*t32273*t2988*t3003;
  t32291 = -1.*t4376*t32273*t782*t3061;
  t32296 = t32283 + t32289 + t32291;
  t32302 = t552*t32273*t782*t2300;
  t32308 = t32273*t2988*t3003;
  t32309 = -3.e-6*t652*t32273*t782*t3061;
  t32316 = t32302 + t32308 + t32309;
  t32320 = -1.*t32273*t782*t2300*t2988;
  t32321 = t7231*t32273*t3003;
  t32325 = -3.e-6*t32273*t782*t2988*t3061;
  t32330 = t32320 + t32321 + t32325;
  t32397 = Sin(var1[3]);
  t32390 = -1.*t32273*t2300*t3003;
  t32399 = t32397*t3061;
  t32404 = t32390 + t32399;
  t32410 = -1.*t2300*t32397;
  t32411 = -1.*t32273*t3003*t3061;
  t32413 = t32410 + t32411;
  t32422 = t4376*t32404;
  t32424 = 3.e-6*t652*t32413;
  t32426 = t32422 + t32424;
  t32432 = 3.e-6*t652*t32404;
  t32439 = t552*t32413;
  t32443 = t32432 + t32439;
  t32446 = 3.e-6*t2988*t32404;
  t32455 = -1.*t2988*t32413;
  t32462 = t32446 + t32455;
  t32581 = t32273*t2300*t3003;
  t32610 = -1.*t32397*t3061;
  t32643 = t32581 + t32610;
  t32568 = 3.e-6*t32273*t782*t2988;
  t32647 = 3.e-6*t652*t32643;
  t32648 = t4376*t32413;
  t32651 = t32568 + t32647 + t32648;
  t32653 = -1.*t32273*t782*t2988;
  t32656 = t552*t32643;
  t32672 = t32653 + t32656 + t32424;
  t32680 = -1.*t7231*t32273*t782;
  t32683 = -1.*t2988*t32643;
  t32693 = 3.e-6*t2988*t32413;
  t32696 = t32680 + t32683 + t32693;
  t32802 = 1.000000000009*t32273*t782*t2988;
  t32806 = -1.*t552*t32643;
  t32811 = 3.e-6*t552*t32413;
  t32835 = t32802 + t32806 + t32811;
  t32854 = 3.e-6*t552*t32273*t782;
  t32861 = 3.e-6*t2988*t32643;
  t32863 = -9.e-12*t2988*t32413;
  t32864 = t32854 + t32861 + t32863;
  t32873 = -1.*t552*t32273*t782;
  t32880 = t32873 + t32683 + t32693;
  t32974 = -1.*t2300*t32397*t3003;
  t32979 = -1.*t32273*t3061;
  t32980 = t32974 + t32979;
  t32987 = -1.*t32273*t2300;
  t32990 = t32397*t3003*t3061;
  t33004 = t32987 + t32990;
  t33012 = -3.e-6*t782*t2988*t32397;
  t33014 = 3.e-6*t652*t32980;
  t33016 = t4376*t33004;
  t33018 = t33012 + t33014 + t33016;
  t33028 = t782*t2988*t32397;
  t33031 = t552*t32980;
  t33032 = 3.e-6*t652*t33004;
  t33035 = t33028 + t33031 + t33032;
  t33056 = t7231*t782*t32397;
  t33061 = -1.*t2988*t32980;
  t33082 = 3.e-6*t2988*t33004;
  t33088 = t33056 + t33061 + t33082;
  t32275 = 0.2000000000018*t652*t32273*t782*t2300;
  t32276 = -0.2000000000018*t32273*t2988*t3003;
  t32277 = 6.000000000054e-7*t652*t32273*t782*t3061;
  t32300 = t3885*t32296;
  t32318 = t6447*t32316;
  t32332 = t7223*t32330;
  t32333 = t7464*t32296;
  t32334 = t7885*t32316;
  t32340 = t8626*t32330;
  t32341 = t32333 + t32334 + t32340;
  t32343 = -0.3*t32341;
  t32348 = t12053*t32296;
  t32351 = t8626*t32316;
  t32362 = t12116*t32330;
  t32363 = t32348 + t32351 + t32362;
  t32364 = 0.2*t32363;
  t32366 = t12167*t32296;
  t32368 = t7464*t32316;
  t32373 = t12053*t32330;
  t32374 = t32366 + t32368 + t32373;
  t32378 = -0.099999*t32374;
  t32386 = t32275 + t32276 + t32277 + t32300 + t32318 + t32332 + t32343 + t32364 + t32378;
  t33193 = 3.e-6*t652*t782*t2300*t32397;
  t33194 = -3.e-6*t2988*t32397*t3003;
  t33197 = -1.*t4376*t782*t32397*t3061;
  t33198 = t33193 + t33194 + t33197;
  t33202 = t552*t782*t2300*t32397;
  t33203 = t2988*t32397*t3003;
  t33204 = -3.e-6*t652*t782*t32397*t3061;
  t33205 = t33202 + t33203 + t33204;
  t33211 = -1.*t782*t2300*t2988*t32397;
  t33212 = t7231*t32397*t3003;
  t33226 = -3.e-6*t782*t2988*t32397*t3061;
  t33227 = t33211 + t33212 + t33226;
  t33309 = -1.*t552*t782*t2300*t32397;
  t33313 = -1.000000000009*t2988*t32397*t3003;
  t33322 = -3.e-6*t552*t782*t32397*t3061;
  t33334 = t33309 + t33313 + t33322;
  t33348 = t552*t32397*t3003;
  t33349 = t33211 + t33348 + t33226;
  t33359 = 3.e-6*t782*t2300*t2988*t32397;
  t33361 = -3.e-6*t552*t32397*t3003;
  t33363 = 9.e-12*t782*t2988*t32397*t3061;
  t33365 = t33359 + t33361 + t33363;
  t33524 = -1.*t4376*t782*t2300*t32397;
  t33530 = t33524 + t33204;
  t33534 = -3.e-6*t652*t782*t2300*t32397;
  t33539 = -1.*t552*t782*t32397*t3061;
  t33567 = t33534 + t33539;
  t33574 = -3.e-6*t782*t2300*t2988*t32397;
  t33576 = t782*t2988*t32397*t3061;
  t33585 = t33574 + t33576;
  t32969 = -0.2000000000018*t782*t2988*t32397;
  t33709 = -3.e-6*t652*t2300*t32397*t3003;
  t33712 = t4376*t32397*t3003*t3061;
  t33718 = t33012 + t33709 + t33712;
  t33778 = -1.*t552*t2300*t32397*t3003;
  t33782 = 3.e-6*t652*t32397*t3003*t3061;
  t33785 = t33028 + t33778 + t33782;
  t33799 = t2300*t2988*t32397*t3003;
  t33801 = 3.e-6*t2988*t32397*t3003*t3061;
  t33806 = t33056 + t33799 + t33801;
  t33512 = 6.000000000054e-7*t652*t782*t2300*t32397;
  t33522 = -0.2000000000018*t652*t782*t32397*t3061;
  t33532 = t3885*t33530;
  t33569 = t6447*t33567;
  t33590 = t7223*t33585;
  t33592 = t7464*t33530;
  t33595 = t7885*t33567;
  t33598 = t8626*t33585;
  t33603 = t33592 + t33595 + t33598;
  t33604 = -0.3*t33603;
  t33605 = t12053*t33530;
  t33624 = t8626*t33567;
  t33625 = t12116*t33585;
  t33648 = t33605 + t33624 + t33625;
  t33649 = 0.2*t33648;
  t33657 = t12167*t33530;
  t33658 = t7464*t33567;
  t33678 = t12053*t33585;
  t33689 = t33657 + t33658 + t33678;
  t33690 = -0.099999*t33689;
  t33691 = t33512 + t33522 + t33532 + t33569 + t33590 + t33604 + t33649 + t33690;
  t32408 = -6.000000000054e-7*t652*t32404;
  t32421 = 0.2000000000018*t652*t32413;
  t32428 = t3885*t32426;
  t32444 = t6447*t32443;
  t32465 = t7223*t32462;
  t32469 = t7464*t32426;
  t32471 = t7885*t32443;
  t32473 = t8626*t32462;
  t32474 = t32469 + t32471 + t32473;
  t32479 = -0.3*t32474;
  t32494 = t12053*t32426;
  t32495 = t8626*t32443;
  t32496 = t12116*t32462;
  t32501 = t32494 + t32495 + t32496;
  t32517 = 0.2*t32501;
  t32518 = t12167*t32426;
  t32550 = t7464*t32443;
  t32555 = t12053*t32462;
  t32562 = t32518 + t32550 + t32555;
  t32565 = -0.099999*t32562;
  t32566 = t32408 + t32421 + t32428 + t32444 + t32465 + t32479 + t32517 + t32565;
  t34097 = t32273*t2300;
  t34100 = -1.*t32397*t3003*t3061;
  t34101 = t34097 + t34100;
  t34096 = t4376*t32980;
  t34105 = 3.e-6*t652*t34101;
  t34110 = t34096 + t34105;
  t34112 = t552*t34101;
  t34120 = t33014 + t34112;
  t34141 = 3.e-6*t2988*t32980;
  t34144 = -1.*t2988*t34101;
  t34145 = t34141 + t34144;
  t34203 = 3.e-6*t552*t32980;
  t34204 = -1.*t552*t34101;
  t34208 = t34203 + t34204;
  t34217 = -9.e-12*t2988*t32980;
  t34218 = 3.e-6*t2988*t34101;
  t34304 = t34217 + t34218;
  t32984 = 0.2000000000018*t652*t32980;
  t33011 = -6.000000000054e-7*t652*t33004;
  t34380 = t33014 + t33016;
  t34384 = t33031 + t33032;
  t34387 = t33061 + t33082;
  t33283 = 0.2000000000018*t782*t2300*t2988*t32397;
  t33290 = -0.2000000000018*t552*t32397*t3003;
  t33308 = 6.000000000054e-7*t782*t2988*t32397*t3061;
  t33338 = t7223*t33334;
  t33353 = t6447*t33349;
  t33375 = t3885*t33365;
  t33376 = t12053*t33334;
  t33379 = t7464*t33349;
  t33380 = t12167*t33365;
  t33381 = t33376 + t33379 + t33380;
  t33384 = -0.099999*t33381;
  t33386 = t8626*t33334;
  t33389 = t7885*t33349;
  t33392 = t7464*t33365;
  t33402 = t33386 + t33389 + t33392;
  t33415 = -0.3*t33402;
  t33422 = t12116*t33334;
  t33453 = t8626*t33349;
  t33462 = t12053*t33365;
  t33464 = t33422 + t33453 + t33462;
  t33472 = 0.2*t33464;
  t33509 = t33283 + t33290 + t33308 + t33338 + t33353 + t33375 + t33384 + t33415 + t33472;
  t32790 = 0.2000000000018*t552*t32273*t782;
  t32794 = 0.2000000000018*t2988*t32643;
  t32801 = -6.000000000054e-7*t2988*t32413;
  t32851 = t7223*t32835;
  t32865 = t3885*t32864;
  t32884 = t6447*t32880;
  t32885 = t12116*t32835;
  t32887 = t12053*t32864;
  t32891 = t8626*t32880;
  t32904 = t32885 + t32887 + t32891;
  t32912 = 0.2*t32904;
  t32913 = t12053*t32835;
  t32922 = t12167*t32864;
  t32923 = t7464*t32880;
  t32931 = t32913 + t32922 + t32923;
  t32935 = -0.099999*t32931;
  t32938 = t8626*t32835;
  t32940 = t7464*t32864;
  t32941 = t7885*t32880;
  t32942 = t32938 + t32940 + t32941;
  t32943 = -0.3*t32942;
  t32955 = t32790 + t32794 + t32801 + t32851 + t32865 + t32884 + t32912 + t32935 + t32943;
  t34436 = t2300*t32397*t3003;
  t34438 = t32273*t3061;
  t34439 = t34436 + t34438;
  t34446 = 3.e-6*t552*t34439;
  t34447 = -9.e-12*t552*t34101;
  t34449 = t33012 + t34446 + t34447;
  t34453 = -1.*t552*t34439;
  t34454 = 3.e-6*t552*t34101;
  t34457 = t33028 + t34453 + t34454;
  t34460 = 1.000000000009*t552*t782*t32397;
  t34462 = t2988*t34439;
  t34463 = -3.e-6*t2988*t34101;
  t34465 = t34460 + t34462 + t34463;
  t34197 = -6.000000000054e-7*t2988*t32980;
  t34199 = 0.2000000000018*t2988*t34101;
  t34212 = t7223*t34208;
  t34215 = t6447*t34145;
  t34305 = t3885*t34304;
  t34307 = t12053*t34208;
  t34310 = t7464*t34145;
  t34315 = t12167*t34304;
  t34316 = t34307 + t34310 + t34315;
  t34337 = -0.099999*t34316;
  t34338 = t8626*t34208;
  t34340 = t7885*t34145;
  t34349 = t7464*t34304;
  t34354 = t34338 + t34340 + t34349;
  t34357 = -0.3*t34354;
  t34358 = t12116*t34208;
  t34360 = t8626*t34145;
  t34368 = t12053*t34304;
  t34370 = t34358 + t34360 + t34368;
  t34371 = 0.2*t34370;
  t34377 = t34197 + t34199 + t34212 + t34215 + t34305 + t34337 + t34357 + t34371;
  t34544 = 1.000000000009*t782*t2988*t32397;
  t34546 = t34544 + t34453 + t34454;
  t34556 = 3.e-6*t552*t782*t32397;
  t34557 = 3.e-6*t2988*t34439;
  t34560 = -9.e-12*t2988*t34101;
  t34565 = t34556 + t34557 + t34560;
  t34579 = -1.*t552*t782*t32397;
  t34588 = -1.*t2988*t34439;
  t34589 = t34579 + t34588 + t34218;
  t33199 = t14457*t33198;
  t33206 = t14525*t33205;
  t33228 = t14543*t33227;
  t33230 = t14549*t33198;
  t33231 = -1.000000000009*t3569*t33205;
  t33236 = t14569*t33227;
  t33239 = t33230 + t33231 + t33236;
  t33241 = 0.2*t33239;
  t33242 = -1.8e-11*t3569*t33198;
  t33244 = t14633*t33205;
  t33249 = t14549*t33227;
  t33253 = t33242 + t33244 + t33249;
  t33254 = -0.099999*t33253;
  t33262 = t14633*t33198;
  t33265 = t15052*t33205;
  t33267 = -1.000000000009*t3569*t33227;
  t33269 = t33262 + t33265 + t33267;
  t33273 = -0.3*t33269;
  t33274 = t33199 + t33206 + t33228 + t33241 + t33254 + t33273;
  t32652 = t14457*t32651;
  t32678 = t14525*t32672;
  t32700 = t14543*t32696;
  t32701 = t14549*t32651;
  t32704 = -1.000000000009*t3569*t32672;
  t32707 = t14569*t32696;
  t32709 = t32701 + t32704 + t32707;
  t32712 = 0.2*t32709;
  t32718 = -1.8e-11*t3569*t32651;
  t32721 = t14633*t32672;
  t32724 = t14549*t32696;
  t32727 = t32718 + t32721 + t32724;
  t32730 = -0.099999*t32727;
  t32752 = t14633*t32651;
  t32757 = t15052*t32672;
  t32758 = -1.000000000009*t3569*t32696;
  t32775 = t32752 + t32757 + t32758;
  t32776 = -0.3*t32775;
  t32783 = t32652 + t32678 + t32700 + t32712 + t32730 + t32776;
  t34111 = t14457*t34110;
  t34140 = t14525*t34120;
  t34147 = t14543*t34145;
  t34148 = t14549*t34110;
  t34151 = -1.000000000009*t3569*t34120;
  t34152 = t14569*t34145;
  t34153 = t34148 + t34151 + t34152;
  t34155 = 0.2*t34153;
  t34156 = -1.8e-11*t3569*t34110;
  t34157 = t14633*t34120;
  t34161 = t14549*t34145;
  t34162 = t34156 + t34157 + t34161;
  t34163 = -0.099999*t34162;
  t34169 = t14633*t34110;
  t34171 = t15052*t34120;
  t34173 = -1.000000000009*t3569*t34145;
  t34175 = t34169 + t34171 + t34173;
  t34176 = -0.3*t34175;
  t34192 = t34111 + t34140 + t34147 + t34155 + t34163 + t34176;
  t31656 = -1.62e-17*t3067;
  t31657 = 0.1*t14395;
  t31658 = 0.2*t14633;
  t31666 = t31656 + t31657 + t31658;
  t31683 = 0.2000000000018*t3067;
  t31685 = t31684 + t3569;
  t31691 = 0.1*t31685;
  t31693 = t31683 + t14539 + t31691;
  t31718 = 0.1000000000009*t3067;
  t31727 = t31684 + t5176;
  t31734 = 0.2*t31727;
  t31735 = -9.e-7*t14633;
  t31747 = t31718 + t31734 + t31735;
  t35856 = 3.e-6*t782*t2988*t32397;
  t35860 = 3.e-6*t652*t34439;
  t35862 = t4376*t34101;
  t35863 = t35856 + t35860 + t35862;
  t31769 = t31766 + t5176;
  t35867 = -1.*t782*t2988*t32397;
  t35876 = t552*t34439;
  t35877 = t35867 + t35876 + t34105;
  t35884 = -1.*t7231*t782*t32397;
  t35889 = t35884 + t34588 + t34218;
  t31797 = t31766 + t3569;
  t34553 = t14543*t34546;
  t34567 = t14457*t34565;
  t34594 = t14525*t34589;
  t34595 = -1.000000000009*t3569*t34546;
  t34631 = t14633*t34565;
  t34633 = t15052*t34589;
  t34634 = t34595 + t34631 + t34633;
  t34636 = -0.3*t34634;
  t34648 = t14549*t34546;
  t34650 = -1.8e-11*t3569*t34565;
  t34651 = t14633*t34589;
  t34675 = t34648 + t34650 + t34651;
  t34728 = -0.099999*t34675;
  t34731 = t14569*t34546;
  t35525 = t14549*t34565;
  t35646 = -1.000000000009*t3569*t34589;
  t35661 = t34731 + t35525 + t35646;
  t35833 = 0.2*t35661;
  t35834 = t34553 + t34567 + t34594 + t34636 + t34728 + t35833;
  t35900 = t14549*t35863;
  t36186 = 0.2000000000018*t652*t782*t2300*t32397;
  t36193 = -0.2000000000018*t2988*t32397*t3003;
  t36195 = 6.000000000054e-7*t652*t782*t32397*t3061;
  t36199 = t3885*t33198;
  t36200 = t6447*t33205;
  t36206 = t7223*t33227;
  t36214 = t7464*t33198;
  t36215 = t7885*t33205;
  t36223 = t8626*t33227;
  t36227 = t36214 + t36215 + t36223;
  t36231 = -0.3*t36227;
  t36242 = t12053*t33198;
  t36257 = t8626*t33205;
  t36267 = t12116*t33227;
  t36269 = t36242 + t36257 + t36267;
  t36271 = 0.2*t36269;
  t36272 = t12167*t33198;
  t36275 = t7464*t33205;
  t36278 = t12053*t33227;
  t36282 = t36272 + t36275 + t36278;
  t36286 = -0.099999*t36282;
  t36302 = t36186 + t36193 + t36195 + t36199 + t36200 + t36206 + t36231 + t36271 + t36286;
  t36090 = 0.2000000000018*t32273*t782*t2988;
  t36093 = 0.2000000000018*t652*t32643;
  t36094 = -6.000000000054e-7*t652*t32413;
  t36103 = t3885*t32651;
  t36109 = t6447*t32672;
  t36124 = t7223*t32696;
  t36134 = t7464*t32651;
  t36138 = t7885*t32672;
  t36143 = t8626*t32696;
  t36156 = t36134 + t36138 + t36143;
  t36159 = -0.3*t36156;
  t36160 = t12053*t32651;
  t36166 = t8626*t32672;
  t36167 = t12116*t32696;
  t36168 = t36160 + t36166 + t36167;
  t36172 = 0.2*t36168;
  t36174 = t12167*t32651;
  t36176 = t7464*t32672;
  t36177 = t12053*t32696;
  t36178 = t36174 + t36176 + t36177;
  t36182 = -0.099999*t36178;
  t36185 = t36090 + t36093 + t36094 + t36103 + t36109 + t36124 + t36159 + t36172 + t36182;
  t36308 = -6.000000000054e-7*t652*t32980;
  t36310 = 0.2000000000018*t652*t34101;
  t36313 = t3885*t34110;
  t36314 = t6447*t34120;
  t36317 = t7223*t34145;
  t36319 = t7464*t34110;
  t36320 = t7885*t34120;
  t36322 = t36319 + t36320 + t34360;
  t36323 = -0.3*t36322;
  t36324 = t12053*t34110;
  t36326 = t8626*t34120;
  t36329 = t12116*t34145;
  t36330 = t36324 + t36326 + t36329;
  t36331 = 0.2*t36330;
  t36332 = t12167*t34110;
  t36335 = t7464*t34120;
  t36336 = t12053*t34145;
  t36338 = t36332 + t36335 + t36336;
  t36344 = -0.099999*t36338;
  t36345 = t36308 + t36310 + t36313 + t36314 + t36317 + t36323 + t36331 + t36344;
  t36469 = t14457*t35863;
  t36476 = t14525*t35877;
  t36482 = t14543*t35889;
  t36519 = -1.000000000009*t3569*t35877;
  t36526 = t14569*t35889;
  t36527 = t35900 + t36519 + t36526;
  t36548 = 0.2*t36527;
  t36551 = -1.8e-11*t3569*t35863;
  t36557 = t14633*t35877;
  t36570 = t14549*t35889;
  t36595 = t36551 + t36557 + t36570;
  t36630 = -0.099999*t36595;
  t36758 = t14633*t35863;
  t36816 = t15052*t35877;
  t36962 = -1.000000000009*t3569*t35889;
  t37162 = t36758 + t36816 + t36962;
  t37244 = -0.3*t37162;
  t37323 = t36469 + t36476 + t36482 + t36548 + t36630 + t37244;
  t36346 = 0.2000000000018*t552*t782*t32397;
  t36349 = 0.2000000000018*t2988*t34439;
  t36351 = -6.000000000054e-7*t2988*t34101;
  t36352 = t7223*t34546;
  t36353 = t3885*t34565;
  t36357 = t6447*t34589;
  t36366 = t12116*t34546;
  t36367 = t12053*t34565;
  t36395 = t8626*t34589;
  t36396 = t36366 + t36367 + t36395;
  t36410 = 0.2*t36396;
  t36411 = t12053*t34546;
  t36417 = t12167*t34565;
  t36419 = t7464*t34589;
  t36429 = t36411 + t36417 + t36419;
  t36430 = -0.099999*t36429;
  t36433 = t8626*t34546;
  t36434 = t7464*t34565;
  t36452 = t7885*t34589;
  t36454 = t36433 + t36434 + t36452;
  t36462 = -0.3*t36454;
  t36464 = t36346 + t36349 + t36351 + t36352 + t36353 + t36357 + t36410 + t36430 + t36462;
  t38173 = t4376*t32273*t782*t2300;
  t38195 = 3.e-6*t652*t32273*t782*t3061;
  t38198 = t38173 + t38195;
  t38233 = t552*t32273*t782*t3061;
  t38236 = t32283 + t38233;
  t38240 = 3.e-6*t32273*t782*t2300*t2988;
  t38241 = -1.*t32273*t782*t2988*t3061;
  t38242 = t38240 + t38241;
  t38490 = -3.e-6*t652*t32273*t782*t2300;
  t38501 = 3.e-6*t32273*t2988*t3003;
  t38502 = t4376*t32273*t782*t3061;
  t38503 = t38490 + t38501 + t38502;
  t38511 = -1.*t552*t32273*t782*t2300;
  t38512 = -1.*t32273*t2988*t3003;
  t38513 = t38511 + t38512 + t38195;
  t38515 = t32273*t782*t2300*t2988;
  t38520 = -1.*t7231*t32273*t3003;
  t38522 = 3.e-6*t32273*t782*t2988*t3061;
  t38524 = t38515 + t38520 + t38522;
  t39078 = 1.000000000009*t32273*t2988*t3003;
  t39079 = 3.e-6*t552*t32273*t782*t3061;
  t39080 = t32302 + t39078 + t39079;
  t39085 = -3.e-6*t32273*t782*t2300*t2988;
  t39091 = 3.e-6*t552*t32273*t3003;
  t39110 = -9.e-12*t32273*t782*t2988*t3061;
  t39116 = t39085 + t39091 + t39110;
  t39122 = -1.*t552*t32273*t3003;
  t39123 = t38515 + t39122 + t38522;
  t40331 = 3.e-6*t652*t32273*t2300*t3003;
  t40364 = -1.*t4376*t32273*t3003*t3061;
  t40365 = t32568 + t40331 + t40364;
  t40375 = t552*t32273*t2300*t3003;
  t40377 = -3.e-6*t652*t32273*t3003*t3061;
  t40380 = t32653 + t40375 + t40377;
  t40384 = -1.*t32273*t2300*t2988*t3003;
  t40388 = -3.e-6*t32273*t2988*t3003*t3061;
  t40394 = t32680 + t40384 + t40388;
  t38166 = -6.000000000054e-7*t652*t32273*t782*t2300;
  t38168 = 0.2000000000018*t652*t32273*t782*t3061;
  t38213 = t3885*t38198;
  t38239 = t6447*t38236;
  t38243 = t7223*t38242;
  t38255 = t7464*t38198;
  t38262 = t7885*t38236;
  t38264 = t8626*t38242;
  t38265 = t38255 + t38262 + t38264;
  t38272 = -0.3*t38265;
  t38274 = t12053*t38198;
  t38275 = t8626*t38236;
  t38277 = t12116*t38242;
  t38279 = t38274 + t38275 + t38277;
  t38280 = 0.2*t38279;
  t38284 = t12167*t38198;
  t38285 = t7464*t38236;
  t38286 = t12053*t38242;
  t38287 = t38284 + t38285 + t38286;
  t38327 = -0.099999*t38287;
  t38335 = t38166 + t38168 + t38213 + t38239 + t38243 + t38272 + t38280 + t38327;
  t40502 = t32647 + t32648;
  t40506 = t32656 + t32424;
  t40510 = t32683 + t32693;
  t41447 = t2300*t32397;
  t41451 = t32273*t3003*t3061;
  t41453 = t41447 + t41451;
  t41444 = t4376*t32643;
  t41468 = 3.e-6*t652*t41453;
  t41470 = t41444 + t41468;
  t41475 = t552*t41453;
  t41480 = t32647 + t41475;
  t41487 = -1.*t2988*t41453;
  t41714 = t32861 + t41487;
  t42526 = 3.e-6*t552*t32643;
  t42528 = -1.*t552*t41453;
  t42534 = t42526 + t42528;
  t42540 = -9.e-12*t2988*t32643;
  t42543 = 3.e-6*t2988*t41453;
  t42548 = t42540 + t42543;
  t39044 = -0.2000000000018*t32273*t782*t2300*t2988;
  t39071 = 0.2000000000018*t552*t32273*t3003;
  t39077 = -6.000000000054e-7*t32273*t782*t2988*t3061;
  t39083 = t7223*t39080;
  t39120 = t3885*t39116;
  t39124 = t6447*t39123;
  t39125 = t12116*t39080;
  t39126 = t12053*t39116;
  t39129 = t8626*t39123;
  t39130 = t39125 + t39126 + t39129;
  t39319 = 0.2*t39130;
  t39322 = t12053*t39080;
  t39327 = t12167*t39116;
  t39331 = t7464*t39123;
  t39334 = t39322 + t39327 + t39331;
  t39583 = -0.099999*t39334;
  t39584 = t8626*t39080;
  t39593 = t7464*t39116;
  t40166 = t7885*t39123;
  t40218 = t39584 + t39593 + t40166;
  t40226 = -0.3*t40218;
  t40227 = t39044 + t39071 + t39077 + t39083 + t39120 + t39124 + t39319 + t39583 + t40226;
  t42724 = 3.e-6*t552*t32404;
  t42728 = -9.e-12*t552*t41453;
  t42734 = t32568 + t42724 + t42728;
  t42739 = -1.*t552*t32404;
  t42740 = 3.e-6*t552*t41453;
  t42742 = t32653 + t42739 + t42740;
  t43188 = -1.000000000009*t552*t32273*t782;
  t43197 = t2988*t32404;
  t43210 = -3.e-6*t2988*t41453;
  t43294 = t43188 + t43197 + t43210;
  t42518 = -6.000000000054e-7*t2988*t32643;
  t42523 = 0.2000000000018*t2988*t41453;
  t42535 = t7223*t42534;
  t42539 = t6447*t41714;
  t42549 = t3885*t42548;
  t42557 = t12053*t42534;
  t42560 = t7464*t41714;
  t42571 = t12167*t42548;
  t42575 = t42557 + t42560 + t42571;
  t42576 = -0.099999*t42575;
  t42578 = t8626*t42534;
  t42596 = t7885*t41714;
  t42610 = t7464*t42548;
  t42635 = t42578 + t42596 + t42610;
  t42646 = -0.3*t42635;
  t42657 = t12116*t42534;
  t42662 = t8626*t41714;
  t42663 = t12053*t42548;
  t42669 = t42657 + t42662 + t42663;
  t42677 = 0.2*t42669;
  t42681 = t42518 + t42523 + t42535 + t42539 + t42549 + t42576 + t42646 + t42677;
  t43603 = -1.000000000009*t32273*t782*t2988;
  t43625 = t43603 + t42739 + t42740;
  t43802 = -3.e-6*t552*t32273*t782;
  t43804 = -9.e-12*t2988*t41453;
  t43817 = t43802 + t32446 + t43804;
  t43835 = t552*t32273*t782;
  t43842 = -1.*t2988*t32404;
  t43844 = t43835 + t43842 + t42543;
  t38509 = t14457*t38503;
  t38514 = t14525*t38513;
  t38526 = t14543*t38524;
  t38529 = t14549*t38503;
  t38533 = -1.000000000009*t3569*t38513;
  t38537 = t14569*t38524;
  t38543 = t38529 + t38533 + t38537;
  t38544 = 0.2*t38543;
  t38545 = -1.8e-11*t3569*t38503;
  t38558 = t14633*t38513;
  t38575 = t14549*t38524;
  t38736 = t38545 + t38558 + t38575;
  t38767 = -0.099999*t38736;
  t38772 = t14633*t38503;
  t38774 = t15052*t38513;
  t38776 = -1.000000000009*t3569*t38524;
  t38960 = t38772 + t38774 + t38776;
  t38964 = -0.3*t38960;
  t38997 = t38509 + t38514 + t38526 + t38544 + t38767 + t38964;
  t41471 = t14457*t41470;
  t41481 = t14525*t41480;
  t41718 = t14543*t41714;
  t41832 = t14549*t41470;
  t41839 = -1.000000000009*t3569*t41480;
  t41994 = t14569*t41714;
  t41995 = t41832 + t41839 + t41994;
  t42126 = 0.2*t41995;
  t42174 = -1.8e-11*t3569*t41470;
  t42439 = t14633*t41480;
  t42440 = t14549*t41714;
  t42454 = t42174 + t42439 + t42440;
  t42458 = -0.099999*t42454;
  t42460 = t14633*t41470;
  t42467 = t15052*t41480;
  t42484 = -1.000000000009*t3569*t41714;
  t42500 = t42460 + t42467 + t42484;
  t42514 = -0.3*t42500;
  t42515 = t41471 + t41481 + t41718 + t42126 + t42458 + t42514;
  t44166 = -3.e-6*t32273*t782*t2988;
  t44170 = t4376*t41453;
  t44248 = t44166 + t32432 + t44170;
  t44252 = t32273*t782*t2988;
  t44266 = t552*t32404;
  t44271 = t44252 + t44266 + t41468;
  t44300 = t7231*t32273*t782;
  t44306 = t44300 + t43842 + t42543;
  t43689 = t14543*t43625;
  t43831 = t14457*t43817;
  t43852 = t14525*t43844;
  t43859 = -1.000000000009*t3569*t43625;
  t43873 = t14633*t43817;
  t43896 = t15052*t43844;
  t43921 = t43859 + t43873 + t43896;
  t43925 = -0.3*t43921;
  t43928 = t14549*t43625;
  t43933 = -1.8e-11*t3569*t43817;
  t43935 = t14633*t43844;
  t43938 = t43928 + t43933 + t43935;
  t43941 = -0.099999*t43938;
  t43942 = t14569*t43625;
  t43943 = t14549*t43817;
  t43951 = -1.000000000009*t3569*t43844;
  t43961 = t43942 + t43943 + t43951;
  t43962 = 0.2*t43961;
  t43970 = t43689 + t43831 + t43852 + t43925 + t43941 + t43962;
  t44312 = t14549*t44248;
  p_output1[0]=(t2374 + t3007 + t3062 + t3885*t4948 + t6447*t6990 + t7223*t7297 - 0.099999*(t12167*t4948 + t12053*t7297 + t6990*t7464) + 0.2*(t12053*t4948 + t12116*t7297 + t6990*t8626) - 0.3*(t4948*t7464 + t6990*t7885 + t7297*t8626))*var2[4] + t14389*var2[5] + t22344*var2[15] + t15088*var2[17];
  p_output1[1]=t14389*var2[4] + (t2374 + t3062 + t22618*t3885 + t22635*t6447 + t22641*t7223 - 0.099999*(t12167*t22618 + t12053*t22641 + t22635*t7464) + 0.2*(t12053*t22618 + t12116*t22641 + t22635*t8626) - 0.3*(t22618*t7464 + t22635*t7885 + t22641*t8626))*var2[5] + t29922*var2[15] + t23607*var2[17];
  p_output1[2]=t22344*var2[4] + t29922*var2[5] + (t3007 + t31430*t3885 + t31417*t6447 + t31444*t7223 - 0.099999*(t12167*t31430 + t12053*t31444 + t31417*t7464) + 0.2000000000018*t2300*t552*t782 + 6.000000000054e-7*t3061*t552*t782 + 0.2*(t12053*t31430 + t12116*t31444 + t31417*t8626) - 0.3*(t31430*t7464 + t31417*t7885 + t31444*t8626))*var2[15] + t31410*var2[17];
  p_output1[3]=t15088*var2[4] + t23607*var2[5] + t31410*var2[15] + (t31666*t31678 + t31693*t31706 + t31747*t31751 - 0.099999*(-1.8e-11*t3067*t31678 + t14549*t31706 + t14440*t31751) - 0.3*(-1.000000000009*t3067*t31751 + t31764 + t31706*t31769) + 0.2*(t14440*t31678 - 1.000000000009*t3067*t31706 + t31751*t31797))*var2[17];
  p_output1[4]=1.;
  p_output1[5]=t14495*t3885 + t14537*t6447 - 0.2000000000018*t2300*t3003*t652 - 6.000000000054e-7*t3003*t3061*t652 + t14547*t7223 - 0.099999*(t12167*t14495 + t12053*t14547 + t14537*t7464) - 0.2000000000018*t2988*t782 + 0.2*(t12053*t14495 + t12116*t14547 + t14537*t8626) - 0.3*(t14495*t7464 + t14537*t7885 + t14547*t8626);
  p_output1[6]=t23142*t3885 + t23185*t6447 + t23235*t7223 - 0.099999*(t12167*t23142 + t12053*t23235 + t23185*t7464) + 6.000000000054e-7*t2300*t652*t782 - 0.2000000000018*t3061*t652*t782 - 0.3*(t27652 + t23142*t7464 + t23185*t7885) + 0.2*(t12053*t23142 + t12116*t23235 + t23185*t8626);
  p_output1[7]=t30466*t3885 - 0.2000000000018*t3003*t552 + t30408*t6447 + t30373*t7223 - 0.099999*(t12053*t30373 + t12167*t30466 + t30408*t7464) + 0.2000000000018*t2300*t2988*t782 + 6.000000000054e-7*t2988*t3061*t782 - 0.3*(t30466*t7464 + t30408*t7885 + t30373*t8626) + 0.2*(t12116*t30373 + t12053*t30466 + t30408*t8626);
  p_output1[8]=t14457*t31678 + t14525*t31706 + t14543*t31751 - 0.099999*(t14633*t31706 + t14549*t31751 - 1.8e-11*t31678*t3569) + 0.2*(t14569*t31751 + t31764 - 1.000000000009*t31706*t3569) - 0.3*(t14633*t31678 + t15052*t31706 - 1.000000000009*t31751*t3569);
  p_output1[9]=(t32969 + t32984 + t33011 + t33018*t3885 + t33035*t6447 + t33088*t7223 - 0.099999*(t12167*t33018 + t12053*t33088 + t33035*t7464) + 0.2*(t12053*t33018 + t12116*t33088 + t33035*t8626) - 0.3*(t33018*t7464 + t33035*t7885 + t33088*t8626))*var2[3] + t32386*var2[4] + t32566*var2[5] + t32955*var2[15] + t32783*var2[17];
  p_output1[10]=t32386*var2[3] + (t32969 + t33718*t3885 + t33785*t6447 - 0.2000000000018*t2300*t3003*t32397*t652 - 6.000000000054e-7*t3003*t3061*t32397*t652 + t33806*t7223 - 0.099999*(t12167*t33718 + t12053*t33806 + t33785*t7464) + 0.2*(t12053*t33718 + t12116*t33806 + t33785*t8626) - 0.3*(t33718*t7464 + t33785*t7885 + t33806*t8626))*var2[4] + t33691*var2[5] + t33509*var2[15] + t33274*var2[17];
  p_output1[11]=t32566*var2[3] + t33691*var2[4] + (t32984 + t33011 + t34380*t3885 + t34384*t6447 + t34387*t7223 - 0.099999*(t12167*t34380 + t12053*t34387 + t34384*t7464) + 0.2*(t12053*t34380 + t12116*t34387 + t34384*t8626) - 0.3*(t34380*t7464 + t34384*t7885 + t34387*t8626))*var2[5] + t34377*var2[15] + t34192*var2[17];
  p_output1[12]=t32955*var2[3] + t33509*var2[4] + t34377*var2[5] + (t32969 + t34449*t3885 - 6.000000000054e-7*t34101*t552 + 0.2000000000018*t34439*t552 + t34457*t6447 + t34465*t7223 - 0.099999*(t12167*t34449 + t12053*t34465 + t34457*t7464) + 0.2*(t12053*t34449 + t12116*t34465 + t34457*t8626) - 0.3*(t34449*t7464 + t34457*t7885 + t34465*t8626))*var2[15] + t35834*var2[17];
  p_output1[13]=t32783*var2[3] + t33274*var2[4] + t34192*var2[5] + t35834*var2[15] + (t31666*t35863 + t31693*t35877 + t31747*t35889 - 0.099999*(-1.8e-11*t3067*t35863 + t14549*t35877 + t14440*t35889) + 0.2*(t14440*t35863 - 1.000000000009*t3067*t35877 + t31797*t35889) - 0.3*(t31769*t35877 - 1.000000000009*t3067*t35889 + t35900))*var2[17];
  p_output1[14]=1.;
  p_output1[15]=t36185;
  p_output1[16]=t36302;
  p_output1[17]=t36345;
  p_output1[18]=t36464;
  p_output1[19]=t37323;
  p_output1[20]=t36185*var2[3] + t36302*var2[4] + t36345*var2[5] + t36464*var2[15] + t37323*var2[17];
  p_output1[21]=t36302*var2[3] + (t36090 + t3885*t40365 + t40380*t6447 + 0.2000000000018*t2300*t3003*t32273*t652 + 6.000000000054e-7*t3003*t3061*t32273*t652 + t40394*t7223 - 0.099999*(t12167*t40365 + t12053*t40394 + t40380*t7464) + 0.2*(t12053*t40365 + t12116*t40394 + t40380*t8626) - 0.3*(t40365*t7464 + t40380*t7885 + t40394*t8626))*var2[4] + t38335*var2[5] + t40227*var2[15] + t38997*var2[17];
  p_output1[22]=t36345*var2[3] + t38335*var2[4] + (t36093 + t36094 + t3885*t40502 + t40506*t6447 + t40510*t7223 - 0.099999*(t12167*t40502 + t12053*t40510 + t40506*t7464) + 0.2*(t12053*t40502 + t12116*t40510 + t40506*t8626) - 0.3*(t40502*t7464 + t40506*t7885 + t40510*t8626))*var2[5] + t42681*var2[15] + t42515*var2[17];
  p_output1[23]=t36464*var2[3] + t40227*var2[4] + t42681*var2[5] + (t36090 + t3885*t42734 + 0.2000000000018*t32404*t552 - 6.000000000054e-7*t41453*t552 + t42742*t6447 + t43294*t7223 - 0.099999*(t12167*t42734 + t12053*t43294 + t42742*t7464) + 0.2*(t12053*t42734 + t12116*t43294 + t42742*t8626) - 0.3*(t42734*t7464 + t42742*t7885 + t43294*t8626))*var2[15] + t43970*var2[17];
  p_output1[24]=t37323*var2[3] + t38997*var2[4] + t42515*var2[5] + t43970*var2[15] + (t31666*t44248 + t31693*t44271 + t31747*t44306 - 0.099999*(-1.8e-11*t3067*t44248 + t14549*t44271 + t14440*t44306) + 0.2*(t14440*t44248 - 1.000000000009*t3067*t44271 + t31797*t44306) - 0.3*(t31769*t44271 - 1.000000000009*t3067*t44306 + t44312))*var2[17];
  p_output1[25]=1.;
  p_output1[26]=t35863*t3885 + t35877*t6447 - 6.000000000054e-7*t34101*t652 + 0.2000000000018*t34439*t652 + t35889*t7223 - 0.099999*(t12167*t35863 + t12053*t35889 + t35877*t7464) + 0.2000000000018*t2988*t32397*t782 + 0.2*(t12053*t35863 + t12116*t35889 + t35877*t8626) - 0.3*(t35863*t7464 + t35877*t7885 + t35889*t8626);
  p_output1[27]=0.2000000000018*t2988*t3003*t32273 + t38503*t3885 + t38513*t6447 + t38524*t7223 - 0.099999*(t12167*t38503 + t12053*t38524 + t38513*t7464) - 0.2000000000018*t2300*t32273*t652*t782 - 6.000000000054e-7*t3061*t32273*t652*t782 + 0.2*(t12053*t38503 + t12116*t38524 + t38513*t8626) - 0.3*(t38503*t7464 + t38513*t7885 + t38524*t8626);
  p_output1[28]=t3885*t41470 + t41480*t6447 - 6.000000000054e-7*t32643*t652 + 0.2000000000018*t41453*t652 + t41714*t7223 - 0.099999*(t12167*t41470 + t12053*t41714 + t41480*t7464) - 0.3*(t42662 + t41470*t7464 + t41480*t7885) + 0.2*(t12053*t41470 + t12116*t41714 + t41480*t8626);
  p_output1[29]=0.2000000000018*t2988*t32404 - 6.000000000054e-7*t2988*t41453 + t3885*t43817 + t43844*t6447 + t43625*t7223 - 0.099999*(t12053*t43625 + t12167*t43817 + t43844*t7464) - 0.2000000000018*t32273*t552*t782 - 0.3*(t43817*t7464 + t43844*t7885 + t43625*t8626) + 0.2*(t12116*t43625 + t12053*t43817 + t43844*t8626);
  p_output1[30]=t14457*t44248 + t14525*t44271 + t14543*t44306 - 0.099999*(-1.8e-11*t3569*t44248 + t14633*t44271 + t14549*t44306) - 0.3*(t14633*t44248 + t15052*t44271 - 1.000000000009*t3569*t44306) + 0.2*(-1.000000000009*t3569*t44271 + t14569*t44306 + t44312);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RightFrontFoot.hh"

namespace Flight2
{

void J_impact_velocity_RightFrontFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
