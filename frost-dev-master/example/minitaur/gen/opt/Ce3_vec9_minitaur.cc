/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:12:54 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t14954;
  double t15117;
  double t31830;
  double t41733;
  double t41786;
  double t44700;
  double t44701;
  double t44707;
  double t41822;
  double t13963;
  double t38210;
  double t41839;
  double t42454;
  double t42560;
  double t44998;
  double t45034;
  double t45092;
  double t45111;
  double t45144;
  double t45307;
  double t45633;
  double t45635;
  double t45652;
  double t45665;
  double t45755;
  double t45863;
  double t44387;
  double t45309;
  double t45327;
  double t45474;
  double t45842;
  double t45848;
  double t12846;
  double t45870;
  double t45880;
  double t45942;
  double t46058;
  double t11018;
  double t46818;
  double t46824;
  double t46829;
  double t46199;
  double t46745;
  double t46747;
  double t46749;
  double t46229;
  double t46821;
  double t46826;
  double t46830;
  double t47207;
  double t47236;
  double t47246;
  double t47247;
  double t48103;
  double t48510;
  double t48514;
  double t48521;
  double t48532;
  double t48453;
  double t48545;
  double t48551;
  double t48559;
  double t48587;
  double t48593;
  double t48606;
  double t48507;
  double t48585;
  double t48618;
  double t48619;
  double t48662;
  double t48668;
  double t48681;
  double t48682;
  double t45852;
  double t46077;
  double t46105;
  double t46483;
  double t46618;
  double t46677;
  double t46739;
  double t46750;
  double t46760;
  double t46761;
  double t46770;
  double t46797;
  double t46801;
  double t47235;
  double t48142;
  double t48145;
  double t48159;
  double t48167;
  double t48168;
  double t48190;
  double t48192;
  double t48194;
  double t48195;
  double t48250;
  double t48368;
  double t48395;
  double t48652;
  double t48685;
  double t48687;
  double t48690;
  double t48693;
  double t48694;
  double t48715;
  double t48717;
  double t48718;
  double t48726;
  double t48727;
  double t48728;
  double t48732;
  double t48891;
  double t48892;
  double t48896;
  double t48901;
  double t48905;
  double t48909;
  double t48923;
  double t48924;
  double t48927;
  double t49337;
  double t49098;
  double t49368;
  double t49111;
  double t49112;
  double t49148;
  double t49208;
  double t49325;
  double t49343;
  double t49348;
  double t49352;
  double t49354;
  double t49358;
  double t49373;
  double t49446;
  double t49449;
  double t49467;
  double t49487;
  double t49488;
  double t49491;
  double t49493;
  double t49495;
  double t49504;
  double t49549;
  double t49092;
  double t49350;
  double t49480;
  double t49613;
  double t49639;
  double t49697;
  double t49714;
  double t49778;
  double t49781;
  double t49789;
  double t49968;
  double t49977;
  double t49980;
  double t49992;
  double t50000;
  double t50053;
  double t50070;
  double t50089;
  double t50014;
  double t50104;
  double t50133;
  double t50149;
  double t50162;
  double t50171;
  double t49914;
  double t49917;
  double t49962;
  double t50318;
  double t50324;
  double t50352;
  double t50259;
  double t50268;
  double t50312;
  double t49675;
  double t49867;
  double t49884;
  double t50521;
  double t50523;
  double t50538;
  double t50907;
  double t50914;
  double t50934;
  double t50941;
  double t50944;
  double t50951;
  double t50977;
  double t50981;
  double t50983;
  double t49911;
  double t51221;
  double t51226;
  double t51232;
  double t50421;
  double t50446;
  double t50693;
  double t50759;
  double t50853;
  double t51237;
  double t51248;
  double t50148;
  double t50177;
  double t50216;
  double t51272;
  double t51279;
  double t50424;
  double t50430;
  double t50435;
  double t51723;
  double t51840;
  double t50456;
  double t50457;
  double t50473;
  double t52032;
  double t52109;
  double t50708;
  double t50717;
  double t50728;
  double t52148;
  double t52303;
  double t50766;
  double t50772;
  double t50774;
  double t52413;
  double t52511;
  double t50856;
  double t50861;
  double t50869;
  double t53490;
  double t53508;
  double t53511;
  double t53301;
  double t53305;
  double t53316;
  double t51215;
  double t53284;
  double t53288;
  double t53289;
  double t53262;
  double t53263;
  double t53267;
  double t53269;
  double t53172;
  double t53175;
  double t53183;
  double t53206;
  double t54225;
  double t54240;
  double t54246;
  double t54254;
  double t54255;
  double t54266;
  double t54267;
  double t54464;
  double t54470;
  double t54594;
  double t54638;
  double t54652;
  double t54667;
  double t54673;
  double t53327;
  double t53333;
  double t53354;
  double t53361;
  double t53372;
  double t53374;
  double t53377;
  double t53383;
  double t51336;
  double t51573;
  double t51973;
  double t53534;
  double t53542;
  double t53543;
  double t53551;
  double t53561;
  double t53564;
  double t53565;
  double t53581;
  double t52340;
  double t52366;
  double t53235;
  double t53277;
  double t53278;
  double t53366;
  double t53387;
  double t53409;
  double t53555;
  double t53588;
  double t53595;
  double t55361;
  double t55372;
  double t55375;
  double t55386;
  double t55389;
  double t55390;
  double t55414;
  double t55416;
  double t55419;
  double t55424;
  double t55427;
  double t55441;
  double t55474;
  double t55484;
  double t55486;
  double t55506;
  double t55513;
  double t55515;
  double t51216;
  double t51219;
  double t54222;
  double t54676;
  double t54757;
  double t54797;
  double t55707;
  double t55713;
  double t55714;
  double t55717;
  double t55740;
  double t55756;
  double t51340;
  double t51347;
  double t51608;
  double t51648;
  double t55009;
  double t55016;
  double t51974;
  double t52026;
  double t55071;
  double t55151;
  double t55185;
  double t55191;
  double t52345;
  double t52346;
  double t52374;
  double t52380;
  double t55286;
  double t55308;
  double t53520;
  double t53596;
  double t53605;
  double t55716;
  double t55789;
  double t53282;
  double t53294;
  double t53298;
  double t53320;
  double t53426;
  double t53429;
  double t55807;
  double t55809;
  double t56149;
  double t56166;
  double t56178;
  double t56219;
  double t56221;
  double t56226;
  double t55861;
  double t55866;
  double t55913;
  double t55921;
  double t56019;
  double t56021;
  double t56073;
  double t56102;
  double t56525;
  double t56519;
  double t56544;
  double t56554;
  double t56522;
  double t56524;
  double t56528;
  double t56532;
  double t56534;
  double t56539;
  double t56551;
  double t56553;
  double t56566;
  double t56577;
  double t56580;
  double t56586;
  double t56676;
  double t56682;
  double t56685;
  double t56686;
  double t56693;
  double t56703;
  double t56763;
  double t56765;
  double t56776;
  double t56642;
  double t56644;
  double t56650;
  double t56653;
  double t56683;
  double t56688;
  double t56704;
  double t56706;
  double t53991;
  double t54189;
  double t54191;
  double t56764;
  double t56768;
  double t56777;
  double t56780;
  double t54832;
  double t54900;
  double t54905;
  double t56920;
  double t57032;
  double t56926;
  double t56928;
  double t56937;
  double t56996;
  double t56998;
  double t57033;
  double t57034;
  double t57035;
  double t57045;
  double t57048;
  double t57060;
  double t57113;
  double t57122;
  double t57123;
  double t57124;
  double t57125;
  double t57128;
  double t56740;
  double t56742;
  double t56747;
  double t56748;
  double t56728;
  double t56731;
  double t56732;
  double t56737;
  double t57029;
  double t57056;
  double t57131;
  double t57135;
  double t57137;
  double t57138;
  double t57141;
  double t57148;
  double t57158;
  double t57160;
  double t57185;
  double t57195;
  double t56788;
  double t56792;
  double t56796;
  double t56814;
  double t56834;
  double t56845;
  double t56850;
  double t56855;
  double t54916;
  double t54958;
  double t54996;
  double t56609;
  double t56616;
  double t56617;
  double t56621;
  double t56542;
  double t56570;
  double t56593;
  double t56596;
  double t55046;
  double t55050;
  double t55062;
  double t55213;
  double t55220;
  double t55222;
  double t55225;
  double t55234;
  double t55256;
  double t57536;
  double t57541;
  double t57542;
  double t57543;
  double t57546;
  double t57549;
  double t57550;
  double t57580;
  double t57582;
  double t57583;
  double t57588;
  double t57595;
  double t57596;
  double t57609;
  double t57636;
  double t57640;
  double t57642;
  double t57643;
  double t57645;
  double t57671;
  double t57673;
  double t57674;
  double t57479;
  double t57704;
  double t57705;
  double t57706;
  double t57708;
  double t57710;
  double t57742;
  double t57743;
  double t57746;
  double t57748;
  double t57753;
  double t57774;
  double t57777;
  double t57778;
  double t57780;
  double t57783;
  double t57786;
  double t57793;
  double t57802;
  double t57809;
  double t57812;
  double t57820;
  double t57821;
  double t57913;
  double t57915;
  double t57916;
  double t57917;
  double t57920;
  double t57922;
  double t57923;
  double t57926;
  double t57929;
  double t58083;
  double t58122;
  double t58284;
  double t58287;
  double t58289;
  double t58299;
  double t58309;
  double t58319;
  double t58326;
  double t58329;
  double t58330;
  double t58339;
  double t58340;
  double t56601;
  double t56623;
  double t56625;
  double t56739;
  double t56750;
  double t56751;
  double t56826;
  double t56866;
  double t56880;
  double t58473;
  double t58475;
  double t58490;
  double t58509;
  double t58667;
  double t58816;
  double t58945;
  double t58949;
  double t58984;
  double t59206;
  double t59207;
  double t59209;
  double t59288;
  double t59289;
  double t59307;
  double t59371;
  double t59376;
  double t59408;
  double t57136;
  double t57197;
  double t59720;
  double t59757;
  double t59770;
  double t59791;
  double t59795;
  double t59796;
  double t57237;
  double t57241;
  double t57252;
  double t57257;
  double t57276;
  double t57357;
  double t57391;
  double t57394;
  double t57418;
  double t57428;
  double t56626;
  double t56654;
  double t56661;
  double t56716;
  double t56753;
  double t56754;
  double t56784;
  double t56884;
  double t56886;
  double t59774;
  double t59808;
  double t61069;
  double t61103;
  double t61105;
  double t61052;
  double t61053;
  double t61055;
  double t59836;
  double t59852;
  double t60080;
  double t60159;
  double t60295;
  double t60405;
  double t60594;
  double t60598;
  double t60698;
  double t60806;
  t14954 = Cos(var1[8]);
  t15117 = -1.*t14954;
  t31830 = 1. + t15117;
  t41733 = 3.e-6*t31830;
  t41786 = Sin(var1[8]);
  t44700 = Cos(var1[6]);
  t44701 = -1.*t44700;
  t44707 = 1. + t44701;
  t41822 = 3.e-6*t41786;
  t13963 = Sin(var1[6]);
  t38210 = 1.000000000009*t31830;
  t41839 = t41733 + t41822;
  t42454 = 3.e-6*t41839;
  t42560 = -1. + t38210 + t42454;
  t44998 = -9.e-12*t31830;
  t45034 = -3.e-6*t41786;
  t45092 = t41733 + t45034;
  t45111 = 3.e-6*t45092;
  t45144 = -1.*t41786;
  t45307 = t44998 + t45111 + t45144;
  t45633 = -1.8e-11*t31830;
  t45635 = 1. + t45633;
  t45652 = 3.e-6*t45635;
  t45665 = -3.e-6*t31830;
  t45755 = t45652 + t45665 + t41822;
  t45863 = Sin(var1[5]);
  t44387 = 3.e-6*t13963*t42560;
  t45309 = 3.e-6*t44707*t45307;
  t45327 = -9.e-12*t44707;
  t45474 = 1. + t45327;
  t45842 = t45474*t45755;
  t45848 = t44387 + t45309 + t45842;
  t12846 = Cos(var1[5]);
  t45870 = -1.*t13963*t42560;
  t45880 = t44700*t45307;
  t45942 = 3.e-6*t44707*t45755;
  t46058 = t45870 + t45880 + t45942;
  t11018 = Sin(var1[3]);
  t46818 = -1. + t38210 + t45111;
  t46824 = t45652 + t45665 + t45034;
  t46829 = t44998 + t42454 + t41786;
  t46199 = Cos(var1[3]);
  t46745 = Cos(var1[4]);
  t46747 = -1.000000000009*t44707;
  t46749 = 1. + t46747;
  t46229 = Sin(var1[4]);
  t46821 = t44700*t46818;
  t46826 = 3.e-6*t44707*t46824;
  t46830 = -1.*t13963*t46829;
  t47207 = t46821 + t46826 + t46830;
  t47236 = 3.e-6*t44707*t46818;
  t47246 = t45474*t46824;
  t47247 = 3.e-6*t13963*t46829;
  t48103 = t47236 + t47246 + t47247;
  t48510 = -1.000000000009*t31830;
  t48514 = 1. + t48510;
  t48521 = 3.e-6*t48514;
  t48532 = 9.e-12*t31830;
  t48453 = 1. + t45633 + t45111 + t42454;
  t48545 = t48532 + t45144;
  t48551 = 3.e-6*t48545;
  t48559 = t48521 + t41733 + t48551 + t41822;
  t48587 = t48532 + t41786;
  t48593 = 3.e-6*t48587;
  t48606 = t48521 + t41733 + t45034 + t48593;
  t48507 = t45474*t48453;
  t48585 = 3.e-6*t13963*t48559;
  t48618 = 3.e-6*t44707*t48606;
  t48619 = t48507 + t48585 + t48618;
  t48662 = 3.e-6*t44707*t48453;
  t48668 = -1.*t13963*t48559;
  t48681 = t44700*t48606;
  t48682 = t48662 + t48668 + t48681;
  t45852 = t12846*t45848;
  t46077 = t45863*t46058;
  t46105 = t45852 + t46077;
  t46483 = -1.*t45863*t45848;
  t46618 = t12846*t46058;
  t46677 = t46483 + t46618;
  t46739 = -1.*t46229*t46677;
  t46750 = t46749*t42560;
  t46760 = t13963*t45307;
  t46761 = -3.e-6*t13963*t45755;
  t46770 = t46750 + t46760 + t46761;
  t46797 = t46745*t46770;
  t46801 = t46739 + t46797;
  t47235 = t45863*t47207;
  t48142 = t12846*t48103;
  t48145 = t47235 + t48142;
  t48159 = t13963*t46818;
  t48167 = -3.e-6*t13963*t46824;
  t48168 = t46749*t46829;
  t48190 = t48159 + t48167 + t48168;
  t48192 = t46745*t48190;
  t48194 = t12846*t47207;
  t48195 = -1.*t45863*t48103;
  t48250 = t48194 + t48195;
  t48368 = -1.*t46229*t48250;
  t48395 = t48192 + t48368;
  t48652 = t12846*t48619;
  t48685 = t45863*t48682;
  t48687 = t48652 + t48685;
  t48690 = -3.e-6*t13963*t48453;
  t48693 = t46749*t48559;
  t48694 = t13963*t48606;
  t48715 = t48690 + t48693 + t48694;
  t48717 = t46745*t48715;
  t48718 = -1.*t45863*t48619;
  t48726 = t12846*t48682;
  t48727 = t48718 + t48726;
  t48728 = -1.*t46229*t48727;
  t48732 = t48717 + t48728;
  t48891 = -1.*t46745*t46677;
  t48892 = -1.*t46229*t46770;
  t48896 = t48891 + t48892;
  t48901 = -1.*t46229*t48190;
  t48905 = -1.*t46745*t48250;
  t48909 = t48901 + t48905;
  t48923 = -1.*t46229*t48715;
  t48924 = -1.*t46745*t48727;
  t48927 = t48923 + t48924;
  t49337 = t45665 + t41822;
  t49098 = 9.e-13*var1[8];
  t49368 = t45665 + t45034;
  t49111 = 0.2*t48514;
  t49112 = 0.2000000000018*t31830;
  t49148 = t44998 + t45144;
  t49208 = 0.1*t49148;
  t49325 = 0.1*t45092;
  t49343 = -9.e-7*t49337;
  t49348 = t49098 + t49111 + t49112 + t49208 + t49325 + t49343;
  t49352 = 3.e-7*var1[8];
  t49354 = 0.1*t45635;
  t49358 = -1.62e-17*t31830;
  t49373 = 0.2*t49368;
  t49446 = 0.1*t49337;
  t49449 = 0.2*t41839;
  t49467 = t49352 + t49354 + t49358 + t49373 + t49446 + t49449;
  t49487 = 0.1000000000009*t31830;
  t49488 = 0.2*t48545;
  t49491 = -9.e-7*t49368;
  t49493 = 0.1*t41839;
  t49495 = t44998 + t41786;
  t49504 = 0.2*t49495;
  t49549 = t49098 + t49487 + t49488 + t49491 + t49493 + t49504;
  t49092 = 0.2000000000018*t44707;
  t49350 = t44700*t49348;
  t49480 = 3.e-6*t44707*t49467;
  t49613 = -1.*t13963*t49549;
  t49639 = t49092 + t49350 + t49480 + t49613;
  t49697 = -6.000000000054e-7*t44707;
  t49714 = 3.e-6*t44707*t49348;
  t49778 = t45474*t49467;
  t49781 = 3.e-6*t13963*t49549;
  t49789 = t49697 + t49714 + t49778 + t49781;
  t49968 = -0.2000000000018*t13963;
  t49977 = t13963*t49348;
  t49980 = -3.e-6*t13963*t49467;
  t49992 = t46749*t49549;
  t50000 = t49968 + t49977 + t49980 + t49992;
  t50053 = t12846*t49639;
  t50070 = -1.*t45863*t49789;
  t50089 = t50053 + t50070;
  t50014 = t46229*t50000;
  t50104 = t46745*t50089;
  t50133 = t50014 + t50104;
  t50149 = t46745*t50000;
  t50162 = -1.*t46229*t50089;
  t50171 = t50149 + t50162;
  t49914 = t46745*t46677;
  t49917 = t46229*t46770;
  t49962 = t49914 + t49917;
  t50318 = -1.*t46229*t50000;
  t50324 = -1.*t46745*t50089;
  t50352 = t50318 + t50324;
  t50259 = t46229*t48190;
  t50268 = t46745*t48250;
  t50312 = t50259 + t50268;
  t49675 = t45863*t49639;
  t49867 = t12846*t49789;
  t49884 = t49675 + t49867;
  t50521 = t46229*t48715;
  t50523 = t46745*t48727;
  t50538 = t50521 + t50523;
  t50907 = -1.*t12846*t45848;
  t50914 = -1.*t45863*t46058;
  t50934 = t50907 + t50914;
  t50941 = -1.*t45863*t47207;
  t50944 = -1.*t12846*t48103;
  t50951 = t50941 + t50944;
  t50977 = -1.*t12846*t48619;
  t50981 = -1.*t45863*t48682;
  t50983 = t50977 + t50981;
  t49911 = -1.*t46105*t49884;
  t51221 = -1.*t45863*t49639;
  t51226 = -1.*t12846*t49789;
  t51232 = t51221 + t51226;
  t50421 = t48145*t49884;
  t50446 = t46105*t49884;
  t50693 = -1.*t49884*t48687;
  t50759 = -1.*t48145*t49884;
  t50853 = t49884*t48687;
  t51237 = -1.*t46677*t49884;
  t51248 = -1.*t46105*t50089;
  t50148 = -1.*t49962*t50133;
  t50177 = -1.*t46801*t50171;
  t50216 = t49911 + t50148 + t50177;
  t51272 = t48250*t49884;
  t51279 = t48145*t50089;
  t50424 = t50312*t50133;
  t50430 = t48395*t50171;
  t50435 = t50421 + t50424 + t50430;
  t51723 = t46677*t49884;
  t51840 = t46105*t50089;
  t50456 = t49962*t50133;
  t50457 = t46801*t50171;
  t50473 = t50446 + t50456 + t50457;
  t52032 = -1.*t49884*t48727;
  t52109 = -1.*t50089*t48687;
  t50708 = -1.*t50133*t50538;
  t50717 = -1.*t50171*t48732;
  t50728 = t50693 + t50708 + t50717;
  t52148 = -1.*t48250*t49884;
  t52303 = -1.*t48145*t50089;
  t50766 = -1.*t50312*t50133;
  t50772 = -1.*t48395*t50171;
  t50774 = t50759 + t50766 + t50772;
  t52413 = t49884*t48727;
  t52511 = t50089*t48687;
  t50856 = t50133*t50538;
  t50861 = t50171*t48732;
  t50869 = t50853 + t50856 + t50861;
  t53490 = -3.e-6*t44700*t48453;
  t53508 = -1.000000000009*t13963*t48559;
  t53511 = t53490 + t53508 + t48681;
  t53301 = -3.e-6*t44700*t46824;
  t53305 = -1.000000000009*t13963*t46829;
  t53316 = t46821 + t53301 + t53305;
  t51215 = -1.*t46770*t50000;
  t53284 = -1.000000000009*t13963*t42560;
  t53288 = -3.e-6*t44700*t45755;
  t53289 = t53284 + t45880 + t53288;
  t53262 = -1.*t44700*t42560;
  t53263 = -1.*t13963*t45307;
  t53267 = 3.e-6*t13963*t45755;
  t53269 = t53262 + t53263 + t53267;
  t53172 = 3.e-6*t44700*t42560;
  t53175 = 3.e-6*t13963*t45307;
  t53183 = -9.e-12*t13963*t45755;
  t53206 = t53172 + t53175 + t53183;
  t54225 = 0.2000000000018*t13963;
  t54240 = -1.*t13963*t49348;
  t54246 = 3.e-6*t13963*t49467;
  t54254 = -1.*t44700*t49549;
  t54255 = t54225 + t54240 + t54246 + t54254;
  t54266 = -6.000000000054e-7*t13963;
  t54267 = 3.e-6*t13963*t49348;
  t54464 = -9.e-12*t13963*t49467;
  t54470 = 3.e-6*t44700*t49549;
  t54594 = t54266 + t54267 + t54464 + t54470;
  t54638 = -0.2000000000018*t44700;
  t54652 = -3.e-6*t44700*t49467;
  t54667 = -1.000000000009*t13963*t49549;
  t54673 = t54638 + t49350 + t54652 + t54667;
  t53327 = -1.*t13963*t46818;
  t53333 = 3.e-6*t13963*t46824;
  t53354 = -1.*t44700*t46829;
  t53361 = t53327 + t53333 + t53354;
  t53372 = 3.e-6*t13963*t46818;
  t53374 = -9.e-12*t13963*t46824;
  t53377 = 3.e-6*t44700*t46829;
  t53383 = t53372 + t53374 + t53377;
  t51336 = t48190*t50000;
  t51573 = t46770*t50000;
  t51973 = -1.*t50000*t48715;
  t53534 = 3.e-6*t13963*t48453;
  t53542 = -1.*t44700*t48559;
  t53543 = -1.*t13963*t48606;
  t53551 = t53534 + t53542 + t53543;
  t53561 = -9.e-12*t13963*t48453;
  t53564 = 3.e-6*t44700*t48559;
  t53565 = 3.e-6*t13963*t48606;
  t53581 = t53561 + t53564 + t53565;
  t52340 = -1.*t48190*t50000;
  t52366 = t50000*t48715;
  t53235 = -1.*t45863*t53206;
  t53277 = t12846*t53269;
  t53278 = t53235 + t53277;
  t53366 = t12846*t53361;
  t53387 = -1.*t45863*t53383;
  t53409 = t53366 + t53387;
  t53555 = t12846*t53551;
  t53588 = -1.*t45863*t53581;
  t53595 = t53555 + t53588;
  t55361 = -1.*t46229*t53278;
  t55372 = t46745*t53289;
  t55375 = t55361 + t55372;
  t55386 = t12846*t53206;
  t55389 = t45863*t53269;
  t55390 = t55386 + t55389;
  t55414 = t45863*t53361;
  t55416 = t12846*t53383;
  t55419 = t55414 + t55416;
  t55424 = t46745*t53316;
  t55427 = -1.*t46229*t53409;
  t55441 = t55424 + t55427;
  t55474 = t45863*t53551;
  t55484 = t12846*t53581;
  t55486 = t55474 + t55484;
  t55506 = t46745*t53511;
  t55513 = -1.*t46229*t53595;
  t55515 = t55506 + t55513;
  t51216 = -1.*t46677*t50089;
  t51219 = t51215 + t49911 + t51216;
  t54222 = -1.*t53289*t50000;
  t54676 = -1.*t46770*t54673;
  t54757 = t53316*t50000;
  t54797 = t48190*t54673;
  t55707 = t45863*t54255;
  t55713 = t12846*t54594;
  t55714 = t55707 + t55713;
  t55717 = t12846*t54255;
  t55740 = -1.*t45863*t54594;
  t55756 = t55717 + t55740;
  t51340 = t48250*t50089;
  t51347 = t51336 + t50421 + t51340;
  t51608 = t46677*t50089;
  t51648 = t51573 + t50446 + t51608;
  t55009 = t53289*t50000;
  t55016 = t46770*t54673;
  t51974 = -1.*t50089*t48727;
  t52026 = t51973 + t51974 + t50693;
  t55071 = -1.*t50000*t53511;
  t55151 = -1.*t54673*t48715;
  t55185 = -1.*t53316*t50000;
  t55191 = -1.*t48190*t54673;
  t52345 = -1.*t48250*t50089;
  t52346 = t52340 + t50759 + t52345;
  t52374 = t50089*t48727;
  t52380 = t52366 + t52374 + t50853;
  t55286 = t50000*t53511;
  t55308 = t54673*t48715;
  t53520 = t46229*t53511;
  t53596 = t46745*t53595;
  t53605 = t53520 + t53596;
  t55716 = -1.*t46105*t55714;
  t55789 = -1.*t55390*t49884;
  t53282 = t46745*t53278;
  t53294 = t46229*t53289;
  t53298 = t53282 + t53294;
  t53320 = t46229*t53316;
  t53426 = t46745*t53409;
  t53429 = t53320 + t53426;
  t55807 = t48145*t55714;
  t55809 = t55419*t49884;
  t56149 = t46229*t54673;
  t56166 = t46745*t55756;
  t56178 = t56149 + t56166;
  t56219 = t46745*t54673;
  t56221 = -1.*t46229*t55756;
  t56226 = t56219 + t56221;
  t55861 = t46105*t55714;
  t55866 = t55390*t49884;
  t55913 = -1.*t55714*t48687;
  t55921 = -1.*t49884*t55486;
  t56019 = -1.*t48145*t55714;
  t56021 = -1.*t55419*t49884;
  t56073 = t55714*t48687;
  t56102 = t49884*t55486;
  t56525 = 3.e-6*t14954;
  t56519 = -3.e-6*t14954;
  t56544 = 9.e-12*t41786;
  t56554 = -2.7e-17*t41786;
  t56522 = t56519 + t41822;
  t56524 = 3.e-6*t56522;
  t56528 = t56525 + t41822;
  t56532 = 3.e-6*t56528;
  t56534 = -1.8e-11*t41786;
  t56539 = t56524 + t56532 + t56534;
  t56551 = t15117 + t56544;
  t56553 = 3.e-6*t56551;
  t56566 = t56525 + t56553 + t56554;
  t56577 = t14954 + t56544;
  t56580 = 3.e-6*t56577;
  t56586 = t56519 + t56580 + t56554;
  t56676 = -3.000000000054e-6*t41786;
  t56682 = t56519 + t56676;
  t56685 = -9.e-12*t41786;
  t56686 = t14954 + t56532 + t56685;
  t56693 = 1.000000000009*t41786;
  t56703 = t56524 + t56693;
  t56763 = t56525 + t56676;
  t56765 = t15117 + t56524 + t56685;
  t56776 = t56532 + t56693;
  t56642 = -3.e-6*t13963*t56539;
  t56644 = t46749*t56566;
  t56650 = t13963*t56586;
  t56653 = t56642 + t56644 + t56650;
  t56683 = -3.e-6*t13963*t56682;
  t56688 = t46749*t56686;
  t56704 = t13963*t56703;
  t56706 = t56683 + t56688 + t56704;
  t53991 = -1.*t46058*t49639;
  t54189 = -1.*t45848*t49789;
  t54191 = t51215 + t53991 + t54189;
  t56764 = -3.e-6*t13963*t56763;
  t56768 = t13963*t56765;
  t56777 = t46749*t56776;
  t56780 = t56764 + t56768 + t56777;
  t54832 = t47207*t49639;
  t54900 = t48103*t49789;
  t54905 = t51336 + t54832 + t54900;
  t56920 = t56525 + t45034;
  t57032 = t56519 + t45034;
  t56926 = -9.e-7*t56920;
  t56928 = t15117 + t56685;
  t56937 = 0.1*t56928;
  t56996 = 0.1*t56522;
  t56998 = 9.e-13 + t56926 + t56937 + t56996;
  t57033 = 0.2*t57032;
  t57034 = 0.1*t56920;
  t57035 = 0.2*t56528;
  t57045 = -1.8000162e-12*t41786;
  t57048 = 3.e-7 + t57033 + t57034 + t57035 + t57045;
  t57060 = -9.e-7*t57032;
  t57113 = t14954 + t56685;
  t57122 = 0.2*t57113;
  t57123 = 0.2*t56551;
  t57124 = 0.1*t56528;
  t57125 = 0.1000000000009*t41786;
  t57128 = 9.e-13 + t57060 + t57122 + t57123 + t57124 + t57125;
  t56740 = 3.e-6*t44707*t56682;
  t56742 = -1.*t13963*t56686;
  t56747 = t44700*t56703;
  t56748 = t56740 + t56742 + t56747;
  t56728 = t45474*t56682;
  t56731 = 3.e-6*t13963*t56686;
  t56732 = 3.e-6*t44707*t56703;
  t56737 = t56728 + t56731 + t56732;
  t57029 = t13963*t56998;
  t57056 = -3.e-6*t13963*t57048;
  t57131 = t46749*t57128;
  t57135 = t57029 + t57056 + t57131;
  t57137 = t44700*t56998;
  t57138 = 3.e-6*t44707*t57048;
  t57141 = -1.*t13963*t57128;
  t57148 = t57137 + t57138 + t57141;
  t57158 = 3.e-6*t44707*t56998;
  t57160 = t45474*t57048;
  t57185 = 3.e-6*t13963*t57128;
  t57195 = t57158 + t57160 + t57185;
  t56788 = 3.e-6*t44707*t56763;
  t56792 = t44700*t56765;
  t56796 = -1.*t13963*t56776;
  t56814 = t56788 + t56792 + t56796;
  t56834 = t45474*t56763;
  t56845 = 3.e-6*t44707*t56765;
  t56850 = 3.e-6*t13963*t56776;
  t56855 = t56834 + t56845 + t56850;
  t54916 = t46058*t49639;
  t54958 = t45848*t49789;
  t54996 = t51573 + t54916 + t54958;
  t56609 = 3.e-6*t44707*t56539;
  t56616 = -1.*t13963*t56566;
  t56617 = t44700*t56586;
  t56621 = t56609 + t56616 + t56617;
  t56542 = t45474*t56539;
  t56570 = 3.e-6*t13963*t56566;
  t56593 = 3.e-6*t44707*t56586;
  t56596 = t56542 + t56570 + t56593;
  t55046 = -1.*t49789*t48619;
  t55050 = -1.*t49639*t48682;
  t55062 = t55046 + t55050 + t51973;
  t55213 = -1.*t47207*t49639;
  t55220 = -1.*t48103*t49789;
  t55222 = t52340 + t55213 + t55220;
  t55225 = t49789*t48619;
  t55234 = t49639*t48682;
  t55256 = t55225 + t55234 + t52366;
  t57536 = -1.*t49348*t45307;
  t57541 = -1.*t49467*t45755;
  t57542 = -1.*t42560*t49549;
  t57543 = t57536 + t57541 + t57542;
  t57546 = t46818*t56998;
  t57549 = t49467*t56682;
  t57550 = t46824*t57048;
  t57580 = t57128*t46829;
  t57582 = t49348*t56703;
  t57583 = t56686*t49549;
  t57588 = t57546 + t57549 + t57550 + t57580 + t57582 + t57583;
  t57595 = t46818*t49348;
  t57596 = t49467*t46824;
  t57609 = t46829*t49549;
  t57636 = t57595 + t57596 + t57609;
  t57640 = -1.*t56998*t45307;
  t57642 = -1.*t49467*t56763;
  t57643 = -1.*t49348*t56765;
  t57645 = -1.*t57048*t45755;
  t57671 = -1.*t42560*t57128;
  t57673 = -1.*t56776*t49549;
  t57674 = t57640 + t57642 + t57643 + t57645 + t57671 + t57673;
  t57479 = -3.e-6*t56528;
  t57704 = t49348*t45307;
  t57705 = t49467*t45755;
  t57706 = t42560*t49549;
  t57708 = t57704 + t57705 + t57706;
  t57710 = t56998*t45307;
  t57742 = t49467*t56763;
  t57743 = t49348*t56765;
  t57746 = t57048*t45755;
  t57748 = t42560*t57128;
  t57753 = t56776*t49549;
  t57774 = t57710 + t57742 + t57743 + t57746 + t57748 + t57753;
  t57777 = -1.*t48453*t49467;
  t57778 = -1.*t48559*t49549;
  t57780 = -1.*t49348*t48606;
  t57783 = t57777 + t57778 + t57780;
  t57786 = -1.*t49467*t56539;
  t57793 = -1.*t48453*t57048;
  t57802 = -1.*t49348*t56586;
  t57809 = -1.*t48559*t57128;
  t57812 = -1.*t56566*t49549;
  t57820 = -1.*t56998*t48606;
  t57821 = t57786 + t57793 + t57802 + t57809 + t57812 + t57820;
  t57913 = -1.*t46818*t56998;
  t57915 = -1.*t49467*t56682;
  t57916 = -1.*t46824*t57048;
  t57917 = -1.*t57128*t46829;
  t57920 = -1.*t49348*t56703;
  t57922 = -1.*t56686*t49549;
  t57923 = t57913 + t57915 + t57916 + t57917 + t57920 + t57922;
  t57926 = -1.*t46818*t49348;
  t57929 = -1.*t49467*t46824;
  t58083 = -1.*t46829*t49549;
  t58122 = t57926 + t57929 + t58083;
  t58284 = t48453*t49467;
  t58287 = t48559*t49549;
  t58289 = t49348*t48606;
  t58299 = t58284 + t58287 + t58289;
  t58309 = t49467*t56539;
  t58319 = t48453*t57048;
  t58326 = t49348*t56586;
  t58329 = t48559*t57128;
  t58330 = t56566*t49549;
  t58339 = t56998*t48606;
  t58340 = t58309 + t58319 + t58326 + t58329 + t58330 + t58339;
  t56601 = -1.*t45863*t56596;
  t56623 = t12846*t56621;
  t56625 = t56601 + t56623;
  t56739 = -1.*t45863*t56737;
  t56750 = t12846*t56748;
  t56751 = t56739 + t56750;
  t56826 = t12846*t56814;
  t56866 = -1.*t45863*t56855;
  t56880 = t56826 + t56866;
  t58473 = t12846*t56596;
  t58475 = t45863*t56621;
  t58490 = t58473 + t58475;
  t58509 = -1.*t46229*t56625;
  t58667 = t46745*t56653;
  t58816 = t58509 + t58667;
  t58945 = t12846*t56737;
  t58949 = t45863*t56748;
  t58984 = t58945 + t58949;
  t59206 = t46745*t56706;
  t59207 = -1.*t46229*t56751;
  t59209 = t59206 + t59207;
  t59288 = t45863*t56814;
  t59289 = t12846*t56855;
  t59307 = t59288 + t59289;
  t59371 = t46745*t56780;
  t59376 = -1.*t46229*t56880;
  t59408 = t59371 + t59376;
  t57136 = t57135*t48190;
  t57197 = t56706*t50000;
  t59720 = t45863*t57148;
  t59757 = t12846*t57195;
  t59770 = t59720 + t59757;
  t59791 = t12846*t57148;
  t59795 = -1.*t45863*t57195;
  t59796 = t59791 + t59795;
  t57237 = -1.*t46770*t57135;
  t57241 = -1.*t56780*t50000;
  t57252 = t46770*t57135;
  t57257 = t56780*t50000;
  t57276 = -1.*t56653*t50000;
  t57357 = -1.*t57135*t48715;
  t57391 = -1.*t57135*t48190;
  t57394 = -1.*t56706*t50000;
  t57418 = t56653*t50000;
  t57428 = t57135*t48715;
  t56626 = t46745*t56625;
  t56654 = t46229*t56653;
  t56661 = t56626 + t56654;
  t56716 = t46229*t56706;
  t56753 = t46745*t56751;
  t56754 = t56716 + t56753;
  t56784 = t46229*t56780;
  t56884 = t46745*t56880;
  t56886 = t56784 + t56884;
  t59774 = t59770*t48145;
  t59808 = t58984*t49884;
  t61069 = -1.*t46229*t59796;
  t61103 = t46745*t57135;
  t61105 = t61069 + t61103;
  t61052 = t46745*t59796;
  t61053 = t46229*t57135;
  t61055 = t61052 + t61053;
  t59836 = -1.*t46105*t59770;
  t59852 = -1.*t59307*t49884;
  t60080 = t46105*t59770;
  t60159 = t59307*t49884;
  t60295 = -1.*t58490*t49884;
  t60405 = -1.*t59770*t48687;
  t60594 = -1.*t59770*t48145;
  t60598 = -1.*t58984*t49884;
  t60698 = t58490*t49884;
  t60806 = t59770*t48687;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(1.555781330428e-8*(-1.*t11018*t46105 - 1.*t46199*t46801) - 0.005186015558*(-1.*t11018*t48145 - 1.*t46199*t48395) - 1.5558e-8*(-1.*t11018*t48687 - 1.*t46199*t48732))*var2[1] - 0.5*(1.555781330428e-8*(t46105*t46199 - 1.*t11018*t46801) - 0.005186015558*(t46199*t48145 - 1.*t11018*t48395) - 1.5558e-8*(t46199*t48687 - 1.*t11018*t48732))*var2[2])*var2[8];
  p_output1[4]=(-0.5*(1.555781330428e-8*t46801 - 0.005186015558*t48395 - 1.5558e-8*t48732)*var2[0] - 0.5*(-1.555781330428e-8*t11018*t48896 + 0.005186015558*t11018*t48909 + 1.5558e-8*t11018*t48927)*var2[1] - 0.5*(1.555781330428e-8*t46199*t48896 - 0.005186015558*t46199*t48909 - 1.5558e-8*t46199*t48927)*var2[2] - 0.5*(-0.00024500000000441*t48732 - 1.5558e-8*(t48395*t50216 + t50312*(-1.*t46801*t50133 - 1.*t48896*t50171 - 1.*t49962*t50171 - 1.*t46801*t50352) + t49962*(t48395*t50133 + t48909*t50171 + t50171*t50312 + t48395*t50352) + t46801*t50435) - 0.005186015558*(t48732*t50473 + (t46801*t50133 + t48896*t50171 + t49962*t50171 + t46801*t50352)*t50538 + t49962*(-1.*t48732*t50133 - 1.*t48927*t50171 - 1.*t48732*t50352 - 1.*t50171*t50538) + t46801*t50728) + 1.555781330428e-8*((-1.*t48395*t50133 - 1.*t48909*t50171 - 1.*t50171*t50312 - 1.*t48395*t50352)*t50538 + t50312*(t48732*t50133 + t48927*t50171 + t48732*t50352 + t50171*t50538) + t48732*t50774 + t48395*t50869))*var2[3])*var2[8];
  p_output1[5]=(-0.5*(1.555781330428e-8*t46745*t50934 - 0.005186015558*t46745*t50951 - 1.5558e-8*t46745*t50983)*var2[0] - 0.5*(1.555781330428e-8*(t46199*t46677 + t11018*t46229*t50934) - 0.005186015558*(t46199*t48250 + t11018*t46229*t50951) - 1.5558e-8*(t46199*t48727 + t11018*t46229*t50983))*var2[1] - 0.5*(1.555781330428e-8*(t11018*t46677 - 1.*t46199*t46229*t50934) - 0.005186015558*(t11018*t48250 - 1.*t46199*t46229*t50951) - 1.5558e-8*(t11018*t48727 - 1.*t46199*t46229*t50983))*var2[2] - 0.5*(-0.00024500000000441*t46745*t50983 - 1.5558e-8*(t46745*t50435*t50934 + t46745*t50216*t50951 + t50312*(-1.*t46745*t50133*t50934 + t46229*t50171*t50934 + t46229*t46801*t51232 - 1.*t46745*t49962*t51232 + t51237 + t51248) + t49962*(t46745*t50133*t50951 - 1.*t46229*t50171*t50951 - 1.*t46229*t48395*t51232 + t46745*t50312*t51232 + t51272 + t51279)) - 0.005186015558*(t46745*t50728*t50934 + t46745*t50473*t50983 + t50538*(t46745*t50133*t50934 - 1.*t46229*t50171*t50934 - 1.*t46229*t46801*t51232 + t46745*t49962*t51232 + t51723 + t51840) + t49962*(-1.*t46745*t50133*t50983 + t46229*t50171*t50983 + t46229*t48732*t51232 - 1.*t46745*t50538*t51232 + t52032 + t52109)) + 1.555781330428e-8*(t46745*t50869*t50951 + t46745*t50774*t50983 + t50538*(-1.*t46745*t50133*t50951 + t46229*t50171*t50951 + t46229*t48395*t51232 - 1.*t46745*t50312*t51232 + t52148 + t52303) + t50312*(t46745*t50133*t50983 - 1.*t46229*t50171*t50983 - 1.*t46229*t48732*t51232 + t46745*t50538*t51232 + t52413 + t52511)))*var2[3] - 0.5*(-0.00024500000000441*t48727 - 1.5558e-8*(t48250*t51219 + t48145*(-1.*t50089*t50934 - 1.*t46677*t51232 + t51237 + t51248) + t46105*(t50089*t50951 + t48250*t51232 + t51272 + t51279) + t46677*t51347) - 0.005186015558*(t48727*t51648 + t48687*(t50089*t50934 + t46677*t51232 + t51723 + t51840) + t46677*t52026 + t46105*(-1.*t50089*t50983 - 1.*t48727*t51232 + t52032 + t52109)) + 1.555781330428e-8*(t48687*(-1.*t50089*t50951 - 1.*t48250*t51232 + t52148 + t52303) + t48727*t52346 + t48250*t52380 + t48145*(t50089*t50983 + t48727*t51232 + t52413 + t52511)))*var2[4])*var2[8];
  p_output1[6]=(-0.5*(1.555781330428e-8*t53298 - 0.005186015558*t53429 - 1.5558e-8*t53605)*var2[0] - 0.5*(1.555781330428e-8*(-1.*t11018*t55375 + t46199*t55390) - 0.005186015558*(t46199*t55419 - 1.*t11018*t55441) - 1.5558e-8*(t46199*t55486 - 1.*t11018*t55515))*var2[1] - 0.5*(1.555781330428e-8*(t46199*t55375 + t11018*t55390) - 0.005186015558*(t11018*t55419 + t46199*t55441) - 1.5558e-8*(t11018*t55486 + t46199*t55515))*var2[2] - 0.5*(-0.00024500000000441*t53605 - 1.5558e-8*(t50435*t53298 + t50216*t53429 + t50312*(-1.*t50133*t53298 - 1.*t50171*t55375 + t55716 + t55789 - 1.*t49962*t56178 - 1.*t46801*t56226) + t49962*(t50133*t53429 + t50171*t55441 + t55807 + t55809 + t50312*t56178 + t48395*t56226)) - 0.005186015558*(t50728*t53298 + t50473*t53605 + t50538*(t50133*t53298 + t50171*t55375 + t55861 + t55866 + t49962*t56178 + t46801*t56226) + t49962*(-1.*t50133*t53605 - 1.*t50171*t55515 + t55913 + t55921 - 1.*t50538*t56178 - 1.*t48732*t56226)) + 1.555781330428e-8*(t50869*t53429 + t50774*t53605 + t50538*(-1.*t50133*t53429 - 1.*t50171*t55441 + t56019 + t56021 - 1.*t50312*t56178 - 1.*t48395*t56226) + t50312*(t50133*t53605 + t50171*t55515 + t56073 + t56102 + t50538*t56178 + t48732*t56226)))*var2[3] - 0.5*(-0.00024500000000441*t55486 - 1.5558e-8*(t51347*t55390 + t51219*t55419 + t48145*(-1.*t50089*t53278 + t54222 + t54676 + t55716 - 1.*t46677*t55756 + t55789) + t46105*(t50089*t53409 + t54757 + t54797 + t48250*t55756 + t55807 + t55809)) - 0.005186015558*(t52026*t55390 + t51648*t55486 + t48687*(t50089*t53278 + t55009 + t55016 + t46677*t55756 + t55861 + t55866) + t46105*(-1.*t50089*t53595 + t55071 + t55151 - 1.*t48727*t55756 + t55913 + t55921)) + 1.555781330428e-8*(t52380*t55419 + t52346*t55486 + t48687*(-1.*t50089*t53409 + t55185 + t55191 - 1.*t48250*t55756 + t56019 + t56021) + t48145*(t50089*t53595 + t55286 + t55308 + t48727*t55756 + t56073 + t56102)))*var2[4] - 0.5*(-0.00024500000000441*t53511 - 1.5558e-8*(t53316*t54191 + t48190*(-1.*t49789*t53206 - 1.*t49639*t53269 + t54222 - 1.*t46058*t54255 - 1.*t45848*t54594 + t54676) + t46770*(t49639*t53361 + t49789*t53383 + t47207*t54255 + t48103*t54594 + t54757 + t54797) + t53289*t54905) - 0.005186015558*(t53511*t54996 + t48715*(t49789*t53206 + t49639*t53269 + t46058*t54255 + t45848*t54594 + t55009 + t55016) + t53289*t55062 + t46770*(-1.*t49639*t53551 - 1.*t49789*t53581 - 1.*t48682*t54255 - 1.*t48619*t54594 + t55071 + t55151)) + 1.555781330428e-8*(t48715*(-1.*t49639*t53361 - 1.*t49789*t53383 - 1.*t47207*t54255 - 1.*t48103*t54594 + t55185 + t55191) + t53511*t55222 + t53316*t55256 + t48190*(t49639*t53551 + t49789*t53581 + t48682*t54255 + t48619*t54594 + t55286 + t55308)))*var2[5])*var2[8];
  p_output1[7]=0;
  p_output1[8]=(-0.5*(-1.5558e-8*t56661 - 0.005186015558*t56754 + 1.555781330428e-8*t56886)*var2[0] - 0.5*(-1.5558e-8*(t46199*t58490 - 1.*t11018*t58816) - 0.005186015558*(t46199*t58984 - 1.*t11018*t59209) + 1.555781330428e-8*(t46199*t59307 - 1.*t11018*t59408))*var2[1] - 0.5*(-1.5558e-8*(t11018*t58490 + t46199*t58816) - 0.005186015558*(t11018*t58984 + t46199*t59209) + 1.555781330428e-8*(t11018*t59307 + t46199*t59408))*var2[2] - 0.5*(-0.00024500000000441*t56661 - 1.5558e-8*(t50216*t56754 + t50435*t56886 + t50312*(-1.*t50133*t56886 - 1.*t50171*t59408 + t59836 + t59852 - 1.*t49962*t61055 - 1.*t46801*t61105) + t49962*(t50133*t56754 + t50171*t59209 + t59774 + t59808 + t50312*t61055 + t48395*t61105)) - 0.005186015558*(t50473*t56661 + t50728*t56886 + t50538*(t50133*t56886 + t50171*t59408 + t60080 + t60159 + t49962*t61055 + t46801*t61105) + t49962*(-1.*t50133*t56661 - 1.*t50171*t58816 + t60295 + t60405 - 1.*t50538*t61055 - 1.*t48732*t61105)) + 1.555781330428e-8*(t50774*t56661 + t50869*t56754 + t50538*(-1.*t50133*t56754 - 1.*t50171*t59209 + t60594 + t60598 - 1.*t50312*t61055 - 1.*t48395*t61105) + t50312*(t50133*t56661 + t50171*t58816 + t60698 + t60806 + t50538*t61055 + t48732*t61105)))*var2[3] - 0.5*(-0.00024500000000441*t58490 - 1.5558e-8*(t51219*t58984 + t51347*t59307 + t46105*(t50089*t56751 + t57136 + t57197 + t59774 + t48250*t59796 + t59808) + t48145*(-1.*t50089*t56880 + t57237 + t57241 - 1.*t46677*t59796 + t59836 + t59852)) - 0.005186015558*(t51648*t58490 + t52026*t59307 + t48687*(t50089*t56880 + t57252 + t57257 + t46677*t59796 + t60080 + t60159) + t46105*(-1.*t50089*t56625 + t57276 + t57357 - 1.*t48727*t59796 + t60295 + t60405)) + 1.555781330428e-8*(t52346*t58490 + t52380*t58984 + t48687*(-1.*t50089*t56751 + t57391 + t57394 - 1.*t48250*t59796 + t60594 + t60598) + t48145*(t50089*t56625 + t57418 + t57428 + t48727*t59796 + t60698 + t60806)))*var2[4] - 0.5*(-0.00024500000000441*t56653 - 1.5558e-8*(t54191*t56706 + t54905*t56780 + t46770*(t49789*t56737 + t49639*t56748 + t57136 + t47207*t57148 + t48103*t57195 + t57197) + t48190*(-1.*t49639*t56814 - 1.*t49789*t56855 - 1.*t46058*t57148 - 1.*t45848*t57195 + t57237 + t57241)) - 0.005186015558*(t54996*t56653 + t55062*t56780 + t48715*(t49639*t56814 + t49789*t56855 + t46058*t57148 + t45848*t57195 + t57252 + t57257) + t46770*(-1.*t49789*t56596 - 1.*t49639*t56621 - 1.*t48682*t57148 - 1.*t48619*t57195 + t57276 + t57357)) + 1.555781330428e-8*(t55222*t56653 + t55256*t56706 + t48715*(-1.*t49789*t56737 - 1.*t49639*t56748 - 1.*t47207*t57148 - 1.*t48103*t57195 + t57391 + t57394) + t48190*(t49789*t56596 + t49639*t56621 + t48682*t57148 + t48619*t57195 + t57418 + t57428)))*var2[5] - 0.5*(-0.00024500000000441*(1.8e-11*t41786 - 3.e-6*t56522 - 3.e-6*t56586 + t57479) - 1.5558e-8*(0.2*(2.7e-17*t41786 + t56519 - 3.e-6*t56551) - 1.*t56682*t57543 - 1.*t45755*t57588 - 1.*t56763*t57636 - 1.*t46824*t57674 - 3.e-6*(t56703*t57543 + t45307*t57588 + t56765*t57636 + t46818*t57674)) - 0.005186015558*(0.2*(t15117 + t56544 + t57479) - 1.*t56539*t57708 - 1.*t48453*t57774 - 1.*t56763*t57783 - 1.*t45755*t57821 - 3.e-6*(t56586*t57708 + t48606*t57774 + t56765*t57783 + t45307*t57821)) + 1.555781330428e-8*(0.2*(-1.000000000009*t41786 + t57479) - 1.*t48453*t57923 - 1.*t56539*t58122 - 1.*t56682*t58299 - 1.*t46824*t58340 - 3.e-6*(t48606*t57923 + t56586*t58122 + t56703*t58299 + t46818*t58340)))*var2[6])*var2[8];
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec9_minitaur.hh"

namespace FrontStance
{

void Ce3_vec9_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
