/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:10:40 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3676;
  double t12125;
  double t27851;
  double t29343;
  double t29344;
  double t31479;
  double t29345;
  double t29340;
  double t29347;
  double t30019;
  double t30318;
  double t2398;
  double t32802;
  double t33506;
  double t33509;
  double t33534;
  double t33624;
  double t34360;
  double t36684;
  double t37134;
  double t37395;
  double t37524;
  double t37564;
  double t37916;
  double t38054;
  double t38185;
  double t40449;
  double t40707;
  double t40742;
  double t39162;
  double t41559;
  double t41560;
  double t41561;
  double t41562;
  double t41557;
  double t41563;
  double t41569;
  double t41583;
  double t41586;
  double t41590;
  double t41593;
  double t41651;
  double t41652;
  double t41683;
  double t41684;
  double t41705;
  double t41712;
  double t41713;
  double t41715;
  double t41716;
  double t41686;
  double t41687;
  double t41688;
  double t41653;
  double t41655;
  double t41656;
  double t41657;
  double t41676;
  double t41677;
  double t41678;
  double t41681;
  double t41689;
  double t41691;
  double t41692;
  double t41693;
  double t41740;
  double t41741;
  double t41743;
  double t41724;
  double t41726;
  double t41730;
  double t41732;
  double t41733;
  double t41734;
  double t42528;
  double t42575;
  double t43500;
  double t43719;
  double t43769;
  double t43823;
  double t43833;
  double t43850;
  double t43896;
  double t43903;
  double t43910;
  double t43928;
  double t43944;
  double t43966;
  double t44321;
  double t44367;
  double t44368;
  double t44373;
  double t44385;
  double t44387;
  double t43864;
  double t43872;
  double t40704;
  double t40708;
  double t40775;
  double t40825;
  double t44700;
  double t44666;
  double t44722;
  double t44669;
  double t44670;
  double t44684;
  double t44695;
  double t44698;
  double t44699;
  double t44701;
  double t44706;
  double t44709;
  double t44713;
  double t44719;
  double t44725;
  double t44726;
  double t44727;
  double t44729;
  double t44732;
  double t44734;
  double t44735;
  double t44744;
  double t44746;
  double t41423;
  double t41430;
  double t41431;
  double t41437;
  double t44981;
  double t41463;
  double t41491;
  double t41504;
  double t41505;
  double t41558;
  double t41585;
  double t41597;
  double t41598;
  double t44962;
  double t44963;
  double t44964;
  double t44965;
  double t44664;
  double t44707;
  double t44728;
  double t44747;
  double t44758;
  double t44823;
  double t44871;
  double t44877;
  double t45039;
  double t45040;
  double t45048;
  double t45111;
  double t44896;
  double t44897;
  double t44908;
  double t44910;
  double t45117;
  double t45130;
  double t45131;
  double t45140;
  double t45143;
  double t44648;
  double t44660;
  double t44662;
  double t44663;
  double t44913;
  double t44918;
  double t44926;
  double t44939;
  double t44960;
  double t45232;
  double t45233;
  double t45245;
  double t45276;
  double t44885;
  double t44886;
  double t44887;
  double t44888;
  double t44889;
  double t45282;
  double t45283;
  double t45284;
  double t41609;
  double t41610;
  double t41611;
  double t41613;
  double t41615;
  double t41616;
  double t41639;
  double t41640;
  double t44973;
  double t44997;
  double t44998;
  double t44999;
  double t34431;
  double t45183;
  double t45184;
  double t45185;
  double t45190;
  double t45277;
  double t45285;
  double t45286;
  double t45287;
  double t30491;
  double t37572;
  double t37655;
  double t38036;
  double t38491;
  double t38552;
  double t38820;
  double t38846;
  double t38871;
  double t38878;
  double t38903;
  double t38935;
  double t39039;
  double t39164;
  double t39165;
  double t39317;
  double t40403;
  double t45303;
  double t45304;
  double t45306;
  double t45307;
  double t45310;
  double t45311;
  double t45312;
  double t45314;
  double t45323;
  double t45324;
  double t45326;
  double t41246;
  double t41443;
  double t41548;
  double t41549;
  double t41552;
  double t41553;
  double t45445;
  double t45474;
  double t45484;
  double t45492;
  double t45575;
  double t45591;
  double t45611;
  double t45613;
  double t46041;
  double t46058;
  double t46071;
  double t46073;
  double t46230;
  double t46276;
  double t46339;
  double t46481;
  double t41608;
  double t41614;
  double t41641;
  double t41643;
  double t41644;
  double t41645;
  double t44165;
  double t44268;
  double t44271;
  double t44300;
  double t44305;
  double t44525;
  double t44550;
  double t44551;
  double t44560;
  double t44591;
  double t44619;
  double t46691;
  double t46695;
  double t46696;
  double t46697;
  double t46701;
  double t46705;
  double t46716;
  double t46725;
  double t46750;
  double t46753;
  double t46754;
  double t46759;
  double t46770;
  double t46782;
  double t46793;
  double t46796;
  double t46814;
  double t46816;
  double t46817;
  double t46818;
  double t46821;
  double t46823;
  double t46824;
  double t46826;
  double t45309;
  double t45313;
  double t45327;
  double t45330;
  double t45378;
  double t45386;
  double t45983;
  double t45984;
  double t45985;
  double t45986;
  double t46029;
  double t46036;
  double t46485;
  double t46487;
  double t46489;
  double t46493;
  double t46495;
  double t46496;
  double t47207;
  double t47231;
  double t47232;
  double t47216;
  double t47222;
  double t47223;
  double t47235;
  double t47236;
  double t47246;
  double t47249;
  double t47250;
  double t47256;
  double t47265;
  double t47460;
  double t47473;
  double t47629;
  double t47716;
  double t47793;
  double t47819;
  double t47866;
  double t47888;
  double t47961;
  double t47981;
  double t48007;
  double t48011;
  double t48083;
  double t48084;
  double t48111;
  double t48134;
  double t48137;
  double t48140;
  double t48148;
  double t48154;
  double t48156;
  double t48163;
  double t48168;
  double t48169;
  double t48177;
  double t48181;
  double t48182;
  double t48186;
  double t48187;
  double t48192;
  double t48198;
  double t48199;
  double t48200;
  double t48208;
  double t48213;
  double t48217;
  double t48224;
  double t48225;
  double t48226;
  double t48229;
  double t48230;
  double t48231;
  double t48240;
  double t48241;
  double t48243;
  double t48246;
  double t48248;
  double t48253;
  double t42610;
  double t42691;
  double t48496;
  double t48497;
  double t48501;
  double t42221;
  double t48504;
  double t48507;
  double t48508;
  double t48511;
  double t48513;
  double t48517;
  double t41720;
  double t48569;
  double t48573;
  double t48575;
  double t48557;
  double t48558;
  double t48559;
  double t48553;
  double t48554;
  double t48555;
  double t48510;
  double t48521;
  double t48532;
  double t42027;
  double t41786;
  double t41723;
  double t41745;
  double t48734;
  double t48735;
  double t48736;
  double t48742;
  double t48745;
  double t48746;
  double t48737;
  double t48747;
  double t48748;
  double t46076;
  double t46125;
  double t46133;
  double t46201;
  double t48765;
  double t48768;
  double t48769;
  double t48780;
  double t48783;
  double t48785;
  double t48755;
  double t48756;
  double t48757;
  double t48840;
  double t48852;
  double t48853;
  double t45635;
  double t45806;
  double t48859;
  double t48861;
  double t48864;
  double t45880;
  double t45938;
  double t44777;
  double t45002;
  double t48871;
  double t48872;
  double t48873;
  double t48885;
  double t48886;
  double t48887;
  double t45292;
  double t45296;
  double t48542;
  double t49030;
  double t49033;
  double t49043;
  double t49045;
  double t49047;
  double t49048;
  double t48576;
  double t48593;
  double t48597;
  double t49086;
  double t49087;
  double t49088;
  double t49091;
  double t49092;
  double t49093;
  double t49101;
  double t49103;
  double t49106;
  double t48634;
  double t48671;
  double t49044;
  double t49051;
  double t49053;
  double t48677;
  double t48681;
  double t48688;
  double t48694;
  double t48700;
  double t48715;
  double t48726;
  double t48728;
  double t49203;
  double t49207;
  double t49208;
  double t49221;
  double t49226;
  double t49227;
  double t49210;
  double t49234;
  double t49251;
  double t48776;
  double t48794;
  double t48817;
  double t48821;
  double t49358;
  double t49364;
  double t49368;
  double t49386;
  double t49445;
  double t49446;
  double t49282;
  double t49284;
  double t49287;
  double t49507;
  double t49508;
  double t49513;
  double t48892;
  double t48897;
  double t49529;
  double t49532;
  double t49536;
  double t48906;
  double t48908;
  double t48924;
  double t48928;
  double t49553;
  double t49554;
  double t49565;
  double t49569;
  double t49574;
  double t49577;
  double t48958;
  double t49008;
  double t48435;
  double t48436;
  double t48438;
  double t48440;
  double t48442;
  double t48443;
  double t48488;
  double t48489;
  double t48491;
  double t41682;
  double t41694;
  double t41721;
  double t41722;
  double t41731;
  double t41739;
  double t41746;
  double t41754;
  double t41775;
  double t41785;
  double t41795;
  double t41814;
  double t41822;
  double t41890;
  double t42116;
  double t42181;
  double t42232;
  double t42233;
  double t42240;
  double t42510;
  double t42515;
  double t42897;
  double t43035;
  double t48366;
  double t48368;
  double t48370;
  double t48372;
  double t48377;
  double t48404;
  double t48408;
  double t48411;
  double t48413;
  double t44397;
  double t44401;
  double t44468;
  double t44513;
  double t48418;
  double t48421;
  double t48428;
  double t44895;
  double t44961;
  double t45112;
  double t45144;
  double t45145;
  double t45177;
  double t45217;
  double t45289;
  double t45290;
  double t45293;
  double t45294;
  double t45295;
  double t45299;
  double t45301;
  double t45302;
  double t48430;
  double t48431;
  double t48432;
  double t45396;
  double t45421;
  double t45425;
  double t45555;
  double t45617;
  double t45623;
  double t45632;
  double t45665;
  double t45755;
  double t45842;
  double t45848;
  double t45852;
  double t45863;
  double t45868;
  double t45870;
  double t45912;
  double t45918;
  double t45928;
  double t45940;
  double t45942;
  double t45949;
  double t48445;
  double t48447;
  double t48449;
  double t46075;
  double t46077;
  double t46105;
  double t46128;
  double t46129;
  double t46130;
  double t46131;
  double t46134;
  double t46199;
  double t46202;
  double t46203;
  double t46205;
  double t46229;
  double t46483;
  double t46484;
  double t48451;
  double t48453;
  double t48456;
  double t46593;
  double t46618;
  double t46627;
  double t46682;
  double t46699;
  double t46739;
  double t46740;
  double t46741;
  double t46742;
  double t46744;
  double t46745;
  double t46749;
  double t46760;
  double t46797;
  double t46801;
  double t46803;
  double t46804;
  double t46806;
  double t46810;
  double t46813;
  double t46819;
  double t46828;
  double t46829;
  double t46830;
  double t46835;
  double t46861;
  double t47071;
  double t48371;
  double t48405;
  double t48414;
  double t48429;
  double t48433;
  double t48439;
  double t48444;
  double t48450;
  double t48470;
  double t48493;
  double t48494;
  double t47703;
  double t47847;
  double t47848;
  double t47251;
  double t47267;
  double t47276;
  double t47975;
  double t48018;
  double t48023;
  double t47229;
  double t47240;
  double t47244;
  double t48159;
  double t48170;
  double t48171;
  double t48122;
  double t48142;
  double t48145;
  double t48207;
  double t48221;
  double t48222;
  double t48183;
  double t48194;
  double t48195;
  double t48245;
  double t48264;
  double t48276;
  double t48227;
  double t48235;
  double t48237;
  double t48541;
  double t48543;
  double t48545;
  double t48549;
  double t48551;
  double t48556;
  double t48564;
  double t48577;
  double t48583;
  double t48585;
  double t48594;
  double t48602;
  double t48606;
  double t48607;
  double t48612;
  double t48618;
  double t48619;
  double t48640;
  double t48652;
  double t48661;
  double t48663;
  double t48666;
  double t48670;
  double t48672;
  double t48673;
  double t48674;
  double t48675;
  double t48676;
  double t48679;
  double t48682;
  double t48685;
  double t48686;
  double t50218;
  double t50222;
  double t50223;
  double t48690;
  double t48692;
  double t48693;
  double t48697;
  double t48709;
  double t48711;
  double t48713;
  double t48717;
  double t48718;
  double t48721;
  double t48724;
  double t48727;
  double t48729;
  double t48730;
  double t48732;
  double t48762;
  double t48793;
  double t48811;
  double t48815;
  double t48816;
  double t48820;
  double t48822;
  double t48824;
  double t48826;
  double t48828;
  double t48829;
  double t48858;
  double t48865;
  double t48868;
  double t48876;
  double t48888;
  double t48889;
  double t48751;
  double t48759;
  double t48760;
  double t48891;
  double t48896;
  double t48899;
  double t48901;
  double t48903;
  double t48904;
  double t48905;
  double t48909;
  double t48911;
  double t48914;
  double t48919;
  double t48927;
  double t48929;
  double t48936;
  double t48939;
  double t48944;
  double t48947;
  double t48953;
  double t49009;
  double t49011;
  double t49018;
  double t49023;
  double t49063;
  double t49064;
  double t49068;
  double t49070;
  double t49073;
  double t49084;
  double t49090;
  double t49095;
  double t49097;
  double t49098;
  double t49107;
  double t49108;
  double t49111;
  double t49112;
  double t49113;
  double t49114;
  double t49116;
  double t49117;
  double t49119;
  double t49121;
  double t49123;
  double t49124;
  double t49126;
  double t49127;
  double t49130;
  double t49131;
  double t49135;
  double t49137;
  double t49138;
  double t49141;
  double t49142;
  double t49144;
  double t49148;
  double t49150;
  double t49151;
  double t49162;
  double t49165;
  double t49166;
  double t49167;
  double t49170;
  double t49171;
  double t49173;
  double t49174;
  double t49175;
  double t49177;
  double t49178;
  double t49179;
  double t49181;
  double t49182;
  double t49183;
  double t49185;
  double t49186;
  double t49187;
  double t49190;
  double t49191;
  double t49193;
  double t49194;
  double t49269;
  double t49289;
  double t49319;
  double t49354;
  double t49383;
  double t49448;
  double t49449;
  double t49454;
  double t49467;
  double t49472;
  double t49475;
  double t49480;
  double t49486;
  double t49487;
  double t49488;
  double t49491;
  double t49493;
  double t49495;
  double t49516;
  double t49540;
  double t49549;
  double t49567;
  double t49584;
  double t49596;
  double t49624;
  double t49651;
  double t49664;
  double t49667;
  double t49668;
  double t49673;
  double t49675;
  double t49794;
  double t49804;
  double t49817;
  double t49831;
  double t49872;
  double t49875;
  double t49911;
  double t49941;
  double t49984;
  double t50027;
  double t50028;
  double t50034;
  double t50042;
  double t50052;
  double t50055;
  double t50056;
  double t50057;
  double t50068;
  double t50069;
  double t50076;
  double t50089;
  double t50129;
  double t50133;
  double t47245;
  double t47401;
  double t47859;
  double t48063;
  double t48146;
  double t48172;
  double t48197;
  double t48223;
  double t48239;
  double t48289;
  double t48301;
  double t50353;
  double t50376;
  double t50384;
  double t50405;
  double t50416;
  double t50429;
  double t50435;
  double t50442;
  double t50449;
  double t50468;
  double t50492;
  double t50835;
  double t50850;
  double t50861;
  double t51628;
  double t49085;
  double t49118;
  double t49128;
  double t49163;
  double t49195;
  double t49325;
  double t49504;
  double t49550;
  double t49608;
  double t49955;
  double t50135;
  double t50146;
  double t51215;
  double t51220;
  double t51232;
  double t51234;
  double t51238;
  double t51252;
  double t51266;
  double t51277;
  double t51279;
  double t51280;
  double t51282;
  double t51283;
  double t50708;
  double t50717;
  double t50728;
  double t50729;
  double t50731;
  double t50732;
  double t50734;
  double t50735;
  double t50751;
  double t50752;
  double t50753;
  double t50754;
  double t51473;
  double t51477;
  double t51487;
  double t51838;
  double t51844;
  double t51846;
  double t51512;
  double t51528;
  double t51550;
  double t51629;
  double t51630;
  double t51643;
  double t51645;
  double t51650;
  double t51654;
  double t51666;
  double t51670;
  double t51672;
  double t48552;
  double t48615;
  double t48664;
  double t48687;
  double t48733;
  double t48761;
  double t48838;
  double t48869;
  double t48890;
  double t48923;
  double t49025;
  double t49028;
  double t51128;
  double t51152;
  double t51167;
  double t51170;
  double t51174;
  double t51179;
  double t51183;
  double t51185;
  double t51186;
  double t51189;
  double t51190;
  double t51206;
  double t50593;
  double t50599;
  double t50617;
  double t50618;
  double t50621;
  double t50624;
  double t50627;
  double t50629;
  double t50631;
  double t50643;
  double t50683;
  double t50695;
  double t51768;
  double t51779;
  double t51784;
  double t51801;
  double t51803;
  double t51805;
  double t51812;
  double t51817;
  double t51818;
  double t51820;
  double t51822;
  double t51823;
  double t51825;
  double t51828;
  double t51829;
  double t51881;
  double t51888;
  double t51898;
  double t51900;
  double t51902;
  double t51904;
  double t51912;
  double t51919;
  double t42720;
  double t43863;
  double t43892;
  double t44306;
  double t44389;
  double t44523;
  double t44644;
  double t45387;
  double t45435;
  double t45624;
  double t46039;
  double t46559;
  double t46628;
  double t46635;
  double t50884;
  double t50900;
  double t50901;
  double t50923;
  double t50931;
  double t50932;
  double t50983;
  double t50985;
  double t50993;
  double t50997;
  double t51000;
  double t51019;
  double t51027;
  double t51030;
  double t50240;
  double t50242;
  double t50245;
  double t50246;
  double t50250;
  double t50251;
  double t50253;
  double t50254;
  double t50256;
  double t50259;
  double t50261;
  double t50268;
  double t50279;
  double t50286;
  double t52061;
  double t52069;
  double t52070;
  double t52071;
  double t52072;
  double t52075;
  double t52078;
  double t52088;
  double t52133;
  double t52137;
  double t52150;
  double t52151;
  double t52184;
  double t52187;
  double t52189;
  double t52190;
  double t52193;
  double t52203;
  double t52204;
  double t52212;
  double t52226;
  double t52227;
  double t52230;
  double t52257;
  double t52259;
  double t51365;
  double t51371;
  double t51396;
  double t51399;
  double t51424;
  double t51428;
  double t51431;
  double t51450;
  double t51458;
  double t51462;
  double t51466;
  double t51469;
  double t51472;
  double t51493;
  double t51496;
  double t51499;
  double t51501;
  double t51553;
  double t51562;
  double t51569;
  double t51571;
  double t51572;
  double t51573;
  double t51575;
  double t51584;
  double t52850;
  double t52853;
  double t52869;
  double t52898;
  double t52900;
  double t52909;
  double t52914;
  double t52940;
  double t52955;
  double t52976;
  double t52978;
  double t46670;
  double t46671;
  double t46747;
  double t46812;
  double t47072;
  double t47073;
  double t51032;
  double t51046;
  double t51047;
  double t51049;
  double t51067;
  double t51074;
  double t50292;
  double t50295;
  double t50312;
  double t50320;
  double t50322;
  double t50335;
  double t52267;
  double t52271;
  double t52274;
  double t52289;
  double t52292;
  double t52295;
  double t52296;
  double t52298;
  double t52306;
  double t51635;
  double t51647;
  double t51673;
  double t51696;
  double t51700;
  double t51726;
  double t51733;
  double t51735;
  double t51740;
  double t52599;
  double t52626;
  double t52628;
  double t52645;
  double t52653;
  double t40448;
  double t41554;
  double t41647;
  double t41648;
  double t50797;
  double t50802;
  double t50805;
  double t50816;
  double t50177;
  double t50193;
  double t50210;
  double t50214;
  double t52006;
  double t52019;
  double t52026;
  double t52029;
  double t52031;
  double t51344;
  double t51347;
  double t51350;
  double t51351;
  double t51352;
  t3676 = Cos(var1[12]);
  t12125 = -1.*t3676;
  t27851 = 1. + t12125;
  t29343 = 3.e-6*t27851;
  t29344 = Sin(var1[12]);
  t31479 = Cos(var1[10]);
  t29345 = 3.e-6*t29344;
  t29340 = 1.000000000009*t27851;
  t29347 = t29343 + t29345;
  t30019 = 3.e-6*t29347;
  t30318 = -1. + t29340 + t30019;
  t2398 = Sin(var1[10]);
  t32802 = -9.e-12*t27851;
  t33506 = -3.e-6*t29344;
  t33509 = t29343 + t33506;
  t33534 = 3.e-6*t33509;
  t33624 = -1.*t29344;
  t34360 = t32802 + t33534 + t33624;
  t36684 = -1.8e-11*t27851;
  t37134 = 1. + t36684;
  t37395 = 3.e-6*t37134;
  t37524 = -3.e-6*t27851;
  t37564 = t37395 + t37524 + t29345;
  t37916 = Sin(var1[4]);
  t38054 = Cos(var1[4]);
  t38185 = Cos(var1[5]);
  t40449 = -1. + t29340 + t33534;
  t40707 = t37395 + t37524 + t33506;
  t40742 = t32802 + t30019 + t29344;
  t39162 = Sin(var1[5]);
  t41559 = -1.000000000009*t27851;
  t41560 = 1. + t41559;
  t41561 = 3.e-6*t41560;
  t41562 = 9.e-12*t27851;
  t41557 = 1. + t36684 + t33534 + t30019;
  t41563 = t41562 + t33624;
  t41569 = 3.e-6*t41563;
  t41583 = t41561 + t29343 + t41569 + t29345;
  t41586 = t41562 + t29344;
  t41590 = 3.e-6*t41586;
  t41593 = t41561 + t29343 + t33506 + t41590;
  t41651 = -1.*t31479;
  t41652 = 1. + t41651;
  t41683 = -9.e-12*t41652;
  t41684 = 1. + t41683;
  t41705 = -1.000000000009*t41652;
  t41712 = 1. + t41705;
  t41713 = 0.05*t41712;
  t41715 = -2.999982e-7*t2398;
  t41716 = t41713 + t41715;
  t41686 = 3.e-6*t41684;
  t41687 = -3.e-6*t41652;
  t41688 = t41686 + t41687;
  t41653 = 9.e-12*t41652;
  t41655 = t41653 + t41651;
  t41656 = 2.999982e-7*t41652;
  t41657 = -1. + t31479;
  t41676 = 0.2*t41657;
  t41677 = -0.2*t31479;
  t41678 = -0.05*t2398;
  t41681 = t41656 + t41676 + t41677 + t41678;
  t41689 = 0.1*t41684;
  t41691 = 5.4e-18*t41652;
  t41692 = 1.5e-7*t2398;
  t41693 = t41689 + t41691 + t41692;
  t41740 = -2.999982e-7*t31479;
  t41741 = -0.05000000000045*t2398;
  t41743 = t41740 + t41741;
  t41724 = 1.5e-7*t31479;
  t41726 = -8.999946e-13*t2398;
  t41730 = t41724 + t41726;
  t41732 = -0.05*t31479;
  t41733 = 2.999982e-7*t2398;
  t41734 = t41732 + t41733;
  t42528 = -3.e-6*t31479;
  t42575 = t41687 + t42528;
  t43500 = -1.000000000009*t2398*t37916;
  t43719 = t41655*t38185;
  t43769 = -1.*t41688*t39162;
  t43823 = t43719 + t43769;
  t43833 = t38054*t43823;
  t43850 = t43500 + t43833;
  t43896 = -1. + t41653;
  t43903 = 0.1*t43896;
  t43910 = -5.4e-18*t41652;
  t43928 = t42575*t41681;
  t43944 = -1.5e-7*t2398;
  t43966 = t43903 + t43910 + t43928 + t43944;
  t44321 = t41712*t37916;
  t44367 = -1.*t38185*t2398;
  t44368 = -3.e-6*t2398*t39162;
  t44373 = t44367 + t44368;
  t44385 = t38054*t44373;
  t44387 = t44321 + t44385;
  t43864 = -1.*t42575*t41681;
  t43872 = t41689 + t41691 + t43864 + t41692;
  t40704 = t31479*t40449;
  t40708 = -3.e-6*t31479*t40707;
  t40775 = -1.000000000009*t2398*t40742;
  t40825 = t40704 + t40708 + t40775;
  t44700 = t37524 + t29345;
  t44666 = 3.e-13*var1[12];
  t44722 = t37524 + t33506;
  t44669 = -1. + t29340;
  t44670 = 0.2*t44669;
  t44684 = -0.2000000000048*t27851;
  t44695 = t32802 + t33624;
  t44698 = 0.100000000003*t44695;
  t44699 = 0.1*t33509;
  t44701 = 3.e-7*t44700;
  t44706 = t44666 + t44670 + t44684 + t44698 + t44699 + t44701;
  t44709 = 1.e-7*var1[12];
  t44713 = 0.1*t37134;
  t44719 = 5.4e-18*t27851;
  t44725 = -3.e-12*t44722;
  t44726 = 0.100000000003*t44700;
  t44727 = t44709 + t44713 + t44719 + t44725 + t44726;
  t44729 = 0.1000000000039*t27851;
  t44732 = 3.e-7*t44722;
  t44734 = 0.1*t29347;
  t44735 = t32802 + t29344;
  t44744 = -3.e-12*t44735;
  t44746 = t44666 + t44729 + t44732 + t44734 + t44744;
  t41423 = -1.*t2398*t40449;
  t41430 = 3.e-6*t2398*t40707;
  t41431 = -1.*t31479*t40742;
  t41437 = t41423 + t41430 + t41431;
  t44981 = t31479*t44706;
  t41463 = 3.e-6*t2398*t40449;
  t41491 = -9.e-12*t2398*t40707;
  t41504 = 3.e-6*t31479*t40742;
  t41505 = t41463 + t41491 + t41504;
  t41558 = -3.e-6*t31479*t41557;
  t41585 = -1.000000000009*t2398*t41583;
  t41597 = t31479*t41593;
  t41598 = t41558 + t41585 + t41597;
  t44962 = t2398*t40449;
  t44963 = -3.e-6*t2398*t40707;
  t44964 = t41712*t40742;
  t44965 = t44962 + t44963 + t44964;
  t44664 = 0.2000000000018*t2398;
  t44707 = t2398*t44706;
  t44728 = -3.e-6*t2398*t44727;
  t44747 = t41712*t44746;
  t44758 = t44664 + t44707 + t44728 + t44747;
  t44823 = 3.e-6*t41652*t40707;
  t44871 = -1.*t2398*t40742;
  t44877 = t40704 + t44823 + t44871;
  t45039 = -1.8e-12*t41652;
  t45040 = 3.e-6*t41652*t44727;
  t45048 = -1.*t2398*t44746;
  t45111 = t45039 + t41676 + t44981 + t45040 + t45048;
  t44896 = 3.e-6*t41652*t40449;
  t44897 = t41684*t40707;
  t44908 = 3.e-6*t2398*t40742;
  t44910 = t44896 + t44897 + t44908;
  t45117 = 6.000000000054e-7*t41652;
  t45130 = 3.e-6*t41652*t44706;
  t45131 = t41684*t44727;
  t45140 = 3.e-6*t2398*t44746;
  t45143 = t45117 + t45130 + t45131 + t45140;
  t44648 = -3.e-6*t2398*t41557;
  t44660 = t41712*t41583;
  t44662 = t2398*t41593;
  t44663 = t44648 + t44660 + t44662;
  t44913 = 6.000000000054e-7*t2398;
  t44918 = 3.e-6*t2398*t44706;
  t44926 = -9.e-12*t2398*t44727;
  t44939 = 3.e-6*t31479*t44746;
  t44960 = t44913 + t44918 + t44926 + t44939;
  t45232 = t41684*t41557;
  t45233 = 3.e-6*t2398*t41583;
  t45245 = 3.e-6*t41652*t41593;
  t45276 = t45232 + t45233 + t45245;
  t44885 = -0.2000000000018*t2398;
  t44886 = -1.*t2398*t44706;
  t44887 = 3.e-6*t2398*t44727;
  t44888 = -1.*t31479*t44746;
  t44889 = t44885 + t44886 + t44887 + t44888;
  t45282 = 3.e-6*t41652*t41557;
  t45283 = -1.*t2398*t41583;
  t45284 = t45282 + t45283 + t41597;
  t41609 = 3.e-6*t2398*t41557;
  t41610 = -1.*t31479*t41583;
  t41611 = -1.*t2398*t41593;
  t41613 = t41609 + t41610 + t41611;
  t41615 = -9.e-12*t2398*t41557;
  t41616 = 3.e-6*t31479*t41583;
  t41639 = 3.e-6*t2398*t41593;
  t41640 = t41615 + t41616 + t41639;
  t44973 = 0.2000000000018*t31479;
  t44997 = -3.e-6*t31479*t44727;
  t44998 = -1.000000000009*t2398*t44746;
  t44999 = t44973 + t44981 + t44997 + t44998;
  t34431 = t31479*t34360;
  t45183 = -1.*t44965*t44758;
  t45184 = -1.*t44877*t45111;
  t45185 = -1.*t44910*t45143;
  t45190 = t45183 + t45184 + t45185;
  t45277 = t45143*t45276;
  t45285 = t45111*t45284;
  t45286 = t44758*t44663;
  t45287 = t45277 + t45285 + t45286;
  t30491 = -1.000000000009*t2398*t30318;
  t37572 = -3.e-6*t31479*t37564;
  t37655 = t30491 + t34431 + t37572;
  t38036 = t37655*t37916;
  t38491 = -1.*t31479*t30318;
  t38552 = -1.*t2398*t34360;
  t38820 = 3.e-6*t2398*t37564;
  t38846 = t38491 + t38552 + t38820;
  t38871 = t38185*t38846;
  t38878 = 3.e-6*t31479*t30318;
  t38903 = 3.e-6*t2398*t34360;
  t38935 = -9.e-12*t2398*t37564;
  t39039 = t38878 + t38903 + t38935;
  t39164 = -1.*t39039*t39162;
  t39165 = t38871 + t39164;
  t39317 = t38054*t39165;
  t40403 = t38036 + t39317;
  t45303 = t41712*t30318;
  t45304 = t2398*t34360;
  t45306 = -3.e-6*t2398*t37564;
  t45307 = t45303 + t45304 + t45306;
  t45310 = -1.*t2398*t30318;
  t45311 = 3.e-6*t41652*t37564;
  t45312 = t45310 + t34431 + t45311;
  t45314 = 3.e-6*t2398*t30318;
  t45323 = 3.e-6*t41652*t34360;
  t45324 = t41684*t37564;
  t45326 = t45314 + t45323 + t45324;
  t41246 = t40825*t37916;
  t41443 = t38185*t41437;
  t41548 = -1.*t41505*t39162;
  t41549 = t41443 + t41548;
  t41552 = t38054*t41549;
  t41553 = t41246 + t41552;
  t45445 = t45307*t44758;
  t45474 = t45312*t45111;
  t45484 = t45326*t45143;
  t45492 = t45445 + t45474 + t45484;
  t45575 = -1.*t45143*t45276;
  t45591 = -1.*t45111*t45284;
  t45611 = -1.*t44758*t44663;
  t45613 = t45575 + t45591 + t45611;
  t46041 = -1.*t45307*t44758;
  t46058 = -1.*t45312*t45111;
  t46071 = -1.*t45326*t45143;
  t46073 = t46041 + t46058 + t46071;
  t46230 = t44965*t44758;
  t46276 = t44877*t45111;
  t46339 = t44910*t45143;
  t46481 = t46230 + t46276 + t46339;
  t41608 = t41598*t37916;
  t41614 = t38185*t41613;
  t41641 = -1.*t41640*t39162;
  t41643 = t41614 + t41641;
  t41644 = t38054*t41643;
  t41645 = t41608 + t41644;
  t44165 = -1.*t31479*t38185;
  t44268 = -3.e-6*t31479*t39162;
  t44271 = t44165 + t44268;
  t44300 = t38054*t44271;
  t44305 = t43500 + t44300;
  t44525 = -1.000000000009*t31479*t37916;
  t44550 = 1.000000000009*t38185*t2398;
  t44551 = 3.000000000027e-6*t2398*t39162;
  t44560 = t44550 + t44551;
  t44591 = t38054*t44560;
  t44619 = t44525 + t44591;
  t46691 = -1.*t40449*t44706;
  t46695 = -1.*t44727*t40707;
  t46696 = -1.*t40742*t44746;
  t46697 = t46691 + t46695 + t46696;
  t46701 = t44727*t41557;
  t46705 = t41583*t44746;
  t46716 = t44706*t41593;
  t46725 = t46701 + t46705 + t46716;
  t46750 = t44706*t34360;
  t46753 = t44727*t37564;
  t46754 = t30318*t44746;
  t46759 = t46750 + t46753 + t46754;
  t46770 = -1.*t44727*t41557;
  t46782 = -1.*t41583*t44746;
  t46793 = -1.*t44706*t41593;
  t46796 = t46770 + t46782 + t46793;
  t46814 = -1.*t44706*t34360;
  t46816 = -1.*t44727*t37564;
  t46817 = -1.*t30318*t44746;
  t46818 = t46814 + t46816 + t46817;
  t46821 = t40449*t44706;
  t46823 = t44727*t40707;
  t46824 = t40742*t44746;
  t46826 = t46821 + t46823 + t46824;
  t45309 = t45307*t37916;
  t45313 = t38185*t45312;
  t45327 = -1.*t45326*t39162;
  t45330 = t45313 + t45327;
  t45378 = t38054*t45330;
  t45386 = t45309 + t45378;
  t45983 = t44965*t37916;
  t45984 = t38185*t44877;
  t45985 = -1.*t44910*t39162;
  t45986 = t45984 + t45985;
  t46029 = t38054*t45986;
  t46036 = t45983 + t46029;
  t46485 = t44663*t37916;
  t46487 = t38185*t45284;
  t46489 = -1.*t45276*t39162;
  t46493 = t46487 + t46489;
  t46495 = t38054*t46493;
  t46496 = t46485 + t46495;
  t47207 = Sin(var1[3]);
  t47231 = Cos(var1[3]);
  t47232 = -1.000000000009*t38054*t2398;
  t47216 = t41688*t38185;
  t47222 = t41655*t39162;
  t47223 = t47216 + t47222;
  t47235 = -1.*t37916*t43823;
  t47236 = t47232 + t47235;
  t47246 = 3.e-6*t31479*t38185;
  t47249 = -1.*t31479*t39162;
  t47250 = t47246 + t47249;
  t47256 = -1.*t37916*t44271;
  t47265 = t47232 + t47256;
  t47460 = 3.e-6*t38185*t2398;
  t47473 = -1.*t2398*t39162;
  t47629 = t47460 + t47473;
  t47716 = t41712*t38054;
  t47793 = -1.*t37916*t44373;
  t47819 = t47716 + t47793;
  t47866 = -3.000000000027e-6*t38185*t2398;
  t47888 = 1.000000000009*t2398*t39162;
  t47961 = t47866 + t47888;
  t47981 = -1.000000000009*t31479*t38054;
  t48007 = -1.*t37916*t44560;
  t48011 = t47981 + t48007;
  t48083 = t38185*t45326;
  t48084 = t45312*t39162;
  t48111 = t48083 + t48084;
  t48134 = t38054*t45307;
  t48137 = -1.*t37916*t45330;
  t48140 = t48134 + t48137;
  t48148 = t38185*t39039;
  t48154 = t38846*t39162;
  t48156 = t48148 + t48154;
  t48163 = t38054*t37655;
  t48168 = -1.*t37916*t39165;
  t48169 = t48163 + t48168;
  t48177 = t38185*t41505;
  t48181 = t41437*t39162;
  t48182 = t48177 + t48181;
  t48186 = t38054*t40825;
  t48187 = -1.*t37916*t41549;
  t48192 = t48186 + t48187;
  t48198 = t38185*t44910;
  t48199 = t44877*t39162;
  t48200 = t48198 + t48199;
  t48208 = t38054*t44965;
  t48213 = -1.*t37916*t45986;
  t48217 = t48208 + t48213;
  t48224 = t38185*t45276;
  t48225 = t45284*t39162;
  t48226 = t48224 + t48225;
  t48229 = t38054*t44663;
  t48230 = -1.*t37916*t46493;
  t48231 = t48229 + t48230;
  t48240 = t38185*t41640;
  t48241 = t41613*t39162;
  t48243 = t48240 + t48241;
  t48246 = t38054*t41598;
  t48248 = -1.*t37916*t41643;
  t48253 = t48246 + t48248;
  t42610 = t42575*t38185;
  t42691 = t42610 + t39162;
  t48496 = -1.*t38185;
  t48497 = t42575*t39162;
  t48501 = t48496 + t48497;
  t42221 = 1.000000000009*t41716*t2398;
  t48504 = t38185*t41693;
  t48507 = t41681*t39162;
  t48508 = t48504 + t48507;
  t48511 = t38185*t41681;
  t48513 = -1.*t41693*t39162;
  t48517 = t48511 + t48513;
  t41720 = -1.000000000009*t41716*t2398;
  t48569 = t38185*t41730;
  t48573 = t41734*t39162;
  t48575 = t48569 + t48573;
  t48557 = t38185*t41734;
  t48558 = -1.*t41730*t39162;
  t48559 = t48557 + t48558;
  t48553 = -1.*t48501*t48508;
  t48554 = -1.*t42691*t48517;
  t48555 = t48553 + t48554;
  t48510 = t48501*t48508;
  t48521 = t42691*t48517;
  t48532 = t48510 + t48521;
  t42027 = -1.*t41712*t41743;
  t41786 = -1.*t41712*t41716;
  t41723 = -1.000000000009*t31479*t41716;
  t41745 = -1.000000000009*t41743*t2398;
  t48734 = t38185*t45143;
  t48735 = t45111*t39162;
  t48736 = t48734 + t48735;
  t48742 = t38185*t45111;
  t48745 = -1.*t45143*t39162;
  t48746 = t48742 + t48745;
  t48737 = -1.*t48111*t48736;
  t48747 = -1.*t45330*t48746;
  t48748 = t46041 + t48737 + t48747;
  t46076 = -1.*t37655*t44758;
  t46125 = -1.*t45307*t44999;
  t46133 = t40825*t44758;
  t46201 = t44965*t44999;
  t48765 = t38185*t44960;
  t48768 = t44889*t39162;
  t48769 = t48765 + t48768;
  t48780 = t38185*t44889;
  t48783 = -1.*t44960*t39162;
  t48785 = t48780 + t48783;
  t48755 = t48200*t48736;
  t48756 = t45986*t48746;
  t48757 = t46230 + t48755 + t48756;
  t48840 = t48111*t48736;
  t48852 = t45330*t48746;
  t48853 = t45445 + t48840 + t48852;
  t45635 = t37655*t44758;
  t45806 = t45307*t44999;
  t48859 = -1.*t48746*t46493;
  t48861 = -1.*t48736*t48226;
  t48864 = t45611 + t48859 + t48861;
  t45880 = -1.*t44758*t41598;
  t45938 = -1.*t44999*t44663;
  t44777 = -1.*t40825*t44758;
  t45002 = -1.*t44965*t44999;
  t48871 = -1.*t48200*t48736;
  t48872 = -1.*t45986*t48746;
  t48873 = t45183 + t48871 + t48872;
  t48885 = t48746*t46493;
  t48886 = t48736*t48226;
  t48887 = t45286 + t48885 + t48886;
  t45292 = t44758*t41598;
  t45296 = t44999*t44663;
  t48542 = -1.*t47223*t48508;
  t49030 = t41716*t37916;
  t49033 = t38054*t48517;
  t49043 = t49030 + t49033;
  t49045 = t38054*t41716;
  t49047 = -1.*t37916*t48517;
  t49048 = t49045 + t49047;
  t48576 = -1.*t48501*t48575;
  t48593 = t47250*t48508;
  t48597 = t48575*t47629;
  t49086 = t41743*t37916;
  t49087 = t38054*t48559;
  t49088 = t49086 + t49087;
  t49091 = t38054*t41743;
  t49092 = -1.*t37916*t48559;
  t49093 = t49091 + t49092;
  t49101 = -1.*t38054*t42691*t49043;
  t49103 = t37916*t42691*t49048;
  t49106 = t48553 + t49101 + t49103;
  t48634 = t48508*t47629;
  t48671 = t48501*t48575;
  t49044 = t38054*t42691*t49043;
  t49051 = -1.*t37916*t42691*t49048;
  t49053 = t48510 + t49044 + t49051;
  t48677 = -1.*t47223*t48575;
  t48681 = -1.*t48508*t47961;
  t48688 = t47223*t48508;
  t48694 = -1.*t47250*t48508;
  t48700 = -1.*t48575*t47629;
  t48715 = -1.*t48508*t47629;
  t48726 = t47223*t48575;
  t48728 = t48508*t47961;
  t49203 = t44758*t37916;
  t49207 = t38054*t48746;
  t49208 = t49203 + t49207;
  t49221 = t38054*t44758;
  t49226 = -1.*t37916*t48746;
  t49227 = t49221 + t49226;
  t49210 = -1.*t45386*t49208;
  t49234 = -1.*t48140*t49227;
  t49251 = t48737 + t49210 + t49234;
  t48776 = -1.*t48111*t48769;
  t48794 = -1.*t48156*t48736;
  t48817 = t48200*t48769;
  t48821 = t48182*t48736;
  t49358 = t44999*t37916;
  t49364 = t38054*t48785;
  t49368 = t49358 + t49364;
  t49386 = t38054*t44999;
  t49445 = -1.*t37916*t48785;
  t49446 = t49386 + t49445;
  t49282 = t46036*t49208;
  t49284 = t48217*t49227;
  t49287 = t48755 + t49282 + t49284;
  t49507 = t45386*t49208;
  t49508 = t48140*t49227;
  t49513 = t48840 + t49507 + t49508;
  t48892 = t48111*t48769;
  t48897 = t48156*t48736;
  t49529 = -1.*t49208*t46496;
  t49532 = -1.*t49227*t48231;
  t49536 = t48861 + t49529 + t49532;
  t48906 = -1.*t48769*t48226;
  t48908 = -1.*t48736*t48243;
  t48924 = -1.*t48200*t48769;
  t48928 = -1.*t48182*t48736;
  t49553 = -1.*t46036*t49208;
  t49554 = -1.*t48217*t49227;
  t49565 = t48871 + t49553 + t49554;
  t49569 = t49208*t46496;
  t49574 = t49227*t48231;
  t49577 = t48886 + t49569 + t49574;
  t48958 = t48769*t48226;
  t49008 = t48736*t48243;
  t48435 = t47231*t48156;
  t48436 = -1.*t47207*t48169;
  t48438 = t48435 + t48436;
  t48440 = t47231*t48182;
  t48442 = -1.*t47207*t48192;
  t48443 = t48440 + t48442;
  t48488 = t47231*t48243;
  t48489 = -1.*t47207*t48253;
  t48491 = t48488 + t48489;
  t41682 = t41655*t41681;
  t41694 = t41688*t41693;
  t41721 = t41682 + t41694 + t41720;
  t41722 = -1.000000000009*t2398*t41721;
  t41731 = t41688*t41730;
  t41739 = t41655*t41734;
  t41746 = 1.000000000009*t41681*t2398;
  t41754 = -3.000000000027e-6*t41693*t2398;
  t41775 = t41723 + t41731 + t41739 + t41745 + t41746 + t41754;
  t41785 = t41712*t41775;
  t41795 = t41681*t2398;
  t41814 = -3.e-6*t41693*t2398;
  t41822 = t41786 + t41795 + t41814;
  t41890 = -1.000000000009*t31479*t41822;
  t42116 = t31479*t41681;
  t42181 = -3.e-6*t31479*t41693;
  t42232 = -3.e-6*t41730*t2398;
  t42233 = t41734*t2398;
  t42240 = t42027 + t42116 + t42181 + t42221 + t42232 + t42233;
  t42510 = -1.000000000009*t2398*t42240;
  t42515 = t41722 + t41785 + t41890 + t42510;
  t42897 = -1.*t42575*t41734;
  t43035 = t41724 + t42897 + t41726;
  t48366 = t47231*t47223;
  t48368 = -1.*t47207*t47236;
  t48370 = t48366 + t48368;
  t48372 = t47231*t47250;
  t48377 = -1.*t47207*t47265;
  t48404 = t48372 + t48377;
  t48408 = t47231*t47629;
  t48411 = -1.*t47207*t47819;
  t48413 = t48408 + t48411;
  t44397 = -1.5e-7*t31479;
  t44401 = t42575*t41734;
  t44468 = 8.999946e-13*t2398;
  t44513 = t44397 + t44401 + t44468;
  t48418 = t47231*t47961;
  t48421 = -1.*t47207*t48011;
  t48428 = t48418 + t48421;
  t44895 = -1.*t44877*t44889;
  t44961 = -1.*t44910*t44960;
  t45112 = -1.*t41437*t45111;
  t45144 = -1.*t41505*t45143;
  t45145 = t44777 + t44895 + t44961 + t45002 + t45112 + t45144;
  t45177 = t44663*t45145;
  t45217 = t41598*t45190;
  t45289 = t40825*t45287;
  t45290 = t44960*t45276;
  t45293 = t44889*t45284;
  t45294 = t45111*t41613;
  t45295 = t45143*t41640;
  t45299 = t45290 + t45292 + t45293 + t45294 + t45295 + t45296;
  t45301 = t44965*t45299;
  t45302 = t45177 + t45217 + t45289 + t45301;
  t48430 = t47231*t48111;
  t48431 = -1.*t47207*t48140;
  t48432 = t48430 + t48431;
  t45396 = t44663*t45190;
  t45421 = t44965*t45287;
  t45425 = t45396 + t45421;
  t45555 = t44663*t45492;
  t45617 = t45307*t45613;
  t45623 = t45555 + t45617;
  t45632 = t41598*t45492;
  t45665 = t45312*t44889;
  t45755 = t45326*t44960;
  t45842 = t38846*t45111;
  t45848 = t39039*t45143;
  t45852 = t45635 + t45665 + t45755 + t45806 + t45842 + t45848;
  t45863 = t44663*t45852;
  t45868 = t37655*t45613;
  t45870 = -1.*t44960*t45276;
  t45912 = -1.*t44889*t45284;
  t45918 = -1.*t45111*t41613;
  t45928 = -1.*t45143*t41640;
  t45940 = t45870 + t45880 + t45912 + t45918 + t45928 + t45938;
  t45942 = t45307*t45940;
  t45949 = t45632 + t45863 + t45868 + t45942;
  t48445 = t47231*t48200;
  t48447 = -1.*t47207*t48217;
  t48449 = t48445 + t48447;
  t46075 = t40825*t46073;
  t46077 = -1.*t45312*t44889;
  t46105 = -1.*t45326*t44960;
  t46128 = -1.*t38846*t45111;
  t46129 = -1.*t39039*t45143;
  t46130 = t46076 + t46077 + t46105 + t46125 + t46128 + t46129;
  t46131 = t44965*t46130;
  t46134 = t44877*t44889;
  t46199 = t44910*t44960;
  t46202 = t41437*t45111;
  t46203 = t41505*t45143;
  t46205 = t46133 + t46134 + t46199 + t46201 + t46202 + t46203;
  t46229 = t45307*t46205;
  t46483 = t37655*t46481;
  t46484 = t46075 + t46131 + t46229 + t46483;
  t48451 = t47231*t48226;
  t48453 = -1.*t47207*t48231;
  t48456 = t48451 + t48453;
  t46593 = t44965*t46073;
  t46618 = t45307*t46481;
  t46627 = t46593 + t46618;
  t46682 = 0.2*t30318;
  t46699 = -1.*t41557*t46697;
  t46739 = -1.*t40707*t46725;
  t46740 = t41593*t46697;
  t46741 = t40449*t46725;
  t46742 = t46740 + t46741;
  t46744 = -3.e-6*t46742;
  t46745 = t46682 + t46699 + t46739 + t46744;
  t46749 = 0.2*t40742;
  t46760 = -1.*t41557*t46759;
  t46797 = -1.*t37564*t46796;
  t46801 = t41593*t46759;
  t46803 = t34360*t46796;
  t46804 = t46801 + t46803;
  t46806 = -3.e-6*t46804;
  t46810 = t46749 + t46760 + t46797 + t46806;
  t46813 = 0.2*t41583;
  t46819 = -1.*t40707*t46818;
  t46828 = -1.*t37564*t46826;
  t46829 = t40449*t46818;
  t46830 = t34360*t46826;
  t46835 = t46829 + t46830;
  t46861 = -3.e-6*t46835;
  t47071 = t46813 + t46819 + t46828 + t46861;
  t48371 = 0.026*t44619*t48370;
  t48405 = 0.026*t44387*t48404;
  t48414 = 0.026*t44305*t48413;
  t48429 = 0.026*t43850*t48428;
  t48433 = 0.05186*t40403*t48432;
  t48439 = 0.05186*t45386*t48438;
  t48444 = 0.05186*t46036*t48443;
  t48450 = 0.05186*t41553*t48449;
  t48470 = 0.05186*t41645*t48456;
  t48493 = 0.05186*t46496*t48491;
  t48494 = t48371 + t48405 + t48414 + t48429 + t48433 + t48439 + t48444 + t48450 + t48470 + t48493;
  t47703 = t47207*t47629;
  t47847 = t47231*t47819;
  t47848 = t47703 + t47847;
  t47251 = t47207*t47250;
  t47267 = t47231*t47265;
  t47276 = t47251 + t47267;
  t47975 = t47207*t47961;
  t48018 = t47231*t48011;
  t48023 = t47975 + t48018;
  t47229 = t47207*t47223;
  t47240 = t47231*t47236;
  t47244 = t47229 + t47240;
  t48159 = t47207*t48156;
  t48170 = t47231*t48169;
  t48171 = t48159 + t48170;
  t48122 = t47207*t48111;
  t48142 = t47231*t48140;
  t48145 = t48122 + t48142;
  t48207 = t47207*t48200;
  t48221 = t47231*t48217;
  t48222 = t48207 + t48221;
  t48183 = t47207*t48182;
  t48194 = t47231*t48192;
  t48195 = t48183 + t48194;
  t48245 = t47207*t48243;
  t48264 = t47231*t48253;
  t48276 = t48245 + t48264;
  t48227 = t47207*t48226;
  t48235 = t47231*t48231;
  t48237 = t48227 + t48235;
  t48541 = t47223*t48532;
  t48543 = -1.*t43823*t48517;
  t48545 = t42221 + t48542 + t48543;
  t48549 = t48501*t48545;
  t48551 = t48541 + t48549;
  t48556 = t47250*t48555;
  t48564 = -1.*t42691*t48559;
  t48577 = t48564 + t48576;
  t48583 = t47629*t48577;
  t48585 = t41712*t41743;
  t48594 = t44271*t48517;
  t48602 = t48559*t44373;
  t48606 = t48585 + t41720 + t48593 + t48594 + t48597 + t48602;
  t48607 = t48501*t48606;
  t48612 = t48556 + t48583 + t48607;
  t48618 = t47629*t48555;
  t48619 = t41712*t41716;
  t48640 = t48517*t44373;
  t48652 = t48619 + t48634 + t48640;
  t48661 = t48501*t48652;
  t48663 = t48618 + t48661;
  t48666 = t47961*t48532;
  t48670 = t42691*t48559;
  t48672 = t48670 + t48671;
  t48673 = t47223*t48672;
  t48674 = 1.000000000009*t31479*t41716;
  t48675 = 1.000000000009*t41743*t2398;
  t48676 = -1.*t43823*t48559;
  t48679 = -1.*t48517*t44560;
  t48682 = t48674 + t48675 + t48676 + t48677 + t48679 + t48681;
  t48685 = t48501*t48682;
  t48686 = t48666 + t48673 + t48685;
  t50218 = t47207*t37916*t42691;
  t50222 = t47231*t48501;
  t50223 = t50218 + t50222;
  t48690 = t43823*t48517;
  t48692 = t41720 + t48688 + t48690;
  t48693 = t47250*t48692;
  t48697 = -1.*t44271*t48517;
  t48709 = -1.*t48559*t44373;
  t48711 = t42027 + t42221 + t48694 + t48697 + t48700 + t48709;
  t48713 = t47223*t48711;
  t48717 = -1.*t48517*t44373;
  t48718 = t41786 + t48715 + t48717;
  t48721 = t47961*t48718;
  t48724 = t43823*t48559;
  t48727 = t48517*t44560;
  t48729 = t41723 + t41745 + t48724 + t48726 + t48727 + t48728;
  t48730 = t47629*t48729;
  t48732 = t48693 + t48713 + t48721 + t48730;
  t48762 = t48182*t48748;
  t48793 = -1.*t45330*t48785;
  t48811 = -1.*t39165*t48746;
  t48815 = t46076 + t46125 + t48776 + t48793 + t48794 + t48811;
  t48816 = t48200*t48815;
  t48820 = t45986*t48785;
  t48822 = t41549*t48746;
  t48824 = t46133 + t46201 + t48817 + t48820 + t48821 + t48822;
  t48826 = t48111*t48824;
  t48828 = t48156*t48757;
  t48829 = t48762 + t48816 + t48826 + t48828;
  t48858 = t48226*t48853;
  t48865 = t48111*t48864;
  t48868 = t48858 + t48865;
  t48876 = t48226*t48873;
  t48888 = t48200*t48887;
  t48889 = t48876 + t48888;
  t48751 = t48200*t48748;
  t48759 = t48111*t48757;
  t48760 = t48751 + t48759;
  t48891 = t48243*t48853;
  t48896 = t45330*t48785;
  t48899 = t39165*t48746;
  t48901 = t45635 + t45806 + t48892 + t48896 + t48897 + t48899;
  t48903 = t48226*t48901;
  t48904 = t48156*t48864;
  t48905 = -1.*t48785*t46493;
  t48909 = -1.*t48746*t41643;
  t48911 = t45880 + t45938 + t48905 + t48906 + t48908 + t48909;
  t48914 = t48111*t48911;
  t48919 = t48891 + t48903 + t48904 + t48914;
  t48927 = -1.*t45986*t48785;
  t48929 = -1.*t41549*t48746;
  t48936 = t44777 + t45002 + t48924 + t48927 + t48928 + t48929;
  t48939 = t48226*t48936;
  t48944 = t48243*t48873;
  t48947 = t48182*t48887;
  t48953 = t48785*t46493;
  t49009 = t48746*t41643;
  t49011 = t45292 + t45296 + t48953 + t48958 + t49008 + t49009;
  t49018 = t48200*t49011;
  t49023 = t48939 + t48944 + t48947 + t49018;
  t49063 = t43850*t49053;
  t49064 = -1.*t43850*t49043;
  t49068 = -1.*t47236*t49048;
  t49070 = t48542 + t49064 + t49068;
  t49073 = t38054*t42691*t49070;
  t49084 = t49063 + t49073;
  t49090 = -1.*t38054*t42691*t49088;
  t49095 = t37916*t42691*t49093;
  t49097 = t48576 + t49090 + t49095;
  t49098 = t44387*t49097;
  t49107 = t44305*t49106;
  t49108 = t44305*t49043;
  t49111 = t47265*t49048;
  t49112 = t49088*t44387;
  t49113 = t49093*t47819;
  t49114 = t48593 + t48597 + t49108 + t49111 + t49112 + t49113;
  t49116 = t38054*t42691*t49114;
  t49117 = t49098 + t49107 + t49116;
  t49119 = t44387*t49106;
  t49121 = t49043*t44387;
  t49123 = t49048*t47819;
  t49124 = t48634 + t49121 + t49123;
  t49126 = t38054*t42691*t49124;
  t49127 = t49119 + t49126;
  t49130 = t38054*t42691*t49088;
  t49131 = -1.*t37916*t42691*t49093;
  t49135 = t48671 + t49130 + t49131;
  t49137 = t43850*t49135;
  t49138 = t44619*t49053;
  t49141 = -1.*t43850*t49088;
  t49142 = -1.*t47236*t49093;
  t49144 = -1.*t49043*t44619;
  t49148 = -1.*t49048*t48011;
  t49150 = t48677 + t48681 + t49141 + t49142 + t49144 + t49148;
  t49151 = t38054*t42691*t49150;
  t49162 = t49137 + t49138 + t49151;
  t49165 = t43850*t49043;
  t49166 = t47236*t49048;
  t49167 = t48688 + t49165 + t49166;
  t49170 = t44305*t49167;
  t49171 = -1.*t44305*t49043;
  t49173 = -1.*t47265*t49048;
  t49174 = -1.*t49088*t44387;
  t49175 = -1.*t49093*t47819;
  t49177 = t48694 + t48700 + t49171 + t49173 + t49174 + t49175;
  t49178 = t43850*t49177;
  t49179 = -1.*t49043*t44387;
  t49181 = -1.*t49048*t47819;
  t49182 = t48715 + t49179 + t49181;
  t49183 = t44619*t49182;
  t49185 = t43850*t49088;
  t49186 = t47236*t49093;
  t49187 = t49043*t44619;
  t49190 = t49048*t48011;
  t49191 = t48726 + t48728 + t49185 + t49186 + t49187 + t49190;
  t49193 = t44387*t49191;
  t49194 = t49170 + t49178 + t49183 + t49193;
  t49269 = t46036*t49251;
  t49289 = t45386*t49287;
  t49319 = t49269 + t49289;
  t49354 = t41553*t49251;
  t49383 = -1.*t45386*t49368;
  t49448 = -1.*t48140*t49446;
  t49449 = -1.*t40403*t49208;
  t49454 = -1.*t48169*t49227;
  t49467 = t48776 + t48794 + t49383 + t49448 + t49449 + t49454;
  t49472 = t46036*t49467;
  t49475 = t46036*t49368;
  t49480 = t48217*t49446;
  t49486 = t41553*t49208;
  t49487 = t48192*t49227;
  t49488 = t48817 + t48821 + t49475 + t49480 + t49486 + t49487;
  t49491 = t45386*t49488;
  t49493 = t40403*t49287;
  t49495 = t49354 + t49472 + t49491 + t49493;
  t49516 = t46496*t49513;
  t49540 = t45386*t49536;
  t49549 = t49516 + t49540;
  t49567 = t46496*t49565;
  t49584 = t46036*t49577;
  t49596 = t49567 + t49584;
  t49624 = t41645*t49513;
  t49651 = t45386*t49368;
  t49664 = t48140*t49446;
  t49667 = t40403*t49208;
  t49668 = t48169*t49227;
  t49673 = t48892 + t48897 + t49651 + t49664 + t49667 + t49668;
  t49675 = t46496*t49673;
  t49794 = t40403*t49536;
  t49804 = -1.*t49368*t46496;
  t49817 = -1.*t49446*t48231;
  t49831 = -1.*t49208*t41645;
  t49872 = -1.*t49227*t48253;
  t49875 = t48906 + t48908 + t49804 + t49817 + t49831 + t49872;
  t49911 = t45386*t49875;
  t49941 = t49624 + t49675 + t49794 + t49911;
  t49984 = -1.*t46036*t49368;
  t50027 = -1.*t48217*t49446;
  t50028 = -1.*t41553*t49208;
  t50034 = -1.*t48192*t49227;
  t50042 = t48924 + t48928 + t49984 + t50027 + t50028 + t50034;
  t50052 = t46496*t50042;
  t50055 = t41645*t49565;
  t50056 = t41553*t49577;
  t50057 = t49368*t46496;
  t50068 = t49446*t48231;
  t50069 = t49208*t41645;
  t50076 = t49227*t48253;
  t50089 = t48958 + t49008 + t50057 + t50068 + t50069 + t50076;
  t50129 = t46036*t50089;
  t50133 = t50052 + t50055 + t50056 + t50129;
  t47245 = 0.026*t44619*t47244;
  t47401 = 0.026*t44387*t47276;
  t47859 = 0.026*t44305*t47848;
  t48063 = 0.026*t43850*t48023;
  t48146 = 0.05186*t40403*t48145;
  t48172 = 0.05186*t45386*t48171;
  t48197 = 0.05186*t46036*t48195;
  t48223 = 0.05186*t41553*t48222;
  t48239 = 0.05186*t41645*t48237;
  t48289 = 0.05186*t46496*t48276;
  t48301 = t47245 + t47401 + t47859 + t48063 + t48146 + t48172 + t48197 + t48223 + t48239 + t48289;
  t50353 = 0.026*t48404*t47848;
  t50376 = 0.026*t47276*t48413;
  t50384 = 0.026*t48370*t48023;
  t50405 = 0.026*t47244*t48428;
  t50416 = 0.05186*t48432*t48171;
  t50429 = 0.05186*t48145*t48438;
  t50435 = 0.05186*t48443*t48222;
  t50442 = 0.05186*t48195*t48449;
  t50449 = 0.05186*t48456*t48276;
  t50468 = 0.05186*t48237*t48491;
  t50492 = t50353 + t50376 + t50384 + t50405 + t50416 + t50429 + t50435 + t50442 + t50449 + t50468;
  t50835 = -1.*t47231*t37916*t42691;
  t50850 = t47207*t48501;
  t50861 = t50835 + t50850;
  t51628 = -3.e-6*t37134;
  t49085 = 0.026*t44305*t49084;
  t49118 = 0.026*t43850*t49117;
  t49128 = 0.026*t44619*t49127;
  t49163 = 0.026*t44387*t49162;
  t49195 = 0.026*t38054*t42691*t49194;
  t49325 = 0.05186*t41645*t49319;
  t49504 = 0.05186*t46496*t49495;
  t49550 = 0.05186*t41553*t49549;
  t49608 = 0.05186*t40403*t49596;
  t49955 = 0.05186*t46036*t49941;
  t50135 = 0.05186*t45386*t50133;
  t50146 = t49085 + t49118 + t49128 + t49163 + t49195 + t49325 + t49504 + t49550 + t49608 + t49955 + t50135;
  t51215 = 0.026*t47276*t49084;
  t51220 = 0.026*t47244*t49117;
  t51232 = 0.026*t48023*t49127;
  t51234 = 0.026*t47848*t49162;
  t51238 = 0.026*t50861*t49194;
  t51252 = 0.05186*t48276*t49319;
  t51266 = 0.05186*t48237*t49495;
  t51277 = 0.05186*t48195*t49549;
  t51279 = 0.05186*t48171*t49596;
  t51280 = 0.05186*t48222*t49941;
  t51282 = 0.05186*t48145*t50133;
  t51283 = t51215 + t51220 + t51232 + t51234 + t51238 + t51252 + t51266 + t51277 + t51279 + t51280 + t51282;
  t50708 = 0.026*t48404*t49084;
  t50717 = 0.026*t48370*t49117;
  t50728 = 0.026*t48428*t49127;
  t50729 = 0.026*t48413*t49162;
  t50731 = 0.026*t50223*t49194;
  t50732 = 0.05186*t48491*t49319;
  t50734 = 0.05186*t48456*t49495;
  t50735 = 0.05186*t48443*t49549;
  t50751 = 0.05186*t48438*t49596;
  t50752 = 0.05186*t48449*t49941;
  t50753 = 0.05186*t48432*t50133;
  t50754 = t50708 + t50717 + t50728 + t50729 + t50731 + t50732 + t50734 + t50735 + t50751 + t50752 + t50753;
  t51473 = t44387*t49167;
  t51477 = t43850*t49182;
  t51487 = t51473 + t51477;
  t51838 = t47629*t48692;
  t51844 = t47223*t48718;
  t51846 = t51838 + t51844;
  t51512 = t41712*t41721;
  t51528 = -1.000000000009*t2398*t41822;
  t51550 = t51512 + t51528;
  t51629 = -3.e-6*t34360;
  t51630 = t51628 + t29343 + t51629 + t33506;
  t51643 = -3.e-6*t40449;
  t51645 = t51628 + t29343 + t51643 + t29345;
  t51650 = 1.8e-11*t27851;
  t51654 = -3.e-6*t33509;
  t51666 = -3.e-6*t29347;
  t51670 = -3.e-6*t41593;
  t51672 = -1. + t51650 + t51654 + t51666 + t51670;
  t48552 = 0.026*t44305*t48551;
  t48615 = 0.026*t43850*t48612;
  t48664 = 0.026*t44619*t48663;
  t48687 = 0.026*t44387*t48686;
  t48733 = 0.026*t38054*t42691*t48732;
  t48761 = 0.05186*t41645*t48760;
  t48838 = 0.05186*t46496*t48829;
  t48869 = 0.05186*t41553*t48868;
  t48890 = 0.05186*t40403*t48889;
  t48923 = 0.05186*t46036*t48919;
  t49025 = 0.05186*t45386*t49023;
  t49028 = t48552 + t48615 + t48664 + t48687 + t48733 + t48761 + t48838 + t48869 + t48890 + t48923 + t49025;
  t51128 = 0.026*t47276*t48551;
  t51152 = 0.026*t47244*t48612;
  t51167 = 0.026*t48663*t48023;
  t51170 = 0.026*t47848*t48686;
  t51174 = 0.026*t50861*t48732;
  t51179 = 0.05186*t48829*t48237;
  t51183 = 0.05186*t48195*t48868;
  t51185 = 0.05186*t48171*t48889;
  t51186 = 0.05186*t48760*t48276;
  t51189 = 0.05186*t48222*t48919;
  t51190 = 0.05186*t48145*t49023;
  t51206 = t51128 + t51152 + t51167 + t51170 + t51174 + t51179 + t51183 + t51185 + t51186 + t51189 + t51190;
  t50593 = 0.026*t48404*t48551;
  t50599 = 0.026*t48370*t48612;
  t50617 = 0.026*t48663*t48428;
  t50618 = 0.026*t48413*t48686;
  t50621 = 0.026*t50223*t48732;
  t50624 = 0.05186*t48829*t48456;
  t50627 = 0.05186*t48443*t48868;
  t50629 = 0.05186*t48438*t48889;
  t50631 = 0.05186*t48760*t48491;
  t50643 = 0.05186*t48449*t48919;
  t50683 = 0.05186*t48432*t49023;
  t50695 = t50593 + t50599 + t50617 + t50618 + t50621 + t50624 + t50627 + t50629 + t50631 + t50643 + t50683;
  t51768 = 0.000014*t47961*t43850;
  t51779 = 0.000056*t47629*t44305;
  t51784 = 0.000056*t47250*t44387;
  t51801 = 0.000014*t47223*t44619;
  t51803 = 0.000245*t48156*t45386;
  t51805 = 0.000245*t48111*t40403;
  t51812 = 2.e-6*t48200*t41553;
  t51817 = 2.e-6*t48182*t46036;
  t51818 = 0.000245*t48243*t46496;
  t51820 = 0.000245*t48226*t41645;
  t51822 = 0.026*t48686*t49084;
  t51823 = 0.026*t48663*t49117;
  t51825 = 0.026*t48732*t51487;
  t51828 = 0.026*t48612*t49127;
  t51829 = 0.026*t48551*t49162;
  t51881 = 0.026*t51846*t49194;
  t51888 = 0.05186*t48829*t49319;
  t51898 = 0.05186*t48760*t49495;
  t51900 = 0.05186*t48919*t49549;
  t51902 = 0.05186*t49023*t49596;
  t51904 = 0.05186*t48868*t49941;
  t51912 = 0.05186*t48889*t50133;
  t51919 = t51768 + t51779 + t51784 + t51801 + t51803 + t51805 + t51812 + t51817 + t51818 + t51820 + t51822 + t51823 + t51825 + t51828 + t51829 + t51881 + t51888 + t51898 + t51900 + t51902 + t51904 + t51912;
  t42720 = 0.026*t38054*t42515*t42691;
  t43863 = 0.026*t41712*t43035*t43850;
  t43892 = -0.026000000000234*t43872*t2398*t43850;
  t44306 = -0.026000000000234*t43966*t2398*t44305;
  t44389 = -0.026000000000234*t31479*t43966*t44387;
  t44523 = -0.026000000000234*t44513*t2398*t44387;
  t44644 = 0.026*t41712*t43872*t44619;
  t45387 = 0.05186*t45302*t45386;
  t45435 = 0.05186*t45425*t40403;
  t45624 = 0.05186*t45623*t41553;
  t46039 = 0.05186*t45949*t46036;
  t46559 = 0.05186*t46484*t46496;
  t46628 = 0.05186*t46627*t41645;
  t46635 = t42720 + t43863 + t43892 + t44306 + t44389 + t44523 + t44644 + t45387 + t45435 + t45624 + t46039 + t46559 + t46628;
  t50884 = 0.026*t42515*t50861;
  t50900 = 0.026*t41712*t43035*t47244;
  t50901 = -0.026000000000234*t43872*t2398*t47244;
  t50923 = -0.026000000000234*t43966*t2398*t47276;
  t50931 = -0.026000000000234*t31479*t43966*t47848;
  t50932 = -0.026000000000234*t44513*t2398*t47848;
  t50983 = 0.026*t41712*t43872*t48023;
  t50985 = 0.05186*t45302*t48145;
  t50993 = 0.05186*t45425*t48171;
  t50997 = 0.05186*t45623*t48195;
  t51000 = 0.05186*t45949*t48222;
  t51019 = 0.05186*t46484*t48237;
  t51027 = 0.05186*t46627*t48276;
  t51030 = t50884 + t50900 + t50901 + t50923 + t50931 + t50932 + t50983 + t50985 + t50993 + t50997 + t51000 + t51019 + t51027;
  t50240 = 0.026*t42515*t50223;
  t50242 = 0.026*t41712*t43035*t48370;
  t50245 = -0.026000000000234*t43872*t2398*t48370;
  t50246 = -0.026000000000234*t43966*t2398*t48404;
  t50250 = -0.026000000000234*t31479*t43966*t48413;
  t50251 = -0.026000000000234*t44513*t2398*t48413;
  t50253 = 0.026*t41712*t43872*t48428;
  t50254 = 0.05186*t45302*t48432;
  t50256 = 0.05186*t45425*t48438;
  t50259 = 0.05186*t45623*t48443;
  t50261 = 0.05186*t45949*t48449;
  t50268 = 0.05186*t46484*t48456;
  t50279 = 0.05186*t46627*t48491;
  t50286 = t50240 + t50242 + t50245 + t50246 + t50250 + t50251 + t50253 + t50254 + t50256 + t50259 + t50261 + t50268 + t50279;
  t52061 = -0.000014000000000126*t31479*t47223;
  t52069 = 0.000056*t41712*t47250;
  t52070 = -0.000056000000000504*t2398*t47629;
  t52071 = -0.000014000000000126*t2398*t47961;
  t52072 = 0.000245*t37655*t48111;
  t52075 = 0.000245*t45307*t48156;
  t52078 = 2.e-6*t44965*t48182;
  t52088 = 2.e-6*t40825*t48200;
  t52133 = 0.000245*t41598*t48226;
  t52137 = 0.000245*t44663*t48243;
  t52150 = -0.026000000000234*t31479*t43966*t48551;
  t52151 = -0.026000000000234*t44513*t2398*t48551;
  t52184 = 0.026*t41712*t43872*t48612;
  t52187 = 0.026*t42515*t51846;
  t52189 = 0.026*t41712*t43035*t48663;
  t52190 = -0.026000000000234*t43872*t2398*t48663;
  t52193 = -0.026000000000234*t43966*t2398*t48686;
  t52203 = 0.026*t51550*t48732;
  t52204 = 0.05186*t46484*t48760;
  t52212 = 0.05186*t46627*t48829;
  t52226 = 0.05186*t45949*t48868;
  t52227 = 0.05186*t45302*t48889;
  t52230 = 0.05186*t45623*t48919;
  t52257 = 0.05186*t45425*t49023;
  t52259 = t52061 + t52069 + t52070 + t52071 + t52072 + t52075 + t52078 + t52088 + t52133 + t52137 + t52150 + t52151 + t52184 + t52187 + t52189 + t52190 + t52193 + t52203 + t52204 + t52212 + t52226 + t52227 + t52230 + t52257;
  t51365 = -0.000014000000000126*t31479*t43850;
  t51371 = 0.000056*t41712*t44305;
  t51396 = -0.000056000000000504*t2398*t44387;
  t51399 = -0.000014000000000126*t2398*t44619;
  t51424 = 0.000245*t37655*t45386;
  t51428 = 0.000245*t45307*t40403;
  t51431 = 2.e-6*t44965*t41553;
  t51450 = 2.e-6*t40825*t46036;
  t51458 = 0.000245*t41598*t46496;
  t51462 = 0.000245*t44663*t41645;
  t51466 = -0.026000000000234*t31479*t43966*t49084;
  t51469 = -0.026000000000234*t44513*t2398*t49084;
  t51472 = 0.026*t41712*t43872*t49117;
  t51493 = 0.026*t42515*t51487;
  t51496 = 0.026*t41712*t43035*t49127;
  t51499 = -0.026000000000234*t43872*t2398*t49127;
  t51501 = -0.026000000000234*t43966*t2398*t49162;
  t51553 = 0.026*t51550*t49194;
  t51562 = 0.05186*t46484*t49319;
  t51569 = 0.05186*t46627*t49495;
  t51571 = 0.05186*t45949*t49549;
  t51572 = 0.05186*t45302*t49596;
  t51573 = 0.05186*t45623*t49941;
  t51575 = 0.05186*t45425*t50133;
  t51584 = t51365 + t51371 + t51396 + t51399 + t51424 + t51428 + t51431 + t51450 + t51458 + t51462 + t51466 + t51469 + t51472 + t51493 + t51496 + t51499 + t51501 + t51553 + t51562 + t51569 + t51571 + t51572 + t51573 + t51575;
  t52850 = 7.8000468001404e-9*t31479*t43966;
  t52853 = 0.0013000000000117*t41712*t43035;
  t52869 = 7.8000468001404e-9*t44513*t2398;
  t52898 = -0.0013000000000234*t43872*t2398;
  t52900 = 0.000245*t37655*t51630;
  t52909 = 2.e-6*t51645*t40825;
  t52914 = 0.000245*t51672*t41598;
  t52940 = 0.05186*t46484*t47071;
  t52955 = 0.05186*t45949*t46810;
  t52976 = 0.05186*t45302*t46745;
  t52978 = t52850 + t52853 + t52869 + t52898 + t52900 + t52909 + t52914 + t52940 + t52955 + t52976;
  t46670 = -7.8000468000702e-9*t44305;
  t46671 = 0.0013000000000117*t44619;
  t46747 = 0.05186*t46745*t40403;
  t46812 = 0.05186*t46810*t41553;
  t47072 = 0.05186*t47071*t41645;
  t47073 = t46670 + t46671 + t46747 + t46812 + t47072;
  t51032 = -7.8000468000702e-9*t47276;
  t51046 = 0.0013000000000117*t48023;
  t51047 = 0.05186*t46745*t48171;
  t51049 = 0.05186*t46810*t48195;
  t51067 = 0.05186*t47071*t48276;
  t51074 = t51032 + t51046 + t51047 + t51049 + t51067;
  t50292 = -7.8000468000702e-9*t48404;
  t50295 = 0.0013000000000117*t48428;
  t50312 = 0.05186*t46745*t48438;
  t50320 = 0.05186*t46810*t48443;
  t50322 = 0.05186*t47071*t48491;
  t50335 = t50292 + t50295 + t50312 + t50320 + t50322;
  t52267 = 0.000245*t51630*t48156;
  t52271 = 2.e-6*t51645*t48182;
  t52274 = 0.000245*t51672*t48243;
  t52289 = 0.0013000000000117*t48612;
  t52292 = -7.8000468000702e-9*t48686;
  t52295 = 0.05186*t47071*t48829;
  t52296 = 0.05186*t46810*t48919;
  t52298 = 0.05186*t46745*t49023;
  t52306 = t52267 + t52271 + t52274 + t52289 + t52292 + t52295 + t52296 + t52298;
  t51635 = 0.000245*t51630*t40403;
  t51647 = 2.e-6*t51645*t41553;
  t51673 = 0.000245*t51672*t41645;
  t51696 = 0.0013000000000117*t49117;
  t51700 = -7.8000468000702e-9*t49162;
  t51726 = 0.05186*t47071*t49495;
  t51733 = 0.05186*t46810*t49941;
  t51735 = 0.05186*t46745*t50133;
  t51740 = t51635 + t51647 + t51673 + t51696 + t51700 + t51726 + t51733 + t51735;
  t52599 = 0.00024500000000441*t41598;
  t52626 = 5.186e-9*t46484;
  t52628 = 0.00518601555815558*t45949;
  t52645 = -1.555803111628e-8*t45302;
  t52653 = t52599 + t52626 + t52628 + t52645;
  t40448 = -1.555803111628e-8*t40403;
  t41554 = 0.00518601555815558*t41553;
  t41647 = 5.186e-9*t41645;
  t41648 = t40448 + t41554 + t41647;
  t50797 = -1.555803111628e-8*t48171;
  t50802 = 0.00518601555815558*t48195;
  t50805 = 5.186e-9*t48276;
  t50816 = t50797 + t50802 + t50805;
  t50177 = -1.555803111628e-8*t48438;
  t50193 = 0.00518601555815558*t48443;
  t50210 = 5.186e-9*t48491;
  t50214 = t50177 + t50193 + t50210;
  t52006 = 0.00024500000000441*t48243;
  t52019 = 5.186e-9*t48829;
  t52026 = 0.00518601555815558*t48919;
  t52029 = -1.555803111628e-8*t49023;
  t52031 = t52006 + t52019 + t52026 + t52029;
  t51344 = 0.00024500000000441*t41645;
  t51347 = 5.186e-9*t49495;
  t51350 = 0.00518601555815558*t49941;
  t51351 = -1.555803111628e-8*t50133;
  t51352 = t51344 + t51347 + t51350 + t51351;
  p_output1[0]=var2[10]*(-0.5*(0.052*t44305*t44387 + 0.052*t43850*t44619 + 0.10372*t40403*t45386 + 0.10372*t41553*t46036 + 0.10372*t41645*t46496)*var2[0] - 0.5*t48494*var2[1] - 0.5*t48301*var2[2] - 0.5*t50146*var2[3] - 0.5*t49028*var2[4] - 0.5*t46635*var2[5] - 0.5*t47073*var2[10] - 0.5*t41648*var2[12]);
  p_output1[1]=var2[10]*(-0.5*t48494*var2[0] - 0.5*(0.052*t48404*t48413 + 0.052*t48370*t48428 + 0.10372*t48432*t48438 + 0.10372*t48443*t48449 + 0.10372*t48456*t48491)*var2[1] - 0.5*t50492*var2[2] - 0.5*t50754*var2[3] - 0.5*t50695*var2[4] - 0.5*t50286*var2[5] - 0.5*t50335*var2[10] - 0.5*t50214*var2[12]);
  p_output1[2]=var2[10]*(-0.5*t48301*var2[0] - 0.5*t50492*var2[1] - 0.5*(0.052*t47276*t47848 + 0.052*t47244*t48023 + 0.10372*t48145*t48171 + 0.10372*t48195*t48222 + 0.10372*t48237*t48276)*var2[2] - 0.5*t51283*var2[3] - 0.5*t51206*var2[4] - 0.5*t51030*var2[5] - 0.5*t51074*var2[10] - 0.5*t50816*var2[12]);
  p_output1[3]=var2[10]*(-0.5*t50146*var2[0] - 0.5*t50754*var2[1] - 0.5*t51283*var2[2] - 0.5*(0.000112*t44305*t44387 + 0.000028*t43850*t44619 + 0.00049*t40403*t45386 + 4.e-6*t41553*t46036 + 0.00049*t41645*t46496 + 0.052*t49117*t49127 + 0.052*t49084*t49162 + 0.10372*t49319*t49495 + 0.10372*t49549*t49941 + 0.10372*t49596*t50133 + 0.052*t49194*t51487)*var2[3] - 0.5*t51919*var2[4] - 0.5*t51584*var2[5] - 0.5*t51740*var2[10] - 0.5*t51352*var2[12]);
  p_output1[4]=var2[10]*(-0.5*t49028*var2[0] - 0.5*t50695*var2[1] - 0.5*t51206*var2[2] - 0.5*t51919*var2[3] - 0.5*(0.000112*t47250*t47629 + 0.000028*t47223*t47961 + 0.00049*t48111*t48156 + 4.e-6*t48182*t48200 + 0.00049*t48226*t48243 + 0.052*t48612*t48663 + 0.052*t48551*t48686 + 0.10372*t48760*t48829 + 0.10372*t48868*t48919 + 0.10372*t48889*t49023 + 0.052*t48732*t51846)*var2[4] - 0.5*t52259*var2[5] - 0.5*t52306*var2[10] - 0.5*t52031*var2[12]);
  p_output1[5]=var2[10]*(-0.5*t46635*var2[0] - 0.5*t50286*var2[1] - 0.5*t51030*var2[2] - 0.5*t51584*var2[3] - 0.5*t52259*var2[4] - 0.5*(0.000028000000000504*t2398*t31479 - 0.000112000000001008*t2398*t41712 + 0.052*Power(t41712,2)*t43035*t43872 - 0.052000000000468*t2398*t41712*Power(t43872,2) + 0.052000000000936*t2398*t31479*Power(t43966,2) + 0.052000000000936*Power(t2398,2)*t43966*t44513 + 0.00049*t41598*t44663 + 4.e-6*t40825*t44965 + 0.00049*t37655*t45307 + 0.10372*t45302*t45425 + 0.10372*t45623*t45949 + 0.10372*t46484*t46627 + 0.052*t42515*t51550)*var2[5] - 0.5*t52978*var2[10] - 0.5*t52653*var2[12]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=(-0.5*t47073*var2[0] - 0.5*t50335*var2[1] - 0.5*t51074*var2[2] - 0.5*t51740*var2[3] - 0.5*t52306*var2[4] - 0.5*t52978*var2[5])*var2[10];
  p_output1[11]=0;
  p_output1[12]=(-0.5*t41648*var2[0] - 0.5*t50214*var2[1] - 0.5*t50816*var2[2] - 0.5*t51352*var2[3] - 0.5*t52031*var2[4] - 0.5*t52653*var2[5])*var2[10];
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec11_minitaur.hh"

namespace FrontStance
{

void Ce2_vec11_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
