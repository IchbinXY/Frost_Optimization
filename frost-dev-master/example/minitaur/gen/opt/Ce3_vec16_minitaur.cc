/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:13:32 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t497;
  double t521;
  double t533;
  double t1165;
  double t4435;
  double t1162;
  double t985;
  double t1080;
  double t1082;
  double t1083;
  double t1117;
  double t4864;
  double t391;
  double t6885;
  double t6482;
  double t6696;
  double t7144;
  double t12808;
  double t12814;
  double t12830;
  double t12854;
  double t12866;
  double t12952;
  double t13027;
  double t14025;
  double t14207;
  double t14221;
  double t12847;
  double t18105;
  double t18138;
  double t13959;
  double t15664;
  double t14506;
  double t15028;
  double t15808;
  double t19905;
  double t22089;
  double t22368;
  double t23023;
  double t14549;
  double t18528;
  double t18532;
  double t18534;
  double t18624;
  double t19515;
  double t19962;
  double t19971;
  double t20844;
  double t22069;
  double t15116;
  double t23472;
  double t23953;
  double t23340;
  double t25917;
  double t26199;
  double t26564;
  double t27754;
  double t28042;
  double t15214;
  double t15304;
  double t17079;
  double t17697;
  double t18178;
  double t18225;
  double t29751;
  double t31417;
  double t31424;
  double t31439;
  double t14618;
  double t14733;
  double t18228;
  double t23142;
  double t23330;
  double t29340;
  double t29343;
  double t29347;
  double t30318;
  double t30418;
  double t31032;
  double t32374;
  double t32397;
  double t33012;
  double t33028;
  double t33194;
  double t12310;
  double t12344;
  double t33219;
  double t33226;
  double t33228;
  double t33244;
  double t33014;
  double t33032;
  double t33197;
  double t33198;
  double t13165;
  double t36684;
  double t37395;
  double t37564;
  double t37572;
  double t37921;
  double t38036;
  double t38233;
  double t38279;
  double t39334;
  double t40365;
  double t40394;
  double t40449;
  double t38935;
  double t39039;
  double t39122;
  double t39162;
  double t41723;
  double t41726;
  double t42027;
  double t42216;
  double t42440;
  double t42484;
  double t42510;
  double t42518;
  double t42734;
  double t42740;
  double t42856;
  double t42897;
  double t42646;
  double t42657;
  double t42677;
  double t42691;
  double t1163;
  double t5307;
  double t5396;
  double t6976;
  double t7319;
  double t7510;
  double t7719;
  double t8931;
  double t11040;
  double t12173;
  double t12189;
  double t12199;
  double t12348;
  double t12371;
  double t12382;
  double t12420;
  double t12578;
  double t12606;
  double t13200;
  double t13908;
  double t29345;
  double t32465;
  double t32652;
  double t32802;
  double t32922;
  double t32984;
  double t32987;
  double t33202;
  double t33254;
  double t33313;
  double t33509;
  double t33624;
  double t34141;
  double t34155;
  double t34157;
  double t34203;
  double t34212;
  double t34217;
  double t34380;
  double t34651;
  double t36322;
  double t36332;
  double t37755;
  double t38335;
  double t38511;
  double t38552;
  double t38820;
  double t38846;
  double t38878;
  double t39327;
  double t40526;
  double t40708;
  double t41554;
  double t41557;
  double t41560;
  double t41563;
  double t41569;
  double t41585;
  double t41586;
  double t41590;
  double t41651;
  double t41652;
  double t41687;
  double t41688;
  double t41691;
  double t41714;
  double t42240;
  double t42523;
  double t42526;
  double t42528;
  double t42535;
  double t42548;
  double t42635;
  double t42724;
  double t43035;
  double t43188;
  double t43210;
  double t43769;
  double t43833;
  double t43864;
  double t43896;
  double t43910;
  double t43921;
  double t44401;
  double t44513;
  double t44525;
  double t45183;
  double t45185;
  double t45233;
  double t45278;
  double t45283;
  double t45286;
  double t45290;
  double t45293;
  double t45294;
  double t45330;
  double t45387;
  double t45484;
  double t45555;
  double t45575;
  double t45611;
  double t46793;
  double t46740;
  double t46741;
  double t46753;
  double t46754;
  double t48246;
  double t48270;
  double t48289;
  double t48408;
  double t48428;
  double t48429;
  double t48430;
  double t48436;
  double t48440;
  double t48447;
  double t48450;
  double t48451;
  double t48463;
  double t48493;
  double t48511;
  double t48549;
  double t48552;
  double t48555;
  double t48404;
  double t48517;
  double t48541;
  double t49045;
  double t49051;
  double t49070;
  double t48122;
  double t48182;
  double t48240;
  double t48908;
  double t49013;
  double t49015;
  double t48640;
  double t48666;
  double t48886;
  double t49141;
  double t49142;
  double t49144;
  double t49318;
  double t49425;
  double t49430;
  double t49433;
  double t49448;
  double t49516;
  double t49528;
  double t49553;
  double t49565;
  double t49577;
  double t49584;
  double t49622;
  double t49624;
  double t49626;
  double t49633;
  double t49647;
  double t49662;
  double t49664;
  double t49926;
  double t50029;
  double t50031;
  double t50056;
  double t50066;
  double t50085;
  double t49849;
  double t49861;
  double t49872;
  double t49508;
  double t49667;
  double t49794;
  double t49282;
  double t49284;
  double t49297;
  double t50169;
  double t50186;
  double t50187;
  double t50322;
  double t50331;
  double t50332;
  double t51387;
  double t51392;
  double t51399;
  double t51428;
  double t51431;
  double t51434;
  double t51444;
  double t51448;
  double t51450;
  double t51467;
  double t51469;
  double t51476;
  double t51487;
  double t51493;
  double t51494;
  double t46812;
  double t46814;
  double t47713;
  double t47755;
  double t47859;
  double t47888;
  double t48011;
  double t49017;
  double t49119;
  double t51754;
  double t51764;
  double t51768;
  double t49170;
  double t51806;
  double t51809;
  double t49221;
  double t50202;
  double t52012;
  double t52016;
  double t52019;
  double t50279;
  double t50536;
  double t50775;
  double t51002;
  double t51128;
  double t49030;
  double t49084;
  double t49086;
  double t51776;
  double t51784;
  double t51803;
  double t51818;
  double t49121;
  double t49124;
  double t49126;
  double t49173;
  double t49174;
  double t49177;
  double t53446;
  double t53466;
  double t51860;
  double t51900;
  double t51937;
  double t51943;
  double t49226;
  double t49234;
  double t49249;
  double t52022;
  double t52048;
  double t52081;
  double t52089;
  double t50209;
  double t50210;
  double t50214;
  double t50288;
  double t50292;
  double t50295;
  double t52164;
  double t52176;
  double t50537;
  double t50547;
  double t50577;
  double t52238;
  double t52267;
  double t50776;
  double t50779;
  double t50786;
  double t52289;
  double t52295;
  double t51006;
  double t51037;
  double t51046;
  double t52434;
  double t52468;
  double t51138;
  double t51143;
  double t51153;
  double t67143;
  double t67212;
  double t67634;
  double t69305;
  double t69307;
  double t69448;
  double t51992;
  double t69102;
  double t69114;
  double t69168;
  double t70068;
  double t70090;
  double t70096;
  double t70117;
  double t70122;
  double t70147;
  double t70149;
  double t70187;
  double t70189;
  double t70203;
  double t70232;
  double t70243;
  double t70245;
  double t70248;
  double t52098;
  double t69511;
  double t69512;
  double t69524;
  double t52127;
  double t71613;
  double t71952;
  double t72166;
  double t72176;
  double t72232;
  double t72265;
  double t72267;
  double t72269;
  double t52190;
  double t72378;
  double t72395;
  double t72423;
  double t72442;
  double t72678;
  double t72679;
  double t72687;
  double t72828;
  double t52299;
  double t52383;
  double t73306;
  double t73307;
  double t73309;
  double t73917;
  double t74014;
  double t74020;
  double t74024;
  double t74038;
  double t74694;
  double t74701;
  double t74702;
  double t74714;
  double t74715;
  double t74716;
  double t74847;
  double t74853;
  double t74855;
  double t74864;
  double t74867;
  double t74868;
  double t74878;
  double t74879;
  double t74883;
  double t74899;
  double t74900;
  double t74902;
  double t74905;
  double t74906;
  double t74910;
  double t74911;
  double t74912;
  double t74914;
  double t74941;
  double t74945;
  double t74951;
  double t74953;
  double t74954;
  double t74957;
  double t74958;
  double t74960;
  double t74966;
  double t74968;
  double t74969;
  double t74971;
  double t74976;
  double t74984;
  double t75019;
  double t75020;
  double t75024;
  double t75083;
  double t75137;
  double t75145;
  double t67131;
  double t67926;
  double t75242;
  double t51829;
  double t51832;
  double t75243;
  double t75244;
  double t75293;
  double t75311;
  double t75331;
  double t75342;
  double t51727;
  double t51732;
  double t75356;
  double t75357;
  double t75362;
  double t51996;
  double t51998;
  double t69807;
  double t71406;
  double t72330;
  double t72342;
  double t75417;
  double t75418;
  double t75419;
  double t75421;
  double t75422;
  double t75424;
  double t52100;
  double t52105;
  double t52132;
  double t52134;
  double t73014;
  double t73017;
  double t52193;
  double t52203;
  double t73300;
  double t74089;
  double t74112;
  double t74356;
  double t52328;
  double t52336;
  double t52406;
  double t52408;
  double t74589;
  double t74643;
  double t74726;
  double t74856;
  double t74859;
  double t74863;
  double t74872;
  double t74874;
  double t74877;
  double t74886;
  double t74889;
  double t75294;
  double t74704;
  double t74705;
  double t75366;
  double t75378;
  double t75575;
  double t75576;
  double t75577;
  double t75586;
  double t75587;
  double t75588;
  double t75389;
  double t74712;
  double t74717;
  double t74718;
  double t75402;
  double t75407;
  double t75420;
  double t75436;
  double t75441;
  double t75448;
  double t75636;
  double t75637;
  double t75638;
  double t75640;
  double t75641;
  double t75642;
  double t75466;
  double t75473;
  double t75527;
  double t75530;
  double t75542;
  double t75546;
  double t75559;
  double t75560;
  double t75804;
  double t75805;
  double t75827;
  double t75848;
  double t75852;
  double t75856;
  double t75831;
  double t75900;
  double t75862;
  double t75841;
  double t75824;
  double t75857;
  double t75863;
  double t75885;
  double t75886;
  double t75972;
  double t75945;
  double t75901;
  double t75912;
  double t75914;
  double t75916;
  double t75930;
  double t75934;
  double t75935;
  double t75937;
  double t75938;
  double t75939;
  double t75940;
  double t75966;
  double t75955;
  double t75963;
  double t75887;
  double t75888;
  double t75933;
  double t75941;
  double t75965;
  double t75967;
  double t75969;
  double t75970;
  double t75988;
  double t75974;
  double t75985;
  double t75999;
  double t76010;
  double t76014;
  double t76016;
  double t76022;
  double t76030;
  double t75832;
  double t76048;
  double t76051;
  double t75806;
  double t75807;
  double t75808;
  double t75809;
  double t76053;
  double t76054;
  double t76055;
  double t76056;
  double t76058;
  double t76059;
  double t76060;
  double t76062;
  double t76063;
  double t76064;
  double t76065;
  double t76067;
  double t76068;
  double t76070;
  double t76072;
  double t76074;
  double t76104;
  double t76106;
  double t76107;
  double t76108;
  double t76109;
  double t76110;
  double t76112;
  double t76117;
  double t76118;
  double t76122;
  double t76184;
  double t76186;
  double t76187;
  double t76188;
  double t76210;
  double t75823;
  double t75826;
  double t75835;
  double t75837;
  double t76216;
  double t76222;
  double t76226;
  double t76229;
  double t69531;
  double t69562;
  double t69653;
  double t76231;
  double t76232;
  double t76260;
  double t76267;
  double t72932;
  double t72942;
  double t72973;
  double t76353;
  double t76354;
  double t76358;
  double t76359;
  double t76439;
  double t76440;
  double t76469;
  double t76470;
  double t77523;
  double t78057;
  double t78060;
  double t78468;
  double t75843;
  double t75845;
  double t75846;
  double t75847;
  double t75854;
  double t75971;
  double t75973;
  double t76032;
  double t76034;
  double t76037;
  double t76038;
  double t76040;
  double t76042;
  double t76043;
  double t76044;
  double t76275;
  double t76290;
  double t76347;
  double t76348;
  double t73004;
  double t73008;
  double t73011;
  double t80185;
  double t80342;
  double t80348;
  double t80356;
  double t80388;
  double t80397;
  double t80399;
  double t80400;
  double t73291;
  double t73292;
  double t73293;
  double t76046;
  double t76047;
  double t76052;
  double t76061;
  double t76075;
  double t76076;
  double t76077;
  double t76078;
  double t76079;
  double t76081;
  double t76083;
  double t76095;
  double t76096;
  double t74498;
  double t74500;
  double t74505;
  double t78590;
  double t78672;
  double t78897;
  double t79335;
  double t79532;
  double t79571;
  double t79575;
  double t79764;
  double t80478;
  double t80479;
  double t80488;
  double t80559;
  double t80585;
  double t80592;
  double t80604;
  double t80605;
  double t74521;
  double t74523;
  double t74544;
  double t76098;
  double t76099;
  double t76103;
  double t76115;
  double t76116;
  double t76192;
  double t76194;
  double t76196;
  double t76197;
  double t76198;
  double t76202;
  double t76203;
  double t76204;
  double t76205;
  double t76209;
  double t76211;
  double t76213;
  double t76214;
  double t80862;
  double t80864;
  double t80866;
  double t80876;
  double t80877;
  double t80878;
  double t80907;
  double t80914;
  double t80921;
  double t80960;
  double t80967;
  double t80968;
  double t80984;
  double t80990;
  double t80991;
  double t44885;
  double t44887;
  double t44889;
  double t44897;
  double t44908;
  double t44918;
  double t81007;
  double t81008;
  double t81009;
  double t81012;
  double t81013;
  double t81014;
  double t81019;
  double t81023;
  double t81025;
  double t81027;
  double t81028;
  double t81030;
  double t44964;
  double t44973;
  double t44997;
  double t76372;
  double t78588;
  double t79838;
  double t80174;
  double t81163;
  double t81165;
  double t81167;
  double t81175;
  double t81179;
  double t81186;
  double t80441;
  double t80451;
  double t80465;
  double t80626;
  double t80737;
  double t80742;
  double t80755;
  double t80762;
  double t80861;
  double t80869;
  double t80870;
  double t80874;
  double t80879;
  double t80903;
  double t80905;
  double t80922;
  double t80923;
  double t81172;
  double t81190;
  double t81205;
  double t81214;
  double t84448;
  double t84449;
  double t84451;
  double t84454;
  double t84456;
  double t86213;
  double t82851;
  double t82884;
  double t83177;
  double t83289;
  double t83420;
  double t83422;
  double t83479;
  double t83493;
  t497 = Cos(var1[15]);
  t521 = -1.*t497;
  t533 = 1. + t521;
  t1165 = 9.e-12*t533;
  t4435 = t1165 + t521;
  t1162 = Cos(var1[5]);
  t985 = -9.e-12*t533;
  t1080 = 1. + t985;
  t1082 = 3.e-6*t1080;
  t1083 = -3.e-6*t533;
  t1117 = t1082 + t1083;
  t4864 = Sin(var1[5]);
  t391 = Sin(var1[3]);
  t6885 = Sin(var1[15]);
  t6482 = Cos(var1[3]);
  t6696 = Cos(var1[4]);
  t7144 = Sin(var1[4]);
  t12808 = Cos(var1[17]);
  t12814 = -1.*t12808;
  t12830 = 1. + t12814;
  t12854 = 3.e-6*t12830;
  t12866 = Sin(var1[17]);
  t12952 = 3.e-6*t12866;
  t13027 = t12854 + t12952;
  t14025 = -3.e-6*t12866;
  t14207 = t12854 + t14025;
  t14221 = 3.e-6*t14207;
  t12847 = -1.000000000009*t12830;
  t18105 = -3.e-6*t12830;
  t18138 = t18105 + t12952;
  t13959 = -1.8e-11*t12830;
  t15664 = -9.e-12*t12830;
  t14506 = 3.e-6*t13027;
  t15028 = 9.e-13*var1[17];
  t15808 = -1.*t12866;
  t19905 = t18105 + t14025;
  t22089 = 1. + t13959;
  t22368 = 3.e-6*t22089;
  t23023 = t22368 + t18105 + t14025;
  t14549 = 1. + t13959 + t14221 + t14506;
  t18528 = 3.e-7*var1[17];
  t18532 = 1.8e-11*t12830;
  t18534 = -1. + t18532;
  t18624 = 0.1*t18534;
  t19515 = -1.62e-17*t12830;
  t19962 = 0.2*t19905;
  t19971 = 0.1*t18138;
  t20844 = 0.2*t13027;
  t22069 = t18528 + t18624 + t19515 + t19962 + t19971 + t20844;
  t15116 = 1. + t12847;
  t23472 = 9.e-12*t12830;
  t23953 = t23472 + t15808;
  t23340 = 0.1000000000009*t12830;
  t25917 = 0.2*t23953;
  t26199 = 0.0999991*t19905;
  t26564 = t15664 + t12866;
  t27754 = 0.2*t26564;
  t28042 = t15028 + t23340 + t25917 + t26199 + t27754;
  t15214 = 0.2*t15116;
  t15304 = 0.2000000000018*t12830;
  t17079 = t15664 + t15808;
  t17697 = 0.1*t17079;
  t18178 = 0.0999991*t18138;
  t18225 = t15028 + t15214 + t15304 + t17697 + t18178;
  t29751 = 3.e-6*t15116;
  t31417 = t23472 + t12866;
  t31424 = 3.e-6*t31417;
  t31439 = t29751 + t12854 + t14025 + t31424;
  t14618 = 1.000000000009*t12830;
  t14733 = -1. + t14618 + t14221;
  t18228 = -1.*t14733*t18225;
  t23142 = -1.*t22069*t23023;
  t23330 = t15664 + t14506 + t12866;
  t29340 = -1.*t23330*t28042;
  t29343 = t18228 + t23142 + t29340;
  t29347 = t14549*t22069;
  t30318 = 3.e-6*t23953;
  t30418 = t29751 + t12854 + t30318 + t12952;
  t31032 = t30418*t28042;
  t32374 = t18225*t31439;
  t32397 = t29347 + t31032 + t32374;
  t33012 = -1. + t14618 + t14506;
  t33028 = t15664 + t14221 + t15808;
  t33194 = t22368 + t18105 + t12952;
  t12310 = -1.000000000009*t533;
  t12344 = 1. + t12310;
  t33219 = -1.*t6885*t33012;
  t33226 = t497*t33028;
  t33228 = 3.e-6*t533*t33194;
  t33244 = t33219 + t33226 + t33228;
  t33014 = 3.e-6*t6885*t33012;
  t33032 = 3.e-6*t533*t33028;
  t33197 = t1080*t33194;
  t33198 = t33014 + t33032 + t33197;
  t13165 = -3.e-6*t13027;
  t36684 = t18225*t33028;
  t37395 = t22069*t33194;
  t37564 = t33012*t28042;
  t37572 = t36684 + t37395 + t37564;
  t37921 = -1.*t14549*t22069;
  t38036 = -1.*t30418*t28042;
  t38233 = -1.*t18225*t31439;
  t38279 = t37921 + t38036 + t38233;
  t39334 = t497*t14733;
  t40365 = 3.e-6*t533*t23023;
  t40394 = -1.*t6885*t23330;
  t40449 = t39334 + t40365 + t40394;
  t38935 = 3.e-6*t533*t14733;
  t39039 = t1080*t23023;
  t39122 = 3.e-6*t6885*t23330;
  t39162 = t38935 + t39039 + t39122;
  t41723 = -1.*t18225*t33028;
  t41726 = -1.*t22069*t33194;
  t42027 = -1.*t33012*t28042;
  t42216 = t41723 + t41726 + t42027;
  t42440 = t14733*t18225;
  t42484 = t22069*t23023;
  t42510 = t23330*t28042;
  t42518 = t42440 + t42484 + t42510;
  t42734 = 3.e-6*t533*t14549;
  t42740 = -1.*t6885*t30418;
  t42856 = t497*t31439;
  t42897 = t42734 + t42740 + t42856;
  t42646 = t1080*t14549;
  t42657 = 3.e-6*t6885*t30418;
  t42677 = 3.e-6*t533*t31439;
  t42691 = t42646 + t42657 + t42677;
  t1163 = t1117*t1162;
  t5307 = t4435*t4864;
  t5396 = t1163 + t5307;
  t6976 = -1.000000000009*t6696*t6885;
  t7319 = t4435*t1162;
  t7510 = -1.*t1117*t4864;
  t7719 = t7319 + t7510;
  t8931 = -1.*t7144*t7719;
  t11040 = t6976 + t8931;
  t12173 = 3.e-6*t1162*t6885;
  t12189 = -1.*t6885*t4864;
  t12199 = t12173 + t12189;
  t12348 = t12344*t6696;
  t12371 = -1.*t1162*t6885;
  t12382 = -3.e-6*t6885*t4864;
  t12420 = t12371 + t12382;
  t12578 = -1.*t7144*t12420;
  t12606 = t12348 + t12578;
  t13200 = 1. + t12847 + t13165;
  t13908 = 0.2*t13200;
  t29345 = -1.*t14549*t29343;
  t32465 = -1.*t23023*t32397;
  t32652 = t31439*t29343;
  t32802 = t14733*t32397;
  t32922 = t32652 + t32802;
  t32984 = -3.e-6*t32922;
  t32987 = t13908 + t29345 + t32465 + t32984;
  t33202 = t1162*t33198;
  t33254 = t33244*t4864;
  t33313 = t33202 + t33254;
  t33509 = t12344*t33012;
  t33624 = t6885*t33028;
  t34141 = -3.e-6*t6885*t33194;
  t34155 = t33509 + t33624 + t34141;
  t34157 = t6696*t34155;
  t34203 = t1162*t33244;
  t34212 = -1.*t33198*t4864;
  t34217 = t34203 + t34212;
  t34380 = -1.*t7144*t34217;
  t34651 = t34157 + t34380;
  t36322 = t23472 + t13165 + t15808;
  t36332 = 0.2*t36322;
  t37755 = -1.*t14549*t37572;
  t38335 = -1.*t33194*t38279;
  t38511 = t31439*t37572;
  t38552 = t33028*t38279;
  t38820 = t38511 + t38552;
  t38846 = -3.e-6*t38820;
  t38878 = t36332 + t37755 + t38335 + t38846;
  t39327 = t1162*t39162;
  t40526 = t40449*t4864;
  t40708 = t39327 + t40526;
  t41554 = t6885*t14733;
  t41557 = -3.e-6*t6885*t23023;
  t41560 = t12344*t23330;
  t41563 = t41554 + t41557 + t41560;
  t41569 = t6696*t41563;
  t41585 = t1162*t40449;
  t41586 = -1.*t39162*t4864;
  t41590 = t41585 + t41586;
  t41651 = -1.*t7144*t41590;
  t41652 = t41569 + t41651;
  t41687 = -3.e-6*t15116;
  t41688 = -3.e-6*t23953;
  t41691 = t41687 + t18105 + t41688 + t14025;
  t41714 = 0.2*t41691;
  t42240 = -1.*t23023*t42216;
  t42523 = -1.*t33194*t42518;
  t42526 = t14733*t42216;
  t42528 = t33028*t42518;
  t42535 = t42526 + t42528;
  t42548 = -3.e-6*t42535;
  t42635 = t41714 + t42240 + t42523 + t42548;
  t42724 = t1162*t42691;
  t43035 = t42897*t4864;
  t43188 = t42724 + t43035;
  t43210 = -3.e-6*t6885*t14549;
  t43769 = t12344*t30418;
  t43833 = t6885*t31439;
  t43864 = t43210 + t43769 + t43833;
  t43896 = t6696*t43864;
  t43910 = t1162*t42897;
  t43921 = -1.*t42691*t4864;
  t44401 = t43910 + t43921;
  t44513 = -1.*t7144*t44401;
  t44525 = t43896 + t44513;
  t45183 = 1.000000000009*t6885*t7144;
  t45185 = -1.*t6696*t7719;
  t45233 = t45183 + t45185;
  t45278 = -1.*t12344*t7144;
  t45283 = -1.*t6696*t12420;
  t45286 = t45278 + t45283;
  t45290 = -1.*t34155*t7144;
  t45293 = -1.*t6696*t34217;
  t45294 = t45290 + t45293;
  t45330 = -1.*t41563*t7144;
  t45387 = -1.*t6696*t41590;
  t45484 = t45330 + t45387;
  t45555 = -1.*t43864*t7144;
  t45575 = -1.*t6696*t44401;
  t45611 = t45555 + t45575;
  t46793 = -3.e-6*t22089;
  t46740 = -3.e-6*t497;
  t46741 = t1083 + t46740;
  t46753 = t46741*t1162;
  t46754 = t46753 + t4864;
  t48246 = 0.05*t12344;
  t48270 = 2.999982e-7*t6885;
  t48289 = t48246 + t48270;
  t48408 = 0.1999997000018*t533;
  t48428 = 0.2*t497;
  t48429 = -0.05*t6885;
  t48430 = t48408 + t48428 + t48429;
  t48436 = t1162*t48430;
  t48440 = -1. + t1165;
  t48447 = 0.1*t48440;
  t48450 = -5.4e-18*t533;
  t48451 = 1.5e-7*t6885;
  t48463 = t48447 + t48450 + t48451;
  t48493 = -1.*t48463*t4864;
  t48511 = t48436 + t48493;
  t48549 = t48289*t7144;
  t48552 = t6696*t48511;
  t48555 = t48549 + t48552;
  t48404 = -1.*t48289*t7144;
  t48517 = -1.*t6696*t48511;
  t48541 = t48404 + t48517;
  t49045 = t6696*t48289;
  t49051 = -1.*t7144*t48511;
  t49070 = t49045 + t49051;
  t48122 = -1.000000000009*t6885*t7144;
  t48182 = t6696*t7719;
  t48240 = t48122 + t48182;
  t48908 = t1162*t48463;
  t49013 = t48430*t4864;
  t49015 = t48908 + t49013;
  t48640 = -1.*t1162;
  t48666 = t46741*t4864;
  t48886 = t48640 + t48666;
  t49141 = t12344*t7144;
  t49142 = t6696*t12420;
  t49144 = t49141 + t49142;
  t49318 = -0.2000000000018*t6885;
  t49425 = t6885*t18225;
  t49430 = -3.e-6*t6885*t22069;
  t49433 = t12344*t28042;
  t49448 = t49318 + t49425 + t49430 + t49433;
  t49516 = 0.2000000000018*t533;
  t49528 = t497*t18225;
  t49553 = 3.e-6*t533*t22069;
  t49565 = -1.*t6885*t28042;
  t49577 = t49516 + t49528 + t49553 + t49565;
  t49584 = t1162*t49577;
  t49622 = -6.000000000054e-7*t533;
  t49624 = 3.e-6*t533*t18225;
  t49626 = t1080*t22069;
  t49633 = 3.e-6*t6885*t28042;
  t49647 = t49622 + t49624 + t49626 + t49633;
  t49662 = -1.*t49647*t4864;
  t49664 = t49584 + t49662;
  t49926 = t6696*t49448;
  t50029 = -1.*t7144*t49664;
  t50031 = t49926 + t50029;
  t50056 = t34155*t7144;
  t50066 = t6696*t34217;
  t50085 = t50056 + t50066;
  t49849 = t49448*t7144;
  t49861 = t6696*t49664;
  t49872 = t49849 + t49861;
  t49508 = -1.*t49448*t7144;
  t49667 = -1.*t6696*t49664;
  t49794 = t49508 + t49667;
  t49282 = t41563*t7144;
  t49284 = t6696*t41590;
  t49297 = t49282 + t49284;
  t50169 = t1162*t49647;
  t50186 = t49577*t4864;
  t50187 = t50169 + t50186;
  t50322 = t43864*t7144;
  t50331 = t6696*t44401;
  t50332 = t50322 + t50331;
  t51387 = -1.*t1117*t1162;
  t51392 = -1.*t4435*t4864;
  t51399 = t51387 + t51392;
  t51428 = -3.e-6*t1162*t6885;
  t51431 = t6885*t4864;
  t51434 = t51428 + t51431;
  t51444 = -1.*t1162*t33198;
  t51448 = -1.*t33244*t4864;
  t51450 = t51444 + t51448;
  t51467 = -1.*t1162*t39162;
  t51469 = -1.*t40449*t4864;
  t51476 = t51467 + t51469;
  t51487 = -1.*t1162*t42691;
  t51493 = -1.*t42897*t4864;
  t51494 = t51487 + t51493;
  t46812 = -3.e-6*t33028;
  t46814 = t46793 + t12854 + t46812 + t14025;
  t47713 = -3.e-6*t14733;
  t47755 = t46793 + t12854 + t47713 + t12952;
  t47859 = -3.e-6*t14207;
  t47888 = -3.e-6*t31439;
  t48011 = -1. + t18532 + t47859 + t13165 + t47888;
  t49017 = t48886*t49015;
  t49119 = -1.*t5396*t49015;
  t51754 = -1.*t1162*t48463;
  t51764 = -1.*t48430*t4864;
  t51768 = t51754 + t51764;
  t49170 = -1.*t48886*t49015;
  t51806 = -1.*t46741*t4864;
  t51809 = t1162 + t51806;
  t49221 = t49015*t12199;
  t50202 = -1.*t33313*t50187;
  t52012 = -1.*t1162*t49647;
  t52016 = -1.*t49577*t4864;
  t52019 = t52012 + t52016;
  t50279 = t40708*t50187;
  t50536 = t33313*t50187;
  t50775 = -1.*t50187*t43188;
  t51002 = -1.*t40708*t50187;
  t51128 = t50187*t43188;
  t49030 = t6696*t46754*t48555;
  t49084 = -1.*t7144*t46754*t49070;
  t49086 = t49017 + t49030 + t49084;
  t51776 = -1.*t7719*t49015;
  t51784 = -1.*t5396*t48511;
  t51803 = t46754*t49015;
  t51818 = t48886*t48511;
  t49121 = -1.*t48240*t48555;
  t49124 = -1.*t11040*t49070;
  t49126 = t49119 + t49121 + t49124;
  t49173 = -1.*t6696*t46754*t48555;
  t49174 = t7144*t46754*t49070;
  t49177 = t49170 + t49173 + t49174;
  t53446 = Power(t6696,2);
  t53466 = Power(t7144,2);
  t51860 = -1.*t46754*t49015;
  t51900 = -1.*t48886*t48511;
  t51937 = t48511*t12199;
  t51943 = t49015*t12420;
  t49226 = t48555*t49144;
  t49234 = t49070*t12606;
  t49249 = t49221 + t49226 + t49234;
  t52022 = -1.*t34217*t50187;
  t52048 = -1.*t33313*t49664;
  t52081 = t41590*t50187;
  t52089 = t40708*t49664;
  t50209 = -1.*t50085*t49872;
  t50210 = -1.*t34651*t50031;
  t50214 = t50202 + t50209 + t50210;
  t50288 = t49297*t49872;
  t50292 = t41652*t50031;
  t50295 = t50279 + t50288 + t50292;
  t52164 = t34217*t50187;
  t52176 = t33313*t49664;
  t50537 = t50085*t49872;
  t50547 = t34651*t50031;
  t50577 = t50536 + t50537 + t50547;
  t52238 = -1.*t50187*t44401;
  t52267 = -1.*t49664*t43188;
  t50776 = -1.*t49872*t50332;
  t50779 = -1.*t50031*t44525;
  t50786 = t50775 + t50776 + t50779;
  t52289 = -1.*t41590*t50187;
  t52295 = -1.*t40708*t49664;
  t51006 = -1.*t49297*t49872;
  t51037 = -1.*t41652*t50031;
  t51046 = t51002 + t51006 + t51037;
  t52434 = t50187*t44401;
  t52468 = t49664*t43188;
  t51138 = t49872*t50332;
  t51143 = t50031*t44525;
  t51153 = t51128 + t51138 + t51143;
  t67143 = -0.05*t497;
  t67212 = -2.999982e-7*t6885;
  t67634 = t67143 + t67212;
  t69305 = -3.e-6*t497*t23023;
  t69307 = -1.000000000009*t6885*t23330;
  t69448 = t39334 + t69305 + t69307;
  t51992 = -1.*t34155*t49448;
  t69102 = -1.000000000009*t6885*t33012;
  t69114 = -3.e-6*t497*t33194;
  t69168 = t69102 + t33226 + t69114;
  t70068 = 0.2000000000018*t6885;
  t70090 = -1.*t6885*t18225;
  t70096 = 3.e-6*t6885*t22069;
  t70117 = -1.*t497*t28042;
  t70122 = t70068 + t70090 + t70096 + t70117;
  t70147 = -6.000000000054e-7*t6885;
  t70149 = 3.e-6*t6885*t18225;
  t70187 = -9.e-12*t6885*t22069;
  t70189 = 3.e-6*t497*t28042;
  t70203 = t70147 + t70149 + t70187 + t70189;
  t70232 = -0.2000000000018*t497;
  t70243 = -3.e-6*t497*t22069;
  t70245 = -1.000000000009*t6885*t28042;
  t70248 = t70232 + t49528 + t70243 + t70245;
  t52098 = t41563*t49448;
  t69511 = -3.e-6*t497*t14549;
  t69512 = -1.000000000009*t6885*t30418;
  t69524 = t69511 + t69512 + t42856;
  t52127 = t34155*t49448;
  t71613 = -1.*t497*t33012;
  t71952 = -1.*t6885*t33028;
  t72166 = 3.e-6*t6885*t33194;
  t72176 = t71613 + t71952 + t72166;
  t72232 = 3.e-6*t497*t33012;
  t72265 = 3.e-6*t6885*t33028;
  t72267 = -9.e-12*t6885*t33194;
  t72269 = t72232 + t72265 + t72267;
  t52190 = -1.*t49448*t43864;
  t72378 = -1.*t6885*t14733;
  t72395 = 3.e-6*t6885*t23023;
  t72423 = -1.*t497*t23330;
  t72442 = t72378 + t72395 + t72423;
  t72678 = 3.e-6*t6885*t14733;
  t72679 = -9.e-12*t6885*t23023;
  t72687 = 3.e-6*t497*t23330;
  t72828 = t72678 + t72679 + t72687;
  t52299 = -1.*t41563*t49448;
  t52383 = t49448*t43864;
  t73306 = 3.e-6*t6885*t14549;
  t73307 = -1.*t497*t30418;
  t73309 = -1.*t6885*t31439;
  t73917 = t73306 + t73307 + t73309;
  t74014 = -9.e-12*t6885*t14549;
  t74020 = 3.e-6*t497*t30418;
  t74024 = 3.e-6*t6885*t31439;
  t74038 = t74014 + t74020 + t74024;
  t74694 = -1.*t497*t1162;
  t74701 = -3.e-6*t497*t4864;
  t74702 = t74694 + t74701;
  t74714 = 1.000000000009*t1162*t6885;
  t74715 = 3.000000000027e-6*t6885*t4864;
  t74716 = t74714 + t74715;
  t74847 = t1162*t72176;
  t74853 = -1.*t72269*t4864;
  t74855 = t74847 + t74853;
  t74864 = t1162*t72442;
  t74867 = -1.*t72828*t4864;
  t74868 = t74864 + t74867;
  t74878 = t1162*t73917;
  t74879 = -1.*t74038*t4864;
  t74883 = t74878 + t74879;
  t74899 = 3.e-6*t497*t1162;
  t74900 = -1.*t497*t4864;
  t74902 = t74899 + t74900;
  t74905 = -1.*t7144*t74702;
  t74906 = t6976 + t74905;
  t74910 = -3.000000000027e-6*t1162*t6885;
  t74911 = 1.000000000009*t6885*t4864;
  t74912 = t74910 + t74911;
  t74914 = -1.000000000009*t497*t6696;
  t74941 = -1.*t7144*t74716;
  t74945 = t74914 + t74941;
  t74951 = t1162*t72269;
  t74953 = t72176*t4864;
  t74954 = t74951 + t74953;
  t74957 = t6696*t69168;
  t74958 = -1.*t7144*t74855;
  t74960 = t74957 + t74958;
  t74966 = t1162*t72828;
  t74968 = t72442*t4864;
  t74969 = t74966 + t74968;
  t74971 = t6696*t69448;
  t74976 = -1.*t7144*t74868;
  t74984 = t74971 + t74976;
  t75019 = t1162*t74038;
  t75020 = t73917*t4864;
  t75024 = t75019 + t75020;
  t75083 = t6696*t69524;
  t75137 = -1.*t7144*t74883;
  t75145 = t75083 + t75137;
  t67131 = 1.5e-7*t497;
  t67926 = 8.999946e-13*t6885;
  t75242 = t67131 + t67926;
  t51829 = -1.*t46754*t48511;
  t51832 = t49170 + t51829;
  t75243 = t1162*t75242;
  t75244 = t67634*t4864;
  t75293 = t75243 + t75244;
  t75311 = t1162*t67634;
  t75331 = -1.*t75242*t4864;
  t75342 = t75311 + t75331;
  t51727 = t46754*t48511;
  t51732 = t49017 + t51727;
  t75356 = 2.999982e-7*t497;
  t75357 = -0.05000000000045*t6885;
  t75362 = t75356 + t75357;
  t51996 = -1.*t34217*t49664;
  t51998 = t51992 + t50202 + t51996;
  t69807 = -1.*t69168*t49448;
  t71406 = -1.*t34155*t70248;
  t72330 = t69448*t49448;
  t72342 = t41563*t70248;
  t75417 = t1162*t70203;
  t75418 = t70122*t4864;
  t75419 = t75417 + t75418;
  t75421 = t1162*t70122;
  t75422 = -1.*t70203*t4864;
  t75424 = t75421 + t75422;
  t52100 = t41590*t49664;
  t52105 = t52098 + t50279 + t52100;
  t52132 = t34217*t49664;
  t52134 = t52127 + t50536 + t52132;
  t73014 = t69168*t49448;
  t73017 = t34155*t70248;
  t52193 = -1.*t49664*t44401;
  t52203 = t52190 + t52193 + t50775;
  t73300 = -1.*t49448*t69524;
  t74089 = -1.*t70248*t43864;
  t74112 = -1.*t69448*t49448;
  t74356 = -1.*t41563*t70248;
  t52328 = -1.*t41590*t49664;
  t52336 = t52299 + t51002 + t52328;
  t52406 = t49664*t44401;
  t52408 = t52383 + t52406 + t51128;
  t74589 = t49448*t69524;
  t74643 = t70248*t43864;
  t74726 = t69168*t7144;
  t74856 = t6696*t74855;
  t74859 = t74726 + t74856;
  t74863 = t69448*t7144;
  t74872 = t6696*t74868;
  t74874 = t74863 + t74872;
  t74877 = t69524*t7144;
  t74886 = t6696*t74883;
  t74889 = t74877 + t74886;
  t75294 = -1.*t48886*t75293;
  t74704 = t6696*t74702;
  t74705 = t48122 + t74704;
  t75366 = t74902*t49015;
  t75378 = t75293*t12199;
  t75575 = t75362*t7144;
  t75576 = t6696*t75342;
  t75577 = t75575 + t75576;
  t75586 = t6696*t75362;
  t75587 = -1.*t7144*t75342;
  t75588 = t75586 + t75587;
  t75389 = t48886*t75293;
  t74712 = -1.000000000009*t497*t7144;
  t74717 = t6696*t74716;
  t74718 = t74712 + t74717;
  t75402 = -1.*t5396*t75293;
  t75407 = -1.*t49015*t74912;
  t75420 = -1.*t33313*t75419;
  t75436 = -1.*t74954*t50187;
  t75441 = t40708*t75419;
  t75448 = t74969*t50187;
  t75636 = t70248*t7144;
  t75637 = t6696*t75424;
  t75638 = t75636 + t75637;
  t75640 = t6696*t70248;
  t75641 = -1.*t7144*t75424;
  t75642 = t75640 + t75641;
  t75466 = t33313*t75419;
  t75473 = t74954*t50187;
  t75527 = -1.*t75419*t43188;
  t75530 = -1.*t50187*t75024;
  t75542 = -1.*t40708*t75419;
  t75546 = -1.*t74969*t50187;
  t75559 = t75419*t43188;
  t75560 = t50187*t75024;
  t75804 = -3.e-6*t12808;
  t75805 = 9.e-12*t12866;
  t75827 = 3.e-6*t12808;
  t75848 = -3.000000000054e-6*t12866;
  t75852 = t75804 + t75848;
  t75856 = t75827 + t14025;
  t75831 = t75827 + t12952;
  t75900 = t75804 + t14025;
  t75862 = -9.e-12*t12866;
  t75841 = t12814 + t75805;
  t75824 = t75804 + t12952;
  t75857 = 0.0999991*t75856;
  t75863 = t12814 + t75862;
  t75885 = 0.1*t75863;
  t75886 = 9.e-13 + t75857 + t75885;
  t75972 = t75827 + t75848;
  t75945 = 3.e-6*t75824;
  t75901 = 0.2*t75900;
  t75912 = 0.1*t75856;
  t75914 = 0.2*t75831;
  t75916 = 1.7999838e-12*t12866;
  t75930 = 3.e-7 + t75901 + t75912 + t75914 + t75916;
  t75934 = 0.0999991*t75900;
  t75935 = t12808 + t75862;
  t75937 = 0.2*t75935;
  t75938 = 0.2*t75841;
  t75939 = 0.1000000000009*t12866;
  t75940 = 9.e-13 + t75934 + t75937 + t75938 + t75939;
  t75966 = 3.e-6*t75831;
  t75955 = 1.000000000009*t12866;
  t75963 = t75945 + t75955;
  t75887 = t14733*t75886;
  t75888 = t22069*t75852;
  t75933 = t23023*t75930;
  t75941 = t75940*t23330;
  t75965 = t18225*t75963;
  t75967 = t12808 + t75966 + t75862;
  t75969 = t75967*t28042;
  t75970 = t75887 + t75888 + t75933 + t75941 + t75965 + t75969;
  t75988 = t12814 + t75945 + t75862;
  t75974 = -1.*t75886*t33028;
  t75985 = -1.*t22069*t75972;
  t75999 = -1.*t18225*t75988;
  t76010 = -1.*t75930*t33194;
  t76014 = -1.*t33012*t75940;
  t76016 = t75966 + t75955;
  t76022 = -1.*t76016*t28042;
  t76030 = t75974 + t75985 + t75999 + t76010 + t76014 + t76022;
  t75832 = -3.e-6*t75831;
  t76048 = -1.8e-11*t12866;
  t76051 = t75945 + t75966 + t76048;
  t75806 = t12808 + t75805;
  t75807 = 3.e-6*t75806;
  t75808 = -2.7e-17*t12866;
  t75809 = t75804 + t75807 + t75808;
  t76053 = t75886*t33028;
  t76054 = t22069*t75972;
  t76055 = t18225*t75988;
  t76056 = t75930*t33194;
  t76058 = t33012*t75940;
  t76059 = t76016*t28042;
  t76060 = t76053 + t76054 + t76055 + t76056 + t76058 + t76059;
  t76062 = -1.*t22069*t76051;
  t76063 = -1.*t18225*t75809;
  t76064 = -1.*t14549*t75930;
  t76065 = -1.*t30418*t75940;
  t76067 = 3.e-6*t75841;
  t76068 = t75827 + t76067 + t75808;
  t76070 = -1.*t76068*t28042;
  t76072 = -1.*t75886*t31439;
  t76074 = t76062 + t76063 + t76064 + t76065 + t76070 + t76072;
  t76104 = -1.*t14733*t75886;
  t76106 = -1.*t22069*t75852;
  t76107 = -1.*t23023*t75930;
  t76108 = -1.*t75940*t23330;
  t76109 = -1.*t18225*t75963;
  t76110 = -1.*t75967*t28042;
  t76112 = t76104 + t76106 + t76107 + t76108 + t76109 + t76110;
  t76117 = t22069*t76051;
  t76118 = t18225*t75809;
  t76122 = t14549*t75930;
  t76184 = t30418*t75940;
  t76186 = t76068*t28042;
  t76187 = t75886*t31439;
  t76188 = t76117 + t76118 + t76122 + t76184 + t76186 + t76187;
  t76210 = 3.000000000054e-6*t12866;
  t75823 = -3.e-6*t75809;
  t75826 = -3.e-6*t75824;
  t75835 = 1.8e-11*t12866;
  t75837 = t75823 + t75826 + t75832 + t75835;
  t76216 = -3.e-6*t6885*t75852;
  t76222 = t12344*t75967;
  t76226 = t6885*t75963;
  t76229 = t76216 + t76222 + t76226;
  t69531 = -1.*t33244*t49577;
  t69562 = -1.*t33198*t49647;
  t69653 = t51992 + t69531 + t69562;
  t76231 = -3.e-6*t6885*t75972;
  t76232 = t6885*t75988;
  t76260 = t12344*t76016;
  t76267 = t76231 + t76232 + t76260;
  t72932 = t40449*t49577;
  t72942 = t39162*t49647;
  t72973 = t52098 + t72932 + t72942;
  t76353 = t6885*t75886;
  t76354 = -3.e-6*t6885*t75930;
  t76358 = t12344*t75940;
  t76359 = t76353 + t76354 + t76358;
  t76439 = t497*t75886;
  t76440 = 3.e-6*t533*t75930;
  t76469 = -1.*t6885*t75940;
  t76470 = t76439 + t76440 + t76469;
  t77523 = 3.e-6*t533*t75886;
  t78057 = t1080*t75930;
  t78060 = 3.e-6*t6885*t75940;
  t78468 = t77523 + t78057 + t78060;
  t75843 = -3.e-6*t75841;
  t75845 = 2.7e-17*t12866;
  t75846 = t75804 + t75843 + t75845;
  t75847 = 0.2*t75846;
  t75854 = -1.*t75852*t42216;
  t75971 = -1.*t33194*t75970;
  t75973 = -1.*t75972*t42518;
  t76032 = -1.*t23023*t76030;
  t76034 = t75963*t42216;
  t76037 = t33028*t75970;
  t76038 = t75988*t42518;
  t76040 = t14733*t76030;
  t76042 = t76034 + t76037 + t76038 + t76040;
  t76043 = -3.e-6*t76042;
  t76044 = t75847 + t75854 + t75971 + t75973 + t76032 + t76043;
  t76275 = -3.e-6*t6885*t76051;
  t76290 = t12344*t76068;
  t76347 = t6885*t75809;
  t76348 = t76275 + t76290 + t76347;
  t73004 = t33244*t49577;
  t73008 = t33198*t49647;
  t73011 = t52127 + t73004 + t73008;
  t80185 = 3.e-6*t533*t75972;
  t80342 = t497*t75988;
  t80348 = -1.*t6885*t76016;
  t80356 = t80185 + t80342 + t80348;
  t80388 = t1080*t75972;
  t80397 = 3.e-6*t533*t75988;
  t80399 = 3.e-6*t6885*t76016;
  t80400 = t80388 + t80397 + t80399;
  t73291 = -1.*t49647*t42691;
  t73292 = -1.*t49577*t42897;
  t73293 = t73291 + t73292 + t52190;
  t76046 = t12814 + t75832 + t75805;
  t76047 = 0.2*t76046;
  t76052 = -1.*t76051*t37572;
  t76061 = -1.*t14549*t76060;
  t76075 = -1.*t33194*t76074;
  t76076 = -1.*t75972*t38279;
  t76077 = t75809*t37572;
  t76078 = t31439*t76060;
  t76079 = t33028*t76074;
  t76081 = t75988*t38279;
  t76083 = t76077 + t76078 + t76079 + t76081;
  t76095 = -3.e-6*t76083;
  t76096 = t76047 + t76052 + t76061 + t76075 + t76076 + t76095;
  t74498 = -1.*t40449*t49577;
  t74500 = -1.*t39162*t49647;
  t74505 = t52299 + t74498 + t74500;
  t78590 = 3.e-6*t533*t75852;
  t78672 = -1.*t6885*t75967;
  t78897 = t497*t75963;
  t79335 = t78590 + t78672 + t78897;
  t79532 = t1080*t75852;
  t79571 = 3.e-6*t6885*t75967;
  t79575 = 3.e-6*t533*t75963;
  t79764 = t79532 + t79571 + t79575;
  t80478 = 3.e-6*t533*t76051;
  t80479 = -1.*t6885*t76068;
  t80488 = t497*t75809;
  t80559 = t80478 + t80479 + t80488;
  t80585 = t1080*t76051;
  t80592 = 3.e-6*t6885*t76068;
  t80604 = 3.e-6*t533*t75809;
  t80605 = t80585 + t80592 + t80604;
  t74521 = t49647*t42691;
  t74523 = t49577*t42897;
  t74544 = t74521 + t74523 + t52383;
  t76098 = -1.000000000009*t12866;
  t76099 = t75832 + t76098;
  t76103 = 0.2*t76099;
  t76115 = -1.*t14549*t76112;
  t76116 = -1.*t76051*t29343;
  t76192 = -1.*t23023*t76188;
  t76194 = -1.*t75852*t32397;
  t76196 = t31439*t76112;
  t76197 = t75809*t29343;
  t76198 = t14733*t76188;
  t76202 = t75963*t32397;
  t76203 = t76196 + t76197 + t76198 + t76202;
  t76204 = -3.e-6*t76203;
  t76205 = t76103 + t76115 + t76116 + t76192 + t76194 + t76204;
  t76209 = -3.e-6*t75988;
  t76211 = t75804 + t76209 + t76210;
  t76213 = -3.e-6*t75963;
  t76214 = t75827 + t76210 + t76213;
  t80862 = t1162*t80559;
  t80864 = -1.*t80605*t4864;
  t80866 = t80862 + t80864;
  t80876 = t1162*t79335;
  t80877 = -1.*t79764*t4864;
  t80878 = t80876 + t80877;
  t80907 = t1162*t80356;
  t80914 = -1.*t80400*t4864;
  t80921 = t80907 + t80914;
  t80960 = t1162*t80605;
  t80967 = t80559*t4864;
  t80968 = t80960 + t80967;
  t80984 = t6696*t76348;
  t80990 = -1.*t7144*t80866;
  t80991 = t80984 + t80990;
  t44885 = t6482*t33313;
  t44887 = -1.*t391*t34651;
  t44889 = t44885 + t44887;
  t44897 = t6482*t40708;
  t44908 = -1.*t391*t41652;
  t44918 = t44897 + t44908;
  t81007 = t1162*t79764;
  t81008 = t79335*t4864;
  t81009 = t81007 + t81008;
  t81012 = t6696*t76229;
  t81013 = -1.*t7144*t80878;
  t81014 = t81012 + t81013;
  t81019 = t1162*t80400;
  t81023 = t80356*t4864;
  t81025 = t81019 + t81023;
  t81027 = t6696*t76267;
  t81028 = -1.*t7144*t80921;
  t81030 = t81027 + t81028;
  t44964 = t6482*t43188;
  t44973 = -1.*t391*t44525;
  t44997 = t44964 + t44973;
  t76372 = t76359*t41563;
  t78588 = t76229*t49448;
  t79838 = -1.*t34155*t76359;
  t80174 = -1.*t76267*t49448;
  t81163 = t1162*t78468;
  t81165 = t76470*t4864;
  t81167 = t81163 + t81165;
  t81175 = t1162*t76470;
  t81179 = -1.*t78468*t4864;
  t81186 = t81175 + t81179;
  t80441 = t34155*t76359;
  t80451 = t76267*t49448;
  t80465 = -1.*t76348*t49448;
  t80626 = -1.*t76359*t43864;
  t80737 = -1.*t76359*t41563;
  t80742 = -1.*t76229*t49448;
  t80755 = t76348*t49448;
  t80762 = t76359*t43864;
  t80861 = t76348*t7144;
  t80869 = t6696*t80866;
  t80870 = t80861 + t80869;
  t80874 = t76229*t7144;
  t80879 = t6696*t80878;
  t80903 = t80874 + t80879;
  t80905 = t76267*t7144;
  t80922 = t6696*t80921;
  t80923 = t80905 + t80922;
  t81172 = t81167*t40708;
  t81190 = t81009*t50187;
  t81205 = -1.*t33313*t81167;
  t81214 = -1.*t81025*t50187;
  t84448 = t76359*t7144;
  t84449 = t6696*t81186;
  t84451 = t84448 + t84449;
  t84454 = t6696*t76359;
  t84456 = -1.*t7144*t81186;
  t86213 = t84454 + t84456;
  t82851 = t33313*t81167;
  t82884 = t81025*t50187;
  t83177 = -1.*t80968*t50187;
  t83289 = -1.*t81167*t43188;
  t83420 = -1.*t81167*t40708;
  t83422 = -1.*t81009*t50187;
  t83479 = t80968*t50187;
  t83493 = t81167*t43188;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.0013000000000117*(-1.*t391*t5396 - 1.*t11040*t6482) - 7.8000468000702e-9*(-1.*t12199*t391 - 1.*t12606*t6482) - 0.043*t32987*(-1.*t33313*t391 - 1.*t34651*t6482) - 0.043*t38878*(-1.*t391*t40708 - 1.*t41652*t6482) - 0.043*t42635*(-1.*t391*t43188 - 1.*t44525*t6482))*var2[1] - 0.5*(-0.043*t32987*t44889 - 0.043*t38878*t44918 - 0.043*t42635*t44997 - 7.8000468000702e-9*(-1.*t12606*t391 + t12199*t6482) - 0.0013000000000117*(-1.*t11040*t391 + t5396*t6482))*var2[2])*var2[15];
  p_output1[4]=(-0.5*(-0.0013000000000117*t11040 - 7.8000468000702e-9*t12606 - 0.043*t32987*t34651 - 0.043*t38878*t41652 - 0.043*t42635*t44525)*var2[0] - 0.5*(0.0013000000000117*t391*t45233 + 7.8000468000702e-9*t391*t45286 + 0.043*t32987*t391*t45294 + 0.043*t38878*t391*t45484 + 0.043*t391*t42635*t45611)*var2[1] - 0.5*(-0.0013000000000117*t45233*t6482 - 7.8000468000702e-9*t45286*t6482 - 0.043*t32987*t45294*t6482 - 0.043*t38878*t45484*t6482 - 0.043*t42635*t45611*t6482)*var2[2] - 0.5*(-0.000271*t34651*t46814 - 2.e-6*t41652*t47755 - 0.000271*t44525*t48011 - 0.043*t42635*((t41652*t49794 + t41652*t49872 + t45484*t50031 + t49297*t50031)*t50085 + t49297*(-1.*t34651*t49794 - 1.*t34651*t49872 - 1.*t45294*t50031 - 1.*t50031*t50085) + t41652*t50214 + t34651*t50295) - 0.043*t38878*((t34651*t49794 + t34651*t49872 + t45294*t50031 + t50031*t50085)*t50332 + t50085*(-1.*t44525*t49794 - 1.*t44525*t49872 - 1.*t45611*t50031 - 1.*t50031*t50332) + t44525*t50577 + t34651*t50786) - 0.043*t32987*((-1.*t41652*t49794 - 1.*t41652*t49872 - 1.*t45484*t50031 - 1.*t49297*t50031)*t50332 + t49297*(t44525*t49794 + t44525*t49872 + t45611*t50031 + t50031*t50332) + t44525*t51046 + t41652*t51153) + 0.000046000000000414*t46754*t7144 - 7.8000468000702e-9*(t11040*t49086 + t46754*(-1.*t11040*t48541 - 1.*t11040*t48555 - 1.*t45233*t49070 - 1.*t48240*t49070)*t6696 - 1.*t46754*t49126*t7144 + t48240*(-1.*t46754*t48541*t7144 - 1.*t46754*t48555*t7144)) - 0.0013000000000117*(t12606*t49177 + t46754*(t12606*t48541 + t12606*t48555 + t45286*t49070 + t49070*t49144)*t6696 - 1.*t46754*t49249*t7144 + t49144*(t46754*t48541*t7144 + t46754*t48555*t7144)))*var2[3])*var2[15];
  p_output1[5]=(-0.5*(-0.0013000000000117*t51399*t6696 - 7.8000468000702e-9*t51434*t6696 - 0.043*t32987*t51450*t6696 - 0.043*t38878*t51476*t6696 - 0.043*t42635*t51494*t6696)*var2[0] - 0.5*(-7.8000468000702e-9*(t12420*t6482 + t391*t51434*t7144) - 0.043*t32987*(t34217*t6482 + t391*t51450*t7144) - 0.043*t38878*(t41590*t6482 + t391*t51476*t7144) - 0.043*t42635*(t44401*t6482 + t391*t51494*t7144) - 0.0013000000000117*(t391*t51399*t7144 + t6482*t7719))*var2[1] - 0.5*(-7.8000468000702e-9*(t12420*t391 - 1.*t51434*t6482*t7144) - 0.043*t32987*(t34217*t391 - 1.*t51450*t6482*t7144) - 0.043*t38878*(t391*t41590 - 1.*t51476*t6482*t7144) - 0.043*t42635*(t391*t44401 - 1.*t51494*t6482*t7144) - 0.0013000000000117*(-1.*t51399*t6482*t7144 + t391*t7719))*var2[2] - 0.5*(-0.000271*t46814*t51450*t6696 - 2.e-6*t47755*t51476*t6696 - 0.000271*t48011*t51494*t6696 - 0.000046000000000414*t51809*t6696 - 7.8000468000702e-9*(t49086*t51399*t6696 + t49126*t51809*t6696 + t46754*t6696*(t51776 + t51784 - 1.*t48555*t51399*t6696 - 1.*t48240*t51768*t6696 + t49070*t51399*t7144 + t11040*t51768*t7144) + t48240*(t51803 + t51818 + t46754*t51768*t53446 + t46754*t51768*t53466 + t48555*t51809*t6696 - 1.*t49070*t51809*t7144)) - 0.0013000000000117*(t49177*t51434*t6696 + t49249*t51809*t6696 + t46754*t6696*(t51937 + t51943 + t48555*t51434*t6696 + t49144*t51768*t6696 - 1.*t49070*t51434*t7144 - 1.*t12606*t51768*t7144) + t49144*(t51860 + t51900 - 1.*t46754*t51768*t53446 - 1.*t46754*t51768*t53466 - 1.*t48555*t51809*t6696 + t49070*t51809*t7144)) - 0.043*t42635*(t50295*t51450*t6696 + t50214*t51476*t6696 + t49297*(t52022 + t52048 - 1.*t49872*t51450*t6696 - 1.*t50085*t52019*t6696 + t50031*t51450*t7144 + t34651*t52019*t7144) + t50085*(t52081 + t52089 + t49872*t51476*t6696 + t49297*t52019*t6696 - 1.*t50031*t51476*t7144 - 1.*t41652*t52019*t7144)) - 0.043*t32987*(t51153*t51476*t6696 + t51046*t51494*t6696 + t50332*(t52289 + t52295 - 1.*t49872*t51476*t6696 - 1.*t49297*t52019*t6696 + t50031*t51476*t7144 + t41652*t52019*t7144) + t49297*(t52434 + t52468 + t49872*t51494*t6696 + t50332*t52019*t6696 - 1.*t50031*t51494*t7144 - 1.*t44525*t52019*t7144)) - 0.043*t38878*(t50786*t51450*t6696 + t50577*t51494*t6696 + t50332*(t52164 + t52176 + t49872*t51450*t6696 + t50085*t52019*t6696 - 1.*t50031*t51450*t7144 - 1.*t34651*t52019*t7144) + t50085*(t52238 + t52267 - 1.*t49872*t51494*t6696 - 1.*t50332*t52019*t6696 + t50031*t51494*t7144 + t44525*t52019*t7144)))*var2[3] - 0.5*(-0.000046000000000414*t46754 - 0.000271*t34217*t46814 - 2.e-6*t41590*t47755 - 0.000271*t44401*t48011 - 0.0013000000000117*(t46754*(t12344*t48289 + t12420*t48511 + t49221) + t12420*t51832 + t12199*(-1.*t46754*t51768 - 1.*t48511*t51809 + t51860 + t51900) + t48886*(t48511*t51434 + t12420*t51768 + t51937 + t51943)) - 0.043*t42635*(t41590*t51998 + t40708*(-1.*t49664*t51450 - 1.*t34217*t52019 + t52022 + t52048) + t33313*(t49664*t51476 + t41590*t52019 + t52081 + t52089) + t34217*t52105) - 0.043*t38878*(t44401*t52134 + t43188*(t49664*t51450 + t34217*t52019 + t52164 + t52176) + t34217*t52203 + t33313*(-1.*t49664*t51494 - 1.*t44401*t52019 + t52238 + t52267)) - 0.043*t32987*(t43188*(-1.*t49664*t51476 - 1.*t41590*t52019 + t52289 + t52295) + t44401*t52336 + t41590*t52408 + t40708*(t49664*t51494 + t44401*t52019 + t52434 + t52468)) - 7.8000468000702e-9*((t46754*t51768 + t51803 + t48511*t51809 + t51818)*t5396 + t51732*t7719 + t46754*(t49119 + 1.000000000009*t48289*t6885 - 1.*t48511*t7719) + t48886*(-1.*t48511*t51399 + t51776 + t51784 - 1.*t51768*t7719)))*var2[4])*var2[15];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=(-0.5*(-7.8000468000702e-9*t74705 - 0.0013000000000117*t74718 - 0.043*t32987*t74859 - 0.043*t38878*t74874 - 0.043*t42635*t74889)*var2[0] - 0.5*(-7.8000468000702e-9*(t6482*t74902 - 1.*t391*t74906) - 0.0013000000000117*(t6482*t74912 - 1.*t391*t74945) - 0.043*t32987*(t6482*t74954 - 1.*t391*t74960) - 0.043*t38878*(t6482*t74969 - 1.*t391*t74984) - 0.043*t42635*(t6482*t75024 - 1.*t391*t75145))*var2[1] - 0.5*(-7.8000468000702e-9*(t391*t74902 + t6482*t74906) - 0.0013000000000117*(t391*t74912 + t6482*t74945) - 0.043*t32987*(t391*t74954 + t6482*t74960) - 0.043*t38878*(t391*t74969 + t6482*t74984) - 0.043*t42635*(t391*t75024 + t6482*t75145))*var2[2] - 0.5*(-0.000271*t46814*t74859 - 2.e-6*t47755*t74874 - 0.000271*t48011*t74889 - 7.8000468000702e-9*(t49086*t74718 + t46754*t6696*(-1.*t48555*t74718 - 1.*t49070*t74945 + t75402 + t75407 - 1.*t48240*t75577 - 1.*t11040*t75588) + t48240*(t75389 + t46754*t6696*t75577 - 1.*t46754*t7144*t75588)) - 0.0013000000000117*(t49177*t74705 + t46754*t6696*(t48555*t74705 + t49070*t74906 + t75366 + t75378 + t49144*t75577 + t12606*t75588) + t49144*(t75294 - 1.*t46754*t6696*t75577 + t46754*t7144*t75588)) - 0.043*t42635*(t50295*t74859 + t50214*t74874 + t49297*(-1.*t49872*t74859 - 1.*t50031*t74960 + t75420 + t75436 - 1.*t50085*t75638 - 1.*t34651*t75642) + t50085*(t49872*t74874 + t50031*t74984 + t75441 + t75448 + t49297*t75638 + t41652*t75642)) - 0.043*t38878*(t50786*t74859 + t50577*t74889 + t50332*(t49872*t74859 + t50031*t74960 + t75466 + t75473 + t50085*t75638 + t34651*t75642) + t50085*(-1.*t49872*t74889 - 1.*t50031*t75145 + t75527 + t75530 - 1.*t50332*t75638 - 1.*t44525*t75642)) - 0.043*t32987*(t51153*t74874 + t51046*t74889 + t50332*(-1.*t49872*t74874 - 1.*t50031*t74984 + t75542 + t75546 - 1.*t49297*t75638 - 1.*t41652*t75642) + t49297*(t49872*t74889 + t50031*t75145 + t75559 + t75560 + t50332*t75638 + t44525*t75642)))*var2[3] - 0.5*(-0.000271*t46814*t74954 - 2.e-6*t47755*t74969 - 0.000271*t48011*t75024 - 0.0013000000000117*(t51832*t74902 + t12199*(t75294 - 1.*t46754*t75342) + t48886*(-1.000000000009*t48289*t6885 + t48511*t74702 + t12420*t75342 + t12344*t75362 + t75366 + t75378)) - 0.043*t42635*(t52105*t74954 + t51998*t74969 + t40708*(t69807 + t71406 - 1.*t49664*t74855 + t75420 - 1.*t34217*t75424 + t75436) + t33313*(t72330 + t72342 + t49664*t74868 + t41590*t75424 + t75441 + t75448)) - 0.043*t38878*(t52203*t74954 + t52134*t75024 + t43188*(t73014 + t73017 + t49664*t74855 + t34217*t75424 + t75466 + t75473) + t33313*(t73300 + t74089 - 1.*t49664*t74883 - 1.*t44401*t75424 + t75527 + t75530)) - 0.043*t32987*(t52408*t74969 + t52336*t75024 + t43188*(t74112 + t74356 - 1.*t49664*t74868 - 1.*t41590*t75424 + t75542 + t75546) + t40708*(t74589 + t74643 + t49664*t74883 + t44401*t75424 + t75559 + t75560)) - 7.8000468000702e-9*(t51732*t74912 + t5396*(t46754*t75342 + t75389) + t48886*(1.000000000009*t48289*t497 - 1.*t48511*t74716 + 1.000000000009*t6885*t75362 + t75402 + t75407 - 1.*t75342*t7719)))*var2[4] - 0.5*(-0.0013000000000117*t12344*(t67131 - 1.*t46741*t67634 + t67926) + 7.8000468001404e-9*t497*(0.1*t1080 + t46741*t48430 + 5.4e-18*t533 - 1.5e-7*t6885) + 0.0013000000000234*(-1.*t46741*t48430 + t48447 + t48450 + t48451)*t6885 + 7.8000468001404e-9*(-1.5e-7*t497 + t46741*t67634 - 8.999946e-13*t6885)*t6885 - 0.000271*t46814*t69168 - 2.e-6*t47755*t69448 - 0.000271*t48011*t69524 - 0.043*t42635*(t69448*t69653 + t41563*(t69807 - 1.*t33244*t70122 - 1.*t33198*t70203 + t71406 - 1.*t49577*t72176 - 1.*t49647*t72269) + t34155*(t40449*t70122 + t39162*t70203 + t72330 + t72342 + t49577*t72442 + t49647*t72828) + t69168*t72973) - 0.043*t38878*(t69524*t73011 + t43864*(t33244*t70122 + t33198*t70203 + t49577*t72176 + t49647*t72269 + t73014 + t73017) + t69168*t73293 + t34155*(-1.*t42897*t70122 - 1.*t42691*t70203 + t73300 - 1.*t49577*t73917 - 1.*t49647*t74038 + t74089)) - 0.043*t32987*(t43864*(-1.*t40449*t70122 - 1.*t39162*t70203 - 1.*t49577*t72442 - 1.*t49647*t72828 + t74112 + t74356) + t69524*t74505 + t69448*t74544 + t41563*(t42897*t70122 + t42691*t70203 + t49577*t73917 + t49647*t74038 + t74589 + t74643)))*var2[5])*var2[15];
  p_output1[16]=0;
  p_output1[17]=var2[15]*(-0.5*(-0.043*t50332*t76044 - 0.043*t49297*t76096 - 0.043*t50085*t76205 - 0.043*t42635*t80870 - 0.043*t38878*t80903 - 0.043*t32987*t80923)*var2[0] - 0.5*(-0.043*t44997*t76044 - 0.043*t44918*t76096 - 0.043*t44889*t76205 - 0.043*t42635*(t6482*t80968 - 1.*t391*t80991) - 0.043*t38878*(t6482*t81009 - 1.*t391*t81014) - 0.043*t32987*(t6482*t81025 - 1.*t391*t81030))*var2[1] - 0.5*(-0.043*(t391*t43188 + t44525*t6482)*t76044 - 0.043*(t391*t40708 + t41652*t6482)*t76096 - 0.043*(t33313*t391 + t34651*t6482)*t76205 - 0.043*t42635*(t391*t80968 + t6482*t80991) - 0.043*t38878*(t391*t81009 + t6482*t81014) - 0.043*t32987*(t391*t81025 + t6482*t81030))*var2[2] - 0.5*(-0.000271*t50332*t75837 - 0.043*(t49297*t50214 + t50085*t50295)*t76044 - 0.043*(t50332*t50577 + t50085*t50786)*t76096 - 0.043*(t50332*t51046 + t49297*t51153)*t76205 - 0.000271*t50085*t76211 - 2.e-6*t49297*t76214 - 0.000271*t48011*t80870 - 2.e-6*t47755*t80903 - 0.000271*t46814*t80923 - 0.043*t42635*(t50214*t80903 + t50295*t80923 + t49297*(-1.*t49872*t80923 - 1.*t50031*t81030 + t81205 + t81214 - 1.*t50085*t84451 - 1.*t34651*t86213) + t50085*(t49872*t80903 + t50031*t81014 + t81172 + t81190 + t49297*t84451 + t41652*t86213)) - 0.043*t38878*(t50577*t80870 + t50786*t80923 + t50332*(t49872*t80923 + t50031*t81030 + t82851 + t82884 + t50085*t84451 + t34651*t86213) + t50085*(-1.*t49872*t80870 - 1.*t50031*t80991 + t83177 + t83289 - 1.*t50332*t84451 - 1.*t44525*t86213)) - 0.043*t32987*(t51046*t80870 + t51153*t80903 + t50332*(-1.*t49872*t80903 - 1.*t50031*t81014 + t83420 + t83422 - 1.*t49297*t84451 - 1.*t41652*t86213) + t49297*(t49872*t80870 + t50031*t80991 + t83479 + t83493 + t50332*t84451 + t44525*t86213)))*var2[3] - 0.5*(-0.000271*t43188*t75837 - 0.043*(t40708*t51998 + t33313*t52105)*t76044 - 0.043*(t43188*t52134 + t33313*t52203)*t76096 - 0.043*(t43188*t52336 + t40708*t52408)*t76205 - 0.000271*t33313*t76211 - 2.e-6*t40708*t76214 - 0.000271*t48011*t80968 - 2.e-6*t47755*t81009 - 0.000271*t46814*t81025 - 0.043*t42635*(t51998*t81009 + t52105*t81025 + t33313*(t76372 + t78588 + t49664*t80878 + t81172 + t41590*t81186 + t81190) + t40708*(t79838 + t80174 - 1.*t49664*t80921 - 1.*t34217*t81186 + t81205 + t81214)) - 0.043*t38878*(t52134*t80968 + t52203*t81025 + t43188*(t80441 + t80451 + t49664*t80921 + t34217*t81186 + t82851 + t82884) + t33313*(t80465 + t80626 - 1.*t49664*t80866 - 1.*t44401*t81186 + t83177 + t83289)) - 0.043*t32987*(t52336*t80968 + t52408*t81009 + t43188*(t80737 + t80742 - 1.*t49664*t80878 - 1.*t41590*t81186 + t83420 + t83422) + t40708*(t80755 + t80762 + t49664*t80866 + t44401*t81186 + t83479 + t83493)))*var2[4] - 0.5*(-0.000271*t43864*t75837 - 0.043*(t41563*t69653 + t34155*t72973)*t76044 - 0.043*(t43864*t73011 + t34155*t73293)*t76096 - 0.043*(t43864*t74505 + t41563*t74544)*t76205 - 0.000271*t34155*t76211 - 2.e-6*t41563*t76214 - 2.e-6*t47755*t76229 - 0.000271*t46814*t76267 - 0.000271*t48011*t76348 - 0.043*t42635*(t69653*t76229 + t72973*t76267 + t34155*(t76372 + t40449*t76470 + t39162*t78468 + t78588 + t49577*t79335 + t49647*t79764) + t41563*(-1.*t33244*t76470 - 1.*t33198*t78468 + t79838 + t80174 - 1.*t49577*t80356 - 1.*t49647*t80400)) - 0.043*t38878*(t73293*t76267 + t73011*t76348 + t43864*(t33244*t76470 + t33198*t78468 + t49577*t80356 + t49647*t80400 + t80441 + t80451) + t34155*(-1.*t42897*t76470 - 1.*t42691*t78468 + t80465 - 1.*t49577*t80559 - 1.*t49647*t80605 + t80626)) - 0.043*t32987*(t74544*t76229 + t74505*t76348 + t43864*(-1.*t40449*t76470 - 1.*t39162*t78468 - 1.*t49577*t79335 - 1.*t49647*t79764 + t80737 + t80742) + t41563*(t42897*t76470 + t42691*t78468 + t49577*t80559 + t49647*t80605 + t80755 + t80762)))*var2[5] - 0.5*(-0.000542*t48011*t75837 - 0.086*t42635*t76044 - 0.086*t38878*t76096 - 0.086*t32987*t76205 - 0.000542*t46814*t76211 - 4.e-6*t47755*t76214)*var2[15] - 0.5*(-0.000271000000004878*t75837 - 1.29e-8*t76044 - 0.0042999871*t76096 - 1.29001548002322e-8*t76205)*var2[17]);
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec16_minitaur.hh"

namespace FrontStance
{

void Ce3_vec16_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
