/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:13:43 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t12347;
  double t12861;
  double t14861;
  double t22761;
  double t22765;
  double t41609;
  double t41676;
  double t41715;
  double t33694;
  double t12200;
  double t15749;
  double t34169;
  double t34360;
  double t39165;
  double t41730;
  double t42181;
  double t42221;
  double t43294;
  double t43823;
  double t43925;
  double t44663;
  double t44664;
  double t44706;
  double t44709;
  double t44712;
  double t8399;
  double t44732;
  double t44734;
  double t44744;
  double t44747;
  double t41553;
  double t44648;
  double t44660;
  double t44662;
  double t44719;
  double t44726;
  double t44823;
  double t7293;
  double t45984;
  double t46125;
  double t46130;
  double t44961;
  double t45039;
  double t45040;
  double t45112;
  double t45292;
  double t46485;
  double t46487;
  double t46496;
  double t48576;
  double t45985;
  double t46129;
  double t46131;
  double t46133;
  double t49257;
  double t49258;
  double t49281;
  double t49283;
  double t49210;
  double t49567;
  double t49673;
  double t49752;
  double t49775;
  double t49799;
  double t49804;
  double t50154;
  double t50155;
  double t50222;
  double t50223;
  double t49213;
  double t49758;
  double t49924;
  double t50068;
  double t44728;
  double t44877;
  double t44895;
  double t45131;
  double t45177;
  double t45276;
  double t45285;
  double t45287;
  double t45295;
  double t45326;
  double t45396;
  double t45624;
  double t45632;
  double t46484;
  double t48838;
  double t48952;
  double t49088;
  double t49095;
  double t49135;
  double t49138;
  double t49150;
  double t49151;
  double t49162;
  double t49166;
  double t49167;
  double t49181;
  double t50105;
  double t50240;
  double t50243;
  double t50320;
  double t50334;
  double t50383;
  double t50395;
  double t50442;
  double t50484;
  double t50504;
  double t50535;
  double t50546;
  double t50558;
  double t51047;
  double t51052;
  double t51056;
  double t51066;
  double t51088;
  double t51091;
  double t51166;
  double t51167;
  double t51185;
  double t51600;
  double t51555;
  double t51672;
  double t51568;
  double t51569;
  double t51575;
  double t51587;
  double t51628;
  double t51629;
  double t51646;
  double t51650;
  double t51652;
  double t51663;
  double t51670;
  double t51675;
  double t51689;
  double t51696;
  double t51707;
  double t51726;
  double t51738;
  double t51740;
  double t51749;
  double t51752;
  double t51770;
  double t51553;
  double t51635;
  double t51714;
  double t51779;
  double t51793;
  double t51801;
  double t51817;
  double t51820;
  double t51823;
  double t51825;
  double t51828;
  double t51838;
  double t51841;
  double t51846;
  double t51880;
  double t51902;
  double t51904;
  double t51909;
  double t51970;
  double t51981;
  double t52006;
  double t52029;
  double t52030;
  double t52047;
  double t51939;
  double t51947;
  double t51955;
  double t51796;
  double t51910;
  double t51922;
  double t51535;
  double t51548;
  double t51550;
  double t52069;
  double t52070;
  double t52075;
  double t52217;
  double t52257;
  double t52276;
  double t53812;
  double t53813;
  double t53853;
  double t54073;
  double t54087;
  double t54137;
  double t54352;
  double t54373;
  double t54424;
  double t52078;
  double t55706;
  double t55774;
  double t55828;
  double t52155;
  double t52430;
  double t52732;
  double t52926;
  double t53204;
  double t55859;
  double t55875;
  double t56031;
  double t56064;
  double t52083;
  double t52088;
  double t52094;
  double t52157;
  double t52171;
  double t52184;
  double t56322;
  double t56664;
  double t52441;
  double t52457;
  double t52476;
  double t57255;
  double t57267;
  double t52743;
  double t52746;
  double t52748;
  double t57424;
  double t57534;
  double t52962;
  double t52980;
  double t53006;
  double t59285;
  double t59386;
  double t53208;
  double t53223;
  double t53452;
  double t55633;
  double t62557;
  double t62558;
  double t62566;
  double t62608;
  double t62635;
  double t62640;
  double t62658;
  double t62675;
  double t62684;
  double t62685;
  double t62688;
  double t62727;
  double t62741;
  double t62757;
  double t62759;
  double t62764;
  double t62767;
  double t62583;
  double t62585;
  double t62597;
  double t56136;
  double t62443;
  double t62507;
  double t62512;
  double t56232;
  double t62770;
  double t62783;
  double t62810;
  double t62812;
  double t62815;
  double t62844;
  double t62873;
  double t62875;
  double t56919;
  double t63217;
  double t63218;
  double t63267;
  double t63297;
  double t63307;
  double t63341;
  double t63379;
  double t63386;
  double t57840;
  double t58355;
  double t63748;
  double t63752;
  double t63761;
  double t63775;
  double t63788;
  double t63793;
  double t63797;
  double t63805;
  double t64318;
  double t64338;
  double t64373;
  double t64636;
  double t64647;
  double t64648;
  double t66891;
  double t66892;
  double t66906;
  double t67943;
  double t67944;
  double t67945;
  double t67949;
  double t67951;
  double t67952;
  double t67973;
  double t67974;
  double t67978;
  double t67989;
  double t67991;
  double t67998;
  double t68027;
  double t68076;
  double t68078;
  double t68084;
  double t68087;
  double t68088;
  double t55675;
  double t55687;
  double t62604;
  double t62769;
  double t63048;
  double t63216;
  double t68211;
  double t68225;
  double t68227;
  double t68236;
  double t68240;
  double t68245;
  double t56143;
  double t56144;
  double t56270;
  double t56281;
  double t63511;
  double t63572;
  double t57206;
  double t57238;
  double t63723;
  double t63810;
  double t63836;
  double t63868;
  double t57880;
  double t58307;
  double t58358;
  double t58426;
  double t64067;
  double t64101;
  double t65443;
  double t66962;
  double t66982;
  double t64632;
  double t64686;
  double t65296;
  double t68229;
  double t68261;
  double t64316;
  double t64396;
  double t64553;
  double t68272;
  double t68277;
  double t68735;
  double t68738;
  double t68744;
  double t68769;
  double t68770;
  double t68776;
  double t68349;
  double t68362;
  double t68420;
  double t68472;
  double t68508;
  double t68518;
  double t68536;
  double t68545;
  double t69481;
  double t69468;
  double t69652;
  double t69673;
  double t69482;
  double t69484;
  double t69473;
  double t69474;
  double t62570;
  double t62575;
  double t62577;
  double t72270;
  double t72331;
  double t72831;
  double t63409;
  double t63410;
  double t63423;
  double t73297;
  double t74103;
  double t69654;
  double t73299;
  double t73303;
  double t73928;
  double t74039;
  double t74105;
  double t74107;
  double t74122;
  double t74355;
  double t74359;
  double t74375;
  double t74497;
  double t74516;
  double t74545;
  double t74587;
  double t74590;
  double t72271;
  double t72300;
  double t72332;
  double t72674;
  double t72832;
  double t72928;
  double t72999;
  double t74093;
  double t74367;
  double t74632;
  double t74633;
  double t74668;
  double t74672;
  double t74678;
  double t74687;
  double t74711;
  double t74724;
  double t74861;
  double t74876;
  double t73002;
  double t73013;
  double t73015;
  double t73016;
  double t73018;
  double t73019;
  double t73211;
  double t69510;
  double t69526;
  double t69621;
  double t69668;
  double t69751;
  double t70123;
  double t70124;
  double t70128;
  double t70129;
  double t70133;
  double t70204;
  double t63452;
  double t63468;
  double t63479;
  double t75008;
  double t75028;
  double t75147;
  double t75148;
  double t75157;
  double t75161;
  double t75162;
  double t75166;
  double t63632;
  double t63649;
  double t63706;
  double t63918;
  double t63923;
  double t63927;
  double t74897;
  double t74903;
  double t74907;
  double t74908;
  double t74913;
  double t74947;
  double t74949;
  double t74950;
  double t75221;
  double t75223;
  double t75227;
  double t75234;
  double t75239;
  double t75240;
  double t75241;
  double t75343;
  double t63954;
  double t63962;
  double t63971;
  double t75525;
  double t75533;
  double t75535;
  double t75536;
  double t75540;
  double t75545;
  double t75547;
  double t75548;
  double t75549;
  double t75550;
  double t75553;
  double t75562;
  double t75564;
  double t75566;
  double t75567;
  double t75569;
  double t75571;
  double t75572;
  double t75573;
  double t75574;
  double t75582;
  double t75593;
  double t75461;
  double t75613;
  double t75614;
  double t75615;
  double t75616;
  double t75618;
  double t75619;
  double t75627;
  double t75628;
  double t75629;
  double t75630;
  double t75631;
  double t75633;
  double t75634;
  double t75635;
  double t75639;
  double t75643;
  double t75644;
  double t75645;
  double t75647;
  double t75648;
  double t75649;
  double t75650;
  double t75669;
  double t75679;
  double t75680;
  double t75694;
  double t75695;
  double t75704;
  double t75705;
  double t75743;
  double t75765;
  double t75777;
  double t75778;
  double t75780;
  double t75781;
  double t75782;
  double t75784;
  double t75785;
  double t75786;
  double t75787;
  double t75791;
  double t75792;
  double t75797;
  double t75798;
  double t76215;
  double t76230;
  double t76269;
  double t76679;
  double t78481;
  double t79434;
  double t79988;
  double t80387;
  double t80402;
  double t80424;
  double t80427;
  double t80428;
  double t80449;
  double t80450;
  double t80452;
  double t80584;
  double t80609;
  double t80610;
  double t80627;
  double t80628;
  double t80630;
  double t80703;
  double t80733;
  double t80734;
  double t80739;
  double t80740;
  double t80745;
  double t74666;
  double t74893;
  double t74965;
  double t74997;
  double t80854;
  double t80855;
  double t80856;
  double t80871;
  double t80872;
  double t80873;
  double t75196;
  double t75208;
  double t75220;
  double t75363;
  double t75388;
  double t75394;
  double t75405;
  double t75414;
  double t76212;
  double t76349;
  double t76350;
  double t76352;
  double t79774;
  double t79821;
  double t79958;
  double t80403;
  double t80404;
  double t80857;
  double t80931;
  double t80969;
  double t80994;
  double t81124;
  double t81126;
  double t81128;
  double t81131;
  double t81133;
  double t81136;
  double t81003;
  double t81005;
  double t81018;
  double t81032;
  double t81043;
  double t81046;
  double t81051;
  double t81054;
  t12347 = Cos(var1[17]);
  t12861 = -1.*t12347;
  t14861 = 1. + t12861;
  t22761 = 3.e-6*t14861;
  t22765 = Sin(var1[17]);
  t41609 = Cos(var1[15]);
  t41676 = -1.*t41609;
  t41715 = 1. + t41676;
  t33694 = 3.e-6*t22765;
  t12200 = Sin(var1[15]);
  t15749 = 1.000000000009*t14861;
  t34169 = t22761 + t33694;
  t34360 = 3.e-6*t34169;
  t39165 = -1. + t15749 + t34360;
  t41730 = -9.e-12*t14861;
  t42181 = -3.e-6*t22765;
  t42221 = t22761 + t42181;
  t43294 = 3.e-6*t42221;
  t43823 = -1.*t22765;
  t43925 = t41730 + t43294 + t43823;
  t44663 = -1.8e-11*t14861;
  t44664 = 1. + t44663;
  t44706 = 3.e-6*t44664;
  t44709 = -3.e-6*t14861;
  t44712 = t44706 + t44709 + t33694;
  t8399 = Cos(var1[5]);
  t44732 = -1.*t12200*t39165;
  t44734 = t41609*t43925;
  t44744 = 3.e-6*t41715*t44712;
  t44747 = t44732 + t44734 + t44744;
  t41553 = 3.e-6*t12200*t39165;
  t44648 = 3.e-6*t41715*t43925;
  t44660 = -9.e-12*t41715;
  t44662 = 1. + t44660;
  t44719 = t44662*t44712;
  t44726 = t41553 + t44648 + t44719;
  t44823 = Sin(var1[5]);
  t7293 = Sin(var1[3]);
  t45984 = -1. + t15749 + t43294;
  t46125 = t44706 + t44709 + t42181;
  t46130 = t41730 + t34360 + t22765;
  t44961 = Cos(var1[3]);
  t45039 = Cos(var1[4]);
  t45040 = -1.000000000009*t41715;
  t45112 = 1. + t45040;
  t45292 = Sin(var1[4]);
  t46485 = t41609*t45984;
  t46487 = 3.e-6*t41715*t46125;
  t46496 = -1.*t12200*t46130;
  t48576 = t46485 + t46487 + t46496;
  t45985 = 3.e-6*t41715*t45984;
  t46129 = t44662*t46125;
  t46131 = 3.e-6*t12200*t46130;
  t46133 = t45985 + t46129 + t46131;
  t49257 = -1.000000000009*t14861;
  t49258 = 1. + t49257;
  t49281 = 3.e-6*t49258;
  t49283 = 9.e-12*t14861;
  t49210 = 1. + t44663 + t43294 + t34360;
  t49567 = t49283 + t43823;
  t49673 = 3.e-6*t49567;
  t49752 = t49281 + t22761 + t49673 + t33694;
  t49775 = t49283 + t22765;
  t49799 = 3.e-6*t49775;
  t49804 = t49281 + t22761 + t42181 + t49799;
  t50154 = 3.e-6*t41715*t49210;
  t50155 = -1.*t12200*t49752;
  t50222 = t41609*t49804;
  t50223 = t50154 + t50155 + t50222;
  t49213 = t44662*t49210;
  t49758 = 3.e-6*t12200*t49752;
  t49924 = 3.e-6*t41715*t49804;
  t50068 = t49213 + t49758 + t49924;
  t44728 = t8399*t44726;
  t44877 = t44747*t44823;
  t44895 = t44728 + t44877;
  t45131 = t45112*t39165;
  t45177 = t12200*t43925;
  t45276 = -3.e-6*t12200*t44712;
  t45285 = t45131 + t45177 + t45276;
  t45287 = t45039*t45285;
  t45295 = t8399*t44747;
  t45326 = -1.*t44726*t44823;
  t45396 = t45295 + t45326;
  t45624 = -1.*t45292*t45396;
  t45632 = t45287 + t45624;
  t46484 = t8399*t46133;
  t48838 = t48576*t44823;
  t48952 = t46484 + t48838;
  t49088 = t12200*t45984;
  t49095 = -3.e-6*t12200*t46125;
  t49135 = t45112*t46130;
  t49138 = t49088 + t49095 + t49135;
  t49150 = t45039*t49138;
  t49151 = t8399*t48576;
  t49162 = -1.*t46133*t44823;
  t49166 = t49151 + t49162;
  t49167 = -1.*t45292*t49166;
  t49181 = t49150 + t49167;
  t50105 = t8399*t50068;
  t50240 = t50223*t44823;
  t50243 = t50105 + t50240;
  t50320 = -3.e-6*t12200*t49210;
  t50334 = t45112*t49752;
  t50383 = t12200*t49804;
  t50395 = t50320 + t50334 + t50383;
  t50442 = t45039*t50395;
  t50484 = t8399*t50223;
  t50504 = -1.*t50068*t44823;
  t50535 = t50484 + t50504;
  t50546 = -1.*t45292*t50535;
  t50558 = t50442 + t50546;
  t51047 = -1.*t45285*t45292;
  t51052 = -1.*t45039*t45396;
  t51056 = t51047 + t51052;
  t51066 = -1.*t49138*t45292;
  t51088 = -1.*t45039*t49166;
  t51091 = t51066 + t51088;
  t51166 = -1.*t50395*t45292;
  t51167 = -1.*t45039*t50535;
  t51185 = t51166 + t51167;
  t51600 = t44709 + t33694;
  t51555 = 9.e-13*var1[17];
  t51672 = t44709 + t42181;
  t51568 = 0.2*t49258;
  t51569 = 0.2000000000018*t14861;
  t51575 = t41730 + t43823;
  t51587 = 0.1*t51575;
  t51628 = 0.0999991*t51600;
  t51629 = t51555 + t51568 + t51569 + t51587 + t51628;
  t51646 = 3.e-7*var1[17];
  t51650 = 1.8e-11*t14861;
  t51652 = -1. + t51650;
  t51663 = 0.1*t51652;
  t51670 = -1.62e-17*t14861;
  t51675 = 0.2*t51672;
  t51689 = 0.1*t51600;
  t51696 = 0.2*t34169;
  t51707 = t51646 + t51663 + t51670 + t51675 + t51689 + t51696;
  t51726 = 0.1000000000009*t14861;
  t51738 = 0.2*t49567;
  t51740 = 0.0999991*t51672;
  t51749 = t41730 + t22765;
  t51752 = 0.2*t51749;
  t51770 = t51555 + t51726 + t51738 + t51740 + t51752;
  t51553 = -0.2000000000018*t12200;
  t51635 = t12200*t51629;
  t51714 = -3.e-6*t12200*t51707;
  t51779 = t45112*t51770;
  t51793 = t51553 + t51635 + t51714 + t51779;
  t51801 = 0.2000000000018*t41715;
  t51817 = t41609*t51629;
  t51820 = 3.e-6*t41715*t51707;
  t51823 = -1.*t12200*t51770;
  t51825 = t51801 + t51817 + t51820 + t51823;
  t51828 = t8399*t51825;
  t51838 = -6.000000000054e-7*t41715;
  t51841 = 3.e-6*t41715*t51629;
  t51846 = t44662*t51707;
  t51880 = 3.e-6*t12200*t51770;
  t51902 = t51838 + t51841 + t51846 + t51880;
  t51904 = -1.*t51902*t44823;
  t51909 = t51828 + t51904;
  t51970 = t45039*t51793;
  t51981 = -1.*t45292*t51909;
  t52006 = t51970 + t51981;
  t52029 = t45285*t45292;
  t52030 = t45039*t45396;
  t52047 = t52029 + t52030;
  t51939 = t51793*t45292;
  t51947 = t45039*t51909;
  t51955 = t51939 + t51947;
  t51796 = -1.*t51793*t45292;
  t51910 = -1.*t45039*t51909;
  t51922 = t51796 + t51910;
  t51535 = t49138*t45292;
  t51548 = t45039*t49166;
  t51550 = t51535 + t51548;
  t52069 = t8399*t51902;
  t52070 = t51825*t44823;
  t52075 = t52069 + t52070;
  t52217 = t50395*t45292;
  t52257 = t45039*t50535;
  t52276 = t52217 + t52257;
  t53812 = -1.*t8399*t44726;
  t53813 = -1.*t44747*t44823;
  t53853 = t53812 + t53813;
  t54073 = -1.*t8399*t46133;
  t54087 = -1.*t48576*t44823;
  t54137 = t54073 + t54087;
  t54352 = -1.*t8399*t50068;
  t54373 = -1.*t50223*t44823;
  t54424 = t54352 + t54373;
  t52078 = -1.*t44895*t52075;
  t55706 = -1.*t8399*t51902;
  t55774 = -1.*t51825*t44823;
  t55828 = t55706 + t55774;
  t52155 = t48952*t52075;
  t52430 = t44895*t52075;
  t52732 = -1.*t52075*t50243;
  t52926 = -1.*t48952*t52075;
  t53204 = t52075*t50243;
  t55859 = -1.*t45396*t52075;
  t55875 = -1.*t44895*t51909;
  t56031 = t49166*t52075;
  t56064 = t48952*t51909;
  t52083 = -1.*t52047*t51955;
  t52088 = -1.*t45632*t52006;
  t52094 = t52078 + t52083 + t52088;
  t52157 = t51550*t51955;
  t52171 = t49181*t52006;
  t52184 = t52155 + t52157 + t52171;
  t56322 = t45396*t52075;
  t56664 = t44895*t51909;
  t52441 = t52047*t51955;
  t52457 = t45632*t52006;
  t52476 = t52430 + t52441 + t52457;
  t57255 = -1.*t52075*t50535;
  t57267 = -1.*t51909*t50243;
  t52743 = -1.*t51955*t52276;
  t52746 = -1.*t52006*t50558;
  t52748 = t52732 + t52743 + t52746;
  t57424 = -1.*t49166*t52075;
  t57534 = -1.*t48952*t51909;
  t52962 = -1.*t51550*t51955;
  t52980 = -1.*t49181*t52006;
  t53006 = t52926 + t52962 + t52980;
  t59285 = t52075*t50535;
  t59386 = t51909*t50243;
  t53208 = t51955*t52276;
  t53223 = t52006*t50558;
  t53452 = t53204 + t53208 + t53223;
  t55633 = -1.*t45285*t51793;
  t62557 = -3.e-6*t41609*t46125;
  t62558 = -1.000000000009*t12200*t46130;
  t62566 = t46485 + t62557 + t62558;
  t62608 = 0.2000000000018*t12200;
  t62635 = -1.*t12200*t51629;
  t62640 = 3.e-6*t12200*t51707;
  t62658 = -1.*t41609*t51770;
  t62675 = t62608 + t62635 + t62640 + t62658;
  t62684 = -6.000000000054e-7*t12200;
  t62685 = 3.e-6*t12200*t51629;
  t62688 = -9.e-12*t12200*t51707;
  t62727 = 3.e-6*t41609*t51770;
  t62741 = t62684 + t62685 + t62688 + t62727;
  t62757 = -0.2000000000018*t41609;
  t62759 = -3.e-6*t41609*t51707;
  t62764 = -1.000000000009*t12200*t51770;
  t62767 = t62757 + t51817 + t62759 + t62764;
  t62583 = -1.000000000009*t12200*t39165;
  t62585 = -3.e-6*t41609*t44712;
  t62597 = t62583 + t44734 + t62585;
  t56136 = t49138*t51793;
  t62443 = -3.e-6*t41609*t49210;
  t62507 = -1.000000000009*t12200*t49752;
  t62512 = t62443 + t62507 + t50222;
  t56232 = t45285*t51793;
  t62770 = -1.*t41609*t39165;
  t62783 = -1.*t12200*t43925;
  t62810 = 3.e-6*t12200*t44712;
  t62812 = t62770 + t62783 + t62810;
  t62815 = 3.e-6*t41609*t39165;
  t62844 = 3.e-6*t12200*t43925;
  t62873 = -9.e-12*t12200*t44712;
  t62875 = t62815 + t62844 + t62873;
  t56919 = -1.*t51793*t50395;
  t63217 = -1.*t12200*t45984;
  t63218 = 3.e-6*t12200*t46125;
  t63267 = -1.*t41609*t46130;
  t63297 = t63217 + t63218 + t63267;
  t63307 = 3.e-6*t12200*t45984;
  t63341 = -9.e-12*t12200*t46125;
  t63379 = 3.e-6*t41609*t46130;
  t63386 = t63307 + t63341 + t63379;
  t57840 = -1.*t49138*t51793;
  t58355 = t51793*t50395;
  t63748 = 3.e-6*t12200*t49210;
  t63752 = -1.*t41609*t49752;
  t63761 = -1.*t12200*t49804;
  t63775 = t63748 + t63752 + t63761;
  t63788 = -9.e-12*t12200*t49210;
  t63793 = 3.e-6*t41609*t49752;
  t63797 = 3.e-6*t12200*t49804;
  t63805 = t63788 + t63793 + t63797;
  t64318 = t8399*t62812;
  t64338 = -1.*t62875*t44823;
  t64373 = t64318 + t64338;
  t64636 = t8399*t63297;
  t64647 = -1.*t63386*t44823;
  t64648 = t64636 + t64647;
  t66891 = t8399*t63775;
  t66892 = -1.*t63805*t44823;
  t66906 = t66891 + t66892;
  t67943 = t8399*t62875;
  t67944 = t62812*t44823;
  t67945 = t67943 + t67944;
  t67949 = t45039*t62597;
  t67951 = -1.*t45292*t64373;
  t67952 = t67949 + t67951;
  t67973 = t8399*t63386;
  t67974 = t63297*t44823;
  t67978 = t67973 + t67974;
  t67989 = t45039*t62566;
  t67991 = -1.*t45292*t64648;
  t67998 = t67989 + t67991;
  t68027 = t8399*t63805;
  t68076 = t63775*t44823;
  t68078 = t68027 + t68076;
  t68084 = t45039*t62512;
  t68087 = -1.*t45292*t66906;
  t68088 = t68084 + t68087;
  t55675 = -1.*t45396*t51909;
  t55687 = t55633 + t52078 + t55675;
  t62604 = -1.*t62597*t51793;
  t62769 = -1.*t45285*t62767;
  t63048 = t62566*t51793;
  t63216 = t49138*t62767;
  t68211 = t8399*t62741;
  t68225 = t62675*t44823;
  t68227 = t68211 + t68225;
  t68236 = t8399*t62675;
  t68240 = -1.*t62741*t44823;
  t68245 = t68236 + t68240;
  t56143 = t49166*t51909;
  t56144 = t56136 + t52155 + t56143;
  t56270 = t45396*t51909;
  t56281 = t56232 + t52430 + t56270;
  t63511 = t62597*t51793;
  t63572 = t45285*t62767;
  t57206 = -1.*t51909*t50535;
  t57238 = t56919 + t57206 + t52732;
  t63723 = -1.*t51793*t62512;
  t63810 = -1.*t62767*t50395;
  t63836 = -1.*t62566*t51793;
  t63868 = -1.*t49138*t62767;
  t57880 = -1.*t49166*t51909;
  t58307 = t57840 + t52926 + t57880;
  t58358 = t51909*t50535;
  t58426 = t58355 + t58358 + t53204;
  t64067 = t51793*t62512;
  t64101 = t62767*t50395;
  t65443 = t62512*t45292;
  t66962 = t45039*t66906;
  t66982 = t65443 + t66962;
  t64632 = t62566*t45292;
  t64686 = t45039*t64648;
  t65296 = t64632 + t64686;
  t68229 = -1.*t44895*t68227;
  t68261 = -1.*t67945*t52075;
  t64316 = t62597*t45292;
  t64396 = t45039*t64373;
  t64553 = t64316 + t64396;
  t68272 = t48952*t68227;
  t68277 = t67978*t52075;
  t68735 = t62767*t45292;
  t68738 = t45039*t68245;
  t68744 = t68735 + t68738;
  t68769 = t45039*t62767;
  t68770 = -1.*t45292*t68245;
  t68776 = t68769 + t68770;
  t68349 = t44895*t68227;
  t68362 = t67945*t52075;
  t68420 = -1.*t68227*t50243;
  t68472 = -1.*t52075*t68078;
  t68508 = -1.*t48952*t68227;
  t68518 = -1.*t67978*t52075;
  t68536 = t68227*t50243;
  t68545 = t52075*t68078;
  t69481 = 3.e-6*t12347;
  t69468 = -3.e-6*t12347;
  t69652 = 9.e-12*t22765;
  t69673 = -2.7e-17*t22765;
  t69482 = t69481 + t33694;
  t69484 = 3.e-6*t69482;
  t69473 = t69468 + t33694;
  t69474 = 3.e-6*t69473;
  t62570 = -1.*t44747*t51825;
  t62575 = -1.*t44726*t51902;
  t62577 = t55633 + t62570 + t62575;
  t72270 = -3.000000000054e-6*t22765;
  t72331 = -9.e-12*t22765;
  t72831 = 1.000000000009*t22765;
  t63409 = t48576*t51825;
  t63410 = t46133*t51902;
  t63423 = t56136 + t63409 + t63410;
  t73297 = t69481 + t42181;
  t74103 = t69468 + t42181;
  t69654 = t12861 + t69652;
  t73299 = 0.0999991*t73297;
  t73303 = t12861 + t72331;
  t73928 = 0.1*t73303;
  t74039 = 9.e-13 + t73299 + t73928;
  t74105 = 0.2*t74103;
  t74107 = 0.1*t73297;
  t74122 = 0.2*t69482;
  t74355 = 1.7999838e-12*t22765;
  t74359 = 3.e-7 + t74105 + t74107 + t74122 + t74355;
  t74375 = 0.0999991*t74103;
  t74497 = t12347 + t72331;
  t74516 = 0.2*t74497;
  t74545 = 0.2*t69654;
  t74587 = 0.1000000000009*t22765;
  t74590 = 9.e-13 + t74375 + t74516 + t74545 + t74587;
  t72271 = t69468 + t72270;
  t72300 = -3.e-6*t12200*t72271;
  t72332 = t12347 + t69484 + t72331;
  t72674 = t45112*t72332;
  t72832 = t69474 + t72831;
  t72928 = t12200*t72832;
  t72999 = t72300 + t72674 + t72928;
  t74093 = t12200*t74039;
  t74367 = -3.e-6*t12200*t74359;
  t74632 = t45112*t74590;
  t74633 = t74093 + t74367 + t74632;
  t74668 = t41609*t74039;
  t74672 = 3.e-6*t41715*t74359;
  t74678 = -1.*t12200*t74590;
  t74687 = t74668 + t74672 + t74678;
  t74711 = 3.e-6*t41715*t74039;
  t74724 = t44662*t74359;
  t74861 = 3.e-6*t12200*t74590;
  t74876 = t74711 + t74724 + t74861;
  t73002 = t69481 + t72270;
  t73013 = -3.e-6*t12200*t73002;
  t73015 = t12861 + t69474 + t72331;
  t73016 = t12200*t73015;
  t73018 = t69484 + t72831;
  t73019 = t45112*t73018;
  t73211 = t73013 + t73016 + t73019;
  t69510 = -1.8e-11*t22765;
  t69526 = t69474 + t69484 + t69510;
  t69621 = -3.e-6*t12200*t69526;
  t69668 = 3.e-6*t69654;
  t69751 = t69481 + t69668 + t69673;
  t70123 = t45112*t69751;
  t70124 = t12347 + t69652;
  t70128 = 3.e-6*t70124;
  t70129 = t69468 + t70128 + t69673;
  t70133 = t12200*t70129;
  t70204 = t69621 + t70123 + t70133;
  t63452 = t44747*t51825;
  t63468 = t44726*t51902;
  t63479 = t56232 + t63452 + t63468;
  t75008 = 3.e-6*t41715*t73002;
  t75028 = t41609*t73015;
  t75147 = -1.*t12200*t73018;
  t75148 = t75008 + t75028 + t75147;
  t75157 = t44662*t73002;
  t75161 = 3.e-6*t41715*t73015;
  t75162 = 3.e-6*t12200*t73018;
  t75166 = t75157 + t75161 + t75162;
  t63632 = -1.*t51902*t50068;
  t63649 = -1.*t51825*t50223;
  t63706 = t63632 + t63649 + t56919;
  t63918 = -1.*t48576*t51825;
  t63923 = -1.*t46133*t51902;
  t63927 = t57840 + t63918 + t63923;
  t74897 = 3.e-6*t41715*t72271;
  t74903 = -1.*t12200*t72332;
  t74907 = t41609*t72832;
  t74908 = t74897 + t74903 + t74907;
  t74913 = t44662*t72271;
  t74947 = 3.e-6*t12200*t72332;
  t74949 = 3.e-6*t41715*t72832;
  t74950 = t74913 + t74947 + t74949;
  t75221 = 3.e-6*t41715*t69526;
  t75223 = -1.*t12200*t69751;
  t75227 = t41609*t70129;
  t75234 = t75221 + t75223 + t75227;
  t75239 = t44662*t69526;
  t75240 = 3.e-6*t12200*t69751;
  t75241 = 3.e-6*t41715*t70129;
  t75343 = t75239 + t75240 + t75241;
  t63954 = t51902*t50068;
  t63962 = t51825*t50223;
  t63971 = t63954 + t63962 + t58355;
  t75525 = -1.*t51629*t43925;
  t75533 = -1.*t51707*t44712;
  t75535 = -1.*t39165*t51770;
  t75536 = t75525 + t75533 + t75535;
  t75540 = t45984*t74039;
  t75545 = t51707*t72271;
  t75547 = t46125*t74359;
  t75548 = t74590*t46130;
  t75549 = t51629*t72832;
  t75550 = t72332*t51770;
  t75553 = t75540 + t75545 + t75547 + t75548 + t75549 + t75550;
  t75562 = t45984*t51629;
  t75564 = t51707*t46125;
  t75566 = t46130*t51770;
  t75567 = t75562 + t75564 + t75566;
  t75569 = -1.*t74039*t43925;
  t75571 = -1.*t51707*t73002;
  t75572 = -1.*t51629*t73015;
  t75573 = -1.*t74359*t44712;
  t75574 = -1.*t39165*t74590;
  t75582 = -1.*t73018*t51770;
  t75593 = t75569 + t75571 + t75572 + t75573 + t75574 + t75582;
  t75461 = -3.e-6*t69482;
  t75613 = t51629*t43925;
  t75614 = t51707*t44712;
  t75615 = t39165*t51770;
  t75616 = t75613 + t75614 + t75615;
  t75618 = t74039*t43925;
  t75619 = t51707*t73002;
  t75627 = t51629*t73015;
  t75628 = t74359*t44712;
  t75629 = t39165*t74590;
  t75630 = t73018*t51770;
  t75631 = t75618 + t75619 + t75627 + t75628 + t75629 + t75630;
  t75633 = -1.*t51707*t69526;
  t75634 = -1.*t51629*t70129;
  t75635 = -1.*t49210*t74359;
  t75639 = -1.*t49752*t74590;
  t75643 = -1.*t69751*t51770;
  t75644 = -1.*t74039*t49804;
  t75645 = t75633 + t75634 + t75635 + t75639 + t75643 + t75644;
  t75647 = -1.*t49210*t51707;
  t75648 = -1.*t49752*t51770;
  t75649 = -1.*t51629*t49804;
  t75650 = t75647 + t75648 + t75649;
  t75669 = -1.*t45984*t74039;
  t75679 = -1.*t51707*t72271;
  t75680 = -1.*t46125*t74359;
  t75694 = -1.*t74590*t46130;
  t75695 = -1.*t51629*t72832;
  t75704 = -1.*t72332*t51770;
  t75705 = t75669 + t75679 + t75680 + t75694 + t75695 + t75704;
  t75743 = -1.*t45984*t51629;
  t75765 = -1.*t51707*t46125;
  t75777 = -1.*t46130*t51770;
  t75778 = t75743 + t75765 + t75777;
  t75780 = t51707*t69526;
  t75781 = t51629*t70129;
  t75782 = t49210*t74359;
  t75784 = t49752*t74590;
  t75785 = t69751*t51770;
  t75786 = t74039*t49804;
  t75787 = t75780 + t75781 + t75782 + t75784 + t75785 + t75786;
  t75791 = t49210*t51707;
  t75792 = t49752*t51770;
  t75797 = t51629*t49804;
  t75798 = t75791 + t75792 + t75797;
  t76215 = t8399*t75234;
  t76230 = -1.*t75343*t44823;
  t76269 = t76215 + t76230;
  t76679 = t8399*t74908;
  t78481 = -1.*t74950*t44823;
  t79434 = t76679 + t78481;
  t79988 = t8399*t75148;
  t80387 = -1.*t75166*t44823;
  t80402 = t79988 + t80387;
  t80424 = t8399*t75343;
  t80427 = t75234*t44823;
  t80428 = t80424 + t80427;
  t80449 = t45039*t70204;
  t80450 = -1.*t45292*t76269;
  t80452 = t80449 + t80450;
  t80584 = t8399*t74950;
  t80609 = t74908*t44823;
  t80610 = t80584 + t80609;
  t80627 = t45039*t72999;
  t80628 = -1.*t45292*t79434;
  t80630 = t80627 + t80628;
  t80703 = t8399*t75166;
  t80733 = t75148*t44823;
  t80734 = t80703 + t80733;
  t80739 = t45039*t73211;
  t80740 = -1.*t45292*t80402;
  t80745 = t80739 + t80740;
  t74666 = t74633*t49138;
  t74893 = t72999*t51793;
  t74965 = -1.*t45285*t74633;
  t74997 = -1.*t73211*t51793;
  t80854 = t8399*t74876;
  t80855 = t74687*t44823;
  t80856 = t80854 + t80855;
  t80871 = t8399*t74687;
  t80872 = -1.*t74876*t44823;
  t80873 = t80871 + t80872;
  t75196 = t45285*t74633;
  t75208 = t73211*t51793;
  t75220 = -1.*t70204*t51793;
  t75363 = -1.*t74633*t50395;
  t75388 = -1.*t74633*t49138;
  t75394 = -1.*t72999*t51793;
  t75405 = t70204*t51793;
  t75414 = t74633*t50395;
  t76212 = t70204*t45292;
  t76349 = t45039*t76269;
  t76350 = t76212 + t76349;
  t76352 = t72999*t45292;
  t79774 = t45039*t79434;
  t79821 = t76352 + t79774;
  t79958 = t73211*t45292;
  t80403 = t45039*t80402;
  t80404 = t79958 + t80403;
  t80857 = t80856*t48952;
  t80931 = t80610*t52075;
  t80969 = -1.*t44895*t80856;
  t80994 = -1.*t80734*t52075;
  t81124 = t74633*t45292;
  t81126 = t45039*t80873;
  t81128 = t81124 + t81126;
  t81131 = t45039*t74633;
  t81133 = -1.*t45292*t80873;
  t81136 = t81131 + t81133;
  t81003 = t44895*t80856;
  t81005 = t80734*t52075;
  t81018 = -1.*t80428*t52075;
  t81032 = -1.*t80856*t50243;
  t81043 = -1.*t80856*t48952;
  t81046 = -1.*t80610*t52075;
  t81051 = t80428*t52075;
  t81054 = t80856*t50243;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-1.29001548002322e-8*(-1.*t44961*t45632 - 1.*t44895*t7293) - 0.0042999871*(-1.*t44961*t49181 - 1.*t48952*t7293) - 1.29e-8*(-1.*t44961*t50558 - 1.*t50243*t7293))*var2[1] - 0.5*(-1.29001548002322e-8*(t44895*t44961 - 1.*t45632*t7293) - 0.0042999871*(t44961*t48952 - 1.*t49181*t7293) - 1.29e-8*(t44961*t50243 - 1.*t50558*t7293))*var2[2])*var2[17];
  p_output1[4]=(-0.5*(-1.29001548002322e-8*t45632 - 0.0042999871*t49181 - 1.29e-8*t50558)*var2[0] - 0.5*(1.29001548002322e-8*t51056*t7293 + 0.0042999871*t51091*t7293 + 1.29e-8*t51185*t7293)*var2[1] - 0.5*(-1.29001548002322e-8*t44961*t51056 - 0.0042999871*t44961*t51091 - 1.29e-8*t44961*t51185)*var2[2] - 0.5*(-0.000271000000004878*t50558 - 1.29e-8*((t49181*t51922 + t49181*t51955 + t51091*t52006 + t51550*t52006)*t52047 + t51550*(-1.*t45632*t51922 - 1.*t45632*t51955 - 1.*t51056*t52006 - 1.*t52006*t52047) + t49181*t52094 + t45632*t52184) - 0.0042999871*((t45632*t51922 + t45632*t51955 + t51056*t52006 + t52006*t52047)*t52276 + t52047*(-1.*t50558*t51922 - 1.*t50558*t51955 - 1.*t51185*t52006 - 1.*t52006*t52276) + t50558*t52476 + t45632*t52748) - 1.29001548002322e-8*((-1.*t49181*t51922 - 1.*t49181*t51955 - 1.*t51091*t52006 - 1.*t51550*t52006)*t52276 + t51550*(t50558*t51922 + t50558*t51955 + t51185*t52006 + t52006*t52276) + t50558*t53006 + t49181*t53452))*var2[3])*var2[17];
  p_output1[5]=(-0.5*(-1.29001548002322e-8*t45039*t53853 - 0.0042999871*t45039*t54137 - 1.29e-8*t45039*t54424)*var2[0] - 0.5*(-1.29001548002322e-8*(t44961*t45396 + t45292*t53853*t7293) - 0.0042999871*(t44961*t49166 + t45292*t54137*t7293) - 1.29e-8*(t44961*t50535 + t45292*t54424*t7293))*var2[1] - 0.5*(-1.29001548002322e-8*(-1.*t44961*t45292*t53853 + t45396*t7293) - 0.0042999871*(-1.*t44961*t45292*t54137 + t49166*t7293) - 1.29e-8*(-1.*t44961*t45292*t54424 + t50535*t7293))*var2[2] - 0.5*(-0.000271000000004878*t45039*t54424 - 1.29e-8*(t45039*t52184*t53853 + t45039*t52094*t54137 + t51550*(-1.*t45039*t51955*t53853 + t45292*t52006*t53853 + t45292*t45632*t55828 - 1.*t45039*t52047*t55828 + t55859 + t55875) + t52047*(t45039*t51955*t54137 - 1.*t45292*t52006*t54137 - 1.*t45292*t49181*t55828 + t45039*t51550*t55828 + t56031 + t56064)) - 0.0042999871*(t45039*t52748*t53853 + t45039*t52476*t54424 + t52276*(t45039*t51955*t53853 - 1.*t45292*t52006*t53853 - 1.*t45292*t45632*t55828 + t45039*t52047*t55828 + t56322 + t56664) + t52047*(-1.*t45039*t51955*t54424 + t45292*t52006*t54424 + t45292*t50558*t55828 - 1.*t45039*t52276*t55828 + t57255 + t57267)) - 1.29001548002322e-8*(t45039*t53452*t54137 + t45039*t53006*t54424 + t52276*(-1.*t45039*t51955*t54137 + t45292*t52006*t54137 + t45292*t49181*t55828 - 1.*t45039*t51550*t55828 + t57424 + t57534) + t51550*(t45039*t51955*t54424 - 1.*t45292*t52006*t54424 - 1.*t45292*t50558*t55828 + t45039*t52276*t55828 + t59285 + t59386)))*var2[3] - 0.5*(-0.000271000000004878*t50535 - 1.29e-8*(t49166*t55687 + t48952*(-1.*t51909*t53853 - 1.*t45396*t55828 + t55859 + t55875) + t44895*(t51909*t54137 + t49166*t55828 + t56031 + t56064) + t45396*t56144) - 0.0042999871*(t50535*t56281 + t50243*(t51909*t53853 + t45396*t55828 + t56322 + t56664) + t45396*t57238 + t44895*(-1.*t51909*t54424 - 1.*t50535*t55828 + t57255 + t57267)) - 1.29001548002322e-8*(t50243*(-1.*t51909*t54137 - 1.*t49166*t55828 + t57424 + t57534) + t50535*t58307 + t49166*t58426 + t48952*(t51909*t54424 + t50535*t55828 + t59285 + t59386)))*var2[4])*var2[17];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=(-0.5*(-1.29001548002322e-8*t64553 - 0.0042999871*t65296 - 1.29e-8*t66982)*var2[0] - 0.5*(-1.29001548002322e-8*(t44961*t67945 - 1.*t67952*t7293) - 0.0042999871*(t44961*t67978 - 1.*t67998*t7293) - 1.29e-8*(t44961*t68078 - 1.*t68088*t7293))*var2[1] - 0.5*(-1.29001548002322e-8*(t44961*t67952 + t67945*t7293) - 0.0042999871*(t44961*t67998 + t67978*t7293) - 1.29e-8*(t44961*t68088 + t68078*t7293))*var2[2] - 0.5*(-0.000271000000004878*t66982 - 1.29e-8*(t52184*t64553 + t52094*t65296 + t51550*(-1.*t51955*t64553 - 1.*t52006*t67952 + t68229 + t68261 - 1.*t52047*t68744 - 1.*t45632*t68776) + t52047*(t51955*t65296 + t52006*t67998 + t68272 + t68277 + t51550*t68744 + t49181*t68776)) - 0.0042999871*(t52748*t64553 + t52476*t66982 + t52276*(t51955*t64553 + t52006*t67952 + t68349 + t68362 + t52047*t68744 + t45632*t68776) + t52047*(-1.*t51955*t66982 - 1.*t52006*t68088 + t68420 + t68472 - 1.*t52276*t68744 - 1.*t50558*t68776)) - 1.29001548002322e-8*(t53452*t65296 + t53006*t66982 + t52276*(-1.*t51955*t65296 - 1.*t52006*t67998 + t68508 + t68518 - 1.*t51550*t68744 - 1.*t49181*t68776) + t51550*(t51955*t66982 + t52006*t68088 + t68536 + t68545 + t52276*t68744 + t50558*t68776)))*var2[3] - 0.5*(-0.000271000000004878*t68078 - 1.29e-8*(t56144*t67945 + t55687*t67978 + t48952*(t62604 + t62769 - 1.*t51909*t64373 + t68229 - 1.*t45396*t68245 + t68261) + t44895*(t63048 + t63216 + t51909*t64648 + t49166*t68245 + t68272 + t68277)) - 0.0042999871*(t57238*t67945 + t56281*t68078 + t50243*(t63511 + t63572 + t51909*t64373 + t45396*t68245 + t68349 + t68362) + t44895*(t63723 + t63810 - 1.*t51909*t66906 - 1.*t50535*t68245 + t68420 + t68472)) - 1.29001548002322e-8*(t58426*t67978 + t58307*t68078 + t50243*(t63836 + t63868 - 1.*t51909*t64648 - 1.*t49166*t68245 + t68508 + t68518) + t48952*(t64067 + t64101 + t51909*t66906 + t50535*t68245 + t68536 + t68545)))*var2[4] - 0.5*(-0.000271000000004878*t62512 - 1.29e-8*(t62566*t62577 + t49138*(t62604 - 1.*t44747*t62675 - 1.*t44726*t62741 + t62769 - 1.*t51825*t62812 - 1.*t51902*t62875) + t45285*(t48576*t62675 + t46133*t62741 + t63048 + t63216 + t51825*t63297 + t51902*t63386) + t62597*t63423) - 0.0042999871*(t62512*t63479 + t50395*(t44747*t62675 + t44726*t62741 + t51825*t62812 + t51902*t62875 + t63511 + t63572) + t62597*t63706 + t45285*(-1.*t50223*t62675 - 1.*t50068*t62741 + t63723 - 1.*t51825*t63775 - 1.*t51902*t63805 + t63810)) - 1.29001548002322e-8*(t50395*(-1.*t48576*t62675 - 1.*t46133*t62741 - 1.*t51825*t63297 - 1.*t51902*t63386 + t63836 + t63868) + t62512*t63927 + t62566*t63971 + t49138*(t50223*t62675 + t50068*t62741 + t51825*t63775 + t51902*t63805 + t64067 + t64101)))*var2[5])*var2[17];
  p_output1[16]=0;
  p_output1[17]=(-0.5*(-1.29e-8*t76350 - 0.0042999871*t79821 - 1.29001548002322e-8*t80404)*var2[0] - 0.5*(-1.29e-8*(t44961*t80428 - 1.*t7293*t80452) - 0.0042999871*(t44961*t80610 - 1.*t7293*t80630) - 1.29001548002322e-8*(t44961*t80734 - 1.*t7293*t80745))*var2[1] - 0.5*(-1.29e-8*(t7293*t80428 + t44961*t80452) - 0.0042999871*(t7293*t80610 + t44961*t80630) - 1.29001548002322e-8*(t7293*t80734 + t44961*t80745))*var2[2] - 0.5*(-0.000271000000004878*t76350 - 1.29e-8*(t52094*t79821 + t52184*t80404 + t51550*(-1.*t51955*t80404 - 1.*t52006*t80745 + t80969 + t80994 - 1.*t52047*t81128 - 1.*t45632*t81136) + t52047*(t51955*t79821 + t52006*t80630 + t80857 + t80931 + t51550*t81128 + t49181*t81136)) - 0.0042999871*(t52476*t76350 + t52748*t80404 + t52276*(t51955*t80404 + t52006*t80745 + t81003 + t81005 + t52047*t81128 + t45632*t81136) + t52047*(-1.*t51955*t76350 - 1.*t52006*t80452 + t81018 + t81032 - 1.*t52276*t81128 - 1.*t50558*t81136)) - 1.29001548002322e-8*(t53006*t76350 + t53452*t79821 + t52276*(-1.*t51955*t79821 - 1.*t52006*t80630 + t81043 + t81046 - 1.*t51550*t81128 - 1.*t49181*t81136) + t51550*(t51955*t76350 + t52006*t80452 + t81051 + t81054 + t52276*t81128 + t50558*t81136)))*var2[3] - 0.5*(-0.000271000000004878*t80428 - 1.29e-8*(t55687*t80610 + t56144*t80734 + t44895*(t74666 + t74893 + t51909*t79434 + t80857 + t49166*t80873 + t80931) + t48952*(t74965 + t74997 - 1.*t51909*t80402 - 1.*t45396*t80873 + t80969 + t80994)) - 0.0042999871*(t56281*t80428 + t57238*t80734 + t50243*(t75196 + t75208 + t51909*t80402 + t45396*t80873 + t81003 + t81005) + t44895*(t75220 + t75363 - 1.*t51909*t76269 - 1.*t50535*t80873 + t81018 + t81032)) - 1.29001548002322e-8*(t58307*t80428 + t58426*t80610 + t50243*(t75388 + t75394 - 1.*t51909*t79434 - 1.*t49166*t80873 + t81043 + t81046) + t48952*(t75405 + t75414 + t51909*t76269 + t50535*t80873 + t81051 + t81054)))*var2[4] - 0.5*(-0.000271000000004878*t70204 - 1.29e-8*(t62577*t72999 + t63423*t73211 + t45285*(t74666 + t48576*t74687 + t46133*t74876 + t74893 + t51825*t74908 + t51902*t74950) + t49138*(-1.*t44747*t74687 - 1.*t44726*t74876 + t74965 + t74997 - 1.*t51825*t75148 - 1.*t51902*t75166)) - 0.0042999871*(t63479*t70204 + t63706*t73211 + t50395*(t44747*t74687 + t44726*t74876 + t51825*t75148 + t51902*t75166 + t75196 + t75208) + t45285*(-1.*t50223*t74687 - 1.*t50068*t74876 + t75220 - 1.*t51825*t75234 - 1.*t51902*t75343 + t75363)) - 1.29001548002322e-8*(t63927*t70204 + t63971*t72999 + t50395*(-1.*t48576*t74687 - 1.*t46133*t74876 - 1.*t51825*t74908 - 1.*t51902*t74950 + t75388 + t75394) + t49138*(t50223*t74687 + t50068*t74876 + t51825*t75234 + t51902*t75343 + t75405 + t75414)))*var2[5] - 0.5*(-0.000271000000004878*(1.8e-11*t22765 - 3.e-6*t69473 - 3.e-6*t70129 + t75461) - 1.29e-8*(0.2*(2.7e-17*t22765 + t69468 - 3.e-6*t69654) - 1.*t72271*t75536 - 1.*t44712*t75553 - 1.*t73002*t75567 - 1.*t46125*t75593 - 3.e-6*(t72832*t75536 + t43925*t75553 + t73015*t75567 + t45984*t75593)) - 0.0042999871*(0.2*(t12861 + t69652 + t75461) - 1.*t69526*t75616 - 1.*t49210*t75631 - 1.*t44712*t75645 - 1.*t73002*t75650 - 3.e-6*(t70129*t75616 + t49804*t75631 + t43925*t75645 + t73015*t75650)) - 1.29001548002322e-8*(0.2*(-1.000000000009*t22765 + t75461) - 1.*t49210*t75705 - 1.*t69526*t75778 - 1.*t46125*t75787 - 1.*t72271*t75798 - 3.e-6*(t49804*t75705 + t70129*t75778 + t45984*t75787 + t72832*t75798)))*var2[15])*var2[17];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec18_minitaur.hh"

namespace FrontStance
{

void Ce3_vec18_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
