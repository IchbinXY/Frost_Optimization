/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:11:17 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t67045;
  double t68754;
  double t68756;
  double t68765;
  double t2357;
  double t68204;
  double t69639;
  double t69651;
  double t69521;
  double t69525;
  double t69543;
  double t68757;
  double t68763;
  double t69012;
  double t69037;
  double t69195;
  double t69519;
  double t69637;
  double t69640;
  double t69645;
  double t69683;
  double t69741;
  double t69742;
  double t69749;
  double t69569;
  double t69575;
  double t69794;
  double t69797;
  double t69799;
  double t70142;
  double t70143;
  double t70145;
  double t70146;
  double t70190;
  double t70207;
  double t69932;
  double t69973;
  double t70106;
  double t70252;
  double t70257;
  double t70260;
  double t70309;
  double t70337;
  double t70331;
  double t70327;
  double t70384;
  double t70388;
  double t70379;
  double t70346;
  double t70349;
  double t70364;
  double t70365;
  double t70366;
  double t70367;
  double t70403;
  double t70435;
  double t70412;
  double t70471;
  double t70395;
  double t70405;
  double t70407;
  double t70417;
  double t70424;
  double t70425;
  double t70426;
  double t70428;
  double t70434;
  double t70438;
  double t70443;
  double t70454;
  double t70460;
  double t70462;
  double t70466;
  double t70469;
  double t70474;
  double t70475;
  double t70476;
  double t70480;
  double t70487;
  double t70492;
  double t70496;
  double t70497;
  double t70501;
  double t70502;
  double t70505;
  double t70506;
  double t70397;
  double t70406;
  double t70409;
  double t70410;
  double t70350;
  double t70359;
  double t70376;
  double t70378;
  double t70390;
  double t70393;
  double t70394;
  double t70411;
  double t70452;
  double t70484;
  double t70507;
  double t70513;
  double t70542;
  double t70546;
  double t70549;
  double t70552;
  double t70554;
  double t70567;
  double t70571;
  double t70573;
  double t70579;
  double t70580;
  double t69520;
  double t69739;
  double t69770;
  double t69787;
  double t69796;
  double t69801;
  double t69805;
  double t69841;
  double t69902;
  double t69921;
  double t70062;
  double t70099;
  double t70103;
  double t70105;
  double t70134;
  double t70135;
  double t70136;
  double t70137;
  double t70614;
  double t70615;
  double t70616;
  double t70621;
  double t70626;
  double t70630;
  double t70633;
  double t70637;
  double t70669;
  double t70687;
  double t70707;
  double t70688;
  double t70690;
  double t70692;
  double t70697;
  double t70708;
  double t70718;
  double t70723;
  double t70728;
  double t70729;
  double t70732;
  double t70733;
  double t70734;
  double t70737;
  double t70738;
  double t70743;
  double t70144;
  double t70152;
  double t70208;
  double t70209;
  double t70212;
  double t70213;
  double t70215;
  double t70217;
  double t70223;
  double t70224;
  double t70225;
  double t70226;
  double t70753;
  double t70754;
  double t70755;
  double t70757;
  double t70667;
  double t70670;
  double t70673;
  double t70678;
  double t70679;
  double t70683;
  double t70748;
  double t70749;
  double t70750;
  double t70751;
  double t70701;
  double t70730;
  double t70744;
  double t70745;
  double t70668;
  double t70676;
  double t70684;
  double t70686;
  double t70805;
  double t70806;
  double t70814;
  double t70820;
  double t70824;
  double t70826;
  double t70827;
  double t70828;
  double t70522;
  double t70525;
  double t70526;
  double t70539;
  double t70558;
  double t70560;
  double t70563;
  double t70566;
  double t70256;
  double t70259;
  double t70261;
  double t70263;
  double t70265;
  double t70266;
  double t70267;
  double t70268;
  double t70281;
  double t70286;
  double t70287;
  double t70289;
  double t70848;
  double t70849;
  double t70850;
  double t70851;
  double t70876;
  double t70877;
  double t70878;
  double t70879;
  double t70211;
  double t70221;
  double t70227;
  double t70233;
  double t70249;
  double t70250;
  double t70660;
  double t70661;
  double t70662;
  double t70664;
  double t70833;
  double t70834;
  double t70835;
  double t70836;
  double t70264;
  double t70279;
  double t70290;
  double t70291;
  double t70292;
  double t70293;
  double t70518;
  double t70557;
  double t70590;
  double t70599;
  double t70608;
  double t70625;
  double t70639;
  double t70640;
  double t70990;
  double t70992;
  double t70993;
  double t70994;
  double t70996;
  double t70997;
  double t70998;
  double t70999;
  double t71025;
  double t71028;
  double t71029;
  double t71030;
  double t71034;
  double t71037;
  double t71039;
  double t71043;
  double t71045;
  double t71046;
  double t71047;
  double t71052;
  double t71053;
  double t71054;
  double t71055;
  double t71059;
  double t71060;
  double t71061;
  double t71064;
  double t71066;
  double t71071;
  double t71073;
  double t70839;
  double t70840;
  double t70841;
  double t70843;
  double t70844;
  double t70845;
  double t71021;
  double t71094;
  double t71095;
  double t71097;
  double t71099;
  double t71103;
  double t71105;
  double t71120;
  double t71126;
  double t71132;
  double t71137;
  double t71138;
  double t71143;
  double t71145;
  double t71146;
  double t71147;
  double t71148;
  double t71151;
  double t71153;
  double t71159;
  double t71160;
  double t71161;
  double t71165;
  double t70884;
  double t70885;
  double t70886;
  double t70890;
  double t70891;
  double t70892;
  double t71197;
  double t71281;
  double t71282;
  double t71286;
  double t71290;
  double t71298;
  double t71299;
  double t71302;
  double t71313;
  double t71324;
  double t71327;
  double t71331;
  double t71333;
  double t71341;
  double t71342;
  double t70943;
  double t70944;
  double t70963;
  double t70964;
  double t70965;
  double t70966;
  double t71430;
  double t71450;
  double t71434;
  double t71441;
  double t71442;
  double t71452;
  double t71456;
  double t71457;
  double t71461;
  double t71462;
  double t71463;
  double t71466;
  double t71467;
  double t71468;
  double t71473;
  double t71475;
  double t71476;
  double t71478;
  double t71479;
  double t71480;
  double t71495;
  double t71500;
  double t71501;
  double t71507;
  double t71510;
  double t71514;
  double t71522;
  double t71527;
  double t71528;
  double t71530;
  double t71535;
  double t71536;
  double t71548;
  double t71550;
  double t71553;
  double t71555;
  double t71557;
  double t71560;
  double t71625;
  double t71626;
  double t71627;
  double t71641;
  double t71642;
  double t71660;
  double t71631;
  double t71661;
  double t71662;
  double t71664;
  double t71665;
  double t71666;
  double t70914;
  double t70918;
  double t70934;
  double t70937;
  double t71693;
  double t71696;
  double t71699;
  double t71707;
  double t71708;
  double t71718;
  double t71753;
  double t71758;
  double t71766;
  double t70854;
  double t70858;
  double t70867;
  double t70873;
  double t71785;
  double t71787;
  double t71788;
  double t71822;
  double t71823;
  double t71829;
  double t70746;
  double t70772;
  double t70795;
  double t70830;
  double t71831;
  double t71832;
  double t71833;
  double t71912;
  double t71913;
  double t71914;
  double t71917;
  double t71918;
  double t71929;
  double t71916;
  double t71933;
  double t71934;
  double t71943;
  double t71946;
  double t71947;
  double t71700;
  double t71736;
  double t71741;
  double t71743;
  double t71961;
  double t71962;
  double t71970;
  double t71974;
  double t71975;
  double t71976;
  double t71990;
  double t71991;
  double t71993;
  double t71798;
  double t71803;
  double t71809;
  double t71812;
  double t71999;
  double t72001;
  double t72004;
  double t72032;
  double t72038;
  double t72042;
  double t71838;
  double t71849;
  double t71858;
  double t71891;
  double t72044;
  double t72045;
  double t72046;
  double t71569;
  double t71571;
  double t71576;
  double t71591;
  double t71596;
  double t71597;
  double t71601;
  double t71602;
  double t71603;
  double t70604;
  double t70650;
  double t70655;
  double t70666;
  double t70752;
  double t70762;
  double t70778;
  double t70781;
  double t70789;
  double t70790;
  double t70798;
  double t70802;
  double t70823;
  double t70829;
  double t70831;
  double t70832;
  double t70837;
  double t70838;
  double t71578;
  double t71579;
  double t71581;
  double t70852;
  double t70855;
  double t70857;
  double t70859;
  double t70861;
  double t70862;
  double t70866;
  double t70869;
  double t70870;
  double t70871;
  double t70872;
  double t70874;
  double t70875;
  double t70880;
  double t70881;
  double t71584;
  double t71588;
  double t71589;
  double t70894;
  double t70895;
  double t70898;
  double t70904;
  double t70905;
  double t70906;
  double t70912;
  double t70913;
  double t70915;
  double t70917;
  double t70919;
  double t70921;
  double t70926;
  double t70930;
  double t70935;
  double t70936;
  double t70938;
  double t70939;
  double t70940;
  double t70941;
  double t70942;
  double t71605;
  double t71606;
  double t71607;
  double t70984;
  double t70987;
  double t70988;
  double t70989;
  double t70995;
  double t71001;
  double t71005;
  double t71010;
  double t71013;
  double t71014;
  double t71015;
  double t71022;
  double t71023;
  double t71024;
  double t71041;
  double t71049;
  double t71062;
  double t71075;
  double t71077;
  double t71079;
  double t71080;
  double t71081;
  double t71083;
  double t71085;
  double t71087;
  double t71089;
  double t71092;
  double t71102;
  double t71139;
  double t71157;
  double t71172;
  double t71174;
  double t71182;
  double t71188;
  double t71189;
  double t71191;
  double t71194;
  double t71195;
  double t71199;
  double t71200;
  double t71201;
  double t71203;
  double t71205;
  double t71206;
  double t71213;
  double t71217;
  double t71218;
  double t71231;
  double t71232;
  double t71234;
  double t71239;
  double t71248;
  double t71251;
  double t71252;
  double t71256;
  double t71258;
  double t71265;
  double t71266;
  double t71267;
  double t71277;
  double t71279;
  double t71303;
  double t71310;
  double t71354;
  double t71355;
  double t71358;
  double t71359;
  double t71371;
  double t71376;
  double t71383;
  double t71395;
  double t71577;
  double t71583;
  double t71590;
  double t71600;
  double t71604;
  double t71609;
  double t71610;
  double t71505;
  double t71515;
  double t71516;
  double t71477;
  double t71485;
  double t71487;
  double t71529;
  double t71539;
  double t71542;
  double t71464;
  double t71469;
  double t71470;
  double t71554;
  double t71563;
  double t71564;
  double t71444;
  double t71458;
  double t71459;
  double t71663;
  double t71670;
  double t71672;
  double t71680;
  double t71682;
  double t71729;
  double t71737;
  double t71738;
  double t71740;
  double t71742;
  double t71744;
  double t71745;
  double t71746;
  double t71747;
  double t71784;
  double t71794;
  double t71795;
  double t71797;
  double t71802;
  double t71805;
  double t71807;
  double t71808;
  double t71810;
  double t71811;
  double t71813;
  double t71814;
  double t71815;
  double t71819;
  double t71830;
  double t71834;
  double t71835;
  double t71837;
  double t71839;
  double t71852;
  double t71854;
  double t71857;
  double t71876;
  double t71889;
  double t71898;
  double t71903;
  double t71905;
  double t71908;
  double t71939;
  double t71948;
  double t71949;
  double t71953;
  double t71957;
  double t71973;
  double t71977;
  double t71978;
  double t71979;
  double t71980;
  double t71981;
  double t71982;
  double t71983;
  double t71984;
  double t71985;
  double t71986;
  double t71987;
  double t71988;
  double t71996;
  double t72005;
  double t72006;
  double t72008;
  double t72009;
  double t72010;
  double t72011;
  double t72012;
  double t72016;
  double t72017;
  double t72018;
  double t72019;
  double t72020;
  double t72021;
  double t72022;
  double t72023;
  double t72024;
  double t72030;
  double t72043;
  double t72047;
  double t72048;
  double t72050;
  double t72054;
  double t72055;
  double t72056;
  double t72057;
  double t72059;
  double t72060;
  double t72061;
  double t72062;
  double t72069;
  double t72070;
  double t72071;
  double t72073;
  double t72074;
  double t72079;
  double t71460;
  double t71471;
  double t71494;
  double t71521;
  double t71547;
  double t71565;
  double t71566;
  double t72235;
  double t72236;
  double t72239;
  double t72246;
  double t72247;
  double t72250;
  double t72263;
  double t72449;
  double t72498;
  double t71950;
  double t71989;
  double t72007;
  double t72031;
  double t72049;
  double t72083;
  double t72132;
  double t72381;
  double t72382;
  double t72390;
  double t72391;
  double t72392;
  double t72393;
  double t72394;
  double t72284;
  double t72287;
  double t72295;
  double t72296;
  double t72297;
  double t72298;
  double t72299;
  double t72443;
  double t72445;
  double t72446;
  double t72448;
  double t72450;
  double t72452;
  double t72487;
  double t72505;
  double t72509;
  double t72586;
  double t72596;
  double t72608;
  double t72617;
  double t72620;
  double t72626;
  double t71678;
  double t71748;
  double t71796;
  double t71821;
  double t71836;
  double t71909;
  double t71910;
  double t72349;
  double t72353;
  double t72357;
  double t72363;
  double t72374;
  double t72375;
  double t72376;
  double t72273;
  double t72274;
  double t72275;
  double t72276;
  double t72278;
  double t72280;
  double t72281;
  double t72689;
  double t72695;
  double t72696;
  double t72697;
  double t72698;
  double t72709;
  double t72713;
  double t72726;
  double t72763;
  double t72767;
  double t72768;
  double t72810;
  double t72820;
  double t70657;
  double t70847;
  double t70893;
  double t70900;
  double t70910;
  double t70970;
  double t70975;
  double t72309;
  double t72310;
  double t72311;
  double t72313;
  double t72314;
  double t72315;
  double t72316;
  double t72177;
  double t72178;
  double t72179;
  double t72181;
  double t72200;
  double t72201;
  double t72202;
  double t72946;
  double t72948;
  double t72954;
  double t72958;
  double t72962;
  double t72963;
  double t72964;
  double t72965;
  double t72966;
  double t72967;
  double t72968;
  double t72969;
  double t72971;
  double t72424;
  double t72425;
  double t72428;
  double t72431;
  double t72432;
  double t72433;
  double t72434;
  double t72435;
  double t72436;
  double t72437;
  double t72438;
  double t72439;
  double t72441;
  double t73215;
  double t73217;
  double t73219;
  double t73220;
  double t73227;
  double t73240;
  double t73241;
  double t73242;
  double t73244;
  double t73246;
  double t73247;
  double t73248;
  double t73249;
  double t71016;
  double t71088;
  double t71196;
  double t71219;
  double t71259;
  double t71396;
  double t71401;
  double t72318;
  double t72319;
  double t72320;
  double t72321;
  double t72323;
  double t72324;
  double t72325;
  double t72204;
  double t72205;
  double t72226;
  double t72227;
  double t72228;
  double t72229;
  double t72230;
  double t72974;
  double t72975;
  double t72980;
  double t72981;
  double t72982;
  double t72988;
  double t72989;
  double t72990;
  double t72992;
  double t72993;
  double t72994;
  double t72996;
  double t72997;
  double t72447;
  double t72451;
  double t72492;
  double t72513;
  double t72605;
  double t72630;
  double t72639;
  double t72646;
  double t72650;
  double t72651;
  double t72654;
  double t72668;
  double t72672;
  double t73032;
  double t73040;
  double t73041;
  double t73049;
  double t73088;
  double t73276;
  double t73277;
  double t73278;
  double t73279;
  double t73280;
  double t70138;
  double t70251;
  double t70296;
  double t70302;
  double t72303;
  double t72304;
  double t72305;
  double t72306;
  double t72168;
  double t72169;
  double t72170;
  double t72174;
  double t72933;
  double t72934;
  double t72936;
  double t72937;
  double t72938;
  double t72398;
  double t72399;
  double t72400;
  double t72401;
  double t72415;
  t67045 = Cos(var1[17]);
  t68754 = Sin(var1[17]);
  t68756 = 3.e-6*t68754;
  t68765 = 3.e-6*t67045;
  t2357 = Sin(var1[15]);
  t68204 = -3.e-6*t67045;
  t69639 = 9.e-12*t68754;
  t69651 = -2.7e-17*t68754;
  t69521 = Cos(var1[15]);
  t69525 = -1.*t69521;
  t69543 = 1. + t69525;
  t68757 = t68204 + t68756;
  t68763 = 3.e-6*t68757;
  t69012 = t68765 + t68756;
  t69037 = 3.e-6*t69012;
  t69195 = -1.8e-11*t68754;
  t69519 = t68763 + t69037 + t69195;
  t69637 = -1.*t67045;
  t69640 = t69637 + t69639;
  t69645 = 3.e-6*t69640;
  t69683 = t68765 + t69645 + t69651;
  t69741 = t67045 + t69639;
  t69742 = 3.e-6*t69741;
  t69749 = t68204 + t69742 + t69651;
  t69569 = -1.000000000009*t69543;
  t69575 = 1. + t69569;
  t69794 = Sin(var1[4]);
  t69797 = Cos(var1[4]);
  t69799 = Cos(var1[5]);
  t70142 = -3.000000000054e-6*t68754;
  t70143 = t68204 + t70142;
  t70145 = -9.e-12*t68754;
  t70146 = t67045 + t69037 + t70145;
  t70190 = 1.000000000009*t68754;
  t70207 = t68763 + t70190;
  t69932 = -9.e-12*t69543;
  t69973 = 1. + t69932;
  t70106 = Sin(var1[5]);
  t70252 = t68765 + t70142;
  t70257 = t69637 + t68763 + t70145;
  t70260 = t69037 + t70190;
  t70309 = 1. + t69637;
  t70337 = -3.e-6*t68754;
  t70331 = 3.e-6*t70309;
  t70327 = 1.000000000009*t70309;
  t70384 = t70331 + t68756;
  t70388 = 3.e-6*t70384;
  t70379 = -9.e-12*t70309;
  t70346 = t70331 + t70337;
  t70349 = 3.e-6*t70346;
  t70364 = -1.8e-11*t70309;
  t70365 = 1. + t70364;
  t70366 = 3.e-6*t70365;
  t70367 = -3.e-6*t70309;
  t70403 = -1.*t68754;
  t70435 = t70367 + t68756;
  t70412 = 9.e-13*var1[17];
  t70471 = t70367 + t70337;
  t70395 = -1. + t70327 + t70388;
  t70405 = t70379 + t70349 + t70403;
  t70407 = t70366 + t70367 + t68756;
  t70417 = -1.000000000009*t70309;
  t70424 = 1. + t70417;
  t70425 = 0.2*t70424;
  t70426 = 0.2000000000018*t70309;
  t70428 = t70379 + t70403;
  t70434 = 0.1*t70428;
  t70438 = 0.0999991*t70435;
  t70443 = t70412 + t70425 + t70426 + t70434 + t70438;
  t70454 = 3.e-7*var1[17];
  t70460 = 1.8e-11*t70309;
  t70462 = -1. + t70460;
  t70466 = 0.1*t70462;
  t70469 = -1.62e-17*t70309;
  t70474 = 0.2*t70471;
  t70475 = 0.1*t70435;
  t70476 = 0.2*t70384;
  t70480 = t70454 + t70466 + t70469 + t70474 + t70475 + t70476;
  t70487 = 0.1000000000009*t70309;
  t70492 = 9.e-12*t70309;
  t70496 = t70492 + t70403;
  t70497 = 0.2*t70496;
  t70501 = 0.0999991*t70471;
  t70502 = t70379 + t68754;
  t70505 = 0.2*t70502;
  t70506 = t70412 + t70487 + t70497 + t70501 + t70505;
  t70397 = t69575*t70395;
  t70406 = t2357*t70405;
  t70409 = -3.e-6*t2357*t70407;
  t70410 = t70397 + t70406 + t70409;
  t70350 = -1. + t70327 + t70349;
  t70359 = t2357*t70350;
  t70376 = t70366 + t70367 + t70337;
  t70378 = -3.e-6*t2357*t70376;
  t70390 = t70379 + t70388 + t68754;
  t70393 = t69575*t70390;
  t70394 = t70359 + t70378 + t70393;
  t70411 = -0.2000000000018*t2357;
  t70452 = t2357*t70443;
  t70484 = -3.e-6*t2357*t70480;
  t70507 = t69575*t70506;
  t70513 = t70411 + t70452 + t70484 + t70507;
  t70542 = 0.2000000000018*t69543;
  t70546 = t69521*t70443;
  t70549 = 3.e-6*t69543*t70480;
  t70552 = -1.*t2357*t70506;
  t70554 = t70542 + t70546 + t70549 + t70552;
  t70567 = -6.000000000054e-7*t69543;
  t70571 = 3.e-6*t69543*t70443;
  t70573 = t69973*t70480;
  t70579 = 3.e-6*t2357*t70506;
  t70580 = t70567 + t70571 + t70573 + t70579;
  t69520 = -3.e-6*t2357*t69519;
  t69739 = t69575*t69683;
  t69770 = t2357*t69749;
  t69787 = t69520 + t69739 + t69770;
  t69796 = t69787*t69794;
  t69801 = 3.e-6*t69543*t69519;
  t69805 = -1.*t2357*t69683;
  t69841 = t69521*t69749;
  t69902 = t69801 + t69805 + t69841;
  t69921 = t69799*t69902;
  t70062 = t69973*t69519;
  t70099 = 3.e-6*t2357*t69683;
  t70103 = 3.e-6*t69543*t69749;
  t70105 = t70062 + t70099 + t70103;
  t70134 = -1.*t70105*t70106;
  t70135 = t69921 + t70134;
  t70136 = t69797*t70135;
  t70137 = t69796 + t70136;
  t70614 = t69521*t70350;
  t70615 = 3.e-6*t69543*t70376;
  t70616 = -1.*t2357*t70390;
  t70621 = t70614 + t70615 + t70616;
  t70626 = 3.e-6*t69543*t70350;
  t70630 = t69973*t70376;
  t70633 = 3.e-6*t2357*t70390;
  t70637 = t70626 + t70630 + t70633;
  t70669 = 3.e-6*t70424;
  t70687 = t68765 + t70337;
  t70707 = t68204 + t70337;
  t70688 = 0.0999991*t70687;
  t70690 = t69637 + t70145;
  t70692 = 0.1*t70690;
  t70697 = 9.e-13 + t70688 + t70692;
  t70708 = 0.2*t70707;
  t70718 = 0.1*t70687;
  t70723 = 0.2*t69012;
  t70728 = 1.7999838e-12*t68754;
  t70729 = 3.e-7 + t70708 + t70718 + t70723 + t70728;
  t70732 = 0.0999991*t70707;
  t70733 = t67045 + t70145;
  t70734 = 0.2*t70733;
  t70737 = 0.2*t69640;
  t70738 = 0.1000000000009*t68754;
  t70743 = 9.e-13 + t70732 + t70734 + t70737 + t70738;
  t70144 = -3.e-6*t2357*t70143;
  t70152 = t69575*t70146;
  t70208 = t2357*t70207;
  t70209 = t70144 + t70152 + t70208;
  t70212 = 3.e-6*t69543*t70143;
  t70213 = -1.*t2357*t70146;
  t70215 = t69521*t70207;
  t70217 = t70212 + t70213 + t70215;
  t70223 = t69973*t70143;
  t70224 = 3.e-6*t2357*t70146;
  t70225 = 3.e-6*t69543*t70207;
  t70226 = t70223 + t70224 + t70225;
  t70753 = 3.e-6*t69543*t70697;
  t70754 = t69973*t70729;
  t70755 = 3.e-6*t2357*t70743;
  t70757 = t70753 + t70754 + t70755;
  t70667 = 1. + t70364 + t70349 + t70388;
  t70670 = 3.e-6*t70496;
  t70673 = t70669 + t70331 + t70670 + t68756;
  t70678 = t70492 + t68754;
  t70679 = 3.e-6*t70678;
  t70683 = t70669 + t70331 + t70337 + t70679;
  t70748 = t69521*t70697;
  t70749 = 3.e-6*t69543*t70729;
  t70750 = -1.*t2357*t70743;
  t70751 = t70748 + t70749 + t70750;
  t70701 = t2357*t70697;
  t70730 = -3.e-6*t2357*t70729;
  t70744 = t69575*t70743;
  t70745 = t70701 + t70730 + t70744;
  t70668 = -3.e-6*t2357*t70667;
  t70676 = t69575*t70673;
  t70684 = t2357*t70683;
  t70686 = t70668 + t70676 + t70684;
  t70805 = t69973*t70667;
  t70806 = 3.e-6*t2357*t70673;
  t70814 = 3.e-6*t69543*t70683;
  t70820 = t70805 + t70806 + t70814;
  t70824 = 3.e-6*t69543*t70667;
  t70826 = -1.*t2357*t70673;
  t70827 = t69521*t70683;
  t70828 = t70824 + t70826 + t70827;
  t70522 = -1.*t2357*t70395;
  t70525 = t69521*t70405;
  t70526 = 3.e-6*t69543*t70407;
  t70539 = t70522 + t70525 + t70526;
  t70558 = 3.e-6*t2357*t70395;
  t70560 = 3.e-6*t69543*t70405;
  t70563 = t69973*t70407;
  t70566 = t70558 + t70560 + t70563;
  t70256 = -3.e-6*t2357*t70252;
  t70259 = t2357*t70257;
  t70261 = t69575*t70260;
  t70263 = t70256 + t70259 + t70261;
  t70265 = 3.e-6*t69543*t70252;
  t70266 = t69521*t70257;
  t70267 = -1.*t2357*t70260;
  t70268 = t70265 + t70266 + t70267;
  t70281 = t69973*t70252;
  t70286 = 3.e-6*t69543*t70257;
  t70287 = 3.e-6*t2357*t70260;
  t70289 = t70281 + t70286 + t70287;
  t70848 = t70410*t70513;
  t70849 = t70539*t70554;
  t70850 = t70566*t70580;
  t70851 = t70848 + t70849 + t70850;
  t70876 = -1.*t70580*t70820;
  t70877 = -1.*t70554*t70828;
  t70878 = -1.*t70513*t70686;
  t70879 = t70876 + t70877 + t70878;
  t70211 = t70209*t69794;
  t70221 = t69799*t70217;
  t70227 = -1.*t70226*t70106;
  t70233 = t70221 + t70227;
  t70249 = t69797*t70233;
  t70250 = t70211 + t70249;
  t70660 = -1.*t70394*t70513;
  t70661 = -1.*t70621*t70554;
  t70662 = -1.*t70637*t70580;
  t70664 = t70660 + t70661 + t70662;
  t70833 = t70580*t70820;
  t70834 = t70554*t70828;
  t70835 = t70513*t70686;
  t70836 = t70833 + t70834 + t70835;
  t70264 = t70263*t69794;
  t70279 = t69799*t70268;
  t70290 = -1.*t70289*t70106;
  t70291 = t70279 + t70290;
  t70292 = t69797*t70291;
  t70293 = t70264 + t70292;
  t70518 = -1.*t70410*t70513;
  t70557 = -1.*t70539*t70554;
  t70590 = -1.*t70566*t70580;
  t70599 = t70518 + t70557 + t70590;
  t70608 = t70394*t70513;
  t70625 = t70621*t70554;
  t70639 = t70637*t70580;
  t70640 = t70608 + t70625 + t70639;
  t70990 = -1.*t70443*t70405;
  t70992 = -1.*t70480*t70407;
  t70993 = -1.*t70395*t70506;
  t70994 = t70990 + t70992 + t70993;
  t70996 = t70350*t70443;
  t70997 = t70480*t70376;
  t70998 = t70390*t70506;
  t70999 = t70996 + t70997 + t70998;
  t71025 = -1.*t70350*t70697;
  t71028 = -1.*t70480*t70143;
  t71029 = -1.*t70376*t70729;
  t71030 = -1.*t70743*t70390;
  t71034 = -1.*t70443*t70207;
  t71037 = -1.*t70146*t70506;
  t71039 = t71025 + t71028 + t71029 + t71030 + t71034 + t71037;
  t71043 = -1.*t70350*t70443;
  t71045 = -1.*t70480*t70376;
  t71046 = -1.*t70390*t70506;
  t71047 = t71043 + t71045 + t71046;
  t71052 = t70480*t69519;
  t71053 = t70443*t69749;
  t71054 = t70667*t70729;
  t71055 = t70673*t70743;
  t71059 = t69683*t70506;
  t71060 = t70697*t70683;
  t71061 = t71052 + t71053 + t71054 + t71055 + t71059 + t71060;
  t71064 = t70667*t70480;
  t71066 = t70673*t70506;
  t71071 = t70443*t70683;
  t71073 = t71064 + t71066 + t71071;
  t70839 = t70410*t69794;
  t70840 = t69799*t70539;
  t70841 = -1.*t70566*t70106;
  t70843 = t70840 + t70841;
  t70844 = t69797*t70843;
  t70845 = t70839 + t70844;
  t71021 = -3.e-6*t69012;
  t71094 = t70443*t70405;
  t71095 = t70480*t70407;
  t71097 = t70395*t70506;
  t71099 = t71094 + t71095 + t71097;
  t71103 = t70697*t70405;
  t71105 = t70480*t70252;
  t71120 = t70443*t70257;
  t71126 = t70729*t70407;
  t71132 = t70395*t70743;
  t71137 = t70260*t70506;
  t71138 = t71103 + t71105 + t71120 + t71126 + t71132 + t71137;
  t71143 = -1.*t70480*t69519;
  t71145 = -1.*t70443*t69749;
  t71146 = -1.*t70667*t70729;
  t71147 = -1.*t70673*t70743;
  t71148 = -1.*t69683*t70506;
  t71151 = -1.*t70697*t70683;
  t71153 = t71143 + t71145 + t71146 + t71147 + t71148 + t71151;
  t71159 = -1.*t70667*t70480;
  t71160 = -1.*t70673*t70506;
  t71161 = -1.*t70443*t70683;
  t71165 = t71159 + t71160 + t71161;
  t70884 = t70394*t69794;
  t70885 = t69799*t70621;
  t70886 = -1.*t70637*t70106;
  t70890 = t70885 + t70886;
  t70891 = t69797*t70890;
  t70892 = t70884 + t70891;
  t71197 = -3.e-6*t70384;
  t71281 = t70350*t70697;
  t71282 = t70480*t70143;
  t71286 = t70376*t70729;
  t71290 = t70743*t70390;
  t71298 = t70443*t70207;
  t71299 = t70146*t70506;
  t71302 = t71281 + t71282 + t71286 + t71290 + t71298 + t71299;
  t71313 = -1.*t70697*t70405;
  t71324 = -1.*t70480*t70252;
  t71327 = -1.*t70443*t70257;
  t71331 = -1.*t70729*t70407;
  t71333 = -1.*t70395*t70743;
  t71341 = -1.*t70260*t70506;
  t71342 = t71313 + t71324 + t71327 + t71331 + t71333 + t71341;
  t70943 = t70686*t69794;
  t70944 = t69799*t70828;
  t70963 = -1.*t70820*t70106;
  t70964 = t70944 + t70963;
  t70965 = t69797*t70964;
  t70966 = t70943 + t70965;
  t71430 = Sin(var1[3]);
  t71450 = Cos(var1[3]);
  t71434 = t69799*t70105;
  t71441 = t69902*t70106;
  t71442 = t71434 + t71441;
  t71452 = t69797*t69787;
  t71456 = -1.*t69794*t70135;
  t71457 = t71452 + t71456;
  t71461 = t69799*t70566;
  t71462 = t70539*t70106;
  t71463 = t71461 + t71462;
  t71466 = t69797*t70410;
  t71467 = -1.*t69794*t70843;
  t71468 = t71466 + t71467;
  t71473 = t69799*t70637;
  t71475 = t70621*t70106;
  t71476 = t71473 + t71475;
  t71478 = t69797*t70394;
  t71479 = -1.*t69794*t70890;
  t71480 = t71478 + t71479;
  t71495 = t69799*t70226;
  t71500 = t70217*t70106;
  t71501 = t71495 + t71500;
  t71507 = t69797*t70209;
  t71510 = -1.*t69794*t70233;
  t71514 = t71507 + t71510;
  t71522 = t69799*t70289;
  t71527 = t70268*t70106;
  t71528 = t71522 + t71527;
  t71530 = t69797*t70263;
  t71535 = -1.*t69794*t70291;
  t71536 = t71530 + t71535;
  t71548 = t69799*t70820;
  t71550 = t70828*t70106;
  t71553 = t71548 + t71550;
  t71555 = t69797*t70686;
  t71557 = -1.*t69794*t70964;
  t71560 = t71555 + t71557;
  t71625 = t69799*t70580;
  t71626 = t70554*t70106;
  t71627 = t71625 + t71626;
  t71641 = t69799*t70554;
  t71642 = -1.*t70580*t70106;
  t71660 = t71641 + t71642;
  t71631 = -1.*t71463*t71627;
  t71661 = -1.*t70843*t71660;
  t71662 = t70518 + t71631 + t71661;
  t71664 = t71476*t71627;
  t71665 = t70890*t71660;
  t71666 = t70608 + t71664 + t71665;
  t70914 = t70745*t70394;
  t70918 = t70209*t70513;
  t70934 = -1.*t70410*t70745;
  t70937 = -1.*t70263*t70513;
  t71693 = t69799*t70757;
  t71696 = t70751*t70106;
  t71699 = t71693 + t71696;
  t71707 = t69799*t70751;
  t71708 = -1.*t70757*t70106;
  t71718 = t71707 + t71708;
  t71753 = t71463*t71627;
  t71758 = t70843*t71660;
  t71766 = t70848 + t71753 + t71758;
  t70854 = t70410*t70745;
  t70858 = t70263*t70513;
  t70867 = -1.*t69787*t70513;
  t70873 = -1.*t70745*t70686;
  t71785 = -1.*t71660*t70964;
  t71787 = -1.*t71627*t71553;
  t71788 = t70878 + t71785 + t71787;
  t71822 = -1.*t71476*t71627;
  t71823 = -1.*t70890*t71660;
  t71829 = t70660 + t71822 + t71823;
  t70746 = -1.*t70745*t70394;
  t70772 = -1.*t70209*t70513;
  t70795 = t69787*t70513;
  t70830 = t70745*t70686;
  t71831 = t71660*t70964;
  t71832 = t71627*t71553;
  t71833 = t70835 + t71831 + t71832;
  t71912 = t70513*t69794;
  t71913 = t69797*t71660;
  t71914 = t71912 + t71913;
  t71917 = t69797*t70513;
  t71918 = -1.*t69794*t71660;
  t71929 = t71917 + t71918;
  t71916 = -1.*t70845*t71914;
  t71933 = -1.*t71468*t71929;
  t71934 = t71631 + t71916 + t71933;
  t71943 = t70892*t71914;
  t71946 = t71480*t71929;
  t71947 = t71664 + t71943 + t71946;
  t71700 = t71699*t71476;
  t71736 = t71501*t71627;
  t71741 = -1.*t71463*t71699;
  t71743 = -1.*t71528*t71627;
  t71961 = t70745*t69794;
  t71962 = t69797*t71718;
  t71970 = t71961 + t71962;
  t71974 = t69797*t70745;
  t71975 = -1.*t69794*t71718;
  t71976 = t71974 + t71975;
  t71990 = t70845*t71914;
  t71991 = t71468*t71929;
  t71993 = t71753 + t71990 + t71991;
  t71798 = t71463*t71699;
  t71803 = t71528*t71627;
  t71809 = -1.*t71442*t71627;
  t71812 = -1.*t71699*t71553;
  t71999 = -1.*t71914*t70966;
  t72001 = -1.*t71929*t71560;
  t72004 = t71787 + t71999 + t72001;
  t72032 = -1.*t70892*t71914;
  t72038 = -1.*t71480*t71929;
  t72042 = t71822 + t72032 + t72038;
  t71838 = -1.*t71699*t71476;
  t71849 = -1.*t71501*t71627;
  t71858 = t71442*t71627;
  t71891 = t71699*t71553;
  t72044 = t71914*t70966;
  t72045 = t71929*t71560;
  t72046 = t71832 + t72044 + t72045;
  t71569 = t71450*t71442;
  t71571 = -1.*t71430*t71457;
  t71576 = t71569 + t71571;
  t71591 = t71450*t71501;
  t71596 = -1.*t71430*t71514;
  t71597 = t71591 + t71596;
  t71601 = t71450*t71528;
  t71602 = -1.*t71430*t71536;
  t71603 = t71601 + t71602;
  t70604 = t70394*t70599;
  t70650 = t70410*t70640;
  t70655 = t70604 + t70650;
  t70666 = t69787*t70664;
  t70752 = -1.*t70751*t70621;
  t70762 = -1.*t70757*t70637;
  t70778 = -1.*t70217*t70554;
  t70781 = -1.*t70226*t70580;
  t70789 = t70746 + t70752 + t70762 + t70772 + t70778 + t70781;
  t70790 = t70686*t70789;
  t70798 = t69902*t70554;
  t70802 = t70105*t70580;
  t70823 = t70757*t70820;
  t70829 = t70751*t70828;
  t70831 = t70795 + t70798 + t70802 + t70823 + t70829 + t70830;
  t70832 = t70394*t70831;
  t70837 = t70209*t70836;
  t70838 = t70666 + t70790 + t70832 + t70837;
  t71578 = t71450*t71463;
  t71579 = -1.*t71430*t71468;
  t71581 = t71578 + t71579;
  t70852 = t69787*t70851;
  t70855 = t70539*t70751;
  t70857 = t70566*t70757;
  t70859 = t70268*t70554;
  t70861 = t70289*t70580;
  t70862 = t70854 + t70855 + t70857 + t70858 + t70859 + t70861;
  t70866 = t70686*t70862;
  t70869 = -1.*t69902*t70554;
  t70870 = -1.*t70105*t70580;
  t70871 = -1.*t70757*t70820;
  t70872 = -1.*t70751*t70828;
  t70874 = t70867 + t70869 + t70870 + t70871 + t70872 + t70873;
  t70875 = t70410*t70874;
  t70880 = t70263*t70879;
  t70881 = t70852 + t70866 + t70875 + t70880;
  t71584 = t71450*t71476;
  t71588 = -1.*t71430*t71480;
  t71589 = t71584 + t71588;
  t70894 = t70686*t70851;
  t70895 = t70410*t70879;
  t70898 = t70894 + t70895;
  t70904 = t70686*t70664;
  t70905 = t70394*t70836;
  t70906 = t70904 + t70905;
  t70912 = t70209*t70599;
  t70913 = t70263*t70640;
  t70915 = t70751*t70621;
  t70917 = t70757*t70637;
  t70919 = t70217*t70554;
  t70921 = t70226*t70580;
  t70926 = t70914 + t70915 + t70917 + t70918 + t70919 + t70921;
  t70930 = t70410*t70926;
  t70935 = -1.*t70539*t70751;
  t70936 = -1.*t70566*t70757;
  t70938 = -1.*t70268*t70554;
  t70939 = -1.*t70289*t70580;
  t70940 = t70934 + t70935 + t70936 + t70937 + t70938 + t70939;
  t70941 = t70394*t70940;
  t70942 = t70912 + t70913 + t70930 + t70941;
  t71605 = t71450*t71553;
  t71606 = -1.*t71430*t71560;
  t71607 = t71605 + t71606;
  t70984 = -3.e-6*t70424;
  t70987 = -3.e-6*t70496;
  t70988 = t70984 + t70367 + t70987 + t70337;
  t70989 = 0.2*t70988;
  t70995 = -1.*t70376*t70994;
  t71001 = -1.*t70407*t70999;
  t71005 = t70350*t70994;
  t71010 = t70405*t70999;
  t71013 = t71005 + t71010;
  t71014 = -3.e-6*t71013;
  t71015 = t70989 + t70995 + t71001 + t71014;
  t71022 = -1.000000000009*t68754;
  t71023 = t71021 + t71022;
  t71024 = 0.2*t71023;
  t71041 = -1.*t70667*t71039;
  t71049 = -1.*t69519*t71047;
  t71062 = -1.*t70376*t71061;
  t71075 = -1.*t70143*t71073;
  t71077 = t70683*t71039;
  t71079 = t69749*t71047;
  t71080 = t70350*t71061;
  t71081 = t70207*t71073;
  t71083 = t71077 + t71079 + t71080 + t71081;
  t71085 = -3.e-6*t71083;
  t71087 = t71024 + t71041 + t71049 + t71062 + t71075 + t71085;
  t71089 = t69637 + t71021 + t69639;
  t71092 = 0.2*t71089;
  t71102 = -1.*t69519*t71099;
  t71139 = -1.*t70667*t71138;
  t71157 = -1.*t70407*t71153;
  t71172 = -1.*t70252*t71165;
  t71174 = t69749*t71099;
  t71182 = t70683*t71138;
  t71188 = t70405*t71153;
  t71189 = t70257*t71165;
  t71191 = t71174 + t71182 + t71188 + t71189;
  t71194 = -3.e-6*t71191;
  t71195 = t71092 + t71102 + t71139 + t71157 + t71172 + t71194;
  t71199 = t70492 + t71197 + t70403;
  t71200 = 0.2*t71199;
  t71201 = -1.*t70667*t71099;
  t71203 = -1.*t70407*t71165;
  t71205 = t70683*t71099;
  t71206 = t70405*t71165;
  t71213 = t71205 + t71206;
  t71217 = -3.e-6*t71213;
  t71218 = t71200 + t71201 + t71203 + t71217;
  t71231 = 1. + t70417 + t71197;
  t71232 = 0.2*t71231;
  t71234 = -1.*t70667*t71047;
  t71239 = -1.*t70376*t71073;
  t71248 = t70683*t71047;
  t71251 = t70350*t71073;
  t71252 = t71248 + t71251;
  t71256 = -3.e-6*t71252;
  t71258 = t71232 + t71234 + t71239 + t71256;
  t71265 = -3.e-6*t69640;
  t71266 = 2.7e-17*t68754;
  t71267 = t68204 + t71265 + t71266;
  t71277 = 0.2*t71267;
  t71279 = -1.*t70143*t70994;
  t71303 = -1.*t70407*t71302;
  t71310 = -1.*t70252*t70999;
  t71354 = -1.*t70376*t71342;
  t71355 = t70207*t70994;
  t71358 = t70405*t71302;
  t71359 = t70257*t70999;
  t71371 = t70350*t71342;
  t71376 = t71355 + t71358 + t71359 + t71371;
  t71383 = -3.e-6*t71376;
  t71395 = t71277 + t71279 + t71303 + t71310 + t71354 + t71383;
  t71577 = 0.043*t70966*t71576;
  t71583 = 0.043*t70293*t71581;
  t71590 = 0.043*t70250*t71589;
  t71600 = 0.043*t70892*t71597;
  t71604 = 0.043*t70845*t71603;
  t71609 = 0.043*t70137*t71607;
  t71610 = t71577 + t71583 + t71590 + t71600 + t71604 + t71609;
  t71505 = t71430*t71501;
  t71515 = t71450*t71514;
  t71516 = t71505 + t71515;
  t71477 = t71430*t71476;
  t71485 = t71450*t71480;
  t71487 = t71477 + t71485;
  t71529 = t71430*t71528;
  t71539 = t71450*t71536;
  t71542 = t71529 + t71539;
  t71464 = t71430*t71463;
  t71469 = t71450*t71468;
  t71470 = t71464 + t71469;
  t71554 = t71430*t71553;
  t71563 = t71450*t71560;
  t71564 = t71554 + t71563;
  t71444 = t71430*t71442;
  t71458 = t71450*t71457;
  t71459 = t71444 + t71458;
  t71663 = t71476*t71662;
  t71670 = t71463*t71666;
  t71672 = t71663 + t71670;
  t71680 = t71501*t71662;
  t71682 = t71528*t71666;
  t71729 = t71718*t70890;
  t71737 = t70233*t71660;
  t71738 = t70914 + t70918 + t71700 + t71729 + t71736 + t71737;
  t71740 = t71463*t71738;
  t71742 = -1.*t70843*t71718;
  t71744 = -1.*t70291*t71660;
  t71745 = t70934 + t70937 + t71741 + t71742 + t71743 + t71744;
  t71746 = t71476*t71745;
  t71747 = t71680 + t71682 + t71740 + t71746;
  t71784 = t71553*t71766;
  t71794 = t71463*t71788;
  t71795 = t71784 + t71794;
  t71797 = t71442*t71766;
  t71802 = t70843*t71718;
  t71805 = t70291*t71660;
  t71807 = t70854 + t70858 + t71798 + t71802 + t71803 + t71805;
  t71808 = t71553*t71807;
  t71810 = -1.*t70135*t71660;
  t71811 = -1.*t71718*t70964;
  t71813 = t70867 + t70873 + t71809 + t71810 + t71811 + t71812;
  t71814 = t71463*t71813;
  t71815 = t71528*t71788;
  t71819 = t71797 + t71808 + t71814 + t71815;
  t71830 = t71553*t71829;
  t71834 = t71476*t71833;
  t71835 = t71830 + t71834;
  t71837 = t71442*t71829;
  t71839 = -1.*t71718*t70890;
  t71852 = -1.*t70233*t71660;
  t71854 = t70746 + t70772 + t71838 + t71839 + t71849 + t71852;
  t71857 = t71553*t71854;
  t71876 = t70135*t71660;
  t71889 = t71718*t70964;
  t71898 = t70795 + t70830 + t71858 + t71876 + t71889 + t71891;
  t71903 = t71476*t71898;
  t71905 = t71501*t71833;
  t71908 = t71837 + t71857 + t71903 + t71905;
  t71939 = t70892*t71934;
  t71948 = t70845*t71947;
  t71949 = t71939 + t71948;
  t71953 = t70250*t71934;
  t71957 = t70293*t71947;
  t71973 = t71970*t70892;
  t71977 = t71976*t71480;
  t71978 = t70250*t71914;
  t71979 = t71514*t71929;
  t71980 = t71700 + t71736 + t71973 + t71977 + t71978 + t71979;
  t71981 = t70845*t71980;
  t71982 = -1.*t70845*t71970;
  t71983 = -1.*t71468*t71976;
  t71984 = -1.*t70293*t71914;
  t71985 = -1.*t71536*t71929;
  t71986 = t71741 + t71743 + t71982 + t71983 + t71984 + t71985;
  t71987 = t70892*t71986;
  t71988 = t71953 + t71957 + t71981 + t71987;
  t71996 = t70966*t71993;
  t72005 = t70845*t72004;
  t72006 = t71996 + t72005;
  t72008 = t70137*t71993;
  t72009 = t70845*t71970;
  t72010 = t71468*t71976;
  t72011 = t70293*t71914;
  t72012 = t71536*t71929;
  t72016 = t71798 + t71803 + t72009 + t72010 + t72011 + t72012;
  t72017 = t70966*t72016;
  t72018 = -1.*t70137*t71914;
  t72019 = -1.*t71457*t71929;
  t72020 = -1.*t71970*t70966;
  t72021 = -1.*t71976*t71560;
  t72022 = t71809 + t71812 + t72018 + t72019 + t72020 + t72021;
  t72023 = t70845*t72022;
  t72024 = t70293*t72004;
  t72030 = t72008 + t72017 + t72023 + t72024;
  t72043 = t70966*t72042;
  t72047 = t70892*t72046;
  t72048 = t72043 + t72047;
  t72050 = t70137*t72042;
  t72054 = -1.*t71970*t70892;
  t72055 = -1.*t71976*t71480;
  t72056 = -1.*t70250*t71914;
  t72057 = -1.*t71514*t71929;
  t72059 = t71838 + t71849 + t72054 + t72055 + t72056 + t72057;
  t72060 = t70966*t72059;
  t72061 = t70137*t71914;
  t72062 = t71457*t71929;
  t72069 = t71970*t70966;
  t72070 = t71976*t71560;
  t72071 = t71858 + t71891 + t72061 + t72062 + t72069 + t72070;
  t72073 = t70892*t72071;
  t72074 = t70250*t72046;
  t72079 = t72050 + t72060 + t72073 + t72074;
  t71460 = 0.043*t70966*t71459;
  t71471 = 0.043*t70293*t71470;
  t71494 = 0.043*t70250*t71487;
  t71521 = 0.043*t70892*t71516;
  t71547 = 0.043*t70845*t71542;
  t71565 = 0.043*t70137*t71564;
  t71566 = t71460 + t71471 + t71494 + t71521 + t71547 + t71565;
  t72235 = 0.043*t71589*t71516;
  t72236 = 0.043*t71487*t71597;
  t72239 = 0.043*t71581*t71542;
  t72246 = 0.043*t71470*t71603;
  t72247 = 0.043*t71576*t71564;
  t72250 = 0.043*t71459*t71607;
  t72263 = t72235 + t72236 + t72239 + t72246 + t72247 + t72250;
  t72449 = 3.000000000054e-6*t68754;
  t72498 = -3.e-6*t70365;
  t71950 = 0.043*t70137*t71949;
  t71989 = 0.043*t70966*t71988;
  t72007 = 0.043*t70250*t72006;
  t72031 = 0.043*t70892*t72030;
  t72049 = 0.043*t70293*t72048;
  t72083 = 0.043*t70845*t72079;
  t72132 = t71950 + t71989 + t72007 + t72031 + t72049 + t72083;
  t72381 = 0.043*t71459*t71949;
  t72382 = 0.043*t71564*t71988;
  t72390 = 0.043*t71516*t72006;
  t72391 = 0.043*t71487*t72030;
  t72392 = 0.043*t71542*t72048;
  t72393 = 0.043*t71470*t72079;
  t72394 = t72381 + t72382 + t72390 + t72391 + t72392 + t72393;
  t72284 = 0.043*t71576*t71949;
  t72287 = 0.043*t71607*t71988;
  t72295 = 0.043*t71597*t72006;
  t72296 = 0.043*t71589*t72030;
  t72297 = 0.043*t71603*t72048;
  t72298 = 0.043*t71581*t72079;
  t72299 = t72284 + t72287 + t72295 + t72296 + t72297 + t72298;
  t72443 = -3.e-6*t70346;
  t72445 = -3.e-6*t70683;
  t72446 = -1. + t70460 + t72443 + t71197 + t72445;
  t72448 = -3.e-6*t70257;
  t72450 = t68204 + t72448 + t72449;
  t72452 = -3.e-6*t70207;
  t72487 = t68765 + t72449 + t72452;
  t72505 = -3.e-6*t70350;
  t72509 = t72498 + t70331 + t72505 + t68756;
  t72586 = -3.e-6*t70405;
  t72596 = t72498 + t70331 + t72586 + t70337;
  t72608 = -3.e-6*t69749;
  t72617 = -3.e-6*t68757;
  t72620 = 1.8e-11*t68754;
  t72626 = t72608 + t72617 + t71021 + t72620;
  t71678 = 0.043*t70137*t71672;
  t71748 = 0.043*t70966*t71747;
  t71796 = 0.043*t70250*t71795;
  t71821 = 0.043*t70892*t71819;
  t71836 = 0.043*t70293*t71835;
  t71909 = 0.043*t70845*t71908;
  t71910 = t71678 + t71748 + t71796 + t71821 + t71836 + t71909;
  t72349 = 0.043*t71459*t71672;
  t72353 = 0.043*t71747*t71564;
  t72357 = 0.043*t71516*t71795;
  t72363 = 0.043*t71487*t71819;
  t72374 = 0.043*t71542*t71835;
  t72375 = 0.043*t71470*t71908;
  t72376 = t72349 + t72353 + t72357 + t72363 + t72374 + t72375;
  t72273 = 0.043*t71576*t71672;
  t72274 = 0.043*t71747*t71607;
  t72275 = 0.043*t71597*t71795;
  t72276 = 0.043*t71589*t71819;
  t72278 = 0.043*t71603*t71835;
  t72280 = 0.043*t71581*t71908;
  t72281 = t72273 + t72274 + t72275 + t72276 + t72278 + t72280;
  t72689 = 0.000271*t71553*t70137;
  t72695 = 0.000271*t71528*t70845;
  t72696 = 2.e-6*t71501*t70892;
  t72697 = 2.e-6*t71476*t70250;
  t72698 = 0.000271*t71463*t70293;
  t72709 = 0.000271*t71442*t70966;
  t72713 = 0.043*t71747*t71949;
  t72726 = 0.043*t71672*t71988;
  t72763 = 0.043*t71819*t72006;
  t72767 = 0.043*t71795*t72030;
  t72768 = 0.043*t71908*t72048;
  t72810 = 0.043*t71835*t72079;
  t72820 = t72689 + t72695 + t72696 + t72697 + t72698 + t72709 + t72713 + t72726 + t72763 + t72767 + t72768 + t72810;
  t70657 = 0.043*t70655*t70137;
  t70847 = 0.043*t70838*t70845;
  t70893 = 0.043*t70881*t70892;
  t70900 = 0.043*t70898*t70250;
  t70910 = 0.043*t70906*t70293;
  t70970 = 0.043*t70942*t70966;
  t70975 = t70657 + t70847 + t70893 + t70900 + t70910 + t70970;
  t72309 = 0.043*t70655*t71459;
  t72310 = 0.043*t70838*t71470;
  t72311 = 0.043*t70881*t71487;
  t72313 = 0.043*t70898*t71516;
  t72314 = 0.043*t70906*t71542;
  t72315 = 0.043*t70942*t71564;
  t72316 = t72309 + t72310 + t72311 + t72313 + t72314 + t72315;
  t72177 = 0.043*t70655*t71576;
  t72178 = 0.043*t70838*t71581;
  t72179 = 0.043*t70881*t71589;
  t72181 = 0.043*t70898*t71597;
  t72200 = 0.043*t70906*t71603;
  t72201 = 0.043*t70942*t71607;
  t72202 = t72177 + t72178 + t72179 + t72181 + t72200 + t72201;
  t72946 = 0.000271*t70686*t71442;
  t72948 = 0.000271*t70263*t71463;
  t72954 = 2.e-6*t70209*t71476;
  t72958 = 2.e-6*t70394*t71501;
  t72962 = 0.000271*t70410*t71528;
  t72963 = 0.000271*t69787*t71553;
  t72964 = 0.043*t70942*t71672;
  t72965 = 0.043*t70655*t71747;
  t72966 = 0.043*t70881*t71795;
  t72967 = 0.043*t70898*t71819;
  t72968 = 0.043*t70838*t71835;
  t72969 = 0.043*t70906*t71908;
  t72971 = t72946 + t72948 + t72954 + t72958 + t72962 + t72963 + t72964 + t72965 + t72966 + t72967 + t72968 + t72969;
  t72424 = 0.000271*t70686*t70137;
  t72425 = 0.000271*t70263*t70845;
  t72428 = 2.e-6*t70209*t70892;
  t72431 = 2.e-6*t70394*t70250;
  t72432 = 0.000271*t70410*t70293;
  t72433 = 0.000271*t69787*t70966;
  t72434 = 0.043*t70942*t71949;
  t72435 = 0.043*t70655*t71988;
  t72436 = 0.043*t70881*t72006;
  t72437 = 0.043*t70898*t72030;
  t72438 = 0.043*t70838*t72048;
  t72439 = 0.043*t70906*t72079;
  t72441 = t72424 + t72425 + t72428 + t72431 + t72432 + t72433 + t72434 + t72435 + t72436 + t72437 + t72438 + t72439;
  t73215 = 0.000271*t70410*t72450;
  t73217 = 2.e-6*t70394*t72487;
  t73219 = 2.e-6*t72509*t70209;
  t73220 = 0.000271*t72596*t70263;
  t73227 = 0.000271*t69787*t72446;
  t73240 = 0.000271*t72626*t70686;
  t73241 = 0.043*t70942*t71015;
  t73242 = 0.043*t70655*t71395;
  t73244 = 0.043*t70881*t71218;
  t73246 = 0.043*t70898*t71195;
  t73247 = 0.043*t70838*t71258;
  t73248 = 0.043*t70906*t71087;
  t73249 = t73215 + t73217 + t73219 + t73220 + t73227 + t73240 + t73241 + t73242 + t73244 + t73246 + t73247 + t73248;
  t71016 = 0.043*t71015*t70137;
  t71088 = 0.043*t71087*t70845;
  t71196 = 0.043*t71195*t70892;
  t71219 = 0.043*t71218*t70250;
  t71259 = 0.043*t71258*t70293;
  t71396 = 0.043*t71395*t70966;
  t71401 = t71016 + t71088 + t71196 + t71219 + t71259 + t71396;
  t72318 = 0.043*t71015*t71459;
  t72319 = 0.043*t71087*t71470;
  t72320 = 0.043*t71195*t71487;
  t72321 = 0.043*t71218*t71516;
  t72323 = 0.043*t71258*t71542;
  t72324 = 0.043*t71395*t71564;
  t72325 = t72318 + t72319 + t72320 + t72321 + t72323 + t72324;
  t72204 = 0.043*t71015*t71576;
  t72205 = 0.043*t71087*t71581;
  t72226 = 0.043*t71195*t71589;
  t72227 = 0.043*t71218*t71597;
  t72228 = 0.043*t71258*t71603;
  t72229 = 0.043*t71395*t71607;
  t72230 = t72204 + t72205 + t72226 + t72227 + t72228 + t72229;
  t72974 = 0.000271*t72446*t71442;
  t72975 = 0.000271*t72450*t71463;
  t72980 = 2.e-6*t72487*t71476;
  t72981 = 2.e-6*t72509*t71501;
  t72982 = 0.000271*t72596*t71528;
  t72988 = 0.000271*t72626*t71553;
  t72989 = 0.043*t71395*t71672;
  t72990 = 0.043*t71015*t71747;
  t72992 = 0.043*t71195*t71795;
  t72993 = 0.043*t71218*t71819;
  t72994 = 0.043*t71087*t71835;
  t72996 = 0.043*t71258*t71908;
  t72997 = t72974 + t72975 + t72980 + t72981 + t72982 + t72988 + t72989 + t72990 + t72992 + t72993 + t72994 + t72996;
  t72447 = 0.000271*t72446*t70137;
  t72451 = 0.000271*t72450*t70845;
  t72492 = 2.e-6*t72487*t70892;
  t72513 = 2.e-6*t72509*t70250;
  t72605 = 0.000271*t72596*t70293;
  t72630 = 0.000271*t72626*t70966;
  t72639 = 0.043*t71395*t71949;
  t72646 = 0.043*t71015*t71988;
  t72650 = 0.043*t71195*t72006;
  t72651 = 0.043*t71218*t72030;
  t72654 = 0.043*t71087*t72048;
  t72668 = 0.043*t71258*t72079;
  t72672 = t72447 + t72451 + t72492 + t72513 + t72605 + t72630 + t72639 + t72646 + t72650 + t72651 + t72654 + t72668;
  t73032 = 0.000271000000004878*t69787;
  t73040 = 1.29e-8*t70942;
  t73041 = 0.0042999871*t70881;
  t73049 = 1.29001548002322e-8*t70838;
  t73088 = t73032 + t73040 + t73041 + t73049;
  t73276 = 0.000271000000004878*t72626;
  t73277 = 1.29e-8*t71395;
  t73278 = 0.0042999871*t71195;
  t73279 = 1.29001548002322e-8*t71087;
  t73280 = t73276 + t73277 + t73278 + t73279;
  t70138 = 1.29e-8*t70137;
  t70251 = 0.0042999871*t70250;
  t70296 = 1.29001548002322e-8*t70293;
  t70302 = t70138 + t70251 + t70296;
  t72303 = 1.29e-8*t71459;
  t72304 = 0.0042999871*t71516;
  t72305 = 1.29001548002322e-8*t71542;
  t72306 = t72303 + t72304 + t72305;
  t72168 = 1.29e-8*t71576;
  t72169 = 0.0042999871*t71597;
  t72170 = 1.29001548002322e-8*t71603;
  t72174 = t72168 + t72169 + t72170;
  t72933 = 0.000271000000004878*t71442;
  t72934 = 1.29e-8*t71747;
  t72936 = 0.0042999871*t71819;
  t72937 = 1.29001548002322e-8*t71908;
  t72938 = t72933 + t72934 + t72936 + t72937;
  t72398 = 0.000271000000004878*t70137;
  t72399 = 1.29e-8*t71988;
  t72400 = 0.0042999871*t72030;
  t72401 = 1.29001548002322e-8*t72079;
  t72415 = t72398 + t72399 + t72400 + t72401;
  p_output1[0]=var2[17]*(-0.5*(0.086*t70293*t70845 + 0.086*t70250*t70892 + 0.086*t70137*t70966)*var2[0] - 0.5*t71610*var2[1] - 0.5*t71566*var2[2] - 0.5*t72132*var2[3] - 0.5*t71910*var2[4] - 0.5*t70975*var2[5] - 0.5*t71401*var2[15] - 0.5*t70302*var2[17]);
  p_output1[1]=var2[17]*(-0.5*t71610*var2[0] - 0.5*(0.086*t71589*t71597 + 0.086*t71581*t71603 + 0.086*t71576*t71607)*var2[1] - 0.5*t72263*var2[2] - 0.5*t72299*var2[3] - 0.5*t72281*var2[4] - 0.5*t72202*var2[5] - 0.5*t72230*var2[15] - 0.5*t72174*var2[17]);
  p_output1[2]=var2[17]*(-0.5*t71566*var2[0] - 0.5*t72263*var2[1] - 0.5*(0.086*t71487*t71516 + 0.086*t71470*t71542 + 0.086*t71459*t71564)*var2[2] - 0.5*t72394*var2[3] - 0.5*t72376*var2[4] - 0.5*t72316*var2[5] - 0.5*t72325*var2[15] - 0.5*t72306*var2[17]);
  p_output1[3]=var2[17]*(-0.5*t72132*var2[0] - 0.5*t72299*var2[1] - 0.5*t72394*var2[2] - 0.5*(0.000542*t70293*t70845 + 4.e-6*t70250*t70892 + 0.000542*t70137*t70966 + 0.086*t71949*t71988 + 0.086*t72006*t72030 + 0.086*t72048*t72079)*var2[3] - 0.5*t72820*var2[4] - 0.5*t72441*var2[5] - 0.5*t72672*var2[15] - 0.5*t72415*var2[17]);
  p_output1[4]=var2[17]*(-0.5*t71910*var2[0] - 0.5*t72281*var2[1] - 0.5*t72376*var2[2] - 0.5*t72820*var2[3] - 0.5*(4.e-6*t71476*t71501 + 0.000542*t71463*t71528 + 0.000542*t71442*t71553 + 0.086*t71672*t71747 + 0.086*t71795*t71819 + 0.086*t71835*t71908)*var2[4] - 0.5*t72971*var2[5] - 0.5*t72997*var2[15] - 0.5*t72938*var2[17]);
  p_output1[5]=var2[17]*(-0.5*t70975*var2[0] - 0.5*t72202*var2[1] - 0.5*t72316*var2[2] - 0.5*t72441*var2[3] - 0.5*t72971*var2[4] - 0.5*(4.e-6*t70209*t70394 + 0.000542*t70263*t70410 + 0.000542*t69787*t70686 + 0.086*t70881*t70898 + 0.086*t70838*t70906 + 0.086*t70655*t70942)*var2[5] - 0.5*t73249*var2[15] - 0.5*t73088*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=var2[17]*(-0.5*t71401*var2[0] - 0.5*t72230*var2[1] - 0.5*t72325*var2[2] - 0.5*t72672*var2[3] - 0.5*t72997*var2[4] - 0.5*t73249*var2[5] - 0.5*(0.086*t71195*t71218 + 0.086*t71087*t71258 + 0.086*t71015*t71395 + 4.e-6*t72487*t72509 + 0.000542*t72450*t72596 + 0.000542*t72446*t72626)*var2[15] - 0.5*t73280*var2[17]);
  p_output1[16]=0;
  p_output1[17]=(-0.5*t70302*var2[0] - 0.5*t72174*var2[1] - 0.5*t72306*var2[2] - 0.5*t72415*var2[3] - 0.5*t72938*var2[4] - 0.5*t73088*var2[5] - 0.5*t73280*var2[15])*var2[17];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec18_minitaur.hh"

namespace FrontStance
{

void Ce2_vec18_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
