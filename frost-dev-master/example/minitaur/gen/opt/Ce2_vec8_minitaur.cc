/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:10:23 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t107;
  double t243;
  double t703;
  double t727;
  double t790;
  double t1256;
  double t3414;
  double t2799;
  double t3466;
  double t1645;
  double t2169;
  double t3757;
  double t3945;
  double t3521;
  double t4466;
  double t4522;
  double t4909;
  double t4921;
  double t5266;
  double t5271;
  double t5282;
  double t5305;
  double t4960;
  double t5079;
  double t5321;
  double t5322;
  double t5330;
  double t5332;
  double t5338;
  double t5126;
  double t5221;
  double t5223;
  double t5226;
  double t3129;
  double t3468;
  double t3483;
  double t5234;
  double t5317;
  double t5343;
  double t3570;
  double t3955;
  double t3956;
  double t4079;
  double t4249;
  double t4262;
  double t4310;
  double t4324;
  double t4437;
  double t5379;
  double t5380;
  double t5664;
  double t4449;
  double t4677;
  double t4685;
  double t4690;
  double t4691;
  double t4695;
  double t4700;
  double t4702;
  double t4704;
  double t4713;
  double t4715;
  double t4717;
  double t9652;
  double t9668;
  double t9672;
  double t12386;
  double t10776;
  double t11065;
  double t12113;
  double t14513;
  double t14522;
  double t14552;
  double t14553;
  double t14554;
  double t14556;
  double t15450;
  double t13915;
  double t13923;
  double t13944;
  double t15478;
  double t15514;
  double t15520;
  double t15559;
  double t15560;
  double t15621;
  double t15706;
  double t15553;
  double t15773;
  double t15787;
  double t16480;
  double t16482;
  double t16487;
  double t16167;
  double t16205;
  double t16209;
  double t16220;
  double t14002;
  double t14153;
  double t14329;
  double t14330;
  double t14338;
  double t14339;
  double t14340;
  double t14397;
  double t14398;
  double t6751;
  double t6844;
  double t6849;
  double t6873;
  double t6891;
  double t12698;
  double t12789;
  double t13968;
  double t13976;
  double t13981;
  double t13983;
  double t17068;
  double t17069;
  double t17070;
  double t17072;
  double t17073;
  double t17074;
  double t17081;
  double t12379;
  double t12398;
  double t12399;
  double t12423;
  double t12514;
  double t17644;
  double t17742;
  double t17770;
  double t17930;
  double t17932;
  double t17934;
  double t19189;
  double t19190;
  double t19195;
  double t19225;
  double t19227;
  double t19228;
  double t19229;
  double t19230;
  double t19712;
  double t19713;
  double t19715;
  double t19269;
  double t19272;
  double t19283;
  double t19321;
  double t19327;
  double t19348;
  double t19405;
  double t19408;
  double t19412;
  double t19422;
  double t19427;
  double t19431;
  double t19444;
  double t19446;
  double t19447;
  double t19469;
  double t19470;
  double t19471;
  double t19477;
  double t19479;
  double t19480;
  double t19491;
  double t19492;
  double t19493;
  double t19506;
  double t19512;
  double t19539;
  double t19668;
  double t19689;
  double t19690;
  double t19699;
  double t19701;
  double t19705;
  double t19893;
  double t19894;
  double t19897;
  double t19915;
  double t19917;
  double t19918;
  double t15415;
  double t20394;
  double t20840;
  double t20849;
  double t15443;
  double t19899;
  double t19919;
  double t19933;
  double t21024;
  double t20909;
  double t20935;
  double t21026;
  double t21082;
  double t15457;
  double t20865;
  double t20898;
  double t14684;
  double t19936;
  double t19939;
  double t15447;
  double t21380;
  double t21384;
  double t15459;
  double t16492;
  double t16685;
  double t16970;
  double t21425;
  double t21428;
  double t21429;
  double t21431;
  double t21433;
  double t21434;
  double t21464;
  double t21465;
  double t21466;
  double t21470;
  double t21471;
  double t21475;
  double t18142;
  double t18152;
  double t18154;
  double t21512;
  double t21515;
  double t21519;
  double t21545;
  double t21554;
  double t21555;
  double t18849;
  double t19077;
  double t19123;
  double t19155;
  double t21609;
  double t21610;
  double t21611;
  double t21628;
  double t21630;
  double t21631;
  double t21664;
  double t21666;
  double t21672;
  double t21659;
  double t21660;
  double t21661;
  double t21701;
  double t21703;
  double t21704;
  double t20937;
  double t21776;
  double t21777;
  double t21795;
  double t21767;
  double t21770;
  double t21773;
  double t21663;
  double t21673;
  double t21676;
  double t21339;
  double t21806;
  double t21809;
  double t21376;
  double t21678;
  double t21681;
  double t21404;
  double t21424;
  double t21435;
  double t21941;
  double t21951;
  double t21954;
  double t21959;
  double t21965;
  double t21966;
  double t21446;
  double t21456;
  double t21918;
  double t21924;
  double t21926;
  double t21930;
  double t21931;
  double t21937;
  double t21976;
  double t21982;
  double t21983;
  double t22006;
  double t22014;
  double t22016;
  double t21492;
  double t21495;
  double t21527;
  double t21537;
  double t22100;
  double t22102;
  double t22103;
  double t22118;
  double t22119;
  double t22123;
  double t21599;
  double t21601;
  double t21619;
  double t21623;
  double t22153;
  double t22154;
  double t22156;
  double t22173;
  double t22175;
  double t22181;
  double t19718;
  double t19720;
  double t19724;
  double t19855;
  double t19856;
  double t19857;
  double t19865;
  double t19867;
  double t19869;
  double t4881;
  double t5346;
  double t5347;
  double t6338;
  double t6345;
  double t6386;
  double t19761;
  double t19765;
  double t19766;
  double t6666;
  double t6881;
  double t7010;
  double t7067;
  double t7090;
  double t7320;
  double t7385;
  double t7880;
  double t8180;
  double t8369;
  double t19716;
  double t19717;
  double t19725;
  double t19726;
  double t19727;
  double t19728;
  double t19737;
  double t19775;
  double t19776;
  double t19848;
  double t19852;
  double t19854;
  double t19861;
  double t19878;
  double t19881;
  double t19882;
  double t19883;
  double t19884;
  double t19885;
  double t19887;
  double t19888;
  double t19889;
  double t19890;
  double t14576;
  double t14740;
  double t15022;
  double t15061;
  double t15435;
  double t15442;
  double t15453;
  double t15455;
  double t15465;
  double t15468;
  double t15469;
  double t15875;
  double t16468;
  double t16473;
  double t17071;
  double t17194;
  double t17200;
  double t17917;
  double t17945;
  double t17957;
  double t18991;
  double t19087;
  double t19088;
  double t19090;
  double t19091;
  double t19092;
  double t19125;
  double t19159;
  double t19161;
  double t19168;
  double t19173;
  double t18143;
  double t18145;
  double t18147;
  double t18149;
  double t18150;
  double t18153;
  double t18155;
  double t18157;
  double t18159;
  double t18172;
  double t16513;
  double t16563;
  double t16592;
  double t16666;
  double t16865;
  double t16996;
  double t17008;
  double t17011;
  double t17060;
  double t17063;
  double t19314;
  double t19376;
  double t19386;
  double t19395;
  double t19415;
  double t19417;
  double t19443;
  double t19458;
  double t19462;
  double t19267;
  double t19284;
  double t19286;
  double t19498;
  double t19540;
  double t19541;
  double t19468;
  double t19473;
  double t19474;
  double t19694;
  double t19706;
  double t19707;
  double t19476;
  double t19484;
  double t19487;
  double t19934;
  double t19967;
  double t20062;
  double t20120;
  double t20852;
  double t20904;
  double t20910;
  double t20947;
  double t20956;
  double t20964;
  double t20970;
  double t21129;
  double t21134;
  double t21135;
  double t21160;
  double t21302;
  double t21349;
  double t21357;
  double t21359;
  double t21361;
  double t22229;
  double t22231;
  double t22234;
  double t21363;
  double t21365;
  double t21366;
  double t21367;
  double t21377;
  double t21379;
  double t21387;
  double t21391;
  double t21402;
  double t21405;
  double t21406;
  double t21409;
  double t21483;
  double t21484;
  double t21488;
  double t21415;
  double t21423;
  double t21430;
  double t21436;
  double t21440;
  double t21444;
  double t21454;
  double t21460;
  double t21461;
  double t21467;
  double t21478;
  double t21480;
  double t21490;
  double t21491;
  double t21494;
  double t21498;
  double t21511;
  double t21522;
  double t21525;
  double t21535;
  double t21540;
  double t21541;
  double t21568;
  double t21571;
  double t21574;
  double t21578;
  double t21591;
  double t21597;
  double t21600;
  double t21603;
  double t21604;
  double t21616;
  double t21617;
  double t21621;
  double t21624;
  double t21627;
  double t21635;
  double t21637;
  double t21646;
  double t21649;
  double t21650;
  double t21677;
  double t21689;
  double t21690;
  double t21691;
  double t21706;
  double t21709;
  double t21725;
  double t21737;
  double t21738;
  double t21740;
  double t21742;
  double t21760;
  double t21774;
  double t21802;
  double t21803;
  double t21804;
  double t21810;
  double t21813;
  double t21815;
  double t21817;
  double t21819;
  double t21824;
  double t21828;
  double t21829;
  double t21830;
  double t21833;
  double t21834;
  double t21835;
  double t21838;
  double t21839;
  double t21845;
  double t21846;
  double t21848;
  double t21849;
  double t21855;
  double t21856;
  double t21857;
  double t21860;
  double t21861;
  double t21863;
  double t21864;
  double t21866;
  double t21867;
  double t21869;
  double t21870;
  double t21874;
  double t21888;
  double t21891;
  double t21892;
  double t21898;
  double t21900;
  double t21928;
  double t21940;
  double t21958;
  double t21969;
  double t21970;
  double t21974;
  double t21986;
  double t21988;
  double t21991;
  double t21995;
  double t21998;
  double t22000;
  double t22003;
  double t22019;
  double t22020;
  double t22028;
  double t22035;
  double t22037;
  double t22061;
  double t22080;
  double t22090;
  double t22097;
  double t22098;
  double t22099;
  double t22104;
  double t22108;
  double t22109;
  double t22111;
  double t22112;
  double t22115;
  double t22116;
  double t22124;
  double t22125;
  double t22129;
  double t22130;
  double t22137;
  double t22146;
  double t22147;
  double t22148;
  double t22149;
  double t22150;
  double t22151;
  double t22157;
  double t22158;
  double t22160;
  double t22164;
  double t22165;
  double t22166;
  double t22169;
  double t22189;
  double t22190;
  double t22192;
  double t22196;
  double t22197;
  double t19232;
  double t19233;
  double t19299;
  double t19387;
  double t19418;
  double t19467;
  double t19475;
  double t19488;
  double t19548;
  double t19708;
  double t19709;
  double t22300;
  double t22312;
  double t22317;
  double t22319;
  double t22320;
  double t22327;
  double t22328;
  double t22330;
  double t22332;
  double t22345;
  double t22349;
  double t22542;
  double t22551;
  double t22554;
  double t21692;
  double t21741;
  double t21822;
  double t21851;
  double t21901;
  double t22026;
  double t22056;
  double t22127;
  double t22139;
  double t22191;
  double t22198;
  double t22199;
  double t22677;
  double t22678;
  double t22680;
  double t22681;
  double t22683;
  double t22684;
  double t22685;
  double t22701;
  double t22702;
  double t22703;
  double t22705;
  double t22709;
  double t22397;
  double t22398;
  double t22399;
  double t22404;
  double t22407;
  double t22408;
  double t22415;
  double t22416;
  double t22417;
  double t22419;
  double t22422;
  double t22441;
  double t22780;
  double t22782;
  double t22785;
  double t20262;
  double t20969;
  double t21144;
  double t21362;
  double t21410;
  double t21482;
  double t21489;
  double t21572;
  double t21594;
  double t21638;
  double t21655;
  double t21656;
  double t22651;
  double t22654;
  double t22657;
  double t22658;
  double t22659;
  double t22661;
  double t22662;
  double t22667;
  double t22669;
  double t22671;
  double t22672;
  double t22674;
  double t22374;
  double t22375;
  double t22378;
  double t22379;
  double t22381;
  double t22384;
  double t22385;
  double t22388;
  double t22389;
  double t22390;
  double t22391;
  double t22393;
  double t22794;
  double t22795;
  double t22797;
  double t22842;
  double t22843;
  double t22845;
  double t22812;
  double t22813;
  double t22817;
  double t22821;
  double t22822;
  double t22824;
  double t22828;
  double t22831;
  double t22833;
  double t22835;
  double t22836;
  double t22838;
  double t22840;
  double t22841;
  double t22847;
  double t22848;
  double t22850;
  double t22853;
  double t22854;
  double t22860;
  double t22864;
  double t22869;
  double t14496;
  double t14512;
  double t15477;
  double t16476;
  double t17066;
  double t17605;
  double t18141;
  double t18180;
  double t19176;
  double t19179;
  double t22994;
  double t22533;
  double t22534;
  double t22557;
  double t22562;
  double t22563;
  double t22566;
  double t22567;
  double t22569;
  double t22570;
  double t22573;
  double t22226;
  double t22227;
  double t22240;
  double t22244;
  double t22245;
  double t22250;
  double t22254;
  double t22257;
  double t22263;
  double t22282;
  double t22993;
  double t22995;
  double t22996;
  double t22997;
  double t22998;
  double t22999;
  double t23000;
  double t23001;
  double t23002;
  double t23003;
  double t23008;
  double t23010;
  double t23014;
  double t23015;
  double t23020;
  double t23024;
  double t23029;
  double t23030;
  double t23032;
  double t23033;
  double t23040;
  double t23044;
  double t23052;
  double t22757;
  double t22758;
  double t22759;
  double t22762;
  double t22769;
  double t22770;
  double t22772;
  double t22775;
  double t22778;
  double t22779;
  double t22786;
  double t22787;
  double t22789;
  double t22791;
  double t22799;
  double t22800;
  double t22801;
  double t22803;
  double t22804;
  double t22805;
  double t22807;
  double t22808;
  double t4878;
  double t6440;
  double t7182;
  double t8476;
  double t9632;
  double t22499;
  double t22501;
  double t22503;
  double t22505;
  double t22507;
  double t22218;
  double t22219;
  double t22220;
  double t22221;
  double t22222;
  double t23113;
  double t23115;
  double t23116;
  double t23128;
  double t23153;
  double t23165;
  double t23167;
  double t23168;
  double t22976;
  double t22978;
  double t22981;
  double t22982;
  double t22983;
  double t22984;
  double t22985;
  double t22987;
  double t22725;
  double t22729;
  double t22732;
  double t22736;
  double t22737;
  double t22740;
  double t22749;
  double t22750;
  double t3519;
  double t4439;
  double t4705;
  double t4706;
  double t22486;
  double t22489;
  double t22490;
  double t22493;
  double t22205;
  double t22210;
  double t22212;
  double t22216;
  double t23091;
  double t23092;
  double t23105;
  double t23109;
  double t23111;
  double t22949;
  double t22951;
  double t22958;
  double t22968;
  double t22973;
  double t22718;
  double t22719;
  double t22720;
  double t22721;
  double t22723;
  t107 = Cos(var1[9]);
  t243 = -1.*t107;
  t703 = 1. + t243;
  t727 = 3.e-6*t703;
  t790 = 3.e-6*t107;
  t1256 = t727 + t790;
  t3414 = Sin(var1[4]);
  t2799 = Cos(var1[7]);
  t3466 = Sin(var1[7]);
  t1645 = Cos(var1[4]);
  t2169 = Cos(var1[5]);
  t3757 = 9.e-12*t703;
  t3945 = t3757 + t243;
  t3521 = Sin(var1[9]);
  t4466 = -1.000000000009*t703;
  t4522 = 1. + t4466;
  t4909 = -9.e-12*t703;
  t4921 = 1. + t4909;
  t5266 = 1.2e-12*var1[9];
  t5271 = 0.0999997000009*t703;
  t5282 = -3.e-12*t3521;
  t5305 = t5266 + t5271 + t5282;
  t4960 = -3.e-6*t4921;
  t5079 = t4960 + t727;
  t5321 = -4.e-7*var1[9];
  t5322 = 0.1*t4921;
  t5330 = 3.000000000027e-7*t703;
  t5332 = -9.e-18*t3521;
  t5338 = t5321 + t5322 + t5330 + t5332;
  t5126 = 0.2*t4522;
  t5221 = 0.2000000000048*t703;
  t5223 = 0.0999997000009*t3521;
  t5226 = t5126 + t5221 + t5223;
  t3129 = t1256*t1645*t2169*t2799;
  t3468 = -1.*t1256*t3414*t3466;
  t3483 = t3129 + t3468;
  t5234 = t4522*t5226;
  t5317 = t5305*t3521;
  t5343 = 3.e-6*t5338*t3521;
  t3570 = -1.000000000009*t2799*t3521;
  t3955 = -1.*t3945*t3466;
  t3956 = t3570 + t3955;
  t4079 = t3414*t3956;
  t4249 = t3945*t2799;
  t4262 = -1.000000000009*t3521*t3466;
  t4310 = t4249 + t4262;
  t4324 = t1645*t2169*t4310;
  t4437 = t4079 + t4324;
  t5379 = -1.*t3945*t5305;
  t5380 = -1.*t5079*t5338;
  t5664 = -1.000000000009*t5226*t3521;
  t4449 = t2799*t3521;
  t4677 = -1.*t4522*t3466;
  t4685 = t4449 + t4677;
  t4690 = t1645*t2169*t4685;
  t4691 = -1.*t4522*t2799;
  t4695 = -1.*t3521*t3466;
  t4700 = t4691 + t4695;
  t4702 = t3414*t4700;
  t4704 = t4690 + t4702;
  t4713 = -1.*t2799*t3414;
  t4715 = -1.*t1645*t2169*t3466;
  t4717 = t4713 + t4715;
  t9652 = t1645*t2169*t2799;
  t9668 = -1.*t3414*t3466;
  t9672 = t9652 + t9668;
  t12386 = Sin(var1[5]);
  t10776 = t2799*t3414;
  t11065 = t1645*t2169*t3466;
  t12113 = t10776 + t11065;
  t14513 = -1.*t2799;
  t14522 = 1. + t14513;
  t14552 = 0.2*t14522;
  t14553 = 0.2*t2799;
  t14554 = 0.05*t3466;
  t14556 = t14552 + t14553 + t14554;
  t15450 = -1.*t14556*t3466;
  t13915 = 1.000000000009*t2799*t3521;
  t13923 = t3945*t3466;
  t13944 = t13915 + t13923;
  t15478 = t2799*t5226;
  t15514 = t5305*t3466;
  t15520 = t14552 + t15478 + t15514;
  t15559 = t2799*t5305;
  t15560 = 0.2*t3466;
  t15621 = -1.*t5226*t3466;
  t15706 = t15559 + t15560 + t15621;
  t15553 = -1.*t1256*t3466*t15520;
  t15773 = -1.*t1256*t2799*t15706;
  t15787 = t5321 + t5322 + t5330 + t5332 + t15553 + t15773;
  t16480 = -1.*t2799*t5226;
  t16482 = -1.*t5305*t3466;
  t16487 = t14553 + t16480 + t16482;
  t16167 = t5079*t5338;
  t16205 = t13944*t15520;
  t16209 = t15706*t4310;
  t16220 = t16167 + t16205 + t16209;
  t14002 = t3414*t4685;
  t14153 = -3.e-6*t3521*t12386;
  t14329 = t4522*t2799;
  t14330 = t3521*t3466;
  t14338 = t14329 + t14330;
  t14339 = t2169*t14338;
  t14340 = t14153 + t14339;
  t14397 = t1645*t14340;
  t14398 = t14002 + t14397;
  t6751 = 4.e-7*var1[9];
  t6844 = -1. + t3757;
  t6849 = 0.1*t6844;
  t6873 = -3.000000000027e-7*t703;
  t6891 = 9.e-18*t3521;
  t12698 = t3414*t4310;
  t12789 = -1.*t5079*t12386;
  t13968 = t2169*t13944;
  t13976 = t12789 + t13968;
  t13981 = t1645*t13976;
  t13983 = t12698 + t13981;
  t17068 = t1256*t3466*t15520;
  t17069 = t1256*t2799*t15706;
  t17070 = t6751 + t6849 + t6873 + t6891 + t17068 + t17069;
  t17072 = -3.e-6*t5338*t3521;
  t17073 = -1.*t4685*t15706;
  t17074 = -1.*t15520*t14338;
  t17081 = t17072 + t17073 + t17074;
  t12379 = t1256*t2799*t3414;
  t12398 = t1256*t2169*t3466;
  t12399 = t12386 + t12398;
  t12423 = t1645*t12399;
  t12514 = t12379 + t12423;
  t17644 = -1.*t13944*t15520;
  t17742 = -1.*t15706*t4310;
  t17770 = t5380 + t17644 + t17742;
  t17930 = t4685*t15706;
  t17932 = t15520*t14338;
  t17934 = t5343 + t17930 + t17932;
  t19189 = Sin(var1[3]);
  t19190 = t2799*t19189*t12386;
  t19195 = Cos(var1[3]);
  t19225 = -1.*t2169*t2799*t3414;
  t19227 = -1.*t1645*t3466;
  t19228 = t19225 + t19227;
  t19229 = t19195*t19228;
  t19230 = t19190 + t19229;
  t19712 = t19195*t2799*t12386;
  t19713 = -1.*t19189*t19228;
  t19715 = t19712 + t19713;
  t19269 = -1.*t1256*t2169*t2799*t3414;
  t19272 = -1.*t1256*t1645*t3466;
  t19283 = t19269 + t19272;
  t19321 = t1645*t2799;
  t19327 = -1.*t2169*t3414*t3466;
  t19348 = t19321 + t19327;
  t19405 = -1.*t1645*t2799;
  t19408 = t2169*t3414*t3466;
  t19412 = t19405 + t19408;
  t19422 = -1.*t2169;
  t19427 = t1256*t12386*t3466;
  t19431 = t19422 + t19427;
  t19444 = t1256*t1645*t2799;
  t19446 = -1.*t3414*t12399;
  t19447 = t19444 + t19446;
  t19469 = t1645*t3956;
  t19470 = -1.*t2169*t3414*t4310;
  t19471 = t19469 + t19470;
  t19477 = -1.*t2169*t3414*t4685;
  t19479 = t1645*t4700;
  t19480 = t19477 + t19479;
  t19491 = t5079*t2169;
  t19492 = t12386*t13944;
  t19493 = t19491 + t19492;
  t19506 = t1645*t4310;
  t19512 = -1.*t3414*t13976;
  t19539 = t19506 + t19512;
  t19668 = 3.e-6*t2169*t3521;
  t19689 = t12386*t14338;
  t19690 = t19668 + t19689;
  t19699 = t1645*t4685;
  t19701 = -1.*t3414*t14340;
  t19705 = t19699 + t19701;
  t19893 = -0.1*t12386;
  t19894 = t2169*t14556;
  t19897 = t19893 + t19894;
  t19915 = 0.1*t2169;
  t19917 = t12386*t14556;
  t19918 = t19915 + t19917;
  t15415 = 0.05*t2799*t3466;
  t20394 = t12386*t19897;
  t20840 = -1.*t2169*t19918;
  t20849 = t20394 + t20840;
  t15443 = Power(t2799,2);
  t19899 = -1.*t12386*t19897;
  t19919 = t2169*t19918;
  t19933 = t19899 + t19919;
  t21024 = 0.05*t15443;
  t20909 = Power(t2169,2);
  t20935 = Power(t12386,2);
  t21026 = t2169*t19897*t3466;
  t21082 = t12386*t19918*t3466;
  t15457 = Power(t3466,2);
  t20865 = t2169*t2799*t19897;
  t20898 = t2799*t12386*t19918;
  t14684 = -0.05*t2799*t3466;
  t19936 = -1.*t2169*t2799*t19897;
  t19939 = -1.*t2799*t12386*t19918;
  t15447 = -0.05*t15443;
  t21380 = -1.*t2169*t19897*t3466;
  t21384 = -1.*t12386*t19918*t3466;
  t15459 = 0.05*t15457;
  t16492 = -1.*t1256*t2799*t16487;
  t16685 = t3956*t15706;
  t16970 = t16487*t4310;
  t21425 = -1.*t5338*t12386;
  t21428 = t2169*t15520;
  t21429 = t21425 + t21428;
  t21431 = t2169*t5338;
  t21433 = t12386*t15520;
  t21434 = t21431 + t21433;
  t21464 = -1.*t12399*t21429;
  t21465 = -1.*t19431*t21434;
  t21466 = t15773 + t21464 + t21465;
  t21470 = t13976*t21429;
  t21471 = t19493*t21434;
  t21475 = t16209 + t21470 + t21471;
  t18142 = t1256*t2799*t16487;
  t18152 = -1.*t4685*t16487;
  t18154 = -1.*t15706*t4700;
  t21512 = t12399*t21429;
  t21515 = t19431*t21434;
  t21519 = t17069 + t21512 + t21515;
  t21545 = -1.*t21429*t14340;
  t21554 = -1.*t21434*t19690;
  t21555 = t17073 + t21545 + t21554;
  t18849 = -1.*t3956*t15706;
  t19077 = -1.*t16487*t4310;
  t19123 = t4685*t16487;
  t19155 = t15706*t4700;
  t21609 = -1.*t13976*t21429;
  t21610 = -1.*t19493*t21434;
  t21611 = t17742 + t21609 + t21610;
  t21628 = t21429*t14340;
  t21630 = t21434*t19690;
  t21631 = t17930 + t21628 + t21630;
  t21664 = 0.05*t1645*t2799;
  t21666 = -1.*t3414*t19897;
  t21672 = t21664 + t21666;
  t21659 = 0.05*t2799*t3414;
  t21660 = t1645*t19897;
  t21661 = t21659 + t21660;
  t21701 = t1645*t12386*t21661;
  t21703 = -1.*t3414*t12386*t21672;
  t21704 = t21701 + t21703 + t20840;
  t20937 = 0.05*t2799*t20935*t3466;
  t21776 = 0.05*t1645*t2169*t2799;
  t21777 = -0.05*t3414*t3466;
  t21795 = t21776 + t21777;
  t21767 = -0.05*t2169*t2799*t3414;
  t21770 = -0.05*t1645*t3466;
  t21773 = t21767 + t21770;
  t21663 = -1.*t1645*t12386*t21661;
  t21673 = t3414*t12386*t21672;
  t21676 = t21663 + t21673 + t19919;
  t21339 = -0.05*t15443*t20935;
  t21806 = t21672*t19228;
  t21809 = t21661*t9672;
  t21376 = -0.05*t2799*t20935*t3466;
  t21678 = -1.*t21672*t19228;
  t21681 = -1.*t21661*t9672;
  t21404 = 0.05*t15443*t20935;
  t21424 = -1.*t12386*t15706*t19431;
  t21435 = -1.*t1256*t2799*t12386*t21434;
  t21941 = t3414*t15706;
  t21951 = t1645*t21429;
  t21954 = t21941 + t21951;
  t21959 = t1645*t15706;
  t21965 = -1.*t3414*t21429;
  t21966 = t21959 + t21965;
  t21446 = t12386*t15706*t19493;
  t21456 = t12386*t4310*t21434;
  t21918 = t3414*t16487;
  t21924 = t1645*t2169*t15706;
  t21926 = t21918 + t21924;
  t21930 = t1645*t16487;
  t21931 = -1.*t2169*t3414*t15706;
  t21937 = t21930 + t21931;
  t21976 = -1.*t12514*t21954;
  t21982 = -1.*t19447*t21966;
  t21983 = t21465 + t21976 + t21982;
  t22006 = t13983*t21954;
  t22014 = t19539*t21966;
  t22016 = t21471 + t22006 + t22014;
  t21492 = t12386*t15706*t19431;
  t21495 = t1256*t2799*t12386*t21434;
  t21527 = -1.*t12386*t4685*t21434;
  t21537 = -1.*t12386*t15706*t19690;
  t22100 = t12514*t21954;
  t22102 = t19447*t21966;
  t22103 = t21515 + t22100 + t22102;
  t22118 = -1.*t21954*t14398;
  t22119 = -1.*t21966*t19705;
  t22123 = t21554 + t22118 + t22119;
  t21599 = -1.*t12386*t15706*t19493;
  t21601 = -1.*t12386*t4310*t21434;
  t21619 = t12386*t4685*t21434;
  t21623 = t12386*t15706*t19690;
  t22153 = -1.*t13983*t21954;
  t22154 = -1.*t19539*t21966;
  t22156 = t21610 + t22153 + t22154;
  t22173 = t21954*t14398;
  t22175 = t21966*t19705;
  t22181 = t21630 + t22173 + t22175;
  t19718 = t1256*t19195*t2799*t12386;
  t19720 = -1.*t19189*t19283;
  t19724 = t19718 + t19720;
  t19855 = t19195*t12386*t4310;
  t19856 = -1.*t19189*t19471;
  t19857 = t19855 + t19856;
  t19865 = t19195*t12386*t4685;
  t19867 = -1.*t19189*t19480;
  t19869 = t19865 + t19867;
  t4881 = 0.2*t1256;
  t5346 = t5234 + t5317 + t5343;
  t5347 = t5079*t5346;
  t6338 = t5379 + t5380 + t5664;
  t6345 = 3.e-6*t3521*t6338;
  t6386 = t4881 + t5347 + t6345;
  t19761 = -1.*t19195*t12386*t3466;
  t19765 = -1.*t19189*t19412;
  t19766 = t19761 + t19765;
  t6666 = 0.2*t3945;
  t6881 = t1256*t5305;
  t7010 = t6751 + t6849 + t6873 + t6881 + t6891;
  t7067 = 3.e-6*t7010*t3521;
  t7090 = t6666 + t5234 + t5317 + t5343 + t7067;
  t7320 = -1.*t1256*t5305;
  t7385 = t5321 + t5322 + t5330 + t7320 + t5332;
  t7880 = t5079*t7385;
  t8180 = 0.2*t3521;
  t8369 = t5379 + t5380 + t7880 + t8180 + t5664;
  t19716 = 0.026*t4717*t19715;
  t19717 = 0.026*t12113*t19715;
  t19725 = 0.043*t19724*t12514;
  t19726 = t19195*t12386*t3466;
  t19727 = -1.*t19189*t19348;
  t19728 = t19726 + t19727;
  t19737 = 0.026*t9672*t19728;
  t19775 = 0.026*t9672*t19766;
  t19776 = t19195*t19431;
  t19848 = -1.*t19189*t19447;
  t19852 = t19776 + t19848;
  t19854 = 0.043*t3483*t19852;
  t19861 = 0.043*t13983*t19857;
  t19878 = 0.043*t19869*t14398;
  t19881 = t19195*t19493;
  t19882 = -1.*t19189*t19539;
  t19883 = t19881 + t19882;
  t19884 = 0.043*t4437*t19883;
  t19885 = t19195*t19690;
  t19887 = -1.*t19189*t19705;
  t19888 = t19885 + t19887;
  t19889 = 0.043*t4704*t19888;
  t19890 = t19716 + t19717 + t19725 + t19737 + t19775 + t19854 + t19861 + t19878 + t19884 + t19889;
  t14576 = t2799*t14556;
  t14740 = t14576 + t14684;
  t15022 = -1.*t3466*t14740;
  t15061 = -1.*t2799*t14556;
  t15435 = t15061 + t15415;
  t15442 = -1.*t3466*t15435;
  t15453 = t15447 + t15450;
  t15455 = -1.*t2799*t15453;
  t15465 = t15450 + t15459;
  t15468 = t2799*t15465;
  t15469 = t15022 + t15442 + t15455 + t15468;
  t15875 = t4310*t15787;
  t16468 = t1256*t2799*t16220;
  t16473 = t15875 + t16468;
  t17071 = t4685*t17070;
  t17194 = t1256*t2799*t17081;
  t17200 = t17071 + t17194;
  t17917 = t4685*t17770;
  t17945 = t4310*t17934;
  t17957 = t17917 + t17945;
  t18991 = -1.*t13944*t15706;
  t19087 = -1.*t15520*t4310;
  t19088 = t18849 + t18991 + t19077 + t19087;
  t19090 = t4685*t19088;
  t19091 = t4700*t17770;
  t19092 = t3956*t17934;
  t19125 = t4685*t15520;
  t19159 = t15706*t14338;
  t19161 = t19123 + t19125 + t19155 + t19159;
  t19168 = t4310*t19161;
  t19173 = t19090 + t19091 + t19092 + t19168;
  t18143 = t1256*t2799*t15520;
  t18145 = t18142 + t18143;
  t18147 = t4685*t18145;
  t18149 = t4700*t17070;
  t18150 = -1.*t1256*t3466*t17081;
  t18153 = -1.*t4685*t15520;
  t18155 = -1.*t15706*t14338;
  t18157 = t18152 + t18153 + t18154 + t18155;
  t18159 = t1256*t2799*t18157;
  t18172 = t18147 + t18149 + t18150 + t18159;
  t16513 = -1.*t1256*t2799*t15520;
  t16563 = t16492 + t16513;
  t16592 = t4310*t16563;
  t16666 = t3956*t15787;
  t16865 = t13944*t15706;
  t16996 = t15520*t4310;
  t17008 = t16685 + t16865 + t16970 + t16996;
  t17011 = t1256*t2799*t17008;
  t17060 = -1.*t1256*t3466*t16220;
  t17063 = t16592 + t16666 + t17011 + t17060;
  t19314 = t19189*t12386*t3466;
  t19376 = t19195*t19348;
  t19386 = t19314 + t19376;
  t19395 = -1.*t19189*t12386*t3466;
  t19415 = t19195*t19412;
  t19417 = t19395 + t19415;
  t19443 = t19189*t19431;
  t19458 = t19195*t19447;
  t19462 = t19443 + t19458;
  t19267 = t1256*t2799*t19189*t12386;
  t19284 = t19195*t19283;
  t19286 = t19267 + t19284;
  t19498 = t19189*t19493;
  t19540 = t19195*t19539;
  t19541 = t19498 + t19540;
  t19468 = t19189*t12386*t4310;
  t19473 = t19195*t19471;
  t19474 = t19468 + t19473;
  t19694 = t19189*t19690;
  t19706 = t19195*t19705;
  t19707 = t19694 + t19706;
  t19476 = t19189*t12386*t4685;
  t19484 = t19195*t19480;
  t19487 = t19476 + t19484;
  t19934 = t2799*t12386*t19933;
  t19967 = t19936 + t19939 + t15415;
  t20062 = t2169*t19967;
  t20120 = t19934 + t20062;
  t20852 = t2799*t12386*t20849;
  t20904 = -0.1*t2799*t3466;
  t20910 = 0.05*t20909*t2799*t3466;
  t20947 = t20865 + t20898 + t20904 + t20910 + t20937;
  t20956 = t2169*t20947;
  t20964 = t20852 + t20956;
  t20970 = t12386*t20849*t3466;
  t21129 = t21024 + t21026 + t21082;
  t21134 = t2169*t21129;
  t21135 = t20970 + t21134;
  t21160 = -1.*t12386*t19933*t3466;
  t21302 = -0.05*t20909*t15443;
  t21349 = -0.05*t15457;
  t21357 = t21024 + t21302 + t21339 + t21026 + t21082 + t21349;
  t21359 = t2169*t21357;
  t21361 = t21160 + t21359;
  t22229 = t19195*t2169;
  t22231 = -1.*t19189*t3414*t12386;
  t22234 = t22229 + t22231;
  t21363 = t20865 + t20898 + t14684;
  t21365 = t2799*t12386*t21363;
  t21366 = 0.1*t2799*t3466;
  t21367 = -0.05*t20909*t2799*t3466;
  t21377 = t19936 + t19939 + t21366 + t21367 + t21376;
  t21379 = t2799*t12386*t21377;
  t21387 = t15447 + t21380 + t21384;
  t21391 = -1.*t12386*t3466*t21387;
  t21402 = 0.05*t20909*t15443;
  t21405 = t15447 + t21402 + t21404 + t21380 + t21384 + t15459;
  t21406 = t12386*t3466*t21405;
  t21409 = t21365 + t21379 + t21391 + t21406;
  t21483 = t19493*t21466;
  t21484 = t19431*t21475;
  t21488 = t21483 + t21484;
  t21415 = t1256*t3466*t15706;
  t21423 = -1.*t2169*t12399*t15706;
  t21430 = -1.*t1256*t2169*t2799*t21429;
  t21436 = t16492 + t21415 + t21423 + t21424 + t21430 + t21435;
  t21440 = t19493*t21436;
  t21444 = t2169*t15706*t13976;
  t21454 = t2169*t4310*t21429;
  t21460 = t16685 + t16970 + t21444 + t21446 + t21454 + t21456;
  t21461 = t19431*t21460;
  t21467 = t12386*t4310*t21466;
  t21478 = t1256*t2799*t12386*t21475;
  t21480 = t21440 + t21461 + t21467 + t21478;
  t21490 = -1.*t1256*t3466*t15706;
  t21491 = t2169*t12399*t15706;
  t21494 = t1256*t2169*t2799*t21429;
  t21498 = t18142 + t21490 + t21491 + t21492 + t21494 + t21495;
  t21511 = t19690*t21498;
  t21522 = t12386*t4685*t21519;
  t21525 = -1.*t2169*t4685*t21429;
  t21535 = -1.*t2169*t15706*t14340;
  t21540 = t18152 + t18154 + t21525 + t21527 + t21535 + t21537;
  t21541 = t19431*t21540;
  t21568 = t1256*t2799*t12386*t21555;
  t21571 = t21511 + t21522 + t21541 + t21568;
  t21574 = t19690*t21519;
  t21578 = t19431*t21555;
  t21591 = t21574 + t21578;
  t21597 = -1.*t2169*t15706*t13976;
  t21600 = -1.*t2169*t4310*t21429;
  t21603 = t18849 + t19077 + t21597 + t21599 + t21600 + t21601;
  t21604 = t19690*t21603;
  t21616 = t12386*t4685*t21611;
  t21617 = t2169*t4685*t21429;
  t21621 = t2169*t15706*t14340;
  t21624 = t19123 + t19155 + t21617 + t21619 + t21621 + t21623;
  t21627 = t19493*t21624;
  t21635 = t12386*t4310*t21631;
  t21637 = t21604 + t21616 + t21627 + t21635;
  t21646 = t19690*t21611;
  t21649 = t19493*t21631;
  t21650 = t21646 + t21649;
  t21677 = t21676*t9672;
  t21689 = t19939 + t21678 + t21681;
  t21690 = -1.*t1645*t12386*t21689;
  t21691 = t21677 + t21690;
  t21706 = t21704*t12113;
  t21709 = t21661*t12113;
  t21725 = t21672*t19348;
  t21737 = t21082 + t21709 + t21725;
  t21738 = -1.*t1645*t12386*t21737;
  t21740 = t21706 + t21738;
  t21742 = t21704*t9672;
  t21760 = -0.05*t2169*t2799*t12386;
  t21774 = -1.*t3414*t12386*t21773;
  t21802 = t1645*t12386*t21795;
  t21803 = t21760 + t21774 + t21802;
  t21804 = t12113*t21803;
  t21810 = t12113*t21795;
  t21813 = t21773*t19348;
  t21815 = t20898 + t20937 + t21806 + t21809 + t21810 + t21813;
  t21817 = -1.*t1645*t12386*t21815;
  t21819 = t21742 + t21804 + t21817;
  t21824 = t21676*t4717;
  t21828 = 0.05*t2169*t2799*t12386;
  t21829 = t3414*t12386*t21773;
  t21830 = -1.*t1645*t12386*t21795;
  t21833 = t21828 + t21829 + t21830;
  t21834 = t9672*t21833;
  t21835 = -1.*t19228*t21773;
  t21838 = -1.*t21661*t4717;
  t21839 = -1.*t9672*t21795;
  t21845 = -1.*t21672*t19412;
  t21846 = t21339 + t21082 + t21835 + t21838 + t21839 + t21845;
  t21848 = -1.*t1645*t12386*t21846;
  t21849 = t21824 + t21834 + t21848;
  t21855 = t20898 + t21806 + t21809;
  t21856 = t9672*t21855;
  t21857 = -1.*t21661*t12113;
  t21860 = -1.*t21672*t19348;
  t21861 = t21384 + t21857 + t21860;
  t21863 = t4717*t21861;
  t21864 = -1.*t12113*t21795;
  t21866 = -1.*t21773*t19348;
  t21867 = t19939 + t21376 + t21678 + t21681 + t21864 + t21866;
  t21869 = t9672*t21867;
  t21870 = t19228*t21773;
  t21874 = t21661*t4717;
  t21888 = t9672*t21795;
  t21891 = t21672*t19412;
  t21892 = t21404 + t21384 + t21870 + t21874 + t21888 + t21891;
  t21898 = t12113*t21892;
  t21900 = t21856 + t21863 + t21869 + t21898;
  t21928 = -1.*t12514*t21926;
  t21940 = -1.*t19447*t21937;
  t21958 = -1.*t3483*t21954;
  t21969 = -1.*t19283*t21966;
  t21970 = t21424 + t21435 + t21928 + t21940 + t21958 + t21969;
  t21974 = t13983*t21970;
  t21986 = t4437*t21983;
  t21988 = t21926*t13983;
  t21991 = t21937*t19539;
  t21995 = t4437*t21954;
  t21998 = t19471*t21966;
  t22000 = t21446 + t21456 + t21988 + t21991 + t21995 + t21998;
  t22003 = t12514*t22000;
  t22019 = t3483*t22016;
  t22020 = t21974 + t21986 + t22003 + t22019;
  t22028 = t13983*t21983;
  t22035 = t12514*t22016;
  t22037 = t22028 + t22035;
  t22061 = t12514*t21926;
  t22080 = t19447*t21937;
  t22090 = t3483*t21954;
  t22097 = t19283*t21966;
  t22098 = t21492 + t21495 + t22061 + t22080 + t22090 + t22097;
  t22099 = t14398*t22098;
  t22104 = t4704*t22103;
  t22108 = -1.*t4704*t21954;
  t22109 = -1.*t19480*t21966;
  t22111 = -1.*t21926*t14398;
  t22112 = -1.*t21937*t19705;
  t22115 = t21527 + t21537 + t22108 + t22109 + t22111 + t22112;
  t22116 = t12514*t22115;
  t22124 = t3483*t22123;
  t22125 = t22099 + t22104 + t22116 + t22124;
  t22129 = t14398*t22103;
  t22130 = t12514*t22123;
  t22137 = t22129 + t22130;
  t22146 = -1.*t21926*t13983;
  t22147 = -1.*t21937*t19539;
  t22148 = -1.*t4437*t21954;
  t22149 = -1.*t19471*t21966;
  t22150 = t21599 + t21601 + t22146 + t22147 + t22148 + t22149;
  t22151 = t14398*t22150;
  t22157 = t4704*t22156;
  t22158 = t4704*t21954;
  t22160 = t19480*t21966;
  t22164 = t21926*t14398;
  t22165 = t21937*t19705;
  t22166 = t21619 + t21623 + t22158 + t22160 + t22164 + t22165;
  t22169 = t13983*t22166;
  t22189 = t4437*t22181;
  t22190 = t22151 + t22157 + t22169 + t22189;
  t22192 = t14398*t22156;
  t22196 = t13983*t22181;
  t22197 = t22192 + t22196;
  t19232 = 0.026*t4717*t19230;
  t19233 = 0.026*t12113*t19230;
  t19299 = 0.043*t19286*t12514;
  t19387 = 0.026*t9672*t19386;
  t19418 = 0.026*t9672*t19417;
  t19467 = 0.043*t3483*t19462;
  t19475 = 0.043*t13983*t19474;
  t19488 = 0.043*t19487*t14398;
  t19548 = 0.043*t4437*t19541;
  t19708 = 0.043*t4704*t19707;
  t19709 = t19232 + t19233 + t19299 + t19387 + t19418 + t19467 + t19475 + t19488 + t19548 + t19708;
  t22300 = 0.026*t19715*t19386;
  t22312 = 0.026*t19230*t19728;
  t22317 = 0.026*t19715*t19417;
  t22319 = 0.026*t19230*t19766;
  t22320 = 0.043*t19724*t19462;
  t22327 = 0.043*t19286*t19852;
  t22328 = 0.043*t19857*t19541;
  t22330 = 0.043*t19474*t19883;
  t22332 = 0.043*t19869*t19707;
  t22345 = 0.043*t19487*t19888;
  t22349 = t22300 + t22312 + t22317 + t22319 + t22320 + t22327 + t22328 + t22330 + t22332 + t22345;
  t22542 = t2169*t19189;
  t22551 = t19195*t3414*t12386;
  t22554 = t22542 + t22551;
  t21692 = 0.026*t9672*t21691;
  t21741 = 0.026*t4717*t21740;
  t21822 = 0.026*t9672*t21819;
  t21851 = 0.026*t12113*t21849;
  t21901 = -0.026*t1645*t12386*t21900;
  t22026 = 0.043*t14398*t22020;
  t22056 = 0.043*t4704*t22037;
  t22127 = 0.043*t13983*t22125;
  t22139 = 0.043*t4437*t22137;
  t22191 = 0.043*t12514*t22190;
  t22198 = 0.043*t3483*t22197;
  t22199 = t21692 + t21741 + t21822 + t21851 + t21901 + t22026 + t22056 + t22127 + t22139 + t22191 + t22198;
  t22677 = 0.026*t19230*t21691;
  t22678 = 0.026*t19417*t21740;
  t22680 = 0.026*t19230*t21819;
  t22681 = 0.026*t19386*t21849;
  t22683 = 0.026*t22554*t21900;
  t22684 = 0.043*t19707*t22020;
  t22685 = 0.043*t19487*t22037;
  t22701 = 0.043*t19541*t22125;
  t22702 = 0.043*t19474*t22137;
  t22703 = 0.043*t19462*t22190;
  t22705 = 0.043*t19286*t22197;
  t22709 = t22677 + t22678 + t22680 + t22681 + t22683 + t22684 + t22685 + t22701 + t22702 + t22703 + t22705;
  t22397 = 0.026*t19715*t21691;
  t22398 = 0.026*t19766*t21740;
  t22399 = 0.026*t19715*t21819;
  t22404 = 0.026*t19728*t21849;
  t22407 = 0.026*t22234*t21900;
  t22408 = 0.043*t19888*t22020;
  t22415 = 0.043*t19869*t22037;
  t22416 = 0.043*t19883*t22125;
  t22417 = 0.043*t19857*t22137;
  t22419 = 0.043*t19852*t22190;
  t22422 = 0.043*t19724*t22197;
  t22441 = t22397 + t22398 + t22399 + t22404 + t22407 + t22408 + t22415 + t22416 + t22417 + t22419 + t22422;
  t22780 = t12113*t21855;
  t22782 = t9672*t21861;
  t22785 = t22780 + t22782;
  t20262 = 0.026*t9672*t20120;
  t20969 = 0.026*t9672*t20964;
  t21144 = 0.026*t4717*t21135;
  t21362 = 0.026*t12113*t21361;
  t21410 = -0.026*t1645*t12386*t21409;
  t21482 = 0.043*t14398*t21480;
  t21489 = 0.043*t4704*t21488;
  t21572 = 0.043*t13983*t21571;
  t21594 = 0.043*t4437*t21591;
  t21638 = 0.043*t12514*t21637;
  t21655 = 0.043*t3483*t21650;
  t21656 = t20262 + t20969 + t21144 + t21362 + t21410 + t21482 + t21489 + t21572 + t21594 + t21638 + t21655;
  t22651 = 0.026*t19230*t20120;
  t22654 = 0.026*t19230*t20964;
  t22657 = 0.026*t19417*t21135;
  t22658 = 0.026*t19386*t21361;
  t22659 = 0.026*t22554*t21409;
  t22661 = 0.043*t19487*t21488;
  t22662 = 0.043*t21480*t19707;
  t22667 = 0.043*t19541*t21571;
  t22669 = 0.043*t19474*t21591;
  t22671 = 0.043*t19462*t21637;
  t22672 = 0.043*t19286*t21650;
  t22674 = t22651 + t22654 + t22657 + t22658 + t22659 + t22661 + t22662 + t22667 + t22669 + t22671 + t22672;
  t22374 = 0.026*t19715*t20120;
  t22375 = 0.026*t19715*t20964;
  t22378 = 0.026*t19766*t21135;
  t22379 = 0.026*t19728*t21361;
  t22381 = 0.026*t22234*t21409;
  t22384 = 0.043*t19869*t21488;
  t22385 = 0.043*t21480*t19888;
  t22388 = 0.043*t19883*t21571;
  t22389 = 0.043*t19857*t21591;
  t22390 = 0.043*t19852*t21637;
  t22391 = 0.043*t19724*t21650;
  t22393 = t22374 + t22375 + t22378 + t22379 + t22381 + t22384 + t22385 + t22388 + t22389 + t22390 + t22391;
  t22794 = t2799*t14740;
  t22795 = -1.*t3466*t15453;
  t22797 = t22794 + t22795;
  t22842 = t12386*t3466*t21363;
  t22843 = t2799*t12386*t21387;
  t22845 = t22842 + t22843;
  t22812 = 0.000014*t2799*t12386*t4717;
  t22813 = 0.000056*t2799*t12386*t12113;
  t22817 = 0.000042*t12386*t3466*t9672;
  t22821 = 0.000271*t3483*t19431;
  t22822 = 0.000271*t1256*t2799*t12386*t12514;
  t22824 = 0.000271*t19493*t4437;
  t22828 = 2.e-6*t4704*t19690;
  t22831 = 0.000271*t12386*t4310*t13983;
  t22833 = 2.e-6*t12386*t4685*t14398;
  t22835 = 0.026*t21361*t21691;
  t22836 = 0.026*t21409*t22785;
  t22838 = 0.026*t20964*t21740;
  t22840 = 0.026*t21135*t21819;
  t22841 = 0.026*t20120*t21849;
  t22847 = 0.026*t22845*t21900;
  t22848 = 0.043*t21488*t22020;
  t22850 = 0.043*t21480*t22037;
  t22853 = 0.043*t21591*t22125;
  t22854 = 0.043*t21571*t22137;
  t22860 = 0.043*t21650*t22190;
  t22864 = 0.043*t21637*t22197;
  t22869 = t22812 + t22813 + t22817 + t22821 + t22822 + t22824 + t22828 + t22831 + t22833 + t22835 + t22836 + t22838 + t22840 + t22841 + t22847 + t22848 + t22850 + t22853 + t22854 + t22860 + t22864;
  t14496 = -0.0026*t2799*t4717;
  t14512 = -0.0026*t2799*t12113;
  t15477 = -0.026*t1645*t12386*t15469;
  t16476 = 0.043*t4704*t16473;
  t17066 = 0.043*t17063*t14398;
  t17605 = 0.043*t4437*t17200;
  t18141 = 0.043*t3483*t17957;
  t18180 = 0.043*t13983*t18172;
  t19176 = 0.043*t12514*t19173;
  t19179 = t14496 + t14512 + t15477 + t16476 + t17066 + t17605 + t18141 + t18180 + t19176;
  t22994 = Power(t1256,2);
  t22533 = -0.0026*t2799*t19386;
  t22534 = -0.0026*t2799*t19417;
  t22557 = 0.026*t22554*t15469;
  t22562 = 0.043*t16473*t19487;
  t22563 = 0.043*t19474*t17200;
  t22566 = 0.043*t19286*t17957;
  t22567 = 0.043*t19462*t19173;
  t22569 = 0.043*t18172*t19541;
  t22570 = 0.043*t17063*t19707;
  t22573 = t22533 + t22534 + t22557 + t22562 + t22563 + t22566 + t22567 + t22569 + t22570;
  t22226 = -0.0026*t2799*t19728;
  t22227 = -0.0026*t2799*t19766;
  t22240 = 0.026*t22234*t15469;
  t22244 = 0.043*t16473*t19869;
  t22245 = 0.043*t19857*t17200;
  t22250 = 0.043*t19724*t17957;
  t22254 = 0.043*t19852*t19173;
  t22257 = 0.043*t18172*t19883;
  t22263 = 0.043*t17063*t19888;
  t22282 = t22226 + t22227 + t22240 + t22244 + t22245 + t22250 + t22254 + t22257 + t22263;
  t22993 = 0.000042*t15443*t12386;
  t22995 = 0.000271*t22994*t15443*t12386;
  t22996 = -0.000042*t12386*t15457;
  t22997 = Power(t4685,2);
  t22998 = 2.e-6*t12386*t22997;
  t22999 = Power(t4310,2);
  t23000 = 0.000271*t12386*t22999;
  t23001 = -0.000271*t1256*t3466*t19431;
  t23002 = 0.000271*t3956*t19493;
  t23003 = -0.0026*t2799*t20120;
  t23008 = 2.e-6*t4700*t19690;
  t23010 = -0.0026*t2799*t20964;
  t23014 = 0.0026*t3466*t21135;
  t23015 = -0.0026*t3466*t21361;
  t23020 = 0.026*t22797*t21409;
  t23024 = 0.026*t22845*t15469;
  t23029 = 0.043*t16473*t21480;
  t23030 = 0.043*t17063*t21488;
  t23032 = 0.043*t17200*t21571;
  t23033 = 0.043*t18172*t21591;
  t23040 = 0.043*t17957*t21637;
  t23044 = 0.043*t19173*t21650;
  t23052 = t22993 + t22995 + t22996 + t22998 + t23000 + t23001 + t23002 + t23003 + t23008 + t23010 + t23014 + t23015 + t23020 + t23024 + t23029 + t23030 + t23032 + t23033 + t23040 + t23044;
  t22757 = -0.000014*t3466*t4717;
  t22758 = -0.000056*t3466*t12113;
  t22759 = 0.000042*t2799*t9672;
  t22762 = 0.000271*t1256*t2799*t3483;
  t22769 = -0.000271*t1256*t3466*t12514;
  t22770 = 0.000271*t4310*t4437;
  t22772 = 2.e-6*t4685*t4704;
  t22775 = 0.000271*t3956*t13983;
  t22778 = 2.e-6*t4700*t14398;
  t22779 = -0.0026*t2799*t21691;
  t22786 = 0.026*t15469*t22785;
  t22787 = 0.0026*t3466*t21740;
  t22789 = -0.0026*t2799*t21819;
  t22791 = -0.0026*t3466*t21849;
  t22799 = 0.026*t22797*t21900;
  t22800 = 0.043*t16473*t22020;
  t22801 = 0.043*t17063*t22037;
  t22803 = 0.043*t17200*t22125;
  t22804 = 0.043*t18172*t22137;
  t22805 = 0.043*t17957*t22190;
  t22807 = 0.043*t19173*t22197;
  t22808 = t22757 + t22758 + t22759 + t22762 + t22769 + t22770 + t22772 + t22775 + t22778 + t22779 + t22786 + t22787 + t22789 + t22791 + t22799 + t22800 + t22801 + t22803 + t22804 + t22805 + t22807;
  t4878 = 0.0013*t4717;
  t6440 = 0.043*t6386*t3483;
  t7182 = 0.043*t7090*t4437;
  t8476 = 0.043*t8369*t4704;
  t9632 = t4878 + t6440 + t7182 + t8476;
  t22499 = 0.043*t6386*t19286;
  t22501 = 0.0013*t19417;
  t22503 = 0.043*t7090*t19474;
  t22505 = 0.043*t8369*t19487;
  t22507 = t22499 + t22501 + t22503 + t22505;
  t22218 = 0.043*t6386*t19724;
  t22219 = 0.0013*t19766;
  t22220 = 0.043*t7090*t19857;
  t22221 = 0.043*t8369*t19869;
  t22222 = t22218 + t22219 + t22220 + t22221;
  t23113 = 0.00013*t3466;
  t23115 = 0.000271*t1256*t3466;
  t23116 = 0.000271*t5079*t3956;
  t23128 = 6.e-12*t3521*t4700;
  t23153 = 0.043*t8369*t17063;
  t23165 = 0.043*t7090*t18172;
  t23167 = 0.043*t6386*t19173;
  t23168 = t23113 + t23115 + t23116 + t23128 + t23153 + t23165 + t23167;
  t22976 = -0.000271*t1256*t2799*t12386;
  t22978 = 6.e-12*t3521*t12386*t4685;
  t22981 = 0.000271*t5079*t12386*t4310;
  t22982 = 0.0013*t20964;
  t22983 = 0.043*t8369*t21480;
  t22984 = 0.043*t7090*t21571;
  t22985 = 0.043*t6386*t21637;
  t22987 = t22976 + t22978 + t22981 + t22982 + t22983 + t22984 + t22985;
  t22725 = -0.000271*t3483;
  t22729 = 0.000271*t5079*t4437;
  t22732 = 6.e-12*t3521*t4704;
  t22736 = 0.0013*t21819;
  t22737 = 0.043*t8369*t22020;
  t22740 = 0.043*t7090*t22125;
  t22749 = 0.043*t6386*t22190;
  t22750 = t22725 + t22729 + t22732 + t22736 + t22737 + t22740 + t22749;
  t3519 = 1.72e-8*t3483;
  t4439 = 5.16e-14*t4437;
  t4705 = 0.0042999871*t4704;
  t4706 = t3519 + t4439 + t4705;
  t22486 = 1.72e-8*t19286;
  t22489 = 5.16e-14*t19474;
  t22490 = 0.0042999871*t19487;
  t22493 = t22486 + t22489 + t22490;
  t22205 = 1.72e-8*t19724;
  t22210 = 5.16e-14*t19857;
  t22212 = 0.0042999871*t19869;
  t22216 = t22205 + t22210 + t22212;
  t23091 = -0.000271000000002439*t1256*t3466;
  t23092 = 0.0042999871*t17063;
  t23105 = 5.16e-14*t18172;
  t23109 = 1.72e-8*t19173;
  t23111 = t23091 + t23092 + t23105 + t23109;
  t22949 = 0.000271000000002439*t1256*t2799*t12386;
  t22951 = 0.0042999871*t21480;
  t22958 = 5.16e-14*t21571;
  t22968 = 1.72e-8*t21637;
  t22973 = t22949 + t22951 + t22958 + t22968;
  t22718 = 0.000271000000002439*t3483;
  t22719 = 0.0042999871*t22020;
  t22720 = 5.16e-14*t22125;
  t22721 = 1.72e-8*t22190;
  t22723 = t22718 + t22719 + t22720 + t22721;
  p_output1[0]=var2[7]*(-0.5*(0.086*t12514*t3483 + 0.086*t13983*t4437 + 0.086*t14398*t4704 + 0.052*t12113*t9672 + 0.052*t4717*t9672)*var2[0] - 0.5*t19890*var2[1] - 0.5*t19709*var2[2] - 0.5*t22199*var2[3] - 0.5*t21656*var2[4] - 0.5*t19179*var2[5] - 0.5*t9632*var2[7] - 0.5*t4706*var2[9]);
  p_output1[1]=var2[7]*(-0.5*t19890*var2[0] - 0.5*(0.052*t19715*t19728 + 0.052*t19715*t19766 + 0.086*t19724*t19852 + 0.086*t19857*t19883 + 0.086*t19869*t19888)*var2[1] - 0.5*t22349*var2[2] - 0.5*t22441*var2[3] - 0.5*t22393*var2[4] - 0.5*t22282*var2[5] - 0.5*t22222*var2[7] - 0.5*t22216*var2[9]);
  p_output1[2]=var2[7]*(-0.5*t19709*var2[0] - 0.5*t22349*var2[1] - 0.5*(0.052*t19230*t19386 + 0.052*t19230*t19417 + 0.086*t19286*t19462 + 0.086*t19474*t19541 + 0.086*t19487*t19707)*var2[2] - 0.5*t22709*var2[3] - 0.5*t22674*var2[4] - 0.5*t22573*var2[5] - 0.5*t22507*var2[7] - 0.5*t22493*var2[9]);
  p_output1[3]=var2[7]*(-0.5*t22199*var2[0] - 0.5*t22441*var2[1] - 0.5*t22709*var2[2] - 0.5*(0.052*t21740*t21819 + 0.052*t21691*t21849 + 0.086*t22020*t22037 + 0.086*t22125*t22137 + 0.086*t22190*t22197 + 0.052*t21900*t22785 + 0.000542*t12514*t3483 + 0.000542*t13983*t4437 + 4.e-6*t14398*t4704 + 0.000112*t12113*t9672 + 0.000028*t4717*t9672)*var2[3] - 0.5*t22869*var2[4] - 0.5*t22808*var2[5] - 0.5*t22750*var2[7] - 0.5*t22723*var2[9]);
  p_output1[4]=var2[7]*(-0.5*t21656*var2[0] - 0.5*t22393*var2[1] - 0.5*t22674*var2[2] - 0.5*t22869*var2[3] - 0.5*(0.052*t20964*t21135 + 0.052*t20120*t21361 + 0.086*t21480*t21488 + 0.086*t21571*t21591 + 0.086*t21637*t21650 + 0.052*t21409*t22845 + 0.000542*t12386*t1256*t19431*t2799 + 0.000084*t20935*t2799*t3466 + 0.000542*t12386*t19493*t4310 + 4.e-6*t12386*t19690*t4685)*var2[4] - 0.5*t23052*var2[5] - 0.5*t22987*var2[7] - 0.5*t22973*var2[9]);
  p_output1[5]=var2[7]*(-0.5*t19179*var2[0] - 0.5*t22282*var2[1] - 0.5*t22573*var2[2] - 0.5*t22808*var2[3] - 0.5*t23052*var2[4] - 0.5*(0.086*t16473*t17063 + 0.086*t17200*t18172 + 0.086*t17957*t19173 + 0.052*t15469*t22797 - 0.000084*t2799*t3466 - 0.000542*t22994*t2799*t3466 + 0.000542*t3956*t4310 + 4.e-6*t4685*t4700)*var2[5] - 0.5*t23168*var2[7] - 0.5*t23111*var2[9]);
  p_output1[6]=0;
  p_output1[7]=(-0.5*t9632*var2[0] - 0.5*t22222*var2[1] - 0.5*t22507*var2[2] - 0.5*t22750*var2[3] - 0.5*t22987*var2[4] - 0.5*t23168*var2[5])*var2[7];
  p_output1[8]=0;
  p_output1[9]=(-0.5*t4706*var2[0] - 0.5*t22216*var2[1] - 0.5*t22493*var2[2] - 0.5*t22723*var2[3] - 0.5*t22973*var2[4] - 0.5*t23111*var2[5])*var2[7];
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec8_minitaur.hh"

namespace FrontStance
{

void Ce2_vec8_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
