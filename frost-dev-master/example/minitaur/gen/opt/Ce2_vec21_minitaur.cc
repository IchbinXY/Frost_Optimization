/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:11:32 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t15714;
  double t48110;
  double t6365;
  double t48723;
  double t51150;
  double t52446;
  double t52539;
  double t50542;
  double t53250;
  double t55275;
  double t55332;
  double t56174;
  double t56736;
  double t56152;
  double t56156;
  double t56157;
  double t56165;
  double t56196;
  double t57245;
  double t57499;
  double t57701;
  double t57756;
  double t57914;
  double t75312;
  double t75811;
  double t75812;
  double t75819;
  double t75842;
  double t55397;
  double t55428;
  double t55850;
  double t55863;
  double t55886;
  double t56811;
  double t75866;
  double t75870;
  double t57026;
  double t57031;
  double t57092;
  double t55941;
  double t56022;
  double t56150;
  double t75943;
  double t56856;
  double t56874;
  double t75982;
  double t75983;
  double t75968;
  double t75975;
  double t75976;
  double t75977;
  double t75978;
  double t54251;
  double t75929;
  double t75942;
  double t26922;
  double t50698;
  double t51363;
  double t52747;
  double t52766;
  double t52999;
  double t53232;
  double t53287;
  double t53449;
  double t53805;
  double t54100;
  double t75874;
  double t76069;
  double t76090;
  double t76091;
  double t76092;
  double t76093;
  double t76123;
  double t75877;
  double t75881;
  double t54132;
  double t54349;
  double t54466;
  double t54643;
  double t54801;
  double t54917;
  double t54927;
  double t54947;
  double t55038;
  double t55040;
  double t56151;
  double t56222;
  double t56879;
  double t57132;
  double t75810;
  double t76236;
  double t76237;
  double t75850;
  double t76162;
  double t76177;
  double t76139;
  double t76142;
  double t76146;
  double t76361;
  double t76362;
  double t76363;
  double t76364;
  double t76296;
  double t76298;
  double t76299;
  double t76340;
  double t76341;
  double t76342;
  double t76344;
  double t76346;
  double t76310;
  double t76311;
  double t76321;
  double t76383;
  double t76384;
  double t76387;
  double t76376;
  double t76377;
  double t76378;
  double t75984;
  double t76007;
  double t76025;
  double t76026;
  double t76027;
  double t76126;
  double t76128;
  double t76149;
  double t76183;
  double t76191;
  double t76221;
  double t76233;
  double t76234;
  double t76405;
  double t76408;
  double t76410;
  double t76454;
  double t76455;
  double t76456;
  double t76308;
  double t76325;
  double t76333;
  double t76334;
  double t76335;
  double t76336;
  double t76530;
  double t76537;
  double t76533;
  double t76534;
  double t76535;
  double t76538;
  double t76541;
  double t76544;
  double t76554;
  double t76556;
  double t76557;
  double t76563;
  double t76564;
  double t76566;
  double t76581;
  double t76591;
  double t76596;
  double t76599;
  double t76602;
  double t76615;
  double t76621;
  double t76622;
  double t76623;
  double t76625;
  double t76627;
  double t76628;
  double t76653;
  double t76654;
  double t76655;
  double t76474;
  double t76660;
  double t76661;
  double t76662;
  double t76656;
  double t76657;
  double t76658;
  double t76481;
  double t76673;
  double t76674;
  double t76675;
  double t76401;
  double t76427;
  double t76429;
  double t76721;
  double t76722;
  double t76749;
  double t76689;
  double t76700;
  double t76712;
  double t76365;
  double t76368;
  double t76379;
  double t76389;
  double t76393;
  double t76394;
  double t76659;
  double t76663;
  double t76664;
  double t76490;
  double t76499;
  double t76500;
  double t76667;
  double t76875;
  double t76882;
  double t76897;
  double t77062;
  double t77063;
  double t77064;
  double t76902;
  double t76909;
  double t76963;
  double t77061;
  double t77065;
  double t77070;
  double t76824;
  double t76836;
  double t76838;
  double t77101;
  double t77106;
  double t77107;
  double t77117;
  double t77122;
  double t77123;
  double t76680;
  double t77145;
  double t77155;
  double t77157;
  double t76713;
  double t76756;
  double t76757;
  double t76763;
  double t76815;
  double t76817;
  double t76768;
  double t76799;
  double t76800;
  double t76639;
  double t76640;
  double t76641;
  double t76643;
  double t76644;
  double t76645;
  double t75851;
  double t75864;
  double t75883;
  double t75884;
  double t75944;
  double t75950;
  double t75979;
  double t75980;
  double t75981;
  double t76124;
  double t76125;
  double t76127;
  double t76129;
  double t76130;
  double t76131;
  double t76635;
  double t76636;
  double t76637;
  double t76239;
  double t76243;
  double t76244;
  double t76246;
  double t76247;
  double t76248;
  double t76249;
  double t76252;
  double t76255;
  double t76256;
  double t76257;
  double t76258;
  double t76259;
  double t76647;
  double t76648;
  double t76649;
  double t76360;
  double t76366;
  double t76367;
  double t76371;
  double t76373;
  double t76374;
  double t76375;
  double t76388;
  double t76390;
  double t76391;
  double t76392;
  double t76395;
  double t76396;
  double t76397;
  double t76398;
  double t77526;
  double t77528;
  double t77529;
  double t76402;
  double t76403;
  double t76404;
  double t76416;
  double t76417;
  double t76418;
  double t76420;
  double t76428;
  double t76431;
  double t76438;
  double t76447;
  double t76471;
  double t76472;
  double t76473;
  double t76475;
  double t76476;
  double t76477;
  double t76479;
  double t76480;
  double t76482;
  double t76483;
  double t76484;
  double t76486;
  double t76488;
  double t76492;
  double t76493;
  double t76494;
  double t76495;
  double t76496;
  double t76498;
  double t76501;
  double t76502;
  double t76503;
  double t76504;
  double t76638;
  double t76642;
  double t76646;
  double t76650;
  double t76651;
  double t76598;
  double t76618;
  double t76619;
  double t76536;
  double t76545;
  double t76552;
  double t76624;
  double t76629;
  double t76630;
  double t76558;
  double t76567;
  double t76576;
  double t76665;
  double t76666;
  double t76668;
  double t76669;
  double t76670;
  double t76676;
  double t76677;
  double t76681;
  double t76682;
  double t76684;
  double t76688;
  double t76750;
  double t76751;
  double t76752;
  double t76754;
  double t76755;
  double t76758;
  double t76759;
  double t76760;
  double t76762;
  double t76765;
  double t76766;
  double t76767;
  double t76792;
  double t76793;
  double t76796;
  double t76798;
  double t76801;
  double t76806;
  double t76810;
  double t76814;
  double t76819;
  double t76820;
  double t76821;
  double t76823;
  double t76827;
  double t76828;
  double t76829;
  double t76830;
  double t76834;
  double t76839;
  double t76844;
  double t76846;
  double t77071;
  double t77074;
  double t77076;
  double t77093;
  double t77094;
  double t77095;
  double t77100;
  double t77116;
  double t77131;
  double t77132;
  double t77133;
  double t77135;
  double t77137;
  double t77138;
  double t77139;
  double t77140;
  double t77141;
  double t77142;
  double t77159;
  double t77165;
  double t77166;
  double t77217;
  double t77300;
  double t77421;
  double t77427;
  double t77428;
  double t77431;
  double t77432;
  double t77436;
  double t77437;
  double t77439;
  double t77440;
  double t77442;
  double t77443;
  double t77444;
  double t77445;
  double t77451;
  double t77452;
  double t77454;
  double t77455;
  double t77457;
  double t77458;
  double t77459;
  double t77465;
  double t77468;
  double t77474;
  double t77475;
  double t77477;
  double t77479;
  double t77480;
  double t77481;
  double t77482;
  double t77484;
  double t77486;
  double t77496;
  double t77500;
  double t77502;
  double t78026;
  double t78028;
  double t78029;
  double t76553;
  double t76579;
  double t76620;
  double t76631;
  double t76632;
  double t77904;
  double t77907;
  double t77911;
  double t77915;
  double t77916;
  double t78325;
  double t78327;
  double t78328;
  double t77097;
  double t77144;
  double t77426;
  double t77447;
  double t77503;
  double t77507;
  double t78271;
  double t78274;
  double t78275;
  double t78276;
  double t78277;
  double t78289;
  double t78004;
  double t78010;
  double t78011;
  double t78012;
  double t78013;
  double t78014;
  double t78375;
  double t78376;
  double t78377;
  double t78331;
  double t78332;
  double t78333;
  double t78334;
  double t78335;
  double t78336;
  double t78337;
  double t78351;
  double t78352;
  double t78353;
  double t76672;
  double t76687;
  double t76761;
  double t76822;
  double t76847;
  double t76852;
  double t78241;
  double t78245;
  double t78250;
  double t78251;
  double t78254;
  double t78255;
  double t77950;
  double t77951;
  double t77952;
  double t77959;
  double t77965;
  double t77972;
  double t78361;
  double t78363;
  double t78365;
  double t78367;
  double t78368;
  double t78369;
  double t78370;
  double t78371;
  double t78374;
  double t78378;
  double t78379;
  double t76400;
  double t76448;
  double t76478;
  double t76487;
  double t76505;
  double t76506;
  double t78045;
  double t78046;
  double t78047;
  double t78048;
  double t78051;
  double t78052;
  double t77558;
  double t77560;
  double t77630;
  double t77781;
  double t77889;
  double t77890;
  double t78472;
  double t78476;
  double t78480;
  double t78482;
  double t78483;
  double t78484;
  double t78485;
  double t78487;
  double t78488;
  double t78489;
  double t78490;
  double t78342;
  double t78343;
  double t78344;
  double t78345;
  double t78346;
  double t78347;
  double t78348;
  double t78349;
  double t78350;
  double t78354;
  double t78355;
  double t78527;
  double t78531;
  double t78534;
  double t78535;
  double t78536;
  double t78537;
  double t78538;
  double t78539;
  double t78540;
  double t78542;
  double t78544;
  double t76033;
  double t76235;
  double t76245;
  double t76250;
  double t76337;
  double t76338;
  double t78030;
  double t78031;
  double t78037;
  double t78038;
  double t78039;
  double t78042;
  double t77530;
  double t77545;
  double t77546;
  double t77547;
  double t77554;
  double t77555;
  double t78452;
  double t78454;
  double t78455;
  double t78456;
  double t78457;
  double t78458;
  double t78459;
  double t78460;
  double t78461;
  double t78462;
  double t78463;
  double t78312;
  double t78313;
  double t78315;
  double t78318;
  double t78319;
  double t78320;
  double t78321;
  double t78329;
  double t78330;
  double t78339;
  double t78340;
  double t78582;
  double t78583;
  double t78584;
  double t78585;
  double t78517;
  double t78518;
  double t78519;
  double t78522;
  double t54104;
  double t55150;
  double t55166;
  double t78021;
  double t78023;
  double t78024;
  double t77516;
  double t77517;
  double t77518;
  double t78446;
  double t78447;
  double t78448;
  double t78450;
  double t78301;
  double t78304;
  double t78308;
  double t78309;
  t15714 = Cos(var1[20]);
  t48110 = Sin(var1[18]);
  t6365 = Cos(var1[18]);
  t48723 = Sin(var1[20]);
  t51150 = Sin(var1[4]);
  t52446 = Cos(var1[4]);
  t52539 = Cos(var1[5]);
  t50542 = 1.000000000009*t48110*t48723;
  t53250 = Sin(var1[5]);
  t55275 = -1.*t15714;
  t55332 = 1. + t55275;
  t56174 = 0.1000003000009*t48723;
  t56736 = 9.e-12*t55332;
  t56152 = 1.000000000009*t55332;
  t56156 = -1. + t56152;
  t56157 = 0.2*t56156;
  t56165 = -0.2000000000048*t55332;
  t56196 = t56157 + t56165 + t56174;
  t57245 = 4.e-7*var1[20];
  t57499 = -1. + t56736;
  t57701 = 0.1*t57499;
  t57756 = 3.000000000027e-7*t55332;
  t57914 = 9.e-18*t48723;
  t75312 = t57245 + t57701 + t57756 + t57914;
  t75811 = -1.2e-12*var1[20];
  t75812 = 0.1000003000009*t55332;
  t75819 = 3.e-12*t48723;
  t75842 = t75811 + t75812 + t75819;
  t55397 = -9.e-12*t55332;
  t55428 = 1. + t55397;
  t55850 = -3.e-6*t55428;
  t55863 = 3.e-6*t55332;
  t55886 = t55850 + t55863;
  t56811 = t56736 + t55275;
  t75866 = -1.000000000009*t55332;
  t75870 = 1. + t75866;
  t57026 = 0.1000003000009*t15714;
  t57031 = -3.000000000027e-12*t48723;
  t57092 = t57026 + t57031;
  t55941 = 9.e-18*t15714;
  t56022 = 3.000009000027e-7*t48723;
  t56150 = 4.e-7 + t55941 + t56022;
  t75943 = -1.000000000009*t56196*t48723;
  t56856 = 3.e-12*t15714;
  t56874 = -1.2e-12 + t56856 + t56174;
  t75982 = 3.e-6*t15714;
  t75983 = t55863 + t75982;
  t75968 = t75870*t57092;
  t75975 = 3.e-6*t15714*t75312;
  t75976 = t15714*t75842;
  t75977 = 3.e-6*t56150*t48723;
  t75978 = t56874*t48723;
  t54251 = 1.000000000009*t6365*t48723;
  t75929 = -1.*t55886*t75312;
  t75942 = -1.*t56811*t75842;
  t26922 = t6365*t15714;
  t50698 = t26922 + t50542;
  t51363 = t50698*t51150;
  t52747 = t15714*t48110;
  t52766 = -1.000000000009*t6365*t48723;
  t52999 = t52747 + t52766;
  t53232 = t52539*t52999;
  t53287 = -3.e-6*t15714*t53250;
  t53449 = t53232 + t53287;
  t53805 = t52446*t53449;
  t54100 = t51363 + t53805;
  t75874 = t75870*t56196;
  t76069 = -4.e-7*var1[20];
  t76090 = 0.1*t55428;
  t76091 = -3.000000000027e-7*t55332;
  t76092 = t75983*t75842;
  t76093 = -9.e-18*t48723;
  t76123 = t76069 + t76090 + t76091 + t76092 + t76093;
  t75877 = 3.e-6*t75312*t48723;
  t75881 = t75842*t48723;
  t54132 = -1.000000000009*t15714*t48110;
  t54349 = t54132 + t54251;
  t54466 = t54349*t51150;
  t54643 = 1.000000000009*t6365*t15714;
  t54801 = t54643 + t50542;
  t54917 = t52539*t54801;
  t54927 = -3.000000000027e-6*t48723*t53250;
  t54947 = t54917 + t54927;
  t55038 = t52446*t54947;
  t55040 = t54466 + t55038;
  t56151 = -1.*t55886*t56150;
  t56222 = -1.000000000009*t15714*t56196;
  t56879 = -1.*t56811*t56874;
  t57132 = -1.000000000009*t57092*t48723;
  t75810 = -3.000000000027e-6*t75312*t48723;
  t76236 = -1.*t75983*t75842;
  t76237 = t57245 + t57701 + t57756 + t76236 + t57914;
  t75850 = -1.000000000009*t75842*t48723;
  t76162 = t56811*t48110;
  t76177 = t76162 + t54251;
  t76139 = t6365*t56811;
  t76142 = -1.000000000009*t48110*t48723;
  t76146 = t76139 + t76142;
  t76361 = -0.2*t48110;
  t76362 = t6365*t75842;
  t76363 = -1.*t48110*t56196;
  t76364 = t76361 + t76362 + t76363;
  t76296 = -1.*t75870*t48110;
  t76298 = t6365*t48723;
  t76299 = t76296 + t76298;
  t76340 = -1. + t6365;
  t76341 = 0.2*t76340;
  t76342 = t48110*t75842;
  t76344 = t6365*t56196;
  t76346 = t76341 + t76342 + t76344;
  t76310 = t6365*t75870;
  t76311 = t48110*t48723;
  t76321 = t76310 + t76311;
  t76383 = t6365*t57092;
  t76384 = t48110*t56874;
  t76387 = t76383 + t76384;
  t76376 = -1.*t48110*t57092;
  t76377 = t6365*t56874;
  t76378 = t76376 + t76377;
  t75984 = t6365*t75983*t51150;
  t76007 = t75983*t52539*t48110;
  t76025 = t76007 + t53250;
  t76026 = t52446*t76025;
  t76027 = t75984 + t76026;
  t76126 = -9.e-18*t15714;
  t76128 = -3.000009000027e-7*t48723;
  t76149 = t76146*t51150;
  t76183 = t52539*t76177;
  t76191 = -1.*t55886*t53250;
  t76221 = t76183 + t76191;
  t76233 = t52446*t76221;
  t76234 = t76149 + t76233;
  t76405 = t75983*t48110*t76346;
  t76408 = t6365*t75983*t76364;
  t76410 = t76069 + t76090 + t76091 + t76405 + t76408 + t76093;
  t76454 = -1.*t75983*t48110*t76346;
  t76455 = -1.*t6365*t75983*t76364;
  t76456 = t57245 + t57701 + t57756 + t76454 + t76455 + t57914;
  t76308 = t76299*t51150;
  t76325 = t52539*t76321;
  t76333 = -3.e-6*t48723*t53250;
  t76334 = t76325 + t76333;
  t76335 = t52446*t76334;
  t76336 = t76308 + t76335;
  t76530 = Sin(var1[3]);
  t76537 = Cos(var1[3]);
  t76533 = t55886*t52539;
  t76534 = t76177*t53250;
  t76535 = t76533 + t76534;
  t76538 = t52446*t76146;
  t76541 = -1.*t51150*t76221;
  t76544 = t76538 + t76541;
  t76554 = 3.e-6*t15714*t52539;
  t76556 = t52999*t53250;
  t76557 = t76554 + t76556;
  t76563 = t52446*t50698;
  t76564 = -1.*t51150*t53449;
  t76566 = t76563 + t76564;
  t76581 = 3.000000000027e-6*t52539*t48723;
  t76591 = t54801*t53250;
  t76596 = t76581 + t76591;
  t76599 = t52446*t54349;
  t76602 = -1.*t51150*t54947;
  t76615 = t76599 + t76602;
  t76621 = 3.e-6*t52539*t48723;
  t76622 = t76321*t53250;
  t76623 = t76621 + t76622;
  t76625 = t52446*t76299;
  t76627 = -1.*t51150*t76334;
  t76628 = t76625 + t76627;
  t76653 = -1.*t52539;
  t76654 = t75983*t48110*t53250;
  t76655 = t76653 + t76654;
  t76474 = t76364*t76146;
  t76660 = t52539*t76346;
  t76661 = -1.*t75312*t53250;
  t76662 = t76660 + t76661;
  t76656 = t52539*t75312;
  t76657 = t76346*t53250;
  t76658 = t76656 + t76657;
  t76481 = -1.*t76364*t76299;
  t76673 = t76655*t76658;
  t76674 = t76025*t76662;
  t76675 = t76408 + t76673 + t76674;
  t76401 = t6365*t75983*t76378;
  t76427 = -1.*t76378*t76299;
  t76429 = -1.*t76364*t50698;
  t76721 = t52539*t76387;
  t76722 = -1.*t56150*t53250;
  t76749 = t76721 + t76722;
  t76689 = t52539*t56150;
  t76700 = t76387*t53250;
  t76712 = t76689 + t76700;
  t76365 = -1.*t76364*t76146;
  t76368 = t76364*t76299;
  t76379 = t76378*t76299;
  t76389 = t76364*t50698;
  t76393 = -1.*t76364*t54349;
  t76394 = -1.*t76378*t76146;
  t76659 = -1.*t76655*t76658;
  t76663 = -1.*t76025*t76662;
  t76664 = t76455 + t76659 + t76663;
  t76490 = -1.*t6365*t75983*t76378;
  t76499 = t76364*t54349;
  t76500 = t76378*t76146;
  t76667 = t76658*t76535;
  t76875 = t76364*t51150;
  t76882 = t52446*t76662;
  t76897 = t76875 + t76882;
  t77062 = t52446*t76364;
  t77063 = -1.*t51150*t76662;
  t77064 = t77062 + t77063;
  t76902 = -1.*t76027*t76897;
  t76909 = t6365*t75983*t52446;
  t76963 = -1.*t51150*t76025;
  t77061 = t76909 + t76963;
  t77065 = -1.*t77061*t77064;
  t77070 = t76659 + t76902 + t77065;
  t76824 = -1.*t76655*t76712;
  t76836 = t76712*t76535;
  t76838 = t76658*t76596;
  t77101 = t76378*t51150;
  t77106 = t52446*t76749;
  t77107 = t77101 + t77106;
  t77117 = t52446*t76378;
  t77122 = -1.*t51150*t76749;
  t77123 = t77117 + t77122;
  t76680 = -1.*t76658*t76623;
  t77145 = t76027*t76897;
  t77155 = t77061*t77064;
  t77157 = t76673 + t77145 + t77155;
  t76713 = t76655*t76712;
  t76756 = -1.*t76658*t76557;
  t76757 = -1.*t76712*t76623;
  t76763 = -1.*t76658*t76535;
  t76815 = -1.*t76712*t76535;
  t76817 = -1.*t76658*t76596;
  t76768 = t76658*t76623;
  t76799 = t76658*t76557;
  t76800 = t76712*t76623;
  t76639 = t76537*t76557;
  t76640 = -1.*t76530*t76566;
  t76641 = t76639 + t76640;
  t76643 = t76537*t76596;
  t76644 = -1.*t76530*t76615;
  t76645 = t76643 + t76644;
  t75851 = t56151 + t56222 + t56879 + t57132 + t75810 + t75850;
  t75864 = 3.e-6*t48723*t75851;
  t75883 = t75874 + t75877 + t75881;
  t75884 = 3.000000000027e-6*t48723*t75883;
  t75944 = t75929 + t75942 + t75943;
  t75950 = 3.e-6*t15714*t75944;
  t75979 = t75968 + t75975 + t75976 + t75977 + t75943 + t75978;
  t75980 = t55886*t75979;
  t75981 = t75864 + t75884 + t75950 + t75980;
  t76124 = 3.e-6*t15714*t76123;
  t76125 = -0.2000000000018*t48723;
  t76127 = t75983*t56874;
  t76129 = -4.e-7 + t76126 + t76127 + t76128;
  t76130 = 3.e-6*t76129*t48723;
  t76131 = t75968 + t76124 + t75975 + t75976 + t76125 + t76130 + t75977 + t75943 + t75978;
  t76635 = t76537*t76535;
  t76636 = -1.*t76530*t76544;
  t76637 = t76635 + t76636;
  t76239 = t55886*t76237;
  t76243 = -0.2*t48723;
  t76244 = t75929 + t76239 + t75942 + t76243 + t75943;
  t76246 = t55397 + t15714;
  t76247 = 0.2*t76246;
  t76248 = 3.e-6*t76123*t48723;
  t76249 = t76247 + t75874 + t76248 + t75877 + t75881;
  t76252 = -0.2*t15714;
  t76255 = -1.*t75983*t56874;
  t76256 = 4.e-7 + t55941 + t76255 + t56022;
  t76257 = t55886*t76256;
  t76258 = 3.000000000027e-6*t76237*t48723;
  t76259 = t76252 + t56151 + t76257 + t56222 + t56879 + t57132 + t75810 + t76258 + t75850;
  t76647 = t76537*t76623;
  t76648 = -1.*t76530*t76628;
  t76649 = t76647 + t76648;
  t76360 = -1.*t76346*t76177;
  t76366 = t75929 + t76360 + t76365;
  t76367 = t50698*t76366;
  t76371 = t76346*t76321;
  t76373 = t75877 + t76368 + t76371;
  t76374 = t54349*t76373;
  t76375 = t76346*t52999;
  t76388 = t76387*t76321;
  t76390 = t75975 + t75977 + t76375 + t76379 + t76388 + t76389;
  t76391 = t76146*t76390;
  t76392 = -1.*t76387*t76177;
  t76395 = -1.*t76346*t54801;
  t76396 = t56151 + t75810 + t76392 + t76393 + t76394 + t76395;
  t76397 = t76299*t76396;
  t76398 = t76367 + t76374 + t76391 + t76397;
  t77526 = t76537*t76655;
  t77528 = -1.*t76530*t77061;
  t77529 = t77526 + t77528;
  t76402 = t75983*t48110*t76387;
  t76403 = -4.e-7 + t76126 + t76401 + t76402 + t76128;
  t76404 = t76403*t76299;
  t76416 = t76410*t50698;
  t76417 = -3.e-6*t15714*t75312;
  t76418 = -3.e-6*t56150*t48723;
  t76420 = -1.*t76346*t52999;
  t76428 = -1.*t76387*t76321;
  t76431 = t76417 + t76418 + t76420 + t76427 + t76428 + t76429;
  t76438 = t6365*t75983*t76431;
  t76447 = t76404 + t76416 + t76438;
  t76471 = t76456*t76146;
  t76472 = t55886*t75312;
  t76473 = t76346*t76177;
  t76475 = t76472 + t76473 + t76474;
  t76476 = t6365*t75983*t76475;
  t76477 = t76471 + t76476;
  t76479 = t76410*t76299;
  t76480 = -3.e-6*t75312*t48723;
  t76482 = -1.*t76346*t76321;
  t76483 = t76480 + t76481 + t76482;
  t76484 = t6365*t75983*t76483;
  t76486 = t76479 + t76484;
  t76488 = t76456*t54349;
  t76492 = -1.*t75983*t48110*t76387;
  t76493 = 4.e-7 + t55941 + t76490 + t76492 + t56022;
  t76494 = t76493*t76146;
  t76495 = t55886*t56150;
  t76496 = 3.000000000027e-6*t75312*t48723;
  t76498 = t76387*t76177;
  t76501 = t76346*t54801;
  t76502 = t76495 + t76496 + t76498 + t76499 + t76500 + t76501;
  t76503 = t6365*t75983*t76502;
  t76504 = t76488 + t76494 + t76503;
  t76638 = 0.05186*t55040*t76637;
  t76642 = 0.05186*t76336*t76641;
  t76646 = 0.05186*t76234*t76645;
  t76650 = 0.05186*t54100*t76649;
  t76651 = t76638 + t76642 + t76646 + t76650;
  t76598 = t76530*t76596;
  t76618 = t76537*t76615;
  t76619 = t76598 + t76618;
  t76536 = t76530*t76535;
  t76545 = t76537*t76544;
  t76552 = t76536 + t76545;
  t76624 = t76530*t76623;
  t76629 = t76537*t76628;
  t76630 = t76624 + t76629;
  t76558 = t76530*t76557;
  t76567 = t76537*t76566;
  t76576 = t76558 + t76567;
  t76665 = t76535*t76664;
  t76666 = t76221*t76662;
  t76668 = t76474 + t76666 + t76667;
  t76669 = t76655*t76668;
  t76670 = t76665 + t76669;
  t76676 = t76623*t76675;
  t76677 = -1.*t76662*t76334;
  t76681 = t76481 + t76677 + t76680;
  t76682 = t76655*t76681;
  t76684 = t76676 + t76682;
  t76688 = t76557*t76675;
  t76750 = t76025*t76749;
  t76751 = t76401 + t76713 + t76750;
  t76752 = t76623*t76751;
  t76754 = -1.*t53449*t76662;
  t76755 = -1.*t76749*t76334;
  t76758 = t76427 + t76429 + t76754 + t76755 + t76756 + t76757;
  t76759 = t76655*t76758;
  t76760 = t76688 + t76752 + t76759;
  t76762 = -1.*t76221*t76662;
  t76765 = t76365 + t76762 + t76763;
  t76766 = t76557*t76765;
  t76767 = t76662*t76334;
  t76792 = t76368 + t76767 + t76768;
  t76793 = t76596*t76792;
  t76796 = t53449*t76662;
  t76798 = t76749*t76334;
  t76801 = t76379 + t76389 + t76796 + t76798 + t76799 + t76800;
  t76806 = t76535*t76801;
  t76810 = -1.*t76221*t76749;
  t76814 = -1.*t76662*t54947;
  t76819 = t76393 + t76394 + t76810 + t76814 + t76815 + t76817;
  t76820 = t76623*t76819;
  t76821 = t76766 + t76793 + t76806 + t76820;
  t76823 = t76596*t76664;
  t76827 = -1.*t76025*t76749;
  t76828 = t76490 + t76824 + t76827;
  t76829 = t76535*t76828;
  t76830 = t76221*t76749;
  t76834 = t76662*t54947;
  t76839 = t76499 + t76500 + t76830 + t76834 + t76836 + t76838;
  t76844 = t76655*t76839;
  t76846 = t76823 + t76829 + t76844;
  t77071 = t76234*t77070;
  t77074 = t76234*t76897;
  t77076 = t76544*t77064;
  t77093 = t76667 + t77074 + t77076;
  t77094 = t76027*t77093;
  t77095 = t77071 + t77094;
  t77100 = t55040*t77070;
  t77116 = -1.*t76027*t77107;
  t77131 = -1.*t77061*t77123;
  t77132 = t76824 + t77116 + t77131;
  t77133 = t76234*t77132;
  t77135 = t76234*t77107;
  t77137 = t76544*t77123;
  t77138 = t76897*t55040;
  t77139 = t77064*t76615;
  t77140 = t76836 + t76838 + t77135 + t77137 + t77138 + t77139;
  t77141 = t76027*t77140;
  t77142 = t77100 + t77133 + t77141;
  t77159 = t76336*t77157;
  t77165 = -1.*t76897*t76336;
  t77166 = -1.*t77064*t76628;
  t77217 = t76680 + t77165 + t77166;
  t77300 = t76027*t77217;
  t77421 = t77159 + t77300;
  t77427 = t54100*t77157;
  t77428 = t76027*t77107;
  t77431 = t77061*t77123;
  t77432 = t76713 + t77428 + t77431;
  t77436 = t76336*t77432;
  t77437 = -1.*t54100*t76897;
  t77439 = -1.*t76566*t77064;
  t77440 = -1.*t77107*t76336;
  t77442 = -1.*t77123*t76628;
  t77443 = t76756 + t76757 + t77437 + t77439 + t77440 + t77442;
  t77444 = t76027*t77443;
  t77445 = t77427 + t77436 + t77444;
  t77451 = -1.*t76234*t76897;
  t77452 = -1.*t76544*t77064;
  t77454 = t76763 + t77451 + t77452;
  t77455 = t54100*t77454;
  t77457 = -1.*t76234*t77107;
  t77458 = -1.*t76544*t77123;
  t77459 = -1.*t76897*t55040;
  t77465 = -1.*t77064*t76615;
  t77468 = t76815 + t76817 + t77457 + t77458 + t77459 + t77465;
  t77474 = t76336*t77468;
  t77475 = t76897*t76336;
  t77477 = t77064*t76628;
  t77479 = t76768 + t77475 + t77477;
  t77480 = t55040*t77479;
  t77481 = t54100*t76897;
  t77482 = t76566*t77064;
  t77484 = t77107*t76336;
  t77486 = t77123*t76628;
  t77496 = t76799 + t76800 + t77481 + t77482 + t77484 + t77486;
  t77500 = t76234*t77496;
  t77502 = t77455 + t77474 + t77480 + t77500;
  t78026 = t76530*t76655;
  t78028 = t76537*t77061;
  t78029 = t78026 + t78028;
  t76553 = 0.05186*t55040*t76552;
  t76579 = 0.05186*t76336*t76576;
  t76620 = 0.05186*t76234*t76619;
  t76631 = 0.05186*t54100*t76630;
  t76632 = t76553 + t76579 + t76620 + t76631;
  t77904 = 0.05186*t76637*t76619;
  t77907 = 0.05186*t76552*t76645;
  t77911 = 0.05186*t76641*t76630;
  t77915 = 0.05186*t76576*t76649;
  t77916 = t77904 + t77907 + t77911 + t77915;
  t78325 = t76336*t77454;
  t78327 = t76234*t77479;
  t78328 = t78325 + t78327;
  t77097 = 0.05186*t54100*t77095;
  t77144 = 0.05186*t76336*t77142;
  t77426 = 0.05186*t55040*t77421;
  t77447 = 0.05186*t76234*t77445;
  t77503 = 0.05186*t76027*t77502;
  t77507 = t77097 + t77144 + t77426 + t77447 + t77503;
  t78271 = 0.05186*t76576*t77095;
  t78274 = 0.05186*t76630*t77142;
  t78275 = 0.05186*t76619*t77421;
  t78276 = 0.05186*t76552*t77445;
  t78277 = 0.05186*t78029*t77502;
  t78289 = t78271 + t78274 + t78275 + t78276 + t78277;
  t78004 = 0.05186*t76641*t77095;
  t78010 = 0.05186*t76649*t77142;
  t78011 = 0.05186*t76645*t77421;
  t78012 = 0.05186*t76637*t77445;
  t78013 = 0.05186*t77529*t77502;
  t78014 = t78004 + t78010 + t78011 + t78012 + t78013;
  t78375 = t76623*t76765;
  t78376 = t76535*t76792;
  t78377 = t78375 + t78376;
  t78331 = -3.e-6*t55332;
  t78332 = -3.e-6*t15714;
  t78333 = t78331 + t78332;
  t78334 = 0.2*t78333;
  t78335 = t55886*t75883;
  t78336 = 3.e-6*t48723*t75944;
  t78337 = t78334 + t78335 + t78336;
  t78351 = t76299*t76366;
  t78352 = t76146*t76373;
  t78353 = t78351 + t78352;
  t76672 = 0.05186*t54100*t76670;
  t76687 = 0.05186*t55040*t76684;
  t76761 = 0.05186*t76234*t76760;
  t76822 = 0.05186*t76027*t76821;
  t76847 = 0.05186*t76336*t76846;
  t76852 = t76672 + t76687 + t76761 + t76822 + t76847;
  t78241 = 0.05186*t76576*t76670;
  t78245 = 0.05186*t76619*t76684;
  t78250 = 0.05186*t76552*t76760;
  t78251 = 0.05186*t78029*t76821;
  t78254 = 0.05186*t76630*t76846;
  t78255 = t78241 + t78245 + t78250 + t78251 + t78254;
  t77950 = 0.05186*t76641*t76670;
  t77951 = 0.05186*t76645*t76684;
  t77952 = 0.05186*t76637*t76760;
  t77959 = 0.05186*t77529*t76821;
  t77965 = 0.05186*t76649*t76846;
  t77972 = t77950 + t77951 + t77952 + t77959 + t77965;
  t78361 = 0.000245*t76596*t76234;
  t78363 = 2.e-6*t76623*t54100;
  t78365 = 0.000245*t76535*t55040;
  t78367 = 2.e-6*t76557*t76336;
  t78368 = 0.05186*t76846*t77095;
  t78369 = 0.05186*t76670*t77142;
  t78370 = 0.05186*t76760*t77421;
  t78371 = 0.05186*t76821*t78328;
  t78374 = 0.05186*t76684*t77445;
  t78378 = 0.05186*t78377*t77502;
  t78379 = t78361 + t78363 + t78365 + t78367 + t78368 + t78369 + t78370 + t78371 + t78374 + t78378;
  t76400 = 0.05186*t76398*t76027;
  t76448 = 0.05186*t76447*t76234;
  t76478 = 0.05186*t76477*t54100;
  t76487 = 0.05186*t76486*t55040;
  t76505 = 0.05186*t76504*t76336;
  t76506 = t76400 + t76448 + t76478 + t76487 + t76505;
  t78045 = 0.05186*t76398*t78029;
  t78046 = 0.05186*t76447*t76552;
  t78047 = 0.05186*t76477*t76576;
  t78048 = 0.05186*t76486*t76619;
  t78051 = 0.05186*t76504*t76630;
  t78052 = t78045 + t78046 + t78047 + t78048 + t78051;
  t77558 = 0.05186*t76398*t77529;
  t77560 = 0.05186*t76447*t76637;
  t77630 = 0.05186*t76477*t76641;
  t77781 = 0.05186*t76486*t76645;
  t77889 = 0.05186*t76504*t76649;
  t77890 = t77558 + t77560 + t77630 + t77781 + t77889;
  t78472 = 2.e-6*t76299*t76557;
  t78476 = 0.000245*t54349*t76535;
  t78480 = 2.e-6*t50698*t76623;
  t78482 = 0.000245*t76146*t76596;
  t78483 = 0.05186*t76504*t76670;
  t78484 = 0.05186*t76447*t76684;
  t78485 = 0.05186*t76398*t78377;
  t78487 = 0.05186*t76486*t76760;
  t78488 = 0.05186*t78353*t76821;
  t78489 = 0.05186*t76477*t76846;
  t78490 = t78472 + t78476 + t78480 + t78482 + t78483 + t78484 + t78485 + t78487 + t78488 + t78489;
  t78342 = 0.000245*t54349*t76234;
  t78343 = 2.e-6*t76299*t54100;
  t78344 = 0.000245*t76146*t55040;
  t78345 = 2.e-6*t50698*t76336;
  t78346 = 0.05186*t76504*t77095;
  t78347 = 0.05186*t76477*t77142;
  t78348 = 0.05186*t76447*t77421;
  t78349 = 0.05186*t76398*t78328;
  t78350 = 0.05186*t76486*t77445;
  t78354 = 0.05186*t78353*t77502;
  t78355 = t78342 + t78343 + t78344 + t78345 + t78346 + t78347 + t78348 + t78349 + t78350 + t78354;
  t78527 = 6.e-12*t15714*t76299;
  t78531 = 0.000245*t55886*t54349;
  t78534 = 7.35000000006615e-10*t48723*t76146;
  t78535 = 6.e-12*t48723*t50698;
  t78536 = 0.05186*t76259*t76477;
  t78537 = 0.05186*t76131*t76486;
  t78538 = 0.05186*t75981*t78353;
  t78539 = 0.05186*t76249*t76447;
  t78540 = 0.05186*t78337*t76398;
  t78542 = 0.05186*t76244*t76504;
  t78544 = t78527 + t78531 + t78534 + t78535 + t78536 + t78537 + t78538 + t78539 + t78540 + t78542;
  t76033 = 0.05186*t75981*t76027;
  t76235 = 0.05186*t76131*t76234;
  t76245 = 0.05186*t76244*t54100;
  t76250 = 0.05186*t76249*t55040;
  t76337 = 0.05186*t76259*t76336;
  t76338 = t76033 + t76235 + t76245 + t76250 + t76337;
  t78030 = 0.05186*t75981*t78029;
  t78031 = 0.05186*t76131*t76552;
  t78037 = 0.05186*t76244*t76576;
  t78038 = 0.05186*t76249*t76619;
  t78039 = 0.05186*t76259*t76630;
  t78042 = t78030 + t78031 + t78037 + t78038 + t78039;
  t77530 = 0.05186*t75981*t77529;
  t77545 = 0.05186*t76131*t76637;
  t77546 = 0.05186*t76244*t76641;
  t77547 = 0.05186*t76249*t76645;
  t77554 = 0.05186*t76259*t76649;
  t77555 = t77530 + t77545 + t77546 + t77547 + t77554;
  t78452 = 6.e-12*t48723*t76557;
  t78454 = 7.35000000006615e-10*t48723*t76535;
  t78455 = 6.e-12*t15714*t76623;
  t78456 = 0.000245*t55886*t76596;
  t78457 = 0.05186*t76259*t76670;
  t78458 = 0.05186*t76131*t76684;
  t78459 = 0.05186*t75981*t78377;
  t78460 = 0.05186*t76249*t76760;
  t78461 = 0.05186*t78337*t76821;
  t78462 = 0.05186*t76244*t76846;
  t78463 = t78452 + t78454 + t78455 + t78456 + t78457 + t78458 + t78459 + t78460 + t78461 + t78462;
  t78312 = 7.35000000006615e-10*t48723*t76234;
  t78313 = 6.e-12*t48723*t54100;
  t78315 = 0.000245*t55886*t55040;
  t78318 = 6.e-12*t15714*t76336;
  t78319 = 0.05186*t76259*t77095;
  t78320 = 0.05186*t76244*t77142;
  t78321 = 0.05186*t76131*t77421;
  t78329 = 0.05186*t75981*t78328;
  t78330 = 0.05186*t76249*t77445;
  t78339 = 0.05186*t78337*t77502;
  t78340 = t78312 + t78313 + t78315 + t78318 + t78319 + t78320 + t78321 + t78329 + t78330 + t78339;
  t78582 = 0.005186015558*t76259;
  t78583 = -6.2232e-14*t76131;
  t78584 = -2.0744e-8*t75981;
  t78585 = t78582 + t78583 + t78584;
  t78517 = -6.2232e-14*t76447;
  t78518 = -2.0744e-8*t76398;
  t78519 = 0.005186015558*t76504;
  t78522 = t78517 + t78518 + t78519;
  t54104 = 0.005186015558*t54100;
  t55150 = -6.2232e-14*t55040;
  t55166 = t54104 + t55150;
  t78021 = 0.005186015558*t76576;
  t78023 = -6.2232e-14*t76619;
  t78024 = t78021 + t78023;
  t77516 = 0.005186015558*t76641;
  t77517 = -6.2232e-14*t76645;
  t77518 = t77516 + t77517;
  t78446 = -6.2232e-14*t76760;
  t78447 = -2.0744e-8*t76821;
  t78448 = 0.005186015558*t76846;
  t78450 = t78446 + t78447 + t78448;
  t78301 = 0.005186015558*t77142;
  t78304 = -6.2232e-14*t77445;
  t78308 = -2.0744e-8*t77502;
  t78309 = t78301 + t78304 + t78308;
  p_output1[0]=var2[20]*(-0.5*(0.10372*t55040*t76234 + 0.10372*t54100*t76336)*var2[0] - 0.5*t76651*var2[1] - 0.5*t76632*var2[2] - 0.5*t77507*var2[3] - 0.5*t76852*var2[4] - 0.5*t76506*var2[5] - 0.5*t76338*var2[18] - 0.5*t55166*var2[20]);
  p_output1[1]=var2[20]*(-0.5*t76651*var2[0] - 0.5*(0.10372*t76637*t76645 + 0.10372*t76641*t76649)*var2[1] - 0.5*t77916*var2[2] - 0.5*t78014*var2[3] - 0.5*t77972*var2[4] - 0.5*t77890*var2[5] - 0.5*t77555*var2[18] - 0.5*t77518*var2[20]);
  p_output1[2]=var2[20]*(-0.5*t76632*var2[0] - 0.5*t77916*var2[1] - 0.5*(0.10372*t76552*t76619 + 0.10372*t76576*t76630)*var2[2] - 0.5*t78289*var2[3] - 0.5*t78255*var2[4] - 0.5*t78052*var2[5] - 0.5*t78042*var2[18] - 0.5*t78024*var2[20]);
  p_output1[3]=var2[20]*(-0.5*t77507*var2[0] - 0.5*t78014*var2[1] - 0.5*t78289*var2[2] - 0.5*(0.00049*t55040*t76234 + 4.e-6*t54100*t76336 + 0.10372*t77095*t77142 + 0.10372*t77421*t77445 + 0.10372*t77502*t78328)*var2[3] - 0.5*t78379*var2[4] - 0.5*t78355*var2[5] - 0.5*t78340*var2[18] - 0.5*t78309*var2[20]);
  p_output1[4]=var2[20]*(-0.5*t76852*var2[0] - 0.5*t77972*var2[1] - 0.5*t78255*var2[2] - 0.5*t78379*var2[3] - 0.5*(0.00049*t76535*t76596 + 4.e-6*t76557*t76623 + 0.10372*t76684*t76760 + 0.10372*t76670*t76846 + 0.10372*t76821*t78377)*var2[4] - 0.5*t78490*var2[5] - 0.5*t78463*var2[18] - 0.5*t78450*var2[20]);
  p_output1[5]=var2[20]*(-0.5*t76506*var2[0] - 0.5*t77890*var2[1] - 0.5*t78052*var2[2] - 0.5*t78355*var2[3] - 0.5*t78490*var2[4] - 0.5*(0.00049*t54349*t76146 + 4.e-6*t50698*t76299 + 0.10372*t76447*t76486 + 0.10372*t76477*t76504 + 0.10372*t76398*t78353)*var2[5] - 0.5*t78544*var2[18] - 0.5*t78522*var2[20]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=var2[20]*(-0.5*t76338*var2[0] - 0.5*t77555*var2[1] - 0.5*t78042*var2[2] - 0.5*t78340*var2[3] - 0.5*t78463*var2[4] - 0.5*t78544*var2[5] - 0.5*(3.6e-17*t15714*t48723 + 1.47000000001323e-9*t48723*t55886 + 0.10372*t76131*t76249 + 0.10372*t76244*t76259 + 0.10372*t75981*t78337)*var2[18] - 0.5*t78585*var2[20]);
  p_output1[19]=0;
  p_output1[20]=(-0.5*t55166*var2[0] - 0.5*t77518*var2[1] - 0.5*t78024*var2[2] - 0.5*t78309*var2[3] - 0.5*t78450*var2[4] - 0.5*t78522*var2[5] - 0.5*t78585*var2[18])*var2[20];
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec21_minitaur.hh"

namespace FrontStance
{

void Ce2_vec21_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
