/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:14:03 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t48756;
  double t48794;
  double t49190;
  double t50393;
  double t50599;
  double t52351;
  double t53225;
  double t53242;
  double t50850;
  double t42739;
  double t50386;
  double t51318;
  double t51560;
  double t52122;
  double t53273;
  double t53619;
  double t54828;
  double t55914;
  double t55931;
  double t55937;
  double t56112;
  double t56289;
  double t56298;
  double t56301;
  double t56330;
  double t34204;
  double t56759;
  double t56995;
  double t57193;
  double t57236;
  double t52247;
  double t55992;
  double t56000;
  double t56025;
  double t56373;
  double t56375;
  double t57243;
  double t12809;
  double t60777;
  double t60954;
  double t61041;
  double t57260;
  double t57265;
  double t57381;
  double t57825;
  double t58827;
  double t61175;
  double t61217;
  double t61322;
  double t62007;
  double t60928;
  double t61019;
  double t61107;
  double t61125;
  double t62607;
  double t62609;
  double t62611;
  double t62630;
  double t62601;
  double t62639;
  double t62655;
  double t62696;
  double t62747;
  double t62749;
  double t62774;
  double t62859;
  double t62863;
  double t62898;
  double t62904;
  double t62605;
  double t62698;
  double t62777;
  double t62843;
  double t56569;
  double t57244;
  double t57249;
  double t57910;
  double t58344;
  double t58357;
  double t58363;
  double t58413;
  double t59647;
  double t59663;
  double t59668;
  double t59670;
  double t59697;
  double t61133;
  double t62060;
  double t62107;
  double t62217;
  double t62257;
  double t62296;
  double t62518;
  double t62532;
  double t62538;
  double t62539;
  double t62548;
  double t62559;
  double t62561;
  double t62848;
  double t62908;
  double t62998;
  double t63007;
  double t63024;
  double t63027;
  double t63031;
  double t63032;
  double t63055;
  double t63058;
  double t63080;
  double t63082;
  double t63102;
  double t63921;
  double t63933;
  double t63964;
  double t64109;
  double t64206;
  double t64213;
  double t64244;
  double t64249;
  double t64258;
  double t64683;
  double t66984;
  double t64585;
  double t64512;
  double t64531;
  double t64543;
  double t64546;
  double t64584;
  double t64643;
  double t64973;
  double t66705;
  double t66998;
  double t67000;
  double t67132;
  double t67133;
  double t67138;
  double t67139;
  double t67181;
  double t67506;
  double t67620;
  double t67621;
  double t67626;
  double t67635;
  double t64506;
  double t66952;
  double t67211;
  double t67636;
  double t67637;
  double t67651;
  double t67652;
  double t67659;
  double t67660;
  double t67835;
  double t67918;
  double t67922;
  double t67927;
  double t67956;
  double t68092;
  double t68103;
  double t68109;
  double t68122;
  double t68170;
  double t68285;
  double t68748;
  double t68768;
  double t68802;
  double t68847;
  double t68855;
  double t68866;
  double t68604;
  double t68687;
  double t68711;
  double t67640;
  double t68432;
  double t68576;
  double t64460;
  double t64461;
  double t64491;
  double t69022;
  double t69024;
  double t69052;
  double t69303;
  double t69459;
  double t69461;
  double t72397;
  double t72922;
  double t72927;
  double t72930;
  double t72931;
  double t73281;
  double t73314;
  double t73315;
  double t73458;
  double t69053;
  double t74322;
  double t74326;
  double t74334;
  double t69219;
  double t69541;
  double t69743;
  double t69889;
  double t70074;
  double t74336;
  double t74347;
  double t74373;
  double t74377;
  double t69065;
  double t69067;
  double t69083;
  double t69229;
  double t69253;
  double t69271;
  double t74506;
  double t74513;
  double t69542;
  double t69544;
  double t69546;
  double t74536;
  double t74538;
  double t69746;
  double t69759;
  double t69760;
  double t74601;
  double t74606;
  double t69893;
  double t69990;
  double t70004;
  double t74676;
  double t74728;
  double t70108;
  double t70110;
  double t70118;
  double t74032;
  double t86242;
  double t86245;
  double t86248;
  double t86680;
  double t86695;
  double t86709;
  double t86713;
  double t86717;
  double t86724;
  double t86725;
  double t86735;
  double t86875;
  double t86877;
  double t86886;
  double t86899;
  double t86906;
  double t86907;
  double t86305;
  double t86613;
  double t86640;
  double t74380;
  double t84444;
  double t84445;
  double t84446;
  double t74484;
  double t87291;
  double t87292;
  double t87293;
  double t87308;
  double t87323;
  double t87337;
  double t87341;
  double t87409;
  double t74518;
  double t87565;
  double t87569;
  double t87581;
  double t87697;
  double t87707;
  double t87711;
  double t87719;
  double t87734;
  double t74612;
  double t74639;
  double t88235;
  double t88239;
  double t88242;
  double t88249;
  double t88254;
  double t88258;
  double t88260;
  double t88266;
  double t88350;
  double t88354;
  double t88355;
  double t88360;
  double t88361;
  double t88362;
  double t88370;
  double t88371;
  double t88373;
  double t88379;
  double t88380;
  double t88381;
  double t88383;
  double t88384;
  double t88385;
  double t88399;
  double t88401;
  double t88402;
  double t88404;
  double t88405;
  double t88406;
  double t88417;
  double t88422;
  double t88427;
  double t88446;
  double t88458;
  double t88463;
  double t74313;
  double t74314;
  double t86644;
  double t87101;
  double t87417;
  double t87555;
  double t88527;
  double t88535;
  double t88537;
  double t88539;
  double t88540;
  double t88543;
  double t74381;
  double t74475;
  double t74485;
  double t74486;
  double t87991;
  double t88109;
  double t74519;
  double t74527;
  double t88228;
  double t88287;
  double t88295;
  double t88299;
  double t74616;
  double t74622;
  double t74648;
  double t74649;
  double t88326;
  double t88331;
  double t88369;
  double t88374;
  double t88375;
  double t88359;
  double t88363;
  double t88367;
  double t88538;
  double t88546;
  double t88344;
  double t88356;
  double t88357;
  double t88555;
  double t88560;
  double t88720;
  double t88722;
  double t88723;
  double t88730;
  double t88732;
  double t88733;
  double t88570;
  double t88581;
  double t88626;
  double t88632;
  double t88657;
  double t88665;
  double t88689;
  double t88695;
  double t88901;
  double t88893;
  double t88916;
  double t88920;
  double t88903;
  double t88904;
  double t88894;
  double t88897;
  double t86274;
  double t86278;
  double t86282;
  double t88940;
  double t88946;
  double t88951;
  double t87831;
  double t87833;
  double t87854;
  double t88984;
  double t89001;
  double t88988;
  double t88990;
  double t88991;
  double t88993;
  double t88996;
  double t89003;
  double t89004;
  double t89006;
  double t89007;
  double t89013;
  double t89015;
  double t89017;
  double t89018;
  double t89028;
  double t88942;
  double t88943;
  double t88949;
  double t88950;
  double t88952;
  double t88953;
  double t88960;
  double t88999;
  double t89008;
  double t89039;
  double t89041;
  double t89043;
  double t89048;
  double t89049;
  double t89050;
  double t89054;
  double t89055;
  double t89057;
  double t89059;
  double t88970;
  double t88975;
  double t88977;
  double t88978;
  double t88979;
  double t88981;
  double t88982;
  double t88906;
  double t88907;
  double t88914;
  double t88918;
  double t88919;
  double t88923;
  double t88925;
  double t88926;
  double t88931;
  double t88932;
  double t88933;
  double t88935;
  double t87883;
  double t87886;
  double t87929;
  double t89103;
  double t89104;
  double t89106;
  double t89107;
  double t89110;
  double t89113;
  double t89118;
  double t89121;
  double t88165;
  double t88212;
  double t88221;
  double t88311;
  double t88312;
  double t88313;
  double t89067;
  double t89068;
  double t89069;
  double t89070;
  double t89074;
  double t89078;
  double t89080;
  double t89082;
  double t89351;
  double t89355;
  double t89363;
  double t89366;
  double t89383;
  double t89391;
  double t89392;
  double t89393;
  double t88318;
  double t88320;
  double t88321;
  double t89544;
  double t89546;
  double t89547;
  double t89548;
  double t89552;
  double t89554;
  double t89555;
  double t89557;
  double t89558;
  double t89559;
  double t89560;
  double t89562;
  double t89563;
  double t89565;
  double t89567;
  double t89569;
  double t89572;
  double t89575;
  double t89576;
  double t89577;
  double t89578;
  double t89579;
  double t89632;
  double t89633;
  double t89635;
  double t89637;
  double t89647;
  double t89648;
  double t89651;
  double t89655;
  double t89657;
  double t89660;
  double t89661;
  double t89664;
  double t89667;
  double t89668;
  double t89674;
  double t89684;
  double t89686;
  double t89695;
  double t89700;
  double t89701;
  double t89703;
  double t89706;
  double t89735;
  double t89736;
  double t89737;
  double t89739;
  double t89742;
  double t89745;
  double t89746;
  double t89749;
  double t89751;
  double t89755;
  double t89756;
  double t89758;
  double t89760;
  double t89762;
  double t89764;
  double t89766;
  double t89767;
  double t89768;
  double t89770;
  double t89772;
  double t89773;
  double t89783;
  double t89810;
  double t89811;
  double t89814;
  double t89823;
  double t89828;
  double t89829;
  double t89838;
  double t89839;
  double t89841;
  double t89860;
  double t89861;
  double t89865;
  double t89869;
  double t89870;
  double t89871;
  double t89879;
  double t89880;
  double t89881;
  double t89883;
  double t89885;
  double t89886;
  double t89898;
  double t89903;
  double t89912;
  double t89918;
  double t89919;
  double t89920;
  double t89042;
  double t89064;
  double t89092;
  double t89101;
  double t89959;
  double t89961;
  double t89962;
  double t89964;
  double t89966;
  double t89970;
  double t89132;
  double t89135;
  double t89350;
  double t89438;
  double t89488;
  double t89493;
  double t89499;
  double t89508;
  double t89809;
  double t89818;
  double t89819;
  double t89822;
  double t89831;
  double t89833;
  double t89836;
  double t89842;
  double t89844;
  double t89963;
  double t89972;
  double t89976;
  double t89978;
  double t90049;
  double t90052;
  double t90053;
  double t90055;
  double t90056;
  double t90058;
  double t89998;
  double t90002;
  double t90007;
  double t90010;
  double t90022;
  double t90024;
  double t90031;
  double t90034;
  t48756 = Cos(var1[21]);
  t48794 = -1.*t48756;
  t49190 = 1. + t48794;
  t50393 = 3.e-6*t49190;
  t50599 = Sin(var1[21]);
  t52351 = Cos(var1[19]);
  t53225 = -1.*t52351;
  t53242 = 1. + t53225;
  t50850 = 3.e-6*t50599;
  t42739 = Sin(var1[19]);
  t50386 = 1.000000000009*t49190;
  t51318 = t50393 + t50850;
  t51560 = 3.e-6*t51318;
  t52122 = -1. + t50386 + t51560;
  t53273 = -9.e-12*t49190;
  t53619 = -3.e-6*t50599;
  t54828 = t50393 + t53619;
  t55914 = 3.e-6*t54828;
  t55931 = -1.*t50599;
  t55937 = t53273 + t55914 + t55931;
  t56112 = -1.8e-11*t49190;
  t56289 = 1. + t56112;
  t56298 = 3.e-6*t56289;
  t56301 = -3.e-6*t49190;
  t56330 = t56298 + t56301 + t50850;
  t34204 = Cos(var1[5]);
  t56759 = -1.*t42739*t52122;
  t56995 = t52351*t55937;
  t57193 = 3.e-6*t53242*t56330;
  t57236 = t56759 + t56995 + t57193;
  t52247 = 3.e-6*t42739*t52122;
  t55992 = 3.e-6*t53242*t55937;
  t56000 = -9.e-12*t53242;
  t56025 = 1. + t56000;
  t56373 = t56025*t56330;
  t56375 = t52247 + t55992 + t56373;
  t57243 = Sin(var1[5]);
  t12809 = Sin(var1[3]);
  t60777 = -1. + t50386 + t55914;
  t60954 = t56298 + t56301 + t53619;
  t61041 = t53273 + t51560 + t50599;
  t57260 = Cos(var1[3]);
  t57265 = Cos(var1[4]);
  t57381 = -1.000000000009*t53242;
  t57825 = 1. + t57381;
  t58827 = Sin(var1[4]);
  t61175 = t52351*t60777;
  t61217 = 3.e-6*t53242*t60954;
  t61322 = -1.*t42739*t61041;
  t62007 = t61175 + t61217 + t61322;
  t60928 = 3.e-6*t53242*t60777;
  t61019 = t56025*t60954;
  t61107 = 3.e-6*t42739*t61041;
  t61125 = t60928 + t61019 + t61107;
  t62607 = -1.000000000009*t49190;
  t62609 = 1. + t62607;
  t62611 = 3.e-6*t62609;
  t62630 = 9.e-12*t49190;
  t62601 = 1. + t56112 + t55914 + t51560;
  t62639 = t62630 + t55931;
  t62655 = 3.e-6*t62639;
  t62696 = t62611 + t50393 + t62655 + t50850;
  t62747 = t62630 + t50599;
  t62749 = 3.e-6*t62747;
  t62774 = t62611 + t50393 + t53619 + t62749;
  t62859 = 3.e-6*t53242*t62601;
  t62863 = -1.*t42739*t62696;
  t62898 = t52351*t62774;
  t62904 = t62859 + t62863 + t62898;
  t62605 = t56025*t62601;
  t62698 = 3.e-6*t42739*t62696;
  t62777 = 3.e-6*t53242*t62774;
  t62843 = t62605 + t62698 + t62777;
  t56569 = t34204*t56375;
  t57244 = t57236*t57243;
  t57249 = t56569 + t57244;
  t57910 = t57825*t52122;
  t58344 = t42739*t55937;
  t58357 = -3.e-6*t42739*t56330;
  t58363 = t57910 + t58344 + t58357;
  t58413 = t57265*t58363;
  t59647 = t34204*t57236;
  t59663 = -1.*t56375*t57243;
  t59668 = t59647 + t59663;
  t59670 = -1.*t58827*t59668;
  t59697 = t58413 + t59670;
  t61133 = t34204*t61125;
  t62060 = t62007*t57243;
  t62107 = t61133 + t62060;
  t62217 = t42739*t60777;
  t62257 = -3.e-6*t42739*t60954;
  t62296 = t57825*t61041;
  t62518 = t62217 + t62257 + t62296;
  t62532 = t57265*t62518;
  t62538 = t34204*t62007;
  t62539 = -1.*t61125*t57243;
  t62548 = t62538 + t62539;
  t62559 = -1.*t58827*t62548;
  t62561 = t62532 + t62559;
  t62848 = t34204*t62843;
  t62908 = t62904*t57243;
  t62998 = t62848 + t62908;
  t63007 = -3.e-6*t42739*t62601;
  t63024 = t57825*t62696;
  t63027 = t42739*t62774;
  t63031 = t63007 + t63024 + t63027;
  t63032 = t57265*t63031;
  t63055 = t34204*t62904;
  t63058 = -1.*t62843*t57243;
  t63080 = t63055 + t63058;
  t63082 = -1.*t58827*t63080;
  t63102 = t63032 + t63082;
  t63921 = -1.*t58363*t58827;
  t63933 = -1.*t57265*t59668;
  t63964 = t63921 + t63933;
  t64109 = -1.*t62518*t58827;
  t64206 = -1.*t57265*t62548;
  t64213 = t64109 + t64206;
  t64244 = -1.*t63031*t58827;
  t64249 = -1.*t57265*t63080;
  t64258 = t64244 + t64249;
  t64683 = t56301 + t50850;
  t66984 = 3.e-13*var1[21];
  t64585 = t56301 + t53619;
  t64512 = 1.e-7*var1[21];
  t64531 = 1.8e-11*t49190;
  t64543 = -1. + t64531;
  t64546 = 0.1*t64543;
  t64584 = 5.4e-18*t49190;
  t64643 = -3.e-12*t64585;
  t64973 = 0.100000000003*t64683;
  t66705 = t64512 + t64546 + t64584 + t64643 + t64973;
  t66998 = -1. + t50386;
  t67000 = 0.2*t66998;
  t67132 = -0.2000000000048*t49190;
  t67133 = t53273 + t55931;
  t67138 = 0.100000000003*t67133;
  t67139 = 0.1000003*t64683;
  t67181 = t66984 + t67000 + t67132 + t67138 + t67139;
  t67506 = 0.1000000000039*t49190;
  t67620 = 0.1000003*t64585;
  t67621 = t53273 + t50599;
  t67626 = -3.e-12*t67621;
  t67635 = t66984 + t67506 + t67620 + t67626;
  t64506 = 0.2000000000018*t42739;
  t66952 = -3.e-6*t42739*t66705;
  t67211 = t42739*t67181;
  t67636 = t57825*t67635;
  t67637 = t64506 + t66952 + t67211 + t67636;
  t67651 = -1.8e-12*t53242;
  t67652 = -1. + t52351;
  t67659 = 0.2*t67652;
  t67660 = 3.e-6*t53242*t66705;
  t67835 = t52351*t67181;
  t67918 = -1.*t42739*t67635;
  t67922 = t67651 + t67659 + t67660 + t67835 + t67918;
  t67927 = t34204*t67922;
  t67956 = 6.000000000054e-7*t53242;
  t68092 = t56025*t66705;
  t68103 = 3.e-6*t53242*t67181;
  t68109 = 3.e-6*t42739*t67635;
  t68122 = t67956 + t68092 + t68103 + t68109;
  t68170 = -1.*t68122*t57243;
  t68285 = t67927 + t68170;
  t68748 = t57265*t67637;
  t68768 = -1.*t58827*t68285;
  t68802 = t68748 + t68768;
  t68847 = t58363*t58827;
  t68855 = t57265*t59668;
  t68866 = t68847 + t68855;
  t68604 = t67637*t58827;
  t68687 = t57265*t68285;
  t68711 = t68604 + t68687;
  t67640 = -1.*t67637*t58827;
  t68432 = -1.*t57265*t68285;
  t68576 = t67640 + t68432;
  t64460 = t62518*t58827;
  t64461 = t57265*t62548;
  t64491 = t64460 + t64461;
  t69022 = t34204*t68122;
  t69024 = t67922*t57243;
  t69052 = t69022 + t69024;
  t69303 = t63031*t58827;
  t69459 = t57265*t63080;
  t69461 = t69303 + t69459;
  t72397 = -1.*t34204*t56375;
  t72922 = -1.*t57236*t57243;
  t72927 = t72397 + t72922;
  t72930 = -1.*t34204*t61125;
  t72931 = -1.*t62007*t57243;
  t73281 = t72930 + t72931;
  t73314 = -1.*t34204*t62843;
  t73315 = -1.*t62904*t57243;
  t73458 = t73314 + t73315;
  t69053 = -1.*t57249*t69052;
  t74322 = -1.*t34204*t68122;
  t74326 = -1.*t67922*t57243;
  t74334 = t74322 + t74326;
  t69219 = t62107*t69052;
  t69541 = t57249*t69052;
  t69743 = -1.*t69052*t62998;
  t69889 = -1.*t62107*t69052;
  t70074 = t69052*t62998;
  t74336 = -1.*t59668*t69052;
  t74347 = -1.*t57249*t68285;
  t74373 = t62548*t69052;
  t74377 = t62107*t68285;
  t69065 = -1.*t68866*t68711;
  t69067 = -1.*t59697*t68802;
  t69083 = t69053 + t69065 + t69067;
  t69229 = t64491*t68711;
  t69253 = t62561*t68802;
  t69271 = t69219 + t69229 + t69253;
  t74506 = t59668*t69052;
  t74513 = t57249*t68285;
  t69542 = t68866*t68711;
  t69544 = t59697*t68802;
  t69546 = t69541 + t69542 + t69544;
  t74536 = -1.*t69052*t63080;
  t74538 = -1.*t68285*t62998;
  t69746 = -1.*t68711*t69461;
  t69759 = -1.*t68802*t63102;
  t69760 = t69743 + t69746 + t69759;
  t74601 = -1.*t62548*t69052;
  t74606 = -1.*t62107*t68285;
  t69893 = -1.*t64491*t68711;
  t69990 = -1.*t62561*t68802;
  t70004 = t69889 + t69893 + t69990;
  t74676 = t69052*t63080;
  t74728 = t68285*t62998;
  t70108 = t68711*t69461;
  t70110 = t68802*t63102;
  t70118 = t70074 + t70108 + t70110;
  t74032 = -1.*t58363*t67637;
  t86242 = -3.e-6*t52351*t60954;
  t86245 = -1.000000000009*t42739*t61041;
  t86248 = t61175 + t86242 + t86245;
  t86680 = -0.2000000000018*t42739;
  t86695 = 3.e-6*t42739*t66705;
  t86709 = -1.*t42739*t67181;
  t86713 = -1.*t52351*t67635;
  t86717 = t86680 + t86695 + t86709 + t86713;
  t86724 = 6.000000000054e-7*t42739;
  t86725 = -9.e-12*t42739*t66705;
  t86735 = 3.e-6*t42739*t67181;
  t86875 = 3.e-6*t52351*t67635;
  t86877 = t86724 + t86725 + t86735 + t86875;
  t86886 = 0.2000000000018*t52351;
  t86899 = -3.e-6*t52351*t66705;
  t86906 = -1.000000000009*t42739*t67635;
  t86907 = t86886 + t86899 + t67835 + t86906;
  t86305 = -1.000000000009*t42739*t52122;
  t86613 = -3.e-6*t52351*t56330;
  t86640 = t86305 + t56995 + t86613;
  t74380 = t62518*t67637;
  t84444 = -3.e-6*t52351*t62601;
  t84445 = -1.000000000009*t42739*t62696;
  t84446 = t84444 + t84445 + t62898;
  t74484 = t58363*t67637;
  t87291 = -1.*t52351*t52122;
  t87292 = -1.*t42739*t55937;
  t87293 = 3.e-6*t42739*t56330;
  t87308 = t87291 + t87292 + t87293;
  t87323 = 3.e-6*t52351*t52122;
  t87337 = 3.e-6*t42739*t55937;
  t87341 = -9.e-12*t42739*t56330;
  t87409 = t87323 + t87337 + t87341;
  t74518 = -1.*t67637*t63031;
  t87565 = -1.*t42739*t60777;
  t87569 = 3.e-6*t42739*t60954;
  t87581 = -1.*t52351*t61041;
  t87697 = t87565 + t87569 + t87581;
  t87707 = 3.e-6*t42739*t60777;
  t87711 = -9.e-12*t42739*t60954;
  t87719 = 3.e-6*t52351*t61041;
  t87734 = t87707 + t87711 + t87719;
  t74612 = -1.*t62518*t67637;
  t74639 = t67637*t63031;
  t88235 = 3.e-6*t42739*t62601;
  t88239 = -1.*t52351*t62696;
  t88242 = -1.*t42739*t62774;
  t88249 = t88235 + t88239 + t88242;
  t88254 = -9.e-12*t42739*t62601;
  t88258 = 3.e-6*t52351*t62696;
  t88260 = 3.e-6*t42739*t62774;
  t88266 = t88254 + t88258 + t88260;
  t88350 = t34204*t87308;
  t88354 = -1.*t87409*t57243;
  t88355 = t88350 + t88354;
  t88360 = t34204*t87697;
  t88361 = -1.*t87734*t57243;
  t88362 = t88360 + t88361;
  t88370 = t34204*t88249;
  t88371 = -1.*t88266*t57243;
  t88373 = t88370 + t88371;
  t88379 = t34204*t87409;
  t88380 = t87308*t57243;
  t88381 = t88379 + t88380;
  t88383 = t57265*t86640;
  t88384 = -1.*t58827*t88355;
  t88385 = t88383 + t88384;
  t88399 = t34204*t87734;
  t88401 = t87697*t57243;
  t88402 = t88399 + t88401;
  t88404 = t57265*t86248;
  t88405 = -1.*t58827*t88362;
  t88406 = t88404 + t88405;
  t88417 = t34204*t88266;
  t88422 = t88249*t57243;
  t88427 = t88417 + t88422;
  t88446 = t57265*t84446;
  t88458 = -1.*t58827*t88373;
  t88463 = t88446 + t88458;
  t74313 = -1.*t59668*t68285;
  t74314 = t74032 + t69053 + t74313;
  t86644 = -1.*t86640*t67637;
  t87101 = -1.*t58363*t86907;
  t87417 = t86248*t67637;
  t87555 = t62518*t86907;
  t88527 = t34204*t86877;
  t88535 = t86717*t57243;
  t88537 = t88527 + t88535;
  t88539 = t34204*t86717;
  t88540 = -1.*t86877*t57243;
  t88543 = t88539 + t88540;
  t74381 = t62548*t68285;
  t74475 = t74380 + t69219 + t74381;
  t74485 = t59668*t68285;
  t74486 = t74484 + t69541 + t74485;
  t87991 = t86640*t67637;
  t88109 = t58363*t86907;
  t74519 = -1.*t68285*t63080;
  t74527 = t74518 + t74519 + t69743;
  t88228 = -1.*t67637*t84446;
  t88287 = -1.*t86907*t63031;
  t88295 = -1.*t86248*t67637;
  t88299 = -1.*t62518*t86907;
  t74616 = -1.*t62548*t68285;
  t74622 = t74612 + t69889 + t74616;
  t74648 = t68285*t63080;
  t74649 = t74639 + t74648 + t70074;
  t88326 = t67637*t84446;
  t88331 = t86907*t63031;
  t88369 = t84446*t58827;
  t88374 = t57265*t88373;
  t88375 = t88369 + t88374;
  t88359 = t86248*t58827;
  t88363 = t57265*t88362;
  t88367 = t88359 + t88363;
  t88538 = -1.*t57249*t88537;
  t88546 = -1.*t88381*t69052;
  t88344 = t86640*t58827;
  t88356 = t57265*t88355;
  t88357 = t88344 + t88356;
  t88555 = t62107*t88537;
  t88560 = t88402*t69052;
  t88720 = t86907*t58827;
  t88722 = t57265*t88543;
  t88723 = t88720 + t88722;
  t88730 = t57265*t86907;
  t88732 = -1.*t58827*t88543;
  t88733 = t88730 + t88732;
  t88570 = t57249*t88537;
  t88581 = t88381*t69052;
  t88626 = -1.*t88537*t62998;
  t88632 = -1.*t69052*t88427;
  t88657 = -1.*t62107*t88537;
  t88665 = -1.*t88402*t69052;
  t88689 = t88537*t62998;
  t88695 = t69052*t88427;
  t88901 = 3.e-6*t48756;
  t88893 = -3.e-6*t48756;
  t88916 = 9.e-12*t50599;
  t88920 = -2.7e-17*t50599;
  t88903 = t88901 + t50850;
  t88904 = 3.e-6*t88903;
  t88894 = t88893 + t50850;
  t88897 = 3.e-6*t88894;
  t86274 = -1.*t57236*t67922;
  t86278 = -1.*t56375*t68122;
  t86282 = t74032 + t86274 + t86278;
  t88940 = -3.000000000054e-6*t50599;
  t88946 = -9.e-12*t50599;
  t88951 = 1.000000000009*t50599;
  t87831 = t62007*t67922;
  t87833 = t61125*t68122;
  t87854 = t74380 + t87831 + t87833;
  t88984 = t88901 + t53619;
  t89001 = t88893 + t53619;
  t88988 = 0.1000003*t88984;
  t88990 = t48794 + t88946;
  t88991 = 0.100000000003*t88990;
  t88993 = -3.000000000027e-12*t50599;
  t88996 = 3.e-13 + t88988 + t88991 + t88993;
  t89003 = -3.e-12*t89001;
  t89004 = 0.100000000003*t88984;
  t89006 = 1.8000054e-12*t50599;
  t89007 = 1.e-7 + t89003 + t89004 + t89006;
  t89013 = 0.1000003*t89001;
  t89015 = t48756 + t88946;
  t89017 = -3.e-12*t89015;
  t89018 = 0.1000000000039*t50599;
  t89028 = 3.e-13 + t89013 + t89017 + t89018;
  t88942 = t88893 + t88940;
  t88943 = -3.e-6*t42739*t88942;
  t88949 = t48756 + t88904 + t88946;
  t88950 = t57825*t88949;
  t88952 = t88897 + t88951;
  t88953 = t42739*t88952;
  t88960 = t88943 + t88950 + t88953;
  t88999 = t42739*t88996;
  t89008 = -3.e-6*t42739*t89007;
  t89039 = t57825*t89028;
  t89041 = t88999 + t89008 + t89039;
  t89043 = t52351*t88996;
  t89048 = 3.e-6*t53242*t89007;
  t89049 = -1.*t42739*t89028;
  t89050 = t89043 + t89048 + t89049;
  t89054 = 3.e-6*t53242*t88996;
  t89055 = t56025*t89007;
  t89057 = 3.e-6*t42739*t89028;
  t89059 = t89054 + t89055 + t89057;
  t88970 = t88901 + t88940;
  t88975 = -3.e-6*t42739*t88970;
  t88977 = t48794 + t88897 + t88946;
  t88978 = t42739*t88977;
  t88979 = t88904 + t88951;
  t88981 = t57825*t88979;
  t88982 = t88975 + t88978 + t88981;
  t88906 = -1.8e-11*t50599;
  t88907 = t88897 + t88904 + t88906;
  t88914 = -3.e-6*t42739*t88907;
  t88918 = t48794 + t88916;
  t88919 = 3.e-6*t88918;
  t88923 = t88901 + t88919 + t88920;
  t88925 = t57825*t88923;
  t88926 = t48756 + t88916;
  t88931 = 3.e-6*t88926;
  t88932 = t88893 + t88931 + t88920;
  t88933 = t42739*t88932;
  t88935 = t88914 + t88925 + t88933;
  t87883 = t57236*t67922;
  t87886 = t56375*t68122;
  t87929 = t74484 + t87883 + t87886;
  t89103 = 3.e-6*t53242*t88970;
  t89104 = t52351*t88977;
  t89106 = -1.*t42739*t88979;
  t89107 = t89103 + t89104 + t89106;
  t89110 = t56025*t88970;
  t89113 = 3.e-6*t53242*t88977;
  t89118 = 3.e-6*t42739*t88979;
  t89121 = t89110 + t89113 + t89118;
  t88165 = -1.*t68122*t62843;
  t88212 = -1.*t67922*t62904;
  t88221 = t88165 + t88212 + t74518;
  t88311 = -1.*t62007*t67922;
  t88312 = -1.*t61125*t68122;
  t88313 = t74612 + t88311 + t88312;
  t89067 = 3.e-6*t53242*t88942;
  t89068 = -1.*t42739*t88949;
  t89069 = t52351*t88952;
  t89070 = t89067 + t89068 + t89069;
  t89074 = t56025*t88942;
  t89078 = 3.e-6*t42739*t88949;
  t89080 = 3.e-6*t53242*t88952;
  t89082 = t89074 + t89078 + t89080;
  t89351 = 3.e-6*t53242*t88907;
  t89355 = -1.*t42739*t88923;
  t89363 = t52351*t88932;
  t89366 = t89351 + t89355 + t89363;
  t89383 = t56025*t88907;
  t89391 = 3.e-6*t42739*t88923;
  t89392 = 3.e-6*t53242*t88932;
  t89393 = t89383 + t89391 + t89392;
  t88318 = t68122*t62843;
  t88320 = t67922*t62904;
  t88321 = t88318 + t88320 + t74639;
  t89544 = -1.*t67181*t55937;
  t89546 = -1.*t66705*t56330;
  t89547 = -1.*t52122*t67635;
  t89548 = t89544 + t89546 + t89547;
  t89552 = t66705*t88942;
  t89554 = t60777*t88996;
  t89555 = t60954*t89007;
  t89557 = t89028*t61041;
  t89558 = t67181*t88952;
  t89559 = t88949*t67635;
  t89560 = t89552 + t89554 + t89555 + t89557 + t89558 + t89559;
  t89562 = t60777*t67181;
  t89563 = t66705*t60954;
  t89565 = t61041*t67635;
  t89567 = t89562 + t89563 + t89565;
  t89569 = -1.*t66705*t88970;
  t89572 = -1.*t67181*t88977;
  t89575 = -1.*t55937*t88996;
  t89576 = -1.*t89007*t56330;
  t89577 = -1.*t52122*t89028;
  t89578 = -1.*t88979*t67635;
  t89579 = t89569 + t89572 + t89575 + t89576 + t89577 + t89578;
  t89632 = t67181*t55937;
  t89633 = t66705*t56330;
  t89635 = t52122*t67635;
  t89637 = t89632 + t89633 + t89635;
  t89647 = t66705*t88970;
  t89648 = t67181*t88977;
  t89651 = t55937*t88996;
  t89655 = t89007*t56330;
  t89657 = t52122*t89028;
  t89660 = t88979*t67635;
  t89661 = t89647 + t89648 + t89651 + t89655 + t89657 + t89660;
  t89664 = -1.*t66705*t62601;
  t89667 = -1.*t62696*t67635;
  t89668 = -1.*t67181*t62774;
  t89674 = t89664 + t89667 + t89668;
  t89684 = -1.*t66705*t88907;
  t89686 = -1.*t67181*t88932;
  t89695 = -1.*t62601*t89007;
  t89700 = -1.*t62696*t89028;
  t89701 = -1.*t88923*t67635;
  t89703 = -1.*t88996*t62774;
  t89706 = t89684 + t89686 + t89695 + t89700 + t89701 + t89703;
  t89735 = -1.*t66705*t88942;
  t89736 = -1.*t60777*t88996;
  t89737 = -1.*t60954*t89007;
  t89739 = -1.*t89028*t61041;
  t89742 = -1.*t67181*t88952;
  t89745 = -1.*t88949*t67635;
  t89746 = t89735 + t89736 + t89737 + t89739 + t89742 + t89745;
  t89749 = -1.*t60777*t67181;
  t89751 = -1.*t66705*t60954;
  t89755 = -1.*t61041*t67635;
  t89756 = t89749 + t89751 + t89755;
  t89758 = t66705*t62601;
  t89760 = t62696*t67635;
  t89762 = t67181*t62774;
  t89764 = t89758 + t89760 + t89762;
  t89766 = t66705*t88907;
  t89767 = t67181*t88932;
  t89768 = t62601*t89007;
  t89770 = t62696*t89028;
  t89772 = t88923*t67635;
  t89773 = t88996*t62774;
  t89783 = t89766 + t89767 + t89768 + t89770 + t89772 + t89773;
  t89810 = t34204*t89366;
  t89811 = -1.*t89393*t57243;
  t89814 = t89810 + t89811;
  t89823 = t34204*t89070;
  t89828 = -1.*t89082*t57243;
  t89829 = t89823 + t89828;
  t89838 = t34204*t89107;
  t89839 = -1.*t89121*t57243;
  t89841 = t89838 + t89839;
  t89860 = t34204*t89393;
  t89861 = t89366*t57243;
  t89865 = t89860 + t89861;
  t89869 = t57265*t88935;
  t89870 = -1.*t58827*t89814;
  t89871 = t89869 + t89870;
  t89879 = t34204*t89082;
  t89880 = t89070*t57243;
  t89881 = t89879 + t89880;
  t89883 = t57265*t88960;
  t89885 = -1.*t58827*t89829;
  t89886 = t89883 + t89885;
  t89898 = t34204*t89121;
  t89903 = t89107*t57243;
  t89912 = t89898 + t89903;
  t89918 = t57265*t88982;
  t89919 = -1.*t58827*t89841;
  t89920 = t89918 + t89919;
  t89042 = t89041*t62518;
  t89064 = t88960*t67637;
  t89092 = -1.*t58363*t89041;
  t89101 = -1.*t88982*t67637;
  t89959 = t34204*t89059;
  t89961 = t89050*t57243;
  t89962 = t89959 + t89961;
  t89964 = t34204*t89050;
  t89966 = -1.*t89059*t57243;
  t89970 = t89964 + t89966;
  t89132 = t58363*t89041;
  t89135 = t88982*t67637;
  t89350 = -1.*t88935*t67637;
  t89438 = -1.*t89041*t63031;
  t89488 = -1.*t89041*t62518;
  t89493 = -1.*t88960*t67637;
  t89499 = t88935*t67637;
  t89508 = t89041*t63031;
  t89809 = t88935*t58827;
  t89818 = t57265*t89814;
  t89819 = t89809 + t89818;
  t89822 = t88960*t58827;
  t89831 = t57265*t89829;
  t89833 = t89822 + t89831;
  t89836 = t88982*t58827;
  t89842 = t57265*t89841;
  t89844 = t89836 + t89842;
  t89963 = t89962*t62107;
  t89972 = t89881*t69052;
  t89976 = -1.*t57249*t89962;
  t89978 = -1.*t89912*t69052;
  t90049 = t89041*t58827;
  t90052 = t57265*t89970;
  t90053 = t90049 + t90052;
  t90055 = t57265*t89041;
  t90056 = -1.*t58827*t89970;
  t90058 = t90055 + t90056;
  t89998 = t57249*t89962;
  t90002 = t89912*t69052;
  t90007 = -1.*t89865*t69052;
  t90010 = -1.*t89962*t62998;
  t90022 = -1.*t89962*t62107;
  t90024 = -1.*t89881*t69052;
  t90031 = t89865*t69052;
  t90034 = t89962*t62998;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-1.28999742002322e-8*(-1.*t12809*t57249 - 1.*t57260*t59697) - 0.004299987100129*(-1.*t12809*t62107 - 1.*t57260*t62561) - 4.3e-9*(-1.*t12809*t62998 - 1.*t57260*t63102))*var2[1] - 0.5*(-1.28999742002322e-8*(t57249*t57260 - 1.*t12809*t59697) - 0.004299987100129*(t57260*t62107 - 1.*t12809*t62561) - 4.3e-9*(t57260*t62998 - 1.*t12809*t63102))*var2[2])*var2[21];
  p_output1[4]=(-0.5*(-1.28999742002322e-8*t59697 - 0.004299987100129*t62561 - 4.3e-9*t63102)*var2[0] - 0.5*(1.28999742002322e-8*t12809*t63964 + 0.004299987100129*t12809*t64213 + 4.3e-9*t12809*t64258)*var2[1] - 0.5*(-1.28999742002322e-8*t57260*t63964 - 0.004299987100129*t57260*t64213 - 4.3e-9*t57260*t64258)*var2[2] - 0.5*(-0.000271000000004878*t63102 - 4.3e-9*((t62561*t68576 + t62561*t68711 + t64213*t68802 + t64491*t68802)*t68866 + t64491*(-1.*t59697*t68576 - 1.*t59697*t68711 - 1.*t63964*t68802 - 1.*t68802*t68866) + t62561*t69083 + t59697*t69271) - 0.004299987100129*((t59697*t68576 + t59697*t68711 + t63964*t68802 + t68802*t68866)*t69461 + t68866*(-1.*t63102*t68576 - 1.*t63102*t68711 - 1.*t64258*t68802 - 1.*t68802*t69461) + t63102*t69546 + t59697*t69760) - 1.28999742002322e-8*((-1.*t62561*t68576 - 1.*t62561*t68711 - 1.*t64213*t68802 - 1.*t64491*t68802)*t69461 + t64491*(t63102*t68576 + t63102*t68711 + t64258*t68802 + t68802*t69461) + t63102*t70004 + t62561*t70118))*var2[3])*var2[21];
  p_output1[5]=(-0.5*(-1.28999742002322e-8*t57265*t72927 - 0.004299987100129*t57265*t73281 - 4.3e-9*t57265*t73458)*var2[0] - 0.5*(-1.28999742002322e-8*(t57260*t59668 + t12809*t58827*t72927) - 0.004299987100129*(t57260*t62548 + t12809*t58827*t73281) - 4.3e-9*(t57260*t63080 + t12809*t58827*t73458))*var2[1] - 0.5*(-1.28999742002322e-8*(t12809*t59668 - 1.*t57260*t58827*t72927) - 0.004299987100129*(t12809*t62548 - 1.*t57260*t58827*t73281) - 4.3e-9*(t12809*t63080 - 1.*t57260*t58827*t73458))*var2[2] - 0.5*(-0.000271000000004878*t57265*t73458 - 4.3e-9*(t57265*t69271*t72927 + t57265*t69083*t73281 + t64491*(-1.*t57265*t68711*t72927 + t58827*t68802*t72927 + t58827*t59697*t74334 - 1.*t57265*t68866*t74334 + t74336 + t74347) + t68866*(t57265*t68711*t73281 - 1.*t58827*t68802*t73281 - 1.*t58827*t62561*t74334 + t57265*t64491*t74334 + t74373 + t74377)) - 0.004299987100129*(t57265*t69760*t72927 + t57265*t69546*t73458 + t69461*(t57265*t68711*t72927 - 1.*t58827*t68802*t72927 - 1.*t58827*t59697*t74334 + t57265*t68866*t74334 + t74506 + t74513) + t68866*(-1.*t57265*t68711*t73458 + t58827*t68802*t73458 + t58827*t63102*t74334 - 1.*t57265*t69461*t74334 + t74536 + t74538)) - 1.28999742002322e-8*(t57265*t70118*t73281 + t57265*t70004*t73458 + t69461*(-1.*t57265*t68711*t73281 + t58827*t68802*t73281 + t58827*t62561*t74334 - 1.*t57265*t64491*t74334 + t74601 + t74606) + t64491*(t57265*t68711*t73458 - 1.*t58827*t68802*t73458 - 1.*t58827*t63102*t74334 + t57265*t69461*t74334 + t74676 + t74728)))*var2[3] - 0.5*(-0.000271000000004878*t63080 - 4.3e-9*(t62548*t74314 + t62107*(-1.*t68285*t72927 - 1.*t59668*t74334 + t74336 + t74347) + t57249*(t68285*t73281 + t62548*t74334 + t74373 + t74377) + t59668*t74475) - 0.004299987100129*(t63080*t74486 + t62998*(t68285*t72927 + t59668*t74334 + t74506 + t74513) + t59668*t74527 + t57249*(-1.*t68285*t73458 - 1.*t63080*t74334 + t74536 + t74538)) - 1.28999742002322e-8*(t62998*(-1.*t68285*t73281 - 1.*t62548*t74334 + t74601 + t74606) + t63080*t74622 + t62548*t74649 + t62107*(t68285*t73458 + t63080*t74334 + t74676 + t74728)))*var2[4])*var2[21];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=(-0.5*(-1.28999742002322e-8*t88357 - 0.004299987100129*t88367 - 4.3e-9*t88375)*var2[0] - 0.5*(-1.28999742002322e-8*(t57260*t88381 - 1.*t12809*t88385) - 0.004299987100129*(t57260*t88402 - 1.*t12809*t88406) - 4.3e-9*(t57260*t88427 - 1.*t12809*t88463))*var2[1] - 0.5*(-1.28999742002322e-8*(t12809*t88381 + t57260*t88385) - 0.004299987100129*(t12809*t88402 + t57260*t88406) - 4.3e-9*(t12809*t88427 + t57260*t88463))*var2[2] - 0.5*(-0.000271000000004878*t88375 - 4.3e-9*(t69271*t88357 + t69083*t88367 + t64491*(-1.*t68711*t88357 - 1.*t68802*t88385 + t88538 + t88546 - 1.*t68866*t88723 - 1.*t59697*t88733) + t68866*(t68711*t88367 + t68802*t88406 + t88555 + t88560 + t64491*t88723 + t62561*t88733)) - 0.004299987100129*(t69760*t88357 + t69546*t88375 + t69461*(t68711*t88357 + t68802*t88385 + t88570 + t88581 + t68866*t88723 + t59697*t88733) + t68866*(-1.*t68711*t88375 - 1.*t68802*t88463 + t88626 + t88632 - 1.*t69461*t88723 - 1.*t63102*t88733)) - 1.28999742002322e-8*(t70118*t88367 + t70004*t88375 + t69461*(-1.*t68711*t88367 - 1.*t68802*t88406 + t88657 + t88665 - 1.*t64491*t88723 - 1.*t62561*t88733) + t64491*(t68711*t88375 + t68802*t88463 + t88689 + t88695 + t69461*t88723 + t63102*t88733)))*var2[3] - 0.5*(-0.000271000000004878*t88427 - 4.3e-9*(t74475*t88381 + t74314*t88402 + t62107*(t86644 + t87101 - 1.*t68285*t88355 + t88538 - 1.*t59668*t88543 + t88546) + t57249*(t87417 + t87555 + t68285*t88362 + t62548*t88543 + t88555 + t88560)) - 0.004299987100129*(t74527*t88381 + t74486*t88427 + t62998*(t87991 + t88109 + t68285*t88355 + t59668*t88543 + t88570 + t88581) + t57249*(t88228 + t88287 - 1.*t68285*t88373 - 1.*t63080*t88543 + t88626 + t88632)) - 1.28999742002322e-8*(t74649*t88402 + t74622*t88427 + t62998*(t88295 + t88299 - 1.*t68285*t88362 - 1.*t62548*t88543 + t88657 + t88665) + t62107*(t88326 + t88331 + t68285*t88373 + t63080*t88543 + t88689 + t88695)))*var2[4] - 0.5*(-0.000271000000004878*t84446 - 4.3e-9*(t86248*t86282 + t62518*(t86644 - 1.*t57236*t86717 - 1.*t56375*t86877 + t87101 - 1.*t67922*t87308 - 1.*t68122*t87409) + t58363*(t62007*t86717 + t61125*t86877 + t87417 + t87555 + t67922*t87697 + t68122*t87734) + t86640*t87854) - 0.004299987100129*(t84446*t87929 + t63031*(t57236*t86717 + t56375*t86877 + t67922*t87308 + t68122*t87409 + t87991 + t88109) + t86640*t88221 + t58363*(-1.*t62904*t86717 - 1.*t62843*t86877 + t88228 - 1.*t67922*t88249 - 1.*t68122*t88266 + t88287)) - 1.28999742002322e-8*(t63031*(-1.*t62007*t86717 - 1.*t61125*t86877 - 1.*t67922*t87697 - 1.*t68122*t87734 + t88295 + t88299) + t84446*t88313 + t86248*t88321 + t62518*(t62904*t86717 + t62843*t86877 + t67922*t88249 + t68122*t88266 + t88326 + t88331)))*var2[5])*var2[21];
  p_output1[20]=0;
  p_output1[21]=(-0.5*(-4.3e-9*t89819 - 0.004299987100129*t89833 - 1.28999742002322e-8*t89844)*var2[0] - 0.5*(-4.3e-9*(t57260*t89865 - 1.*t12809*t89871) - 0.004299987100129*(t57260*t89881 - 1.*t12809*t89886) - 1.28999742002322e-8*(t57260*t89912 - 1.*t12809*t89920))*var2[1] - 0.5*(-4.3e-9*(t12809*t89865 + t57260*t89871) - 0.004299987100129*(t12809*t89881 + t57260*t89886) - 1.28999742002322e-8*(t12809*t89912 + t57260*t89920))*var2[2] - 0.5*(-0.000271000000004878*t89819 - 4.3e-9*(t69083*t89833 + t69271*t89844 + t64491*(-1.*t68711*t89844 - 1.*t68802*t89920 + t89976 + t89978 - 1.*t68866*t90053 - 1.*t59697*t90058) + t68866*(t68711*t89833 + t68802*t89886 + t89963 + t89972 + t64491*t90053 + t62561*t90058)) - 0.004299987100129*(t69546*t89819 + t69760*t89844 + t69461*(t68711*t89844 + t68802*t89920 + t89998 + t90002 + t68866*t90053 + t59697*t90058) + t68866*(-1.*t68711*t89819 - 1.*t68802*t89871 + t90007 + t90010 - 1.*t69461*t90053 - 1.*t63102*t90058)) - 1.28999742002322e-8*(t70004*t89819 + t70118*t89833 + t69461*(-1.*t68711*t89833 - 1.*t68802*t89886 + t90022 + t90024 - 1.*t64491*t90053 - 1.*t62561*t90058) + t64491*(t68711*t89819 + t68802*t89871 + t90031 + t90034 + t69461*t90053 + t63102*t90058)))*var2[3] - 0.5*(-0.000271000000004878*t89865 - 4.3e-9*(t74314*t89881 + t74475*t89912 + t57249*(t89042 + t89064 + t68285*t89829 + t89963 + t62548*t89970 + t89972) + t62107*(t89092 + t89101 - 1.*t68285*t89841 - 1.*t59668*t89970 + t89976 + t89978)) - 0.004299987100129*(t74486*t89865 + t74527*t89912 + t62998*(t89132 + t89135 + t68285*t89841 + t59668*t89970 + t89998 + t90002) + t57249*(t89350 + t89438 - 1.*t68285*t89814 - 1.*t63080*t89970 + t90007 + t90010)) - 1.28999742002322e-8*(t74622*t89865 + t74649*t89881 + t62998*(t89488 + t89493 - 1.*t68285*t89829 - 1.*t62548*t89970 + t90022 + t90024) + t62107*(t89499 + t89508 + t68285*t89814 + t63080*t89970 + t90031 + t90034)))*var2[4] - 0.5*(-0.000271000000004878*t88935 - 4.3e-9*(t86282*t88960 + t87854*t88982 + t58363*(t89042 + t62007*t89050 + t61125*t89059 + t89064 + t67922*t89070 + t68122*t89082) + t62518*(-1.*t57236*t89050 - 1.*t56375*t89059 + t89092 + t89101 - 1.*t67922*t89107 - 1.*t68122*t89121)) - 0.004299987100129*(t87929*t88935 + t88221*t88982 + t63031*(t57236*t89050 + t56375*t89059 + t67922*t89107 + t68122*t89121 + t89132 + t89135) + t58363*(-1.*t62904*t89050 - 1.*t62843*t89059 + t89350 - 1.*t67922*t89366 - 1.*t68122*t89393 + t89438)) - 1.28999742002322e-8*(t88313*t88935 + t88321*t88960 + t63031*(-1.*t62007*t89050 - 1.*t61125*t89059 - 1.*t67922*t89070 - 1.*t68122*t89082 + t89488 + t89493) + t62518*(t62904*t89050 + t62843*t89059 + t67922*t89366 + t68122*t89393 + t89499 + t89508)))*var2[5] - 0.5*(-0.000271000000004878*(1.8e-11*t50599 - 3.e-6*t88894 - 3.e-6*t88903 - 3.e-6*t88932) - 4.3e-9*(0.2*t88923 - 1.*t88942*t89548 - 1.*t56330*t89560 - 1.*t88970*t89567 - 1.*t60954*t89579 - 3.e-6*(t88952*t89548 + t55937*t89560 + t88977*t89567 + t60777*t89579)) - 0.004299987100129*(0.2*t88949 - 1.*t88907*t89637 - 1.*t62601*t89661 - 1.*t88970*t89674 - 1.*t56330*t89706 - 3.e-6*(t88932*t89637 + t62774*t89661 + t88977*t89674 + t55937*t89706)) - 1.28999742002322e-8*(0.2*t88979 - 1.*t62601*t89746 - 1.*t88907*t89756 - 1.*t88942*t89764 - 1.*t60954*t89783 - 3.e-6*(t62774*t89746 + t88932*t89756 + t88952*t89764 + t60777*t89783)))*var2[19])*var2[21];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec22_minitaur.hh"

namespace FrontStance
{

void Ce3_vec22_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
