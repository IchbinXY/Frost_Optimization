/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 23:56:39 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t12143;
  double t12833;
  double t24568;
  double t30325;
  double t32331;
  double t35322;
  double t35396;
  double t35404;
  double t35437;
  double t31019;
  double t31337;
  double t31885;
  double t31901;
  double t36288;
  double t36319;
  double t37073;
  double t35462;
  double t36001;
  double t38187;
  double t36723;
  double t36877;
  double t36878;
  double t36924;
  double t36939;
  double t36942;
  double t38737;
  double t38761;
  double t41365;
  double t41369;
  double t41457;
  double t41459;
  double t41464;
  double t41465;
  double t41466;
  double t42938;
  double t43232;
  double t43512;
  double t43714;
  double t43383;
  double t38292;
  double t43300;
  double t43852;
  double t28628;
  double t29320;
  double t29572;
  double t30139;
  double t31992;
  double t35398;
  double t36066;
  double t36324;
  double t36567;
  double t37081;
  double t38310;
  double t38317;
  double t38319;
  double t38689;
  double t41372;
  double t41373;
  double t41444;
  double t41448;
  double t41449;
  double t44607;
  double t44640;
  double t44654;
  double t43418;
  double t44665;
  double t44673;
  double t44681;
  double t44683;
  double t44689;
  double t44692;
  double t44068;
  double t44242;
  double t44269;
  double t44873;
  double t44874;
  double t44860;
  double t44869;
  double t44893;
  double t44879;
  double t44880;
  double t44881;
  double t44888;
  double t44982;
  double t45011;
  double t45018;
  double t45360;
  double t45362;
  double t45370;
  double t45376;
  double t45439;
  double t47600;
  double t45467;
  double t48474;
  double t48475;
  double t48476;
  double t48477;
  double t48918;
  double t49016;
  double t49173;
  double t49198;
  double t49232;
  double t49274;
  double t31316;
  double t31970;
  double t49927;
  double t49938;
  double t50031;
  double t44872;
  double t44875;
  double t44876;
  double t44878;
  double t44892;
  double t44897;
  double t44900;
  double t44912;
  double t44933;
  double t45029;
  double t45123;
  double t45142;
  double t45244;
  double t45358;
  double t50247;
  double t50252;
  double t50255;
  double t50266;
  double t50269;
  double t45552;
  double t50278;
  double t50280;
  double t50283;
  double t47978;
  double t50477;
  double t50479;
  double t50480;
  double t50489;
  double t50490;
  double t50495;
  double t44506;
  double t44532;
  double t44658;
  double t44682;
  double t44710;
  double t44717;
  double t44718;
  double t44720;
  double t44732;
  double t44779;
  double t44783;
  double t44793;
  double t44799;
  double t44801;
  double t44819;
  double t44827;
  double t44829;
  double t44837;
  double t44842;
  double t44847;
  double t44848;
  double t50631;
  double t50632;
  double t50633;
  double t50643;
  double t50653;
  double t50665;
  double t50680;
  double t50684;
  double t50686;
  double t50694;
  double t31891;
  double t50888;
  double t50898;
  double t50900;
  double t50901;
  double t50923;
  double t50931;
  double t50469;
  double t50474;
  double t50485;
  double t50497;
  double t50498;
  double t50505;
  double t50556;
  double t50566;
  double t50579;
  double t50582;
  double t50586;
  double t50590;
  double t50591;
  double t50596;
  double t50598;
  double t50600;
  double t50606;
  double t50607;
  double t50608;
  double t50615;
  double t50619;
  double t48471;
  double t48472;
  double t48473;
  double t48479;
  double t49201;
  double t49277;
  double t49279;
  double t49292;
  double t49311;
  double t49324;
  double t49338;
  double t49353;
  double t49356;
  double t49357;
  double t49362;
  double t49369;
  double t49385;
  double t49389;
  double t49393;
  double t49394;
  double t49402;
  double t49469;
  double t51311;
  double t51177;
  double t51181;
  double t51214;
  double t51217;
  double t51366;
  double t51372;
  double t51374;
  double t51404;
  double t51419;
  double t51436;
  double t50642;
  double t50679;
  double t50697;
  double t50698;
  double t50704;
  double t50705;
  double t50706;
  double t50710;
  double t50713;
  double t50719;
  double t50756;
  double t50760;
  double t50776;
  double t50806;
  double t50813;
  double t50826;
  double t50829;
  double t50833;
  double t50838;
  double t50260;
  double t50277;
  double t50284;
  double t50299;
  double t50301;
  double t50310;
  double t50348;
  double t50359;
  double t50360;
  double t50362;
  double t50368;
  double t50377;
  double t50410;
  double t50428;
  double t50454;
  double t50460;
  double t50461;
  double t50462;
  double t50463;
  double t44890;
  double t45028;
  double t45414;
  double t45459;
  double t45460;
  double t45599;
  double t45645;
  double t45843;
  double t47221;
  double t47738;
  double t47781;
  double t47875;
  double t47969;
  double t47976;
  double t47980;
  double t47991;
  double t48215;
  double t48244;
  double t48277;
  double t52400;
  double t52411;
  double t52425;
  double t52446;
  double t52456;
  double t52464;
  double t52471;
  double t52473;
  double t52476;
  double t52490;
  double t52492;
  double t52495;
  double t52506;
  double t52614;
  double t52610;
  double t52626;
  double t52634;
  double t52639;
  double t52645;
  double t52648;
  double t52652;
  double t52658;
  double t52659;
  double t52669;
  double t52670;
  double t52672;
  double t52676;
  double t52688;
  double t52694;
  double t52777;
  double t52779;
  double t52788;
  double t52766;
  double t52789;
  double t52797;
  double t52814;
  double t52842;
  double t52844;
  double t52851;
  double t52855;
  double t52859;
  double t52862;
  double t52867;
  double t52985;
  double t52989;
  double t52990;
  double t52994;
  double t52999;
  double t53000;
  double t53001;
  double t53011;
  double t53015;
  double t53020;
  double t53119;
  double t53120;
  double t53134;
  double t53140;
  double t53146;
  double t53147;
  double t53156;
  double t53168;
  double t53171;
  double t53174;
  double t53189;
  double t53193;
  double t53194;
  double t53198;
  double t53202;
  double t53205;
  double t53207;
  double t53210;
  double t52404;
  double t52405;
  double t52407;
  double t52460;
  double t52485;
  double t52512;
  double t52516;
  double t52521;
  double t52532;
  double t52536;
  double t52539;
  double t52549;
  double t52551;
  double t52564;
  double t52568;
  double t52569;
  double t52577;
  double t52578;
  double t52587;
  double t52591;
  double t52594;
  double t52596;
  double t53287;
  double t53292;
  double t53295;
  double t53296;
  double t53317;
  double t53318;
  double t53319;
  double t53323;
  double t53329;
  double t53334;
  double t53339;
  double t53340;
  double t53492;
  double t53497;
  double t53499;
  double t53500;
  double t53510;
  double t53513;
  double t53518;
  double t53519;
  double t53525;
  double t53527;
  double t53617;
  double t53621;
  double t53629;
  double t53630;
  double t53651;
  double t53657;
  double t53658;
  double t53665;
  double t53112;
  double t53797;
  double t53804;
  double t53805;
  double t53814;
  double t53816;
  double t53831;
  double t53839;
  double t53845;
  double t53847;
  double t53613;
  double t53616;
  double t53626;
  double t53654;
  double t53666;
  double t53668;
  double t53683;
  double t53687;
  double t53694;
  double t53697;
  double t53704;
  double t53707;
  double t53713;
  double t53723;
  double t53724;
  double t53761;
  double t53769;
  double t53771;
  double t53776;
  double t53777;
  double t53781;
  double t52636;
  double t52649;
  double t52660;
  double t52673;
  double t52696;
  double t52699;
  double t52703;
  double t52704;
  double t52712;
  double t52718;
  double t52720;
  double t52723;
  double t52727;
  double t52730;
  double t52733;
  double t52735;
  double t52739;
  double t52741;
  double t52751;
  double t52754;
  double t52755;
  double t54030;
  double t54031;
  double t54043;
  double t54027;
  double t54044;
  double t54046;
  double t54048;
  double t54052;
  double t54055;
  double t54056;
  double t54057;
  double t54139;
  double t54143;
  double t54144;
  double t54247;
  double t54251;
  double t54337;
  double t53136;
  double t53150;
  double t54802;
  double t54827;
  double t54880;
  double t53464;
  double t53465;
  double t53472;
  double t53502;
  double t53515;
  double t53532;
  double t53535;
  double t53537;
  double t53544;
  double t53547;
  double t53548;
  double t53558;
  double t53567;
  double t53570;
  double t53574;
  double t53578;
  double t53582;
  double t53586;
  double t53587;
  double t53589;
  double t53598;
  double t53600;
  double t52967;
  double t52969;
  double t52974;
  double t52996;
  double t53013;
  double t53021;
  double t53025;
  double t53031;
  double t53033;
  double t53036;
  double t53049;
  double t53053;
  double t53057;
  double t53059;
  double t53062;
  double t53067;
  double t53071;
  double t53077;
  double t53079;
  double t53080;
  double t53089;
  double t53099;
  double t55489;
  double t55490;
  double t55501;
  double t55570;
  double t55619;
  double t55746;
  double t55752;
  double t55753;
  double t55762;
  double t55838;
  double t55841;
  double t55850;
  double t55853;
  double t54132;
  double t54135;
  double t54153;
  double t54237;
  double t54349;
  double t54441;
  double t54442;
  double t54466;
  double t54481;
  double t54482;
  double t54611;
  double t54618;
  double t54621;
  double t54630;
  double t54635;
  double t54637;
  double t54648;
  double t54683;
  double t54711;
  double t54785;
  double t54791;
  double t56378;
  double t56400;
  double t56446;
  double t56449;
  double t56512;
  double t56517;
  double t56523;
  double t56527;
  double t56533;
  double t53312;
  double t53328;
  double t53342;
  double t53353;
  double t53355;
  double t53356;
  double t53370;
  double t53398;
  double t53413;
  double t53419;
  double t53423;
  double t53424;
  double t53435;
  double t53436;
  double t53437;
  double t53439;
  double t53449;
  double t53450;
  double t53454;
  double t52841;
  double t52853;
  double t52873;
  double t52882;
  double t52883;
  double t52890;
  double t52907;
  double t52918;
  double t52919;
  double t52922;
  double t52927;
  double t52931;
  double t52944;
  double t52945;
  double t52949;
  double t52951;
  double t52954;
  double t52956;
  double t52957;
  double t54047;
  double t54053;
  double t54058;
  double t54059;
  double t54063;
  double t54067;
  double t54082;
  double t54083;
  double t54094;
  double t54099;
  double t54100;
  double t54101;
  double t54104;
  double t54105;
  double t54107;
  double t54108;
  double t54113;
  double t54114;
  double t54126;
  double t51157;
  double t51158;
  double t51160;
  double t51161;
  double t51285;
  double t51342;
  double t51343;
  double t51363;
  double t51383;
  double t51388;
  double t51389;
  double t51391;
  double t51401;
  double t57756;
  double t57775;
  double t57776;
  double t57781;
  double t51441;
  double t57894;
  double t57914;
  double t57925;
  double t58054;
  double t58075;
  double t51545;
  double t56431;
  double t56518;
  double t56541;
  double t56571;
  double t56594;
  double t56736;
  double t56811;
  double t56856;
  double t56874;
  double t56879;
  double t56905;
  double t57026;
  double t57031;
  double t57132;
  double t57245;
  double t57439;
  double t57443;
  double t57444;
  double t57499;
  double t58853;
  double t58854;
  double t58860;
  double t58861;
  double t58907;
  double t58923;
  double t58930;
  double t58931;
  double t58935;
  double t58941;
  double t59015;
  double t59123;
  double t59182;
  double t59361;
  double t59363;
  double t59398;
  double t59425;
  double t59426;
  double t59434;
  double t59444;
  double t59461;
  double t59498;
  double t58312;
  double t58322;
  double t58323;
  double t58324;
  double t58325;
  double t58331;
  double t58332;
  double t58333;
  double t58372;
  double t58378;
  double t58381;
  double t58414;
  double t58463;
  double t58472;
  double t58503;
  double t58505;
  double t58523;
  double t58594;
  double t58812;
  double t58821;
  double t58823;
  double t58825;
  double t59499;
  double t59501;
  double t59504;
  double t59516;
  double t59534;
  double t59551;
  double t59553;
  double t59582;
  double t59592;
  double t59594;
  double t59596;
  double t59605;
  double t59615;
  double t59621;
  double t59623;
  double t59626;
  double t59643;
  double t59644;
  double t59647;
  double t59696;
  double t59705;
  double t60336;
  double t60349;
  double t60352;
  double t60399;
  double t60402;
  double t60404;
  double t60408;
  double t60412;
  double t60413;
  double t60416;
  double t60417;
  double t60442;
  double t60444;
  double t60455;
  double t60457;
  double t60459;
  double t60462;
  double t60463;
  double t60469;
  double t59775;
  double t59833;
  double t59842;
  double t59843;
  double t59920;
  double t59964;
  double t59967;
  double t59968;
  double t59980;
  double t60006;
  double t60011;
  double t60121;
  double t60128;
  double t60137;
  double t60158;
  double t60181;
  double t60182;
  double t60193;
  double t60213;
  double t60248;
  double t60250;
  double t60329;
  double t60742;
  double t60744;
  double t60786;
  double t60796;
  double t60823;
  double t60830;
  double t60887;
  double t60888;
  double t61050;
  double t61054;
  double t61074;
  double t61085;
  double t61108;
  double t61122;
  double t61127;
  double t61143;
  double t61158;
  double t61159;
  double t61180;
  double t61348;
  double t61402;
  double t61416;
  double t61439;
  double t61478;
  double t61489;
  double t61495;
  double t61561;
  double t61562;
  double t61885;
  double t61888;
  double t61890;
  double t61910;
  double t61912;
  double t61918;
  double t61924;
  double t61929;
  double t61942;
  double t60704;
  double t60733;
  double t60794;
  double t60828;
  double t60893;
  double t60894;
  double t60897;
  double t60910;
  double t60912;
  double t60915;
  double t60940;
  double t60946;
  double t60948;
  double t60982;
  double t60984;
  double t60987;
  double t60988;
  double t60992;
  double t61006;
  double t61008;
  double t61035;
  double t62131;
  double t62137;
  double t62143;
  double t62268;
  double t62269;
  double t62270;
  double t62264;
  double t62302;
  double t62306;
  double t62325;
  double t62449;
  double t62538;
  double t62540;
  double t62661;
  double t62666;
  double t62669;
  double t62703;
  double t62708;
  double t62734;
  double t61257;
  double t61327;
  double t61338;
  double t61424;
  double t61500;
  double t61570;
  double t61571;
  double t61572;
  double t61573;
  double t61574;
  double t61608;
  double t61632;
  double t61686;
  double t61700;
  double t61703;
  double t61714;
  double t61739;
  double t61765;
  double t61776;
  double t61778;
  double t61829;
  double t61842;
  double t62913;
  double t62915;
  double t62918;
  double t62927;
  double t62955;
  double t62960;
  double t62963;
  double t62964;
  double t62970;
  double t62971;
  double t62620;
  double t62637;
  double t62670;
  double t62698;
  double t62738;
  double t62752;
  double t62756;
  double t62760;
  double t62800;
  double t62822;
  double t62826;
  double t62829;
  double t62835;
  double t62836;
  double t62859;
  double t62867;
  double t62872;
  double t62875;
  double t62885;
  double t62896;
  double t62901;
  double t63166;
  double t63167;
  double t63169;
  double t63170;
  double t63171;
  double t63243;
  double t63268;
  double t63298;
  double t61100;
  double t61134;
  double t61191;
  double t61192;
  double t61214;
  double t61230;
  double t61233;
  double t61235;
  double t61239;
  double t61240;
  double t61243;
  double t61244;
  double t61245;
  double t61246;
  double t61250;
  double t61251;
  double t61252;
  double t61254;
  double t61255;
  double t62321;
  double t62464;
  double t62552;
  double t62558;
  double t62564;
  double t62565;
  double t62567;
  double t62568;
  double t62570;
  double t62571;
  double t62575;
  double t62576;
  double t62577;
  double t62580;
  double t62583;
  double t62594;
  double t62596;
  double t62602;
  double t62603;
  double t63447;
  double t63450;
  double t63457;
  double t63465;
  double t63467;
  double t63480;
  double t63485;
  double t63491;
  double t63168;
  double t63186;
  double t63312;
  double t63316;
  double t63317;
  double t63328;
  double t63331;
  double t63332;
  double t63393;
  double t63397;
  double t63400;
  double t63401;
  double t63405;
  double t63409;
  double t63410;
  double t63417;
  double t63420;
  double t63423;
  double t63430;
  t12143 = Cos(var1[10]);
  t12833 = -1.*t12143;
  t24568 = 1. + t12833;
  t30325 = Cos(var1[4]);
  t32331 = Cos(var1[12]);
  t35322 = -1.*t32331;
  t35396 = 1. + t35322;
  t35404 = -3.e-6*t35396;
  t35437 = Sin(var1[12]);
  t31019 = Cos(var1[5]);
  t31337 = Sin(var1[10]);
  t31885 = Sin(var1[4]);
  t31901 = Sin(var1[5]);
  t36288 = 3.e-6*t35437;
  t36319 = t35404 + t36288;
  t37073 = 3.e-13*var1[12];
  t35462 = -3.e-6*t35437;
  t36001 = t35404 + t35462;
  t38187 = -9.e-12*t35396;
  t36723 = -3.e-6*t24568*t30325*t31019;
  t36877 = 3.e-6*t31337*t31885;
  t36878 = -9.e-12*t24568;
  t36924 = 1. + t36878;
  t36939 = t36924*t30325*t31901;
  t36942 = t36723 + t36877 + t36939;
  t38737 = -1.*t12143*t30325*t31019;
  t38761 = -1.*t31337*t31885;
  t41365 = 3.e-6*t24568*t30325*t31901;
  t41369 = t38737 + t38761 + t41365;
  t41457 = t30325*t31019*t31337;
  t41459 = -1.000000000009*t24568;
  t41464 = 1. + t41459;
  t41465 = -1.*t41464*t31885;
  t41466 = 3.e-6*t30325*t31337*t31901;
  t42938 = t41457 + t41465 + t41466;
  t43232 = 3.e-6*t35396;
  t43512 = -1.000000000009*t35396;
  t43714 = 1. + t43512;
  t43383 = 9.e-12*t35396;
  t38292 = -1.*t35437;
  t43300 = t43232 + t35462;
  t43852 = t43232 + t36288;
  t28628 = -1.8e-12*t24568;
  t29320 = -1. + t12143;
  t29572 = 0.2*t29320;
  t30139 = t28628 + t29572;
  t31992 = 1.e-7*var1[12];
  t35398 = 5.4e-18*t35396;
  t36066 = -0.200000000003*t36001;
  t36324 = 0.100000000003*t36319;
  t36567 = t31992 + t35398 + t36066 + t36324;
  t37081 = -0.2000000000048*t35396;
  t38310 = t38187 + t38292;
  t38317 = 0.100000000003*t38310;
  t38319 = 3.e-7*t36319;
  t38689 = t37073 + t37081 + t38317 + t38319;
  t41372 = 0.1000000000039*t35396;
  t41373 = 3.e-7*t36001;
  t41444 = t38187 + t35437;
  t41448 = -0.200000000003*t41444;
  t41449 = t37073 + t41372 + t41373 + t41448;
  t44607 = t36924*t31019*t31885;
  t44640 = 3.e-6*t24568*t31885*t31901;
  t44654 = t44607 + t44640;
  t43418 = t43383 + t35437;
  t44665 = 3.e-6*t24568*t31019*t31885;
  t44673 = t12143*t31885*t31901;
  t44681 = t44665 + t44673;
  t44683 = 3.e-6*t31019*t31337*t31885;
  t44689 = -1.*t31337*t31885*t31901;
  t44692 = t44683 + t44689;
  t44068 = t43383 + t38292;
  t44242 = -1.8e-11*t35396;
  t44269 = 1. + t44242;
  t44873 = 3.e-6*t32331;
  t44874 = t44873 + t35462;
  t44860 = -3.e-6*t32331;
  t44869 = t44860 + t35462;
  t44893 = -9.e-12*t35437;
  t44879 = -3.e-6*t30325*t31337;
  t44880 = -3.e-6*t24568*t31019*t31885;
  t44881 = t36924*t31885*t31901;
  t44888 = t44879 + t44880 + t44881;
  t44982 = t30325*t31337;
  t45011 = -1.*t12143*t31019*t31885;
  t45018 = t44982 + t45011 + t44640;
  t45360 = t41464*t30325;
  t45362 = t31019*t31337*t31885;
  t45370 = 3.e-6*t31337*t31885*t31901;
  t45376 = t45360 + t45362 + t45370;
  t45439 = t44873 + t36288;
  t47600 = t44860 + t36288;
  t45467 = 9.e-12*t35437;
  t48474 = -1.000000000009*t30325*t31337;
  t48475 = t12143*t31019*t31885;
  t48476 = 3.e-6*t12143*t31885*t31901;
  t48477 = t48474 + t48475 + t48476;
  t48918 = -3.e-6*t12143*t30325;
  t49016 = -3.e-6*t31019*t31337*t31885;
  t49173 = -9.e-12*t31337*t31885*t31901;
  t49198 = t48918 + t49016 + t49173;
  t49232 = t12143*t30325;
  t49274 = t49232 + t45362 + t45370;
  t31316 = -1.*t30139*t30325*t31019;
  t31970 = 6.000000000054e-7*t24568*t30325*t31901;
  t49927 = t36723 + t36939;
  t49938 = t38737 + t41365;
  t50031 = t41457 + t41466;
  t44872 = -0.200000000003*t44869;
  t44875 = 0.100000000003*t44874;
  t44876 = 5.4e-18*t35437;
  t44878 = 1.e-7 + t44872 + t44875 + t44876;
  t44892 = 3.e-7*t44874;
  t44897 = t35322 + t44893;
  t44900 = 0.100000000003*t44897;
  t44912 = -0.2000000000048*t35437;
  t44933 = 3.e-13 + t44892 + t44900 + t44912;
  t45029 = 3.e-7*t44869;
  t45123 = t32331 + t44893;
  t45142 = -0.200000000003*t45123;
  t45244 = 0.1000000000039*t35437;
  t45358 = 3.e-13 + t45029 + t45142 + t45244;
  t50247 = -1.*t36924*t30325*t31019;
  t50252 = -3.e-6*t24568*t30325*t31901;
  t50255 = t50247 + t50252;
  t50266 = -1.*t12143*t30325*t31901;
  t50269 = t36723 + t50266;
  t45552 = t35322 + t45467;
  t50278 = -3.e-6*t30325*t31019*t31337;
  t50280 = t30325*t31337*t31901;
  t50283 = t50278 + t50280;
  t47978 = t32331 + t45467;
  t50477 = -3.e-6*t12143*t30325*t31019;
  t50479 = t12143*t30325*t31901;
  t50480 = t50477 + t50479;
  t50489 = 9.e-12*t30325*t31019*t31337;
  t50490 = -3.e-6*t30325*t31337*t31901;
  t50495 = t50489 + t50490;
  t44506 = 6.000000000054e-7*t24568*t31019*t31885;
  t44532 = t30139*t31885*t31901;
  t44658 = t36567*t44654;
  t44682 = t38689*t44681;
  t44710 = t41449*t44692;
  t44717 = t43300*t44654;
  t44718 = t43418*t44681;
  t44720 = t43714*t44692;
  t44732 = t44717 + t44718 + t44720;
  t44779 = -0.3*t44732;
  t44783 = -1.*t43852*t44654;
  t44793 = -1.*t43714*t44681;
  t44799 = -1.*t44068*t44692;
  t44801 = t44783 + t44793 + t44799;
  t44819 = 0.2*t44801;
  t44827 = t44269*t44654;
  t44829 = t43300*t44681;
  t44837 = t43852*t44692;
  t44842 = t44827 + t44829 + t44837;
  t44847 = 0.100001*t44842;
  t44848 = t44506 + t44532 + t44658 + t44682 + t44710 + t44779 + t44819 + t44847;
  t50631 = -1.000000000009*t31337*t31885;
  t50632 = -3.e-6*t12143*t30325*t31901;
  t50633 = t38737 + t50631 + t50632;
  t50643 = -1.*t30325*t31019*t31337;
  t50653 = t12143*t31885;
  t50665 = t50643 + t50653 + t50490;
  t50680 = 3.e-6*t30325*t31019*t31337;
  t50684 = -3.e-6*t12143*t31885;
  t50686 = 9.e-12*t30325*t31337*t31901;
  t50694 = t50680 + t50684 + t50686;
  t31891 = -0.2000000000018*t31337*t31885;
  t50888 = t38737 + t38761 + t50632;
  t50898 = 3.e-6*t12143*t30325*t31019;
  t50900 = 9.e-12*t12143*t30325*t31901;
  t50901 = t50898 + t36877 + t50900;
  t50923 = -1.000000000009*t12143*t31885;
  t50931 = t41457 + t50923 + t41466;
  t50469 = -6.000000000054e-7*t30325*t31019*t31337;
  t50474 = 0.2000000000018*t30325*t31337*t31901;
  t50485 = t41449*t50480;
  t50497 = t36567*t50495;
  t50498 = t38689*t50283;
  t50505 = -1.*t44068*t50480;
  t50556 = -1.*t43852*t50495;
  t50566 = -1.*t43714*t50283;
  t50579 = t50505 + t50556 + t50566;
  t50582 = 0.2*t50579;
  t50586 = t43852*t50480;
  t50590 = t44269*t50495;
  t50591 = t43300*t50283;
  t50596 = t50586 + t50590 + t50591;
  t50598 = 0.100001*t50596;
  t50600 = t43714*t50480;
  t50606 = t43300*t50495;
  t50607 = t43418*t50283;
  t50608 = t50600 + t50606 + t50607;
  t50615 = -0.3*t50608;
  t50619 = t50469 + t50474 + t50485 + t50497 + t50498 + t50582 + t50598 + t50615;
  t48471 = 0.2000000000018*t12143*t30325;
  t48472 = 0.2000000000018*t31019*t31337*t31885;
  t48473 = 6.000000000054e-7*t31337*t31885*t31901;
  t48479 = t41449*t48477;
  t49201 = t36567*t49198;
  t49277 = t38689*t49274;
  t49279 = -1.*t44068*t48477;
  t49292 = -1.*t43852*t49198;
  t49311 = -1.*t43714*t49274;
  t49324 = t49279 + t49292 + t49311;
  t49338 = 0.2*t49324;
  t49353 = t43852*t48477;
  t49356 = t44269*t49198;
  t49357 = t43300*t49274;
  t49362 = t49353 + t49356 + t49357;
  t49369 = 0.100001*t49362;
  t49385 = t43714*t48477;
  t49389 = t43300*t49198;
  t49393 = t43418*t49274;
  t49394 = t49385 + t49389 + t49393;
  t49402 = -0.3*t49394;
  t49469 = t48471 + t48472 + t48473 + t48479 + t49201 + t49277 + t49338 + t49369 + t49402;
  t51311 = -9.e-12*t32331;
  t51177 = 3.e-6*t24568*t30325*t31019;
  t51181 = -3.e-6*t31337*t31885;
  t51214 = -1.*t36924*t30325*t31901;
  t51217 = t51177 + t51181 + t51214;
  t51366 = t12143*t30325*t31019;
  t51372 = t31337*t31885;
  t51374 = t51366 + t51372 + t50252;
  t51404 = t41464*t31885;
  t51419 = t50643 + t51404 + t50490;
  t51436 = 9.e-12*t32331;
  t50642 = t45358*t50633;
  t50679 = t44933*t50665;
  t50697 = t44878*t50694;
  t50698 = -1.000000000009*t35437*t50633;
  t50704 = t47978*t50665;
  t50705 = t47600*t50694;
  t50706 = t50698 + t50704 + t50705;
  t50710 = -0.3*t50706;
  t50713 = -1.*t45552*t50633;
  t50719 = 1.000000000009*t35437*t50665;
  t50756 = -1.*t45439*t50694;
  t50760 = t50713 + t50719 + t50756;
  t50776 = 0.2*t50760;
  t50806 = t45439*t50633;
  t50813 = t47600*t50665;
  t50826 = -1.8e-11*t35437*t50694;
  t50829 = t50806 + t50813 + t50826;
  t50833 = 0.100001*t50829;
  t50838 = t50642 + t50679 + t50697 + t50710 + t50776 + t50833;
  t50260 = t44878*t50255;
  t50277 = t44933*t50269;
  t50284 = t45358*t50283;
  t50299 = -1.*t45439*t50255;
  t50301 = 1.000000000009*t35437*t50269;
  t50310 = -1.*t45552*t50283;
  t50348 = t50299 + t50301 + t50310;
  t50359 = 0.2*t50348;
  t50360 = -1.8e-11*t35437*t50255;
  t50362 = t47600*t50269;
  t50368 = t45439*t50283;
  t50377 = t50360 + t50362 + t50368;
  t50410 = 0.100001*t50377;
  t50428 = t47600*t50255;
  t50454 = t47978*t50269;
  t50460 = -1.000000000009*t35437*t50283;
  t50461 = t50428 + t50454 + t50460;
  t50462 = -0.3*t50461;
  t50463 = t50260 + t50277 + t50284 + t50359 + t50410 + t50462;
  t44890 = t44878*t44888;
  t45028 = t44933*t45018;
  t45414 = t45358*t45376;
  t45459 = -1.*t45439*t44888;
  t45460 = 1.000000000009*t35437*t45018;
  t45599 = -1.*t45552*t45376;
  t45645 = t45459 + t45460 + t45599;
  t45843 = 0.2*t45645;
  t47221 = -1.8e-11*t35437*t44888;
  t47738 = t47600*t45018;
  t47781 = t45439*t45376;
  t47875 = t47221 + t47738 + t47781;
  t47969 = 0.100001*t47875;
  t47976 = t47600*t44888;
  t47980 = t47978*t45018;
  t47991 = -1.000000000009*t35437*t45376;
  t48215 = t47976 + t47980 + t47991;
  t48244 = -0.3*t48215;
  t48277 = t44890 + t45028 + t45414 + t45843 + t47969 + t48244;
  t52400 = Cos(var1[3]);
  t52411 = 3.e-6*t24568*t52400*t30325*t31019;
  t52425 = -3.e-6*t52400*t31337*t31885;
  t52446 = -1.*t36924*t52400*t30325*t31901;
  t52456 = t52411 + t52425 + t52446;
  t52464 = t12143*t52400*t30325*t31019;
  t52471 = t52400*t31337*t31885;
  t52473 = -3.e-6*t24568*t52400*t30325*t31901;
  t52476 = t52464 + t52471 + t52473;
  t52490 = -1.*t52400*t30325*t31019*t31337;
  t52492 = t41464*t52400*t31885;
  t52495 = -3.e-6*t52400*t30325*t31337*t31901;
  t52506 = t52490 + t52492 + t52495;
  t52614 = Sin(var1[3]);
  t52610 = -1.*t52400*t31019*t31885;
  t52626 = t52614*t31901;
  t52634 = t52610 + t52626;
  t52639 = -1.*t31019*t52614;
  t52645 = -1.*t52400*t31885*t31901;
  t52648 = t52639 + t52645;
  t52652 = t36924*t52634;
  t52658 = 3.e-6*t24568*t52648;
  t52659 = t52652 + t52658;
  t52669 = 3.e-6*t24568*t52634;
  t52670 = t12143*t52648;
  t52672 = t52669 + t52670;
  t52676 = 3.e-6*t31337*t52634;
  t52688 = -1.*t31337*t52648;
  t52694 = t52676 + t52688;
  t52777 = t52400*t31019*t31885;
  t52779 = -1.*t52614*t31901;
  t52788 = t52777 + t52779;
  t52766 = 3.e-6*t52400*t30325*t31337;
  t52789 = 3.e-6*t24568*t52788;
  t52797 = t36924*t52648;
  t52814 = t52766 + t52789 + t52797;
  t52842 = -1.*t52400*t30325*t31337;
  t52844 = t12143*t52788;
  t52851 = t52842 + t52844 + t52658;
  t52855 = -1.*t41464*t52400*t30325;
  t52859 = -1.*t31337*t52788;
  t52862 = 3.e-6*t31337*t52648;
  t52867 = t52855 + t52859 + t52862;
  t52985 = 1.000000000009*t52400*t30325*t31337;
  t52989 = -1.*t12143*t52788;
  t52990 = 3.e-6*t12143*t52648;
  t52994 = t52985 + t52989 + t52990;
  t52999 = 3.e-6*t12143*t52400*t30325;
  t53000 = 3.e-6*t31337*t52788;
  t53001 = -9.e-12*t31337*t52648;
  t53011 = t52999 + t53000 + t53001;
  t53015 = -1.*t12143*t52400*t30325;
  t53020 = t53015 + t52859 + t52862;
  t53119 = -1.*t31019*t52614*t31885;
  t53120 = -1.*t52400*t31901;
  t53134 = t53119 + t53120;
  t53140 = -1.*t52400*t31019;
  t53146 = t52614*t31885*t31901;
  t53147 = t53140 + t53146;
  t53156 = -3.e-6*t30325*t31337*t52614;
  t53168 = 3.e-6*t24568*t53134;
  t53171 = t36924*t53147;
  t53174 = t53156 + t53168 + t53171;
  t53189 = t30325*t31337*t52614;
  t53193 = t12143*t53134;
  t53194 = 3.e-6*t24568*t53147;
  t53198 = t53189 + t53193 + t53194;
  t53202 = t41464*t30325*t52614;
  t53205 = -1.*t31337*t53134;
  t53207 = 3.e-6*t31337*t53147;
  t53210 = t53202 + t53205 + t53207;
  t52404 = t30139*t52400*t30325*t31019;
  t52405 = 0.2000000000018*t52400*t31337*t31885;
  t52407 = -6.000000000054e-7*t24568*t52400*t30325*t31901;
  t52460 = t36567*t52456;
  t52485 = t38689*t52476;
  t52512 = t41449*t52506;
  t52516 = t43300*t52456;
  t52521 = t43418*t52476;
  t52532 = t43714*t52506;
  t52536 = t52516 + t52521 + t52532;
  t52539 = -0.3*t52536;
  t52549 = -1.*t43852*t52456;
  t52551 = -1.*t43714*t52476;
  t52564 = -1.*t44068*t52506;
  t52568 = t52549 + t52551 + t52564;
  t52569 = 0.2*t52568;
  t52577 = t44269*t52456;
  t52578 = t43300*t52476;
  t52587 = t43852*t52506;
  t52591 = t52577 + t52578 + t52587;
  t52594 = 0.100001*t52591;
  t52596 = t52404 + t52405 + t52407 + t52460 + t52485 + t52512 + t52539 + t52569 + t52594;
  t53287 = 3.e-6*t24568*t30325*t31019*t52614;
  t53292 = -3.e-6*t31337*t52614*t31885;
  t53295 = -1.*t36924*t30325*t52614*t31901;
  t53296 = t53287 + t53292 + t53295;
  t53317 = t12143*t30325*t31019*t52614;
  t53318 = t31337*t52614*t31885;
  t53319 = -3.e-6*t24568*t30325*t52614*t31901;
  t53323 = t53317 + t53318 + t53319;
  t53329 = -1.*t30325*t31019*t31337*t52614;
  t53334 = t41464*t52614*t31885;
  t53339 = -3.e-6*t30325*t31337*t52614*t31901;
  t53340 = t53329 + t53334 + t53339;
  t53492 = -1.*t12143*t30325*t31019*t52614;
  t53497 = -1.000000000009*t31337*t52614*t31885;
  t53499 = -3.e-6*t12143*t30325*t52614*t31901;
  t53500 = t53492 + t53497 + t53499;
  t53510 = t12143*t52614*t31885;
  t53513 = t53329 + t53510 + t53339;
  t53518 = 3.e-6*t30325*t31019*t31337*t52614;
  t53519 = -3.e-6*t12143*t52614*t31885;
  t53525 = 9.e-12*t30325*t31337*t52614*t31901;
  t53527 = t53518 + t53519 + t53525;
  t53617 = -1.*t36924*t30325*t31019*t52614;
  t53621 = t53617 + t53319;
  t53629 = -3.e-6*t24568*t30325*t31019*t52614;
  t53630 = -1.*t12143*t30325*t52614*t31901;
  t53651 = t53629 + t53630;
  t53657 = -3.e-6*t30325*t31019*t31337*t52614;
  t53658 = t30325*t31337*t52614*t31901;
  t53665 = t53657 + t53658;
  t53112 = 0.2000000000018*t30325*t31337*t52614;
  t53797 = -3.e-6*t24568*t31019*t52614*t31885;
  t53804 = t36924*t52614*t31885*t31901;
  t53805 = t53156 + t53797 + t53804;
  t53814 = -1.*t12143*t31019*t52614*t31885;
  t53816 = 3.e-6*t24568*t52614*t31885*t31901;
  t53831 = t53189 + t53814 + t53816;
  t53839 = t31019*t31337*t52614*t31885;
  t53845 = 3.e-6*t31337*t52614*t31885*t31901;
  t53847 = t53202 + t53839 + t53845;
  t53613 = -6.000000000054e-7*t24568*t30325*t31019*t52614;
  t53616 = -1.*t30139*t30325*t52614*t31901;
  t53626 = t36567*t53621;
  t53654 = t38689*t53651;
  t53666 = t41449*t53665;
  t53668 = t43300*t53621;
  t53683 = t43418*t53651;
  t53687 = t43714*t53665;
  t53694 = t53668 + t53683 + t53687;
  t53697 = -0.3*t53694;
  t53704 = -1.*t43852*t53621;
  t53707 = -1.*t43714*t53651;
  t53713 = -1.*t44068*t53665;
  t53723 = t53704 + t53707 + t53713;
  t53724 = 0.2*t53723;
  t53761 = t44269*t53621;
  t53769 = t43300*t53651;
  t53771 = t43852*t53665;
  t53776 = t53761 + t53769 + t53771;
  t53777 = 0.100001*t53776;
  t53781 = t53613 + t53616 + t53626 + t53654 + t53666 + t53697 + t53724 + t53777;
  t52636 = 6.000000000054e-7*t24568*t52634;
  t52649 = t30139*t52648;
  t52660 = t36567*t52659;
  t52673 = t38689*t52672;
  t52696 = t41449*t52694;
  t52699 = t43300*t52659;
  t52703 = t43418*t52672;
  t52704 = t43714*t52694;
  t52712 = t52699 + t52703 + t52704;
  t52718 = -0.3*t52712;
  t52720 = -1.*t43852*t52659;
  t52723 = -1.*t43714*t52672;
  t52727 = -1.*t44068*t52694;
  t52730 = t52720 + t52723 + t52727;
  t52733 = 0.2*t52730;
  t52735 = t44269*t52659;
  t52739 = t43300*t52672;
  t52741 = t43852*t52694;
  t52751 = t52735 + t52739 + t52741;
  t52754 = 0.100001*t52751;
  t52755 = t52636 + t52649 + t52660 + t52673 + t52696 + t52718 + t52733 + t52754;
  t54030 = t52400*t31019;
  t54031 = -1.*t52614*t31885*t31901;
  t54043 = t54030 + t54031;
  t54027 = t36924*t53134;
  t54044 = 3.e-6*t24568*t54043;
  t54046 = t54027 + t54044;
  t54048 = t12143*t54043;
  t54052 = t53168 + t54048;
  t54055 = 3.e-6*t31337*t53134;
  t54056 = -1.*t31337*t54043;
  t54057 = t54055 + t54056;
  t54139 = 3.e-6*t12143*t53134;
  t54143 = -1.*t12143*t54043;
  t54144 = t54139 + t54143;
  t54247 = -9.e-12*t31337*t53134;
  t54251 = 3.e-6*t31337*t54043;
  t54337 = t54247 + t54251;
  t53136 = t30139*t53134;
  t53150 = 6.000000000054e-7*t24568*t53147;
  t54802 = t53168 + t53171;
  t54827 = t53193 + t53194;
  t54880 = t53205 + t53207;
  t53464 = -0.2000000000018*t30325*t31019*t31337*t52614;
  t53465 = 0.2000000000018*t12143*t52614*t31885;
  t53472 = -6.000000000054e-7*t30325*t31337*t52614*t31901;
  t53502 = t41449*t53500;
  t53515 = t38689*t53513;
  t53532 = t36567*t53527;
  t53535 = t43852*t53500;
  t53537 = t43300*t53513;
  t53544 = t44269*t53527;
  t53547 = t53535 + t53537 + t53544;
  t53548 = 0.100001*t53547;
  t53558 = t43714*t53500;
  t53567 = t43418*t53513;
  t53570 = t43300*t53527;
  t53574 = t53558 + t53567 + t53570;
  t53578 = -0.3*t53574;
  t53582 = -1.*t44068*t53500;
  t53586 = -1.*t43714*t53513;
  t53587 = -1.*t43852*t53527;
  t53589 = t53582 + t53586 + t53587;
  t53598 = 0.2*t53589;
  t53600 = t53464 + t53465 + t53472 + t53502 + t53515 + t53532 + t53548 + t53578 + t53598;
  t52967 = -0.2000000000018*t12143*t52400*t30325;
  t52969 = -0.2000000000018*t31337*t52788;
  t52974 = 6.000000000054e-7*t31337*t52648;
  t52996 = t41449*t52994;
  t53013 = t36567*t53011;
  t53021 = t38689*t53020;
  t53025 = -1.*t44068*t52994;
  t53031 = -1.*t43852*t53011;
  t53033 = -1.*t43714*t53020;
  t53036 = t53025 + t53031 + t53033;
  t53049 = 0.2*t53036;
  t53053 = t43852*t52994;
  t53057 = t44269*t53011;
  t53059 = t43300*t53020;
  t53062 = t53053 + t53057 + t53059;
  t53067 = 0.100001*t53062;
  t53071 = t43714*t52994;
  t53077 = t43300*t53011;
  t53079 = t43418*t53020;
  t53080 = t53071 + t53077 + t53079;
  t53089 = -0.3*t53080;
  t53099 = t52967 + t52969 + t52974 + t52996 + t53013 + t53021 + t53049 + t53067 + t53089;
  t55489 = t31019*t52614*t31885;
  t55490 = t52400*t31901;
  t55501 = t55489 + t55490;
  t55570 = 3.e-6*t12143*t55501;
  t55619 = -9.e-12*t12143*t54043;
  t55746 = t53156 + t55570 + t55619;
  t55752 = -1.*t12143*t55501;
  t55753 = 3.e-6*t12143*t54043;
  t55762 = t53189 + t55752 + t55753;
  t55838 = 1.000000000009*t12143*t30325*t52614;
  t55841 = t31337*t55501;
  t55850 = -3.e-6*t31337*t54043;
  t55853 = t55838 + t55841 + t55850;
  t54132 = 6.000000000054e-7*t31337*t53134;
  t54135 = -0.2000000000018*t31337*t54043;
  t54153 = t41449*t54144;
  t54237 = t38689*t54057;
  t54349 = t36567*t54337;
  t54441 = t43852*t54144;
  t54442 = t43300*t54057;
  t54466 = t44269*t54337;
  t54481 = t54441 + t54442 + t54466;
  t54482 = 0.100001*t54481;
  t54611 = t43714*t54144;
  t54618 = t43418*t54057;
  t54621 = t43300*t54337;
  t54630 = t54611 + t54618 + t54621;
  t54635 = -0.3*t54630;
  t54637 = -1.*t44068*t54144;
  t54648 = -1.*t43714*t54057;
  t54683 = -1.*t43852*t54337;
  t54711 = t54637 + t54648 + t54683;
  t54785 = 0.2*t54711;
  t54791 = t54132 + t54135 + t54153 + t54237 + t54349 + t54482 + t54635 + t54785;
  t56378 = 1.000000000009*t30325*t31337*t52614;
  t56400 = t56378 + t55752 + t55753;
  t56446 = 3.e-6*t12143*t30325*t52614;
  t56449 = 3.e-6*t31337*t55501;
  t56512 = -9.e-12*t31337*t54043;
  t56517 = t56446 + t56449 + t56512;
  t56523 = -1.*t12143*t30325*t52614;
  t56527 = -1.*t31337*t55501;
  t56533 = t56523 + t56527 + t54251;
  t53312 = t44878*t53296;
  t53328 = t44933*t53323;
  t53342 = t45358*t53340;
  t53353 = -1.*t45439*t53296;
  t53355 = 1.000000000009*t35437*t53323;
  t53356 = -1.*t45552*t53340;
  t53370 = t53353 + t53355 + t53356;
  t53398 = 0.2*t53370;
  t53413 = -1.8e-11*t35437*t53296;
  t53419 = t47600*t53323;
  t53423 = t45439*t53340;
  t53424 = t53413 + t53419 + t53423;
  t53435 = 0.100001*t53424;
  t53436 = t47600*t53296;
  t53437 = t47978*t53323;
  t53439 = -1.000000000009*t35437*t53340;
  t53449 = t53436 + t53437 + t53439;
  t53450 = -0.3*t53449;
  t53454 = t53312 + t53328 + t53342 + t53398 + t53435 + t53450;
  t52841 = t44878*t52814;
  t52853 = t44933*t52851;
  t52873 = t45358*t52867;
  t52882 = -1.*t45439*t52814;
  t52883 = 1.000000000009*t35437*t52851;
  t52890 = -1.*t45552*t52867;
  t52907 = t52882 + t52883 + t52890;
  t52918 = 0.2*t52907;
  t52919 = -1.8e-11*t35437*t52814;
  t52922 = t47600*t52851;
  t52927 = t45439*t52867;
  t52931 = t52919 + t52922 + t52927;
  t52944 = 0.100001*t52931;
  t52945 = t47600*t52814;
  t52949 = t47978*t52851;
  t52951 = -1.000000000009*t35437*t52867;
  t52954 = t52945 + t52949 + t52951;
  t52956 = -0.3*t52954;
  t52957 = t52841 + t52853 + t52873 + t52918 + t52944 + t52956;
  t54047 = t44878*t54046;
  t54053 = t44933*t54052;
  t54058 = t45358*t54057;
  t54059 = -1.*t45439*t54046;
  t54063 = 1.000000000009*t35437*t54052;
  t54067 = -1.*t45552*t54057;
  t54082 = t54059 + t54063 + t54067;
  t54083 = 0.2*t54082;
  t54094 = -1.8e-11*t35437*t54046;
  t54099 = t47600*t54052;
  t54100 = t45439*t54057;
  t54101 = t54094 + t54099 + t54100;
  t54104 = 0.100001*t54101;
  t54105 = t47600*t54046;
  t54107 = t47978*t54052;
  t54108 = -1.000000000009*t35437*t54057;
  t54113 = t54105 + t54107 + t54108;
  t54114 = -0.3*t54113;
  t54126 = t54047 + t54053 + t54058 + t54083 + t54104 + t54114;
  t51157 = 5.4e-18*t32331;
  t51158 = 0.100000000003*t44869;
  t51160 = -0.200000000003*t47600;
  t51161 = t51157 + t51158 + t51160;
  t51285 = -0.2000000000048*t32331;
  t51342 = t51311 + t35437;
  t51343 = 0.100000000003*t51342;
  t51363 = t51285 + t45029 + t51343;
  t51383 = 0.1000000000039*t32331;
  t51388 = t51311 + t38292;
  t51389 = -0.200000000003*t51388;
  t51391 = 3.e-7*t47600;
  t51401 = t51383 + t51389 + t51391;
  t57756 = 3.e-6*t30325*t31337*t52614;
  t57775 = 3.e-6*t24568*t55501;
  t57776 = t36924*t54043;
  t57781 = t57756 + t57775 + t57776;
  t51441 = t51436 + t38292;
  t57894 = -1.*t30325*t31337*t52614;
  t57914 = t12143*t55501;
  t57925 = t57894 + t57914 + t54044;
  t58054 = -1.*t41464*t30325*t52614;
  t58075 = t58054 + t56527 + t54251;
  t51545 = t51436 + t35437;
  t56431 = t45358*t56400;
  t56518 = t44878*t56517;
  t56541 = t44933*t56533;
  t56571 = -1.000000000009*t35437*t56400;
  t56594 = t47600*t56517;
  t56736 = t47978*t56533;
  t56811 = t56571 + t56594 + t56736;
  t56856 = -0.3*t56811;
  t56874 = t45439*t56400;
  t56879 = -1.8e-11*t35437*t56517;
  t56905 = t47600*t56533;
  t57026 = t56874 + t56879 + t56905;
  t57031 = 0.100001*t57026;
  t57132 = -1.*t45552*t56400;
  t57245 = -1.*t45439*t56517;
  t57439 = 1.000000000009*t35437*t56533;
  t57443 = t57132 + t57245 + t57439;
  t57444 = 0.2*t57443;
  t57499 = t56431 + t56518 + t56541 + t56856 + t57031 + t57444;
  t58853 = t30139*t30325*t31019*t52614;
  t58854 = 0.2000000000018*t31337*t52614*t31885;
  t58860 = -6.000000000054e-7*t24568*t30325*t52614*t31901;
  t58861 = t36567*t53296;
  t58907 = t38689*t53323;
  t58923 = t41449*t53340;
  t58930 = t43300*t53296;
  t58931 = t43418*t53323;
  t58935 = t43714*t53340;
  t58941 = t58930 + t58931 + t58935;
  t59015 = -0.3*t58941;
  t59123 = -1.*t43852*t53296;
  t59182 = -1.*t43714*t53323;
  t59361 = -1.*t44068*t53340;
  t59363 = t59123 + t59182 + t59361;
  t59398 = 0.2*t59363;
  t59425 = t44269*t53296;
  t59426 = t43300*t53323;
  t59434 = t43852*t53340;
  t59444 = t59425 + t59426 + t59434;
  t59461 = 0.100001*t59444;
  t59498 = t58853 + t58854 + t58860 + t58861 + t58907 + t58923 + t59015 + t59398 + t59461;
  t58312 = -0.2000000000018*t52400*t30325*t31337;
  t58322 = t30139*t52788;
  t58323 = 6.000000000054e-7*t24568*t52648;
  t58324 = t36567*t52814;
  t58325 = t38689*t52851;
  t58331 = t41449*t52867;
  t58332 = t43300*t52814;
  t58333 = t43418*t52851;
  t58372 = t43714*t52867;
  t58378 = t58332 + t58333 + t58372;
  t58381 = -0.3*t58378;
  t58414 = -1.*t43852*t52814;
  t58463 = -1.*t43714*t52851;
  t58472 = -1.*t44068*t52867;
  t58503 = t58414 + t58463 + t58472;
  t58505 = 0.2*t58503;
  t58523 = t44269*t52814;
  t58594 = t43300*t52851;
  t58812 = t43852*t52867;
  t58821 = t58523 + t58594 + t58812;
  t58823 = 0.100001*t58821;
  t58825 = t58312 + t58322 + t58323 + t58324 + t58325 + t58331 + t58381 + t58505 + t58823;
  t59499 = 6.000000000054e-7*t24568*t53134;
  t59501 = t30139*t54043;
  t59504 = t36567*t54046;
  t59516 = t38689*t54052;
  t59534 = t41449*t54057;
  t59551 = t43300*t54046;
  t59553 = t43418*t54052;
  t59582 = t43714*t54057;
  t59592 = t59551 + t59553 + t59582;
  t59594 = -0.3*t59592;
  t59596 = -1.*t43852*t54046;
  t59605 = -1.*t43714*t54052;
  t59615 = -1.*t44068*t54057;
  t59621 = t59596 + t59605 + t59615;
  t59623 = 0.2*t59621;
  t59626 = t44269*t54046;
  t59643 = t43300*t54052;
  t59644 = t43852*t54057;
  t59647 = t59626 + t59643 + t59644;
  t59696 = 0.100001*t59647;
  t59705 = t59499 + t59501 + t59504 + t59516 + t59534 + t59594 + t59623 + t59696;
  t60336 = t44878*t57781;
  t60349 = t44933*t57925;
  t60352 = t45358*t58075;
  t60399 = -1.*t45439*t57781;
  t60402 = 1.000000000009*t35437*t57925;
  t60404 = -1.*t45552*t58075;
  t60408 = t60399 + t60402 + t60404;
  t60412 = 0.2*t60408;
  t60413 = -1.8e-11*t35437*t57781;
  t60416 = t47600*t57925;
  t60417 = t45439*t58075;
  t60442 = t60413 + t60416 + t60417;
  t60444 = 0.100001*t60442;
  t60455 = t47600*t57781;
  t60457 = t47978*t57925;
  t60459 = -1.000000000009*t35437*t58075;
  t60462 = t60455 + t60457 + t60459;
  t60463 = -0.3*t60462;
  t60469 = t60336 + t60349 + t60352 + t60412 + t60444 + t60463;
  t59775 = -0.2000000000018*t12143*t30325*t52614;
  t59833 = -0.2000000000018*t31337*t55501;
  t59842 = 6.000000000054e-7*t31337*t54043;
  t59843 = t41449*t56400;
  t59920 = t36567*t56517;
  t59964 = t38689*t56533;
  t59967 = -1.*t44068*t56400;
  t59968 = -1.*t43852*t56517;
  t59980 = -1.*t43714*t56533;
  t60006 = t59967 + t59968 + t59980;
  t60011 = 0.2*t60006;
  t60121 = t43852*t56400;
  t60128 = t44269*t56517;
  t60137 = t43300*t56533;
  t60158 = t60121 + t60128 + t60137;
  t60181 = 0.100001*t60158;
  t60182 = t43714*t56400;
  t60193 = t43300*t56517;
  t60213 = t43418*t56533;
  t60248 = t60182 + t60193 + t60213;
  t60250 = -0.3*t60248;
  t60329 = t59775 + t59833 + t59842 + t59843 + t59920 + t59964 + t60011 + t60181 + t60250;
  t60742 = t36924*t52400*t30325*t31019;
  t60744 = 3.e-6*t24568*t52400*t30325*t31901;
  t60786 = t60742 + t60744;
  t60796 = t12143*t52400*t30325*t31901;
  t60823 = t52411 + t60796;
  t60830 = 3.e-6*t52400*t30325*t31019*t31337;
  t60887 = -1.*t52400*t30325*t31337*t31901;
  t60888 = t60830 + t60887;
  t61050 = -3.e-6*t24568*t52400*t30325*t31019;
  t61054 = 3.e-6*t52400*t31337*t31885;
  t61074 = t36924*t52400*t30325*t31901;
  t61085 = t61050 + t61054 + t61074;
  t61108 = -1.*t12143*t52400*t30325*t31019;
  t61122 = -1.*t52400*t31337*t31885;
  t61127 = t61108 + t61122 + t60744;
  t61143 = t52400*t30325*t31019*t31337;
  t61158 = -1.*t41464*t52400*t31885;
  t61159 = 3.e-6*t52400*t30325*t31337*t31901;
  t61180 = t61143 + t61158 + t61159;
  t61348 = 1.000000000009*t52400*t31337*t31885;
  t61402 = 3.e-6*t12143*t52400*t30325*t31901;
  t61416 = t52464 + t61348 + t61402;
  t61439 = -3.e-6*t52400*t30325*t31019*t31337;
  t61478 = 3.e-6*t12143*t52400*t31885;
  t61489 = -9.e-12*t52400*t30325*t31337*t31901;
  t61495 = t61439 + t61478 + t61489;
  t61561 = -1.*t12143*t52400*t31885;
  t61562 = t61143 + t61561 + t61159;
  t61885 = 3.e-6*t24568*t52400*t31019*t31885;
  t61888 = -1.*t36924*t52400*t31885*t31901;
  t61890 = t52766 + t61885 + t61888;
  t61910 = t12143*t52400*t31019*t31885;
  t61912 = -3.e-6*t24568*t52400*t31885*t31901;
  t61918 = t52842 + t61910 + t61912;
  t61924 = -1.*t52400*t31019*t31337*t31885;
  t61929 = -3.e-6*t52400*t31337*t31885*t31901;
  t61942 = t52855 + t61924 + t61929;
  t60704 = 6.000000000054e-7*t24568*t52400*t30325*t31019;
  t60733 = t30139*t52400*t30325*t31901;
  t60794 = t36567*t60786;
  t60828 = t38689*t60823;
  t60893 = t41449*t60888;
  t60894 = t43300*t60786;
  t60897 = t43418*t60823;
  t60910 = t43714*t60888;
  t60912 = t60894 + t60897 + t60910;
  t60915 = -0.3*t60912;
  t60940 = -1.*t43852*t60786;
  t60946 = -1.*t43714*t60823;
  t60948 = -1.*t44068*t60888;
  t60982 = t60940 + t60946 + t60948;
  t60984 = 0.2*t60982;
  t60987 = t44269*t60786;
  t60988 = t43300*t60823;
  t60992 = t43852*t60888;
  t61006 = t60987 + t60988 + t60992;
  t61008 = 0.100001*t61006;
  t61035 = t60704 + t60733 + t60794 + t60828 + t60893 + t60915 + t60984 + t61008;
  t62131 = t52789 + t52797;
  t62137 = t52844 + t52658;
  t62143 = t52859 + t52862;
  t62268 = t31019*t52614;
  t62269 = t52400*t31885*t31901;
  t62270 = t62268 + t62269;
  t62264 = t36924*t52788;
  t62302 = 3.e-6*t24568*t62270;
  t62306 = t62264 + t62302;
  t62325 = t12143*t62270;
  t62449 = t52789 + t62325;
  t62538 = -1.*t31337*t62270;
  t62540 = t53000 + t62538;
  t62661 = 3.e-6*t12143*t52788;
  t62666 = -1.*t12143*t62270;
  t62669 = t62661 + t62666;
  t62703 = -9.e-12*t31337*t52788;
  t62708 = 3.e-6*t31337*t62270;
  t62734 = t62703 + t62708;
  t61257 = 0.2000000000018*t52400*t30325*t31019*t31337;
  t61327 = -0.2000000000018*t12143*t52400*t31885;
  t61338 = 6.000000000054e-7*t52400*t30325*t31337*t31901;
  t61424 = t41449*t61416;
  t61500 = t36567*t61495;
  t61570 = t38689*t61562;
  t61571 = -1.*t44068*t61416;
  t61572 = -1.*t43852*t61495;
  t61573 = -1.*t43714*t61562;
  t61574 = t61571 + t61572 + t61573;
  t61608 = 0.2*t61574;
  t61632 = t43852*t61416;
  t61686 = t44269*t61495;
  t61700 = t43300*t61562;
  t61703 = t61632 + t61686 + t61700;
  t61714 = 0.100001*t61703;
  t61739 = t43714*t61416;
  t61765 = t43300*t61495;
  t61776 = t43418*t61562;
  t61778 = t61739 + t61765 + t61776;
  t61829 = -0.3*t61778;
  t61842 = t61257 + t61327 + t61338 + t61424 + t61500 + t61570 + t61608 + t61714 + t61829;
  t62913 = 3.e-6*t12143*t52634;
  t62915 = -9.e-12*t12143*t62270;
  t62918 = t52766 + t62913 + t62915;
  t62927 = -1.*t12143*t52634;
  t62955 = 3.e-6*t12143*t62270;
  t62960 = t52842 + t62927 + t62955;
  t62963 = -1.000000000009*t12143*t52400*t30325;
  t62964 = t31337*t52634;
  t62970 = -3.e-6*t31337*t62270;
  t62971 = t62963 + t62964 + t62970;
  t62620 = 6.000000000054e-7*t31337*t52788;
  t62637 = -0.2000000000018*t31337*t62270;
  t62670 = t41449*t62669;
  t62698 = t38689*t62540;
  t62738 = t36567*t62734;
  t62752 = t43852*t62669;
  t62756 = t43300*t62540;
  t62760 = t44269*t62734;
  t62800 = t62752 + t62756 + t62760;
  t62822 = 0.100001*t62800;
  t62826 = t43714*t62669;
  t62829 = t43418*t62540;
  t62835 = t43300*t62734;
  t62836 = t62826 + t62829 + t62835;
  t62859 = -0.3*t62836;
  t62867 = -1.*t44068*t62669;
  t62872 = -1.*t43714*t62540;
  t62875 = -1.*t43852*t62734;
  t62885 = t62867 + t62872 + t62875;
  t62896 = 0.2*t62885;
  t62901 = t62620 + t62637 + t62670 + t62698 + t62738 + t62822 + t62859 + t62896;
  t63166 = -1.000000000009*t52400*t30325*t31337;
  t63167 = t63166 + t62927 + t62955;
  t63169 = -3.e-6*t12143*t52400*t30325;
  t63170 = -9.e-12*t31337*t62270;
  t63171 = t63169 + t52676 + t63170;
  t63243 = t12143*t52400*t30325;
  t63268 = -1.*t31337*t52634;
  t63298 = t63243 + t63268 + t62708;
  t61100 = t44878*t61085;
  t61134 = t44933*t61127;
  t61191 = t45358*t61180;
  t61192 = -1.*t45439*t61085;
  t61214 = 1.000000000009*t35437*t61127;
  t61230 = -1.*t45552*t61180;
  t61233 = t61192 + t61214 + t61230;
  t61235 = 0.2*t61233;
  t61239 = -1.8e-11*t35437*t61085;
  t61240 = t47600*t61127;
  t61243 = t45439*t61180;
  t61244 = t61239 + t61240 + t61243;
  t61245 = 0.100001*t61244;
  t61246 = t47600*t61085;
  t61250 = t47978*t61127;
  t61251 = -1.000000000009*t35437*t61180;
  t61252 = t61246 + t61250 + t61251;
  t61254 = -0.3*t61252;
  t61255 = t61100 + t61134 + t61191 + t61235 + t61245 + t61254;
  t62321 = t44878*t62306;
  t62464 = t44933*t62449;
  t62552 = t45358*t62540;
  t62558 = -1.*t45439*t62306;
  t62564 = 1.000000000009*t35437*t62449;
  t62565 = -1.*t45552*t62540;
  t62567 = t62558 + t62564 + t62565;
  t62568 = 0.2*t62567;
  t62570 = -1.8e-11*t35437*t62306;
  t62571 = t47600*t62449;
  t62575 = t45439*t62540;
  t62576 = t62570 + t62571 + t62575;
  t62577 = 0.100001*t62576;
  t62580 = t47600*t62306;
  t62583 = t47978*t62449;
  t62594 = -1.000000000009*t35437*t62540;
  t62596 = t62580 + t62583 + t62594;
  t62602 = -0.3*t62596;
  t62603 = t62321 + t62464 + t62552 + t62568 + t62577 + t62602;
  t63447 = -3.e-6*t52400*t30325*t31337;
  t63450 = t36924*t62270;
  t63457 = t63447 + t52669 + t63450;
  t63465 = t52400*t30325*t31337;
  t63467 = t12143*t52634;
  t63480 = t63465 + t63467 + t62302;
  t63485 = t41464*t52400*t30325;
  t63491 = t63485 + t63268 + t62708;
  t63168 = t45358*t63167;
  t63186 = t44878*t63171;
  t63312 = t44933*t63298;
  t63316 = -1.000000000009*t35437*t63167;
  t63317 = t47600*t63171;
  t63328 = t47978*t63298;
  t63331 = t63316 + t63317 + t63328;
  t63332 = -0.3*t63331;
  t63393 = t45439*t63167;
  t63397 = -1.8e-11*t35437*t63171;
  t63400 = t47600*t63298;
  t63401 = t63393 + t63397 + t63400;
  t63405 = 0.100001*t63401;
  t63409 = -1.*t45552*t63167;
  t63410 = -1.*t45439*t63171;
  t63417 = 1.000000000009*t35437*t63298;
  t63420 = t63409 + t63410 + t63417;
  t63423 = 0.2*t63420;
  t63430 = t63168 + t63186 + t63312 + t63332 + t63405 + t63423;
  p_output1[0]=(t31316 + t31891 + t31970 + t36567*t36942 + t38689*t41369 + t41449*t42938 - 0.3*(t36942*t43300 + t41369*t43418 + t42938*t43714) + 0.2*(-1.*t41369*t43714 - 1.*t36942*t43852 - 1.*t42938*t44068) + 0.100001*(t41369*t43300 + t42938*t43852 + t36942*t44269))*var2[4] + t44848*var2[5] + t49469*var2[10] + t48277*var2[12];
  p_output1[1]=t44848*var2[4] + (t31316 + t31970 + t36567*t49927 + t38689*t49938 + t41449*t50031 - 0.3*(t43300*t49927 + t43418*t49938 + t43714*t50031) + 0.100001*(t44269*t49927 + t43300*t49938 + t43852*t50031) + 0.2*(-1.*t43852*t49927 - 1.*t43714*t49938 - 1.*t44068*t50031))*var2[5] + t50619*var2[10] + t50463*var2[12];
  p_output1[2]=t49469*var2[4] + t50619*var2[5] + (-0.2000000000018*t12143*t30325*t31019 + t31891 - 6.000000000054e-7*t12143*t30325*t31901 + t38689*t50888 + t36567*t50901 + t41449*t50931 - 0.3*(t43418*t50888 + t43300*t50901 + t43714*t50931) + 0.100001*(t43300*t50888 + t44269*t50901 + t43852*t50931) + 0.2*(-1.*t43714*t50888 - 1.*t43852*t50901 - 1.*t44068*t50931))*var2[10] + t50838*var2[12];
  p_output1[3]=t48277*var2[4] + t50463*var2[5] + t50838*var2[10] + (t51161*t51217 + t51363*t51374 + t51401*t51419 + 0.100001*(-1.8e-11*t32331*t51217 + t45439*t51374 + t44874*t51419) - 0.3*(t45439*t51217 - 1.000000000009*t32331*t51419 + t51374*t51441) + 0.2*(-1.*t44874*t51217 + 1.000000000009*t32331*t51374 - 1.*t51419*t51545))*var2[12];
  p_output1[4]=1.;
  p_output1[5]=0.2000000000018*t30325*t31337 - 1.*t30139*t31019*t31885 + 6.000000000054e-7*t24568*t31885*t31901 + t36567*t44888 + t38689*t45018 + t41449*t45376 - 0.3*(t43300*t44888 + t43418*t45018 + t43714*t45376) + 0.100001*(t44269*t44888 + t43300*t45018 + t43852*t45376) + 0.2*(-1.*t43852*t44888 - 1.*t43714*t45018 - 1.*t44068*t45376);
  p_output1[6]=-6.000000000054e-7*t24568*t30325*t31019 - 1.*t30139*t30325*t31901 + t36567*t50255 + t38689*t50269 + t41449*t50283 - 0.3*(t43300*t50255 + t43418*t50269 + t43714*t50283) + 0.100001*(t44269*t50255 + t43300*t50269 + t43852*t50283) + 0.2*(-1.*t43852*t50255 - 1.*t43714*t50269 - 1.*t44068*t50283);
  p_output1[7]=-0.2000000000018*t30325*t31019*t31337 + 0.2000000000018*t12143*t31885 - 6.000000000054e-7*t30325*t31337*t31901 + t41449*t50633 + t38689*t50665 + t36567*t50694 - 0.3*(t43714*t50633 + t43418*t50665 + t43300*t50694) + 0.2*(-1.*t44068*t50633 - 1.*t43714*t50665 - 1.*t43852*t50694) + 0.100001*(t43852*t50633 + t43300*t50665 + t44269*t50694);
  p_output1[8]=t44878*t51217 + t44933*t51374 + t45358*t51419 - 0.3*(t47600*t51217 + t47978*t51374 - 1.000000000009*t35437*t51419) + 0.100001*(-1.8e-11*t35437*t51217 + t47600*t51374 + t45439*t51419) + 0.2*(-1.*t45439*t51217 + 1.000000000009*t35437*t51374 - 1.*t45552*t51419);
  p_output1[9]=(t53112 + t53136 + t53150 + t36567*t53174 + t38689*t53198 + t41449*t53210 - 0.3*(t43300*t53174 + t43418*t53198 + t43714*t53210) + 0.100001*(t44269*t53174 + t43300*t53198 + t43852*t53210) + 0.2*(-1.*t43852*t53174 - 1.*t43714*t53198 - 1.*t44068*t53210))*var2[3] + t52596*var2[4] + t52755*var2[5] + t53099*var2[10] + t52957*var2[12];
  p_output1[10]=t52596*var2[3] + (-1.*t30139*t31019*t31885*t52614 + 6.000000000054e-7*t24568*t31885*t31901*t52614 + t53112 + t36567*t53805 + t38689*t53831 + t41449*t53847 - 0.3*(t43300*t53805 + t43418*t53831 + t43714*t53847) + 0.100001*(t44269*t53805 + t43300*t53831 + t43852*t53847) + 0.2*(-1.*t43852*t53805 - 1.*t43714*t53831 - 1.*t44068*t53847))*var2[4] + t53781*var2[5] + t53600*var2[10] + t53454*var2[12];
  p_output1[11]=t52755*var2[3] + t53781*var2[4] + (t53136 + t53150 + t36567*t54802 + t38689*t54827 + t41449*t54880 - 0.3*(t43300*t54802 + t43418*t54827 + t43714*t54880) + 0.100001*(t44269*t54802 + t43300*t54827 + t43852*t54880) + 0.2*(-1.*t43852*t54802 - 1.*t43714*t54827 - 1.*t44068*t54880))*var2[5] + t54791*var2[10] + t54126*var2[12];
  p_output1[12]=t53099*var2[3] + t53600*var2[4] + t54791*var2[5] + (t53112 + 6.000000000054e-7*t12143*t54043 - 0.2000000000018*t12143*t55501 + t36567*t55746 + t38689*t55762 + t41449*t55853 - 0.3*(t43300*t55746 + t43418*t55762 + t43714*t55853) + 0.100001*(t44269*t55746 + t43300*t55762 + t43852*t55853) + 0.2*(-1.*t43852*t55746 - 1.*t43714*t55762 - 1.*t44068*t55853))*var2[10] + t57499*var2[12];
  p_output1[13]=t52957*var2[3] + t53454*var2[4] + t54126*var2[5] + t57499*var2[10] + (t51161*t57781 + t51363*t57925 + t51401*t58075 - 0.3*(t45439*t57781 + t51441*t57925 - 1.000000000009*t32331*t58075) + 0.100001*(-1.8e-11*t32331*t57781 + t45439*t57925 + t44874*t58075) + 0.2*(-1.*t44874*t57781 + 1.000000000009*t32331*t57925 - 1.*t51545*t58075))*var2[12];
  p_output1[14]=1.;
  p_output1[15]=t58825;
  p_output1[16]=t59498;
  p_output1[17]=t59705;
  p_output1[18]=t60329;
  p_output1[19]=t60469;
  p_output1[20]=t58825*var2[3] + t59498*var2[4] + t59705*var2[5] + t60329*var2[10] + t60469*var2[12];
  p_output1[21]=t59498*var2[3] + (t30139*t31019*t31885*t52400 - 6.000000000054e-7*t24568*t31885*t31901*t52400 + t58312 + t36567*t61890 + t38689*t61918 + t41449*t61942 - 0.3*(t43300*t61890 + t43418*t61918 + t43714*t61942) + 0.100001*(t44269*t61890 + t43300*t61918 + t43852*t61942) + 0.2*(-1.*t43852*t61890 - 1.*t43714*t61918 - 1.*t44068*t61942))*var2[4] + t61035*var2[5] + t61842*var2[10] + t61255*var2[12];
  p_output1[22]=t59705*var2[3] + t61035*var2[4] + (t58322 + t58323 + t36567*t62131 + t38689*t62137 + t41449*t62143 - 0.3*(t43300*t62131 + t43418*t62137 + t43714*t62143) + 0.100001*(t44269*t62131 + t43300*t62137 + t43852*t62143) + 0.2*(-1.*t43852*t62131 - 1.*t43714*t62137 - 1.*t44068*t62143))*var2[5] + t62901*var2[10] + t62603*var2[12];
  p_output1[23]=t60329*var2[3] + t61842*var2[4] + t62901*var2[5] + (-0.2000000000018*t12143*t52634 + t58312 + 6.000000000054e-7*t12143*t62270 + t36567*t62918 + t38689*t62960 + t41449*t62971 - 0.3*(t43300*t62918 + t43418*t62960 + t43714*t62971) + 0.100001*(t44269*t62918 + t43300*t62960 + t43852*t62971) + 0.2*(-1.*t43852*t62918 - 1.*t43714*t62960 - 1.*t44068*t62971))*var2[10] + t63430*var2[12];
  p_output1[24]=t60469*var2[3] + t61255*var2[4] + t62603*var2[5] + t63430*var2[10] + (t51161*t63457 + t51363*t63480 + t51401*t63491 - 0.3*(t45439*t63457 + t51441*t63480 - 1.000000000009*t32331*t63491) + 0.100001*(-1.8e-11*t32331*t63457 + t45439*t63480 + t44874*t63491) + 0.2*(-1.*t44874*t63457 + 1.000000000009*t32331*t63480 - 1.*t51545*t63491))*var2[12];
  p_output1[25]=1.;
  p_output1[26]=-0.2000000000018*t30325*t31337*t52614 + 6.000000000054e-7*t24568*t54043 + t30139*t55501 + t36567*t57781 + t38689*t57925 + t41449*t58075 - 0.3*(t43300*t57781 + t43418*t57925 + t43714*t58075) + 0.100001*(t44269*t57781 + t43300*t57925 + t43852*t58075) + 0.2*(-1.*t43852*t57781 - 1.*t43714*t57925 - 1.*t44068*t58075);
  p_output1[27]=-1.*t30139*t30325*t31019*t52400 - 0.2000000000018*t31337*t31885*t52400 + 6.000000000054e-7*t24568*t30325*t31901*t52400 + t36567*t61085 + t38689*t61127 + t41449*t61180 - 0.3*(t43300*t61085 + t43418*t61127 + t43714*t61180) + 0.100001*(t44269*t61085 + t43300*t61127 + t43852*t61180) + 0.2*(-1.*t43852*t61085 - 1.*t43714*t61127 - 1.*t44068*t61180);
  p_output1[28]=6.000000000054e-7*t24568*t52788 + t30139*t62270 + t36567*t62306 + t38689*t62449 + t41449*t62540 - 0.3*(t43300*t62306 + t43418*t62449 + t43714*t62540) + 0.100001*(t44269*t62306 + t43300*t62449 + t43852*t62540) + 0.2*(-1.*t43852*t62306 - 1.*t43714*t62449 - 1.*t44068*t62540);
  p_output1[29]=0.2000000000018*t12143*t30325*t52400 - 0.2000000000018*t31337*t52634 + 6.000000000054e-7*t31337*t62270 + t41449*t63167 + t36567*t63171 + t38689*t63298 + 0.100001*(t43852*t63167 + t44269*t63171 + t43300*t63298) - 0.3*(t43714*t63167 + t43300*t63171 + t43418*t63298) + 0.2*(-1.*t44068*t63167 - 1.*t43852*t63171 - 1.*t43714*t63298);
  p_output1[30]=t44878*t63457 + t44933*t63480 + t45358*t63491 - 0.3*(t47600*t63457 + t47978*t63480 - 1.000000000009*t35437*t63491) + 0.100001*(-1.8e-11*t35437*t63457 + t47600*t63480 + t45439*t63491) + 0.2*(-1.*t45439*t63457 + 1.000000000009*t35437*t63480 - 1.*t45552*t63491);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_LeftBackFoot_BackStance.hh"

namespace BackStance
{

void J_dh_LeftBackFoot_BackStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
