/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:12:59 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t38241;
  double t38255;
  double t39182;
  double t41423;
  double t42578;
  double t43858;
  double t44537;
  double t29344;
  double t45227;
  double t14539;
  double t48377;
  double t46806;
  double t48156;
  double t48811;
  double t48816;
  double t48795;
  double t48442;
  double t48757;
  double t48759;
  double t48760;
  double t48761;
  double t48797;
  double t48821;
  double t48822;
  double t48978;
  double t48988;
  double t49000;
  double t49003;
  double t49008;
  double t30010;
  double t46134;
  double t46803;
  double t48421;
  double t48444;
  double t48508;
  double t48689;
  double t48733;
  double t48765;
  double t48824;
  double t48829;
  double t48861;
  double t48871;
  double t48888;
  double t48889;
  double t48897;
  double t48914;
  double t48928;
  double t48936;
  double t48939;
  double t48958;
  double t49011;
  double t49046;
  double t49123;
  double t49245;
  double t49298;
  double t50217;
  double t50340;
  double t50353;
  double t50363;
  double t50368;
  double t50376;
  double t50635;
  double t50636;
  double t50683;
  double t50732;
  double t50733;
  double t50735;
  double t50747;
  double t50751;
  double t50753;
  double t51081;
  double t51082;
  double t51095;
  double t51096;
  double t50968;
  double t50991;
  double t51017;
  double t51032;
  double t51076;
  double t51077;
  double t51097;
  double t51103;
  double t51114;
  double t51115;
  double t51117;
  double t51123;
  double t51125;
  double t51134;
  double t51157;
  double t51182;
  double t51186;
  double t51190;
  double t51193;
  double t51196;
  double t51199;
  double t51200;
  double t51234;
  double t51246;
  double t51252;
  double t51256;
  double t51277;
  double t51300;
  double t51209;
  double t51211;
  double t51212;
  double t51111;
  double t51206;
  double t51207;
  double t50903;
  double t50905;
  double t50935;
  double t51375;
  double t51651;
  double t51722;
  double t52429;
  double t52435;
  double t52528;
  double t53048;
  double t53050;
  double t53081;
  double t53107;
  double t53110;
  double t53299;
  double t53431;
  double t53533;
  double t51833;
  double t55041;
  double t55063;
  double t55064;
  double t52133;
  double t52598;
  double t52689;
  double t52809;
  double t52898;
  double t55037;
  double t55141;
  double t55192;
  double t55203;
  double t51881;
  double t51935;
  double t52024;
  double t52212;
  double t52311;
  double t52325;
  double t55329;
  double t55351;
  double t52601;
  double t52606;
  double t52623;
  double t55467;
  double t55503;
  double t52693;
  double t52695;
  double t52712;
  double t55630;
  double t55636;
  double t52813;
  double t52826;
  double t52834;
  double t55698;
  double t55769;
  double t52900;
  double t52909;
  double t52913;
  double t56407;
  double t56409;
  double t56418;
  double t56440;
  double t56441;
  double t56445;
  double t56499;
  double t56500;
  double t56503;
  double t56756;
  double t56888;
  double t56895;
  double t57150;
  double t57196;
  double t57199;
  double t55158;
  double t57355;
  double t57356;
  double t57359;
  double t57361;
  double t55273;
  double t55391;
  double t55525;
  double t55649;
  double t55803;
  double t57370;
  double t57404;
  double t57417;
  double t55176;
  double t55179;
  double t55283;
  double t55292;
  double t57440;
  double t55396;
  double t55409;
  double t57679;
  double t57682;
  double t55562;
  double t55603;
  double t57700;
  double t57776;
  double t55669;
  double t55677;
  double t57884;
  double t57924;
  double t55808;
  double t55827;
  double t56378;
  double t56395;
  double t56404;
  double t58421;
  double t58443;
  double t56428;
  double t56429;
  double t56430;
  double t58925;
  double t59225;
  double t60411;
  double t60422;
  double t60438;
  double t60516;
  double t60521;
  double t60596;
  double t59549;
  double t59556;
  double t56436;
  double t56465;
  double t56469;
  double t59616;
  double t59644;
  double t59694;
  double t59827;
  double t59891;
  double t59909;
  double t61453;
  double t61462;
  double t61486;
  double t61488;
  double t57480;
  double t57495;
  double t57502;
  double t57503;
  double t57519;
  double t61650;
  double t61652;
  double t61653;
  double t61471;
  double t57841;
  double t61485;
  double t61534;
  double t61621;
  double t61623;
  double t61627;
  double t61656;
  double t57829;
  double t61736;
  double t61666;
  double t61687;
  double t61721;
  double t61734;
  double t61753;
  double t61880;
  double t61879;
  double t61884;
  double t57529;
  double t57535;
  double t61724;
  double t61727;
  double t61927;
  double t61928;
  double t62018;
  double t62022;
  double t62025;
  double t62029;
  double t62032;
  double t62036;
  double t57830;
  double t57834;
  double t61959;
  double t61973;
  double t57842;
  double t57844;
  double t61994;
  double t61995;
  double t57392;
  double t57393;
  double t61905;
  double t61932;
  double t61937;
  double t61984;
  double t61996;
  double t61998;
  double t62147;
  double t62151;
  double t62153;
  double t62158;
  double t62161;
  double t62168;
  double t62182;
  double t62183;
  double t62189;
  double t62192;
  double t62194;
  double t62198;
  double t62028;
  double t62052;
  double t62057;
  double t62246;
  double t62248;
  double t62253;
  double t62259;
  double t62262;
  double t62267;
  double t62079;
  double t62082;
  double t62092;
  double t62095;
  double t62109;
  double t62124;
  double t62127;
  double t61887;
  double t61941;
  double t61946;
  double t62271;
  double t62275;
  double t62277;
  double t62386;
  double t62395;
  double t62396;
  double t62402;
  double t62407;
  double t62410;
  double t61982;
  double t62000;
  double t62002;
  double t62301;
  double t62308;
  double t62313;
  double t62319;
  double t62342;
  double t62351;
  double t62357;
  t38241 = Cos(var1[9]);
  t38255 = -1.*t38241;
  t39182 = 1. + t38255;
  t41423 = 3.e-6*t39182;
  t42578 = 3.e-6*t38241;
  t43858 = t41423 + t42578;
  t44537 = Sin(var1[5]);
  t29344 = Cos(var1[5]);
  t45227 = Sin(var1[7]);
  t14539 = Sin(var1[3]);
  t48377 = Cos(var1[7]);
  t46806 = Cos(var1[3]);
  t48156 = Cos(var1[4]);
  t48811 = 9.e-12*t39182;
  t48816 = t48811 + t38255;
  t48795 = Sin(var1[9]);
  t48442 = Sin(var1[4]);
  t48757 = -9.e-12*t39182;
  t48759 = 1. + t48757;
  t48760 = -3.e-6*t48759;
  t48761 = t48760 + t41423;
  t48797 = 1.000000000009*t48377*t48795;
  t48821 = t48816*t45227;
  t48822 = t48797 + t48821;
  t48978 = -1.000000000009*t39182;
  t48988 = 1. + t48978;
  t49000 = t48988*t48377;
  t49003 = t48795*t45227;
  t49008 = t49000 + t49003;
  t30010 = -1.*t29344;
  t46134 = t43858*t44537*t45227;
  t46803 = t30010 + t46134;
  t48421 = t43858*t48156*t48377;
  t48444 = t43858*t29344*t45227;
  t48508 = t44537 + t48444;
  t48689 = -1.*t48442*t48508;
  t48733 = t48421 + t48689;
  t48765 = t48761*t29344;
  t48824 = t44537*t48822;
  t48829 = t48765 + t48824;
  t48861 = t48816*t48377;
  t48871 = -1.000000000009*t48795*t45227;
  t48888 = t48861 + t48871;
  t48889 = t48156*t48888;
  t48897 = -1.*t48761*t44537;
  t48914 = t29344*t48822;
  t48928 = t48897 + t48914;
  t48936 = -1.*t48442*t48928;
  t48939 = t48889 + t48936;
  t48958 = 3.e-6*t29344*t48795;
  t49011 = t44537*t49008;
  t49046 = t48958 + t49011;
  t49123 = t48377*t48795;
  t49245 = -1.*t48988*t45227;
  t49298 = t49123 + t49245;
  t50217 = t48156*t49298;
  t50340 = -3.e-6*t48795*t44537;
  t50353 = t29344*t49008;
  t50363 = t50340 + t50353;
  t50368 = -1.*t48442*t50363;
  t50376 = t50217 + t50368;
  t50635 = -1.*t43858*t48377*t48442;
  t50636 = -1.*t48156*t48508;
  t50683 = t50635 + t50636;
  t50732 = -1.*t48442*t48888;
  t50733 = -1.*t48156*t48928;
  t50735 = t50732 + t50733;
  t50747 = -1.*t48442*t49298;
  t50751 = -1.*t48156*t50363;
  t50753 = t50747 + t50751;
  t51081 = 0.2*t48988;
  t51082 = 0.2000000000048*t39182;
  t51095 = 0.0999997000009*t48795;
  t51096 = t51081 + t51082 + t51095;
  t50968 = 1.2e-12*var1[9];
  t50991 = 0.0999997000009*t39182;
  t51017 = -3.e-12*t48795;
  t51032 = t50968 + t50991 + t51017;
  t51076 = t48377*t51032;
  t51077 = 0.2*t45227;
  t51097 = -1.*t51096*t45227;
  t51103 = t51076 + t51077 + t51097;
  t51114 = -4.e-7*var1[9];
  t51115 = 0.1*t48759;
  t51117 = 3.000000000027e-7*t39182;
  t51123 = -9.e-18*t48795;
  t51125 = t51114 + t51115 + t51117 + t51123;
  t51134 = -1.*t51125*t44537;
  t51157 = -1.*t48377;
  t51182 = 1. + t51157;
  t51186 = 0.2*t51182;
  t51190 = t48377*t51096;
  t51193 = t51032*t45227;
  t51196 = t51186 + t51190 + t51193;
  t51199 = t29344*t51196;
  t51200 = t51134 + t51199;
  t51234 = t48156*t51103;
  t51246 = -1.*t48442*t51200;
  t51252 = t51234 + t51246;
  t51256 = t43858*t48377*t48442;
  t51277 = t48156*t48508;
  t51300 = t51256 + t51277;
  t51209 = t48442*t51103;
  t51211 = t48156*t51200;
  t51212 = t51209 + t51211;
  t51111 = -1.*t48442*t51103;
  t51206 = -1.*t48156*t51200;
  t51207 = t51111 + t51206;
  t50903 = t48442*t48888;
  t50905 = t48156*t48928;
  t50935 = t50903 + t50905;
  t51375 = t29344*t51125;
  t51651 = t44537*t51196;
  t51722 = t51375 + t51651;
  t52429 = t48442*t49298;
  t52435 = t48156*t50363;
  t52528 = t52429 + t52435;
  t53048 = -1.*t43858*t44537*t45227;
  t53050 = t29344 + t53048;
  t53081 = -1.*t48761*t29344;
  t53107 = -1.*t44537*t48822;
  t53110 = t53081 + t53107;
  t53299 = -3.e-6*t29344*t48795;
  t53431 = -1.*t44537*t49008;
  t53533 = t53299 + t53431;
  t51833 = -1.*t46803*t51722;
  t55041 = -1.*t29344*t51125;
  t55063 = -1.*t44537*t51196;
  t55064 = t55041 + t55063;
  t52133 = t48829*t51722;
  t52598 = t46803*t51722;
  t52689 = -1.*t51722*t49046;
  t52809 = -1.*t48829*t51722;
  t52898 = t51722*t49046;
  t55037 = -1.*t46803*t51200;
  t55141 = -1.*t48508*t51722;
  t55192 = t48829*t51200;
  t55203 = t48928*t51722;
  t51881 = -1.*t51300*t51212;
  t51935 = -1.*t48733*t51252;
  t52024 = t51833 + t51881 + t51935;
  t52212 = t50935*t51212;
  t52311 = t48939*t51252;
  t52325 = t52133 + t52212 + t52311;
  t55329 = t46803*t51200;
  t55351 = t48508*t51722;
  t52601 = t51300*t51212;
  t52606 = t48733*t51252;
  t52623 = t52598 + t52601 + t52606;
  t55467 = -1.*t51722*t50363;
  t55503 = -1.*t51200*t49046;
  t52693 = -1.*t51212*t52528;
  t52695 = -1.*t51252*t50376;
  t52712 = t52689 + t52693 + t52695;
  t55630 = -1.*t48829*t51200;
  t55636 = -1.*t48928*t51722;
  t52813 = -1.*t50935*t51212;
  t52826 = -1.*t48939*t51252;
  t52834 = t52809 + t52813 + t52826;
  t55698 = t51722*t50363;
  t55769 = t51200*t49046;
  t52900 = t51212*t52528;
  t52909 = t51252*t50376;
  t52913 = t52898 + t52900 + t52909;
  t56407 = -1.000000000009*t48377*t48795;
  t56409 = -1.*t48816*t45227;
  t56418 = t56407 + t56409;
  t56440 = -1.*t48988*t48377;
  t56441 = -1.*t48795*t45227;
  t56445 = t56440 + t56441;
  t56499 = -1.*t43858*t29344*t48377*t48442;
  t56500 = -1.*t43858*t48156*t45227;
  t56503 = t56499 + t56500;
  t56756 = t48156*t56418;
  t56888 = -1.*t29344*t48442*t48888;
  t56895 = t56756 + t56888;
  t57150 = -1.*t29344*t48442*t49298;
  t57196 = t48156*t56445;
  t57199 = t57150 + t57196;
  t55158 = -1.*t43858*t48377*t51103;
  t57355 = 0.2*t48377;
  t57356 = -1.*t48377*t51096;
  t57359 = -1.*t51032*t45227;
  t57361 = t57355 + t57356 + t57359;
  t55273 = t51103*t48888;
  t55391 = t43858*t48377*t51103;
  t55525 = -1.*t49298*t51103;
  t55649 = -1.*t51103*t48888;
  t55803 = t49298*t51103;
  t57370 = -1.*t43858*t48377*t57361;
  t57404 = t56418*t51103;
  t57417 = t57361*t48888;
  t55176 = -1.*t48508*t51200;
  t55179 = t55158 + t55176 + t51833;
  t55283 = t48928*t51200;
  t55292 = t55273 + t55283 + t52133;
  t57440 = t43858*t48377*t57361;
  t55396 = t48508*t51200;
  t55409 = t55391 + t55396 + t52598;
  t57679 = -1.*t49298*t57361;
  t57682 = -1.*t51103*t56445;
  t55562 = -1.*t51200*t50363;
  t55603 = t55525 + t55562 + t52689;
  t57700 = -1.*t56418*t51103;
  t57776 = -1.*t57361*t48888;
  t55669 = -1.*t48928*t51200;
  t55677 = t55649 + t55669 + t52809;
  t57884 = t49298*t57361;
  t57924 = t51103*t56445;
  t55808 = t51200*t50363;
  t55827 = t55803 + t55808 + t52898;
  t56378 = t43858*t48156*t29344*t48377;
  t56395 = -1.*t43858*t48442*t45227;
  t56404 = t56378 + t56395;
  t58421 = -1.*t44537*t51103*t46803;
  t58443 = -1.*t43858*t48377*t44537*t51722;
  t56428 = t48442*t56418;
  t56429 = t48156*t29344*t48888;
  t56430 = t56428 + t56429;
  t58925 = t44537*t51103*t48829;
  t59225 = t44537*t48888*t51722;
  t60411 = t48442*t57361;
  t60422 = t48156*t29344*t51103;
  t60438 = t60411 + t60422;
  t60516 = t48156*t57361;
  t60521 = -1.*t29344*t48442*t51103;
  t60596 = t60516 + t60521;
  t59549 = t44537*t51103*t46803;
  t59556 = t43858*t48377*t44537*t51722;
  t56436 = t48156*t29344*t49298;
  t56465 = t48442*t56445;
  t56469 = t56436 + t56465;
  t59616 = -1.*t44537*t49298*t51722;
  t59644 = -1.*t44537*t51103*t49046;
  t59694 = -1.*t44537*t51103*t48829;
  t59827 = -1.*t44537*t48888*t51722;
  t59891 = t44537*t49298*t51722;
  t59909 = t44537*t51103*t49046;
  t61453 = -9.e-18*t38241;
  t61462 = 2.999991000027e-7*t48795;
  t61486 = -3.e-12*t38241;
  t61488 = 1.2e-12 + t61486 + t51095;
  t57480 = 4.e-7*var1[9];
  t57495 = -1. + t48811;
  t57502 = 0.1*t57495;
  t57503 = -3.000000000027e-7*t39182;
  t57519 = 9.e-18*t48795;
  t61650 = 0.0999997000009*t38241;
  t61652 = 3.000000000027e-12*t48795;
  t61653 = t61650 + t61652;
  t61471 = -4.e-7 + t61453 + t61462;
  t57841 = 3.e-6*t51125*t48795;
  t61485 = -1.*t48761*t61471;
  t61534 = -1.000000000009*t38241*t51096;
  t61621 = -1.*t48816*t61488;
  t61623 = -1.000000000009*t51032*t48795;
  t61627 = -3.000000000027e-6*t51125*t48795;
  t61656 = -1.000000000009*t61653*t48795;
  t57829 = -1.*t48761*t51125;
  t61736 = -1.000000000009*t51096*t48795;
  t61666 = t38241*t51032;
  t61687 = 3.e-6*t38241*t51125;
  t61721 = t48988*t61653;
  t61734 = 3.e-6*t61471*t48795;
  t61753 = t61488*t48795;
  t61880 = 1.000000000009*t48795*t45227;
  t61879 = t38241*t48377;
  t61884 = t61879 + t61880;
  t57529 = t43858*t45227*t51196;
  t57535 = t57480 + t57502 + t57503 + t57519 + t57529 + t55391;
  t61724 = 9.e-18*t38241;
  t61727 = -2.999991000027e-7*t48795;
  t61927 = t38241*t45227;
  t61928 = t56407 + t61927;
  t62018 = t48377*t61488;
  t62022 = -1.*t61653*t45227;
  t62025 = t62018 + t62022;
  t62029 = t48377*t61653;
  t62032 = t61488*t45227;
  t62036 = t62029 + t62032;
  t57830 = -1.*t48822*t51196;
  t57834 = t57829 + t57830 + t55649;
  t61959 = -1.000000000009*t38241*t45227;
  t61973 = t48797 + t61959;
  t57842 = t51196*t49008;
  t57844 = t57841 + t55803 + t57842;
  t61994 = 1.000000000009*t38241*t48377;
  t61995 = t61994 + t61880;
  t57392 = -1.*t43858*t45227*t51196;
  t57393 = t51114 + t51115 + t51117 + t51123 + t57392 + t55158;
  t61905 = -3.e-6*t38241*t44537;
  t61932 = t29344*t61928;
  t61937 = t61905 + t61932;
  t61984 = -3.000000000027e-6*t48795*t44537;
  t61996 = t29344*t61995;
  t61998 = t61984 + t61996;
  t62147 = 3.e-6*t38241*t29344;
  t62151 = t44537*t61928;
  t62153 = t62147 + t62151;
  t62158 = t48156*t61884;
  t62161 = -1.*t48442*t61937;
  t62168 = t62158 + t62161;
  t62182 = 3.000000000027e-6*t29344*t48795;
  t62183 = t44537*t61995;
  t62189 = t62182 + t62183;
  t62192 = t48156*t61973;
  t62194 = -1.*t48442*t61998;
  t62198 = t62192 + t62194;
  t62028 = t43858*t48377*t62025;
  t62052 = -1.*t49298*t62025;
  t62057 = -1.*t51103*t61884;
  t62246 = -1.*t61471*t44537;
  t62248 = t29344*t62036;
  t62253 = t62246 + t62248;
  t62259 = t29344*t61471;
  t62262 = t44537*t62036;
  t62267 = t62259 + t62262;
  t62079 = t49298*t62025;
  t62082 = t51103*t61884;
  t62092 = -1.*t61973*t51103;
  t62095 = -1.*t62025*t48888;
  t62109 = -1.*t43858*t48377*t62025;
  t62124 = t61973*t51103;
  t62127 = t62025*t48888;
  t61887 = t48442*t61884;
  t61941 = t48156*t61937;
  t61946 = t61887 + t61941;
  t62271 = t46803*t62267;
  t62275 = -1.*t62153*t51722;
  t62277 = -1.*t62267*t49046;
  t62386 = t48442*t62025;
  t62395 = t48156*t62253;
  t62396 = t62386 + t62395;
  t62402 = t48156*t62025;
  t62407 = -1.*t48442*t62253;
  t62410 = t62402 + t62407;
  t61982 = t48442*t61973;
  t62000 = t48156*t61998;
  t62002 = t61982 + t62000;
  t62301 = t62153*t51722;
  t62308 = t62267*t49046;
  t62313 = -1.*t48829*t62267;
  t62319 = -1.*t51722*t62189;
  t62342 = -1.*t46803*t62267;
  t62351 = t48829*t62267;
  t62357 = t51722*t62189;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-1.72e-8*(-1.*t14539*t46803 - 1.*t46806*t48733) - 5.16e-14*(-1.*t14539*t48829 - 1.*t46806*t48939) - 0.0042999871*(-1.*t14539*t49046 - 1.*t46806*t50376))*var2[1] - 0.5*(-1.72e-8*(t46803*t46806 - 1.*t14539*t48733) - 5.16e-14*(t46806*t48829 - 1.*t14539*t48939) - 0.0042999871*(t46806*t49046 - 1.*t14539*t50376))*var2[2])*var2[9];
  p_output1[4]=(-0.5*(-1.72e-8*t48733 - 5.16e-14*t48939 - 0.0042999871*t50376)*var2[0] - 0.5*(1.72e-8*t14539*t50683 + 5.16e-14*t14539*t50735 + 0.0042999871*t14539*t50753)*var2[1] - 0.5*(-1.72e-8*t46806*t50683 - 5.16e-14*t46806*t50735 - 0.0042999871*t46806*t50753)*var2[2] - 0.5*(-0.000271000000002439*t48733 - 0.0042999871*((t48939*t51207 + t48939*t51212 + t50735*t51252 + t50935*t51252)*t51300 + t50935*(-1.*t48733*t51207 - 1.*t48733*t51212 - 1.*t50683*t51252 - 1.*t51252*t51300) + t48939*t52024 + t48733*t52325) - 5.16e-14*((t48733*t51207 + t48733*t51212 + t50683*t51252 + t51252*t51300)*t52528 + t51300*(-1.*t50376*t51207 - 1.*t50376*t51212 - 1.*t50753*t51252 - 1.*t51252*t52528) + t50376*t52623 + t48733*t52712) - 1.72e-8*((-1.*t48939*t51207 - 1.*t48939*t51212 - 1.*t50735*t51252 - 1.*t50935*t51252)*t52528 + t50935*(t50376*t51207 + t50376*t51212 + t50753*t51252 + t51252*t52528) + t50376*t52834 + t48939*t52913))*var2[3])*var2[9];
  p_output1[5]=(-0.5*(-1.72e-8*t48156*t53050 - 5.16e-14*t48156*t53110 - 0.0042999871*t48156*t53533)*var2[0] - 0.5*(-1.72e-8*(t46806*t48508 + t14539*t48442*t53050) - 5.16e-14*(t46806*t48928 + t14539*t48442*t53110) - 0.0042999871*(t46806*t50363 + t14539*t48442*t53533))*var2[1] - 0.5*(-1.72e-8*(t14539*t48508 - 1.*t46806*t48442*t53050) - 5.16e-14*(t14539*t48928 - 1.*t46806*t48442*t53110) - 0.0042999871*(t14539*t50363 - 1.*t46806*t48442*t53533))*var2[2] - 0.5*(-0.000271000000002439*t48156*t53050 - 0.0042999871*(t48156*t52325*t53050 + t48156*t52024*t53110 + t50935*(-1.*t48156*t51212*t53050 + t48442*t51252*t53050 + t55037 + t48442*t48733*t55064 - 1.*t48156*t51300*t55064 + t55141) + t51300*(t48156*t51212*t53110 - 1.*t48442*t51252*t53110 - 1.*t48442*t48939*t55064 + t48156*t50935*t55064 + t55192 + t55203)) - 5.16e-14*(t48156*t52712*t53050 + t48156*t52623*t53533 + t52528*(t48156*t51212*t53050 - 1.*t48442*t51252*t53050 - 1.*t48442*t48733*t55064 + t48156*t51300*t55064 + t55329 + t55351) + t51300*(-1.*t48156*t51212*t53533 + t48442*t51252*t53533 + t48442*t50376*t55064 - 1.*t48156*t52528*t55064 + t55467 + t55503)) - 1.72e-8*(t48156*t52913*t53110 + t48156*t52834*t53533 + t52528*(-1.*t48156*t51212*t53110 + t48442*t51252*t53110 + t48442*t48939*t55064 - 1.*t48156*t50935*t55064 + t55630 + t55636) + t50935*(t48156*t51212*t53533 - 1.*t48442*t51252*t53533 - 1.*t48442*t50376*t55064 + t48156*t52528*t55064 + t55698 + t55769)))*var2[3] - 0.5*(-0.000271000000002439*t48508 - 0.0042999871*(t48829*(-1.*t51200*t53050 + t55037 - 1.*t48508*t55064 + t55141) + t48928*t55179 + t46803*(t51200*t53110 + t48928*t55064 + t55192 + t55203) + t48508*t55292) - 5.16e-14*(t49046*(t51200*t53050 + t48508*t55064 + t55329 + t55351) + t50363*t55409 + t46803*(-1.*t51200*t53533 - 1.*t50363*t55064 + t55467 + t55503) + t48508*t55603) - 1.72e-8*(t49046*(-1.*t51200*t53110 - 1.*t48928*t55064 + t55630 + t55636) + t50363*t55677 + t48829*(t51200*t53533 + t50363*t55064 + t55698 + t55769) + t48928*t55827))*var2[4])*var2[9];
  p_output1[6]=0;
  p_output1[7]=(-0.5*(-1.72e-8*t56404 - 5.16e-14*t56430 - 0.0042999871*t56469)*var2[0] - 0.5*(-1.72e-8*(t43858*t44537*t46806*t48377 - 1.*t14539*t56503) - 5.16e-14*(t44537*t46806*t48888 - 1.*t14539*t56895) - 0.0042999871*(t44537*t46806*t49298 - 1.*t14539*t57199))*var2[1] - 0.5*(-1.72e-8*(t14539*t43858*t44537*t48377 + t46806*t56503) - 5.16e-14*(t14539*t44537*t48888 + t46806*t56895) - 0.0042999871*(t14539*t44537*t49298 + t46806*t57199))*var2[2] - 0.5*(-0.000271000000002439*t56404 - 0.0042999871*(t52325*t56404 + t52024*t56430 + t50935*(-1.*t51212*t56404 - 1.*t51252*t56503 + t58421 + t58443 - 1.*t51300*t60438 - 1.*t48733*t60596) + t51300*(t51212*t56430 + t51252*t56895 + t58925 + t59225 + t50935*t60438 + t48939*t60596)) - 5.16e-14*(t52712*t56404 + t52623*t56469 + t52528*(t51212*t56404 + t51252*t56503 + t59549 + t59556 + t51300*t60438 + t48733*t60596) + t51300*(-1.*t51212*t56469 - 1.*t51252*t57199 + t59616 + t59644 - 1.*t52528*t60438 - 1.*t50376*t60596)) - 1.72e-8*(t52913*t56430 + t52834*t56469 + t52528*(-1.*t51212*t56430 - 1.*t51252*t56895 + t59694 + t59827 - 1.*t50935*t60438 - 1.*t48939*t60596) + t50935*(t51212*t56469 + t51252*t57199 + t59891 + t59909 + t52528*t60438 + t50376*t60596)))*var2[3] - 0.5*(-0.000271000000002439*t43858*t44537*t48377 - 0.0042999871*(t44537*t48888*t55179 + t43858*t44537*t48377*t55292 + t48829*(t43858*t45227*t51103 - 1.*t29344*t48508*t51103 - 1.*t29344*t43858*t48377*t51200 + t57370 + t58421 + t58443) + t46803*(t29344*t48928*t51103 + t29344*t48888*t51200 + t57404 + t57417 + t58925 + t59225)) - 5.16e-14*(t44537*t49298*t55409 + t43858*t44537*t48377*t55603 + t49046*(-1.*t43858*t45227*t51103 + t29344*t48508*t51103 + t29344*t43858*t48377*t51200 + t57440 + t59549 + t59556) + t46803*(-1.*t29344*t50363*t51103 - 1.*t29344*t49298*t51200 + t57679 + t57682 + t59616 + t59644)) - 1.72e-8*(t44537*t49298*t55677 + t44537*t48888*t55827 + t49046*(-1.*t29344*t48928*t51103 - 1.*t29344*t48888*t51200 + t57700 + t57776 + t59694 + t59827) + t48829*(t29344*t50363*t51103 + t29344*t49298*t51200 + t57884 + t57924 + t59891 + t59909)))*var2[4] - 0.5*(0.000271000000002439*t43858*t45227 - 0.0042999871*(-1.*t43858*t45227*(t48761*t51125 + t48822*t51196 + t55273) + t48888*(-1.*t43858*t48377*t51196 + t57370) + t56418*t57393 + t43858*t48377*(t48822*t51103 + t48888*t51196 + t57404 + t57417)) - 5.16e-14*(-1.*t43858*t45227*(-3.e-6*t48795*t51125 - 1.*t49008*t51196 + t55525) + t49298*(t43858*t48377*t51196 + t57440) + t56445*t57535 + t43858*t48377*(-1.*t49008*t51103 - 1.*t49298*t51196 + t57679 + t57682)) - 1.72e-8*(t49298*(-1.*t48822*t51103 - 1.*t48888*t51196 + t57700 + t57776) + t56445*t57834 + t56418*t57844 + t48888*(t49008*t51103 + t49298*t51196 + t57884 + t57924)))*var2[5])*var2[9];
  p_output1[8]=0;
  p_output1[9]=(-0.5*(-0.0042999871*t61946 - 5.16e-14*t62002)*var2[0] - 0.5*(-0.0042999871*(t46806*t62153 - 1.*t14539*t62168) - 5.16e-14*(t46806*t62189 - 1.*t14539*t62198))*var2[1] - 0.5*(-0.0042999871*(t14539*t62153 + t46806*t62168) - 5.16e-14*(t14539*t62189 + t46806*t62198))*var2[2] - 0.5*(-0.0042999871*(t52024*t62002 + t50935*(t62342 - 1.*t51300*t62396 - 1.*t48733*t62410) + t51300*(t51212*t62002 + t51252*t62198 + t62351 + t62357 + t50935*t62396 + t48939*t62410)) - 5.16e-14*(t52623*t61946 + t52528*(t62271 + t51300*t62396 + t48733*t62410) + t51300*(-1.*t51212*t61946 - 1.*t51252*t62168 + t62275 + t62277 - 1.*t52528*t62396 - 1.*t50376*t62410)) - 1.72e-8*(t52834*t61946 + t52913*t62002 + t52528*(-1.*t51212*t62002 - 1.*t51252*t62198 + t62313 + t62319 - 1.*t50935*t62396 - 1.*t48939*t62410) + t50935*(t51212*t61946 + t51252*t62168 + t62301 + t62308 + t52528*t62396 + t50376*t62410)))*var2[3] - 0.5*(-5.16e-14*(t55409*t62153 + t49046*(t62028 + t48508*t62253 + t62271) + t46803*(-1.*t51200*t61937 + t62052 + t62057 - 1.*t50363*t62253 + t62275 + t62277)) - 1.72e-8*(t55677*t62153 + t55827*t62189 + t48829*(t51200*t61937 + t62079 + t62082 + t50363*t62253 + t62301 + t62308) + t49046*(-1.*t51200*t61998 + t62092 + t62095 - 1.*t48928*t62253 + t62313 + t62319)) - 0.0042999871*(t55179*t62189 + t48829*(t62109 - 1.*t48508*t62253 + t62342) + t46803*(t51200*t61998 + t62124 + t62127 + t48928*t62253 + t62351 + t62357)))*var2[4] - 0.5*(-5.16e-14*(t57535*t61884 + t49298*(4.e-7 + t61724 + t61727 + t62028 + t43858*t45227*t62036) + t43858*t48377*(-3.e-6*t38241*t51125 - 3.e-6*t48795*t61471 - 1.*t51196*t61928 - 1.*t49008*t62036 + t62052 + t62057)) - 1.72e-8*(t57834*t61884 + t57844*t61973 + t48888*(t61687 + t61734 + t51196*t61928 + t49008*t62036 + t62079 + t62082) + t49298*(t61485 + t61627 - 1.*t51196*t61995 - 1.*t48822*t62036 + t62092 + t62095)) - 0.0042999871*(t57393*t61973 + t48888*(-4.e-7 + t61453 + t61462 - 1.*t43858*t45227*t62036 + t62109) + t43858*t48377*(3.000000000027e-6*t48795*t51125 + t48761*t61471 + t51196*t61995 + t48822*t62036 + t62124 + t62127)))*var2[5] - 0.5*(-0.0042999871*(0.2*t38241 + 3.000000000027e-6*t48795*(-1.*t43858*t51032 + t51114 + t51115 + t51117 + t51123) + t61485 + t48761*(-4.e-7 + t61453 + t61462 - 1.*t43858*t61488) + t61534 + t61621 + t61623 + t61627 + t61656) - 5.16e-14*(0.2000000000018*t48795 + 3.e-6*t38241*(t43858*t51032 + t57480 + t57502 + t57503 + t57519) + t61666 + t61687 + t61721 + 3.e-6*t48795*(4.e-7 + t43858*t61488 + t61724 + t61727) + t61734 + t61736 + t61753) - 1.72e-8*(3.000000000027e-6*t48795*(t48795*t51032 + t48988*t51096 + t57841) + 3.e-6*t48795*(t61485 + t61534 + t61621 + t61623 + t61627 + t61656) + 3.e-6*t38241*(-1.*t48816*t51032 + t57829 + t61736) + t48761*(t61666 + t61687 + t61721 + t61734 + t61736 + t61753)))*var2[7])*var2[9];
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec10_minitaur.hh"

namespace FrontStance
{

void Ce3_vec10_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
