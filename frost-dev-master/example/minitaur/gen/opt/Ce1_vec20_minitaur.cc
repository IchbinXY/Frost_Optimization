/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:09:21 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t223;
  double t2979;
  double t3238;
  double t163;
  double t20068;
  double t32941;
  double t31785;
  double t33691;
  double t34144;
  double t36478;
  double t39432;
  double t42232;
  double t42610;
  double t44300;
  double t44373;
  double t38185;
  double t46125;
  double t48730;
  double t48811;
  double t51030;
  double t51047;
  double t45985;
  double t50240;
  double t49011;
  double t53141;
  double t53555;
  double t53605;
  double t53613;
  double t51282;
  double t51340;
  double t51344;
  double t52061;
  double t53135;
  double t53209;
  double t53448;
  double t53476;
  double t48838;
  double t50261;
  double t53740;
  double t54121;
  double t54220;
  double t54253;
  double t54254;
  double t49098;
  double t49208;
  double t50218;
  double t51000;
  double t51027;
  double t51049;
  double t51234;
  double t54529;
  double t54531;
  double t54539;
  double t54541;
  double t54757;
  double t54784;
  double t54801;
  double t48840;
  double t51252;
  double t53712;
  double t53732;
  double t54352;
  double t54353;
  double t54393;
  double t54667;
  double t54671;
  double t54688;
  double t54732;
  double t54843;
  double t54859;
  double t45233;
  double t6670;
  double t6713;
  double t54974;
  double t55016;
  double t55134;
  double t55185;
  double t55187;
  double t55188;
  double t55297;
  double t55306;
  double t55310;
  double t55317;
  double t55716;
  double t55718;
  double t55740;
  double t55789;
  double t55808;
  double t55828;
  double t55846;
  double t55849;
  double t55710;
  double t55794;
  double t55850;
  double t55851;
  double t55852;
  double t55854;
  double t55857;
  double t55859;
  double t56021;
  double t56018;
  double t56114;
  double t56141;
  double t56019;
  double t56020;
  double t56022;
  double t56031;
  double t56033;
  double t56043;
  double t56136;
  double t56138;
  double t56142;
  double t56144;
  double t56145;
  double t56146;
  double t56497;
  double t56524;
  double t56503;
  double t56319;
  double t56429;
  double t56436;
  double t56525;
  double t56539;
  double t56682;
  double t56737;
  double t56749;
  double t56750;
  double t56995;
  double t56996;
  double t57002;
  double t56498;
  double t56507;
  double t56509;
  double t56516;
  double t56519;
  double t56441;
  double t56522;
  double t56742;
  double t57003;
  double t57005;
  double t57010;
  double t57011;
  double t57021;
  double t57026;
  double t57237;
  double t57238;
  double t57239;
  double t57242;
  double t57243;
  double t57245;
  double t57247;
  double t56112;
  double t56113;
  double t56150;
  double t55038;
  double t55040;
  double t55043;
  double t55044;
  double t54962;
  double t55012;
  double t55018;
  double t55034;
  double t56322;
  double t57419;
  double t57430;
  double t57431;
  double t57432;
  double t57433;
  double t57434;
  double t57440;
  double t57471;
  double t57475;
  double t57499;
  double t57502;
  double t57503;
  double t57536;
  double t57541;
  double t57542;
  double t57543;
  double t55508;
  double t55518;
  double t55519;
  double t55552;
  double t55384;
  double t55385;
  double t55390;
  double t55409;
  double t55063;
  double t55296;
  double t55318;
  double t55319;
  double t55320;
  double t55369;
  double t55372;
  double t55383;
  double t45984;
  double t54370;
  double t54882;
  double t54900;
  double t54905;
  double t54916;
  double t54917;
  double t54925;
  double t57825;
  double t57827;
  double t57829;
  double t57830;
  double t57834;
  double t57840;
  double t57841;
  double t57846;
  double t57851;
  double t57853;
  double t57854;
  double t57859;
  double t57860;
  double t57890;
  double t55927;
  double t55929;
  double t55931;
  double t55941;
  double t55861;
  double t55863;
  double t55867;
  double t55868;
  double t24111;
  double t31524;
  double t12141;
  double t19719;
  double t19898;
  double t57354;
  double t57356;
  double t57357;
  double t57358;
  double t57383;
  double t57391;
  double t57393;
  double t57582;
  double t57588;
  double t57589;
  double t57609;
  double t57642;
  double t57643;
  double t57645;
  double t57915;
  double t57916;
  double t57917;
  double t57920;
  double t57923;
  double t57924;
  double t57925;
  double t57953;
  double t57954;
  double t57955;
  double t58280;
  double t57970;
  double t57972;
  double t57974;
  double t22061;
  double t32712;
  double t32851;
  double t58393;
  double t32980;
  double t33574;
  double t33592;
  double t55035;
  double t55046;
  double t55049;
  double t55486;
  double t55618;
  double t55703;
  double t55907;
  double t56010;
  double t56013;
  double t57950;
  double t57957;
  double t57964;
  double t57968;
  double t57976;
  double t57977;
  double t57980;
  double t57983;
  double t57984;
  double t57987;
  double t57989;
  double t57991;
  double t57994;
  double t57995;
  double t58003;
  double t56221;
  double t56222;
  double t56225;
  double t56226;
  double t56152;
  double t56156;
  double t56157;
  double t56165;
  double t56073;
  double t56143;
  double t56147;
  double t56148;
  double t56196;
  double t56285;
  double t56288;
  double t56384;
  double t57138;
  double t57143;
  double t57206;
  double t57249;
  double t57250;
  double t57258;
  double t57282;
  double t57283;
  double t57294;
  double t57351;
  double t57353;
  double t60923;
  double t60944;
  double t61011;
  double t57417;
  double t57418;
  double t57480;
  double t57495;
  double t57546;
  double t57548;
  double t57550;
  double t57551;
  double t57552;
  double t57553;
  double t57556;
  double t57557;
  double t61262;
  double t61285;
  double t61293;
  double t57707;
  double t57708;
  double t57719;
  double t57720;
  double t57695;
  double t57703;
  double t57704;
  double t57705;
  double t57670;
  double t57674;
  double t57675;
  double t57684;
  double t57706;
  double t57726;
  double t57727;
  double t57780;
  double t57784;
  double t57786;
  double t57787;
  double t57744;
  double t57748;
  double t57749;
  double t57774;
  double t57733;
  double t57734;
  double t57735;
  double t57742;
  double t57776;
  double t57799;
  double t57809;
  double t57820;
  double t57821;
  double t57842;
  double t57845;
  double t57893;
  double t57895;
  double t57897;
  double t57902;
  double t57909;
  double t57910;
  double t57913;
  double t57914;
  double t61333;
  double t61341;
  double t61342;
  double t58013;
  double t58014;
  double t58015;
  double t58042;
  double t58043;
  double t58046;
  double t58065;
  double t58070;
  double t58075;
  double t58080;
  double t58057;
  double t58060;
  double t58062;
  double t58063;
  double t58050;
  double t58051;
  double t58052;
  double t58064;
  double t58081;
  double t58138;
  double t58162;
  double t58163;
  double t58164;
  double t58165;
  double t58155;
  double t58156;
  double t58157;
  double t58158;
  double t58151;
  double t58152;
  double t58153;
  double t58161;
  double t58166;
  double t58167;
  double t58219;
  double t58220;
  double t58221;
  double t58242;
  double t58210;
  double t58211;
  double t58214;
  double t58216;
  double t58202;
  double t58204;
  double t58205;
  double t58218;
  double t58254;
  double t58255;
  double t58283;
  double t58285;
  double t58286;
  double t58343;
  double t58345;
  double t58346;
  double t58350;
  double t58351;
  double t58360;
  double t58370;
  double t58373;
  double t58375;
  double t58377;
  double t58379;
  double t58381;
  double t61566;
  double t61568;
  double t61603;
  double t61742;
  double t61745;
  double t61796;
  double t61907;
  double t61919;
  double t61932;
  double t61941;
  double t61945;
  double t61953;
  double t61991;
  double t61994;
  double t61995;
  double t61998;
  double t62015;
  double t62019;
  double t59382;
  double t59436;
  double t59437;
  double t60612;
  double t60615;
  double t60641;
  double t61846;
  double t61852;
  double t61867;
  double t61873;
  double t61875;
  double t61903;
  double t62124;
  double t62138;
  double t62153;
  double t62240;
  double t62295;
  double t62309;
  double t62458;
  double t62461;
  double t62854;
  double t62855;
  double t62870;
  double t62878;
  double t62880;
  double t62886;
  double t62930;
  double t62935;
  double t62942;
  double t62948;
  double t62949;
  double t62955;
  double t62980;
  double t63162;
  double t63164;
  double t63228;
  double t63233;
  double t63234;
  double t63276;
  double t63279;
  double t63280;
  double t63290;
  double t63296;
  double t63297;
  double t65119;
  double t65111;
  double t65112;
  double t65427;
  double t65428;
  double t65430;
  double t65431;
  double t65434;
  double t65435;
  double t65318;
  double t65334;
  double t65367;
  double t65383;
  double t65387;
  double t65444;
  double t65447;
  double t65535;
  double t65544;
  double t65550;
  double t65561;
  double t65563;
  double t65566;
  double t65416;
  double t65436;
  double t65437;
  double t58012;
  double t65609;
  double t65610;
  double t65615;
  double t65552;
  double t65574;
  double t65577;
  double t65581;
  double t65587;
  double t65588;
  double t65619;
  double t65620;
  double t65286;
  double t65287;
  double t65302;
  double t65115;
  double t65117;
  double t65641;
  double t65655;
  double t65724;
  double t65726;
  double t65727;
  double t57639;
  double t57666;
  double t57668;
  double t65979;
  double t65981;
  double t65983;
  double t65986;
  double t65996;
  double t65911;
  double t65914;
  double t65930;
  double t65931;
  double t65974;
  double t57368;
  double t57394;
  double t57399;
  double t66023;
  double t66024;
  double t66025;
  double t66011;
  double t66012;
  double t66013;
  double t66038;
  double t66041;
  double t66050;
  double t66051;
  double t66056;
  double t65976;
  double t65998;
  double t66000;
  double t66059;
  double t66060;
  double t66062;
  double t66067;
  double t66068;
  double t66070;
  double t57922;
  double t57926;
  double t57927;
  double t65121;
  double t65151;
  double t65155;
  double t65162;
  double t65192;
  double t65223;
  double t65231;
  double t65233;
  double t65443;
  double t65578;
  double t65591;
  double t65592;
  double t66359;
  double t66360;
  double t66361;
  double t65694;
  double t65695;
  double t65703;
  double t65705;
  double t65715;
  double t65719;
  double t65721;
  double t65722;
  double t65883;
  double t65884;
  double t65885;
  double t65886;
  double t66147;
  double t66152;
  double t66153;
  double t66155;
  double t66425;
  double t66426;
  double t66430;
  double t66157;
  double t66160;
  double t66165;
  double t66173;
  double t66230;
  double t66237;
  double t66242;
  double t66244;
  double t66266;
  double t66268;
  double t66269;
  double t66270;
  double t66305;
  double t66312;
  double t66318;
  double t66322;
  double t66337;
  double t66338;
  double t66339;
  double t66340;
  double t56151;
  double t56290;
  double t56291;
  double t66591;
  double t57692;
  double t57730;
  double t57731;
  double t57743;
  double t57810;
  double t57812;
  double t66630;
  double t66631;
  double t66633;
  double t66635;
  double t66622;
  double t66623;
  double t66624;
  double t66626;
  double t66641;
  double t66642;
  double t66643;
  double t66646;
  double t66650;
  double t66651;
  double t66664;
  double t66629;
  double t66636;
  double t66637;
  double t66647;
  double t66666;
  double t66669;
  double t66674;
  double t66676;
  double t66683;
  double t58055;
  double t58144;
  double t58145;
  double t58154;
  double t58187;
  double t58197;
  double t58209;
  double t58258;
  double t58260;
  double t67031;
  double t67032;
  double t67033;
  double t67026;
  double t67027;
  double t67029;
  double t67037;
  double t67038;
  double t67039;
  double t67041;
  double t67044;
  double t67045;
  double t58016;
  double t58018;
  double t67030;
  double t67034;
  double t67035;
  double t67040;
  double t67047;
  double t67049;
  double t67054;
  double t67057;
  double t67066;
  double t58041;
  double t58047;
  double t58048;
  double t67185;
  double t67186;
  double t67187;
  double t67193;
  double t67199;
  double t67166;
  double t67167;
  double t67168;
  double t67169;
  double t67174;
  double t67211;
  double t67212;
  double t67214;
  double t67217;
  double t67219;
  double t67220;
  double t67221;
  double t67180;
  double t67204;
  double t67207;
  double t67218;
  double t67222;
  double t67231;
  double t67238;
  double t67245;
  double t67248;
  double t66589;
  double t66592;
  double t66594;
  double t66595;
  double t66606;
  double t66607;
  double t66608;
  double t66609;
  double t66611;
  double t67504;
  double t67506;
  double t67507;
  double t67511;
  double t67512;
  double t67514;
  double t66638;
  double t66640;
  double t66708;
  double t66714;
  double t67562;
  double t67563;
  double t67564;
  double t66750;
  double t66754;
  double t66771;
  double t66772;
  double t67566;
  double t67569;
  double t67581;
  double t67649;
  double t67651;
  double t67652;
  double t66899;
  double t66902;
  double t66963;
  double t66965;
  double t67654;
  double t67659;
  double t67660;
  double t65599;
  double t65600;
  double t65658;
  double t65659;
  double t65813;
  double t65816;
  double t65832;
  double t65852;
  double t66008;
  double t66014;
  double t66082;
  double t66118;
  double t66197;
  double t66198;
  double t66246;
  double t66250;
  double t66276;
  double t66277;
  double t66326;
  double t66327;
  double t67036;
  double t67835;
  double t67841;
  double t67086;
  double t67089;
  double t67129;
  double t67763;
  double t67764;
  double t67135;
  double t67138;
  double t67208;
  double t67210;
  double t67329;
  double t67330;
  double t67354;
  double t67355;
  double t67370;
  double t67372;
  double t67390;
  double t67391;
  double t67416;
  double t67419;
  double t68146;
  double t68153;
  double t68166;
  double t68167;
  double t68186;
  double t68187;
  double t68205;
  double t68208;
  double t68234;
  double t68235;
  double t68262;
  double t68270;
  double t68493;
  double t68497;
  double t68504;
  double t68553;
  double t68576;
  double t68579;
  double t67542;
  double t67545;
  double t67551;
  double t67553;
  double t68654;
  double t68687;
  double t68688;
  double t67608;
  double t67618;
  double t67636;
  double t67637;
  double t68744;
  double t68748;
  double t68754;
  double t68848;
  double t68850;
  double t68854;
  double t67674;
  double t67692;
  double t67701;
  double t67703;
  double t68866;
  double t68867;
  double t68871;
  t223 = Cos(var1[19]);
  t2979 = -1.*t223;
  t3238 = 1. + t2979;
  t163 = Cos(var1[4]);
  t20068 = Cos(var1[5]);
  t32941 = Sin(var1[19]);
  t31785 = Sin(var1[5]);
  t33691 = Cos(var1[21]);
  t34144 = -1.*t33691;
  t36478 = 1. + t34144;
  t39432 = 3.e-6*t36478;
  t42232 = Sin(var1[21]);
  t42610 = 3.e-6*t42232;
  t44300 = t39432 + t42610;
  t44373 = 3.e-6*t44300;
  t38185 = 1.000000000009*t36478;
  t46125 = -3.e-6*t42232;
  t48730 = t39432 + t46125;
  t48811 = 3.e-6*t48730;
  t51030 = -3.e-6*t36478;
  t51047 = t51030 + t42610;
  t45985 = -1.8e-11*t36478;
  t50240 = -9.e-12*t36478;
  t49011 = 3.e-13*var1[21];
  t53141 = t51030 + t46125;
  t53555 = 1. + t45985;
  t53605 = 3.e-6*t53555;
  t53613 = t53605 + t51030 + t46125;
  t51282 = 1.e-7*var1[21];
  t51340 = 1.8e-11*t36478;
  t51344 = -1. + t51340;
  t52061 = 0.1*t51344;
  t53135 = 5.4e-18*t36478;
  t53209 = -3.e-12*t53141;
  t53448 = 0.100000000003*t51047;
  t53476 = t51282 + t52061 + t53135 + t53209 + t53448;
  t48838 = 1. + t45985 + t48811 + t44373;
  t50261 = -1.*t42232;
  t53740 = 0.1000000000039*t36478;
  t54121 = 0.1000003*t53141;
  t54220 = t50240 + t42232;
  t54253 = -3.e-12*t54220;
  t54254 = t49011 + t53740 + t54121 + t54253;
  t49098 = -1. + t38185;
  t49208 = 0.2*t49098;
  t50218 = -0.2000000000048*t36478;
  t51000 = t50240 + t50261;
  t51027 = 0.100000000003*t51000;
  t51049 = 0.1000003*t51047;
  t51234 = t49011 + t49208 + t50218 + t51027 + t51049;
  t54529 = -1.000000000009*t36478;
  t54531 = 1. + t54529;
  t54539 = 3.e-6*t54531;
  t54541 = 9.e-12*t36478;
  t54757 = t54541 + t42232;
  t54784 = 3.e-6*t54757;
  t54801 = t54539 + t39432 + t46125 + t54784;
  t48840 = -1. + t38185 + t48811;
  t51252 = -1.*t48840*t51234;
  t53712 = -1.*t53476*t53613;
  t53732 = t50240 + t44373 + t42232;
  t54352 = -1.*t53732*t54254;
  t54353 = t51252 + t53712 + t54352;
  t54393 = t53476*t48838;
  t54667 = t54541 + t50261;
  t54671 = 3.e-6*t54667;
  t54688 = t54539 + t39432 + t54671 + t42610;
  t54732 = t54688*t54254;
  t54843 = t51234*t54801;
  t54859 = t54393 + t54732 + t54843;
  t45233 = -1. + t38185 + t44373;
  t6670 = -9.e-12*t3238;
  t6713 = 1. + t6670;
  t54974 = t50240 + t48811 + t50261;
  t55016 = t53605 + t51030 + t42610;
  t55134 = t51234*t54974;
  t55185 = t53476*t55016;
  t55187 = t45233*t54254;
  t55188 = t55134 + t55185 + t55187;
  t55297 = -1.*t53476*t48838;
  t55306 = -1.*t54688*t54254;
  t55310 = -1.*t51234*t54801;
  t55317 = t55297 + t55306 + t55310;
  t55716 = -1.*t51234*t54974;
  t55718 = -1.*t53476*t55016;
  t55740 = -1.*t45233*t54254;
  t55789 = t55716 + t55718 + t55740;
  t55808 = t48840*t51234;
  t55828 = t53476*t53613;
  t55846 = t53732*t54254;
  t55849 = t55808 + t55828 + t55846;
  t55710 = 0.2*t54688;
  t55794 = -1.*t53613*t55789;
  t55850 = -1.*t55016*t55849;
  t55851 = t48840*t55789;
  t55852 = t54974*t55849;
  t55854 = t55851 + t55852;
  t55857 = -3.e-6*t55854;
  t55859 = t55710 + t55794 + t55850 + t55857;
  t56021 = 3.e-6*t33691;
  t56018 = -3.e-6*t33691;
  t56114 = 9.e-12*t42232;
  t56141 = -2.7e-17*t42232;
  t56019 = t56018 + t42610;
  t56020 = 3.e-6*t56019;
  t56022 = t56021 + t42610;
  t56031 = 3.e-6*t56022;
  t56033 = -1.8e-11*t42232;
  t56043 = t56020 + t56031 + t56033;
  t56136 = t34144 + t56114;
  t56138 = 3.e-6*t56136;
  t56142 = t56021 + t56138 + t56141;
  t56144 = t33691 + t56114;
  t56145 = 3.e-6*t56144;
  t56146 = t56018 + t56145 + t56141;
  t56497 = t56021 + t46125;
  t56524 = t56018 + t46125;
  t56503 = -9.e-12*t42232;
  t56319 = 1.000000000009*t42232;
  t56429 = -3.000000000054e-6*t42232;
  t56436 = t56018 + t56429;
  t56525 = -3.e-12*t56524;
  t56539 = 0.100000000003*t56497;
  t56682 = 1.8000054e-12*t42232;
  t56737 = 1.e-7 + t56525 + t56539 + t56682;
  t56749 = 0.1000003*t56524;
  t56750 = t33691 + t56503;
  t56995 = -3.e-12*t56750;
  t56996 = 0.1000000000039*t42232;
  t57002 = 3.e-13 + t56749 + t56995 + t56996;
  t56498 = 0.1000003*t56497;
  t56507 = t34144 + t56503;
  t56509 = 0.100000000003*t56507;
  t56516 = -3.000000000027e-12*t42232;
  t56519 = 3.e-13 + t56498 + t56509 + t56516;
  t56441 = -1.*t53476*t56436;
  t56522 = -1.*t48840*t56519;
  t56742 = -1.*t53613*t56737;
  t57003 = -1.*t57002*t53732;
  t57005 = t56020 + t56319;
  t57010 = -1.*t51234*t57005;
  t57011 = t33691 + t56031 + t56503;
  t57021 = -1.*t57011*t54254;
  t57026 = t56441 + t56522 + t56742 + t57003 + t57010 + t57021;
  t57237 = t53476*t56043;
  t57238 = t51234*t56146;
  t57239 = t48838*t56737;
  t57242 = t54688*t57002;
  t57243 = t56142*t54254;
  t57245 = t56519*t54801;
  t57247 = t57237 + t57238 + t57239 + t57242 + t57243 + t57245;
  t56112 = -1.000000000009*t3238;
  t56113 = 1. + t56112;
  t56150 = Sin(var1[4]);
  t55038 = -1.*t32941*t45233;
  t55040 = t223*t54974;
  t55043 = 3.e-6*t3238*t55016;
  t55044 = t55038 + t55040 + t55043;
  t54962 = 3.e-6*t32941*t45233;
  t55012 = 3.e-6*t3238*t54974;
  t55018 = t6713*t55016;
  t55034 = t54962 + t55012 + t55018;
  t56322 = t56031 + t56319;
  t57419 = t56021 + t56429;
  t57430 = t53476*t57419;
  t57431 = t34144 + t56020 + t56503;
  t57432 = t51234*t57431;
  t57433 = t54974*t56519;
  t57434 = t56737*t55016;
  t57440 = t45233*t57002;
  t57471 = t56322*t54254;
  t57475 = t57430 + t57432 + t57433 + t57434 + t57440 + t57471;
  t57499 = -1.*t53476*t56043;
  t57502 = -1.*t51234*t56146;
  t57503 = -1.*t48838*t56737;
  t57536 = -1.*t54688*t57002;
  t57541 = -1.*t56142*t54254;
  t57542 = -1.*t56519*t54801;
  t57543 = t57499 + t57502 + t57503 + t57536 + t57541 + t57542;
  t55508 = t223*t48840;
  t55518 = 3.e-6*t3238*t53613;
  t55519 = -1.*t32941*t53732;
  t55552 = t55508 + t55518 + t55519;
  t55384 = 3.e-6*t3238*t48840;
  t55385 = t6713*t53613;
  t55390 = 3.e-6*t32941*t53732;
  t55409 = t55384 + t55385 + t55390;
  t55063 = 0.2*t53732;
  t55296 = -1.*t48838*t55188;
  t55318 = -1.*t55016*t55317;
  t55319 = t54801*t55188;
  t55320 = t54974*t55317;
  t55369 = t55319 + t55320;
  t55372 = -3.e-6*t55369;
  t55383 = t55063 + t55296 + t55318 + t55372;
  t45984 = 0.2*t45233;
  t54370 = -1.*t48838*t54353;
  t54882 = -1.*t53613*t54859;
  t54900 = t54801*t54353;
  t54905 = t48840*t54859;
  t54916 = t54900 + t54905;
  t54917 = -3.e-6*t54916;
  t54925 = t45984 + t54370 + t54882 + t54917;
  t57825 = t53476*t56436;
  t57827 = t48840*t56519;
  t57829 = t53613*t56737;
  t57830 = t57002*t53732;
  t57834 = t51234*t57005;
  t57840 = t57011*t54254;
  t57841 = t57825 + t57827 + t57829 + t57830 + t57834 + t57840;
  t57846 = -1.*t53476*t57419;
  t57851 = -1.*t51234*t57431;
  t57853 = -1.*t54974*t56519;
  t57854 = -1.*t56737*t55016;
  t57859 = -1.*t45233*t57002;
  t57860 = -1.*t56322*t54254;
  t57890 = t57846 + t57851 + t57853 + t57854 + t57859 + t57860;
  t55927 = 3.e-6*t3238*t48838;
  t55929 = -1.*t32941*t54688;
  t55931 = t223*t54801;
  t55941 = t55927 + t55929 + t55931;
  t55861 = t6713*t48838;
  t55863 = 3.e-6*t32941*t54688;
  t55867 = 3.e-6*t3238*t54801;
  t55868 = t55861 + t55863 + t55867;
  t24111 = 9.e-12*t3238;
  t31524 = t24111 + t2979;
  t12141 = 3.e-6*t6713;
  t19719 = -3.e-6*t3238;
  t19898 = t12141 + t19719;
  t57354 = t56113*t45233;
  t57356 = t32941*t54974;
  t57357 = -3.e-6*t32941*t55016;
  t57358 = t57354 + t57356 + t57357;
  t57383 = t20068*t55044;
  t57391 = -1.*t55034*t31785;
  t57393 = t57383 + t57391;
  t57582 = t32941*t48840;
  t57588 = -3.e-6*t32941*t53613;
  t57589 = t56113*t53732;
  t57609 = t57582 + t57588 + t57589;
  t57642 = t20068*t55552;
  t57643 = -1.*t55409*t31785;
  t57645 = t57642 + t57643;
  t57915 = -3.e-6*t32941*t48838;
  t57916 = t56113*t54688;
  t57917 = t32941*t54801;
  t57920 = t57915 + t57916 + t57917;
  t57923 = t20068*t55941;
  t57924 = -1.*t55868*t31785;
  t57925 = t57923 + t57924;
  t57953 = t31524*t20068;
  t57954 = -1.*t19898*t31785;
  t57955 = t57953 + t57954;
  t58280 = Sin(var1[3]);
  t57970 = -1.*t20068*t32941;
  t57972 = -3.e-6*t32941*t31785;
  t57974 = t57970 + t57972;
  t22061 = -1.*t19898*t20068;
  t32712 = -1.*t31524*t31785;
  t32851 = t22061 + t32712;
  t58393 = Cos(var1[3]);
  t32980 = -3.e-6*t20068*t32941;
  t33574 = t32941*t31785;
  t33592 = t32980 + t33574;
  t55035 = -1.*t20068*t55034;
  t55046 = -1.*t55044*t31785;
  t55049 = t55035 + t55046;
  t55486 = -1.*t20068*t55409;
  t55618 = -1.*t55552*t31785;
  t55703 = t55486 + t55618;
  t55907 = -1.*t20068*t55868;
  t56010 = -1.*t55941*t31785;
  t56013 = t55907 + t56010;
  t57950 = -1.000000000009*t163*t32941;
  t57957 = -1.*t56150*t57955;
  t57964 = t57950 + t57957;
  t57968 = t56113*t163;
  t57976 = -1.*t56150*t57974;
  t57977 = t57968 + t57976;
  t57980 = t163*t57358;
  t57983 = -1.*t56150*t57393;
  t57984 = t57980 + t57983;
  t57987 = t163*t57609;
  t57989 = -1.*t56150*t57645;
  t57991 = t57987 + t57989;
  t57994 = t163*t57920;
  t57995 = -1.*t56150*t57925;
  t58003 = t57994 + t57995;
  t56221 = t6713*t56043;
  t56222 = 3.e-6*t32941*t56142;
  t56225 = 3.e-6*t3238*t56146;
  t56226 = t56221 + t56222 + t56225;
  t56152 = 3.e-6*t3238*t56043;
  t56156 = -1.*t32941*t56142;
  t56157 = t223*t56146;
  t56165 = t56152 + t56156 + t56157;
  t56073 = -3.e-6*t32941*t56043;
  t56143 = t56113*t56142;
  t56147 = t32941*t56146;
  t56148 = t56073 + t56143 + t56147;
  t56196 = t20068*t56165;
  t56285 = -1.*t56226*t31785;
  t56288 = t56196 + t56285;
  t56384 = 0.2*t56322;
  t57138 = -1.*t48838*t57026;
  t57143 = -1.*t56043*t54353;
  t57206 = -1.*t56436*t54859;
  t57249 = -1.*t53613*t57247;
  t57250 = t54801*t57026;
  t57258 = t56146*t54353;
  t57282 = t57005*t54859;
  t57283 = t48840*t57247;
  t57294 = t57250 + t57258 + t57282 + t57283;
  t57351 = -3.e-6*t57294;
  t57353 = t56384 + t57138 + t57143 + t57206 + t57249 + t57351;
  t60923 = t20068*t55034;
  t60944 = t55044*t31785;
  t61011 = t60923 + t60944;
  t57417 = 0.2*t57011;
  t57418 = -1.*t56043*t55188;
  t57480 = -1.*t48838*t57475;
  t57495 = -1.*t57419*t55317;
  t57546 = -1.*t55016*t57543;
  t57548 = t56146*t55188;
  t57550 = t54801*t57475;
  t57551 = t57431*t55317;
  t57552 = t54974*t57543;
  t57553 = t57548 + t57550 + t57551 + t57552;
  t57556 = -3.e-6*t57553;
  t57557 = t57417 + t57418 + t57480 + t57495 + t57546 + t57556;
  t61262 = t20068*t55409;
  t61285 = t55552*t31785;
  t61293 = t61262 + t61285;
  t57707 = t6713*t56436;
  t57708 = 3.e-6*t32941*t57011;
  t57719 = 3.e-6*t3238*t57005;
  t57720 = t57707 + t57708 + t57719;
  t57695 = 3.e-6*t3238*t56436;
  t57703 = -1.*t32941*t57011;
  t57704 = t223*t57005;
  t57705 = t57695 + t57703 + t57704;
  t57670 = -3.e-6*t32941*t56436;
  t57674 = t56113*t57011;
  t57675 = t32941*t57005;
  t57684 = t57670 + t57674 + t57675;
  t57706 = t20068*t57705;
  t57726 = -1.*t57720*t31785;
  t57727 = t57706 + t57726;
  t57780 = t6713*t57419;
  t57784 = 3.e-6*t3238*t57431;
  t57786 = 3.e-6*t32941*t56322;
  t57787 = t57780 + t57784 + t57786;
  t57744 = 3.e-6*t3238*t57419;
  t57748 = t223*t57431;
  t57749 = -1.*t32941*t56322;
  t57774 = t57744 + t57748 + t57749;
  t57733 = -3.e-6*t32941*t57419;
  t57734 = t32941*t57431;
  t57735 = t56113*t56322;
  t57742 = t57733 + t57734 + t57735;
  t57776 = t20068*t57774;
  t57799 = -1.*t57787*t31785;
  t57809 = t57776 + t57799;
  t57820 = 0.2*t56142;
  t57821 = -1.*t56436*t55789;
  t57842 = -1.*t55016*t57841;
  t57845 = -1.*t57419*t55849;
  t57893 = -1.*t53613*t57890;
  t57895 = t57005*t55789;
  t57897 = t54974*t57841;
  t57902 = t57431*t55849;
  t57909 = t48840*t57890;
  t57910 = t57895 + t57897 + t57902 + t57909;
  t57913 = -3.e-6*t57910;
  t57914 = t57820 + t57821 + t57842 + t57845 + t57893 + t57913;
  t61333 = t20068*t55868;
  t61341 = t55941*t31785;
  t61342 = t61333 + t61341;
  t58013 = -1.*t223*t20068;
  t58014 = -3.e-6*t223*t31785;
  t58015 = t58013 + t58014;
  t58042 = 1.000000000009*t20068*t32941;
  t58043 = 3.000000000027e-6*t32941*t31785;
  t58046 = t58042 + t58043;
  t58065 = 3.e-6*t223*t45233;
  t58070 = 3.e-6*t32941*t54974;
  t58075 = -9.e-12*t32941*t55016;
  t58080 = t58065 + t58070 + t58075;
  t58057 = -1.*t223*t45233;
  t58060 = -1.*t32941*t54974;
  t58062 = 3.e-6*t32941*t55016;
  t58063 = t58057 + t58060 + t58062;
  t58050 = -1.000000000009*t32941*t45233;
  t58051 = -3.e-6*t223*t55016;
  t58052 = t58050 + t55040 + t58051;
  t58064 = t20068*t58063;
  t58081 = -1.*t58080*t31785;
  t58138 = t58064 + t58081;
  t58162 = 3.e-6*t32941*t48840;
  t58163 = -9.e-12*t32941*t53613;
  t58164 = 3.e-6*t223*t53732;
  t58165 = t58162 + t58163 + t58164;
  t58155 = -1.*t32941*t48840;
  t58156 = 3.e-6*t32941*t53613;
  t58157 = -1.*t223*t53732;
  t58158 = t58155 + t58156 + t58157;
  t58151 = -3.e-6*t223*t53613;
  t58152 = -1.000000000009*t32941*t53732;
  t58153 = t55508 + t58151 + t58152;
  t58161 = t20068*t58158;
  t58166 = -1.*t58165*t31785;
  t58167 = t58161 + t58166;
  t58219 = -9.e-12*t32941*t48838;
  t58220 = 3.e-6*t223*t54688;
  t58221 = 3.e-6*t32941*t54801;
  t58242 = t58219 + t58220 + t58221;
  t58210 = 3.e-6*t32941*t48838;
  t58211 = -1.*t223*t54688;
  t58214 = -1.*t32941*t54801;
  t58216 = t58210 + t58211 + t58214;
  t58202 = -3.e-6*t223*t48838;
  t58204 = -1.000000000009*t32941*t54688;
  t58205 = t58202 + t58204 + t55931;
  t58218 = t20068*t58216;
  t58254 = -1.*t58242*t31785;
  t58255 = t58218 + t58254;
  t58283 = 1.000000000009*t32941*t56150;
  t58285 = -1.*t163*t57955;
  t58286 = t58283 + t58285;
  t58343 = -1.*t56113*t56150;
  t58345 = -1.*t163*t57974;
  t58346 = t58343 + t58345;
  t58350 = -1.*t57358*t56150;
  t58351 = -1.*t163*t57393;
  t58360 = t58350 + t58351;
  t58370 = -1.*t57609*t56150;
  t58373 = -1.*t163*t57645;
  t58375 = t58370 + t58373;
  t58377 = -1.*t57920*t56150;
  t58379 = -1.*t163*t57925;
  t58381 = t58377 + t58379;
  t61566 = t20068*t56226;
  t61568 = t56165*t31785;
  t61603 = t61566 + t61568;
  t61742 = t163*t56148;
  t61745 = -1.*t56150*t56288;
  t61796 = t61742 + t61745;
  t61907 = t20068*t57720;
  t61919 = t57705*t31785;
  t61932 = t61907 + t61919;
  t61941 = t163*t57684;
  t61945 = -1.*t56150*t57727;
  t61953 = t61941 + t61945;
  t61991 = t20068*t57787;
  t61994 = t57774*t31785;
  t61995 = t61991 + t61994;
  t61998 = t163*t57742;
  t62015 = -1.*t56150*t57809;
  t62019 = t61998 + t62015;
  t59382 = t19898*t20068;
  t59436 = t31524*t31785;
  t59437 = t59382 + t59436;
  t60612 = 3.e-6*t20068*t32941;
  t60615 = -1.*t32941*t31785;
  t60641 = t60612 + t60615;
  t61846 = t58393*t61011;
  t61852 = -1.*t58280*t57984;
  t61867 = t61846 + t61852;
  t61873 = t58393*t61293;
  t61875 = -1.*t58280*t57991;
  t61903 = t61873 + t61875;
  t62124 = t58393*t61342;
  t62138 = -1.*t58280*t58003;
  t62153 = t62124 + t62138;
  t62240 = 3.e-6*t223*t20068;
  t62295 = -1.*t223*t31785;
  t62309 = t62240 + t62295;
  t62458 = -1.*t56150*t58015;
  t62461 = t57950 + t62458;
  t62854 = -3.000000000027e-6*t20068*t32941;
  t62855 = 1.000000000009*t32941*t31785;
  t62870 = t62854 + t62855;
  t62878 = -1.000000000009*t223*t163;
  t62880 = -1.*t56150*t58046;
  t62886 = t62878 + t62880;
  t62930 = t20068*t58080;
  t62935 = t58063*t31785;
  t62942 = t62930 + t62935;
  t62948 = t163*t58052;
  t62949 = -1.*t56150*t58138;
  t62955 = t62948 + t62949;
  t62980 = t20068*t58165;
  t63162 = t58158*t31785;
  t63164 = t62980 + t63162;
  t63228 = t163*t58153;
  t63233 = -1.*t56150*t58167;
  t63234 = t63228 + t63233;
  t63276 = t20068*t58242;
  t63279 = t58216*t31785;
  t63280 = t63276 + t63279;
  t63290 = t163*t58205;
  t63296 = -1.*t56150*t58255;
  t63297 = t63290 + t63296;
  t65119 = -3.e-6*t53555;
  t65111 = -3.e-6*t223;
  t65112 = t19719 + t65111;
  t65427 = -3.000018e-7*t3238;
  t65428 = -1. + t223;
  t65430 = 0.2*t65428;
  t65431 = -0.2*t223;
  t65434 = -0.05*t32941;
  t65435 = t65427 + t65430 + t65431 + t65434;
  t65318 = -1. + t24111;
  t65334 = 0.1*t65318;
  t65367 = 5.4e-18*t3238;
  t65383 = 1.5e-7*t32941;
  t65387 = t65334 + t65367 + t65383;
  t65444 = t65112*t20068;
  t65447 = t65444 + t31785;
  t65535 = 0.05*t56113;
  t65544 = 3.000018e-7*t32941;
  t65550 = t65535 + t65544;
  t65561 = t20068*t65435;
  t65563 = -1.*t65387*t31785;
  t65566 = t65561 + t65563;
  t65416 = t20068*t65387;
  t65436 = t65435*t31785;
  t65437 = t65416 + t65436;
  t58012 = -1.000000000009*t32941*t56150;
  t65609 = -1.*t20068*t65387;
  t65610 = -1.*t65435*t31785;
  t65615 = t65609 + t65610;
  t65552 = t65550*t56150;
  t65574 = t163*t65566;
  t65577 = t65552 + t65574;
  t65581 = t163*t65550;
  t65587 = -1.*t56150*t65566;
  t65588 = t65581 + t65587;
  t65619 = t163*t57955;
  t65620 = t58012 + t65619;
  t65286 = -1.*t20068;
  t65287 = t65112*t31785;
  t65302 = t65286 + t65287;
  t65115 = -1.*t65112*t31785;
  t65117 = t20068 + t65115;
  t65641 = Power(t163,2);
  t65655 = Power(t56150,2);
  t65724 = t56113*t56150;
  t65726 = t163*t57974;
  t65727 = t65724 + t65726;
  t57639 = t57609*t56150;
  t57666 = t163*t57645;
  t57668 = t57639 + t57666;
  t65979 = -1.8e-12*t3238;
  t65981 = 3.e-6*t3238*t53476;
  t65983 = t223*t51234;
  t65986 = -1.*t32941*t54254;
  t65996 = t65979 + t65430 + t65981 + t65983 + t65986;
  t65911 = 6.000000000054e-7*t3238;
  t65914 = t6713*t53476;
  t65930 = 3.e-6*t3238*t51234;
  t65931 = 3.e-6*t32941*t54254;
  t65974 = t65911 + t65914 + t65930 + t65931;
  t57368 = t57358*t56150;
  t57394 = t163*t57393;
  t57399 = t57368 + t57394;
  t66023 = -1.*t20068*t65974;
  t66024 = -1.*t65996*t31785;
  t66025 = t66023 + t66024;
  t66011 = t20068*t65996;
  t66012 = -1.*t65974*t31785;
  t66013 = t66011 + t66012;
  t66038 = 0.2000000000018*t32941;
  t66041 = -3.e-6*t32941*t53476;
  t66050 = t32941*t51234;
  t66051 = t56113*t54254;
  t66056 = t66038 + t66041 + t66050 + t66051;
  t65976 = t20068*t65974;
  t65998 = t65996*t31785;
  t66000 = t65976 + t65998;
  t66059 = t66056*t56150;
  t66060 = t163*t66013;
  t66062 = t66059 + t66060;
  t66067 = t163*t66056;
  t66068 = -1.*t56150*t66013;
  t66070 = t66067 + t66068;
  t57922 = t57920*t56150;
  t57926 = t163*t57925;
  t57927 = t57922 + t57926;
  t65121 = -3.e-6*t54974;
  t65151 = t65119 + t39432 + t65121 + t46125;
  t65155 = -3.e-6*t48840;
  t65162 = t65119 + t39432 + t65155 + t42610;
  t65192 = -3.e-6*t48730;
  t65223 = -3.e-6*t44300;
  t65231 = -3.e-6*t54801;
  t65233 = -1. + t51340 + t65192 + t65223 + t65231;
  t65443 = t65302*t65437;
  t65578 = t163*t65447*t65577;
  t65591 = -1.*t56150*t65447*t65588;
  t65592 = t65443 + t65578 + t65591;
  t66359 = -1.*t65550*t56150;
  t66360 = -1.*t163*t65566;
  t66361 = t66359 + t66360;
  t65694 = -1.*t59437*t65437;
  t65695 = -1.*t65620*t65577;
  t65703 = -1.*t57964*t65588;
  t65705 = t65694 + t65695 + t65703;
  t65715 = -1.*t65302*t65437;
  t65719 = -1.*t163*t65447*t65577;
  t65721 = t56150*t65447*t65588;
  t65722 = t65715 + t65719 + t65721;
  t65883 = t65437*t60641;
  t65884 = t65577*t65727;
  t65885 = t65588*t57977;
  t65886 = t65883 + t65884 + t65885;
  t66147 = -1.*t61011*t66000;
  t66152 = -1.*t57399*t66062;
  t66153 = -1.*t57984*t66070;
  t66155 = t66147 + t66152 + t66153;
  t66425 = -1.*t66056*t56150;
  t66426 = -1.*t163*t66013;
  t66430 = t66425 + t66426;
  t66157 = t61293*t66000;
  t66160 = t57668*t66062;
  t66165 = t57991*t66070;
  t66173 = t66157 + t66160 + t66165;
  t66230 = t61011*t66000;
  t66237 = t57399*t66062;
  t66242 = t57984*t66070;
  t66244 = t66230 + t66237 + t66242;
  t66266 = -1.*t66000*t61342;
  t66268 = -1.*t66062*t57927;
  t66269 = -1.*t66070*t58003;
  t66270 = t66266 + t66268 + t66269;
  t66305 = -1.*t61293*t66000;
  t66312 = -1.*t57668*t66062;
  t66318 = -1.*t57991*t66070;
  t66322 = t66305 + t66312 + t66318;
  t66337 = t66000*t61342;
  t66338 = t66062*t57927;
  t66339 = t66070*t58003;
  t66340 = t66337 + t66338 + t66339;
  t56151 = t56148*t56150;
  t56290 = t163*t56288;
  t56291 = t56151 + t56290;
  t66591 = 3.000000000054e-6*t42232;
  t57692 = t57684*t56150;
  t57730 = t163*t57727;
  t57731 = t57692 + t57730;
  t57743 = t57742*t56150;
  t57810 = t163*t57809;
  t57812 = t57743 + t57810;
  t66630 = t223*t56519;
  t66631 = 3.e-6*t3238*t56737;
  t66633 = -1.*t32941*t57002;
  t66635 = t66630 + t66631 + t66633;
  t66622 = 3.e-6*t3238*t56519;
  t66623 = t6713*t56737;
  t66624 = 3.e-6*t32941*t57002;
  t66626 = t66622 + t66623 + t66624;
  t66641 = t32941*t56519;
  t66642 = -3.e-6*t32941*t56737;
  t66643 = t56113*t57002;
  t66646 = t66641 + t66642 + t66643;
  t66650 = t20068*t66635;
  t66651 = -1.*t66626*t31785;
  t66664 = t66650 + t66651;
  t66629 = t20068*t66626;
  t66636 = t66635*t31785;
  t66637 = t66629 + t66636;
  t66647 = t66646*t56150;
  t66666 = t163*t66664;
  t66669 = t66647 + t66666;
  t66674 = t163*t66646;
  t66676 = -1.*t56150*t66664;
  t66683 = t66674 + t66676;
  t58055 = t58052*t56150;
  t58144 = t163*t58138;
  t58145 = t58055 + t58144;
  t58154 = t58153*t56150;
  t58187 = t163*t58167;
  t58197 = t58154 + t58187;
  t58209 = t58205*t56150;
  t58258 = t163*t58255;
  t58260 = t58209 + t58258;
  t67031 = -0.05*t223;
  t67032 = -3.000018e-7*t32941;
  t67033 = t67031 + t67032;
  t67026 = 1.5e-7*t223;
  t67027 = 9.000054e-13*t32941;
  t67029 = t67026 + t67027;
  t67037 = 3.000018e-7*t223;
  t67038 = -0.05000000000045*t32941;
  t67039 = t67037 + t67038;
  t67041 = t20068*t67033;
  t67044 = -1.*t67029*t31785;
  t67045 = t67041 + t67044;
  t58016 = t163*t58015;
  t58018 = t58012 + t58016;
  t67030 = t20068*t67029;
  t67034 = t67033*t31785;
  t67035 = t67030 + t67034;
  t67040 = t67039*t56150;
  t67047 = t163*t67045;
  t67049 = t67040 + t67047;
  t67054 = t163*t67039;
  t67057 = -1.*t56150*t67045;
  t67066 = t67054 + t67057;
  t58041 = -1.000000000009*t223*t56150;
  t58047 = t163*t58046;
  t58048 = t58041 + t58047;
  t67185 = -0.2000000000018*t32941;
  t67186 = 3.e-6*t32941*t53476;
  t67187 = -1.*t32941*t51234;
  t67193 = -1.*t223*t54254;
  t67199 = t67185 + t67186 + t67187 + t67193;
  t67166 = 6.000000000054e-7*t32941;
  t67167 = -9.e-12*t32941*t53476;
  t67168 = 3.e-6*t32941*t51234;
  t67169 = 3.e-6*t223*t54254;
  t67174 = t67166 + t67167 + t67168 + t67169;
  t67211 = 0.2000000000018*t223;
  t67212 = -3.e-6*t223*t53476;
  t67214 = -1.000000000009*t32941*t54254;
  t67217 = t67211 + t67212 + t65983 + t67214;
  t67219 = t20068*t67199;
  t67220 = -1.*t67174*t31785;
  t67221 = t67219 + t67220;
  t67180 = t20068*t67174;
  t67204 = t67199*t31785;
  t67207 = t67180 + t67204;
  t67218 = t67217*t56150;
  t67222 = t163*t67221;
  t67231 = t67218 + t67222;
  t67238 = t163*t67217;
  t67245 = -1.*t56150*t67221;
  t67248 = t67238 + t67245;
  t66589 = -3.e-6*t57431;
  t66592 = t56018 + t66589 + t66591;
  t66594 = -3.e-6*t57005;
  t66595 = t56021 + t66591 + t66594;
  t66606 = -3.e-6*t56146;
  t66607 = -3.e-6*t56019;
  t66608 = -3.e-6*t56022;
  t66609 = 1.8e-11*t42232;
  t66611 = t66606 + t66607 + t66608 + t66609;
  t67504 = -1.*t57358*t66056;
  t67506 = -1.*t57393*t66013;
  t67507 = t67504 + t66147 + t67506;
  t67511 = t57609*t66056;
  t67512 = t57645*t66013;
  t67514 = t67511 + t66157 + t67512;
  t66638 = t66637*t61293;
  t66640 = t61932*t66000;
  t66708 = -1.*t61011*t66637;
  t66714 = -1.*t61995*t66000;
  t67562 = t57358*t66056;
  t67563 = t57393*t66013;
  t67564 = t67562 + t66230 + t67563;
  t66750 = t61011*t66637;
  t66754 = t61995*t66000;
  t66771 = -1.*t61603*t66000;
  t66772 = -1.*t66637*t61342;
  t67566 = -1.*t66056*t57920;
  t67569 = -1.*t66013*t57925;
  t67581 = t67566 + t67569 + t66266;
  t67649 = -1.*t57609*t66056;
  t67651 = -1.*t57645*t66013;
  t67652 = t67649 + t66305 + t67651;
  t66899 = -1.*t66637*t61293;
  t66902 = -1.*t61932*t66000;
  t66963 = t61603*t66000;
  t66965 = t66637*t61342;
  t67654 = t66056*t57920;
  t67659 = t66013*t57925;
  t67660 = t67654 + t67659 + t66337;
  t65599 = -1.*t57955*t65437;
  t65600 = -1.*t59437*t65566;
  t65658 = t65447*t65437;
  t65659 = t65302*t65566;
  t65813 = -1.*t65447*t65437;
  t65816 = -1.*t65302*t65566;
  t65832 = t65566*t60641;
  t65852 = t65437*t57974;
  t66008 = -1.*t57393*t66000;
  t66014 = -1.*t61011*t66013;
  t66082 = t57645*t66000;
  t66118 = t61293*t66013;
  t66197 = t57393*t66000;
  t66198 = t61011*t66013;
  t66246 = -1.*t66000*t57925;
  t66250 = -1.*t66013*t61342;
  t66276 = -1.*t57645*t66000;
  t66277 = -1.*t61293*t66013;
  t66326 = t66000*t57925;
  t66327 = t66013*t61342;
  t67036 = -1.*t65302*t67035;
  t67835 = -1.*t65447*t65566;
  t67841 = t65715 + t67835;
  t67086 = t62309*t65437;
  t67089 = t67035*t60641;
  t67129 = t65302*t67035;
  t67763 = t65447*t65566;
  t67764 = t65443 + t67763;
  t67135 = -1.*t59437*t67035;
  t67138 = -1.*t65437*t62870;
  t67208 = -1.*t61011*t67207;
  t67210 = -1.*t62942*t66000;
  t67329 = t61293*t67207;
  t67330 = t63164*t66000;
  t67354 = t61011*t67207;
  t67355 = t62942*t66000;
  t67370 = -1.*t67207*t61342;
  t67372 = -1.*t66000*t63280;
  t67390 = -1.*t61293*t67207;
  t67391 = -1.*t63164*t66000;
  t67416 = t67207*t61342;
  t67419 = t66000*t63280;
  t68146 = -1.*t58052*t66056;
  t68153 = -1.*t57358*t67217;
  t68166 = t58153*t66056;
  t68167 = t57609*t67217;
  t68186 = t58052*t66056;
  t68187 = t57358*t67217;
  t68205 = -1.*t66056*t58205;
  t68208 = -1.*t67217*t57920;
  t68234 = -1.*t58153*t66056;
  t68235 = -1.*t57609*t67217;
  t68262 = t66056*t58205;
  t68270 = t67217*t57920;
  t68493 = -1.*t55044*t65996;
  t68497 = -1.*t55034*t65974;
  t68504 = t67504 + t68493 + t68497;
  t68553 = t55552*t65996;
  t68576 = t55409*t65974;
  t68579 = t67511 + t68553 + t68576;
  t67542 = t66646*t57609;
  t67545 = t57684*t66056;
  t67551 = -1.*t57358*t66646;
  t67553 = -1.*t57742*t66056;
  t68654 = t55044*t65996;
  t68687 = t55034*t65974;
  t68688 = t67562 + t68654 + t68687;
  t67608 = t57358*t66646;
  t67618 = t57742*t66056;
  t67636 = -1.*t56148*t66056;
  t67637 = -1.*t66646*t57920;
  t68744 = -1.*t65974*t55868;
  t68748 = -1.*t65996*t55941;
  t68754 = t68744 + t68748 + t67566;
  t68848 = -1.*t55552*t65996;
  t68850 = -1.*t55409*t65974;
  t68854 = t67649 + t68848 + t68850;
  t67674 = -1.*t66646*t57609;
  t67692 = -1.*t57684*t66056;
  t67701 = t56148*t66056;
  t67703 = t66646*t57920;
  t68866 = t65974*t55868;
  t68867 = t65996*t55941;
  t68871 = t68866 + t68867 + t67654;
  p_output1[0]=var2[19]*(-0.5*(0.0013000000000117*t57964 + 7.7999532000702e-9*t57977 + 0.043*t54925*t57984 + 0.043*t55383*t57991 + 0.043*t55859*t58003)*var2[4] - 0.5*(0.0013000000000117*t163*t32851 + 7.7999532000702e-9*t163*t33592 + 0.043*t163*t54925*t55049 + 0.043*t163*t55383*t55703 + 0.043*t163*t55859*t56013)*var2[5] - 0.5*(7.7999532000702e-9*t58018 + 0.0013000000000117*t58048 + 0.043*t54925*t58145 + 0.043*t55383*t58197 + 0.043*t55859*t58260)*var2[19] - 0.5*(0.043*t55859*t56291 + 0.043*t57353*t57399 + 0.043*t57557*t57668 + 0.043*t55383*t57731 + 0.043*t54925*t57812 + 0.043*t57914*t57927)*var2[21]);
  p_output1[1]=var2[19]*(-0.5*(0.0013000000000117*(-1.*t57964*t58393 - 1.*t58280*t59437) + 7.7999532000702e-9*(-1.*t57977*t58393 - 1.*t58280*t60641) + 0.043*t54925*(-1.*t57984*t58393 - 1.*t58280*t61011) + 0.043*t55383*(-1.*t57991*t58393 - 1.*t58280*t61293) + 0.043*t55859*(-1.*t58003*t58393 - 1.*t58280*t61342))*var2[3] - 0.5*(-0.0013000000000117*t58280*t58286 - 7.7999532000702e-9*t58280*t58346 - 0.043*t54925*t58280*t58360 - 0.043*t55383*t58280*t58375 - 0.043*t55859*t58280*t58381)*var2[4] - 0.5*(0.043*t54925*(t55049*t56150*t58280 + t57393*t58393) + 0.043*t55383*(t55703*t56150*t58280 + t57645*t58393) + 0.043*t55859*(t56013*t56150*t58280 + t57925*t58393) + 0.0013000000000117*(t32851*t56150*t58280 + t57955*t58393) + 7.7999532000702e-9*(t33592*t56150*t58280 + t57974*t58393))*var2[5] - 0.5*(7.7999532000702e-9*(t58393*t62309 - 1.*t58280*t62461) + 0.0013000000000117*(t58393*t62870 - 1.*t58280*t62886) + 0.043*t54925*(t58393*t62942 - 1.*t58280*t62955) + 0.043*t55383*(t58393*t63164 - 1.*t58280*t63234) + 0.043*t55859*(t58393*t63280 - 1.*t58280*t63297))*var2[19] - 0.5*(0.043*t55859*(t58393*t61603 - 1.*t58280*t61796) + 0.043*t57353*t61867 + 0.043*t57557*t61903 + 0.043*t55383*(t58393*t61932 - 1.*t58280*t61953) + 0.043*t54925*(t58393*t61995 - 1.*t58280*t62019) + 0.043*t57914*t62153)*var2[21]);
  p_output1[2]=var2[19]*(-0.5*(0.0013000000000117*(-1.*t57964*t58280 + t58393*t59437) + 7.7999532000702e-9*(-1.*t57977*t58280 + t58393*t60641) + 0.043*t54925*t61867 + 0.043*t55383*t61903 + 0.043*t55859*t62153)*var2[3] - 0.5*(0.0013000000000117*t58286*t58393 + 7.7999532000702e-9*t58346*t58393 + 0.043*t54925*t58360*t58393 + 0.043*t55383*t58375*t58393 + 0.043*t55859*t58381*t58393)*var2[4] - 0.5*(0.0013000000000117*(t57955*t58280 - 1.*t32851*t56150*t58393) + 7.7999532000702e-9*(t57974*t58280 - 1.*t33592*t56150*t58393) + 0.043*t54925*(t57393*t58280 - 1.*t55049*t56150*t58393) + 0.043*t55383*(t57645*t58280 - 1.*t55703*t56150*t58393) + 0.043*t55859*(t57925*t58280 - 1.*t56013*t56150*t58393))*var2[5] - 0.5*(7.7999532000702e-9*(t58280*t62309 + t58393*t62461) + 0.0013000000000117*(t58280*t62870 + t58393*t62886) + 0.043*t54925*(t58280*t62942 + t58393*t62955) + 0.043*t55383*(t58280*t63164 + t58393*t63234) + 0.043*t55859*(t58280*t63280 + t58393*t63297))*var2[19] - 0.5*(0.043*t57353*(t57984*t58393 + t58280*t61011) + 0.043*t57557*(t57991*t58393 + t58280*t61293) + 0.043*t57914*(t58003*t58393 + t58280*t61342) + 0.043*t55859*(t58280*t61603 + t58393*t61796) + 0.043*t55383*(t58280*t61932 + t58393*t61953) + 0.043*t54925*(t58280*t61995 + t58393*t62019))*var2[21]);
  p_output1[3]=var2[19]*(-0.5*(0.000271*t57984*t65151 + 2.e-6*t57991*t65162 + 0.000271*t58003*t65233 - 0.000046000000000414*t56150*t65447 + 7.7999532000702e-9*(t57964*t65592 - 1.*t56150*t65447*t65705 + t163*t65447*(-1.*t57964*t65577 - 1.*t58286*t65588 - 1.*t65588*t65620 - 1.*t57964*t66361) + t65620*(-1.*t56150*t65447*t65577 - 1.*t56150*t65447*t66361)) + 0.0013000000000117*(t57977*t65722 - 1.*t56150*t65447*t65886 + t163*t65447*(t57977*t65577 + t58346*t65588 + t65588*t65727 + t57977*t66361) + t65727*(t56150*t65447*t65577 + t56150*t65447*t66361)) + 0.043*t55859*(t57991*t66155 + t57984*t66173 + t57668*(-1.*t57984*t66062 - 1.*t57399*t66070 - 1.*t58360*t66070 - 1.*t57984*t66430) + t57399*(t57991*t66062 + t57668*t66070 + t58375*t66070 + t57991*t66430)) + 0.043*t55383*(t58003*t66244 + t57984*t66270 + t57927*(t57984*t66062 + t57399*t66070 + t58360*t66070 + t57984*t66430) + t57399*(-1.*t58003*t66062 - 1.*t57927*t66070 - 1.*t58381*t66070 - 1.*t58003*t66430)) + 0.043*t54925*(t58003*t66322 + t57991*t66340 + t57927*(-1.*t57991*t66062 - 1.*t57668*t66070 - 1.*t58375*t66070 - 1.*t57991*t66430) + t57668*(t58003*t66062 + t57927*t66070 + t58381*t66070 + t58003*t66430)))*var2[4] - 0.5*(0.000046000000000414*t163*t65117 + 0.000271*t163*t55049*t65151 + 2.e-6*t163*t55703*t65162 + 0.000271*t163*t56013*t65233 + 7.7999532000702e-9*(t163*t32851*t65592 + t163*t65447*(-1.*t163*t32851*t65577 + t32851*t56150*t65588 + t65599 + t65600 + t56150*t57964*t65615 - 1.*t163*t65615*t65620) + t65620*(t163*t65117*t65577 - 1.*t56150*t65117*t65588 + t65447*t65615*t65641 + t65447*t65615*t65655 + t65658 + t65659) + t163*t65117*t65705) + 0.0013000000000117*(t163*t33592*t65722 + t65727*(-1.*t163*t65117*t65577 + t56150*t65117*t65588 - 1.*t65447*t65615*t65641 - 1.*t65447*t65615*t65655 + t65813 + t65816) + t163*t65447*(t163*t33592*t65577 - 1.*t33592*t56150*t65588 - 1.*t56150*t57977*t65615 + t163*t65615*t65727 + t65832 + t65852) + t163*t65117*t65886) + 0.043*t55859*(t57668*(t66008 + t66014 - 1.*t163*t57399*t66025 + t56150*t57984*t66025 - 1.*t163*t55049*t66062 + t55049*t56150*t66070) + t57399*(t163*t57668*t66025 - 1.*t56150*t57991*t66025 + t163*t55703*t66062 - 1.*t55703*t56150*t66070 + t66082 + t66118) + t163*t55703*t66155 + t163*t55049*t66173) + 0.043*t55383*(t57927*(t163*t57399*t66025 - 1.*t56150*t57984*t66025 + t163*t55049*t66062 - 1.*t55049*t56150*t66070 + t66197 + t66198) + t163*t56013*t66244 + t57399*(-1.*t163*t57927*t66025 + t56150*t58003*t66025 - 1.*t163*t56013*t66062 + t56013*t56150*t66070 + t66246 + t66250) + t163*t55049*t66270) + 0.043*t54925*(t57927*(-1.*t163*t57668*t66025 + t56150*t57991*t66025 - 1.*t163*t55703*t66062 + t55703*t56150*t66070 + t66276 + t66277) + t163*t56013*t66322 + t57668*(t163*t57927*t66025 - 1.*t56150*t58003*t66025 + t163*t56013*t66062 - 1.*t56013*t56150*t66070 + t66326 + t66327) + t163*t55703*t66340))*var2[5] - 0.5*(0.000271*t58145*t65151 + 2.e-6*t58197*t65162 + 0.000271*t58260*t65233 + 0.0013000000000117*(t58018*t65722 + t65727*(t67036 - 1.*t163*t65447*t67049 + t56150*t65447*t67066) + t163*t65447*(t58018*t65577 + t62461*t65588 + t65727*t67049 + t57977*t67066 + t67086 + t67089)) + 7.7999532000702e-9*(t58048*t65592 + t65620*(t163*t65447*t67049 - 1.*t56150*t65447*t67066 + t67129) + t163*t65447*(-1.*t58048*t65577 - 1.*t62886*t65588 - 1.*t65620*t67049 - 1.*t57964*t67066 + t67135 + t67138)) + 0.043*t55859*(t58197*t66155 + t58145*t66173 + t57668*(-1.*t58145*t66062 - 1.*t62955*t66070 + t67208 + t67210 - 1.*t57399*t67231 - 1.*t57984*t67248) + t57399*(t58197*t66062 + t63234*t66070 + t57668*t67231 + t57991*t67248 + t67329 + t67330)) + 0.043*t55383*(t58260*t66244 + t58145*t66270 + t57927*(t58145*t66062 + t62955*t66070 + t57399*t67231 + t57984*t67248 + t67354 + t67355) + t57399*(-1.*t58260*t66062 - 1.*t63297*t66070 - 1.*t57927*t67231 - 1.*t58003*t67248 + t67370 + t67372)) + 0.043*t54925*(t58260*t66322 + t58197*t66340 + t57927*(-1.*t58197*t66062 - 1.*t63234*t66070 - 1.*t57668*t67231 - 1.*t57991*t67248 + t67390 + t67391) + t57668*(t58260*t66062 + t63297*t66070 + t57927*t67231 + t58003*t67248 + t67416 + t67419)))*var2[19] - 0.5*(0.000271*t57812*t65151 + 2.e-6*t57731*t65162 + 0.000271*t56291*t65233 + 0.043*t57914*(t57668*t66155 + t57399*t66173) + 0.043*t57557*(t57927*t66244 + t57399*t66270) + 0.043*t57353*(t57927*t66322 + t57668*t66340) + 0.000271*t57399*t66592 + 2.e-6*t57668*t66595 + 0.000271*t57927*t66611 + 0.043*t55859*(t57731*t66155 + t57812*t66173 + t57399*(t57731*t66062 + t61953*t66070 + t66638 + t66640 + t57668*t66669 + t57991*t66683) + t57668*(-1.*t57812*t66062 - 1.*t62019*t66070 - 1.*t57399*t66669 - 1.*t57984*t66683 + t66708 + t66714)) + 0.043*t55383*(t56291*t66244 + t57812*t66270 + t57927*(t57812*t66062 + t62019*t66070 + t57399*t66669 + t57984*t66683 + t66750 + t66754) + t57399*(-1.*t56291*t66062 - 1.*t61796*t66070 - 1.*t57927*t66669 - 1.*t58003*t66683 + t66771 + t66772)) + 0.043*t54925*(t56291*t66322 + t57731*t66340 + t57927*(-1.*t57731*t66062 - 1.*t61953*t66070 - 1.*t57668*t66669 - 1.*t57991*t66683 + t66899 + t66902) + t57668*(t56291*t66062 + t61796*t66070 + t57927*t66669 + t58003*t66683 + t66963 + t66965)))*var2[21]);
  p_output1[4]=var2[19]*(-0.5*(0.000271*t57393*t65151 + 2.e-6*t57645*t65162 + 0.000271*t57925*t65233 + 0.000046000000000414*t65447 + 0.043*t55859*(t61293*(t66008 - 1.*t55049*t66013 + t66014 - 1.*t57393*t66025) + t61011*(t55703*t66013 + t57645*t66025 + t66082 + t66118) + t57645*t67507 + t57393*t67514) + 0.043*t55383*(t61342*(t55049*t66013 + t57393*t66025 + t66197 + t66198) + t61011*(-1.*t56013*t66013 - 1.*t57925*t66025 + t66246 + t66250) + t57925*t67564 + t57393*t67581) + 0.043*t54925*(t61342*(-1.*t55703*t66013 - 1.*t57645*t66025 + t66276 + t66277) + t61293*(t56013*t66013 + t57925*t66025 + t66326 + t66327) + t57925*t67652 + t57645*t67660) + 7.7999532000702e-9*(t65302*(-1.*t32851*t65566 + t65599 + t65600 - 1.*t57955*t65615) + t59437*(t65117*t65566 + t65447*t65615 + t65658 + t65659) + t65447*(1.000000000009*t32941*t65550 - 1.*t57955*t65566 + t65694) + t57955*t67764) + 0.0013000000000117*(t60641*(-1.*t65117*t65566 - 1.*t65447*t65615 + t65813 + t65816) + t65302*(t33592*t65566 + t57974*t65615 + t65832 + t65852) + t65447*(t56113*t65550 + t57974*t65566 + t65883) + t57974*t67841))*var2[5] - 0.5*(0.000271*t62942*t65151 + 2.e-6*t63164*t65162 + 0.000271*t63280*t65233 + 7.7999532000702e-9*(t59437*(t65447*t67045 + t67129) + t65302*(1.000000000009*t223*t65550 - 1.*t58046*t65566 + 1.000000000009*t32941*t67039 - 1.*t57955*t67045 + t67135 + t67138) + t62870*t67764) + 0.0013000000000117*(t60641*(t67036 - 1.*t65447*t67045) + t65302*(-1.000000000009*t32941*t65550 + t58015*t65566 + t56113*t67039 + t57974*t67045 + t67086 + t67089) + t62309*t67841) + 0.043*t55859*(t63164*t67507 + t62942*t67514 + t61293*(-1.*t58138*t66013 + t67208 + t67210 - 1.*t57393*t67221 + t68146 + t68153) + t61011*(t58167*t66013 + t57645*t67221 + t67329 + t67330 + t68166 + t68167)) + 0.043*t55383*(t63280*t67564 + t62942*t67581 + t61342*(t58138*t66013 + t57393*t67221 + t67354 + t67355 + t68186 + t68187) + t61011*(-1.*t58255*t66013 - 1.*t57925*t67221 + t67370 + t67372 + t68205 + t68208)) + 0.043*t54925*(t63280*t67652 + t63164*t67660 + t61342*(-1.*t58167*t66013 - 1.*t57645*t67221 + t67390 + t67391 + t68234 + t68235) + t61293*(t58255*t66013 + t57925*t67221 + t67416 + t67419 + t68262 + t68270)))*var2[19] - 0.5*(0.000271*t61995*t65151 + 2.e-6*t61932*t65162 + 0.000271*t61603*t65233 + 0.000271*t61011*t66592 + 2.e-6*t61293*t66595 + 0.000271*t61342*t66611 + 0.043*t57914*(t61293*t67507 + t61011*t67514) + 0.043*t55859*(t61932*t67507 + t61995*t67514 + t61011*(t57727*t66013 + t66638 + t66640 + t57645*t66664 + t67542 + t67545) + t61293*(-1.*t57809*t66013 - 1.*t57393*t66664 + t66708 + t66714 + t67551 + t67553)) + 0.043*t57557*(t61342*t67564 + t61011*t67581) + 0.043*t55383*(t61603*t67564 + t61995*t67581 + t61342*(t57809*t66013 + t57393*t66664 + t66750 + t66754 + t67608 + t67618) + t61011*(-1.*t56288*t66013 - 1.*t57925*t66664 + t66771 + t66772 + t67636 + t67637)) + 0.043*t57353*(t61342*t67652 + t61293*t67660) + 0.043*t54925*(t61603*t67652 + t61932*t67660 + t61342*(-1.*t57727*t66013 - 1.*t57645*t66664 + t66899 + t66902 + t67674 + t67692) + t61293*(t56288*t66013 + t57925*t66664 + t66963 + t66965 + t67701 + t67703)))*var2[21]);
  p_output1[5]=var2[19]*(-0.5*(0.000271*t58052*t65151 + 2.e-6*t58153*t65162 + 0.000271*t58205*t65233 - 0.0013000000000234*t32941*(t65334 + t65367 + t65383 - 1.*t65112*t65435) + 0.0013000000000117*t56113*(t67026 + t67027 - 1.*t65112*t67033) - 7.7999532001404e-9*t32941*(-1.5e-7*t223 - 9.000054e-13*t32941 + t65112*t67033) - 7.7999532001404e-9*t223*(-5.4e-18*t3238 - 1.5e-7*t32941 + t65112*t65435 + 0.1*t6713) + 0.043*t55859*(t57609*(-1.*t58080*t65974 - 1.*t58063*t65996 - 1.*t55034*t67174 - 1.*t55044*t67199 + t68146 + t68153) + t57358*(t58165*t65974 + t58158*t65996 + t55409*t67174 + t55552*t67199 + t68166 + t68167) + t58153*t68504 + t58052*t68579) + 0.043*t55383*(t57920*(t58080*t65974 + t58063*t65996 + t55034*t67174 + t55044*t67199 + t68186 + t68187) + t57358*(-1.*t58242*t65974 - 1.*t58216*t65996 - 1.*t55868*t67174 - 1.*t55941*t67199 + t68205 + t68208) + t58205*t68688 + t58052*t68754) + 0.043*t54925*(t57920*(-1.*t58165*t65974 - 1.*t58158*t65996 - 1.*t55409*t67174 - 1.*t55552*t67199 + t68234 + t68235) + t57609*(t58242*t65974 + t58216*t65996 + t55868*t67174 + t55941*t67199 + t68262 + t68270) + t58205*t68854 + t58153*t68871))*var2[19] - 0.5*(0.000271*t57742*t65151 + 2.e-6*t57684*t65162 + 0.000271*t56148*t65233 + 0.000271*t57358*t66592 + 2.e-6*t57609*t66595 + 0.000271*t57920*t66611 + 0.043*t57914*(t57609*t68504 + t57358*t68579) + 0.043*t55859*(t57358*(t57720*t65974 + t57705*t65996 + t55409*t66626 + t55552*t66635 + t67542 + t67545) + t57609*(-1.*t57787*t65974 - 1.*t57774*t65996 - 1.*t55034*t66626 - 1.*t55044*t66635 + t67551 + t67553) + t57684*t68504 + t57742*t68579) + 0.043*t57557*(t57920*t68688 + t57358*t68754) + 0.043*t55383*(t57920*(t57787*t65974 + t57774*t65996 + t55034*t66626 + t55044*t66635 + t67608 + t67618) + t57358*(-1.*t56226*t65974 - 1.*t56165*t65996 - 1.*t55868*t66626 - 1.*t55941*t66635 + t67636 + t67637) + t56148*t68688 + t57742*t68754) + 0.043*t57353*(t57920*t68854 + t57609*t68871) + 0.043*t54925*(t57920*(-1.*t57720*t65974 - 1.*t57705*t65996 - 1.*t55409*t66626 - 1.*t55552*t66635 + t67674 + t67692) + t57609*(t56226*t65974 + t56165*t65996 + t55868*t66626 + t55941*t66635 + t67701 + t67703) + t56148*t68854 + t57684*t68871))*var2[21]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=-0.5*(0.086*t54925*t57353 + 0.086*t55383*t57557 + 0.086*t55859*t57914 + 0.000542*t65151*t66592 + 4.e-6*t65162*t66595 + 0.000542*t65233*t66611)*var2[19]*var2[21];
  p_output1[20]=0;
  p_output1[21]=-0.5*(1.28999742002322e-8*t57353 + 0.004299987100129*t57557 + 4.3e-9*t57914 + 0.000271000000004878*t66611)*var2[19]*var2[21];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec20_minitaur.hh"

namespace FrontStance
{

void Ce1_vec20_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
