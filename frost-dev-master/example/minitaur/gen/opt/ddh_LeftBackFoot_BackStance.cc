/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 23:56:46 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1486;
  double t1823;
  double t1943;
  double t2387;
  double t3427;
  double t3429;
  double t3437;
  double t3545;
  double t3568;
  double t2730;
  double t2938;
  double t2967;
  double t3271;
  double t3605;
  double t3607;
  double t3789;
  double t3573;
  double t3580;
  double t3803;
  double t3682;
  double t3683;
  double t3709;
  double t3724;
  double t3770;
  double t3775;
  double t4233;
  double t4368;
  double t4378;
  double t4387;
  double t4584;
  double t4596;
  double t4642;
  double t4670;
  double t4696;
  double t5250;
  double t5265;
  double t5360;
  double t5375;
  double t5315;
  double t3833;
  double t5300;
  double t5439;
  double t29962;
  double t30117;
  double t29480;
  double t29557;
  double t32752;
  double t43422;
  double t44190;
  double t43839;
  double t29898;
  double t30228;
  double t30274;
  double t30349;
  double t30411;
  double t31115;
  double t32787;
  double t32862;
  double t34302;
  double t37021;
  double t38444;
  double t38483;
  double t38513;
  double t41371;
  double t42994;
  double t43372;
  double t43382;
  double t43733;
  double t43761;
  double t43856;
  double t43980;
  double t43991;
  double t43993;
  double t44024;
  double t44196;
  double t44199;
  double t44293;
  double t44323;
  double t44404;
  double t44431;
  double t44438;
  double t44461;
  double t44474;
  double t44651;
  double t44854;
  double t4422;
  double t4445;
  double t4473;
  double t4490;
  double t4539;
  double t3800;
  double t3838;
  double t3877;
  double t3889;
  double t4228;
  double t3402;
  double t3501;
  double t3595;
  double t3647;
  double t3650;
  double t50032;
  double t50112;
  double t50115;
  double t50116;
  double t50127;
  double t50128;
  double t14660;
  double t20477;
  double t50130;
  double t50140;
  double t50141;
  double t50151;
  double t5336;
  double t5448;
  double t49749;
  double t49928;
  double t49942;
  double t50120;
  double t50129;
  double t50152;
  double t50175;
  double t50178;
  double t50180;
  double t50198;
  double t50229;
  double t50341;
  double t50464;
  double t50620;
  double t50626;
  double t50630;
  double t50841;
  double t50862;
  double t50879;
  double t50890;
  double t50906;
  double t50937;
  double t1945;
  double t2011;
  double t2085;
  double t2110;
  double t50990;
  double t50993;
  double t51028;
  double t51039;
  double t51053;
  double t51077;
  double t51088;
  double t51093;
  double t50974;
  double t50975;
  double t51021;
  double t51074;
  double t51094;
  double t51145;
  double t51146;
  double t51149;
  double t51150;
  double t51153;
  double t51243;
  double t51376;
  double t51420;
  double t51421;
  double t51447;
  double t51450;
  double t51460;
  double t51465;
  double t51475;
  double t51478;
  double t51503;
  double t51590;
  double t51593;
  double t51609;
  double t51618;
  double t51624;
  double t51632;
  double t51659;
  double t51688;
  double t51737;
  double t51751;
  double t51755;
  double t51758;
  double t51537;
  double t51541;
  double t51563;
  double t51619;
  double t51720;
  double t51775;
  double t51780;
  double t51797;
  double t51817;
  double t51842;
  double t51848;
  double t51852;
  double t51862;
  double t51873;
  double t51877;
  double t51879;
  double t51889;
  double t51896;
  double t51913;
  double t51914;
  double t51928;
  double t51931;
  double t51987;
  double t51990;
  double t52015;
  double t52024;
  double t52068;
  double t52086;
  double t52092;
  double t52353;
  double t52354;
  double t52356;
  double t52367;
  double t52373;
  double t53246;
  double t53247;
  double t53261;
  double t53264;
  double t53265;
  double t53268;
  double t53270;
  double t53271;
  double t54014;
  double t54969;
  double t52195;
  double t52200;
  double t52209;
  double t52224;
  double t52228;
  double t52233;
  double t52242;
  double t52255;
  double t52264;
  double t52267;
  double t52269;
  double t52275;
  double t52280;
  double t52291;
  double t52300;
  double t52302;
  double t52319;
  double t52320;
  double t52322;
  double t51963;
  double t51976;
  double t58272;
  double t58295;
  double t58304;
  double t58308;
  double t60608;
  double t60654;
  double t53232;
  double t53234;
  double t53250;
  double t53266;
  double t53280;
  double t53458;
  double t53611;
  double t53782;
  double t53784;
  double t53790;
  double t53806;
  double t53835;
  double t53901;
  double t53928;
  double t53936;
  double t53940;
  double t53941;
  double t53943;
  double t53951;
  double t53952;
  double t53957;
  double t56333;
  double t57529;
  double t57686;
  double t57701;
  double t57736;
  double t57745;
  double t57860;
  double t58017;
  double t58082;
  double t58124;
  double t58133;
  double t58137;
  double t58141;
  double t58148;
  double t58159;
  double t58160;
  double t58179;
  double t58197;
  double t58203;
  double t62062;
  double t62066;
  double t62068;
  double t62071;
  double t62093;
  double t62103;
  double t62113;
  double t62132;
  double t62150;
  double t62166;
  double t55751;
  double t55806;
  double t55858;
  double t55860;
  double t55884;
  double t55886;
  double t55941;
  double t55971;
  double t56022;
  double t56024;
  double t56042;
  double t56065;
  double t56150;
  double t56152;
  double t56156;
  double t56157;
  double t56165;
  double t56167;
  double t56174;
  double t58271;
  double t62924;
  double t62972;
  double t62973;
  double t62974;
  double t62976;
  double t62978;
  double t52332;
  double t52349;
  double t52363;
  double t52375;
  double t52390;
  double t52391;
  double t52394;
  double t52602;
  double t52759;
  double t52963;
  double t53103;
  double t53126;
  double t53161;
  double t53185;
  double t53201;
  double t53211;
  double t53213;
  double t53219;
  double t53220;
  double t53221;
  double t53223;
  double t62018;
  double t62030;
  double t62047;
  double t62074;
  double t62140;
  double t62169;
  double t62187;
  double t62211;
  double t62221;
  double t62223;
  double t62224;
  double t62226;
  double t62230;
  double t62234;
  double t62238;
  double t62240;
  double t62243;
  double t62248;
  double t62252;
  double t62255;
  double t62258;
  double t62610;
  double t63514;
  double t63575;
  double t63545;
  double t63576;
  double t63578;
  double t63594;
  double t63599;
  double t63619;
  double t63753;
  double t63756;
  double t63757;
  double t63759;
  double t63761;
  double t63771;
  double t63773;
  double t63778;
  double t63785;
  double t63789;
  double t63790;
  double t63792;
  double t63740;
  double t63743;
  double t63746;
  double t63760;
  double t63781;
  double t63804;
  double t63806;
  double t63814;
  double t63816;
  double t63817;
  double t63820;
  double t63824;
  double t63825;
  double t63827;
  double t63832;
  double t63834;
  double t63838;
  double t63841;
  double t63844;
  double t63847;
  double t63849;
  double t63853;
  double t63626;
  double t63628;
  double t63637;
  double t63643;
  double t63682;
  double t63684;
  double t63700;
  double t63709;
  double t63719;
  double t63723;
  double t63725;
  double t63731;
  double t63905;
  double t63907;
  double t63908;
  double t63917;
  double t63921;
  double t63923;
  double t63942;
  double t63950;
  double t63952;
  double t63972;
  double t63983;
  double t63989;
  double t63992;
  double t63995;
  double t64003;
  double t64006;
  double t64008;
  double t64009;
  double t63903;
  double t63912;
  double t63933;
  double t63974;
  double t64000;
  double t64014;
  double t64016;
  double t64021;
  double t64023;
  double t64049;
  double t64082;
  double t64084;
  double t64116;
  double t64140;
  double t64142;
  double t64144;
  double t64146;
  double t64147;
  double t64156;
  double t64157;
  double t64158;
  double t64159;
  double t64173;
  double t64176;
  double t64178;
  double t64255;
  double t64261;
  double t64312;
  double t64323;
  double t64324;
  double t64367;
  double t64384;
  double t64388;
  double t64224;
  double t64252;
  double t64265;
  double t64331;
  double t64389;
  double t64405;
  double t64411;
  double t64438;
  double t64439;
  double t64444;
  double t64445;
  double t64446;
  double t64477;
  double t64487;
  double t64499;
  double t64508;
  double t64538;
  double t64563;
  double t64577;
  double t64578;
  double t64587;
  double t64621;
  double t64626;
  double t64628;
  double t64638;
  double t64639;
  double t64641;
  double t64654;
  double t64655;
  double t64656;
  double t64660;
  double t64665;
  double t64669;
  double t64670;
  double t64674;
  double t64676;
  double t64678;
  double t64679;
  double t64680;
  double t64681;
  double t64699;
  double t64702;
  double t64704;
  double t64708;
  double t64735;
  double t64753;
  double t64777;
  double t64794;
  double t64806;
  double t64811;
  double t64686;
  double t64687;
  double t64692;
  double t64710;
  double t64805;
  double t64816;
  double t64817;
  double t64818;
  double t64856;
  double t64859;
  double t64902;
  double t64904;
  double t64908;
  double t64912;
  double t64961;
  double t64966;
  double t64967;
  double t64969;
  double t64978;
  double t65026;
  double t65027;
  double t65036;
  double t65088;
  double t65101;
  double t65108;
  double t65109;
  double t65125;
  double t65131;
  double t65132;
  double t65135;
  double t65142;
  double t65146;
  double t65149;
  double t65154;
  double t65469;
  double t65470;
  double t65477;
  double t65480;
  double t65484;
  double t65486;
  double t65497;
  double t65539;
  double t65549;
  double t65553;
  double t65642;
  double t65665;
  double t65669;
  double t65679;
  double t65680;
  double t65683;
  double t65685;
  double t65686;
  double t65769;
  double t65775;
  double t65776;
  double t65777;
  double t65779;
  double t65780;
  double t65781;
  double t65783;
  double t65785;
  double t65786;
  double t65787;
  double t65788;
  double t65349;
  double t65351;
  double t65356;
  double t65378;
  double t65392;
  double t65426;
  double t65429;
  double t65430;
  double t65431;
  double t65433;
  double t65444;
  double t65447;
  double t65454;
  double t65455;
  double t65456;
  double t65457;
  double t65458;
  double t65459;
  double t65460;
  double t53986;
  double t53988;
  double t53994;
  double t53996;
  double t54009;
  double t54015;
  double t54020;
  double t54129;
  double t54816;
  double t54828;
  double t54885;
  double t54917;
  double t54927;
  double t54972;
  double t55275;
  double t65462;
  double t65465;
  double t65467;
  double t65481;
  double t65490;
  double t65555;
  double t65556;
  double t65558;
  double t65565;
  double t65573;
  double t65579;
  double t65582;
  double t65583;
  double t65584;
  double t65589;
  double t65590;
  double t65595;
  double t65596;
  double t65598;
  double t65602;
  double t65604;
  double t65607;
  double t65956;
  double t65957;
  double t65958;
  double t65960;
  double t65962;
  double t65964;
  double t65966;
  double t65968;
  double t65971;
  double t65972;
  double t65764;
  double t66013;
  double t66014;
  double t66015;
  double t66017;
  double t66020;
  double t66023;
  double t66024;
  double t66031;
  double t66088;
  double t66089;
  double t66090;
  double t66105;
  double t66111;
  double t65921;
  double t65922;
  double t65923;
  double t65925;
  double t65926;
  double t65928;
  double t65930;
  double t65931;
  double t65932;
  double t65933;
  double t65935;
  double t65936;
  double t65937;
  double t65938;
  double t65939;
  double t65941;
  double t65943;
  double t65944;
  double t65945;
  double t65621;
  double t65630;
  double t65667;
  double t65682;
  double t65687;
  double t65688;
  double t65689;
  double t65690;
  double t65691;
  double t65692;
  double t65693;
  double t65702;
  double t65710;
  double t65720;
  double t65732;
  double t65743;
  double t65756;
  double t65757;
  double t65758;
  double t65760;
  double t65762;
  double t66157;
  double t66159;
  double t66160;
  double t66166;
  double t66169;
  double t66172;
  double t66173;
  double t66177;
  double t66179;
  double t66182;
  double t66183;
  double t65854;
  double t65857;
  double t65858;
  double t65859;
  double t65861;
  double t65862;
  double t65866;
  double t65868;
  double t65869;
  double t65871;
  double t65872;
  double t65874;
  double t65877;
  double t65881;
  double t65883;
  double t65884;
  double t65886;
  double t65887;
  double t65889;
  double t66086;
  double t66087;
  double t66097;
  double t66098;
  double t66113;
  double t66119;
  double t66120;
  double t66121;
  double t66125;
  double t66133;
  double t66134;
  double t66135;
  double t66136;
  double t66137;
  double t66138;
  double t66140;
  double t66145;
  double t66146;
  double t66147;
  double t66148;
  double t66150;
  double t66238;
  double t66239;
  double t66249;
  double t66264;
  double t66265;
  double t66272;
  double t66274;
  double t66275;
  double t66277;
  double t66278;
  double t66282;
  double t65058;
  double t65061;
  double t65072;
  double t65124;
  double t65141;
  double t65155;
  double t65160;
  double t65163;
  double t65165;
  double t65170;
  double t65171;
  double t65179;
  double t65195;
  double t65198;
  double t65201;
  double t65202;
  double t65207;
  double t65210;
  double t65212;
  double t65219;
  double t65242;
  double t65322;
  double t66162;
  double t66165;
  double t66170;
  double t66178;
  double t66186;
  double t66190;
  double t66191;
  double t66192;
  double t66195;
  double t66200;
  double t66207;
  double t66209;
  double t66210;
  double t66211;
  double t66212;
  double t66213;
  double t66214;
  double t66217;
  double t66219;
  double t66220;
  double t66221;
  double t65823;
  double t65824;
  double t65825;
  double t65826;
  double t65827;
  double t65829;
  double t65832;
  double t65834;
  double t65837;
  double t65838;
  double t65840;
  double t65843;
  double t65844;
  double t65845;
  double t65846;
  double t65848;
  double t65850;
  double t65851;
  double t65852;
  double t65951;
  double t65952;
  double t65955;
  double t65961;
  double t65969;
  double t65973;
  double t65974;
  double t65979;
  double t65981;
  double t65982;
  double t65986;
  double t65987;
  double t65989;
  double t65990;
  double t65991;
  double t65992;
  double t65993;
  double t65996;
  double t65997;
  double t66002;
  double t66003;
  double t66005;
  double t66234;
  double t66251;
  double t66313;
  double t66320;
  double t66322;
  double t66388;
  double t66391;
  double t66392;
  double t66446;
  double t66448;
  double t66450;
  double t66452;
  double t66457;
  double t66458;
  double t66461;
  double t66462;
  double t66472;
  double t66476;
  double t66477;
  double t66478;
  double t66435;
  double t66437;
  double t66440;
  double t66454;
  double t66464;
  double t66479;
  double t66483;
  double t66484;
  double t66485;
  double t66491;
  double t66492;
  double t66493;
  double t66494;
  double t66496;
  double t66497;
  double t66498;
  double t66499;
  double t66500;
  double t66501;
  double t66502;
  double t66505;
  double t66506;
  double t66394;
  double t66395;
  double t66396;
  double t66403;
  double t66404;
  double t66412;
  double t66413;
  double t66423;
  double t66428;
  double t66430;
  double t66432;
  double t66544;
  double t66548;
  double t66550;
  double t66554;
  double t66556;
  double t66614;
  double t66528;
  double t66531;
  double t66549;
  double t66555;
  double t66616;
  double t66624;
  double t66628;
  double t66633;
  double t66638;
  double t66652;
  double t66653;
  double t66654;
  double t66656;
  double t66657;
  double t66659;
  double t66670;
  double t66671;
  double t66673;
  double t66674;
  double t66678;
  double t66679;
  double t66685;
  double t66686;
  double t66691;
  double t66692;
  double t66693;
  double t66695;
  double t66700;
  double t66702;
  double t66704;
  double t66707;
  double t66710;
  double t66711;
  double t66723;
  double t66724;
  double t66725;
  double t66726;
  double t66727;
  double t66728;
  double t66752;
  double t66779;
  double t66780;
  double t66781;
  double t66783;
  double t66786;
  double t66787;
  double t66788;
  double t66791;
  double t66792;
  double t66767;
  double t66776;
  double t66778;
  double t66785;
  double t66790;
  double t66793;
  double t66795;
  double t66799;
  double t66800;
  double t66805;
  double t66812;
  double t66813;
  double t66815;
  double t66816;
  double t66817;
  double t66818;
  double t66819;
  double t66820;
  double t66821;
  double t66826;
  double t66831;
  double t66832;
  double t66849;
  double t66851;
  double t66855;
  double t66856;
  double t66873;
  double t66874;
  double t66875;
  double t66953;
  double t66956;
  double t66958;
  double t66961;
  double t66962;
  double t66963;
  double t66965;
  double t66970;
  double t66973;
  double t67011;
  double t67016;
  double t67018;
  double t67022;
  double t67023;
  double t67024;
  double t67026;
  double t67028;
  double t67029;
  double t63521;
  double t63583;
  double t63620;
  double t63645;
  double t63710;
  double t63735;
  double t63863;
  double t63866;
  double t63867;
  double t63870;
  double t63871;
  double t63872;
  double t63874;
  double t63885;
  double t63886;
  double t63889;
  double t63892;
  double t63897;
  double t63898;
  double t63900;
  double t63901;
  double t67085;
  double t66847;
  double t66848;
  double t66854;
  double t66860;
  double t66876;
  double t66877;
  double t66880;
  double t66881;
  double t66882;
  double t66883;
  double t66885;
  double t66886;
  double t66889;
  double t66890;
  double t66891;
  double t66895;
  double t66896;
  double t66898;
  double t66899;
  double t66900;
  double t66902;
  double t67090;
  double t67092;
  double t67094;
  double t67175;
  double t67178;
  double t67179;
  double t67183;
  double t67187;
  double t66904;
  double t66905;
  double t66906;
  double t66910;
  double t66913;
  double t66914;
  double t66916;
  double t66921;
  double t66922;
  double t66923;
  double t66927;
  double t66928;
  double t66929;
  double t66934;
  double t66936;
  double t66937;
  double t66945;
  double t66946;
  double t66947;
  double t67117;
  double t67119;
  double t67120;
  double t67121;
  double t67123;
  double t67124;
  double t67126;
  double t67129;
  double t67130;
  double t67131;
  double t67133;
  double t67134;
  double t67135;
  double t67138;
  double t67139;
  double t67142;
  double t67152;
  double t67167;
  double t67170;
  double t63856;
  double t64172;
  double t64615;
  double t64685;
  double t65051;
  double t66949;
  double t66951;
  double t66952;
  double t66960;
  double t66966;
  double t66974;
  double t66975;
  double t66976;
  double t66978;
  double t66981;
  double t66982;
  double t66984;
  double t66986;
  double t66987;
  double t66988;
  double t66989;
  double t66990;
  double t66991;
  double t66993;
  double t66998;
  double t67001;
  double t67002;
  double t67417;
  double t67418;
  double t67419;
  double t67422;
  double t67424;
  double t67440;
  double t67441;
  double t67442;
  double t67172;
  double t67173;
  double t67180;
  double t67182;
  double t67196;
  double t67197;
  double t67205;
  double t67206;
  double t67207;
  double t67221;
  double t67225;
  double t67226;
  double t67233;
  double t67234;
  double t67235;
  double t67236;
  double t67240;
  double t67247;
  double t67254;
  double t67256;
  double t67257;
  double t67312;
  double t67313;
  double t67314;
  double t67315;
  double t67317;
  double t67325;
  double t67327;
  double t67330;
  double t67331;
  double t67332;
  double t67334;
  double t67335;
  double t67338;
  double t67343;
  double t67344;
  double t67347;
  double t67351;
  double t67354;
  double t67357;
  t1486 = Cos(var1[10]);
  t1823 = -1.*t1486;
  t1943 = 1. + t1823;
  t2387 = Cos(var1[4]);
  t3427 = Cos(var1[12]);
  t3429 = -1.*t3427;
  t3437 = 1. + t3429;
  t3545 = -3.e-6*t3437;
  t3568 = Sin(var1[12]);
  t2730 = Cos(var1[5]);
  t2938 = Sin(var1[10]);
  t2967 = Sin(var1[4]);
  t3271 = Sin(var1[5]);
  t3605 = 3.e-6*t3568;
  t3607 = t3545 + t3605;
  t3789 = 3.e-13*var1[12];
  t3573 = -3.e-6*t3568;
  t3580 = t3545 + t3573;
  t3803 = -9.e-12*t3437;
  t3682 = 3.e-6*t1943*t2387*t2730;
  t3683 = -3.e-6*t2938*t2967;
  t3709 = -9.e-12*t1943;
  t3724 = 1. + t3709;
  t3770 = -1.*t3724*t2387*t3271;
  t3775 = t3682 + t3683 + t3770;
  t4233 = t1486*t2387*t2730;
  t4368 = t2938*t2967;
  t4378 = -3.e-6*t1943*t2387*t3271;
  t4387 = t4233 + t4368 + t4378;
  t4584 = -1.*t2387*t2730*t2938;
  t4596 = -1.000000000009*t1943;
  t4642 = 1. + t4596;
  t4670 = t4642*t2967;
  t4696 = -3.e-6*t2387*t2938*t3271;
  t5250 = t4584 + t4670 + t4696;
  t5265 = 3.e-6*t3437;
  t5360 = -1.000000000009*t3437;
  t5375 = 1. + t5360;
  t5315 = 9.e-12*t3437;
  t3833 = -1.*t3568;
  t5300 = t5265 + t3573;
  t5439 = t5265 + t3605;
  t29962 = 3.e-6*t3427;
  t30117 = t29962 + t3573;
  t29480 = -3.e-6*t3427;
  t29557 = t29480 + t3573;
  t32752 = -9.e-12*t3568;
  t43422 = t29962 + t3605;
  t44190 = t29480 + t3605;
  t43839 = 9.e-12*t3568;
  t29898 = -0.200000000003*t29557;
  t30228 = 0.100000000003*t30117;
  t30274 = 5.4e-18*t3568;
  t30349 = 1.e-7 + t29898 + t30228 + t30274;
  t30411 = t30349*t3775;
  t31115 = 3.e-7*t30117;
  t32787 = t3429 + t32752;
  t32862 = 0.100000000003*t32787;
  t34302 = -0.2000000000048*t3568;
  t37021 = 3.e-13 + t31115 + t32862 + t34302;
  t38444 = t37021*t4387;
  t38483 = 3.e-7*t29557;
  t38513 = t3427 + t32752;
  t41371 = -0.200000000003*t38513;
  t42994 = 0.1000000000039*t3568;
  t43372 = 3.e-13 + t38483 + t41371 + t42994;
  t43382 = t43372*t5250;
  t43733 = -1.*t43422*t3775;
  t43761 = 1.000000000009*t3568*t4387;
  t43856 = t3429 + t43839;
  t43980 = -1.*t43856*t5250;
  t43991 = t43733 + t43761 + t43980;
  t43993 = 0.2*t43991;
  t44024 = -1.8e-11*t3568*t3775;
  t44196 = t44190*t4387;
  t44199 = t43422*t5250;
  t44293 = t44024 + t44196 + t44199;
  t44323 = 0.100001*t44293;
  t44404 = t44190*t3775;
  t44431 = t3427 + t43839;
  t44438 = t44431*t4387;
  t44461 = -1.000000000009*t3568*t5250;
  t44474 = t44404 + t44438 + t44461;
  t44651 = -0.3*t44474;
  t44854 = t30411 + t38444 + t43382 + t43993 + t44323 + t44651;
  t4422 = 0.1000000000039*t3437;
  t4445 = 3.e-7*t3580;
  t4473 = t3803 + t3568;
  t4490 = -0.200000000003*t4473;
  t4539 = t3789 + t4422 + t4445 + t4490;
  t3800 = -0.2000000000048*t3437;
  t3838 = t3803 + t3833;
  t3877 = 0.100000000003*t3838;
  t3889 = 3.e-7*t3607;
  t4228 = t3789 + t3800 + t3877 + t3889;
  t3402 = 1.e-7*var1[12];
  t3501 = 5.4e-18*t3437;
  t3595 = -0.200000000003*t3580;
  t3647 = 0.100000000003*t3607;
  t3650 = t3402 + t3501 + t3595 + t3647;
  t50032 = -1.*t1486*t2387*t2730;
  t50112 = -1.000000000009*t2938*t2967;
  t50115 = -3.e-6*t1486*t2387*t3271;
  t50116 = t50032 + t50112 + t50115;
  t50127 = t1486*t2967;
  t50128 = t4584 + t50127 + t4696;
  t14660 = -1.8e-11*t3437;
  t20477 = 1. + t14660;
  t50130 = 3.e-6*t2387*t2730*t2938;
  t50140 = -3.e-6*t1486*t2967;
  t50141 = 9.e-12*t2387*t2938*t3271;
  t50151 = t50130 + t50140 + t50141;
  t5336 = t5315 + t3568;
  t5448 = t5315 + t3833;
  t49749 = -0.2000000000018*t2387*t2730*t2938;
  t49928 = 0.2000000000018*t1486*t2967;
  t49942 = -6.000000000054e-7*t2387*t2938*t3271;
  t50120 = t4539*t50116;
  t50129 = t4228*t50128;
  t50152 = t3650*t50151;
  t50175 = t5439*t50116;
  t50178 = t5300*t50128;
  t50180 = t20477*t50151;
  t50198 = t50175 + t50178 + t50180;
  t50229 = 0.100001*t50198;
  t50341 = t5375*t50116;
  t50464 = t5336*t50128;
  t50620 = t5300*t50151;
  t50626 = t50341 + t50464 + t50620;
  t50630 = -0.3*t50626;
  t50841 = -1.*t5448*t50116;
  t50862 = -1.*t5375*t50128;
  t50879 = -1.*t5439*t50151;
  t50890 = t50841 + t50862 + t50879;
  t50906 = 0.2*t50890;
  t50937 = t49749 + t49928 + t49942 + t50120 + t50129 + t50152 + t50229 + t50630 + t50906;
  t1945 = -1.8e-12*t1943;
  t2011 = -1. + t1486;
  t2085 = 0.2*t2011;
  t2110 = t1945 + t2085;
  t50990 = -1.*t3724*t2387*t2730;
  t50993 = t50990 + t4378;
  t51028 = -3.e-6*t1943*t2387*t2730;
  t51039 = -1.*t1486*t2387*t3271;
  t51053 = t51028 + t51039;
  t51077 = -3.e-6*t2387*t2730*t2938;
  t51088 = t2387*t2938*t3271;
  t51093 = t51077 + t51088;
  t50974 = -6.000000000054e-7*t1943*t2387*t2730;
  t50975 = -1.*t2110*t2387*t3271;
  t51021 = t3650*t50993;
  t51074 = t4228*t51053;
  t51094 = t4539*t51093;
  t51145 = t5300*t50993;
  t51146 = t5336*t51053;
  t51149 = t5375*t51093;
  t51150 = t51145 + t51146 + t51149;
  t51153 = -0.3*t51150;
  t51243 = -1.*t5439*t50993;
  t51376 = -1.*t5375*t51053;
  t51420 = -1.*t5448*t51093;
  t51421 = t51243 + t51376 + t51420;
  t51447 = 0.2*t51421;
  t51450 = t20477*t50993;
  t51460 = t5300*t51053;
  t51465 = t5439*t51093;
  t51475 = t51450 + t51460 + t51465;
  t51478 = 0.100001*t51475;
  t51503 = t50974 + t50975 + t51021 + t51074 + t51094 + t51153 + t51447 + t51478;
  t51590 = -3.e-6*t2387*t2938;
  t51593 = -3.e-6*t1943*t2730*t2967;
  t51609 = t3724*t2967*t3271;
  t51618 = t51590 + t51593 + t51609;
  t51624 = t2387*t2938;
  t51632 = -1.*t1486*t2730*t2967;
  t51659 = 3.e-6*t1943*t2967*t3271;
  t51688 = t51624 + t51632 + t51659;
  t51737 = t4642*t2387;
  t51751 = t2730*t2938*t2967;
  t51755 = 3.e-6*t2938*t2967*t3271;
  t51758 = t51737 + t51751 + t51755;
  t51537 = 0.2000000000018*t2387*t2938;
  t51541 = -1.*t2110*t2730*t2967;
  t51563 = 6.000000000054e-7*t1943*t2967*t3271;
  t51619 = t3650*t51618;
  t51720 = t4228*t51688;
  t51775 = t4539*t51758;
  t51780 = t5300*t51618;
  t51797 = t5336*t51688;
  t51817 = t5375*t51758;
  t51842 = t51780 + t51797 + t51817;
  t51848 = -0.3*t51842;
  t51852 = -1.*t5439*t51618;
  t51862 = -1.*t5375*t51688;
  t51873 = -1.*t5448*t51758;
  t51877 = t51852 + t51862 + t51873;
  t51879 = 0.2*t51877;
  t51889 = t20477*t51618;
  t51896 = t5300*t51688;
  t51913 = t5439*t51758;
  t51914 = t51889 + t51896 + t51913;
  t51928 = 0.100001*t51914;
  t51931 = t51537 + t51541 + t51563 + t51619 + t51720 + t51775 + t51848 + t51879 + t51928;
  t51987 = t3724*t2387*t3271;
  t51990 = t51028 + t51987;
  t52015 = 3.e-6*t1943*t2387*t3271;
  t52024 = t50032 + t52015;
  t52068 = t2387*t2730*t2938;
  t52086 = 3.e-6*t2387*t2938*t3271;
  t52092 = t52068 + t52086;
  t52353 = -3.e-6*t1486*t2387*t2730;
  t52354 = t1486*t2387*t3271;
  t52356 = t52353 + t52354;
  t52367 = 9.e-12*t2387*t2730*t2938;
  t52373 = t52367 + t4696;
  t53246 = t3724*t2730*t2967;
  t53247 = t53246 + t51659;
  t53261 = 3.e-6*t1943*t2730*t2967;
  t53264 = t1486*t2967*t3271;
  t53265 = t53261 + t53264;
  t53268 = 3.e-6*t2730*t2938*t2967;
  t53270 = -1.*t2938*t2967*t3271;
  t53271 = t53268 + t53270;
  t54014 = -9.e-12*t3427;
  t54969 = 9.e-12*t3427;
  t52195 = t30349*t50993;
  t52200 = t37021*t51053;
  t52209 = t43372*t51093;
  t52224 = -1.*t43422*t50993;
  t52228 = 1.000000000009*t3568*t51053;
  t52233 = -1.*t43856*t51093;
  t52242 = t52224 + t52228 + t52233;
  t52255 = 0.2*t52242;
  t52264 = -1.8e-11*t3568*t50993;
  t52267 = t44190*t51053;
  t52269 = t43422*t51093;
  t52275 = t52264 + t52267 + t52269;
  t52280 = 0.100001*t52275;
  t52291 = t44190*t50993;
  t52300 = t44431*t51053;
  t52302 = -1.000000000009*t3568*t51093;
  t52319 = t52291 + t52300 + t52302;
  t52320 = -0.3*t52319;
  t52322 = t52195 + t52200 + t52209 + t52255 + t52280 + t52320;
  t51963 = -1.*t2110*t2387*t2730;
  t51976 = 6.000000000054e-7*t1943*t2387*t3271;
  t58272 = 3.e-6*t2938*t2967;
  t58295 = t51028 + t58272 + t51987;
  t58304 = -1.*t2938*t2967;
  t58308 = t50032 + t58304 + t52015;
  t60608 = -1.*t4642*t2967;
  t60654 = t52068 + t60608 + t52086;
  t53232 = 6.000000000054e-7*t1943*t2730*t2967;
  t53234 = t2110*t2967*t3271;
  t53250 = t3650*t53247;
  t53266 = t4228*t53265;
  t53280 = t4539*t53271;
  t53458 = t5300*t53247;
  t53611 = t5336*t53265;
  t53782 = t5375*t53271;
  t53784 = t53458 + t53611 + t53782;
  t53790 = -0.3*t53784;
  t53806 = -1.*t5439*t53247;
  t53835 = -1.*t5375*t53265;
  t53901 = -1.*t5448*t53271;
  t53928 = t53806 + t53835 + t53901;
  t53936 = 0.2*t53928;
  t53940 = t20477*t53247;
  t53941 = t5300*t53265;
  t53943 = t5439*t53271;
  t53951 = t53940 + t53941 + t53943;
  t53952 = 0.100001*t53951;
  t53957 = t53232 + t53234 + t53250 + t53266 + t53280 + t53790 + t53936 + t53952;
  t56333 = t30349*t51618;
  t57529 = t37021*t51688;
  t57686 = t43372*t51758;
  t57701 = -1.*t43422*t51618;
  t57736 = 1.000000000009*t3568*t51688;
  t57745 = -1.*t43856*t51758;
  t57860 = t57701 + t57736 + t57745;
  t58017 = 0.2*t57860;
  t58082 = -1.8e-11*t3568*t51618;
  t58124 = t44190*t51688;
  t58133 = t43422*t51758;
  t58137 = t58082 + t58124 + t58133;
  t58141 = 0.100001*t58137;
  t58148 = t44190*t51618;
  t58159 = t44431*t51688;
  t58160 = -1.000000000009*t3568*t51758;
  t58179 = t58148 + t58159 + t58160;
  t58197 = -0.3*t58179;
  t58203 = t56333 + t57529 + t57686 + t58017 + t58141 + t58197;
  t62062 = -1.000000000009*t2387*t2938;
  t62066 = t1486*t2730*t2967;
  t62068 = 3.e-6*t1486*t2967*t3271;
  t62071 = t62062 + t62066 + t62068;
  t62093 = -3.e-6*t1486*t2387;
  t62103 = -3.e-6*t2730*t2938*t2967;
  t62113 = -9.e-12*t2938*t2967*t3271;
  t62132 = t62093 + t62103 + t62113;
  t62150 = t1486*t2387;
  t62166 = t62150 + t51751 + t51755;
  t55751 = t43372*t50116;
  t55806 = t37021*t50128;
  t55858 = t30349*t50151;
  t55860 = -1.000000000009*t3568*t50116;
  t55884 = t44431*t50128;
  t55886 = t44190*t50151;
  t55941 = t55860 + t55884 + t55886;
  t55971 = -0.3*t55941;
  t56022 = -1.*t43856*t50116;
  t56024 = 1.000000000009*t3568*t50128;
  t56042 = -1.*t43422*t50151;
  t56065 = t56022 + t56024 + t56042;
  t56150 = 0.2*t56065;
  t56152 = t43422*t50116;
  t56156 = t44190*t50128;
  t56157 = -1.8e-11*t3568*t50151;
  t56165 = t56152 + t56156 + t56157;
  t56167 = 0.100001*t56165;
  t56174 = t55751 + t55806 + t55858 + t55971 + t56150 + t56167;
  t58271 = -0.2000000000018*t2938*t2967;
  t62924 = t50032 + t58304 + t50115;
  t62972 = 3.e-6*t1486*t2387*t2730;
  t62973 = 9.e-12*t1486*t2387*t3271;
  t62974 = t62972 + t58272 + t62973;
  t62976 = -1.000000000009*t1486*t2967;
  t62978 = t52068 + t62976 + t52086;
  t52332 = -6.000000000054e-7*t2387*t2730*t2938;
  t52349 = 0.2000000000018*t2387*t2938*t3271;
  t52363 = t4539*t52356;
  t52375 = t3650*t52373;
  t52390 = t4228*t51093;
  t52391 = -1.*t5448*t52356;
  t52394 = -1.*t5439*t52373;
  t52602 = -1.*t5375*t51093;
  t52759 = t52391 + t52394 + t52602;
  t52963 = 0.2*t52759;
  t53103 = t5439*t52356;
  t53126 = t20477*t52373;
  t53161 = t5300*t51093;
  t53185 = t53103 + t53126 + t53161;
  t53201 = 0.100001*t53185;
  t53211 = t5375*t52356;
  t53213 = t5300*t52373;
  t53219 = t5336*t51093;
  t53220 = t53211 + t53213 + t53219;
  t53221 = -0.3*t53220;
  t53223 = t52332 + t52349 + t52363 + t52375 + t52390 + t52963 + t53201 + t53221;
  t62018 = 0.2000000000018*t1486*t2387;
  t62030 = 0.2000000000018*t2730*t2938*t2967;
  t62047 = 6.000000000054e-7*t2938*t2967*t3271;
  t62074 = t4539*t62071;
  t62140 = t3650*t62132;
  t62169 = t4228*t62166;
  t62187 = -1.*t5448*t62071;
  t62211 = -1.*t5439*t62132;
  t62221 = -1.*t5375*t62166;
  t62223 = t62187 + t62211 + t62221;
  t62224 = 0.2*t62223;
  t62226 = t5439*t62071;
  t62230 = t20477*t62132;
  t62234 = t5300*t62166;
  t62238 = t62226 + t62230 + t62234;
  t62240 = 0.100001*t62238;
  t62243 = t5375*t62071;
  t62248 = t5300*t62132;
  t62252 = t5336*t62166;
  t62255 = t62243 + t62248 + t62252;
  t62258 = -0.3*t62255;
  t62610 = t62018 + t62030 + t62047 + t62074 + t62140 + t62169 + t62224 + t62240 + t62258;
  t63514 = Sin(var1[3]);
  t63575 = Cos(var1[3]);
  t63545 = t2730*t63514*t2967;
  t63576 = t63575*t3271;
  t63578 = t63545 + t63576;
  t63594 = t63575*t2730;
  t63599 = -1.*t63514*t2967*t3271;
  t63619 = t63594 + t63599;
  t63753 = 3.e-6*t1943*t2387*t2730*t63514;
  t63756 = -3.e-6*t2938*t63514*t2967;
  t63757 = -1.*t3724*t2387*t63514*t3271;
  t63759 = t63753 + t63756 + t63757;
  t63761 = t1486*t2387*t2730*t63514;
  t63771 = t2938*t63514*t2967;
  t63773 = -3.e-6*t1943*t2387*t63514*t3271;
  t63778 = t63761 + t63771 + t63773;
  t63785 = -1.*t2387*t2730*t2938*t63514;
  t63789 = t4642*t63514*t2967;
  t63790 = -3.e-6*t2387*t2938*t63514*t3271;
  t63792 = t63785 + t63789 + t63790;
  t63740 = t2110*t2387*t2730*t63514;
  t63743 = 0.2000000000018*t2938*t63514*t2967;
  t63746 = -6.000000000054e-7*t1943*t2387*t63514*t3271;
  t63760 = t3650*t63759;
  t63781 = t4228*t63778;
  t63804 = t4539*t63792;
  t63806 = t5300*t63759;
  t63814 = t5336*t63778;
  t63816 = t5375*t63792;
  t63817 = t63806 + t63814 + t63816;
  t63820 = -0.3*t63817;
  t63824 = -1.*t5439*t63759;
  t63825 = -1.*t5375*t63778;
  t63827 = -1.*t5448*t63792;
  t63832 = t63824 + t63825 + t63827;
  t63834 = 0.2*t63832;
  t63838 = t20477*t63759;
  t63841 = t5300*t63778;
  t63844 = t5439*t63792;
  t63847 = t63838 + t63841 + t63844;
  t63849 = 0.100001*t63847;
  t63853 = t63740 + t63743 + t63746 + t63760 + t63781 + t63804 + t63820 + t63834 + t63849;
  t63626 = 3.e-6*t2387*t2938*t63514;
  t63628 = 3.e-6*t1943*t63578;
  t63637 = t3724*t63619;
  t63643 = t63626 + t63628 + t63637;
  t63682 = -1.*t2387*t2938*t63514;
  t63684 = t1486*t63578;
  t63700 = 3.e-6*t1943*t63619;
  t63709 = t63682 + t63684 + t63700;
  t63719 = -1.*t4642*t2387*t63514;
  t63723 = -1.*t2938*t63578;
  t63725 = 3.e-6*t2938*t63619;
  t63731 = t63719 + t63723 + t63725;
  t63905 = t63575*t2730*t2967;
  t63907 = -1.*t63514*t3271;
  t63908 = t63905 + t63907;
  t63917 = -1.*t2730*t63514;
  t63921 = -1.*t63575*t2967*t3271;
  t63923 = t63917 + t63921;
  t63942 = 3.e-6*t63575*t2387*t2938;
  t63950 = 3.e-6*t1943*t63908;
  t63952 = t3724*t63923;
  t63972 = t63942 + t63950 + t63952;
  t63983 = -1.*t63575*t2387*t2938;
  t63989 = t1486*t63908;
  t63992 = 3.e-6*t1943*t63923;
  t63995 = t63983 + t63989 + t63992;
  t64003 = -1.*t4642*t63575*t2387;
  t64006 = -1.*t2938*t63908;
  t64008 = 3.e-6*t2938*t63923;
  t64009 = t64003 + t64006 + t64008;
  t63903 = -0.2000000000018*t63575*t2387*t2938;
  t63912 = t2110*t63908;
  t63933 = 6.000000000054e-7*t1943*t63923;
  t63974 = t3650*t63972;
  t64000 = t4228*t63995;
  t64014 = t4539*t64009;
  t64016 = t5300*t63972;
  t64021 = t5336*t63995;
  t64023 = t5375*t64009;
  t64049 = t64016 + t64021 + t64023;
  t64082 = -0.3*t64049;
  t64084 = -1.*t5439*t63972;
  t64116 = -1.*t5375*t63995;
  t64140 = -1.*t5448*t64009;
  t64142 = t64084 + t64116 + t64140;
  t64144 = 0.2*t64142;
  t64146 = t20477*t63972;
  t64147 = t5300*t63995;
  t64156 = t5439*t64009;
  t64157 = t64146 + t64147 + t64156;
  t64158 = 0.100001*t64157;
  t64159 = t63903 + t63912 + t63933 + t63974 + t64000 + t64014 + t64082 + t64144 + t64158;
  t64173 = -1.*t2730*t63514*t2967;
  t64176 = -1.*t63575*t3271;
  t64178 = t64173 + t64176;
  t64255 = t3724*t64178;
  t64261 = t64255 + t63700;
  t64312 = 3.e-6*t1943*t64178;
  t64323 = t1486*t63619;
  t64324 = t64312 + t64323;
  t64367 = 3.e-6*t2938*t64178;
  t64384 = -1.*t2938*t63619;
  t64388 = t64367 + t64384;
  t64224 = 6.000000000054e-7*t1943*t64178;
  t64252 = t2110*t63619;
  t64265 = t3650*t64261;
  t64331 = t4228*t64324;
  t64389 = t4539*t64388;
  t64405 = t5300*t64261;
  t64411 = t5336*t64324;
  t64438 = t5375*t64388;
  t64439 = t64405 + t64411 + t64438;
  t64444 = -0.3*t64439;
  t64445 = -1.*t5439*t64261;
  t64446 = -1.*t5375*t64324;
  t64477 = -1.*t5448*t64388;
  t64487 = t64445 + t64446 + t64477;
  t64499 = 0.2*t64487;
  t64508 = t20477*t64261;
  t64538 = t5300*t64324;
  t64563 = t5439*t64388;
  t64577 = t64508 + t64538 + t64563;
  t64578 = 0.100001*t64577;
  t64587 = t64224 + t64252 + t64265 + t64331 + t64389 + t64444 + t64499 + t64578;
  t64621 = t30349*t63643;
  t64626 = t37021*t63709;
  t64628 = t43372*t63731;
  t64638 = -1.*t43422*t63643;
  t64639 = 1.000000000009*t3568*t63709;
  t64641 = -1.*t43856*t63731;
  t64654 = t64638 + t64639 + t64641;
  t64655 = 0.2*t64654;
  t64656 = -1.8e-11*t3568*t63643;
  t64660 = t44190*t63709;
  t64665 = t43422*t63731;
  t64669 = t64656 + t64660 + t64665;
  t64670 = 0.100001*t64669;
  t64674 = t44190*t63643;
  t64676 = t44431*t63709;
  t64678 = -1.000000000009*t3568*t63731;
  t64679 = t64674 + t64676 + t64678;
  t64680 = -0.3*t64679;
  t64681 = t64621 + t64626 + t64628 + t64655 + t64670 + t64680;
  t64699 = 1.000000000009*t2387*t2938*t63514;
  t64702 = -1.*t1486*t63578;
  t64704 = 3.e-6*t1486*t63619;
  t64708 = t64699 + t64702 + t64704;
  t64735 = 3.e-6*t1486*t2387*t63514;
  t64753 = 3.e-6*t2938*t63578;
  t64777 = -9.e-12*t2938*t63619;
  t64794 = t64735 + t64753 + t64777;
  t64806 = -1.*t1486*t2387*t63514;
  t64811 = t64806 + t63723 + t63725;
  t64686 = -0.2000000000018*t1486*t2387*t63514;
  t64687 = -0.2000000000018*t2938*t63578;
  t64692 = 6.000000000054e-7*t2938*t63619;
  t64710 = t4539*t64708;
  t64805 = t3650*t64794;
  t64816 = t4228*t64811;
  t64817 = -1.*t5448*t64708;
  t64818 = -1.*t5439*t64794;
  t64856 = -1.*t5375*t64811;
  t64859 = t64817 + t64818 + t64856;
  t64902 = 0.2*t64859;
  t64904 = t5439*t64708;
  t64908 = t20477*t64794;
  t64912 = t5300*t64811;
  t64961 = t64904 + t64908 + t64912;
  t64966 = 0.100001*t64961;
  t64967 = t5375*t64708;
  t64969 = t5300*t64794;
  t64978 = t5336*t64811;
  t65026 = t64967 + t64969 + t64978;
  t65027 = -0.3*t65026;
  t65036 = t64686 + t64687 + t64692 + t64710 + t64805 + t64816 + t64902 + t64966 + t65027;
  t65088 = 3.e-6*t1943*t63575*t2387*t2730;
  t65101 = -3.e-6*t63575*t2938*t2967;
  t65108 = -1.*t3724*t63575*t2387*t3271;
  t65109 = t65088 + t65101 + t65108;
  t65125 = t1486*t63575*t2387*t2730;
  t65131 = t63575*t2938*t2967;
  t65132 = -3.e-6*t1943*t63575*t2387*t3271;
  t65135 = t65125 + t65131 + t65132;
  t65142 = -1.*t63575*t2387*t2730*t2938;
  t65146 = t4642*t63575*t2967;
  t65149 = -3.e-6*t63575*t2387*t2938*t3271;
  t65154 = t65142 + t65146 + t65149;
  t65469 = -1.*t1486*t2387*t2730*t63514;
  t65470 = -1.000000000009*t2938*t63514*t2967;
  t65477 = -3.e-6*t1486*t2387*t63514*t3271;
  t65480 = t65469 + t65470 + t65477;
  t65484 = t1486*t63514*t2967;
  t65486 = t63785 + t65484 + t63790;
  t65497 = 3.e-6*t2387*t2730*t2938*t63514;
  t65539 = -3.e-6*t1486*t63514*t2967;
  t65549 = 9.e-12*t2387*t2938*t63514*t3271;
  t65553 = t65497 + t65539 + t65549;
  t65642 = -1.*t3724*t2387*t2730*t63514;
  t65665 = t65642 + t63773;
  t65669 = -3.e-6*t1943*t2387*t2730*t63514;
  t65679 = -1.*t1486*t2387*t63514*t3271;
  t65680 = t65669 + t65679;
  t65683 = -3.e-6*t2387*t2730*t2938*t63514;
  t65685 = t2387*t2938*t63514*t3271;
  t65686 = t65683 + t65685;
  t65769 = -3.e-6*t2387*t2938*t63514;
  t65775 = -3.e-6*t1943*t2730*t63514*t2967;
  t65776 = t3724*t63514*t2967*t3271;
  t65777 = t65769 + t65775 + t65776;
  t65779 = t2387*t2938*t63514;
  t65780 = -1.*t1486*t2730*t63514*t2967;
  t65781 = 3.e-6*t1943*t63514*t2967*t3271;
  t65783 = t65779 + t65780 + t65781;
  t65785 = t4642*t2387*t63514;
  t65786 = t2730*t2938*t63514*t2967;
  t65787 = 3.e-6*t2938*t63514*t2967*t3271;
  t65788 = t65785 + t65786 + t65787;
  t65349 = t30349*t63759;
  t65351 = t37021*t63778;
  t65356 = t43372*t63792;
  t65378 = -1.*t43422*t63759;
  t65392 = 1.000000000009*t3568*t63778;
  t65426 = -1.*t43856*t63792;
  t65429 = t65378 + t65392 + t65426;
  t65430 = 0.2*t65429;
  t65431 = -1.8e-11*t3568*t63759;
  t65433 = t44190*t63778;
  t65444 = t43422*t63792;
  t65447 = t65431 + t65433 + t65444;
  t65454 = 0.100001*t65447;
  t65455 = t44190*t63759;
  t65456 = t44431*t63778;
  t65457 = -1.000000000009*t3568*t63792;
  t65458 = t65455 + t65456 + t65457;
  t65459 = -0.3*t65458;
  t65460 = t65349 + t65351 + t65356 + t65430 + t65454 + t65459;
  t53986 = 5.4e-18*t3427;
  t53988 = 0.100000000003*t29557;
  t53994 = -0.200000000003*t44190;
  t53996 = t53986 + t53988 + t53994;
  t54009 = -0.2000000000048*t3427;
  t54015 = t54014 + t3568;
  t54020 = 0.100000000003*t54015;
  t54129 = t54009 + t38483 + t54020;
  t54816 = 0.1000000000039*t3427;
  t54828 = t54014 + t3833;
  t54885 = -0.200000000003*t54828;
  t54917 = 3.e-7*t44190;
  t54927 = t54816 + t54885 + t54917;
  t54972 = t54969 + t3833;
  t55275 = t54969 + t3568;
  t65462 = -0.2000000000018*t2387*t2730*t2938*t63514;
  t65465 = 0.2000000000018*t1486*t63514*t2967;
  t65467 = -6.000000000054e-7*t2387*t2938*t63514*t3271;
  t65481 = t4539*t65480;
  t65490 = t4228*t65486;
  t65555 = t3650*t65553;
  t65556 = t5439*t65480;
  t65558 = t5300*t65486;
  t65565 = t20477*t65553;
  t65573 = t65556 + t65558 + t65565;
  t65579 = 0.100001*t65573;
  t65582 = t5375*t65480;
  t65583 = t5336*t65486;
  t65584 = t5300*t65553;
  t65589 = t65582 + t65583 + t65584;
  t65590 = -0.3*t65589;
  t65595 = -1.*t5448*t65480;
  t65596 = -1.*t5375*t65486;
  t65598 = -1.*t5439*t65553;
  t65602 = t65595 + t65596 + t65598;
  t65604 = 0.2*t65602;
  t65607 = t65462 + t65465 + t65467 + t65481 + t65490 + t65555 + t65579 + t65590 + t65604;
  t65956 = 1.000000000009*t63575*t2387*t2938;
  t65957 = -1.*t1486*t63908;
  t65958 = 3.e-6*t1486*t63923;
  t65960 = t65956 + t65957 + t65958;
  t65962 = 3.e-6*t1486*t63575*t2387;
  t65964 = 3.e-6*t2938*t63908;
  t65966 = -9.e-12*t2938*t63923;
  t65968 = t65962 + t65964 + t65966;
  t65971 = -1.*t1486*t63575*t2387;
  t65972 = t65971 + t64006 + t64008;
  t65764 = 0.2000000000018*t2387*t2938*t63514;
  t66013 = 3.e-6*t1486*t63578;
  t66014 = -9.e-12*t1486*t63619;
  t66015 = t65769 + t66013 + t66014;
  t66017 = t65779 + t64702 + t64704;
  t66020 = 1.000000000009*t1486*t2387*t63514;
  t66023 = t2938*t63578;
  t66024 = -3.e-6*t2938*t63619;
  t66031 = t66020 + t66023 + t66024;
  t66088 = 3.e-6*t1486*t64178;
  t66089 = -1.*t1486*t63619;
  t66090 = t66088 + t66089;
  t66105 = -9.e-12*t2938*t64178;
  t66111 = t66105 + t63725;
  t65921 = t43372*t64708;
  t65922 = t30349*t64794;
  t65923 = t37021*t64811;
  t65925 = -1.000000000009*t3568*t64708;
  t65926 = t44190*t64794;
  t65928 = t44431*t64811;
  t65930 = t65925 + t65926 + t65928;
  t65931 = -0.3*t65930;
  t65932 = t43422*t64708;
  t65933 = -1.8e-11*t3568*t64794;
  t65935 = t44190*t64811;
  t65936 = t65932 + t65933 + t65935;
  t65937 = 0.100001*t65936;
  t65938 = -1.*t43856*t64708;
  t65939 = -1.*t43422*t64794;
  t65941 = 1.000000000009*t3568*t64811;
  t65943 = t65938 + t65939 + t65941;
  t65944 = 0.2*t65943;
  t65945 = t65921 + t65922 + t65923 + t65931 + t65937 + t65944;
  t65621 = -6.000000000054e-7*t1943*t2387*t2730*t63514;
  t65630 = -1.*t2110*t2387*t63514*t3271;
  t65667 = t3650*t65665;
  t65682 = t4228*t65680;
  t65687 = t4539*t65686;
  t65688 = t5300*t65665;
  t65689 = t5336*t65680;
  t65690 = t5375*t65686;
  t65691 = t65688 + t65689 + t65690;
  t65692 = -0.3*t65691;
  t65693 = -1.*t5439*t65665;
  t65702 = -1.*t5375*t65680;
  t65710 = -1.*t5448*t65686;
  t65720 = t65693 + t65702 + t65710;
  t65732 = 0.2*t65720;
  t65743 = t20477*t65665;
  t65756 = t5300*t65680;
  t65757 = t5439*t65686;
  t65758 = t65743 + t65756 + t65757;
  t65760 = 0.100001*t65758;
  t65762 = t65621 + t65630 + t65667 + t65682 + t65687 + t65692 + t65732 + t65760;
  t66157 = -1.*t63575*t2730*t2967;
  t66159 = t63514*t3271;
  t66160 = t66157 + t66159;
  t66166 = t3724*t66160;
  t66169 = t66166 + t63992;
  t66172 = 3.e-6*t1943*t66160;
  t66173 = t1486*t63923;
  t66177 = t66172 + t66173;
  t66179 = 3.e-6*t2938*t66160;
  t66182 = -1.*t2938*t63923;
  t66183 = t66179 + t66182;
  t65854 = t30349*t64261;
  t65857 = t37021*t64324;
  t65858 = t43372*t64388;
  t65859 = -1.*t43422*t64261;
  t65861 = 1.000000000009*t3568*t64324;
  t65862 = -1.*t43856*t64388;
  t65866 = t65859 + t65861 + t65862;
  t65868 = 0.2*t65866;
  t65869 = -1.8e-11*t3568*t64261;
  t65871 = t44190*t64324;
  t65872 = t43422*t64388;
  t65874 = t65869 + t65871 + t65872;
  t65877 = 0.100001*t65874;
  t65881 = t44190*t64261;
  t65883 = t44431*t64324;
  t65884 = -1.000000000009*t3568*t64388;
  t65886 = t65881 + t65883 + t65884;
  t65887 = -0.3*t65886;
  t65889 = t65854 + t65857 + t65858 + t65868 + t65877 + t65887;
  t66086 = 6.000000000054e-7*t2938*t64178;
  t66087 = -0.2000000000018*t2938*t63619;
  t66097 = t4539*t66090;
  t66098 = t4228*t64388;
  t66113 = t3650*t66111;
  t66119 = t5439*t66090;
  t66120 = t5300*t64388;
  t66121 = t20477*t66111;
  t66125 = t66119 + t66120 + t66121;
  t66133 = 0.100001*t66125;
  t66134 = t5375*t66090;
  t66135 = t5336*t64388;
  t66136 = t5300*t66111;
  t66137 = t66134 + t66135 + t66136;
  t66138 = -0.3*t66137;
  t66140 = -1.*t5448*t66090;
  t66145 = -1.*t5375*t64388;
  t66146 = -1.*t5439*t66111;
  t66147 = t66140 + t66145 + t66146;
  t66148 = 0.2*t66147;
  t66150 = t66086 + t66087 + t66097 + t66098 + t66113 + t66133 + t66138 + t66148;
  t66238 = -1.*t63575*t2730;
  t66239 = t63514*t2967*t3271;
  t66249 = t66238 + t66239;
  t66264 = t3724*t66249;
  t66265 = t64312 + t66264;
  t66272 = t1486*t64178;
  t66274 = 3.e-6*t1943*t66249;
  t66275 = t66272 + t66274;
  t66277 = -1.*t2938*t64178;
  t66278 = 3.e-6*t2938*t66249;
  t66282 = t66277 + t66278;
  t65058 = t2110*t63575*t2387*t2730;
  t65061 = 0.2000000000018*t63575*t2938*t2967;
  t65072 = -6.000000000054e-7*t1943*t63575*t2387*t3271;
  t65124 = t3650*t65109;
  t65141 = t4228*t65135;
  t65155 = t4539*t65154;
  t65160 = t5300*t65109;
  t65163 = t5336*t65135;
  t65165 = t5375*t65154;
  t65170 = t65160 + t65163 + t65165;
  t65171 = -0.3*t65170;
  t65179 = -1.*t5439*t65109;
  t65195 = -1.*t5375*t65135;
  t65198 = -1.*t5448*t65154;
  t65201 = t65179 + t65195 + t65198;
  t65202 = 0.2*t65201;
  t65207 = t20477*t65109;
  t65210 = t5300*t65135;
  t65212 = t5439*t65154;
  t65219 = t65207 + t65210 + t65212;
  t65242 = 0.100001*t65219;
  t65322 = t65058 + t65061 + t65072 + t65124 + t65141 + t65155 + t65171 + t65202 + t65242;
  t66162 = 6.000000000054e-7*t1943*t66160;
  t66165 = t2110*t63923;
  t66170 = t3650*t66169;
  t66178 = t4228*t66177;
  t66186 = t4539*t66183;
  t66190 = t5300*t66169;
  t66191 = t5336*t66177;
  t66192 = t5375*t66183;
  t66195 = t66190 + t66191 + t66192;
  t66200 = -0.3*t66195;
  t66207 = -1.*t5439*t66169;
  t66209 = -1.*t5375*t66177;
  t66210 = -1.*t5448*t66183;
  t66211 = t66207 + t66209 + t66210;
  t66212 = 0.2*t66211;
  t66213 = t20477*t66169;
  t66214 = t5300*t66177;
  t66217 = t5439*t66183;
  t66219 = t66213 + t66214 + t66217;
  t66220 = 0.100001*t66219;
  t66221 = t66162 + t66165 + t66170 + t66178 + t66186 + t66200 + t66212 + t66220;
  t65823 = t30349*t63972;
  t65824 = t37021*t63995;
  t65825 = t43372*t64009;
  t65826 = -1.*t43422*t63972;
  t65827 = 1.000000000009*t3568*t63995;
  t65829 = -1.*t43856*t64009;
  t65832 = t65826 + t65827 + t65829;
  t65834 = 0.2*t65832;
  t65837 = -1.8e-11*t3568*t63972;
  t65838 = t44190*t63995;
  t65840 = t43422*t64009;
  t65843 = t65837 + t65838 + t65840;
  t65844 = 0.100001*t65843;
  t65845 = t44190*t63972;
  t65846 = t44431*t63995;
  t65848 = -1.000000000009*t3568*t64009;
  t65850 = t65845 + t65846 + t65848;
  t65851 = -0.3*t65850;
  t65852 = t65823 + t65824 + t65825 + t65834 + t65844 + t65851;
  t65951 = -0.2000000000018*t1486*t63575*t2387;
  t65952 = -0.2000000000018*t2938*t63908;
  t65955 = 6.000000000054e-7*t2938*t63923;
  t65961 = t4539*t65960;
  t65969 = t3650*t65968;
  t65973 = t4228*t65972;
  t65974 = -1.*t5448*t65960;
  t65979 = -1.*t5439*t65968;
  t65981 = -1.*t5375*t65972;
  t65982 = t65974 + t65979 + t65981;
  t65986 = 0.2*t65982;
  t65987 = t5439*t65960;
  t65989 = t20477*t65968;
  t65990 = t5300*t65972;
  t65991 = t65987 + t65989 + t65990;
  t65992 = 0.100001*t65991;
  t65993 = t5375*t65960;
  t65996 = t5300*t65968;
  t65997 = t5336*t65972;
  t66002 = t65993 + t65996 + t65997;
  t66003 = -0.3*t66002;
  t66005 = t65951 + t65952 + t65955 + t65961 + t65969 + t65973 + t65986 + t65992 + t66003;
  t66234 = t2110*t64178;
  t66251 = 6.000000000054e-7*t1943*t66249;
  t66313 = t65769 + t64312 + t66264;
  t66320 = t65779 + t66272 + t66274;
  t66322 = t65785 + t66277 + t66278;
  t66388 = t2730*t63514;
  t66391 = t63575*t2967*t3271;
  t66392 = t66388 + t66391;
  t66446 = -3.e-6*t1943*t63575*t2387*t2730;
  t66448 = 3.e-6*t63575*t2938*t2967;
  t66450 = t3724*t63575*t2387*t3271;
  t66452 = t66446 + t66448 + t66450;
  t66457 = -1.*t1486*t63575*t2387*t2730;
  t66458 = -1.*t63575*t2938*t2967;
  t66461 = 3.e-6*t1943*t63575*t2387*t3271;
  t66462 = t66457 + t66458 + t66461;
  t66472 = t63575*t2387*t2730*t2938;
  t66476 = -1.*t4642*t63575*t2967;
  t66477 = 3.e-6*t63575*t2387*t2938*t3271;
  t66478 = t66472 + t66476 + t66477;
  t66435 = -1.*t2110*t63575*t2387*t2730;
  t66437 = -0.2000000000018*t63575*t2938*t2967;
  t66440 = 6.000000000054e-7*t1943*t63575*t2387*t3271;
  t66454 = t3650*t66452;
  t66464 = t4228*t66462;
  t66479 = t4539*t66478;
  t66483 = t5300*t66452;
  t66484 = t5336*t66462;
  t66485 = t5375*t66478;
  t66491 = t66483 + t66484 + t66485;
  t66492 = -0.3*t66491;
  t66493 = -1.*t5439*t66452;
  t66494 = -1.*t5375*t66462;
  t66496 = -1.*t5448*t66478;
  t66497 = t66493 + t66494 + t66496;
  t66498 = 0.2*t66497;
  t66499 = t20477*t66452;
  t66500 = t5300*t66462;
  t66501 = t5439*t66478;
  t66502 = t66499 + t66500 + t66501;
  t66505 = 0.100001*t66502;
  t66506 = t66435 + t66437 + t66440 + t66454 + t66464 + t66479 + t66492 + t66498 + t66505;
  t66394 = -3.e-6*t63575*t2387*t2938;
  t66395 = t3724*t66392;
  t66396 = t66394 + t66172 + t66395;
  t66403 = t63575*t2387*t2938;
  t66404 = t1486*t66160;
  t66412 = 3.e-6*t1943*t66392;
  t66413 = t66403 + t66404 + t66412;
  t66423 = t4642*t63575*t2387;
  t66428 = -1.*t2938*t66160;
  t66430 = 3.e-6*t2938*t66392;
  t66432 = t66423 + t66428 + t66430;
  t66544 = t3724*t63908;
  t66548 = t66544 + t66412;
  t66550 = t1486*t66392;
  t66554 = t63950 + t66550;
  t66556 = -1.*t2938*t66392;
  t66614 = t65964 + t66556;
  t66528 = 6.000000000054e-7*t1943*t63908;
  t66531 = t2110*t66392;
  t66549 = t3650*t66548;
  t66555 = t4228*t66554;
  t66616 = t4539*t66614;
  t66624 = t5300*t66548;
  t66628 = t5336*t66554;
  t66633 = t5375*t66614;
  t66638 = t66624 + t66628 + t66633;
  t66652 = -0.3*t66638;
  t66653 = -1.*t5439*t66548;
  t66654 = -1.*t5375*t66554;
  t66656 = -1.*t5448*t66614;
  t66657 = t66653 + t66654 + t66656;
  t66659 = 0.2*t66657;
  t66670 = t20477*t66548;
  t66671 = t5300*t66554;
  t66673 = t5439*t66614;
  t66674 = t66670 + t66671 + t66673;
  t66678 = 0.100001*t66674;
  t66679 = t66528 + t66531 + t66549 + t66555 + t66616 + t66652 + t66659 + t66678;
  t66685 = t30349*t66396;
  t66686 = t37021*t66413;
  t66691 = t43372*t66432;
  t66692 = -1.*t43422*t66396;
  t66693 = 1.000000000009*t3568*t66413;
  t66695 = -1.*t43856*t66432;
  t66700 = t66692 + t66693 + t66695;
  t66702 = 0.2*t66700;
  t66704 = -1.8e-11*t3568*t66396;
  t66707 = t44190*t66413;
  t66710 = t43422*t66432;
  t66711 = t66704 + t66707 + t66710;
  t66723 = 0.100001*t66711;
  t66724 = t44190*t66396;
  t66725 = t44431*t66413;
  t66726 = -1.000000000009*t3568*t66432;
  t66727 = t66724 + t66725 + t66726;
  t66728 = -0.3*t66727;
  t66752 = t66685 + t66686 + t66691 + t66702 + t66723 + t66728;
  t66779 = -1.000000000009*t63575*t2387*t2938;
  t66780 = -1.*t1486*t66160;
  t66781 = 3.e-6*t1486*t66392;
  t66783 = t66779 + t66780 + t66781;
  t66786 = -3.e-6*t1486*t63575*t2387;
  t66787 = -9.e-12*t2938*t66392;
  t66788 = t66786 + t66179 + t66787;
  t66791 = t1486*t63575*t2387;
  t66792 = t66791 + t66428 + t66430;
  t66767 = 0.2000000000018*t1486*t63575*t2387;
  t66776 = -0.2000000000018*t2938*t66160;
  t66778 = 6.000000000054e-7*t2938*t66392;
  t66785 = t4539*t66783;
  t66790 = t3650*t66788;
  t66793 = t4228*t66792;
  t66795 = -1.*t5448*t66783;
  t66799 = -1.*t5439*t66788;
  t66800 = -1.*t5375*t66792;
  t66805 = t66795 + t66799 + t66800;
  t66812 = 0.2*t66805;
  t66813 = t5439*t66783;
  t66815 = t20477*t66788;
  t66816 = t5300*t66792;
  t66817 = t66813 + t66815 + t66816;
  t66818 = 0.100001*t66817;
  t66819 = t5375*t66783;
  t66820 = t5300*t66788;
  t66821 = t5336*t66792;
  t66826 = t66819 + t66820 + t66821;
  t66831 = -0.3*t66826;
  t66832 = t66767 + t66776 + t66778 + t66785 + t66790 + t66793 + t66812 + t66818 + t66831;
  t66849 = t3724*t63575*t2387*t2730;
  t66851 = t66849 + t66461;
  t66855 = t1486*t63575*t2387*t3271;
  t66856 = t65088 + t66855;
  t66873 = 3.e-6*t63575*t2387*t2730*t2938;
  t66874 = -1.*t63575*t2387*t2938*t3271;
  t66875 = t66873 + t66874;
  t66953 = 1.000000000009*t63575*t2938*t2967;
  t66956 = 3.e-6*t1486*t63575*t2387*t3271;
  t66958 = t65125 + t66953 + t66956;
  t66961 = -3.e-6*t63575*t2387*t2730*t2938;
  t66962 = 3.e-6*t1486*t63575*t2967;
  t66963 = -9.e-12*t63575*t2387*t2938*t3271;
  t66965 = t66961 + t66962 + t66963;
  t66970 = -1.*t1486*t63575*t2967;
  t66973 = t66472 + t66970 + t66477;
  t67011 = 3.e-6*t1943*t63575*t2730*t2967;
  t67016 = -1.*t3724*t63575*t2967*t3271;
  t67018 = t63942 + t67011 + t67016;
  t67022 = t1486*t63575*t2730*t2967;
  t67023 = -3.e-6*t1943*t63575*t2967*t3271;
  t67024 = t63983 + t67022 + t67023;
  t67026 = -1.*t63575*t2730*t2938*t2967;
  t67028 = -3.e-6*t63575*t2938*t2967*t3271;
  t67029 = t64003 + t67026 + t67028;
  t63521 = -0.2000000000018*t2387*t2938*t63514;
  t63583 = t2110*t63578;
  t63620 = 6.000000000054e-7*t1943*t63619;
  t63645 = t3650*t63643;
  t63710 = t4228*t63709;
  t63735 = t4539*t63731;
  t63863 = t5300*t63643;
  t63866 = t5336*t63709;
  t63867 = t5375*t63731;
  t63870 = t63863 + t63866 + t63867;
  t63871 = -0.3*t63870;
  t63872 = -1.*t5439*t63643;
  t63874 = -1.*t5375*t63709;
  t63885 = -1.*t5448*t63731;
  t63886 = t63872 + t63874 + t63885;
  t63889 = 0.2*t63886;
  t63892 = t20477*t63643;
  t63897 = t5300*t63709;
  t63898 = t5439*t63731;
  t63900 = t63892 + t63897 + t63898;
  t63901 = 0.100001*t63900;
  t67085 = t63521 + t63583 + t63620 + t63645 + t63710 + t63735 + t63871 + t63889 + t63901;
  t66847 = 6.000000000054e-7*t1943*t63575*t2387*t2730;
  t66848 = t2110*t63575*t2387*t3271;
  t66854 = t3650*t66851;
  t66860 = t4228*t66856;
  t66876 = t4539*t66875;
  t66877 = t5300*t66851;
  t66880 = t5336*t66856;
  t66881 = t5375*t66875;
  t66882 = t66877 + t66880 + t66881;
  t66883 = -0.3*t66882;
  t66885 = -1.*t5439*t66851;
  t66886 = -1.*t5375*t66856;
  t66889 = -1.*t5448*t66875;
  t66890 = t66885 + t66886 + t66889;
  t66891 = 0.2*t66890;
  t66895 = t20477*t66851;
  t66896 = t5300*t66856;
  t66898 = t5439*t66875;
  t66899 = t66895 + t66896 + t66898;
  t66900 = 0.100001*t66899;
  t66902 = t66847 + t66848 + t66854 + t66860 + t66876 + t66883 + t66891 + t66900;
  t67090 = t63950 + t63952;
  t67092 = t63989 + t63992;
  t67094 = t64006 + t64008;
  t67175 = 3.e-6*t1486*t63908;
  t67178 = -1.*t1486*t66392;
  t67179 = t67175 + t67178;
  t67183 = -9.e-12*t2938*t63908;
  t67187 = t67183 + t66430;
  t66904 = t30349*t66452;
  t66905 = t37021*t66462;
  t66906 = t43372*t66478;
  t66910 = -1.*t43422*t66452;
  t66913 = 1.000000000009*t3568*t66462;
  t66914 = -1.*t43856*t66478;
  t66916 = t66910 + t66913 + t66914;
  t66921 = 0.2*t66916;
  t66922 = -1.8e-11*t3568*t66452;
  t66923 = t44190*t66462;
  t66927 = t43422*t66478;
  t66928 = t66922 + t66923 + t66927;
  t66929 = 0.100001*t66928;
  t66934 = t44190*t66452;
  t66936 = t44431*t66462;
  t66937 = -1.000000000009*t3568*t66478;
  t66945 = t66934 + t66936 + t66937;
  t66946 = -0.3*t66945;
  t66947 = t66904 + t66905 + t66906 + t66921 + t66929 + t66946;
  t67117 = t30349*t66548;
  t67119 = t37021*t66554;
  t67120 = t43372*t66614;
  t67121 = -1.*t43422*t66548;
  t67123 = 1.000000000009*t3568*t66554;
  t67124 = -1.*t43856*t66614;
  t67126 = t67121 + t67123 + t67124;
  t67129 = 0.2*t67126;
  t67130 = -1.8e-11*t3568*t66548;
  t67131 = t44190*t66554;
  t67133 = t43422*t66614;
  t67134 = t67130 + t67131 + t67133;
  t67135 = 0.100001*t67134;
  t67138 = t44190*t66548;
  t67139 = t44431*t66554;
  t67142 = -1.000000000009*t3568*t66614;
  t67152 = t67138 + t67139 + t67142;
  t67167 = -0.3*t67152;
  t67170 = t67117 + t67119 + t67120 + t67129 + t67135 + t67167;
  t63856 = var2[4]*t63853;
  t64172 = var2[3]*t64159;
  t64615 = var2[5]*t64587;
  t64685 = var2[12]*t64681;
  t65051 = var2[10]*t65036;
  t66949 = 0.2000000000018*t63575*t2387*t2730*t2938;
  t66951 = -0.2000000000018*t1486*t63575*t2967;
  t66952 = 6.000000000054e-7*t63575*t2387*t2938*t3271;
  t66960 = t4539*t66958;
  t66966 = t3650*t66965;
  t66974 = t4228*t66973;
  t66975 = -1.*t5448*t66958;
  t66976 = -1.*t5439*t66965;
  t66978 = -1.*t5375*t66973;
  t66981 = t66975 + t66976 + t66978;
  t66982 = 0.2*t66981;
  t66984 = t5439*t66958;
  t66986 = t20477*t66965;
  t66987 = t5300*t66973;
  t66988 = t66984 + t66986 + t66987;
  t66989 = 0.100001*t66988;
  t66990 = t5375*t66958;
  t66991 = t5300*t66965;
  t66993 = t5336*t66973;
  t66998 = t66990 + t66991 + t66993;
  t67001 = -0.3*t66998;
  t67002 = t66949 + t66951 + t66952 + t66960 + t66966 + t66974 + t66982 + t66989 + t67001;
  t67417 = 3.e-6*t1486*t66160;
  t67418 = -9.e-12*t1486*t66392;
  t67419 = t63942 + t67417 + t67418;
  t67422 = t63983 + t66780 + t66781;
  t67424 = -1.000000000009*t1486*t63575*t2387;
  t67440 = t2938*t66160;
  t67441 = -3.e-6*t2938*t66392;
  t67442 = t67424 + t67440 + t67441;
  t67172 = 6.000000000054e-7*t2938*t63908;
  t67173 = -0.2000000000018*t2938*t66392;
  t67180 = t4539*t67179;
  t67182 = t4228*t66614;
  t67196 = t3650*t67187;
  t67197 = t5439*t67179;
  t67205 = t5300*t66614;
  t67206 = t20477*t67187;
  t67207 = t67197 + t67205 + t67206;
  t67221 = 0.100001*t67207;
  t67225 = t5375*t67179;
  t67226 = t5336*t66614;
  t67233 = t5300*t67187;
  t67234 = t67225 + t67226 + t67233;
  t67235 = -0.3*t67234;
  t67236 = -1.*t5448*t67179;
  t67240 = -1.*t5375*t66614;
  t67247 = -1.*t5439*t67187;
  t67254 = t67236 + t67240 + t67247;
  t67256 = 0.2*t67254;
  t67257 = t67172 + t67173 + t67180 + t67182 + t67196 + t67221 + t67235 + t67256;
  t67312 = t43372*t66783;
  t67313 = t30349*t66788;
  t67314 = t37021*t66792;
  t67315 = -1.000000000009*t3568*t66783;
  t67317 = t44190*t66788;
  t67325 = t44431*t66792;
  t67327 = t67315 + t67317 + t67325;
  t67330 = -0.3*t67327;
  t67331 = t43422*t66783;
  t67332 = -1.8e-11*t3568*t66788;
  t67334 = t44190*t66792;
  t67335 = t67331 + t67332 + t67334;
  t67338 = 0.100001*t67335;
  t67343 = -1.*t43856*t66783;
  t67344 = -1.*t43422*t66788;
  t67347 = 1.000000000009*t3568*t66792;
  t67351 = t67343 + t67344 + t67347;
  t67354 = 0.2*t67351;
  t67357 = t67312 + t67313 + t67314 + t67330 + t67338 + t67354;
  p_output1[0]=t2110*t2387*t2730 + 0.2000000000018*t2938*t2967 - 6.000000000054e-7*t1943*t2387*t3271 + t3650*t3775 + t4228*t4387 + t4539*t5250 - 0.3*(t3775*t5300 + t4387*t5336 + t5250*t5375) + 0.100001*(t20477*t3775 + t4387*t5300 + t5250*t5439) + 0.2*(-1.*t4387*t5375 - 1.*t3775*t5439 - 1.*t5250*t5448) + var1[0] + var2[0] + t51931*var2[4] + t51503*var2[5] + t50937*var2[10] + t44854*var2[12] + var2[5]*(t53957*var2[4] + (t51963 + t51976 + t3650*t51990 + t4228*t52024 + t4539*t52092 - 0.3*(t51990*t5300 + t52024*t5336 + t52092*t5375) + 0.100001*(t20477*t51990 + t52024*t5300 + t52092*t5439) + 0.2*(-1.*t52024*t5375 - 1.*t51990*t5439 - 1.*t52092*t5448))*var2[5] + t53223*var2[10] + t52322*var2[12]) + var2[12]*(t58203*var2[4] + t52322*var2[5] + t56174*var2[10] + (0.100001*(-1.8e-11*t3427*t3775 + t43422*t4387 + t30117*t5250) + t3775*t53996 + t4387*t54129 + t5250*t54927 - 0.3*(t3775*t43422 - 1.000000000009*t3427*t5250 + t4387*t54972) + 0.2*(-1.*t30117*t3775 + 1.000000000009*t3427*t4387 - 1.*t5250*t55275))*var2[12]) + var2[10]*(t62610*var2[4] + t53223*var2[5] + (-0.2000000000018*t1486*t2387*t2730 - 6.000000000054e-7*t1486*t2387*t3271 + t58271 + t4228*t62924 + t3650*t62974 + t4539*t62978 - 0.3*(t5336*t62924 + t5300*t62974 + t5375*t62978) + 0.100001*(t5300*t62924 + t20477*t62974 + t5439*t62978) + 0.2*(-1.*t5375*t62924 - 1.*t5439*t62974 - 1.*t5448*t62978))*var2[10] + t56174*var2[12]) + var2[4]*((t51963 + t51976 + t58271 + t3650*t58295 + t4228*t58308 + t4539*t60654 - 0.3*(t5300*t58295 + t5336*t58308 + t5375*t60654) + 0.100001*(t20477*t58295 + t5300*t58308 + t5439*t60654) + 0.2*(-1.*t5439*t58295 - 1.*t5375*t58308 - 1.*t5448*t60654))*var2[4] + t53957*var2[5] + t62610*var2[10] + t58203*var2[12]) + var3[0] + t51931*var3[4] + t51503*var3[5] + t50937*var3[10] + t44854*var3[12] - 1.*var4[0];
  p_output1[1]=t63521 + t63583 + t63620 + t63645 + t63710 + t63735 + t63856 + t63871 + t63889 + t63901 + t64172 + t64615 + t64685 + t65051 + var1[1] + var2[1] + var2[12]*(t65852*var2[3] + t65460*var2[4] + t65889*var2[5] + t65945*var2[10] + (t53996*t63643 + t54129*t63709 + t54927*t63731 + 0.100001*(-1.8e-11*t3427*t63643 + t43422*t63709 + t30117*t63731) - 0.3*(t43422*t63643 + t54972*t63709 - 1.000000000009*t3427*t63731) + 0.2*(-1.*t30117*t63643 + 1.000000000009*t3427*t63709 - 1.*t55275*t63731))*var2[12]) + var2[4]*(t65322*var2[3] + (-1.*t2110*t2730*t2967*t63514 + 6.000000000054e-7*t1943*t2967*t3271*t63514 + t65764 + t3650*t65777 + t4228*t65783 + t4539*t65788 - 0.3*(t5300*t65777 + t5336*t65783 + t5375*t65788) + 0.100001*(t20477*t65777 + t5300*t65783 + t5439*t65788) + 0.2*(-1.*t5439*t65777 - 1.*t5375*t65783 - 1.*t5448*t65788))*var2[4] + t65762*var2[5] + t65607*var2[10] + t65460*var2[12]) + var2[3]*((t65764 + t66234 + t66251 + t3650*t66313 + t4228*t66320 + t4539*t66322 - 0.3*(t5300*t66313 + t5336*t66320 + t5375*t66322) + 0.100001*(t20477*t66313 + t5300*t66320 + t5439*t66322) + 0.2*(-1.*t5439*t66313 - 1.*t5375*t66320 - 1.*t5448*t66322))*var2[3] + t65322*var2[4] + t66221*var2[5] + t66005*var2[10] + t65852*var2[12]) + var2[5]*(t66221*var2[3] + t65762*var2[4] + (t66234 + t66251 + t3650*t66265 + t4228*t66275 + t4539*t66282 - 0.3*(t5300*t66265 + t5336*t66275 + t5375*t66282) + 0.100001*(t20477*t66265 + t5300*t66275 + t5439*t66282) + 0.2*(-1.*t5439*t66265 - 1.*t5375*t66275 - 1.*t5448*t66282))*var2[5] + t66150*var2[10] + t65889*var2[12]) + var2[10]*(t66005*var2[3] + t65607*var2[4] + t66150*var2[5] + (-0.2000000000018*t1486*t63578 + 6.000000000054e-7*t1486*t63619 + t65764 + t3650*t66015 + t4228*t66017 + t4539*t66031 - 0.3*(t5300*t66015 + t5336*t66017 + t5375*t66031) + 0.100001*(t20477*t66015 + t5300*t66017 + t5439*t66031) + 0.2*(-1.*t5439*t66015 - 1.*t5375*t66017 - 1.*t5448*t66031))*var2[10] + t65945*var2[12]) + var3[1] + t64159*var3[3] + t63853*var3[4] + t64587*var3[5] + t65036*var3[10] + t64681*var3[12] - 1.*var4[1];
  p_output1[2]=0.2000000000018*t2387*t2938*t63575 + t2110*t66160 + 6.000000000054e-7*t1943*t66392 + t3650*t66396 + t4228*t66413 + t4539*t66432 - 0.3*(t5300*t66396 + t5336*t66413 + t5375*t66432) + 0.100001*(t20477*t66396 + t5300*t66413 + t5439*t66432) + 0.2*(-1.*t5439*t66396 - 1.*t5375*t66413 - 1.*t5448*t66432) + var1[2] + var2[2] + (t63856 + t64172 + t64615 + t64685 + t65051)*var2[3] + t67085*var2[3] + t66506*var2[4] + t66679*var2[5] + t66832*var2[10] + t66752*var2[12] + var2[12]*(t64681*var2[3] + t66947*var2[4] + t67170*var2[5] + t67357*var2[10] + (t53996*t66396 + t54129*t66413 + t54927*t66432 + 0.100001*(-1.8e-11*t3427*t66396 + t43422*t66413 + t30117*t66432) - 0.3*(t43422*t66396 + t54972*t66413 - 1.000000000009*t3427*t66432) + 0.2*(-1.*t30117*t66396 + 1.000000000009*t3427*t66413 - 1.*t55275*t66432))*var2[12]) + var2[4]*(t63853*var2[3] + (t2110*t2730*t2967*t63575 - 6.000000000054e-7*t1943*t2967*t3271*t63575 + t63903 + t3650*t67018 + t4228*t67024 + t4539*t67029 - 0.3*(t5300*t67018 + t5336*t67024 + t5375*t67029) + 0.100001*(t20477*t67018 + t5300*t67024 + t5439*t67029) + 0.2*(-1.*t5439*t67018 - 1.*t5375*t67024 - 1.*t5448*t67029))*var2[4] + t66902*var2[5] + t67002*var2[10] + t66947*var2[12]) + var2[5]*(t64587*var2[3] + t66902*var2[4] + (t63912 + t63933 + t3650*t67090 + t4228*t67092 + t4539*t67094 - 0.3*(t5300*t67090 + t5336*t67092 + t5375*t67094) + 0.100001*(t20477*t67090 + t5300*t67092 + t5439*t67094) + 0.2*(-1.*t5439*t67090 - 1.*t5375*t67092 - 1.*t5448*t67094))*var2[5] + t67257*var2[10] + t67170*var2[12]) + var2[10]*(t65036*var2[3] + t67002*var2[4] + t67257*var2[5] + (t63903 - 0.2000000000018*t1486*t66160 + 6.000000000054e-7*t1486*t66392 + t3650*t67419 + t4228*t67422 + t4539*t67442 - 0.3*(t5300*t67419 + t5336*t67422 + t5375*t67442) + 0.100001*(t20477*t67419 + t5300*t67422 + t5439*t67442) + 0.2*(-1.*t5439*t67419 - 1.*t5375*t67422 - 1.*t5448*t67442))*var2[10] + t67357*var2[12]) + var3[2] + t67085*var3[3] + t66506*var3[4] + t66679*var3[5] + t66832*var3[10] + t66752*var3[12] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_LeftBackFoot_BackStance.hh"

namespace BackStance
{

void ddh_LeftBackFoot_BackStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
