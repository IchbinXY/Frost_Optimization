/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 23:56:04 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t7231;
  double t8253;
  double t12083;
  double t12129;
  double t13104;
  double t13122;
  double t13161;
  double t13196;
  double t13543;
  double t12140;
  double t12152;
  double t12153;
  double t12608;
  double t14839;
  double t14949;
  double t15182;
  double t13756;
  double t14503;
  double t15212;
  double t14998;
  double t14999;
  double t15021;
  double t15056;
  double t15063;
  double t15103;
  double t15247;
  double t15265;
  double t15289;
  double t15336;
  double t15349;
  double t15355;
  double t15357;
  double t15360;
  double t15361;
  double t15363;
  double t15370;
  double t15417;
  double t15603;
  double t15387;
  double t15213;
  double t15374;
  double t15804;
  double t12100;
  double t12101;
  double t12118;
  double t12122;
  double t13103;
  double t13162;
  double t14646;
  double t14974;
  double t14995;
  double t15211;
  double t15217;
  double t15220;
  double t15222;
  double t15226;
  double t15339;
  double t15341;
  double t15344;
  double t15345;
  double t15348;
  double t15917;
  double t15919;
  double t15987;
  double t15395;
  double t16098;
  double t16103;
  double t16109;
  double t16125;
  double t16126;
  double t16130;
  double t15846;
  double t15877;
  double t15894;
  double t17127;
  double t17129;
  double t17121;
  double t17122;
  double t17219;
  double t17169;
  double t17176;
  double t17178;
  double t17182;
  double t17252;
  double t17354;
  double t17359;
  double t17383;
  double t17387;
  double t17388;
  double t17433;
  double t17471;
  double t17835;
  double t17690;
  double t18404;
  double t18548;
  double t18583;
  double t19336;
  double t19442;
  double t19478;
  double t19485;
  double t19497;
  double t19516;
  double t19521;
  double t12147;
  double t13098;
  double t19804;
  double t19810;
  double t19812;
  double t17123;
  double t17135;
  double t17136;
  double t17152;
  double t17218;
  double t17220;
  double t17227;
  double t17234;
  double t17244;
  double t17378;
  double t17379;
  double t17380;
  double t17381;
  double t17382;
  double t20313;
  double t20342;
  double t20360;
  double t20383;
  double t20389;
  double t17696;
  double t20404;
  double t20407;
  double t20409;
  double t17891;
  double t20744;
  double t20758;
  double t20763;
  double t20804;
  double t20821;
  double t20827;
  double t15912;
  double t15916;
  double t16003;
  double t16112;
  double t16143;
  double t16146;
  double t16187;
  double t16275;
  double t16282;
  double t16351;
  double t16358;
  double t16360;
  double t16363;
  double t16465;
  double t16467;
  double t16483;
  double t16561;
  double t16758;
  double t16904;
  double t17087;
  double t17117;
  double t21192;
  double t21196;
  double t21203;
  double t21208;
  double t21215;
  double t21218;
  double t21220;
  double t21221;
  double t21222;
  double t21223;
  double t12221;
  double t21452;
  double t21458;
  double t21469;
  double t21508;
  double t21532;
  double t21542;
  double t20737;
  double t20741;
  double t20764;
  double t20837;
  double t20972;
  double t21002;
  double t21015;
  double t21016;
  double t21037;
  double t21039;
  double t21065;
  double t21073;
  double t21079;
  double t21080;
  double t21081;
  double t21114;
  double t21117;
  double t21157;
  double t21161;
  double t21164;
  double t21166;
  double t17922;
  double t18132;
  double t18230;
  double t19411;
  double t19508;
  double t19527;
  double t19538;
  double t19546;
  double t19562;
  double t19565;
  double t19567;
  double t19575;
  double t19578;
  double t19583;
  double t19621;
  double t19630;
  double t19637;
  double t19650;
  double t19658;
  double t19664;
  double t19693;
  double t19758;
  double t22256;
  double t22141;
  double t22161;
  double t22185;
  double t22188;
  double t22425;
  double t22438;
  double t22439;
  double t22515;
  double t22535;
  double t22546;
  double t21206;
  double t21219;
  double t21227;
  double t21234;
  double t21235;
  double t21240;
  double t21242;
  double t21245;
  double t21263;
  double t21272;
  double t21287;
  double t21293;
  double t21321;
  double t21326;
  double t21329;
  double t21335;
  double t21341;
  double t21345;
  double t21383;
  double t20377;
  double t20400;
  double t20410;
  double t20424;
  double t20432;
  double t20440;
  double t20447;
  double t20614;
  double t20623;
  double t20633;
  double t20642;
  double t20649;
  double t20655;
  double t20662;
  double t20665;
  double t20666;
  double t20667;
  double t20668;
  double t20677;
  double t17217;
  double t17367;
  double t17441;
  double t17583;
  double t17587;
  double t17739;
  double t17802;
  double t17828;
  double t17831;
  double t17841;
  double t17852;
  double t17860;
  double t17886;
  double t17888;
  double t17893;
  double t17894;
  double t17895;
  double t17900;
  double t17905;
  double t24978;
  double t25007;
  double t25027;
  double t25048;
  double t25058;
  double t25103;
  double t25126;
  double t25138;
  double t25140;
  double t25178;
  double t25235;
  double t25236;
  double t25279;
  double t26281;
  double t26280;
  double t26286;
  double t26293;
  double t26300;
  double t26301;
  double t26306;
  double t26322;
  double t26323;
  double t26332;
  double t26356;
  double t26358;
  double t26374;
  double t26390;
  double t26413;
  double t26414;
  double t26733;
  double t26779;
  double t26823;
  double t26726;
  double t26910;
  double t26911;
  double t26922;
  double t26963;
  double t26985;
  double t27003;
  double t27025;
  double t27026;
  double t27077;
  double t27080;
  double t27463;
  double t27464;
  double t27536;
  double t27547;
  double t27581;
  double t27586;
  double t27589;
  double t27596;
  double t27624;
  double t27625;
  double t27830;
  double t27841;
  double t27865;
  double t27894;
  double t27903;
  double t27908;
  double t27928;
  double t27929;
  double t27934;
  double t27938;
  double t27961;
  double t27973;
  double t27982;
  double t28018;
  double t28040;
  double t28061;
  double t28102;
  double t28111;
  double t24979;
  double t24990;
  double t24992;
  double t25093;
  double t25164;
  double t25303;
  double t25307;
  double t25360;
  double t25363;
  double t25470;
  double t25611;
  double t25641;
  double t25939;
  double t26038;
  double t26046;
  double t26078;
  double t26157;
  double t26166;
  double t26180;
  double t26245;
  double t26271;
  double t26276;
  double t28379;
  double t28388;
  double t28412;
  double t28417;
  double t28424;
  double t28431;
  double t28432;
  double t28436;
  double t28448;
  double t28459;
  double t28461;
  double t28463;
  double t28515;
  double t28520;
  double t28524;
  double t28528;
  double t28549;
  double t28562;
  double t28564;
  double t28567;
  double t28570;
  double t28576;
  double t28634;
  double t28635;
  double t28643;
  double t28648;
  double t28653;
  double t28681;
  double t28690;
  double t28714;
  double t27829;
  double t28871;
  double t28876;
  double t28895;
  double t28898;
  double t28906;
  double t28924;
  double t28962;
  double t28965;
  double t28976;
  double t28630;
  double t28633;
  double t28642;
  double t28657;
  double t28715;
  double t28716;
  double t28719;
  double t28726;
  double t28728;
  double t28729;
  double t28753;
  double t28754;
  double t28780;
  double t28794;
  double t28806;
  double t28819;
  double t28820;
  double t28824;
  double t28838;
  double t28853;
  double t28860;
  double t26294;
  double t26313;
  double t26342;
  double t26376;
  double t26415;
  double t26417;
  double t26419;
  double t26425;
  double t26486;
  double t26513;
  double t26522;
  double t26605;
  double t26619;
  double t26643;
  double t26650;
  double t26685;
  double t26692;
  double t26693;
  double t26701;
  double t26715;
  double t26717;
  double t29065;
  double t29078;
  double t29090;
  double t29060;
  double t29093;
  double t29097;
  double t29099;
  double t29101;
  double t29108;
  double t29109;
  double t29118;
  double t29208;
  double t29209;
  double t29212;
  double t29221;
  double t29222;
  double t29228;
  double t27879;
  double t27909;
  double t29286;
  double t29292;
  double t29294;
  double t28500;
  double t28502;
  double t28506;
  double t28533;
  double t28563;
  double t28577;
  double t28578;
  double t28582;
  double t28586;
  double t28590;
  double t28591;
  double t28592;
  double t28598;
  double t28603;
  double t28604;
  double t28606;
  double t28608;
  double t28615;
  double t28620;
  double t28621;
  double t28623;
  double t28624;
  double t27454;
  double t27457;
  double t27460;
  double t27567;
  double t27613;
  double t27627;
  double t27633;
  double t27634;
  double t27641;
  double t27650;
  double t27652;
  double t27666;
  double t27764;
  double t27768;
  double t27769;
  double t27771;
  double t27793;
  double t27795;
  double t27806;
  double t27807;
  double t27811;
  double t27814;
  double t29332;
  double t29336;
  double t29338;
  double t29353;
  double t29355;
  double t29356;
  double t29366;
  double t29367;
  double t29369;
  double t29376;
  double t29381;
  double t29382;
  double t29388;
  double t29206;
  double t29207;
  double t29214;
  double t29217;
  double t29231;
  double t29232;
  double t29236;
  double t29240;
  double t29245;
  double t29250;
  double t29254;
  double t29257;
  double t29261;
  double t29263;
  double t29267;
  double t29273;
  double t29274;
  double t29279;
  double t29281;
  double t29282;
  double t29283;
  double t29445;
  double t29446;
  double t29449;
  double t29451;
  double t29453;
  double t29455;
  double t29458;
  double t29463;
  double t29465;
  double t28418;
  double t28439;
  double t28465;
  double t28468;
  double t28470;
  double t28471;
  double t28472;
  double t28474;
  double t28477;
  double t28481;
  double t28484;
  double t28485;
  double t28486;
  double t28487;
  double t28488;
  double t28493;
  double t28494;
  double t28496;
  double t28498;
  double t26926;
  double t27022;
  double t27110;
  double t27163;
  double t27225;
  double t27319;
  double t27355;
  double t27370;
  double t27396;
  double t27397;
  double t27398;
  double t27399;
  double t27403;
  double t27411;
  double t27415;
  double t27423;
  double t27426;
  double t27427;
  double t27434;
  double t29098;
  double t29106;
  double t29120;
  double t29124;
  double t29126;
  double t29128;
  double t29130;
  double t29136;
  double t29171;
  double t29180;
  double t29181;
  double t29182;
  double t29184;
  double t29190;
  double t29195;
  double t29198;
  double t29199;
  double t29201;
  double t29202;
  double t22027;
  double t22030;
  double t22036;
  double t22073;
  double t22242;
  double t22292;
  double t22305;
  double t22409;
  double t22442;
  double t22448;
  double t22461;
  double t22509;
  double t22511;
  double t29523;
  double t29526;
  double t29527;
  double t29528;
  double t22589;
  double t29536;
  double t29537;
  double t29538;
  double t29541;
  double t29542;
  double t22690;
  double t29448;
  double t29457;
  double t29466;
  double t29472;
  double t29476;
  double t29481;
  double t29482;
  double t29483;
  double t29484;
  double t29485;
  double t29486;
  double t29487;
  double t29490;
  double t29492;
  double t29493;
  double t29496;
  double t29497;
  double t29498;
  double t29503;
  double t29642;
  double t29644;
  double t29649;
  double t29650;
  double t29651;
  double t29653;
  double t29654;
  double t29657;
  double t29659;
  double t29660;
  double t29661;
  double t29662;
  double t29666;
  double t29669;
  double t29671;
  double t29672;
  double t29673;
  double t29677;
  double t29678;
  double t29679;
  double t29682;
  double t29683;
  double t29606;
  double t29609;
  double t29610;
  double t29611;
  double t29613;
  double t29615;
  double t29617;
  double t29621;
  double t29622;
  double t29623;
  double t29624;
  double t29628;
  double t29629;
  double t29630;
  double t29631;
  double t29632;
  double t29634;
  double t29635;
  double t29638;
  double t29639;
  double t29640;
  double t29641;
  double t29685;
  double t29689;
  double t29690;
  double t29691;
  double t29693;
  double t29694;
  double t29695;
  double t29700;
  double t29701;
  double t29703;
  double t29704;
  double t29705;
  double t29710;
  double t29711;
  double t29712;
  double t29713;
  double t29718;
  double t29719;
  double t29721;
  double t29722;
  double t29725;
  double t29790;
  double t29791;
  double t29792;
  double t29793;
  double t29795;
  double t29797;
  double t29798;
  double t29799;
  double t29803;
  double t29807;
  double t29809;
  double t29818;
  double t29820;
  double t29824;
  double t29826;
  double t29828;
  double t29829;
  double t29831;
  double t29832;
  double t29726;
  double t29727;
  double t29730;
  double t29731;
  double t29733;
  double t29738;
  double t29740;
  double t29748;
  double t29749;
  double t29753;
  double t29762;
  double t29763;
  double t29768;
  double t29769;
  double t29770;
  double t29775;
  double t29776;
  double t29777;
  double t29782;
  double t29784;
  double t29785;
  double t29786;
  double t29848;
  double t29849;
  double t29850;
  double t29854;
  double t29855;
  double t29859;
  double t29861;
  double t29863;
  double t29909;
  double t29910;
  double t29911;
  double t29912;
  double t29918;
  double t29919;
  double t29926;
  double t29932;
  double t29934;
  double t29935;
  double t29942;
  double t30012;
  double t30013;
  double t30014;
  double t30028;
  double t30029;
  double t30030;
  double t30045;
  double t30048;
  double t30049;
  double t30119;
  double t30120;
  double t30121;
  double t30123;
  double t30124;
  double t30128;
  double t30131;
  double t30133;
  double t30136;
  double t29842;
  double t29846;
  double t29851;
  double t29856;
  double t29867;
  double t29868;
  double t29869;
  double t29870;
  double t29874;
  double t29875;
  double t29876;
  double t29877;
  double t29880;
  double t29882;
  double t29886;
  double t29889;
  double t29890;
  double t29891;
  double t29893;
  double t29894;
  double t29906;
  double t30185;
  double t30187;
  double t30192;
  double t30255;
  double t30256;
  double t30259;
  double t30252;
  double t30262;
  double t30266;
  double t30273;
  double t30281;
  double t30286;
  double t30287;
  double t30339;
  double t30344;
  double t30345;
  double t30352;
  double t30354;
  double t30355;
  double t29992;
  double t29996;
  double t30009;
  double t30020;
  double t30047;
  double t30052;
  double t30053;
  double t30054;
  double t30058;
  double t30077;
  double t30078;
  double t30083;
  double t30086;
  double t30088;
  double t30089;
  double t30091;
  double t30092;
  double t30094;
  double t30098;
  double t30102;
  double t30105;
  double t30108;
  double t30421;
  double t30422;
  double t30429;
  double t30438;
  double t30439;
  double t30440;
  double t30446;
  double t30448;
  double t30449;
  double t30452;
  double t30337;
  double t30338;
  double t30346;
  double t30347;
  double t30359;
  double t30363;
  double t30368;
  double t30378;
  double t30380;
  double t30383;
  double t30384;
  double t30386;
  double t30390;
  double t30392;
  double t30396;
  double t30400;
  double t30401;
  double t30402;
  double t30406;
  double t30407;
  double t30408;
  double t30504;
  double t30506;
  double t30508;
  double t30513;
  double t30516;
  double t30521;
  double t30524;
  double t30527;
  double t29913;
  double t29929;
  double t29943;
  double t29945;
  double t29946;
  double t29954;
  double t29955;
  double t29959;
  double t29960;
  double t29961;
  double t29966;
  double t29969;
  double t29970;
  double t29971;
  double t29972;
  double t29975;
  double t29980;
  double t29981;
  double t29988;
  double t30269;
  double t30285;
  double t30289;
  double t30290;
  double t30294;
  double t30296;
  double t30298;
  double t30300;
  double t30302;
  double t30303;
  double t30304;
  double t30305;
  double t30306;
  double t30307;
  double t30317;
  double t30319;
  double t30320;
  double t30333;
  double t30334;
  double t30565;
  double t30572;
  double t30575;
  double t30580;
  double t30581;
  double t30583;
  double t30587;
  double t30596;
  double t30507;
  double t30519;
  double t30529;
  double t30530;
  double t30532;
  double t30533;
  double t30535;
  double t30536;
  double t30537;
  double t30542;
  double t30543;
  double t30544;
  double t30546;
  double t30547;
  double t30548;
  double t30549;
  double t30550;
  double t30553;
  double t30556;
  t7231 = Cos(var1[19]);
  t8253 = -1.*t7231;
  t12083 = 1. + t8253;
  t12129 = Cos(var1[4]);
  t13104 = Cos(var1[21]);
  t13122 = -1.*t13104;
  t13161 = 1. + t13122;
  t13196 = -3.e-6*t13161;
  t13543 = Sin(var1[21]);
  t12140 = Cos(var1[5]);
  t12152 = Sin(var1[19]);
  t12153 = Sin(var1[4]);
  t12608 = Sin(var1[5]);
  t14839 = 3.e-6*t13543;
  t14949 = t13196 + t14839;
  t15182 = 3.e-13*var1[21];
  t13756 = -3.e-6*t13543;
  t14503 = t13196 + t13756;
  t15212 = -9.e-12*t13161;
  t14998 = -3.e-6*t12083*t12129*t12140;
  t14999 = 3.e-6*t12152*t12153;
  t15021 = -9.e-12*t12083;
  t15056 = 1. + t15021;
  t15063 = t15056*t12129*t12608;
  t15103 = t14998 + t14999 + t15063;
  t15247 = -1.*t7231*t12129*t12140;
  t15265 = -1.*t12152*t12153;
  t15289 = 3.e-6*t12083*t12129*t12608;
  t15336 = t15247 + t15265 + t15289;
  t15349 = t12129*t12140*t12152;
  t15355 = -1.000000000009*t12083;
  t15357 = 1. + t15355;
  t15360 = -1.*t15357*t12153;
  t15361 = 3.e-6*t12129*t12152*t12608;
  t15363 = t15349 + t15360 + t15361;
  t15370 = 3.e-6*t13161;
  t15417 = -1.000000000009*t13161;
  t15603 = 1. + t15417;
  t15387 = 9.e-12*t13161;
  t15213 = -1.*t13543;
  t15374 = t15370 + t13756;
  t15804 = t15370 + t14839;
  t12100 = -1.8e-12*t12083;
  t12101 = -1. + t7231;
  t12118 = 0.2*t12101;
  t12122 = t12100 + t12118;
  t13103 = 1.e-7*var1[21];
  t13162 = 5.4e-18*t13161;
  t14646 = -0.200000000003*t14503;
  t14974 = 0.100000000003*t14949;
  t14995 = t13103 + t13162 + t14646 + t14974;
  t15211 = -0.2000000000048*t13161;
  t15217 = t15212 + t15213;
  t15220 = 0.100000000003*t15217;
  t15222 = 3.e-7*t14949;
  t15226 = t15182 + t15211 + t15220 + t15222;
  t15339 = 0.1000000000039*t13161;
  t15341 = 3.e-7*t14503;
  t15344 = t15212 + t13543;
  t15345 = -0.200000000003*t15344;
  t15348 = t15182 + t15339 + t15341 + t15345;
  t15917 = t15056*t12140*t12153;
  t15919 = 3.e-6*t12083*t12153*t12608;
  t15987 = t15917 + t15919;
  t15395 = t15387 + t13543;
  t16098 = 3.e-6*t12083*t12140*t12153;
  t16103 = t7231*t12153*t12608;
  t16109 = t16098 + t16103;
  t16125 = 3.e-6*t12140*t12152*t12153;
  t16126 = -1.*t12152*t12153*t12608;
  t16130 = t16125 + t16126;
  t15846 = t15387 + t15213;
  t15877 = -1.8e-11*t13161;
  t15894 = 1. + t15877;
  t17127 = 3.e-6*t13104;
  t17129 = t17127 + t13756;
  t17121 = -3.e-6*t13104;
  t17122 = t17121 + t13756;
  t17219 = -9.e-12*t13543;
  t17169 = -3.e-6*t12129*t12152;
  t17176 = -3.e-6*t12083*t12140*t12153;
  t17178 = t15056*t12153*t12608;
  t17182 = t17169 + t17176 + t17178;
  t17252 = t12129*t12152;
  t17354 = -1.*t7231*t12140*t12153;
  t17359 = t17252 + t17354 + t15919;
  t17383 = t15357*t12129;
  t17387 = t12140*t12152*t12153;
  t17388 = 3.e-6*t12152*t12153*t12608;
  t17433 = t17383 + t17387 + t17388;
  t17471 = t17127 + t14839;
  t17835 = t17121 + t14839;
  t17690 = 9.e-12*t13543;
  t18404 = -1.000000000009*t12129*t12152;
  t18548 = t7231*t12140*t12153;
  t18583 = 3.e-6*t7231*t12153*t12608;
  t19336 = t18404 + t18548 + t18583;
  t19442 = -3.e-6*t7231*t12129;
  t19478 = -3.e-6*t12140*t12152*t12153;
  t19485 = -9.e-12*t12152*t12153*t12608;
  t19497 = t19442 + t19478 + t19485;
  t19516 = t7231*t12129;
  t19521 = t19516 + t17387 + t17388;
  t12147 = -1.*t12122*t12129*t12140;
  t13098 = 6.000000000054e-7*t12083*t12129*t12608;
  t19804 = t14998 + t15063;
  t19810 = t15247 + t15289;
  t19812 = t15349 + t15361;
  t17123 = -0.200000000003*t17122;
  t17135 = 0.100000000003*t17129;
  t17136 = 5.4e-18*t13543;
  t17152 = 1.e-7 + t17123 + t17135 + t17136;
  t17218 = 3.e-7*t17129;
  t17220 = t13122 + t17219;
  t17227 = 0.100000000003*t17220;
  t17234 = -0.2000000000048*t13543;
  t17244 = 3.e-13 + t17218 + t17227 + t17234;
  t17378 = 3.e-7*t17122;
  t17379 = t13104 + t17219;
  t17380 = -0.200000000003*t17379;
  t17381 = 0.1000000000039*t13543;
  t17382 = 3.e-13 + t17378 + t17380 + t17381;
  t20313 = -1.*t15056*t12129*t12140;
  t20342 = -3.e-6*t12083*t12129*t12608;
  t20360 = t20313 + t20342;
  t20383 = -1.*t7231*t12129*t12608;
  t20389 = t14998 + t20383;
  t17696 = t13122 + t17690;
  t20404 = -3.e-6*t12129*t12140*t12152;
  t20407 = t12129*t12152*t12608;
  t20409 = t20404 + t20407;
  t17891 = t13104 + t17690;
  t20744 = -3.e-6*t7231*t12129*t12140;
  t20758 = t7231*t12129*t12608;
  t20763 = t20744 + t20758;
  t20804 = 9.e-12*t12129*t12140*t12152;
  t20821 = -3.e-6*t12129*t12152*t12608;
  t20827 = t20804 + t20821;
  t15912 = 6.000000000054e-7*t12083*t12140*t12153;
  t15916 = t12122*t12153*t12608;
  t16003 = t14995*t15987;
  t16112 = t15226*t16109;
  t16143 = t15348*t16130;
  t16146 = t15374*t15987;
  t16187 = t15395*t16109;
  t16275 = t15603*t16130;
  t16282 = t16146 + t16187 + t16275;
  t16351 = -0.3*t16282;
  t16358 = -1.*t15804*t15987;
  t16360 = -1.*t15603*t16109;
  t16363 = -1.*t15846*t16130;
  t16465 = t16358 + t16360 + t16363;
  t16467 = 0.2*t16465;
  t16483 = t15894*t15987;
  t16561 = t15374*t16109;
  t16758 = t15804*t16130;
  t16904 = t16483 + t16561 + t16758;
  t17087 = -0.099999*t16904;
  t17117 = t15912 + t15916 + t16003 + t16112 + t16143 + t16351 + t16467 + t17087;
  t21192 = -1.000000000009*t12152*t12153;
  t21196 = -3.e-6*t7231*t12129*t12608;
  t21203 = t15247 + t21192 + t21196;
  t21208 = -1.*t12129*t12140*t12152;
  t21215 = t7231*t12153;
  t21218 = t21208 + t21215 + t20821;
  t21220 = 3.e-6*t12129*t12140*t12152;
  t21221 = -3.e-6*t7231*t12153;
  t21222 = 9.e-12*t12129*t12152*t12608;
  t21223 = t21220 + t21221 + t21222;
  t12221 = -0.2000000000018*t12152*t12153;
  t21452 = t15247 + t15265 + t21196;
  t21458 = 3.e-6*t7231*t12129*t12140;
  t21469 = 9.e-12*t7231*t12129*t12608;
  t21508 = t21458 + t14999 + t21469;
  t21532 = -1.000000000009*t7231*t12153;
  t21542 = t15349 + t21532 + t15361;
  t20737 = -6.000000000054e-7*t12129*t12140*t12152;
  t20741 = 0.2000000000018*t12129*t12152*t12608;
  t20764 = t15348*t20763;
  t20837 = t14995*t20827;
  t20972 = t15226*t20409;
  t21002 = -1.*t15846*t20763;
  t21015 = -1.*t15804*t20827;
  t21016 = -1.*t15603*t20409;
  t21037 = t21002 + t21015 + t21016;
  t21039 = 0.2*t21037;
  t21065 = t15804*t20763;
  t21073 = t15894*t20827;
  t21079 = t15374*t20409;
  t21080 = t21065 + t21073 + t21079;
  t21081 = -0.099999*t21080;
  t21114 = t15603*t20763;
  t21117 = t15374*t20827;
  t21157 = t15395*t20409;
  t21161 = t21114 + t21117 + t21157;
  t21164 = -0.3*t21161;
  t21166 = t20737 + t20741 + t20764 + t20837 + t20972 + t21039 + t21081 + t21164;
  t17922 = 0.2000000000018*t7231*t12129;
  t18132 = 0.2000000000018*t12140*t12152*t12153;
  t18230 = 6.000000000054e-7*t12152*t12153*t12608;
  t19411 = t15348*t19336;
  t19508 = t14995*t19497;
  t19527 = t15226*t19521;
  t19538 = -1.*t15846*t19336;
  t19546 = -1.*t15804*t19497;
  t19562 = -1.*t15603*t19521;
  t19565 = t19538 + t19546 + t19562;
  t19567 = 0.2*t19565;
  t19575 = t15804*t19336;
  t19578 = t15894*t19497;
  t19583 = t15374*t19521;
  t19621 = t19575 + t19578 + t19583;
  t19630 = -0.099999*t19621;
  t19637 = t15603*t19336;
  t19650 = t15374*t19497;
  t19658 = t15395*t19521;
  t19664 = t19637 + t19650 + t19658;
  t19693 = -0.3*t19664;
  t19758 = t17922 + t18132 + t18230 + t19411 + t19508 + t19527 + t19567 + t19630 + t19693;
  t22256 = -9.e-12*t13104;
  t22141 = 3.e-6*t12083*t12129*t12140;
  t22161 = -3.e-6*t12152*t12153;
  t22185 = -1.*t15056*t12129*t12608;
  t22188 = t22141 + t22161 + t22185;
  t22425 = t7231*t12129*t12140;
  t22438 = t12152*t12153;
  t22439 = t22425 + t22438 + t20342;
  t22515 = t15357*t12153;
  t22535 = t21208 + t22515 + t20821;
  t22546 = 9.e-12*t13104;
  t21206 = t17382*t21203;
  t21219 = t17244*t21218;
  t21227 = t17152*t21223;
  t21234 = -1.000000000009*t13543*t21203;
  t21235 = t17891*t21218;
  t21240 = t17835*t21223;
  t21242 = t21234 + t21235 + t21240;
  t21245 = -0.3*t21242;
  t21263 = -1.*t17696*t21203;
  t21272 = 1.000000000009*t13543*t21218;
  t21287 = -1.*t17471*t21223;
  t21293 = t21263 + t21272 + t21287;
  t21321 = 0.2*t21293;
  t21326 = t17471*t21203;
  t21329 = t17835*t21218;
  t21335 = -1.8e-11*t13543*t21223;
  t21341 = t21326 + t21329 + t21335;
  t21345 = -0.099999*t21341;
  t21383 = t21206 + t21219 + t21227 + t21245 + t21321 + t21345;
  t20377 = t17152*t20360;
  t20400 = t17244*t20389;
  t20410 = t17382*t20409;
  t20424 = -1.*t17471*t20360;
  t20432 = 1.000000000009*t13543*t20389;
  t20440 = -1.*t17696*t20409;
  t20447 = t20424 + t20432 + t20440;
  t20614 = 0.2*t20447;
  t20623 = -1.8e-11*t13543*t20360;
  t20633 = t17835*t20389;
  t20642 = t17471*t20409;
  t20649 = t20623 + t20633 + t20642;
  t20655 = -0.099999*t20649;
  t20662 = t17835*t20360;
  t20665 = t17891*t20389;
  t20666 = -1.000000000009*t13543*t20409;
  t20667 = t20662 + t20665 + t20666;
  t20668 = -0.3*t20667;
  t20677 = t20377 + t20400 + t20410 + t20614 + t20655 + t20668;
  t17217 = t17152*t17182;
  t17367 = t17244*t17359;
  t17441 = t17382*t17433;
  t17583 = -1.*t17471*t17182;
  t17587 = 1.000000000009*t13543*t17359;
  t17739 = -1.*t17696*t17433;
  t17802 = t17583 + t17587 + t17739;
  t17828 = 0.2*t17802;
  t17831 = -1.8e-11*t13543*t17182;
  t17841 = t17835*t17359;
  t17852 = t17471*t17433;
  t17860 = t17831 + t17841 + t17852;
  t17886 = -0.099999*t17860;
  t17888 = t17835*t17182;
  t17893 = t17891*t17359;
  t17894 = -1.000000000009*t13543*t17433;
  t17895 = t17888 + t17893 + t17894;
  t17900 = -0.3*t17895;
  t17905 = t17217 + t17367 + t17441 + t17828 + t17886 + t17900;
  t24978 = Cos(var1[3]);
  t25007 = 3.e-6*t12083*t24978*t12129*t12140;
  t25027 = -3.e-6*t24978*t12152*t12153;
  t25048 = -1.*t15056*t24978*t12129*t12608;
  t25058 = t25007 + t25027 + t25048;
  t25103 = t7231*t24978*t12129*t12140;
  t25126 = t24978*t12152*t12153;
  t25138 = -3.e-6*t12083*t24978*t12129*t12608;
  t25140 = t25103 + t25126 + t25138;
  t25178 = -1.*t24978*t12129*t12140*t12152;
  t25235 = t15357*t24978*t12153;
  t25236 = -3.e-6*t24978*t12129*t12152*t12608;
  t25279 = t25178 + t25235 + t25236;
  t26281 = Sin(var1[3]);
  t26280 = -1.*t24978*t12140*t12153;
  t26286 = t26281*t12608;
  t26293 = t26280 + t26286;
  t26300 = -1.*t12140*t26281;
  t26301 = -1.*t24978*t12153*t12608;
  t26306 = t26300 + t26301;
  t26322 = t15056*t26293;
  t26323 = 3.e-6*t12083*t26306;
  t26332 = t26322 + t26323;
  t26356 = 3.e-6*t12083*t26293;
  t26358 = t7231*t26306;
  t26374 = t26356 + t26358;
  t26390 = 3.e-6*t12152*t26293;
  t26413 = -1.*t12152*t26306;
  t26414 = t26390 + t26413;
  t26733 = t24978*t12140*t12153;
  t26779 = -1.*t26281*t12608;
  t26823 = t26733 + t26779;
  t26726 = 3.e-6*t24978*t12129*t12152;
  t26910 = 3.e-6*t12083*t26823;
  t26911 = t15056*t26306;
  t26922 = t26726 + t26910 + t26911;
  t26963 = -1.*t24978*t12129*t12152;
  t26985 = t7231*t26823;
  t27003 = t26963 + t26985 + t26323;
  t27025 = -1.*t15357*t24978*t12129;
  t27026 = -1.*t12152*t26823;
  t27077 = 3.e-6*t12152*t26306;
  t27080 = t27025 + t27026 + t27077;
  t27463 = 1.000000000009*t24978*t12129*t12152;
  t27464 = -1.*t7231*t26823;
  t27536 = 3.e-6*t7231*t26306;
  t27547 = t27463 + t27464 + t27536;
  t27581 = 3.e-6*t7231*t24978*t12129;
  t27586 = 3.e-6*t12152*t26823;
  t27589 = -9.e-12*t12152*t26306;
  t27596 = t27581 + t27586 + t27589;
  t27624 = -1.*t7231*t24978*t12129;
  t27625 = t27624 + t27026 + t27077;
  t27830 = -1.*t12140*t26281*t12153;
  t27841 = -1.*t24978*t12608;
  t27865 = t27830 + t27841;
  t27894 = -1.*t24978*t12140;
  t27903 = t26281*t12153*t12608;
  t27908 = t27894 + t27903;
  t27928 = -3.e-6*t12129*t12152*t26281;
  t27929 = 3.e-6*t12083*t27865;
  t27934 = t15056*t27908;
  t27938 = t27928 + t27929 + t27934;
  t27961 = t12129*t12152*t26281;
  t27973 = t7231*t27865;
  t27982 = 3.e-6*t12083*t27908;
  t28018 = t27961 + t27973 + t27982;
  t28040 = t15357*t12129*t26281;
  t28061 = -1.*t12152*t27865;
  t28102 = 3.e-6*t12152*t27908;
  t28111 = t28040 + t28061 + t28102;
  t24979 = t12122*t24978*t12129*t12140;
  t24990 = 0.2000000000018*t24978*t12152*t12153;
  t24992 = -6.000000000054e-7*t12083*t24978*t12129*t12608;
  t25093 = t14995*t25058;
  t25164 = t15226*t25140;
  t25303 = t15348*t25279;
  t25307 = t15374*t25058;
  t25360 = t15395*t25140;
  t25363 = t15603*t25279;
  t25470 = t25307 + t25360 + t25363;
  t25611 = -0.3*t25470;
  t25641 = -1.*t15804*t25058;
  t25939 = -1.*t15603*t25140;
  t26038 = -1.*t15846*t25279;
  t26046 = t25641 + t25939 + t26038;
  t26078 = 0.2*t26046;
  t26157 = t15894*t25058;
  t26166 = t15374*t25140;
  t26180 = t15804*t25279;
  t26245 = t26157 + t26166 + t26180;
  t26271 = -0.099999*t26245;
  t26276 = t24979 + t24990 + t24992 + t25093 + t25164 + t25303 + t25611 + t26078 + t26271;
  t28379 = 3.e-6*t12083*t12129*t12140*t26281;
  t28388 = -3.e-6*t12152*t26281*t12153;
  t28412 = -1.*t15056*t12129*t26281*t12608;
  t28417 = t28379 + t28388 + t28412;
  t28424 = t7231*t12129*t12140*t26281;
  t28431 = t12152*t26281*t12153;
  t28432 = -3.e-6*t12083*t12129*t26281*t12608;
  t28436 = t28424 + t28431 + t28432;
  t28448 = -1.*t12129*t12140*t12152*t26281;
  t28459 = t15357*t26281*t12153;
  t28461 = -3.e-6*t12129*t12152*t26281*t12608;
  t28463 = t28448 + t28459 + t28461;
  t28515 = -1.*t7231*t12129*t12140*t26281;
  t28520 = -1.000000000009*t12152*t26281*t12153;
  t28524 = -3.e-6*t7231*t12129*t26281*t12608;
  t28528 = t28515 + t28520 + t28524;
  t28549 = t7231*t26281*t12153;
  t28562 = t28448 + t28549 + t28461;
  t28564 = 3.e-6*t12129*t12140*t12152*t26281;
  t28567 = -3.e-6*t7231*t26281*t12153;
  t28570 = 9.e-12*t12129*t12152*t26281*t12608;
  t28576 = t28564 + t28567 + t28570;
  t28634 = -1.*t15056*t12129*t12140*t26281;
  t28635 = t28634 + t28432;
  t28643 = -3.e-6*t12083*t12129*t12140*t26281;
  t28648 = -1.*t7231*t12129*t26281*t12608;
  t28653 = t28643 + t28648;
  t28681 = -3.e-6*t12129*t12140*t12152*t26281;
  t28690 = t12129*t12152*t26281*t12608;
  t28714 = t28681 + t28690;
  t27829 = 0.2000000000018*t12129*t12152*t26281;
  t28871 = -3.e-6*t12083*t12140*t26281*t12153;
  t28876 = t15056*t26281*t12153*t12608;
  t28895 = t27928 + t28871 + t28876;
  t28898 = -1.*t7231*t12140*t26281*t12153;
  t28906 = 3.e-6*t12083*t26281*t12153*t12608;
  t28924 = t27961 + t28898 + t28906;
  t28962 = t12140*t12152*t26281*t12153;
  t28965 = 3.e-6*t12152*t26281*t12153*t12608;
  t28976 = t28040 + t28962 + t28965;
  t28630 = -6.000000000054e-7*t12083*t12129*t12140*t26281;
  t28633 = -1.*t12122*t12129*t26281*t12608;
  t28642 = t14995*t28635;
  t28657 = t15226*t28653;
  t28715 = t15348*t28714;
  t28716 = t15374*t28635;
  t28719 = t15395*t28653;
  t28726 = t15603*t28714;
  t28728 = t28716 + t28719 + t28726;
  t28729 = -0.3*t28728;
  t28753 = -1.*t15804*t28635;
  t28754 = -1.*t15603*t28653;
  t28780 = -1.*t15846*t28714;
  t28794 = t28753 + t28754 + t28780;
  t28806 = 0.2*t28794;
  t28819 = t15894*t28635;
  t28820 = t15374*t28653;
  t28824 = t15804*t28714;
  t28838 = t28819 + t28820 + t28824;
  t28853 = -0.099999*t28838;
  t28860 = t28630 + t28633 + t28642 + t28657 + t28715 + t28729 + t28806 + t28853;
  t26294 = 6.000000000054e-7*t12083*t26293;
  t26313 = t12122*t26306;
  t26342 = t14995*t26332;
  t26376 = t15226*t26374;
  t26415 = t15348*t26414;
  t26417 = t15374*t26332;
  t26419 = t15395*t26374;
  t26425 = t15603*t26414;
  t26486 = t26417 + t26419 + t26425;
  t26513 = -0.3*t26486;
  t26522 = -1.*t15804*t26332;
  t26605 = -1.*t15603*t26374;
  t26619 = -1.*t15846*t26414;
  t26643 = t26522 + t26605 + t26619;
  t26650 = 0.2*t26643;
  t26685 = t15894*t26332;
  t26692 = t15374*t26374;
  t26693 = t15804*t26414;
  t26701 = t26685 + t26692 + t26693;
  t26715 = -0.099999*t26701;
  t26717 = t26294 + t26313 + t26342 + t26376 + t26415 + t26513 + t26650 + t26715;
  t29065 = t24978*t12140;
  t29078 = -1.*t26281*t12153*t12608;
  t29090 = t29065 + t29078;
  t29060 = t15056*t27865;
  t29093 = 3.e-6*t12083*t29090;
  t29097 = t29060 + t29093;
  t29099 = t7231*t29090;
  t29101 = t27929 + t29099;
  t29108 = 3.e-6*t12152*t27865;
  t29109 = -1.*t12152*t29090;
  t29118 = t29108 + t29109;
  t29208 = 3.e-6*t7231*t27865;
  t29209 = -1.*t7231*t29090;
  t29212 = t29208 + t29209;
  t29221 = -9.e-12*t12152*t27865;
  t29222 = 3.e-6*t12152*t29090;
  t29228 = t29221 + t29222;
  t27879 = t12122*t27865;
  t27909 = 6.000000000054e-7*t12083*t27908;
  t29286 = t27929 + t27934;
  t29292 = t27973 + t27982;
  t29294 = t28061 + t28102;
  t28500 = -0.2000000000018*t12129*t12140*t12152*t26281;
  t28502 = 0.2000000000018*t7231*t26281*t12153;
  t28506 = -6.000000000054e-7*t12129*t12152*t26281*t12608;
  t28533 = t15348*t28528;
  t28563 = t15226*t28562;
  t28577 = t14995*t28576;
  t28578 = t15804*t28528;
  t28582 = t15374*t28562;
  t28586 = t15894*t28576;
  t28590 = t28578 + t28582 + t28586;
  t28591 = -0.099999*t28590;
  t28592 = t15603*t28528;
  t28598 = t15395*t28562;
  t28603 = t15374*t28576;
  t28604 = t28592 + t28598 + t28603;
  t28606 = -0.3*t28604;
  t28608 = -1.*t15846*t28528;
  t28615 = -1.*t15603*t28562;
  t28620 = -1.*t15804*t28576;
  t28621 = t28608 + t28615 + t28620;
  t28623 = 0.2*t28621;
  t28624 = t28500 + t28502 + t28506 + t28533 + t28563 + t28577 + t28591 + t28606 + t28623;
  t27454 = -0.2000000000018*t7231*t24978*t12129;
  t27457 = -0.2000000000018*t12152*t26823;
  t27460 = 6.000000000054e-7*t12152*t26306;
  t27567 = t15348*t27547;
  t27613 = t14995*t27596;
  t27627 = t15226*t27625;
  t27633 = -1.*t15846*t27547;
  t27634 = -1.*t15804*t27596;
  t27641 = -1.*t15603*t27625;
  t27650 = t27633 + t27634 + t27641;
  t27652 = 0.2*t27650;
  t27666 = t15804*t27547;
  t27764 = t15894*t27596;
  t27768 = t15374*t27625;
  t27769 = t27666 + t27764 + t27768;
  t27771 = -0.099999*t27769;
  t27793 = t15603*t27547;
  t27795 = t15374*t27596;
  t27806 = t15395*t27625;
  t27807 = t27793 + t27795 + t27806;
  t27811 = -0.3*t27807;
  t27814 = t27454 + t27457 + t27460 + t27567 + t27613 + t27627 + t27652 + t27771 + t27811;
  t29332 = t12140*t26281*t12153;
  t29336 = t24978*t12608;
  t29338 = t29332 + t29336;
  t29353 = 3.e-6*t7231*t29338;
  t29355 = -9.e-12*t7231*t29090;
  t29356 = t27928 + t29353 + t29355;
  t29366 = -1.*t7231*t29338;
  t29367 = 3.e-6*t7231*t29090;
  t29369 = t27961 + t29366 + t29367;
  t29376 = 1.000000000009*t7231*t12129*t26281;
  t29381 = t12152*t29338;
  t29382 = -3.e-6*t12152*t29090;
  t29388 = t29376 + t29381 + t29382;
  t29206 = 6.000000000054e-7*t12152*t27865;
  t29207 = -0.2000000000018*t12152*t29090;
  t29214 = t15348*t29212;
  t29217 = t15226*t29118;
  t29231 = t14995*t29228;
  t29232 = t15804*t29212;
  t29236 = t15374*t29118;
  t29240 = t15894*t29228;
  t29245 = t29232 + t29236 + t29240;
  t29250 = -0.099999*t29245;
  t29254 = t15603*t29212;
  t29257 = t15395*t29118;
  t29261 = t15374*t29228;
  t29263 = t29254 + t29257 + t29261;
  t29267 = -0.3*t29263;
  t29273 = -1.*t15846*t29212;
  t29274 = -1.*t15603*t29118;
  t29279 = -1.*t15804*t29228;
  t29281 = t29273 + t29274 + t29279;
  t29282 = 0.2*t29281;
  t29283 = t29206 + t29207 + t29214 + t29217 + t29231 + t29250 + t29267 + t29282;
  t29445 = 1.000000000009*t12129*t12152*t26281;
  t29446 = t29445 + t29366 + t29367;
  t29449 = 3.e-6*t7231*t12129*t26281;
  t29451 = 3.e-6*t12152*t29338;
  t29453 = -9.e-12*t12152*t29090;
  t29455 = t29449 + t29451 + t29453;
  t29458 = -1.*t7231*t12129*t26281;
  t29463 = -1.*t12152*t29338;
  t29465 = t29458 + t29463 + t29222;
  t28418 = t17152*t28417;
  t28439 = t17244*t28436;
  t28465 = t17382*t28463;
  t28468 = -1.*t17471*t28417;
  t28470 = 1.000000000009*t13543*t28436;
  t28471 = -1.*t17696*t28463;
  t28472 = t28468 + t28470 + t28471;
  t28474 = 0.2*t28472;
  t28477 = -1.8e-11*t13543*t28417;
  t28481 = t17835*t28436;
  t28484 = t17471*t28463;
  t28485 = t28477 + t28481 + t28484;
  t28486 = -0.099999*t28485;
  t28487 = t17835*t28417;
  t28488 = t17891*t28436;
  t28493 = -1.000000000009*t13543*t28463;
  t28494 = t28487 + t28488 + t28493;
  t28496 = -0.3*t28494;
  t28498 = t28418 + t28439 + t28465 + t28474 + t28486 + t28496;
  t26926 = t17152*t26922;
  t27022 = t17244*t27003;
  t27110 = t17382*t27080;
  t27163 = -1.*t17471*t26922;
  t27225 = 1.000000000009*t13543*t27003;
  t27319 = -1.*t17696*t27080;
  t27355 = t27163 + t27225 + t27319;
  t27370 = 0.2*t27355;
  t27396 = -1.8e-11*t13543*t26922;
  t27397 = t17835*t27003;
  t27398 = t17471*t27080;
  t27399 = t27396 + t27397 + t27398;
  t27403 = -0.099999*t27399;
  t27411 = t17835*t26922;
  t27415 = t17891*t27003;
  t27423 = -1.000000000009*t13543*t27080;
  t27426 = t27411 + t27415 + t27423;
  t27427 = -0.3*t27426;
  t27434 = t26926 + t27022 + t27110 + t27370 + t27403 + t27427;
  t29098 = t17152*t29097;
  t29106 = t17244*t29101;
  t29120 = t17382*t29118;
  t29124 = -1.*t17471*t29097;
  t29126 = 1.000000000009*t13543*t29101;
  t29128 = -1.*t17696*t29118;
  t29130 = t29124 + t29126 + t29128;
  t29136 = 0.2*t29130;
  t29171 = -1.8e-11*t13543*t29097;
  t29180 = t17835*t29101;
  t29181 = t17471*t29118;
  t29182 = t29171 + t29180 + t29181;
  t29184 = -0.099999*t29182;
  t29190 = t17835*t29097;
  t29195 = t17891*t29101;
  t29198 = -1.000000000009*t13543*t29118;
  t29199 = t29190 + t29195 + t29198;
  t29201 = -0.3*t29199;
  t29202 = t29098 + t29106 + t29120 + t29136 + t29184 + t29201;
  t22027 = 5.4e-18*t13104;
  t22030 = 0.100000000003*t17122;
  t22036 = -0.200000000003*t17835;
  t22073 = t22027 + t22030 + t22036;
  t22242 = -0.2000000000048*t13104;
  t22292 = t22256 + t13543;
  t22305 = 0.100000000003*t22292;
  t22409 = t22242 + t17378 + t22305;
  t22442 = 0.1000000000039*t13104;
  t22448 = t22256 + t15213;
  t22461 = -0.200000000003*t22448;
  t22509 = 3.e-7*t17835;
  t22511 = t22442 + t22461 + t22509;
  t29523 = 3.e-6*t12129*t12152*t26281;
  t29526 = 3.e-6*t12083*t29338;
  t29527 = t15056*t29090;
  t29528 = t29523 + t29526 + t29527;
  t22589 = t22546 + t15213;
  t29536 = -1.*t12129*t12152*t26281;
  t29537 = t7231*t29338;
  t29538 = t29536 + t29537 + t29093;
  t29541 = -1.*t15357*t12129*t26281;
  t29542 = t29541 + t29463 + t29222;
  t22690 = t22546 + t13543;
  t29448 = t17382*t29446;
  t29457 = t17152*t29455;
  t29466 = t17244*t29465;
  t29472 = -1.000000000009*t13543*t29446;
  t29476 = t17835*t29455;
  t29481 = t17891*t29465;
  t29482 = t29472 + t29476 + t29481;
  t29483 = -0.3*t29482;
  t29484 = t17471*t29446;
  t29485 = -1.8e-11*t13543*t29455;
  t29486 = t17835*t29465;
  t29487 = t29484 + t29485 + t29486;
  t29490 = -0.099999*t29487;
  t29492 = -1.*t17696*t29446;
  t29493 = -1.*t17471*t29455;
  t29496 = 1.000000000009*t13543*t29465;
  t29497 = t29492 + t29493 + t29496;
  t29498 = 0.2*t29497;
  t29503 = t29448 + t29457 + t29466 + t29483 + t29490 + t29498;
  t29642 = t12122*t12129*t12140*t26281;
  t29644 = 0.2000000000018*t12152*t26281*t12153;
  t29649 = -6.000000000054e-7*t12083*t12129*t26281*t12608;
  t29650 = t14995*t28417;
  t29651 = t15226*t28436;
  t29653 = t15348*t28463;
  t29654 = t15374*t28417;
  t29657 = t15395*t28436;
  t29659 = t15603*t28463;
  t29660 = t29654 + t29657 + t29659;
  t29661 = -0.3*t29660;
  t29662 = -1.*t15804*t28417;
  t29666 = -1.*t15603*t28436;
  t29669 = -1.*t15846*t28463;
  t29671 = t29662 + t29666 + t29669;
  t29672 = 0.2*t29671;
  t29673 = t15894*t28417;
  t29677 = t15374*t28436;
  t29678 = t15804*t28463;
  t29679 = t29673 + t29677 + t29678;
  t29682 = -0.099999*t29679;
  t29683 = t29642 + t29644 + t29649 + t29650 + t29651 + t29653 + t29661 + t29672 + t29682;
  t29606 = -0.2000000000018*t24978*t12129*t12152;
  t29609 = t12122*t26823;
  t29610 = 6.000000000054e-7*t12083*t26306;
  t29611 = t14995*t26922;
  t29613 = t15226*t27003;
  t29615 = t15348*t27080;
  t29617 = t15374*t26922;
  t29621 = t15395*t27003;
  t29622 = t15603*t27080;
  t29623 = t29617 + t29621 + t29622;
  t29624 = -0.3*t29623;
  t29628 = -1.*t15804*t26922;
  t29629 = -1.*t15603*t27003;
  t29630 = -1.*t15846*t27080;
  t29631 = t29628 + t29629 + t29630;
  t29632 = 0.2*t29631;
  t29634 = t15894*t26922;
  t29635 = t15374*t27003;
  t29638 = t15804*t27080;
  t29639 = t29634 + t29635 + t29638;
  t29640 = -0.099999*t29639;
  t29641 = t29606 + t29609 + t29610 + t29611 + t29613 + t29615 + t29624 + t29632 + t29640;
  t29685 = 6.000000000054e-7*t12083*t27865;
  t29689 = t12122*t29090;
  t29690 = t14995*t29097;
  t29691 = t15226*t29101;
  t29693 = t15348*t29118;
  t29694 = t15374*t29097;
  t29695 = t15395*t29101;
  t29700 = t15603*t29118;
  t29701 = t29694 + t29695 + t29700;
  t29703 = -0.3*t29701;
  t29704 = -1.*t15804*t29097;
  t29705 = -1.*t15603*t29101;
  t29710 = -1.*t15846*t29118;
  t29711 = t29704 + t29705 + t29710;
  t29712 = 0.2*t29711;
  t29713 = t15894*t29097;
  t29718 = t15374*t29101;
  t29719 = t15804*t29118;
  t29721 = t29713 + t29718 + t29719;
  t29722 = -0.099999*t29721;
  t29725 = t29685 + t29689 + t29690 + t29691 + t29693 + t29703 + t29712 + t29722;
  t29790 = t17152*t29528;
  t29791 = t17244*t29538;
  t29792 = t17382*t29542;
  t29793 = -1.*t17471*t29528;
  t29795 = 1.000000000009*t13543*t29538;
  t29797 = -1.*t17696*t29542;
  t29798 = t29793 + t29795 + t29797;
  t29799 = 0.2*t29798;
  t29803 = -1.8e-11*t13543*t29528;
  t29807 = t17835*t29538;
  t29809 = t17471*t29542;
  t29818 = t29803 + t29807 + t29809;
  t29820 = -0.099999*t29818;
  t29824 = t17835*t29528;
  t29826 = t17891*t29538;
  t29828 = -1.000000000009*t13543*t29542;
  t29829 = t29824 + t29826 + t29828;
  t29831 = -0.3*t29829;
  t29832 = t29790 + t29791 + t29792 + t29799 + t29820 + t29831;
  t29726 = -0.2000000000018*t7231*t12129*t26281;
  t29727 = -0.2000000000018*t12152*t29338;
  t29730 = 6.000000000054e-7*t12152*t29090;
  t29731 = t15348*t29446;
  t29733 = t14995*t29455;
  t29738 = t15226*t29465;
  t29740 = -1.*t15846*t29446;
  t29748 = -1.*t15804*t29455;
  t29749 = -1.*t15603*t29465;
  t29753 = t29740 + t29748 + t29749;
  t29762 = 0.2*t29753;
  t29763 = t15804*t29446;
  t29768 = t15894*t29455;
  t29769 = t15374*t29465;
  t29770 = t29763 + t29768 + t29769;
  t29775 = -0.099999*t29770;
  t29776 = t15603*t29446;
  t29777 = t15374*t29455;
  t29782 = t15395*t29465;
  t29784 = t29776 + t29777 + t29782;
  t29785 = -0.3*t29784;
  t29786 = t29726 + t29727 + t29730 + t29731 + t29733 + t29738 + t29762 + t29775 + t29785;
  t29848 = t15056*t24978*t12129*t12140;
  t29849 = 3.e-6*t12083*t24978*t12129*t12608;
  t29850 = t29848 + t29849;
  t29854 = t7231*t24978*t12129*t12608;
  t29855 = t25007 + t29854;
  t29859 = 3.e-6*t24978*t12129*t12140*t12152;
  t29861 = -1.*t24978*t12129*t12152*t12608;
  t29863 = t29859 + t29861;
  t29909 = -3.e-6*t12083*t24978*t12129*t12140;
  t29910 = 3.e-6*t24978*t12152*t12153;
  t29911 = t15056*t24978*t12129*t12608;
  t29912 = t29909 + t29910 + t29911;
  t29918 = -1.*t7231*t24978*t12129*t12140;
  t29919 = -1.*t24978*t12152*t12153;
  t29926 = t29918 + t29919 + t29849;
  t29932 = t24978*t12129*t12140*t12152;
  t29934 = -1.*t15357*t24978*t12153;
  t29935 = 3.e-6*t24978*t12129*t12152*t12608;
  t29942 = t29932 + t29934 + t29935;
  t30012 = 1.000000000009*t24978*t12152*t12153;
  t30013 = 3.e-6*t7231*t24978*t12129*t12608;
  t30014 = t25103 + t30012 + t30013;
  t30028 = -3.e-6*t24978*t12129*t12140*t12152;
  t30029 = 3.e-6*t7231*t24978*t12153;
  t30030 = -9.e-12*t24978*t12129*t12152*t12608;
  t30045 = t30028 + t30029 + t30030;
  t30048 = -1.*t7231*t24978*t12153;
  t30049 = t29932 + t30048 + t29935;
  t30119 = 3.e-6*t12083*t24978*t12140*t12153;
  t30120 = -1.*t15056*t24978*t12153*t12608;
  t30121 = t26726 + t30119 + t30120;
  t30123 = t7231*t24978*t12140*t12153;
  t30124 = -3.e-6*t12083*t24978*t12153*t12608;
  t30128 = t26963 + t30123 + t30124;
  t30131 = -1.*t24978*t12140*t12152*t12153;
  t30133 = -3.e-6*t24978*t12152*t12153*t12608;
  t30136 = t27025 + t30131 + t30133;
  t29842 = 6.000000000054e-7*t12083*t24978*t12129*t12140;
  t29846 = t12122*t24978*t12129*t12608;
  t29851 = t14995*t29850;
  t29856 = t15226*t29855;
  t29867 = t15348*t29863;
  t29868 = t15374*t29850;
  t29869 = t15395*t29855;
  t29870 = t15603*t29863;
  t29874 = t29868 + t29869 + t29870;
  t29875 = -0.3*t29874;
  t29876 = -1.*t15804*t29850;
  t29877 = -1.*t15603*t29855;
  t29880 = -1.*t15846*t29863;
  t29882 = t29876 + t29877 + t29880;
  t29886 = 0.2*t29882;
  t29889 = t15894*t29850;
  t29890 = t15374*t29855;
  t29891 = t15804*t29863;
  t29893 = t29889 + t29890 + t29891;
  t29894 = -0.099999*t29893;
  t29906 = t29842 + t29846 + t29851 + t29856 + t29867 + t29875 + t29886 + t29894;
  t30185 = t26910 + t26911;
  t30187 = t26985 + t26323;
  t30192 = t27026 + t27077;
  t30255 = t12140*t26281;
  t30256 = t24978*t12153*t12608;
  t30259 = t30255 + t30256;
  t30252 = t15056*t26823;
  t30262 = 3.e-6*t12083*t30259;
  t30266 = t30252 + t30262;
  t30273 = t7231*t30259;
  t30281 = t26910 + t30273;
  t30286 = -1.*t12152*t30259;
  t30287 = t27586 + t30286;
  t30339 = 3.e-6*t7231*t26823;
  t30344 = -1.*t7231*t30259;
  t30345 = t30339 + t30344;
  t30352 = -9.e-12*t12152*t26823;
  t30354 = 3.e-6*t12152*t30259;
  t30355 = t30352 + t30354;
  t29992 = 0.2000000000018*t24978*t12129*t12140*t12152;
  t29996 = -0.2000000000018*t7231*t24978*t12153;
  t30009 = 6.000000000054e-7*t24978*t12129*t12152*t12608;
  t30020 = t15348*t30014;
  t30047 = t14995*t30045;
  t30052 = t15226*t30049;
  t30053 = -1.*t15846*t30014;
  t30054 = -1.*t15804*t30045;
  t30058 = -1.*t15603*t30049;
  t30077 = t30053 + t30054 + t30058;
  t30078 = 0.2*t30077;
  t30083 = t15804*t30014;
  t30086 = t15894*t30045;
  t30088 = t15374*t30049;
  t30089 = t30083 + t30086 + t30088;
  t30091 = -0.099999*t30089;
  t30092 = t15603*t30014;
  t30094 = t15374*t30045;
  t30098 = t15395*t30049;
  t30102 = t30092 + t30094 + t30098;
  t30105 = -0.3*t30102;
  t30108 = t29992 + t29996 + t30009 + t30020 + t30047 + t30052 + t30078 + t30091 + t30105;
  t30421 = 3.e-6*t7231*t26293;
  t30422 = -9.e-12*t7231*t30259;
  t30429 = t26726 + t30421 + t30422;
  t30438 = -1.*t7231*t26293;
  t30439 = 3.e-6*t7231*t30259;
  t30440 = t26963 + t30438 + t30439;
  t30446 = -1.000000000009*t7231*t24978*t12129;
  t30448 = t12152*t26293;
  t30449 = -3.e-6*t12152*t30259;
  t30452 = t30446 + t30448 + t30449;
  t30337 = 6.000000000054e-7*t12152*t26823;
  t30338 = -0.2000000000018*t12152*t30259;
  t30346 = t15348*t30345;
  t30347 = t15226*t30287;
  t30359 = t14995*t30355;
  t30363 = t15804*t30345;
  t30368 = t15374*t30287;
  t30378 = t15894*t30355;
  t30380 = t30363 + t30368 + t30378;
  t30383 = -0.099999*t30380;
  t30384 = t15603*t30345;
  t30386 = t15395*t30287;
  t30390 = t15374*t30355;
  t30392 = t30384 + t30386 + t30390;
  t30396 = -0.3*t30392;
  t30400 = -1.*t15846*t30345;
  t30401 = -1.*t15603*t30287;
  t30402 = -1.*t15804*t30355;
  t30406 = t30400 + t30401 + t30402;
  t30407 = 0.2*t30406;
  t30408 = t30337 + t30338 + t30346 + t30347 + t30359 + t30383 + t30396 + t30407;
  t30504 = -1.000000000009*t24978*t12129*t12152;
  t30506 = t30504 + t30438 + t30439;
  t30508 = -3.e-6*t7231*t24978*t12129;
  t30513 = -9.e-12*t12152*t30259;
  t30516 = t30508 + t26390 + t30513;
  t30521 = t7231*t24978*t12129;
  t30524 = -1.*t12152*t26293;
  t30527 = t30521 + t30524 + t30354;
  t29913 = t17152*t29912;
  t29929 = t17244*t29926;
  t29943 = t17382*t29942;
  t29945 = -1.*t17471*t29912;
  t29946 = 1.000000000009*t13543*t29926;
  t29954 = -1.*t17696*t29942;
  t29955 = t29945 + t29946 + t29954;
  t29959 = 0.2*t29955;
  t29960 = -1.8e-11*t13543*t29912;
  t29961 = t17835*t29926;
  t29966 = t17471*t29942;
  t29969 = t29960 + t29961 + t29966;
  t29970 = -0.099999*t29969;
  t29971 = t17835*t29912;
  t29972 = t17891*t29926;
  t29975 = -1.000000000009*t13543*t29942;
  t29980 = t29971 + t29972 + t29975;
  t29981 = -0.3*t29980;
  t29988 = t29913 + t29929 + t29943 + t29959 + t29970 + t29981;
  t30269 = t17152*t30266;
  t30285 = t17244*t30281;
  t30289 = t17382*t30287;
  t30290 = -1.*t17471*t30266;
  t30294 = 1.000000000009*t13543*t30281;
  t30296 = -1.*t17696*t30287;
  t30298 = t30290 + t30294 + t30296;
  t30300 = 0.2*t30298;
  t30302 = -1.8e-11*t13543*t30266;
  t30303 = t17835*t30281;
  t30304 = t17471*t30287;
  t30305 = t30302 + t30303 + t30304;
  t30306 = -0.099999*t30305;
  t30307 = t17835*t30266;
  t30317 = t17891*t30281;
  t30319 = -1.000000000009*t13543*t30287;
  t30320 = t30307 + t30317 + t30319;
  t30333 = -0.3*t30320;
  t30334 = t30269 + t30285 + t30289 + t30300 + t30306 + t30333;
  t30565 = -3.e-6*t24978*t12129*t12152;
  t30572 = t15056*t30259;
  t30575 = t30565 + t26356 + t30572;
  t30580 = t24978*t12129*t12152;
  t30581 = t7231*t26293;
  t30583 = t30580 + t30581 + t30262;
  t30587 = t15357*t24978*t12129;
  t30596 = t30587 + t30524 + t30354;
  t30507 = t17382*t30506;
  t30519 = t17152*t30516;
  t30529 = t17244*t30527;
  t30530 = -1.000000000009*t13543*t30506;
  t30532 = t17835*t30516;
  t30533 = t17891*t30527;
  t30535 = t30530 + t30532 + t30533;
  t30536 = -0.3*t30535;
  t30537 = t17471*t30506;
  t30542 = -1.8e-11*t13543*t30516;
  t30543 = t17835*t30527;
  t30544 = t30537 + t30542 + t30543;
  t30546 = -0.099999*t30544;
  t30547 = -1.*t17696*t30506;
  t30548 = -1.*t17471*t30516;
  t30549 = 1.000000000009*t13543*t30527;
  t30550 = t30547 + t30548 + t30549;
  t30553 = 0.2*t30550;
  t30556 = t30507 + t30519 + t30529 + t30536 + t30546 + t30553;
  p_output1[0]=(t12147 + t12221 + t13098 + t14995*t15103 + t15226*t15336 + t15348*t15363 - 0.3*(t15103*t15374 + t15336*t15395 + t15363*t15603) + 0.2*(-1.*t15336*t15603 - 1.*t15103*t15804 - 1.*t15363*t15846) - 0.099999*(t15336*t15374 + t15363*t15804 + t15103*t15894))*var2[4] + t17117*var2[5] + t19758*var2[19] + t17905*var2[21];
  p_output1[1]=t17117*var2[4] + (t12147 + t13098 + t14995*t19804 + t15226*t19810 + t15348*t19812 - 0.3*(t15374*t19804 + t15395*t19810 + t15603*t19812) - 0.099999*(t15894*t19804 + t15374*t19810 + t15804*t19812) + 0.2*(-1.*t15804*t19804 - 1.*t15603*t19810 - 1.*t15846*t19812))*var2[5] + t21166*var2[19] + t20677*var2[21];
  p_output1[2]=t19758*var2[4] + t21166*var2[5] + (t12221 + t15226*t21452 + t14995*t21508 + t15348*t21542 - 0.3*(t15395*t21452 + t15374*t21508 + t15603*t21542) - 0.099999*(t15374*t21452 + t15894*t21508 + t15804*t21542) + 0.2*(-1.*t15603*t21452 - 1.*t15804*t21508 - 1.*t15846*t21542) - 0.2000000000018*t12129*t12140*t7231 - 6.000000000054e-7*t12129*t12608*t7231)*var2[19] + t21383*var2[21];
  p_output1[3]=t17905*var2[4] + t20677*var2[5] + t21383*var2[19] + (t22073*t22188 + t22409*t22439 + t22511*t22535 - 0.099999*(-1.8e-11*t13104*t22188 + t17471*t22439 + t17129*t22535) - 0.3*(t17471*t22188 - 1.000000000009*t13104*t22535 + t22439*t22589) + 0.2*(-1.*t17129*t22188 + 1.000000000009*t13104*t22439 - 1.*t22535*t22690))*var2[21];
  p_output1[4]=1.;
  p_output1[5]=0.2000000000018*t12129*t12152 - 1.*t12122*t12140*t12153 + 6.000000000054e-7*t12083*t12153*t12608 + t14995*t17182 + t15226*t17359 + t15348*t17433 - 0.3*(t15374*t17182 + t15395*t17359 + t15603*t17433) - 0.099999*(t15894*t17182 + t15374*t17359 + t15804*t17433) + 0.2*(-1.*t15804*t17182 - 1.*t15603*t17359 - 1.*t15846*t17433);
  p_output1[6]=-6.000000000054e-7*t12083*t12129*t12140 - 1.*t12122*t12129*t12608 + t14995*t20360 + t15226*t20389 + t15348*t20409 - 0.3*(t15374*t20360 + t15395*t20389 + t15603*t20409) - 0.099999*(t15894*t20360 + t15374*t20389 + t15804*t20409) + 0.2*(-1.*t15804*t20360 - 1.*t15603*t20389 - 1.*t15846*t20409);
  p_output1[7]=-0.2000000000018*t12129*t12140*t12152 - 6.000000000054e-7*t12129*t12152*t12608 + t15348*t21203 + t15226*t21218 + t14995*t21223 - 0.3*(t15603*t21203 + t15395*t21218 + t15374*t21223) + 0.2*(-1.*t15846*t21203 - 1.*t15603*t21218 - 1.*t15804*t21223) - 0.099999*(t15804*t21203 + t15374*t21218 + t15894*t21223) + 0.2000000000018*t12153*t7231;
  p_output1[8]=t17152*t22188 + t17244*t22439 + t17382*t22535 - 0.3*(t17835*t22188 + t17891*t22439 - 1.000000000009*t13543*t22535) - 0.099999*(-1.8e-11*t13543*t22188 + t17835*t22439 + t17471*t22535) + 0.2*(-1.*t17471*t22188 + 1.000000000009*t13543*t22439 - 1.*t17696*t22535);
  p_output1[9]=(t27829 + t27879 + t27909 + t14995*t27938 + t15226*t28018 + t15348*t28111 - 0.3*(t15374*t27938 + t15395*t28018 + t15603*t28111) - 0.099999*(t15894*t27938 + t15374*t28018 + t15804*t28111) + 0.2*(-1.*t15804*t27938 - 1.*t15603*t28018 - 1.*t15846*t28111))*var2[3] + t26276*var2[4] + t26717*var2[5] + t27814*var2[19] + t27434*var2[21];
  p_output1[10]=t26276*var2[3] + (-1.*t12122*t12140*t12153*t26281 + 6.000000000054e-7*t12083*t12153*t12608*t26281 + t27829 + t14995*t28895 + t15226*t28924 + t15348*t28976 - 0.3*(t15374*t28895 + t15395*t28924 + t15603*t28976) - 0.099999*(t15894*t28895 + t15374*t28924 + t15804*t28976) + 0.2*(-1.*t15804*t28895 - 1.*t15603*t28924 - 1.*t15846*t28976))*var2[4] + t28860*var2[5] + t28624*var2[19] + t28498*var2[21];
  p_output1[11]=t26717*var2[3] + t28860*var2[4] + (t27879 + t27909 + t14995*t29286 + t15226*t29292 + t15348*t29294 - 0.3*(t15374*t29286 + t15395*t29292 + t15603*t29294) - 0.099999*(t15894*t29286 + t15374*t29292 + t15804*t29294) + 0.2*(-1.*t15804*t29286 - 1.*t15603*t29292 - 1.*t15846*t29294))*var2[5] + t29283*var2[19] + t29202*var2[21];
  p_output1[12]=t27814*var2[3] + t28624*var2[4] + t29283*var2[5] + (t27829 + t14995*t29356 + t15226*t29369 + t15348*t29388 - 0.3*(t15374*t29356 + t15395*t29369 + t15603*t29388) - 0.099999*(t15894*t29356 + t15374*t29369 + t15804*t29388) + 0.2*(-1.*t15804*t29356 - 1.*t15603*t29369 - 1.*t15846*t29388) + 6.000000000054e-7*t29090*t7231 - 0.2000000000018*t29338*t7231)*var2[19] + t29503*var2[21];
  p_output1[13]=t27434*var2[3] + t28498*var2[4] + t29202*var2[5] + t29503*var2[19] + (t22073*t29528 + t22409*t29538 + t22511*t29542 - 0.3*(t17471*t29528 + t22589*t29538 - 1.000000000009*t13104*t29542) - 0.099999*(-1.8e-11*t13104*t29528 + t17471*t29538 + t17129*t29542) + 0.2*(-1.*t17129*t29528 + 1.000000000009*t13104*t29538 - 1.*t22690*t29542))*var2[21];
  p_output1[14]=1.;
  p_output1[15]=t29641;
  p_output1[16]=t29683;
  p_output1[17]=t29725;
  p_output1[18]=t29786;
  p_output1[19]=t29832;
  p_output1[20]=t29641*var2[3] + t29683*var2[4] + t29725*var2[5] + t29786*var2[19] + t29832*var2[21];
  p_output1[21]=t29683*var2[3] + (t12122*t12140*t12153*t24978 - 6.000000000054e-7*t12083*t12153*t12608*t24978 + t29606 + t14995*t30121 + t15226*t30128 + t15348*t30136 - 0.3*(t15374*t30121 + t15395*t30128 + t15603*t30136) - 0.099999*(t15894*t30121 + t15374*t30128 + t15804*t30136) + 0.2*(-1.*t15804*t30121 - 1.*t15603*t30128 - 1.*t15846*t30136))*var2[4] + t29906*var2[5] + t30108*var2[19] + t29988*var2[21];
  p_output1[22]=t29725*var2[3] + t29906*var2[4] + (t29609 + t29610 + t14995*t30185 + t15226*t30187 + t15348*t30192 - 0.3*(t15374*t30185 + t15395*t30187 + t15603*t30192) - 0.099999*(t15894*t30185 + t15374*t30187 + t15804*t30192) + 0.2*(-1.*t15804*t30185 - 1.*t15603*t30187 - 1.*t15846*t30192))*var2[5] + t30408*var2[19] + t30334*var2[21];
  p_output1[23]=t29786*var2[3] + t30108*var2[4] + t30408*var2[5] + (t29606 + t14995*t30429 + t15226*t30440 + t15348*t30452 - 0.3*(t15374*t30429 + t15395*t30440 + t15603*t30452) - 0.099999*(t15894*t30429 + t15374*t30440 + t15804*t30452) + 0.2*(-1.*t15804*t30429 - 1.*t15603*t30440 - 1.*t15846*t30452) - 0.2000000000018*t26293*t7231 + 6.000000000054e-7*t30259*t7231)*var2[19] + t30556*var2[21];
  p_output1[24]=t29832*var2[3] + t29988*var2[4] + t30334*var2[5] + t30556*var2[19] + (t22073*t30575 + t22409*t30583 + t22511*t30596 - 0.3*(t17471*t30575 + t22589*t30583 - 1.000000000009*t13104*t30596) - 0.099999*(-1.8e-11*t13104*t30575 + t17471*t30583 + t17129*t30596) + 0.2*(-1.*t17129*t30575 + 1.000000000009*t13104*t30583 - 1.*t22690*t30596))*var2[21];
  p_output1[25]=1.;
  p_output1[26]=-0.2000000000018*t12129*t12152*t26281 + 6.000000000054e-7*t12083*t29090 + t12122*t29338 + t14995*t29528 + t15226*t29538 + t15348*t29542 - 0.3*(t15374*t29528 + t15395*t29538 + t15603*t29542) - 0.099999*(t15894*t29528 + t15374*t29538 + t15804*t29542) + 0.2*(-1.*t15804*t29528 - 1.*t15603*t29538 - 1.*t15846*t29542);
  p_output1[27]=-1.*t12122*t12129*t12140*t24978 - 0.2000000000018*t12152*t12153*t24978 + 6.000000000054e-7*t12083*t12129*t12608*t24978 + t14995*t29912 + t15226*t29926 + t15348*t29942 - 0.3*(t15374*t29912 + t15395*t29926 + t15603*t29942) - 0.099999*(t15894*t29912 + t15374*t29926 + t15804*t29942) + 0.2*(-1.*t15804*t29912 - 1.*t15603*t29926 - 1.*t15846*t29942);
  p_output1[28]=6.000000000054e-7*t12083*t26823 + t12122*t30259 + t14995*t30266 + t15226*t30281 + t15348*t30287 - 0.3*(t15374*t30266 + t15395*t30281 + t15603*t30287) - 0.099999*(t15894*t30266 + t15374*t30281 + t15804*t30287) + 0.2*(-1.*t15804*t30266 - 1.*t15603*t30281 - 1.*t15846*t30287);
  p_output1[29]=-0.2000000000018*t12152*t26293 + 6.000000000054e-7*t12152*t30259 + t15348*t30506 + t14995*t30516 + t15226*t30527 - 0.099999*(t15804*t30506 + t15894*t30516 + t15374*t30527) - 0.3*(t15603*t30506 + t15374*t30516 + t15395*t30527) + 0.2*(-1.*t15846*t30506 - 1.*t15804*t30516 - 1.*t15603*t30527) + 0.2000000000018*t12129*t24978*t7231;
  p_output1[30]=t17152*t30575 + t17244*t30583 + t17382*t30596 - 0.3*(t17835*t30575 + t17891*t30583 - 1.000000000009*t13543*t30596) - 0.099999*(-1.8e-11*t13543*t30575 + t17835*t30583 + t17471*t30596) + 0.2*(-1.*t17471*t30575 + 1.000000000009*t13543*t30583 - 1.*t17696*t30596);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RightBackFoot_BackStance.hh"

namespace BackStance
{

void J_dh_RightBackFoot_BackStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
