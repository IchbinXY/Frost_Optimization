/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 22:42:01 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t468;
  double t491;
  double t536;
  double t3687;
  double t3753;
  double t3830;
  double t3849;
  double t3875;
  double t3882;
  double t3690;
  double t3692;
  double t3693;
  double t3703;
  double t3899;
  double t4044;
  double t4296;
  double t3884;
  double t3885;
  double t4313;
  double t4246;
  double t4249;
  double t4257;
  double t4259;
  double t4261;
  double t4271;
  double t4342;
  double t4345;
  double t4346;
  double t4355;
  double t4395;
  double t4396;
  double t4397;
  double t4398;
  double t4399;
  double t4400;
  double t4402;
  double t4415;
  double t4420;
  double t4406;
  double t4327;
  double t4404;
  double t4436;
  double t3569;
  double t3631;
  double t3678;
  double t3685;
  double t3710;
  double t3850;
  double t3894;
  double t4074;
  double t4157;
  double t4301;
  double t4333;
  double t4335;
  double t4337;
  double t4341;
  double t4374;
  double t4391;
  double t4392;
  double t4393;
  double t4394;
  double t4468;
  double t4474;
  double t4481;
  double t4408;
  double t4485;
  double t4501;
  double t4511;
  double t4520;
  double t4522;
  double t4523;
  double t4443;
  double t4447;
  double t4449;
  double t4702;
  double t4703;
  double t4686;
  double t4699;
  double t4729;
  double t4707;
  double t4708;
  double t4715;
  double t4719;
  double t4737;
  double t4744;
  double t4752;
  double t4770;
  double t4771;
  double t4772;
  double t4776;
  double t4781;
  double t4851;
  double t4788;
  double t4880;
  double t4881;
  double t4882;
  double t4885;
  double t4889;
  double t4897;
  double t4906;
  double t4909;
  double t4913;
  double t4914;
  double t3691;
  double t3707;
  double t4960;
  double t4974;
  double t4977;
  double t4700;
  double t4704;
  double t4705;
  double t4706;
  double t4728;
  double t4730;
  double t4731;
  double t4732;
  double t4733;
  double t4764;
  double t4765;
  double t4766;
  double t4768;
  double t4769;
  double t5079;
  double t5097;
  double t5103;
  double t5106;
  double t5115;
  double t4800;
  double t5117;
  double t5118;
  double t5120;
  double t4870;
  double t5190;
  double t5213;
  double t5217;
  double t5219;
  double t5220;
  double t5221;
  double t4466;
  double t4467;
  double t4484;
  double t4518;
  double t4524;
  double t4527;
  double t4528;
  double t4530;
  double t4531;
  double t4540;
  double t4551;
  double t4565;
  double t4573;
  double t4575;
  double t4577;
  double t4583;
  double t4588;
  double t4592;
  double t4596;
  double t4602;
  double t4610;
  double t5279;
  double t5280;
  double t5281;
  double t5283;
  double t5284;
  double t5286;
  double t5290;
  double t5291;
  double t5292;
  double t5294;
  double t3700;
  double t5330;
  double t5332;
  double t5340;
  double t5343;
  double t5346;
  double t5347;
  double t5185;
  double t5189;
  double t5218;
  double t5223;
  double t5226;
  double t5228;
  double t5229;
  double t5230;
  double t5247;
  double t5259;
  double t5263;
  double t5264;
  double t5266;
  double t5267;
  double t5268;
  double t5269;
  double t5270;
  double t5272;
  double t5273;
  double t5274;
  double t5275;
  double t4877;
  double t4878;
  double t4879;
  double t4886;
  double t4910;
  double t4915;
  double t4916;
  double t4918;
  double t4919;
  double t4920;
  double t4921;
  double t4922;
  double t4924;
  double t4925;
  double t4927;
  double t4928;
  double t4930;
  double t4932;
  double t4934;
  double t4935;
  double t4936;
  double t4939;
  double t5443;
  double t5396;
  double t5400;
  double t5426;
  double t5431;
  double t5452;
  double t5454;
  double t5455;
  double t5470;
  double t5474;
  double t5496;
  double t5282;
  double t5289;
  double t5295;
  double t5296;
  double t5299;
  double t5300;
  double t5301;
  double t5302;
  double t5303;
  double t5304;
  double t5305;
  double t5306;
  double t5307;
  double t5308;
  double t5309;
  double t5311;
  double t5317;
  double t5321;
  double t5322;
  double t5104;
  double t5116;
  double t5126;
  double t5127;
  double t5128;
  double t5129;
  double t5130;
  double t5132;
  double t5134;
  double t5136;
  double t5137;
  double t5146;
  double t5154;
  double t5168;
  double t5172;
  double t5174;
  double t5175;
  double t5177;
  double t5178;
  double t4725;
  double t4760;
  double t4780;
  double t4782;
  double t4784;
  double t4803;
  double t4806;
  double t4810;
  double t4827;
  double t4861;
  double t4864;
  double t4865;
  double t4868;
  double t4869;
  double t4871;
  double t4872;
  double t4873;
  double t4874;
  double t4875;
  double t6157;
  double t6164;
  double t6165;
  double t6183;
  double t6184;
  double t6199;
  double t6202;
  double t6203;
  double t6205;
  double t6207;
  double t6209;
  double t6210;
  double t6211;
  double t6344;
  double t6342;
  double t6345;
  double t6346;
  double t6349;
  double t6350;
  double t6352;
  double t6355;
  double t6365;
  double t6366;
  double t6377;
  double t6378;
  double t6379;
  double t6384;
  double t6387;
  double t6388;
  double t6515;
  double t6516;
  double t6517;
  double t6497;
  double t6523;
  double t6549;
  double t6550;
  double t6556;
  double t6565;
  double t6566;
  double t6572;
  double t6574;
  double t6578;
  double t6633;
  double t6681;
  double t6696;
  double t6709;
  double t6711;
  double t6713;
  double t6720;
  double t6722;
  double t6723;
  double t6731;
  double t6737;
  double t6873;
  double t6881;
  double t6882;
  double t6891;
  double t6893;
  double t6898;
  double t6935;
  double t6960;
  double t6962;
  double t6963;
  double t6967;
  double t6968;
  double t6970;
  double t6971;
  double t6975;
  double t6976;
  double t6989;
  double t6990;
  double t6158;
  double t6159;
  double t6162;
  double t6185;
  double t6206;
  double t6212;
  double t6214;
  double t6215;
  double t6218;
  double t6219;
  double t6220;
  double t6245;
  double t6253;
  double t6254;
  double t6255;
  double t6303;
  double t6328;
  double t6329;
  double t6334;
  double t6336;
  double t6337;
  double t6338;
  double t7079;
  double t7081;
  double t7083;
  double t7084;
  double t7086;
  double t7088;
  double t7089;
  double t7090;
  double t7093;
  double t7094;
  double t7095;
  double t7096;
  double t7226;
  double t7227;
  double t7229;
  double t7231;
  double t7234;
  double t7235;
  double t7241;
  double t7277;
  double t7288;
  double t7292;
  double t7330;
  double t7332;
  double t7334;
  double t7336;
  double t7342;
  double t7375;
  double t7376;
  double t7378;
  double t6870;
  double t7672;
  double t7701;
  double t7702;
  double t7707;
  double t7712;
  double t7716;
  double t7719;
  double t7720;
  double t7721;
  double t7327;
  double t7329;
  double t7333;
  double t7374;
  double t7380;
  double t7381;
  double t7384;
  double t7385;
  double t7387;
  double t7389;
  double t7392;
  double t7393;
  double t7395;
  double t7464;
  double t7470;
  double t7492;
  double t7493;
  double t7496;
  double t7497;
  double t7499;
  double t7503;
  double t6348;
  double t6354;
  double t6372;
  double t6381;
  double t6389;
  double t6392;
  double t6393;
  double t6431;
  double t6437;
  double t6439;
  double t6440;
  double t6442;
  double t6446;
  double t6447;
  double t6463;
  double t6465;
  double t6468;
  double t6472;
  double t6475;
  double t6477;
  double t6482;
  double t7821;
  double t7829;
  double t7849;
  double t7819;
  double t7878;
  double t7880;
  double t7884;
  double t7885;
  double t7911;
  double t7912;
  double t7913;
  double t8202;
  double t8204;
  double t8205;
  double t8248;
  double t8292;
  double t8299;
  double t6885;
  double t6900;
  double t8415;
  double t8417;
  double t8420;
  double t7215;
  double t7219;
  double t7223;
  double t7232;
  double t7239;
  double t7293;
  double t7294;
  double t7295;
  double t7296;
  double t7297;
  double t7298;
  double t7299;
  double t7300;
  double t7301;
  double t7304;
  double t7305;
  double t7306;
  double t7307;
  double t7310;
  double t7319;
  double t7321;
  double t7322;
  double t6676;
  double t6678;
  double t6680;
  double t6712;
  double t6724;
  double t6738;
  double t6740;
  double t6745;
  double t6746;
  double t6751;
  double t6754;
  double t6755;
  double t6761;
  double t6764;
  double t6766;
  double t6769;
  double t6771;
  double t6772;
  double t6819;
  double t6829;
  double t6844;
  double t6849;
  double t8603;
  double t8604;
  double t8606;
  double t8618;
  double t8620;
  double t8623;
  double t8626;
  double t8627;
  double t8628;
  double t8741;
  double t8743;
  double t8744;
  double t8746;
  double t8200;
  double t8201;
  double t8206;
  double t8207;
  double t8301;
  double t8371;
  double t8372;
  double t8376;
  double t8382;
  double t8388;
  double t8398;
  double t8399;
  double t8400;
  double t8401;
  double t8402;
  double t8403;
  double t8404;
  double t8405;
  double t8409;
  double t8410;
  double t8413;
  double t8931;
  double t9021;
  double t9639;
  double t11070;
  double t11987;
  double t12081;
  double t12112;
  double t12113;
  double t12116;
  double t7085;
  double t7092;
  double t7097;
  double t7100;
  double t7101;
  double t7102;
  double t7103;
  double t7104;
  double t7105;
  double t7107;
  double t7109;
  double t7125;
  double t7131;
  double t7144;
  double t7153;
  double t7157;
  double t7162;
  double t7180;
  double t7209;
  double t6554;
  double t6567;
  double t6634;
  double t6644;
  double t6652;
  double t6654;
  double t6657;
  double t6659;
  double t6660;
  double t6662;
  double t6663;
  double t6664;
  double t6665;
  double t6666;
  double t6667;
  double t6668;
  double t6669;
  double t6670;
  double t6674;
  double t7883;
  double t7888;
  double t8006;
  double t8078;
  double t8118;
  double t8172;
  double t8178;
  double t8186;
  double t8187;
  double t8189;
  double t8190;
  double t8191;
  double t8192;
  double t8193;
  double t8194;
  double t8195;
  double t8196;
  double t8197;
  double t8198;
  double t5379;
  double t5380;
  double t5382;
  double t5391;
  double t5440;
  double t5445;
  double t5446;
  double t5447;
  double t5458;
  double t5462;
  double t5463;
  double t5465;
  double t5469;
  double t12358;
  double t12372;
  double t12374;
  double t12379;
  double t5505;
  double t12385;
  double t12386;
  double t12388;
  double t12398;
  double t12399;
  double t5672;
  double t9585;
  double t12108;
  double t12121;
  double t12126;
  double t12130;
  double t12134;
  double t12135;
  double t12136;
  double t12137;
  double t12141;
  double t12145;
  double t12148;
  double t12152;
  double t12155;
  double t12157;
  double t12167;
  double t12182;
  double t12189;
  double t12214;
  double t13905;
  double t13908;
  double t13910;
  double t13913;
  double t13915;
  double t13918;
  double t13920;
  double t13923;
  double t13925;
  double t13927;
  double t13928;
  double t13930;
  double t13933;
  double t13936;
  double t13937;
  double t13938;
  double t13939;
  double t13940;
  double t13943;
  double t13944;
  double t13948;
  double t13949;
  double t13051;
  double t13053;
  double t13088;
  double t13089;
  double t13121;
  double t13124;
  double t13126;
  double t13127;
  double t13133;
  double t13255;
  double t13562;
  double t13567;
  double t13733;
  double t13757;
  double t13841;
  double t13849;
  double t13852;
  double t13886;
  double t13887;
  double t13898;
  double t13901;
  double t13903;
  double t13951;
  double t13952;
  double t13955;
  double t13956;
  double t13959;
  double t13960;
  double t13961;
  double t13963;
  double t13964;
  double t13967;
  double t13968;
  double t13976;
  double t13979;
  double t13980;
  double t13981;
  double t13983;
  double t13984;
  double t13999;
  double t14000;
  double t14001;
  double t14002;
  double t14062;
  double t14092;
  double t14111;
  double t14115;
  double t14116;
  double t14118;
  double t14119;
  double t14120;
  double t14121;
  double t14122;
  double t14123;
  double t14124;
  double t14125;
  double t14126;
  double t14127;
  double t14128;
  double t14129;
  double t14130;
  double t14131;
  double t14006;
  double t14010;
  double t14014;
  double t14015;
  double t14016;
  double t14017;
  double t14018;
  double t14019;
  double t14021;
  double t14022;
  double t14023;
  double t14025;
  double t14026;
  double t14027;
  double t14029;
  double t14030;
  double t14032;
  double t14040;
  double t14057;
  double t14059;
  double t14060;
  double t14061;
  double t14159;
  double t14165;
  double t14168;
  double t14180;
  double t14182;
  double t14185;
  double t14186;
  double t14190;
  double t14216;
  double t14217;
  double t14218;
  double t14219;
  double t14222;
  double t14223;
  double t14225;
  double t14228;
  double t14229;
  double t14230;
  double t14231;
  double t14324;
  double t14329;
  double t14330;
  double t14339;
  double t14340;
  double t14342;
  double t14344;
  double t14346;
  double t14347;
  double t14388;
  double t14389;
  double t14390;
  double t14393;
  double t14394;
  double t14395;
  double t14397;
  double t14398;
  double t14399;
  double t14150;
  double t14153;
  double t14178;
  double t14183;
  double t14192;
  double t14197;
  double t14198;
  double t14199;
  double t14200;
  double t14201;
  double t14202;
  double t14203;
  double t14204;
  double t14205;
  double t14206;
  double t14207;
  double t14208;
  double t14209;
  double t14210;
  double t14211;
  double t14212;
  double t14438;
  double t14441;
  double t14443;
  double t14492;
  double t14493;
  double t14494;
  double t14491;
  double t14495;
  double t14496;
  double t14498;
  double t14499;
  double t14501;
  double t14502;
  double t14533;
  double t14534;
  double t14535;
  double t14538;
  double t14539;
  double t14540;
  double t14295;
  double t14297;
  double t14321;
  double t14338;
  double t14345;
  double t14348;
  double t14351;
  double t14352;
  double t14353;
  double t14354;
  double t14355;
  double t14356;
  double t14357;
  double t14358;
  double t14359;
  double t14361;
  double t14365;
  double t14368;
  double t14369;
  double t14372;
  double t14373;
  double t14377;
  double t14565;
  double t14566;
  double t14567;
  double t14569;
  double t14570;
  double t14571;
  double t14573;
  double t14574;
  double t14575;
  double t14576;
  double t14531;
  double t14532;
  double t14536;
  double t14537;
  double t14541;
  double t14542;
  double t14543;
  double t14544;
  double t14545;
  double t14546;
  double t14547;
  double t14548;
  double t14549;
  double t14550;
  double t14551;
  double t14552;
  double t14553;
  double t14554;
  double t14555;
  double t14556;
  double t14557;
  double t14603;
  double t14604;
  double t14606;
  double t14607;
  double t14608;
  double t14610;
  double t14611;
  double t14617;
  double t14220;
  double t14226;
  double t14232;
  double t14233;
  double t14234;
  double t14235;
  double t14236;
  double t14237;
  double t14238;
  double t14239;
  double t14240;
  double t14241;
  double t14242;
  double t14277;
  double t14280;
  double t14284;
  double t14285;
  double t14289;
  double t14290;
  double t14497;
  double t14500;
  double t14503;
  double t14504;
  double t14505;
  double t14506;
  double t14507;
  double t14509;
  double t14511;
  double t14512;
  double t14513;
  double t14515;
  double t14522;
  double t14523;
  double t14525;
  double t14526;
  double t14527;
  double t14528;
  double t14529;
  double t14641;
  double t14642;
  double t14645;
  double t14647;
  double t14648;
  double t14649;
  double t14651;
  double t14652;
  double t14605;
  double t14609;
  double t14618;
  double t14619;
  double t14620;
  double t14621;
  double t14622;
  double t14623;
  double t14624;
  double t14625;
  double t14626;
  double t14628;
  double t14629;
  double t14630;
  double t14631;
  double t14632;
  double t14633;
  double t14634;
  double t14635;
  t468 = Cos(var1[19]);
  t491 = -1.*t468;
  t536 = 1. + t491;
  t3687 = Cos(var1[4]);
  t3753 = Cos(var1[21]);
  t3830 = -1.*t3753;
  t3849 = 1. + t3830;
  t3875 = -3.e-6*t3849;
  t3882 = Sin(var1[21]);
  t3690 = Cos(var1[5]);
  t3692 = Sin(var1[19]);
  t3693 = Sin(var1[4]);
  t3703 = Sin(var1[5]);
  t3899 = 3.e-6*t3882;
  t4044 = t3875 + t3899;
  t4296 = 3.e-13*var1[21];
  t3884 = -3.e-6*t3882;
  t3885 = t3875 + t3884;
  t4313 = -9.e-12*t3849;
  t4246 = -3.e-6*t536*t3687*t3690;
  t4249 = 3.e-6*t3692*t3693;
  t4257 = -9.e-12*t536;
  t4259 = 1. + t4257;
  t4261 = t4259*t3687*t3703;
  t4271 = t4246 + t4249 + t4261;
  t4342 = -1.*t468*t3687*t3690;
  t4345 = -1.*t3692*t3693;
  t4346 = 3.e-6*t536*t3687*t3703;
  t4355 = t4342 + t4345 + t4346;
  t4395 = t3687*t3690*t3692;
  t4396 = -1.000000000009*t536;
  t4397 = 1. + t4396;
  t4398 = -1.*t4397*t3693;
  t4399 = 3.e-6*t3687*t3692*t3703;
  t4400 = t4395 + t4398 + t4399;
  t4402 = 3.e-6*t3849;
  t4415 = -1.000000000009*t3849;
  t4420 = 1. + t4415;
  t4406 = 9.e-12*t3849;
  t4327 = -1.*t3882;
  t4404 = t4402 + t3884;
  t4436 = t4402 + t3899;
  t3569 = -1.8e-12*t536;
  t3631 = -1. + t468;
  t3678 = 0.2*t3631;
  t3685 = t3569 + t3678;
  t3710 = 1.e-7*var1[21];
  t3850 = 5.4e-18*t3849;
  t3894 = -0.200000000003*t3885;
  t4074 = 0.100000000003*t4044;
  t4157 = t3710 + t3850 + t3894 + t4074;
  t4301 = -0.2000000000048*t3849;
  t4333 = t4313 + t4327;
  t4335 = 0.100000000003*t4333;
  t4337 = 3.e-7*t4044;
  t4341 = t4296 + t4301 + t4335 + t4337;
  t4374 = 0.1000000000039*t3849;
  t4391 = 3.e-7*t3885;
  t4392 = t4313 + t3882;
  t4393 = -0.200000000003*t4392;
  t4394 = t4296 + t4374 + t4391 + t4393;
  t4468 = t4259*t3690*t3693;
  t4474 = 3.e-6*t536*t3693*t3703;
  t4481 = t4468 + t4474;
  t4408 = t4406 + t3882;
  t4485 = 3.e-6*t536*t3690*t3693;
  t4501 = t468*t3693*t3703;
  t4511 = t4485 + t4501;
  t4520 = 3.e-6*t3690*t3692*t3693;
  t4522 = -1.*t3692*t3693*t3703;
  t4523 = t4520 + t4522;
  t4443 = t4406 + t4327;
  t4447 = -1.8e-11*t3849;
  t4449 = 1. + t4447;
  t4702 = 3.e-6*t3753;
  t4703 = t4702 + t3884;
  t4686 = -3.e-6*t3753;
  t4699 = t4686 + t3884;
  t4729 = -9.e-12*t3882;
  t4707 = -3.e-6*t3687*t3692;
  t4708 = -3.e-6*t536*t3690*t3693;
  t4715 = t4259*t3693*t3703;
  t4719 = t4707 + t4708 + t4715;
  t4737 = t3687*t3692;
  t4744 = -1.*t468*t3690*t3693;
  t4752 = t4737 + t4744 + t4474;
  t4770 = t4397*t3687;
  t4771 = t3690*t3692*t3693;
  t4772 = 3.e-6*t3692*t3693*t3703;
  t4776 = t4770 + t4771 + t4772;
  t4781 = t4702 + t3899;
  t4851 = t4686 + t3899;
  t4788 = 9.e-12*t3882;
  t4880 = -1.000000000009*t3687*t3692;
  t4881 = t468*t3690*t3693;
  t4882 = 3.e-6*t468*t3693*t3703;
  t4885 = t4880 + t4881 + t4882;
  t4889 = -3.e-6*t468*t3687;
  t4897 = -3.e-6*t3690*t3692*t3693;
  t4906 = -9.e-12*t3692*t3693*t3703;
  t4909 = t4889 + t4897 + t4906;
  t4913 = t468*t3687;
  t4914 = t4913 + t4771 + t4772;
  t3691 = -1.*t3685*t3687*t3690;
  t3707 = 6.000000000054e-7*t536*t3687*t3703;
  t4960 = t4246 + t4261;
  t4974 = t4342 + t4346;
  t4977 = t4395 + t4399;
  t4700 = -0.200000000003*t4699;
  t4704 = 0.100000000003*t4703;
  t4705 = 5.4e-18*t3882;
  t4706 = 1.e-7 + t4700 + t4704 + t4705;
  t4728 = 3.e-7*t4703;
  t4730 = t3830 + t4729;
  t4731 = 0.100000000003*t4730;
  t4732 = -0.2000000000048*t3882;
  t4733 = 3.e-13 + t4728 + t4731 + t4732;
  t4764 = 3.e-7*t4699;
  t4765 = t3753 + t4729;
  t4766 = -0.200000000003*t4765;
  t4768 = 0.1000000000039*t3882;
  t4769 = 3.e-13 + t4764 + t4766 + t4768;
  t5079 = -1.*t4259*t3687*t3690;
  t5097 = -3.e-6*t536*t3687*t3703;
  t5103 = t5079 + t5097;
  t5106 = -1.*t468*t3687*t3703;
  t5115 = t4246 + t5106;
  t4800 = t3830 + t4788;
  t5117 = -3.e-6*t3687*t3690*t3692;
  t5118 = t3687*t3692*t3703;
  t5120 = t5117 + t5118;
  t4870 = t3753 + t4788;
  t5190 = -3.e-6*t468*t3687*t3690;
  t5213 = t468*t3687*t3703;
  t5217 = t5190 + t5213;
  t5219 = 9.e-12*t3687*t3690*t3692;
  t5220 = -3.e-6*t3687*t3692*t3703;
  t5221 = t5219 + t5220;
  t4466 = 6.000000000054e-7*t536*t3690*t3693;
  t4467 = t3685*t3693*t3703;
  t4484 = t4157*t4481;
  t4518 = t4341*t4511;
  t4524 = t4394*t4523;
  t4527 = t4404*t4481;
  t4528 = t4408*t4511;
  t4530 = t4420*t4523;
  t4531 = t4527 + t4528 + t4530;
  t4540 = -0.3*t4531;
  t4551 = -1.*t4436*t4481;
  t4565 = -1.*t4420*t4511;
  t4573 = -1.*t4443*t4523;
  t4575 = t4551 + t4565 + t4573;
  t4577 = 0.2*t4575;
  t4583 = t4449*t4481;
  t4588 = t4404*t4511;
  t4592 = t4436*t4523;
  t4596 = t4583 + t4588 + t4592;
  t4602 = -0.099999*t4596;
  t4610 = t4466 + t4467 + t4484 + t4518 + t4524 + t4540 + t4577 + t4602;
  t5279 = -1.000000000009*t3692*t3693;
  t5280 = -3.e-6*t468*t3687*t3703;
  t5281 = t4342 + t5279 + t5280;
  t5283 = -1.*t3687*t3690*t3692;
  t5284 = t468*t3693;
  t5286 = t5283 + t5284 + t5220;
  t5290 = 3.e-6*t3687*t3690*t3692;
  t5291 = -3.e-6*t468*t3693;
  t5292 = 9.e-12*t3687*t3692*t3703;
  t5294 = t5290 + t5291 + t5292;
  t3700 = -0.2000000000018*t3692*t3693;
  t5330 = t4342 + t4345 + t5280;
  t5332 = 3.e-6*t468*t3687*t3690;
  t5340 = 9.e-12*t468*t3687*t3703;
  t5343 = t5332 + t4249 + t5340;
  t5346 = -1.000000000009*t468*t3693;
  t5347 = t4395 + t5346 + t4399;
  t5185 = -6.000000000054e-7*t3687*t3690*t3692;
  t5189 = 0.2000000000018*t3687*t3692*t3703;
  t5218 = t4394*t5217;
  t5223 = t4157*t5221;
  t5226 = t4341*t5120;
  t5228 = -1.*t4443*t5217;
  t5229 = -1.*t4436*t5221;
  t5230 = -1.*t4420*t5120;
  t5247 = t5228 + t5229 + t5230;
  t5259 = 0.2*t5247;
  t5263 = t4436*t5217;
  t5264 = t4449*t5221;
  t5266 = t4404*t5120;
  t5267 = t5263 + t5264 + t5266;
  t5268 = -0.099999*t5267;
  t5269 = t4420*t5217;
  t5270 = t4404*t5221;
  t5272 = t4408*t5120;
  t5273 = t5269 + t5270 + t5272;
  t5274 = -0.3*t5273;
  t5275 = t5185 + t5189 + t5218 + t5223 + t5226 + t5259 + t5268 + t5274;
  t4877 = 0.2000000000018*t468*t3687;
  t4878 = 0.2000000000018*t3690*t3692*t3693;
  t4879 = 6.000000000054e-7*t3692*t3693*t3703;
  t4886 = t4394*t4885;
  t4910 = t4157*t4909;
  t4915 = t4341*t4914;
  t4916 = -1.*t4443*t4885;
  t4918 = -1.*t4436*t4909;
  t4919 = -1.*t4420*t4914;
  t4920 = t4916 + t4918 + t4919;
  t4921 = 0.2*t4920;
  t4922 = t4436*t4885;
  t4924 = t4449*t4909;
  t4925 = t4404*t4914;
  t4927 = t4922 + t4924 + t4925;
  t4928 = -0.099999*t4927;
  t4930 = t4420*t4885;
  t4932 = t4404*t4909;
  t4934 = t4408*t4914;
  t4935 = t4930 + t4932 + t4934;
  t4936 = -0.3*t4935;
  t4939 = t4877 + t4878 + t4879 + t4886 + t4910 + t4915 + t4921 + t4928 + t4936;
  t5443 = -9.e-12*t3753;
  t5396 = 3.e-6*t536*t3687*t3690;
  t5400 = -3.e-6*t3692*t3693;
  t5426 = -1.*t4259*t3687*t3703;
  t5431 = t5396 + t5400 + t5426;
  t5452 = t468*t3687*t3690;
  t5454 = t3692*t3693;
  t5455 = t5452 + t5454 + t5097;
  t5470 = t4397*t3693;
  t5474 = t5283 + t5470 + t5220;
  t5496 = 9.e-12*t3753;
  t5282 = t4769*t5281;
  t5289 = t4733*t5286;
  t5295 = t4706*t5294;
  t5296 = -1.000000000009*t3882*t5281;
  t5299 = t4870*t5286;
  t5300 = t4851*t5294;
  t5301 = t5296 + t5299 + t5300;
  t5302 = -0.3*t5301;
  t5303 = -1.*t4800*t5281;
  t5304 = 1.000000000009*t3882*t5286;
  t5305 = -1.*t4781*t5294;
  t5306 = t5303 + t5304 + t5305;
  t5307 = 0.2*t5306;
  t5308 = t4781*t5281;
  t5309 = t4851*t5286;
  t5311 = -1.8e-11*t3882*t5294;
  t5317 = t5308 + t5309 + t5311;
  t5321 = -0.099999*t5317;
  t5322 = t5282 + t5289 + t5295 + t5302 + t5307 + t5321;
  t5104 = t4706*t5103;
  t5116 = t4733*t5115;
  t5126 = t4769*t5120;
  t5127 = -1.*t4781*t5103;
  t5128 = 1.000000000009*t3882*t5115;
  t5129 = -1.*t4800*t5120;
  t5130 = t5127 + t5128 + t5129;
  t5132 = 0.2*t5130;
  t5134 = -1.8e-11*t3882*t5103;
  t5136 = t4851*t5115;
  t5137 = t4781*t5120;
  t5146 = t5134 + t5136 + t5137;
  t5154 = -0.099999*t5146;
  t5168 = t4851*t5103;
  t5172 = t4870*t5115;
  t5174 = -1.000000000009*t3882*t5120;
  t5175 = t5168 + t5172 + t5174;
  t5177 = -0.3*t5175;
  t5178 = t5104 + t5116 + t5126 + t5132 + t5154 + t5177;
  t4725 = t4706*t4719;
  t4760 = t4733*t4752;
  t4780 = t4769*t4776;
  t4782 = -1.*t4781*t4719;
  t4784 = 1.000000000009*t3882*t4752;
  t4803 = -1.*t4800*t4776;
  t4806 = t4782 + t4784 + t4803;
  t4810 = 0.2*t4806;
  t4827 = -1.8e-11*t3882*t4719;
  t4861 = t4851*t4752;
  t4864 = t4781*t4776;
  t4865 = t4827 + t4861 + t4864;
  t4868 = -0.099999*t4865;
  t4869 = t4851*t4719;
  t4871 = t4870*t4752;
  t4872 = -1.000000000009*t3882*t4776;
  t4873 = t4869 + t4871 + t4872;
  t4874 = -0.3*t4873;
  t4875 = t4725 + t4760 + t4780 + t4810 + t4868 + t4874;
  t6157 = Cos(var1[3]);
  t6164 = 3.e-6*t536*t6157*t3687*t3690;
  t6165 = -3.e-6*t6157*t3692*t3693;
  t6183 = -1.*t4259*t6157*t3687*t3703;
  t6184 = t6164 + t6165 + t6183;
  t6199 = t468*t6157*t3687*t3690;
  t6202 = t6157*t3692*t3693;
  t6203 = -3.e-6*t536*t6157*t3687*t3703;
  t6205 = t6199 + t6202 + t6203;
  t6207 = -1.*t6157*t3687*t3690*t3692;
  t6209 = t4397*t6157*t3693;
  t6210 = -3.e-6*t6157*t3687*t3692*t3703;
  t6211 = t6207 + t6209 + t6210;
  t6344 = Sin(var1[3]);
  t6342 = -1.*t6157*t3690*t3693;
  t6345 = t6344*t3703;
  t6346 = t6342 + t6345;
  t6349 = -1.*t3690*t6344;
  t6350 = -1.*t6157*t3693*t3703;
  t6352 = t6349 + t6350;
  t6355 = t4259*t6346;
  t6365 = 3.e-6*t536*t6352;
  t6366 = t6355 + t6365;
  t6377 = 3.e-6*t536*t6346;
  t6378 = t468*t6352;
  t6379 = t6377 + t6378;
  t6384 = 3.e-6*t3692*t6346;
  t6387 = -1.*t3692*t6352;
  t6388 = t6384 + t6387;
  t6515 = t6157*t3690*t3693;
  t6516 = -1.*t6344*t3703;
  t6517 = t6515 + t6516;
  t6497 = 3.e-6*t6157*t3687*t3692;
  t6523 = 3.e-6*t536*t6517;
  t6549 = t4259*t6352;
  t6550 = t6497 + t6523 + t6549;
  t6556 = -1.*t6157*t3687*t3692;
  t6565 = t468*t6517;
  t6566 = t6556 + t6565 + t6365;
  t6572 = -1.*t4397*t6157*t3687;
  t6574 = -1.*t3692*t6517;
  t6578 = 3.e-6*t3692*t6352;
  t6633 = t6572 + t6574 + t6578;
  t6681 = 1.000000000009*t6157*t3687*t3692;
  t6696 = -1.*t468*t6517;
  t6709 = 3.e-6*t468*t6352;
  t6711 = t6681 + t6696 + t6709;
  t6713 = 3.e-6*t468*t6157*t3687;
  t6720 = 3.e-6*t3692*t6517;
  t6722 = -9.e-12*t3692*t6352;
  t6723 = t6713 + t6720 + t6722;
  t6731 = -1.*t468*t6157*t3687;
  t6737 = t6731 + t6574 + t6578;
  t6873 = -1.*t3690*t6344*t3693;
  t6881 = -1.*t6157*t3703;
  t6882 = t6873 + t6881;
  t6891 = -1.*t6157*t3690;
  t6893 = t6344*t3693*t3703;
  t6898 = t6891 + t6893;
  t6935 = -3.e-6*t3687*t3692*t6344;
  t6960 = 3.e-6*t536*t6882;
  t6962 = t4259*t6898;
  t6963 = t6935 + t6960 + t6962;
  t6967 = t3687*t3692*t6344;
  t6968 = t468*t6882;
  t6970 = 3.e-6*t536*t6898;
  t6971 = t6967 + t6968 + t6970;
  t6975 = t4397*t3687*t6344;
  t6976 = -1.*t3692*t6882;
  t6989 = 3.e-6*t3692*t6898;
  t6990 = t6975 + t6976 + t6989;
  t6158 = t3685*t6157*t3687*t3690;
  t6159 = 0.2000000000018*t6157*t3692*t3693;
  t6162 = -6.000000000054e-7*t536*t6157*t3687*t3703;
  t6185 = t4157*t6184;
  t6206 = t4341*t6205;
  t6212 = t4394*t6211;
  t6214 = t4404*t6184;
  t6215 = t4408*t6205;
  t6218 = t4420*t6211;
  t6219 = t6214 + t6215 + t6218;
  t6220 = -0.3*t6219;
  t6245 = -1.*t4436*t6184;
  t6253 = -1.*t4420*t6205;
  t6254 = -1.*t4443*t6211;
  t6255 = t6245 + t6253 + t6254;
  t6303 = 0.2*t6255;
  t6328 = t4449*t6184;
  t6329 = t4404*t6205;
  t6334 = t4436*t6211;
  t6336 = t6328 + t6329 + t6334;
  t6337 = -0.099999*t6336;
  t6338 = t6158 + t6159 + t6162 + t6185 + t6206 + t6212 + t6220 + t6303 + t6337;
  t7079 = 3.e-6*t536*t3687*t3690*t6344;
  t7081 = -3.e-6*t3692*t6344*t3693;
  t7083 = -1.*t4259*t3687*t6344*t3703;
  t7084 = t7079 + t7081 + t7083;
  t7086 = t468*t3687*t3690*t6344;
  t7088 = t3692*t6344*t3693;
  t7089 = -3.e-6*t536*t3687*t6344*t3703;
  t7090 = t7086 + t7088 + t7089;
  t7093 = -1.*t3687*t3690*t3692*t6344;
  t7094 = t4397*t6344*t3693;
  t7095 = -3.e-6*t3687*t3692*t6344*t3703;
  t7096 = t7093 + t7094 + t7095;
  t7226 = -1.*t468*t3687*t3690*t6344;
  t7227 = -1.000000000009*t3692*t6344*t3693;
  t7229 = -3.e-6*t468*t3687*t6344*t3703;
  t7231 = t7226 + t7227 + t7229;
  t7234 = t468*t6344*t3693;
  t7235 = t7093 + t7234 + t7095;
  t7241 = 3.e-6*t3687*t3690*t3692*t6344;
  t7277 = -3.e-6*t468*t6344*t3693;
  t7288 = 9.e-12*t3687*t3692*t6344*t3703;
  t7292 = t7241 + t7277 + t7288;
  t7330 = -1.*t4259*t3687*t3690*t6344;
  t7332 = t7330 + t7089;
  t7334 = -3.e-6*t536*t3687*t3690*t6344;
  t7336 = -1.*t468*t3687*t6344*t3703;
  t7342 = t7334 + t7336;
  t7375 = -3.e-6*t3687*t3690*t3692*t6344;
  t7376 = t3687*t3692*t6344*t3703;
  t7378 = t7375 + t7376;
  t6870 = 0.2000000000018*t3687*t3692*t6344;
  t7672 = -3.e-6*t536*t3690*t6344*t3693;
  t7701 = t4259*t6344*t3693*t3703;
  t7702 = t6935 + t7672 + t7701;
  t7707 = -1.*t468*t3690*t6344*t3693;
  t7712 = 3.e-6*t536*t6344*t3693*t3703;
  t7716 = t6967 + t7707 + t7712;
  t7719 = t3690*t3692*t6344*t3693;
  t7720 = 3.e-6*t3692*t6344*t3693*t3703;
  t7721 = t6975 + t7719 + t7720;
  t7327 = -6.000000000054e-7*t536*t3687*t3690*t6344;
  t7329 = -1.*t3685*t3687*t6344*t3703;
  t7333 = t4157*t7332;
  t7374 = t4341*t7342;
  t7380 = t4394*t7378;
  t7381 = t4404*t7332;
  t7384 = t4408*t7342;
  t7385 = t4420*t7378;
  t7387 = t7381 + t7384 + t7385;
  t7389 = -0.3*t7387;
  t7392 = -1.*t4436*t7332;
  t7393 = -1.*t4420*t7342;
  t7395 = -1.*t4443*t7378;
  t7464 = t7392 + t7393 + t7395;
  t7470 = 0.2*t7464;
  t7492 = t4449*t7332;
  t7493 = t4404*t7342;
  t7496 = t4436*t7378;
  t7497 = t7492 + t7493 + t7496;
  t7499 = -0.099999*t7497;
  t7503 = t7327 + t7329 + t7333 + t7374 + t7380 + t7389 + t7470 + t7499;
  t6348 = 6.000000000054e-7*t536*t6346;
  t6354 = t3685*t6352;
  t6372 = t4157*t6366;
  t6381 = t4341*t6379;
  t6389 = t4394*t6388;
  t6392 = t4404*t6366;
  t6393 = t4408*t6379;
  t6431 = t4420*t6388;
  t6437 = t6392 + t6393 + t6431;
  t6439 = -0.3*t6437;
  t6440 = -1.*t4436*t6366;
  t6442 = -1.*t4420*t6379;
  t6446 = -1.*t4443*t6388;
  t6447 = t6440 + t6442 + t6446;
  t6463 = 0.2*t6447;
  t6465 = t4449*t6366;
  t6468 = t4404*t6379;
  t6472 = t4436*t6388;
  t6475 = t6465 + t6468 + t6472;
  t6477 = -0.099999*t6475;
  t6482 = t6348 + t6354 + t6372 + t6381 + t6389 + t6439 + t6463 + t6477;
  t7821 = t6157*t3690;
  t7829 = -1.*t6344*t3693*t3703;
  t7849 = t7821 + t7829;
  t7819 = t4259*t6882;
  t7878 = 3.e-6*t536*t7849;
  t7880 = t7819 + t7878;
  t7884 = t468*t7849;
  t7885 = t6960 + t7884;
  t7911 = 3.e-6*t3692*t6882;
  t7912 = -1.*t3692*t7849;
  t7913 = t7911 + t7912;
  t8202 = 3.e-6*t468*t6882;
  t8204 = -1.*t468*t7849;
  t8205 = t8202 + t8204;
  t8248 = -9.e-12*t3692*t6882;
  t8292 = 3.e-6*t3692*t7849;
  t8299 = t8248 + t8292;
  t6885 = t3685*t6882;
  t6900 = 6.000000000054e-7*t536*t6898;
  t8415 = t6960 + t6962;
  t8417 = t6968 + t6970;
  t8420 = t6976 + t6989;
  t7215 = -0.2000000000018*t3687*t3690*t3692*t6344;
  t7219 = 0.2000000000018*t468*t6344*t3693;
  t7223 = -6.000000000054e-7*t3687*t3692*t6344*t3703;
  t7232 = t4394*t7231;
  t7239 = t4341*t7235;
  t7293 = t4157*t7292;
  t7294 = t4436*t7231;
  t7295 = t4404*t7235;
  t7296 = t4449*t7292;
  t7297 = t7294 + t7295 + t7296;
  t7298 = -0.099999*t7297;
  t7299 = t4420*t7231;
  t7300 = t4408*t7235;
  t7301 = t4404*t7292;
  t7304 = t7299 + t7300 + t7301;
  t7305 = -0.3*t7304;
  t7306 = -1.*t4443*t7231;
  t7307 = -1.*t4420*t7235;
  t7310 = -1.*t4436*t7292;
  t7319 = t7306 + t7307 + t7310;
  t7321 = 0.2*t7319;
  t7322 = t7215 + t7219 + t7223 + t7232 + t7239 + t7293 + t7298 + t7305 + t7321;
  t6676 = -0.2000000000018*t468*t6157*t3687;
  t6678 = -0.2000000000018*t3692*t6517;
  t6680 = 6.000000000054e-7*t3692*t6352;
  t6712 = t4394*t6711;
  t6724 = t4157*t6723;
  t6738 = t4341*t6737;
  t6740 = -1.*t4443*t6711;
  t6745 = -1.*t4436*t6723;
  t6746 = -1.*t4420*t6737;
  t6751 = t6740 + t6745 + t6746;
  t6754 = 0.2*t6751;
  t6755 = t4436*t6711;
  t6761 = t4449*t6723;
  t6764 = t4404*t6737;
  t6766 = t6755 + t6761 + t6764;
  t6769 = -0.099999*t6766;
  t6771 = t4420*t6711;
  t6772 = t4404*t6723;
  t6819 = t4408*t6737;
  t6829 = t6771 + t6772 + t6819;
  t6844 = -0.3*t6829;
  t6849 = t6676 + t6678 + t6680 + t6712 + t6724 + t6738 + t6754 + t6769 + t6844;
  t8603 = t3690*t6344*t3693;
  t8604 = t6157*t3703;
  t8606 = t8603 + t8604;
  t8618 = 3.e-6*t468*t8606;
  t8620 = -9.e-12*t468*t7849;
  t8623 = t6935 + t8618 + t8620;
  t8626 = -1.*t468*t8606;
  t8627 = 3.e-6*t468*t7849;
  t8628 = t6967 + t8626 + t8627;
  t8741 = 1.000000000009*t468*t3687*t6344;
  t8743 = t3692*t8606;
  t8744 = -3.e-6*t3692*t7849;
  t8746 = t8741 + t8743 + t8744;
  t8200 = 6.000000000054e-7*t3692*t6882;
  t8201 = -0.2000000000018*t3692*t7849;
  t8206 = t4394*t8205;
  t8207 = t4341*t7913;
  t8301 = t4157*t8299;
  t8371 = t4436*t8205;
  t8372 = t4404*t7913;
  t8376 = t4449*t8299;
  t8382 = t8371 + t8372 + t8376;
  t8388 = -0.099999*t8382;
  t8398 = t4420*t8205;
  t8399 = t4408*t7913;
  t8400 = t4404*t8299;
  t8401 = t8398 + t8399 + t8400;
  t8402 = -0.3*t8401;
  t8403 = -1.*t4443*t8205;
  t8404 = -1.*t4420*t7913;
  t8405 = -1.*t4436*t8299;
  t8409 = t8403 + t8404 + t8405;
  t8410 = 0.2*t8409;
  t8413 = t8200 + t8201 + t8206 + t8207 + t8301 + t8388 + t8402 + t8410;
  t8931 = 1.000000000009*t3687*t3692*t6344;
  t9021 = t8931 + t8626 + t8627;
  t9639 = 3.e-6*t468*t3687*t6344;
  t11070 = 3.e-6*t3692*t8606;
  t11987 = -9.e-12*t3692*t7849;
  t12081 = t9639 + t11070 + t11987;
  t12112 = -1.*t468*t3687*t6344;
  t12113 = -1.*t3692*t8606;
  t12116 = t12112 + t12113 + t8292;
  t7085 = t4706*t7084;
  t7092 = t4733*t7090;
  t7097 = t4769*t7096;
  t7100 = -1.*t4781*t7084;
  t7101 = 1.000000000009*t3882*t7090;
  t7102 = -1.*t4800*t7096;
  t7103 = t7100 + t7101 + t7102;
  t7104 = 0.2*t7103;
  t7105 = -1.8e-11*t3882*t7084;
  t7107 = t4851*t7090;
  t7109 = t4781*t7096;
  t7125 = t7105 + t7107 + t7109;
  t7131 = -0.099999*t7125;
  t7144 = t4851*t7084;
  t7153 = t4870*t7090;
  t7157 = -1.000000000009*t3882*t7096;
  t7162 = t7144 + t7153 + t7157;
  t7180 = -0.3*t7162;
  t7209 = t7085 + t7092 + t7097 + t7104 + t7131 + t7180;
  t6554 = t4706*t6550;
  t6567 = t4733*t6566;
  t6634 = t4769*t6633;
  t6644 = -1.*t4781*t6550;
  t6652 = 1.000000000009*t3882*t6566;
  t6654 = -1.*t4800*t6633;
  t6657 = t6644 + t6652 + t6654;
  t6659 = 0.2*t6657;
  t6660 = -1.8e-11*t3882*t6550;
  t6662 = t4851*t6566;
  t6663 = t4781*t6633;
  t6664 = t6660 + t6662 + t6663;
  t6665 = -0.099999*t6664;
  t6666 = t4851*t6550;
  t6667 = t4870*t6566;
  t6668 = -1.000000000009*t3882*t6633;
  t6669 = t6666 + t6667 + t6668;
  t6670 = -0.3*t6669;
  t6674 = t6554 + t6567 + t6634 + t6659 + t6665 + t6670;
  t7883 = t4706*t7880;
  t7888 = t4733*t7885;
  t8006 = t4769*t7913;
  t8078 = -1.*t4781*t7880;
  t8118 = 1.000000000009*t3882*t7885;
  t8172 = -1.*t4800*t7913;
  t8178 = t8078 + t8118 + t8172;
  t8186 = 0.2*t8178;
  t8187 = -1.8e-11*t3882*t7880;
  t8189 = t4851*t7885;
  t8190 = t4781*t7913;
  t8191 = t8187 + t8189 + t8190;
  t8192 = -0.099999*t8191;
  t8193 = t4851*t7880;
  t8194 = t4870*t7885;
  t8195 = -1.000000000009*t3882*t7913;
  t8196 = t8193 + t8194 + t8195;
  t8197 = -0.3*t8196;
  t8198 = t7883 + t7888 + t8006 + t8186 + t8192 + t8197;
  t5379 = 5.4e-18*t3753;
  t5380 = 0.100000000003*t4699;
  t5382 = -0.200000000003*t4851;
  t5391 = t5379 + t5380 + t5382;
  t5440 = -0.2000000000048*t3753;
  t5445 = t5443 + t3882;
  t5446 = 0.100000000003*t5445;
  t5447 = t5440 + t4764 + t5446;
  t5458 = 0.1000000000039*t3753;
  t5462 = t5443 + t4327;
  t5463 = -0.200000000003*t5462;
  t5465 = 3.e-7*t4851;
  t5469 = t5458 + t5463 + t5465;
  t12358 = 3.e-6*t3687*t3692*t6344;
  t12372 = 3.e-6*t536*t8606;
  t12374 = t4259*t7849;
  t12379 = t12358 + t12372 + t12374;
  t5505 = t5496 + t4327;
  t12385 = -1.*t3687*t3692*t6344;
  t12386 = t468*t8606;
  t12388 = t12385 + t12386 + t7878;
  t12398 = -1.*t4397*t3687*t6344;
  t12399 = t12398 + t12113 + t8292;
  t5672 = t5496 + t3882;
  t9585 = t4769*t9021;
  t12108 = t4706*t12081;
  t12121 = t4733*t12116;
  t12126 = -1.000000000009*t3882*t9021;
  t12130 = t4851*t12081;
  t12134 = t4870*t12116;
  t12135 = t12126 + t12130 + t12134;
  t12136 = -0.3*t12135;
  t12137 = t4781*t9021;
  t12141 = -1.8e-11*t3882*t12081;
  t12145 = t4851*t12116;
  t12148 = t12137 + t12141 + t12145;
  t12152 = -0.099999*t12148;
  t12155 = -1.*t4800*t9021;
  t12157 = -1.*t4781*t12081;
  t12167 = 1.000000000009*t3882*t12116;
  t12182 = t12155 + t12157 + t12167;
  t12189 = 0.2*t12182;
  t12214 = t9585 + t12108 + t12121 + t12136 + t12152 + t12189;
  t13905 = t3685*t3687*t3690*t6344;
  t13908 = 0.2000000000018*t3692*t6344*t3693;
  t13910 = -6.000000000054e-7*t536*t3687*t6344*t3703;
  t13913 = t4157*t7084;
  t13915 = t4341*t7090;
  t13918 = t4394*t7096;
  t13920 = t4404*t7084;
  t13923 = t4408*t7090;
  t13925 = t4420*t7096;
  t13927 = t13920 + t13923 + t13925;
  t13928 = -0.3*t13927;
  t13930 = -1.*t4436*t7084;
  t13933 = -1.*t4420*t7090;
  t13936 = -1.*t4443*t7096;
  t13937 = t13930 + t13933 + t13936;
  t13938 = 0.2*t13937;
  t13939 = t4449*t7084;
  t13940 = t4404*t7090;
  t13943 = t4436*t7096;
  t13944 = t13939 + t13940 + t13943;
  t13948 = -0.099999*t13944;
  t13949 = t13905 + t13908 + t13910 + t13913 + t13915 + t13918 + t13928 + t13938 + t13948;
  t13051 = -0.2000000000018*t6157*t3687*t3692;
  t13053 = t3685*t6517;
  t13088 = 6.000000000054e-7*t536*t6352;
  t13089 = t4157*t6550;
  t13121 = t4341*t6566;
  t13124 = t4394*t6633;
  t13126 = t4404*t6550;
  t13127 = t4408*t6566;
  t13133 = t4420*t6633;
  t13255 = t13126 + t13127 + t13133;
  t13562 = -0.3*t13255;
  t13567 = -1.*t4436*t6550;
  t13733 = -1.*t4420*t6566;
  t13757 = -1.*t4443*t6633;
  t13841 = t13567 + t13733 + t13757;
  t13849 = 0.2*t13841;
  t13852 = t4449*t6550;
  t13886 = t4404*t6566;
  t13887 = t4436*t6633;
  t13898 = t13852 + t13886 + t13887;
  t13901 = -0.099999*t13898;
  t13903 = t13051 + t13053 + t13088 + t13089 + t13121 + t13124 + t13562 + t13849 + t13901;
  t13951 = 6.000000000054e-7*t536*t6882;
  t13952 = t3685*t7849;
  t13955 = t4157*t7880;
  t13956 = t4341*t7885;
  t13959 = t4394*t7913;
  t13960 = t4404*t7880;
  t13961 = t4408*t7885;
  t13963 = t4420*t7913;
  t13964 = t13960 + t13961 + t13963;
  t13967 = -0.3*t13964;
  t13968 = -1.*t4436*t7880;
  t13976 = -1.*t4420*t7885;
  t13979 = -1.*t4443*t7913;
  t13980 = t13968 + t13976 + t13979;
  t13981 = 0.2*t13980;
  t13983 = t4449*t7880;
  t13984 = t4404*t7885;
  t13999 = t4436*t7913;
  t14000 = t13983 + t13984 + t13999;
  t14001 = -0.099999*t14000;
  t14002 = t13951 + t13952 + t13955 + t13956 + t13959 + t13967 + t13981 + t14001;
  t14062 = t4706*t12379;
  t14092 = t4733*t12388;
  t14111 = t4769*t12399;
  t14115 = -1.*t4781*t12379;
  t14116 = 1.000000000009*t3882*t12388;
  t14118 = -1.*t4800*t12399;
  t14119 = t14115 + t14116 + t14118;
  t14120 = 0.2*t14119;
  t14121 = -1.8e-11*t3882*t12379;
  t14122 = t4851*t12388;
  t14123 = t4781*t12399;
  t14124 = t14121 + t14122 + t14123;
  t14125 = -0.099999*t14124;
  t14126 = t4851*t12379;
  t14127 = t4870*t12388;
  t14128 = -1.000000000009*t3882*t12399;
  t14129 = t14126 + t14127 + t14128;
  t14130 = -0.3*t14129;
  t14131 = t14062 + t14092 + t14111 + t14120 + t14125 + t14130;
  t14006 = -0.2000000000018*t468*t3687*t6344;
  t14010 = -0.2000000000018*t3692*t8606;
  t14014 = 6.000000000054e-7*t3692*t7849;
  t14015 = t4394*t9021;
  t14016 = t4157*t12081;
  t14017 = t4341*t12116;
  t14018 = -1.*t4443*t9021;
  t14019 = -1.*t4436*t12081;
  t14021 = -1.*t4420*t12116;
  t14022 = t14018 + t14019 + t14021;
  t14023 = 0.2*t14022;
  t14025 = t4436*t9021;
  t14026 = t4449*t12081;
  t14027 = t4404*t12116;
  t14029 = t14025 + t14026 + t14027;
  t14030 = -0.099999*t14029;
  t14032 = t4420*t9021;
  t14040 = t4404*t12081;
  t14057 = t4408*t12116;
  t14059 = t14032 + t14040 + t14057;
  t14060 = -0.3*t14059;
  t14061 = t14006 + t14010 + t14014 + t14015 + t14016 + t14017 + t14023 + t14030 + t14060;
  t14159 = t4259*t6157*t3687*t3690;
  t14165 = 3.e-6*t536*t6157*t3687*t3703;
  t14168 = t14159 + t14165;
  t14180 = t468*t6157*t3687*t3703;
  t14182 = t6164 + t14180;
  t14185 = 3.e-6*t6157*t3687*t3690*t3692;
  t14186 = -1.*t6157*t3687*t3692*t3703;
  t14190 = t14185 + t14186;
  t14216 = -3.e-6*t536*t6157*t3687*t3690;
  t14217 = 3.e-6*t6157*t3692*t3693;
  t14218 = t4259*t6157*t3687*t3703;
  t14219 = t14216 + t14217 + t14218;
  t14222 = -1.*t468*t6157*t3687*t3690;
  t14223 = -1.*t6157*t3692*t3693;
  t14225 = t14222 + t14223 + t14165;
  t14228 = t6157*t3687*t3690*t3692;
  t14229 = -1.*t4397*t6157*t3693;
  t14230 = 3.e-6*t6157*t3687*t3692*t3703;
  t14231 = t14228 + t14229 + t14230;
  t14324 = 1.000000000009*t6157*t3692*t3693;
  t14329 = 3.e-6*t468*t6157*t3687*t3703;
  t14330 = t6199 + t14324 + t14329;
  t14339 = -3.e-6*t6157*t3687*t3690*t3692;
  t14340 = 3.e-6*t468*t6157*t3693;
  t14342 = -9.e-12*t6157*t3687*t3692*t3703;
  t14344 = t14339 + t14340 + t14342;
  t14346 = -1.*t468*t6157*t3693;
  t14347 = t14228 + t14346 + t14230;
  t14388 = 3.e-6*t536*t6157*t3690*t3693;
  t14389 = -1.*t4259*t6157*t3693*t3703;
  t14390 = t6497 + t14388 + t14389;
  t14393 = t468*t6157*t3690*t3693;
  t14394 = -3.e-6*t536*t6157*t3693*t3703;
  t14395 = t6556 + t14393 + t14394;
  t14397 = -1.*t6157*t3690*t3692*t3693;
  t14398 = -3.e-6*t6157*t3692*t3693*t3703;
  t14399 = t6572 + t14397 + t14398;
  t14150 = 6.000000000054e-7*t536*t6157*t3687*t3690;
  t14153 = t3685*t6157*t3687*t3703;
  t14178 = t4157*t14168;
  t14183 = t4341*t14182;
  t14192 = t4394*t14190;
  t14197 = t4404*t14168;
  t14198 = t4408*t14182;
  t14199 = t4420*t14190;
  t14200 = t14197 + t14198 + t14199;
  t14201 = -0.3*t14200;
  t14202 = -1.*t4436*t14168;
  t14203 = -1.*t4420*t14182;
  t14204 = -1.*t4443*t14190;
  t14205 = t14202 + t14203 + t14204;
  t14206 = 0.2*t14205;
  t14207 = t4449*t14168;
  t14208 = t4404*t14182;
  t14209 = t4436*t14190;
  t14210 = t14207 + t14208 + t14209;
  t14211 = -0.099999*t14210;
  t14212 = t14150 + t14153 + t14178 + t14183 + t14192 + t14201 + t14206 + t14211;
  t14438 = t6523 + t6549;
  t14441 = t6565 + t6365;
  t14443 = t6574 + t6578;
  t14492 = t3690*t6344;
  t14493 = t6157*t3693*t3703;
  t14494 = t14492 + t14493;
  t14491 = t4259*t6517;
  t14495 = 3.e-6*t536*t14494;
  t14496 = t14491 + t14495;
  t14498 = t468*t14494;
  t14499 = t6523 + t14498;
  t14501 = -1.*t3692*t14494;
  t14502 = t6720 + t14501;
  t14533 = 3.e-6*t468*t6517;
  t14534 = -1.*t468*t14494;
  t14535 = t14533 + t14534;
  t14538 = -9.e-12*t3692*t6517;
  t14539 = 3.e-6*t3692*t14494;
  t14540 = t14538 + t14539;
  t14295 = 0.2000000000018*t6157*t3687*t3690*t3692;
  t14297 = -0.2000000000018*t468*t6157*t3693;
  t14321 = 6.000000000054e-7*t6157*t3687*t3692*t3703;
  t14338 = t4394*t14330;
  t14345 = t4157*t14344;
  t14348 = t4341*t14347;
  t14351 = -1.*t4443*t14330;
  t14352 = -1.*t4436*t14344;
  t14353 = -1.*t4420*t14347;
  t14354 = t14351 + t14352 + t14353;
  t14355 = 0.2*t14354;
  t14356 = t4436*t14330;
  t14357 = t4449*t14344;
  t14358 = t4404*t14347;
  t14359 = t14356 + t14357 + t14358;
  t14361 = -0.099999*t14359;
  t14365 = t4420*t14330;
  t14368 = t4404*t14344;
  t14369 = t4408*t14347;
  t14372 = t14365 + t14368 + t14369;
  t14373 = -0.3*t14372;
  t14377 = t14295 + t14297 + t14321 + t14338 + t14345 + t14348 + t14355 + t14361 + t14373;
  t14565 = 3.e-6*t468*t6346;
  t14566 = -9.e-12*t468*t14494;
  t14567 = t6497 + t14565 + t14566;
  t14569 = -1.*t468*t6346;
  t14570 = 3.e-6*t468*t14494;
  t14571 = t6556 + t14569 + t14570;
  t14573 = -1.000000000009*t468*t6157*t3687;
  t14574 = t3692*t6346;
  t14575 = -3.e-6*t3692*t14494;
  t14576 = t14573 + t14574 + t14575;
  t14531 = 6.000000000054e-7*t3692*t6517;
  t14532 = -0.2000000000018*t3692*t14494;
  t14536 = t4394*t14535;
  t14537 = t4341*t14502;
  t14541 = t4157*t14540;
  t14542 = t4436*t14535;
  t14543 = t4404*t14502;
  t14544 = t4449*t14540;
  t14545 = t14542 + t14543 + t14544;
  t14546 = -0.099999*t14545;
  t14547 = t4420*t14535;
  t14548 = t4408*t14502;
  t14549 = t4404*t14540;
  t14550 = t14547 + t14548 + t14549;
  t14551 = -0.3*t14550;
  t14552 = -1.*t4443*t14535;
  t14553 = -1.*t4420*t14502;
  t14554 = -1.*t4436*t14540;
  t14555 = t14552 + t14553 + t14554;
  t14556 = 0.2*t14555;
  t14557 = t14531 + t14532 + t14536 + t14537 + t14541 + t14546 + t14551 + t14556;
  t14603 = -1.000000000009*t6157*t3687*t3692;
  t14604 = t14603 + t14569 + t14570;
  t14606 = -3.e-6*t468*t6157*t3687;
  t14607 = -9.e-12*t3692*t14494;
  t14608 = t14606 + t6384 + t14607;
  t14610 = t468*t6157*t3687;
  t14611 = -1.*t3692*t6346;
  t14617 = t14610 + t14611 + t14539;
  t14220 = t4706*t14219;
  t14226 = t4733*t14225;
  t14232 = t4769*t14231;
  t14233 = -1.*t4781*t14219;
  t14234 = 1.000000000009*t3882*t14225;
  t14235 = -1.*t4800*t14231;
  t14236 = t14233 + t14234 + t14235;
  t14237 = 0.2*t14236;
  t14238 = -1.8e-11*t3882*t14219;
  t14239 = t4851*t14225;
  t14240 = t4781*t14231;
  t14241 = t14238 + t14239 + t14240;
  t14242 = -0.099999*t14241;
  t14277 = t4851*t14219;
  t14280 = t4870*t14225;
  t14284 = -1.000000000009*t3882*t14231;
  t14285 = t14277 + t14280 + t14284;
  t14289 = -0.3*t14285;
  t14290 = t14220 + t14226 + t14232 + t14237 + t14242 + t14289;
  t14497 = t4706*t14496;
  t14500 = t4733*t14499;
  t14503 = t4769*t14502;
  t14504 = -1.*t4781*t14496;
  t14505 = 1.000000000009*t3882*t14499;
  t14506 = -1.*t4800*t14502;
  t14507 = t14504 + t14505 + t14506;
  t14509 = 0.2*t14507;
  t14511 = -1.8e-11*t3882*t14496;
  t14512 = t4851*t14499;
  t14513 = t4781*t14502;
  t14515 = t14511 + t14512 + t14513;
  t14522 = -0.099999*t14515;
  t14523 = t4851*t14496;
  t14525 = t4870*t14499;
  t14526 = -1.000000000009*t3882*t14502;
  t14527 = t14523 + t14525 + t14526;
  t14528 = -0.3*t14527;
  t14529 = t14497 + t14500 + t14503 + t14509 + t14522 + t14528;
  t14641 = -3.e-6*t6157*t3687*t3692;
  t14642 = t4259*t14494;
  t14645 = t14641 + t6377 + t14642;
  t14647 = t6157*t3687*t3692;
  t14648 = t468*t6346;
  t14649 = t14647 + t14648 + t14495;
  t14651 = t4397*t6157*t3687;
  t14652 = t14651 + t14611 + t14539;
  t14605 = t4769*t14604;
  t14609 = t4706*t14608;
  t14618 = t4733*t14617;
  t14619 = -1.000000000009*t3882*t14604;
  t14620 = t4851*t14608;
  t14621 = t4870*t14617;
  t14622 = t14619 + t14620 + t14621;
  t14623 = -0.3*t14622;
  t14624 = t4781*t14604;
  t14625 = -1.8e-11*t3882*t14608;
  t14626 = t4851*t14617;
  t14628 = t14624 + t14625 + t14626;
  t14629 = -0.099999*t14628;
  t14630 = -1.*t4800*t14604;
  t14631 = -1.*t4781*t14608;
  t14632 = 1.000000000009*t3882*t14617;
  t14633 = t14630 + t14631 + t14632;
  t14634 = 0.2*t14633;
  t14635 = t14605 + t14609 + t14618 + t14623 + t14629 + t14634;
  p_output1[0]=(t3691 + t3700 + t3707 + t4157*t4271 + t4341*t4355 + t4394*t4400 - 0.3*(t4271*t4404 + t4355*t4408 + t4400*t4420) + 0.2*(-1.*t4355*t4420 - 1.*t4271*t4436 - 1.*t4400*t4443) - 0.099999*(t4355*t4404 + t4400*t4436 + t4271*t4449))*var2[4] + t4610*var2[5] + t4939*var2[19] + t4875*var2[21];
  p_output1[1]=t4610*var2[4] + (t3691 + t3707 + t4157*t4960 + t4341*t4974 + t4394*t4977 - 0.3*(t4404*t4960 + t4408*t4974 + t4420*t4977) - 0.099999*(t4449*t4960 + t4404*t4974 + t4436*t4977) + 0.2*(-1.*t4436*t4960 - 1.*t4420*t4974 - 1.*t4443*t4977))*var2[5] + t5275*var2[19] + t5178*var2[21];
  p_output1[2]=t4939*var2[4] + t5275*var2[5] + (t3700 - 0.2000000000018*t3687*t3690*t468 - 6.000000000054e-7*t3687*t3703*t468 + t4341*t5330 + t4157*t5343 + t4394*t5347 - 0.3*(t4408*t5330 + t4404*t5343 + t4420*t5347) - 0.099999*(t4404*t5330 + t4449*t5343 + t4436*t5347) + 0.2*(-1.*t4420*t5330 - 1.*t4436*t5343 - 1.*t4443*t5347))*var2[19] + t5322*var2[21];
  p_output1[3]=t4875*var2[4] + t5178*var2[5] + t5322*var2[19] + (t5391*t5431 + t5447*t5455 + t5469*t5474 - 0.099999*(-1.8e-11*t3753*t5431 + t4781*t5455 + t4703*t5474) - 0.3*(t4781*t5431 - 1.000000000009*t3753*t5474 + t5455*t5505) + 0.2*(-1.*t4703*t5431 + 1.000000000009*t3753*t5455 - 1.*t5474*t5672))*var2[21];
  p_output1[4]=1.;
  p_output1[5]=0.2000000000018*t3687*t3692 - 1.*t3685*t3690*t3693 + t4157*t4719 + t4341*t4752 + t4394*t4776 - 0.3*(t4404*t4719 + t4408*t4752 + t4420*t4776) - 0.099999*(t4449*t4719 + t4404*t4752 + t4436*t4776) + 0.2*(-1.*t4436*t4719 - 1.*t4420*t4752 - 1.*t4443*t4776) + 6.000000000054e-7*t3693*t3703*t536;
  p_output1[6]=-1.*t3685*t3687*t3703 + t4157*t5103 + t4341*t5115 + t4394*t5120 - 0.3*(t4404*t5103 + t4408*t5115 + t4420*t5120) - 0.099999*(t4449*t5103 + t4404*t5115 + t4436*t5120) + 0.2*(-1.*t4436*t5103 - 1.*t4420*t5115 - 1.*t4443*t5120) - 6.000000000054e-7*t3687*t3690*t536;
  p_output1[7]=-0.2000000000018*t3687*t3690*t3692 - 6.000000000054e-7*t3687*t3692*t3703 + 0.2000000000018*t3693*t468 + t4394*t5281 + t4341*t5286 + t4157*t5294 - 0.3*(t4420*t5281 + t4408*t5286 + t4404*t5294) + 0.2*(-1.*t4443*t5281 - 1.*t4420*t5286 - 1.*t4436*t5294) - 0.099999*(t4436*t5281 + t4404*t5286 + t4449*t5294);
  p_output1[8]=t4706*t5431 + t4733*t5455 + t4769*t5474 - 0.3*(t4851*t5431 + t4870*t5455 - 1.000000000009*t3882*t5474) - 0.099999*(-1.8e-11*t3882*t5431 + t4851*t5455 + t4781*t5474) + 0.2*(-1.*t4781*t5431 + 1.000000000009*t3882*t5455 - 1.*t4800*t5474);
  p_output1[9]=(t6870 + t6885 + t6900 + t4157*t6963 + t4341*t6971 + t4394*t6990 - 0.3*(t4404*t6963 + t4408*t6971 + t4420*t6990) - 0.099999*(t4449*t6963 + t4404*t6971 + t4436*t6990) + 0.2*(-1.*t4436*t6963 - 1.*t4420*t6971 - 1.*t4443*t6990))*var2[3] + t6338*var2[4] + t6482*var2[5] + t6849*var2[19] + t6674*var2[21];
  p_output1[10]=t6338*var2[3] + (-1.*t3685*t3690*t3693*t6344 + 6.000000000054e-7*t3693*t3703*t536*t6344 + t6870 + t4157*t7702 + t4341*t7716 + t4394*t7721 - 0.3*(t4404*t7702 + t4408*t7716 + t4420*t7721) - 0.099999*(t4449*t7702 + t4404*t7716 + t4436*t7721) + 0.2*(-1.*t4436*t7702 - 1.*t4420*t7716 - 1.*t4443*t7721))*var2[4] + t7503*var2[5] + t7322*var2[19] + t7209*var2[21];
  p_output1[11]=t6482*var2[3] + t7503*var2[4] + (t6885 + t6900 + t4157*t8415 + t4341*t8417 + t4394*t8420 - 0.3*(t4404*t8415 + t4408*t8417 + t4420*t8420) - 0.099999*(t4449*t8415 + t4404*t8417 + t4436*t8420) + 0.2*(-1.*t4436*t8415 - 1.*t4420*t8417 - 1.*t4443*t8420))*var2[5] + t8413*var2[19] + t8198*var2[21];
  p_output1[12]=t6849*var2[3] + t7322*var2[4] + t8413*var2[5] + (t6870 + 6.000000000054e-7*t468*t7849 - 0.2000000000018*t468*t8606 + t4157*t8623 + t4341*t8628 + t4394*t8746 - 0.3*(t4404*t8623 + t4408*t8628 + t4420*t8746) - 0.099999*(t4449*t8623 + t4404*t8628 + t4436*t8746) + 0.2*(-1.*t4436*t8623 - 1.*t4420*t8628 - 1.*t4443*t8746))*var2[19] + t12214*var2[21];
  p_output1[13]=t6674*var2[3] + t7209*var2[4] + t8198*var2[5] + t12214*var2[19] + (-0.099999*(-1.8e-11*t12379*t3753 + t12399*t4703 + t12388*t4781) + t12379*t5391 + t12388*t5447 + t12399*t5469 - 0.3*(-1.000000000009*t12399*t3753 + t12379*t4781 + t12388*t5505) + 0.2*(1.000000000009*t12388*t3753 - 1.*t12379*t4703 - 1.*t12399*t5672))*var2[21];
  p_output1[14]=1.;
  p_output1[15]=t13903;
  p_output1[16]=t13949;
  p_output1[17]=t14002;
  p_output1[18]=t14061;
  p_output1[19]=t14131;
  p_output1[20]=t13903*var2[3] + t13949*var2[4] + t14002*var2[5] + t14061*var2[19] + t14131*var2[21];
  p_output1[21]=t13949*var2[3] + (t13051 + t14390*t4157 + t14395*t4341 + t14399*t4394 - 0.3*(t14390*t4404 + t14395*t4408 + t14399*t4420) + 0.2*(-1.*t14395*t4420 - 1.*t14390*t4436 - 1.*t14399*t4443) - 0.099999*(t14395*t4404 + t14399*t4436 + t14390*t4449) + t3685*t3690*t3693*t6157 - 6.000000000054e-7*t3693*t3703*t536*t6157)*var2[4] + t14212*var2[5] + t14377*var2[19] + t14290*var2[21];
  p_output1[22]=t14002*var2[3] + t14212*var2[4] + (t13053 + t13088 + t14438*t4157 + t14441*t4341 + t14443*t4394 - 0.3*(t14438*t4404 + t14441*t4408 + t14443*t4420) + 0.2*(-1.*t14441*t4420 - 1.*t14438*t4436 - 1.*t14443*t4443) - 0.099999*(t14441*t4404 + t14443*t4436 + t14438*t4449))*var2[5] + t14557*var2[19] + t14529*var2[21];
  p_output1[23]=t14061*var2[3] + t14377*var2[4] + t14557*var2[5] + (t13051 + t14567*t4157 + t14571*t4341 + t14576*t4394 - 0.3*(t14567*t4404 + t14571*t4408 + t14576*t4420) + 0.2*(-1.*t14571*t4420 - 1.*t14567*t4436 - 1.*t14576*t4443) - 0.099999*(t14571*t4404 + t14576*t4436 + t14567*t4449) + 6.000000000054e-7*t14494*t468 - 0.2000000000018*t468*t6346)*var2[19] + t14635*var2[21];
  p_output1[24]=t14131*var2[3] + t14290*var2[4] + t14529*var2[5] + t14635*var2[19] + (-0.099999*(-1.8e-11*t14645*t3753 + t14652*t4703 + t14649*t4781) + t14645*t5391 + t14649*t5447 + t14652*t5469 - 0.3*(-1.000000000009*t14652*t3753 + t14645*t4781 + t14649*t5505) + 0.2*(1.000000000009*t14649*t3753 - 1.*t14645*t4703 - 1.*t14652*t5672))*var2[21];
  p_output1[25]=1.;
  p_output1[26]=t12379*t4157 + t12388*t4341 + t12399*t4394 - 0.3*(t12379*t4404 + t12388*t4408 + t12399*t4420) + 0.2*(-1.*t12388*t4420 - 1.*t12379*t4436 - 1.*t12399*t4443) - 0.099999*(t12388*t4404 + t12399*t4436 + t12379*t4449) - 0.2000000000018*t3687*t3692*t6344 + 6.000000000054e-7*t536*t7849 + t3685*t8606;
  p_output1[27]=t14219*t4157 + t14225*t4341 + t14231*t4394 - 0.3*(t14219*t4404 + t14225*t4408 + t14231*t4420) + 0.2*(-1.*t14225*t4420 - 1.*t14219*t4436 - 1.*t14231*t4443) - 0.099999*(t14225*t4404 + t14231*t4436 + t14219*t4449) - 1.*t3685*t3687*t3690*t6157 - 0.2000000000018*t3692*t3693*t6157 + 6.000000000054e-7*t3687*t3703*t536*t6157;
  p_output1[28]=t14494*t3685 + t14496*t4157 + t14499*t4341 + t14502*t4394 - 0.3*(t14496*t4404 + t14499*t4408 + t14502*t4420) + 0.2*(-1.*t14499*t4420 - 1.*t14496*t4436 - 1.*t14502*t4443) - 0.099999*(t14499*t4404 + t14502*t4436 + t14496*t4449) + 6.000000000054e-7*t536*t6517;
  p_output1[29]=6.000000000054e-7*t14494*t3692 + t14608*t4157 + t14617*t4341 + t14604*t4394 - 0.3*(t14608*t4404 + t14617*t4408 + t14604*t4420) + 0.2*(-1.*t14617*t4420 - 1.*t14608*t4436 - 1.*t14604*t4443) - 0.099999*(t14617*t4404 + t14604*t4436 + t14608*t4449) + 0.2000000000018*t3687*t468*t6157 - 0.2000000000018*t3692*t6346;
  p_output1[30]=t14645*t4706 + t14649*t4733 + t14652*t4769 + 0.2*(1.000000000009*t14649*t3882 - 1.*t14645*t4781 - 1.*t14652*t4800) - 0.099999*(-1.8e-11*t14645*t3882 + t14652*t4781 + t14649*t4851) - 0.3*(-1.000000000009*t14652*t3882 + t14645*t4851 + t14649*t4870);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RightBackFoot_BackStance.hh"

namespace BackStance
{

void J_dh_RightBackFoot_BackStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
