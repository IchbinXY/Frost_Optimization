/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:12:43 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t11463;
  double t11581;
  double t12138;
  double t12183;
  double t12432;
  double t12435;
  double t12436;
  double t12438;
  double t12440;
  double t12204;
  double t12253;
  double t12256;
  double t12323;
  double t12626;
  double t12635;
  double t12730;
  double t12441;
  double t12564;
  double t12737;
  double t12666;
  double t12672;
  double t12690;
  double t12693;
  double t12694;
  double t12705;
  double t12748;
  double t12752;
  double t12765;
  double t12812;
  double t12819;
  double t12820;
  double t12822;
  double t12823;
  double t12824;
  double t12827;
  double t12834;
  double t12883;
  double t12907;
  double t12858;
  double t12738;
  double t12836;
  double t13001;
  double t12146;
  double t12152;
  double t12174;
  double t12175;
  double t12431;
  double t12437;
  double t12575;
  double t12657;
  double t12663;
  double t12736;
  double t12739;
  double t12740;
  double t12742;
  double t12743;
  double t12814;
  double t12815;
  double t12816;
  double t12817;
  double t12818;
  double t13087;
  double t13088;
  double t13159;
  double t12876;
  double t13183;
  double t13184;
  double t13185;
  double t13188;
  double t13189;
  double t13190;
  double t13009;
  double t13031;
  double t13036;
  double t13436;
  double t13437;
  double t13433;
  double t13434;
  double t13494;
  double t13460;
  double t13472;
  double t13478;
  double t13486;
  double t13526;
  double t13603;
  double t13604;
  double t13613;
  double t13614;
  double t13615;
  double t13616;
  double t13620;
  double t13710;
  double t13624;
  double t13753;
  double t13754;
  double t13755;
  double t13778;
  double t13788;
  double t13789;
  double t13811;
  double t13812;
  double t13814;
  double t13816;
  double t12229;
  double t12427;
  double t14449;
  double t14455;
  double t14457;
  double t13435;
  double t13438;
  double t13440;
  double t13452;
  double t13493;
  double t13495;
  double t13501;
  double t13510;
  double t13515;
  double t13607;
  double t13608;
  double t13609;
  double t13610;
  double t13612;
  double t14982;
  double t14983;
  double t14984;
  double t14991;
  double t15011;
  double t13625;
  double t15014;
  double t15015;
  double t15021;
  double t13722;
  double t15565;
  double t15573;
  double t15574;
  double t15580;
  double t15585;
  double t15588;
  double t13082;
  double t13086;
  double t13176;
  double t13186;
  double t13191;
  double t13194;
  double t13220;
  double t13234;
  double t13237;
  double t13254;
  double t13255;
  double t13256;
  double t13283;
  double t13284;
  double t13285;
  double t13288;
  double t13295;
  double t13306;
  double t13378;
  double t13415;
  double t13425;
  double t15721;
  double t15724;
  double t15725;
  double t15730;
  double t15734;
  double t15737;
  double t15741;
  double t15743;
  double t15746;
  double t15749;
  double t12261;
  double t15815;
  double t15817;
  double t15818;
  double t15819;
  double t15830;
  double t15831;
  double t15559;
  double t15563;
  double t15577;
  double t15589;
  double t15615;
  double t15625;
  double t15644;
  double t15648;
  double t15649;
  double t15651;
  double t15653;
  double t15660;
  double t15671;
  double t15679;
  double t15680;
  double t15681;
  double t15683;
  double t15684;
  double t15688;
  double t15689;
  double t15690;
  double t13748;
  double t13750;
  double t13751;
  double t13784;
  double t13813;
  double t13817;
  double t13818;
  double t13819;
  double t13821;
  double t13822;
  double t13868;
  double t13882;
  double t13921;
  double t13930;
  double t13934;
  double t13938;
  double t13943;
  double t13945;
  double t13947;
  double t13957;
  double t13966;
  double t14333;
  double t15911;
  double t15890;
  double t15895;
  double t15897;
  double t15899;
  double t15919;
  double t15920;
  double t15932;
  double t15955;
  double t15957;
  double t15974;
  double t15728;
  double t15739;
  double t15750;
  double t15751;
  double t15752;
  double t15753;
  double t15763;
  double t15765;
  double t15766;
  double t15770;
  double t15780;
  double t15790;
  double t15793;
  double t15798;
  double t15799;
  double t15800;
  double t15803;
  double t15806;
  double t15809;
  double t14986;
  double t15013;
  double t15024;
  double t15026;
  double t15027;
  double t15039;
  double t15046;
  double t15296;
  double t15312;
  double t15380;
  double t15421;
  double t15423;
  double t15451;
  double t15518;
  double t15522;
  double t15526;
  double t15531;
  double t15532;
  double t15533;
  double t13487;
  double t13605;
  double t13619;
  double t13622;
  double t13623;
  double t13655;
  double t13701;
  double t13707;
  double t13708;
  double t13713;
  double t13717;
  double t13718;
  double t13719;
  double t13720;
  double t13734;
  double t13742;
  double t13743;
  double t13744;
  double t13746;
  double t16844;
  double t16896;
  double t16901;
  double t16905;
  double t16906;
  double t16917;
  double t16923;
  double t16933;
  double t16936;
  double t16954;
  double t16955;
  double t16963;
  double t16964;
  double t17023;
  double t17014;
  double t17024;
  double t17025;
  double t17029;
  double t17031;
  double t17032;
  double t17036;
  double t17037;
  double t17059;
  double t17066;
  double t17067;
  double t17104;
  double t17186;
  double t17187;
  double t17189;
  double t17394;
  double t17402;
  double t17403;
  double t17392;
  double t17404;
  double t17405;
  double t17406;
  double t17471;
  double t17475;
  double t17509;
  double t17515;
  double t17550;
  double t17554;
  double t17558;
  double t17669;
  double t17707;
  double t17709;
  double t17710;
  double t17713;
  double t17717;
  double t17728;
  double t17735;
  double t17771;
  double t17772;
  double t17873;
  double t17874;
  double t17876;
  double t17878;
  double t17882;
  double t17883;
  double t17933;
  double t17938;
  double t17942;
  double t17950;
  double t17993;
  double t17994;
  double t17995;
  double t17997;
  double t18002;
  double t18024;
  double t18027;
  double t18029;
  double t16848;
  double t16873;
  double t16892;
  double t16914;
  double t16952;
  double t16966;
  double t16967;
  double t16971;
  double t16972;
  double t16974;
  double t16975;
  double t16979;
  double t16980;
  double t16983;
  double t16985;
  double t16988;
  double t16990;
  double t16992;
  double t16995;
  double t17000;
  double t17001;
  double t17005;
  double t18253;
  double t18255;
  double t18276;
  double t18277;
  double t18458;
  double t18464;
  double t18571;
  double t18575;
  double t18580;
  double t18583;
  double t18584;
  double t18664;
  double t19886;
  double t19890;
  double t19928;
  double t19931;
  double t19970;
  double t20244;
  double t20249;
  double t20256;
  double t20339;
  double t20350;
  double t20701;
  double t20735;
  double t20750;
  double t20795;
  double t20796;
  double t20817;
  double t20827;
  double t20833;
  double t17872;
  double t21092;
  double t21103;
  double t21105;
  double t21107;
  double t21109;
  double t21111;
  double t21115;
  double t21119;
  double t21120;
  double t20682;
  double t20700;
  double t20738;
  double t20799;
  double t20838;
  double t20906;
  double t20954;
  double t20975;
  double t20989;
  double t20995;
  double t21002;
  double t21022;
  double t21041;
  double t21045;
  double t21051;
  double t21054;
  double t21055;
  double t21064;
  double t21067;
  double t21070;
  double t21074;
  double t17028;
  double t17035;
  double t17065;
  double t17176;
  double t17190;
  double t17191;
  double t17209;
  double t17248;
  double t17273;
  double t17283;
  double t17340;
  double t17346;
  double t17347;
  double t17348;
  double t17349;
  double t17350;
  double t17355;
  double t17360;
  double t17361;
  double t17366;
  double t17383;
  double t21250;
  double t21252;
  double t21263;
  double t21241;
  double t21280;
  double t21283;
  double t21296;
  double t21302;
  double t21319;
  double t21330;
  double t21335;
  double t21545;
  double t21562;
  double t21564;
  double t21637;
  double t21638;
  double t21643;
  double t17877;
  double t17920;
  double t21867;
  double t21883;
  double t21902;
  double t19606;
  double t19658;
  double t19665;
  double t19961;
  double t20246;
  double t20351;
  double t20396;
  double t20406;
  double t20409;
  double t20431;
  double t20448;
  double t20457;
  double t20523;
  double t20526;
  double t20567;
  double t20572;
  double t20573;
  double t20578;
  double t20601;
  double t20613;
  double t20672;
  double t20674;
  double t17666;
  double t17667;
  double t17668;
  double t17711;
  double t17740;
  double t17782;
  double t17784;
  double t17786;
  double t17793;
  double t17808;
  double t17820;
  double t17823;
  double t17826;
  double t17827;
  double t17836;
  double t17840;
  double t17843;
  double t17844;
  double t17847;
  double t17848;
  double t17868;
  double t17869;
  double t22407;
  double t22409;
  double t22482;
  double t22534;
  double t22540;
  double t22623;
  double t22753;
  double t22776;
  double t22782;
  double t22969;
  double t22992;
  double t23064;
  double t23070;
  double t21535;
  double t21539;
  double t21571;
  double t21601;
  double t21699;
  double t21710;
  double t21712;
  double t21729;
  double t21752;
  double t21765;
  double t21787;
  double t21790;
  double t21800;
  double t21802;
  double t21807;
  double t21815;
  double t21816;
  double t21824;
  double t21829;
  double t21830;
  double t21841;
  double t23577;
  double t23590;
  double t23606;
  double t23623;
  double t23624;
  double t23646;
  double t23687;
  double t23691;
  double t23692;
  double t18453;
  double t18578;
  double t18666;
  double t18701;
  double t19204;
  double t19205;
  double t19263;
  double t19335;
  double t19337;
  double t19350;
  double t19373;
  double t19382;
  double t19404;
  double t19406;
  double t19417;
  double t19456;
  double t19484;
  double t19486;
  double t19487;
  double t17438;
  double t17514;
  double t17574;
  double t17585;
  double t17596;
  double t17611;
  double t17612;
  double t17613;
  double t17615;
  double t17616;
  double t17617;
  double t17630;
  double t17652;
  double t17656;
  double t17657;
  double t17659;
  double t17661;
  double t17662;
  double t17663;
  double t21295;
  double t21307;
  double t21339;
  double t21353;
  double t21364;
  double t21371;
  double t21398;
  double t21399;
  double t21400;
  double t21428;
  double t21445;
  double t21448;
  double t21452;
  double t21481;
  double t21493;
  double t21495;
  double t21496;
  double t21500;
  double t21502;
  double t15882;
  double t15883;
  double t15887;
  double t15888;
  double t15910;
  double t15912;
  double t15913;
  double t15918;
  double t15936;
  double t15940;
  double t15944;
  double t15946;
  double t15954;
  double t24086;
  double t24087;
  double t24092;
  double t24098;
  double t15977;
  double t24128;
  double t24170;
  double t24171;
  double t24200;
  double t24201;
  double t16092;
  double t23605;
  double t23668;
  double t23719;
  double t23724;
  double t23743;
  double t23747;
  double t23754;
  double t23761;
  double t23814;
  double t23908;
  double t23917;
  double t23960;
  double t23964;
  double t23968;
  double t23971;
  double t23983;
  double t24003;
  double t24004;
  double t24006;
  double t24419;
  double t24420;
  double t24421;
  double t24422;
  double t24423;
  double t24424;
  double t24425;
  double t24426;
  double t24427;
  double t24428;
  double t24429;
  double t24430;
  double t24431;
  double t24432;
  double t24433;
  double t24437;
  double t24439;
  double t24441;
  double t24444;
  double t24446;
  double t24448;
  double t24449;
  double t24368;
  double t24372;
  double t24373;
  double t24374;
  double t24375;
  double t24389;
  double t24390;
  double t24392;
  double t24393;
  double t24394;
  double t24398;
  double t24400;
  double t24401;
  double t24404;
  double t24405;
  double t24406;
  double t24407;
  double t24413;
  double t24415;
  double t24416;
  double t24417;
  double t24418;
  double t24452;
  double t24453;
  double t24455;
  double t24456;
  double t24457;
  double t24458;
  double t24459;
  double t24482;
  double t24483;
  double t24531;
  double t24533;
  double t24544;
  double t24547;
  double t24556;
  double t24560;
  double t24567;
  double t24571;
  double t24576;
  double t24587;
  double t24588;
  double t24589;
  double t24725;
  double t24729;
  double t24730;
  double t24734;
  double t24752;
  double t24753;
  double t24754;
  double t24770;
  double t24773;
  double t24784;
  double t24794;
  double t24820;
  double t24826;
  double t24844;
  double t25006;
  double t25034;
  double t25121;
  double t25139;
  double t25152;
  double t24595;
  double t24598;
  double t24599;
  double t24601;
  double t24608;
  double t24615;
  double t24616;
  double t24617;
  double t24623;
  double t24625;
  double t24630;
  double t24631;
  double t24639;
  double t24640;
  double t24660;
  double t24673;
  double t24676;
  double t24681;
  double t24684;
  double t24685;
  double t24705;
  double t24708;
  double t25260;
  double t25261;
  double t25262;
  double t25272;
  double t25276;
  double t25288;
  double t25292;
  double t25293;
  double t25345;
  double t25350;
  double t25352;
  double t25359;
  double t25375;
  double t25378;
  double t25379;
  double t25393;
  double t25410;
  double t25415;
  double t25422;
  double t25697;
  double t25718;
  double t25746;
  double t25832;
  double t25834;
  double t25836;
  double t25840;
  double t25864;
  double t25865;
  double t26044;
  double t26050;
  double t26069;
  double t26074;
  double t26076;
  double t26077;
  double t26130;
  double t26131;
  double t26148;
  double t25252;
  double t25254;
  double t25270;
  double t25287;
  double t25297;
  double t25299;
  double t25301;
  double t25309;
  double t25314;
  double t25315;
  double t25317;
  double t25318;
  double t25320;
  double t25323;
  double t25328;
  double t25330;
  double t25336;
  double t25337;
  double t25338;
  double t25341;
  double t25342;
  double t26260;
  double t26300;
  double t26323;
  double t26429;
  double t26430;
  double t26431;
  double t26428;
  double t26432;
  double t26433;
  double t26435;
  double t26436;
  double t26438;
  double t26439;
  double t26530;
  double t26531;
  double t26532;
  double t26535;
  double t26536;
  double t26537;
  double t25685;
  double t25686;
  double t25693;
  double t25788;
  double t25844;
  double t25866;
  double t25867;
  double t25868;
  double t25870;
  double t25872;
  double t25874;
  double t25895;
  double t25899;
  double t25903;
  double t25909;
  double t25910;
  double t25911;
  double t25912;
  double t25913;
  double t25914;
  double t25924;
  double t25955;
  double t26568;
  double t26584;
  double t26585;
  double t26605;
  double t26606;
  double t26608;
  double t26611;
  double t26621;
  double t26622;
  double t26683;
  double t26528;
  double t26529;
  double t26533;
  double t26534;
  double t26538;
  double t26540;
  double t26542;
  double t26543;
  double t26546;
  double t26547;
  double t26549;
  double t26550;
  double t26551;
  double t26554;
  double t26555;
  double t26556;
  double t26557;
  double t26558;
  double t26559;
  double t26560;
  double t26561;
  double t26832;
  double t27002;
  double t27010;
  double t27019;
  double t27070;
  double t27080;
  double t27092;
  double t27111;
  double t25361;
  double t25385;
  double t25426;
  double t25428;
  double t25444;
  double t25469;
  double t25470;
  double t25504;
  double t25525;
  double t25558;
  double t25561;
  double t25571;
  double t25582;
  double t25592;
  double t25616;
  double t25635;
  double t25639;
  double t25652;
  double t25683;
  double t26434;
  double t26437;
  double t26440;
  double t26441;
  double t26442;
  double t26453;
  double t26470;
  double t26503;
  double t26508;
  double t26511;
  double t26513;
  double t26517;
  double t26518;
  double t26520;
  double t26522;
  double t26523;
  double t26524;
  double t26525;
  double t26526;
  double t27425;
  double t27426;
  double t27429;
  double t27432;
  double t27436;
  double t27437;
  double t27439;
  double t27440;
  double t27003;
  double t27076;
  double t27118;
  double t27183;
  double t27184;
  double t27185;
  double t27186;
  double t27187;
  double t27221;
  double t27252;
  double t27292;
  double t27308;
  double t27309;
  double t27310;
  double t27311;
  double t27312;
  double t27313;
  double t27316;
  double t27377;
  t11463 = Cos(var1[19]);
  t11581 = -1.*t11463;
  t12138 = 1. + t11581;
  t12183 = Cos(var1[4]);
  t12432 = Cos(var1[21]);
  t12435 = -1.*t12432;
  t12436 = 1. + t12435;
  t12438 = -3.e-6*t12436;
  t12440 = Sin(var1[21]);
  t12204 = Cos(var1[5]);
  t12253 = Sin(var1[19]);
  t12256 = Sin(var1[4]);
  t12323 = Sin(var1[5]);
  t12626 = 3.e-6*t12440;
  t12635 = t12438 + t12626;
  t12730 = 3.e-13*var1[21];
  t12441 = -3.e-6*t12440;
  t12564 = t12438 + t12441;
  t12737 = -9.e-12*t12436;
  t12666 = -3.e-6*t12138*t12183*t12204;
  t12672 = 3.e-6*t12253*t12256;
  t12690 = -9.e-12*t12138;
  t12693 = 1. + t12690;
  t12694 = t12693*t12183*t12323;
  t12705 = t12666 + t12672 + t12694;
  t12748 = -1.*t11463*t12183*t12204;
  t12752 = -1.*t12253*t12256;
  t12765 = 3.e-6*t12138*t12183*t12323;
  t12812 = t12748 + t12752 + t12765;
  t12819 = t12183*t12204*t12253;
  t12820 = -1.000000000009*t12138;
  t12822 = 1. + t12820;
  t12823 = -1.*t12822*t12256;
  t12824 = 3.e-6*t12183*t12253*t12323;
  t12827 = t12819 + t12823 + t12824;
  t12834 = 3.e-6*t12436;
  t12883 = -1.000000000009*t12436;
  t12907 = 1. + t12883;
  t12858 = 9.e-12*t12436;
  t12738 = -1.*t12440;
  t12836 = t12834 + t12441;
  t13001 = t12834 + t12626;
  t12146 = -1.8e-12*t12138;
  t12152 = -1. + t11463;
  t12174 = 0.2*t12152;
  t12175 = t12146 + t12174;
  t12431 = 1.e-7*var1[21];
  t12437 = 5.4e-18*t12436;
  t12575 = -0.200000000003*t12564;
  t12657 = 0.100000000003*t12635;
  t12663 = t12431 + t12437 + t12575 + t12657;
  t12736 = -0.2000000000048*t12436;
  t12739 = t12737 + t12738;
  t12740 = 0.100000000003*t12739;
  t12742 = 3.e-7*t12635;
  t12743 = t12730 + t12736 + t12740 + t12742;
  t12814 = 0.1000000000039*t12436;
  t12815 = 3.e-7*t12564;
  t12816 = t12737 + t12440;
  t12817 = -0.200000000003*t12816;
  t12818 = t12730 + t12814 + t12815 + t12817;
  t13087 = t12693*t12204*t12256;
  t13088 = 3.e-6*t12138*t12256*t12323;
  t13159 = t13087 + t13088;
  t12876 = t12858 + t12440;
  t13183 = 3.e-6*t12138*t12204*t12256;
  t13184 = t11463*t12256*t12323;
  t13185 = t13183 + t13184;
  t13188 = 3.e-6*t12204*t12253*t12256;
  t13189 = -1.*t12253*t12256*t12323;
  t13190 = t13188 + t13189;
  t13009 = t12858 + t12738;
  t13031 = -1.8e-11*t12436;
  t13036 = 1. + t13031;
  t13436 = 3.e-6*t12432;
  t13437 = t13436 + t12441;
  t13433 = -3.e-6*t12432;
  t13434 = t13433 + t12441;
  t13494 = -9.e-12*t12440;
  t13460 = -3.e-6*t12183*t12253;
  t13472 = -3.e-6*t12138*t12204*t12256;
  t13478 = t12693*t12256*t12323;
  t13486 = t13460 + t13472 + t13478;
  t13526 = t12183*t12253;
  t13603 = -1.*t11463*t12204*t12256;
  t13604 = t13526 + t13603 + t13088;
  t13613 = t12822*t12183;
  t13614 = t12204*t12253*t12256;
  t13615 = 3.e-6*t12253*t12256*t12323;
  t13616 = t13613 + t13614 + t13615;
  t13620 = t13436 + t12626;
  t13710 = t13433 + t12626;
  t13624 = 9.e-12*t12440;
  t13753 = -1.000000000009*t12183*t12253;
  t13754 = t11463*t12204*t12256;
  t13755 = 3.e-6*t11463*t12256*t12323;
  t13778 = t13753 + t13754 + t13755;
  t13788 = -3.e-6*t11463*t12183;
  t13789 = -3.e-6*t12204*t12253*t12256;
  t13811 = -9.e-12*t12253*t12256*t12323;
  t13812 = t13788 + t13789 + t13811;
  t13814 = t11463*t12183;
  t13816 = t13814 + t13614 + t13615;
  t12229 = -1.*t12175*t12183*t12204;
  t12427 = 6.000000000054e-7*t12138*t12183*t12323;
  t14449 = t12666 + t12694;
  t14455 = t12748 + t12765;
  t14457 = t12819 + t12824;
  t13435 = -0.200000000003*t13434;
  t13438 = 0.100000000003*t13437;
  t13440 = 5.4e-18*t12440;
  t13452 = 1.e-7 + t13435 + t13438 + t13440;
  t13493 = 3.e-7*t13437;
  t13495 = t12435 + t13494;
  t13501 = 0.100000000003*t13495;
  t13510 = -0.2000000000048*t12440;
  t13515 = 3.e-13 + t13493 + t13501 + t13510;
  t13607 = 3.e-7*t13434;
  t13608 = t12432 + t13494;
  t13609 = -0.200000000003*t13608;
  t13610 = 0.1000000000039*t12440;
  t13612 = 3.e-13 + t13607 + t13609 + t13610;
  t14982 = -1.*t12693*t12183*t12204;
  t14983 = -3.e-6*t12138*t12183*t12323;
  t14984 = t14982 + t14983;
  t14991 = -1.*t11463*t12183*t12323;
  t15011 = t12666 + t14991;
  t13625 = t12435 + t13624;
  t15014 = -3.e-6*t12183*t12204*t12253;
  t15015 = t12183*t12253*t12323;
  t15021 = t15014 + t15015;
  t13722 = t12432 + t13624;
  t15565 = -3.e-6*t11463*t12183*t12204;
  t15573 = t11463*t12183*t12323;
  t15574 = t15565 + t15573;
  t15580 = 9.e-12*t12183*t12204*t12253;
  t15585 = -3.e-6*t12183*t12253*t12323;
  t15588 = t15580 + t15585;
  t13082 = 6.000000000054e-7*t12138*t12204*t12256;
  t13086 = t12175*t12256*t12323;
  t13176 = t12663*t13159;
  t13186 = t12743*t13185;
  t13191 = t12818*t13190;
  t13194 = t12836*t13159;
  t13220 = t12876*t13185;
  t13234 = t12907*t13190;
  t13237 = t13194 + t13220 + t13234;
  t13254 = -0.3*t13237;
  t13255 = -1.*t13001*t13159;
  t13256 = -1.*t12907*t13185;
  t13283 = -1.*t13009*t13190;
  t13284 = t13255 + t13256 + t13283;
  t13285 = 0.2*t13284;
  t13288 = t13036*t13159;
  t13295 = t12836*t13185;
  t13306 = t13001*t13190;
  t13378 = t13288 + t13295 + t13306;
  t13415 = -0.099999*t13378;
  t13425 = t13082 + t13086 + t13176 + t13186 + t13191 + t13254 + t13285 + t13415;
  t15721 = -1.000000000009*t12253*t12256;
  t15724 = -3.e-6*t11463*t12183*t12323;
  t15725 = t12748 + t15721 + t15724;
  t15730 = -1.*t12183*t12204*t12253;
  t15734 = t11463*t12256;
  t15737 = t15730 + t15734 + t15585;
  t15741 = 3.e-6*t12183*t12204*t12253;
  t15743 = -3.e-6*t11463*t12256;
  t15746 = 9.e-12*t12183*t12253*t12323;
  t15749 = t15741 + t15743 + t15746;
  t12261 = -0.2000000000018*t12253*t12256;
  t15815 = t12748 + t12752 + t15724;
  t15817 = 3.e-6*t11463*t12183*t12204;
  t15818 = 9.e-12*t11463*t12183*t12323;
  t15819 = t15817 + t12672 + t15818;
  t15830 = -1.000000000009*t11463*t12256;
  t15831 = t12819 + t15830 + t12824;
  t15559 = -6.000000000054e-7*t12183*t12204*t12253;
  t15563 = 0.2000000000018*t12183*t12253*t12323;
  t15577 = t12818*t15574;
  t15589 = t12663*t15588;
  t15615 = t12743*t15021;
  t15625 = -1.*t13009*t15574;
  t15644 = -1.*t13001*t15588;
  t15648 = -1.*t12907*t15021;
  t15649 = t15625 + t15644 + t15648;
  t15651 = 0.2*t15649;
  t15653 = t13001*t15574;
  t15660 = t13036*t15588;
  t15671 = t12836*t15021;
  t15679 = t15653 + t15660 + t15671;
  t15680 = -0.099999*t15679;
  t15681 = t12907*t15574;
  t15683 = t12836*t15588;
  t15684 = t12876*t15021;
  t15688 = t15681 + t15683 + t15684;
  t15689 = -0.3*t15688;
  t15690 = t15559 + t15563 + t15577 + t15589 + t15615 + t15651 + t15680 + t15689;
  t13748 = 0.2000000000018*t11463*t12183;
  t13750 = 0.2000000000018*t12204*t12253*t12256;
  t13751 = 6.000000000054e-7*t12253*t12256*t12323;
  t13784 = t12818*t13778;
  t13813 = t12663*t13812;
  t13817 = t12743*t13816;
  t13818 = -1.*t13009*t13778;
  t13819 = -1.*t13001*t13812;
  t13821 = -1.*t12907*t13816;
  t13822 = t13818 + t13819 + t13821;
  t13868 = 0.2*t13822;
  t13882 = t13001*t13778;
  t13921 = t13036*t13812;
  t13930 = t12836*t13816;
  t13934 = t13882 + t13921 + t13930;
  t13938 = -0.099999*t13934;
  t13943 = t12907*t13778;
  t13945 = t12836*t13812;
  t13947 = t12876*t13816;
  t13957 = t13943 + t13945 + t13947;
  t13966 = -0.3*t13957;
  t14333 = t13748 + t13750 + t13751 + t13784 + t13813 + t13817 + t13868 + t13938 + t13966;
  t15911 = -9.e-12*t12432;
  t15890 = 3.e-6*t12138*t12183*t12204;
  t15895 = -3.e-6*t12253*t12256;
  t15897 = -1.*t12693*t12183*t12323;
  t15899 = t15890 + t15895 + t15897;
  t15919 = t11463*t12183*t12204;
  t15920 = t12253*t12256;
  t15932 = t15919 + t15920 + t14983;
  t15955 = t12822*t12256;
  t15957 = t15730 + t15955 + t15585;
  t15974 = 9.e-12*t12432;
  t15728 = t13612*t15725;
  t15739 = t13515*t15737;
  t15750 = t13452*t15749;
  t15751 = -1.000000000009*t12440*t15725;
  t15752 = t13722*t15737;
  t15753 = t13710*t15749;
  t15763 = t15751 + t15752 + t15753;
  t15765 = -0.3*t15763;
  t15766 = -1.*t13625*t15725;
  t15770 = 1.000000000009*t12440*t15737;
  t15780 = -1.*t13620*t15749;
  t15790 = t15766 + t15770 + t15780;
  t15793 = 0.2*t15790;
  t15798 = t13620*t15725;
  t15799 = t13710*t15737;
  t15800 = -1.8e-11*t12440*t15749;
  t15803 = t15798 + t15799 + t15800;
  t15806 = -0.099999*t15803;
  t15809 = t15728 + t15739 + t15750 + t15765 + t15793 + t15806;
  t14986 = t13452*t14984;
  t15013 = t13515*t15011;
  t15024 = t13612*t15021;
  t15026 = -1.*t13620*t14984;
  t15027 = 1.000000000009*t12440*t15011;
  t15039 = -1.*t13625*t15021;
  t15046 = t15026 + t15027 + t15039;
  t15296 = 0.2*t15046;
  t15312 = -1.8e-11*t12440*t14984;
  t15380 = t13710*t15011;
  t15421 = t13620*t15021;
  t15423 = t15312 + t15380 + t15421;
  t15451 = -0.099999*t15423;
  t15518 = t13710*t14984;
  t15522 = t13722*t15011;
  t15526 = -1.000000000009*t12440*t15021;
  t15531 = t15518 + t15522 + t15526;
  t15532 = -0.3*t15531;
  t15533 = t14986 + t15013 + t15024 + t15296 + t15451 + t15532;
  t13487 = t13452*t13486;
  t13605 = t13515*t13604;
  t13619 = t13612*t13616;
  t13622 = -1.*t13620*t13486;
  t13623 = 1.000000000009*t12440*t13604;
  t13655 = -1.*t13625*t13616;
  t13701 = t13622 + t13623 + t13655;
  t13707 = 0.2*t13701;
  t13708 = -1.8e-11*t12440*t13486;
  t13713 = t13710*t13604;
  t13717 = t13620*t13616;
  t13718 = t13708 + t13713 + t13717;
  t13719 = -0.099999*t13718;
  t13720 = t13710*t13486;
  t13734 = t13722*t13604;
  t13742 = -1.000000000009*t12440*t13616;
  t13743 = t13720 + t13734 + t13742;
  t13744 = -0.3*t13743;
  t13746 = t13487 + t13605 + t13619 + t13707 + t13719 + t13744;
  t16844 = Cos(var1[3]);
  t16896 = 3.e-6*t12138*t16844*t12183*t12204;
  t16901 = -3.e-6*t16844*t12253*t12256;
  t16905 = -1.*t12693*t16844*t12183*t12323;
  t16906 = t16896 + t16901 + t16905;
  t16917 = t11463*t16844*t12183*t12204;
  t16923 = t16844*t12253*t12256;
  t16933 = -3.e-6*t12138*t16844*t12183*t12323;
  t16936 = t16917 + t16923 + t16933;
  t16954 = -1.*t16844*t12183*t12204*t12253;
  t16955 = t12822*t16844*t12256;
  t16963 = -3.e-6*t16844*t12183*t12253*t12323;
  t16964 = t16954 + t16955 + t16963;
  t17023 = Sin(var1[3]);
  t17014 = -1.*t16844*t12204*t12256;
  t17024 = t17023*t12323;
  t17025 = t17014 + t17024;
  t17029 = -1.*t12204*t17023;
  t17031 = -1.*t16844*t12256*t12323;
  t17032 = t17029 + t17031;
  t17036 = t12693*t17025;
  t17037 = 3.e-6*t12138*t17032;
  t17059 = t17036 + t17037;
  t17066 = 3.e-6*t12138*t17025;
  t17067 = t11463*t17032;
  t17104 = t17066 + t17067;
  t17186 = 3.e-6*t12253*t17025;
  t17187 = -1.*t12253*t17032;
  t17189 = t17186 + t17187;
  t17394 = t16844*t12204*t12256;
  t17402 = -1.*t17023*t12323;
  t17403 = t17394 + t17402;
  t17392 = 3.e-6*t16844*t12183*t12253;
  t17404 = 3.e-6*t12138*t17403;
  t17405 = t12693*t17032;
  t17406 = t17392 + t17404 + t17405;
  t17471 = -1.*t16844*t12183*t12253;
  t17475 = t11463*t17403;
  t17509 = t17471 + t17475 + t17037;
  t17515 = -1.*t12822*t16844*t12183;
  t17550 = -1.*t12253*t17403;
  t17554 = 3.e-6*t12253*t17032;
  t17558 = t17515 + t17550 + t17554;
  t17669 = 1.000000000009*t16844*t12183*t12253;
  t17707 = -1.*t11463*t17403;
  t17709 = 3.e-6*t11463*t17032;
  t17710 = t17669 + t17707 + t17709;
  t17713 = 3.e-6*t11463*t16844*t12183;
  t17717 = 3.e-6*t12253*t17403;
  t17728 = -9.e-12*t12253*t17032;
  t17735 = t17713 + t17717 + t17728;
  t17771 = -1.*t11463*t16844*t12183;
  t17772 = t17771 + t17550 + t17554;
  t17873 = -1.*t12204*t17023*t12256;
  t17874 = -1.*t16844*t12323;
  t17876 = t17873 + t17874;
  t17878 = -1.*t16844*t12204;
  t17882 = t17023*t12256*t12323;
  t17883 = t17878 + t17882;
  t17933 = -3.e-6*t12183*t12253*t17023;
  t17938 = 3.e-6*t12138*t17876;
  t17942 = t12693*t17883;
  t17950 = t17933 + t17938 + t17942;
  t17993 = t12183*t12253*t17023;
  t17994 = t11463*t17876;
  t17995 = 3.e-6*t12138*t17883;
  t17997 = t17993 + t17994 + t17995;
  t18002 = t12822*t12183*t17023;
  t18024 = -1.*t12253*t17876;
  t18027 = 3.e-6*t12253*t17883;
  t18029 = t18002 + t18024 + t18027;
  t16848 = t12175*t16844*t12183*t12204;
  t16873 = 0.2000000000018*t16844*t12253*t12256;
  t16892 = -6.000000000054e-7*t12138*t16844*t12183*t12323;
  t16914 = t12663*t16906;
  t16952 = t12743*t16936;
  t16966 = t12818*t16964;
  t16967 = t12836*t16906;
  t16971 = t12876*t16936;
  t16972 = t12907*t16964;
  t16974 = t16967 + t16971 + t16972;
  t16975 = -0.3*t16974;
  t16979 = -1.*t13001*t16906;
  t16980 = -1.*t12907*t16936;
  t16983 = -1.*t13009*t16964;
  t16985 = t16979 + t16980 + t16983;
  t16988 = 0.2*t16985;
  t16990 = t13036*t16906;
  t16992 = t12836*t16936;
  t16995 = t13001*t16964;
  t17000 = t16990 + t16992 + t16995;
  t17001 = -0.099999*t17000;
  t17005 = t16848 + t16873 + t16892 + t16914 + t16952 + t16966 + t16975 + t16988 + t17001;
  t18253 = 3.e-6*t12138*t12183*t12204*t17023;
  t18255 = -3.e-6*t12253*t17023*t12256;
  t18276 = -1.*t12693*t12183*t17023*t12323;
  t18277 = t18253 + t18255 + t18276;
  t18458 = t11463*t12183*t12204*t17023;
  t18464 = t12253*t17023*t12256;
  t18571 = -3.e-6*t12138*t12183*t17023*t12323;
  t18575 = t18458 + t18464 + t18571;
  t18580 = -1.*t12183*t12204*t12253*t17023;
  t18583 = t12822*t17023*t12256;
  t18584 = -3.e-6*t12183*t12253*t17023*t12323;
  t18664 = t18580 + t18583 + t18584;
  t19886 = -1.*t11463*t12183*t12204*t17023;
  t19890 = -1.000000000009*t12253*t17023*t12256;
  t19928 = -3.e-6*t11463*t12183*t17023*t12323;
  t19931 = t19886 + t19890 + t19928;
  t19970 = t11463*t17023*t12256;
  t20244 = t18580 + t19970 + t18584;
  t20249 = 3.e-6*t12183*t12204*t12253*t17023;
  t20256 = -3.e-6*t11463*t17023*t12256;
  t20339 = 9.e-12*t12183*t12253*t17023*t12323;
  t20350 = t20249 + t20256 + t20339;
  t20701 = -1.*t12693*t12183*t12204*t17023;
  t20735 = t20701 + t18571;
  t20750 = -3.e-6*t12138*t12183*t12204*t17023;
  t20795 = -1.*t11463*t12183*t17023*t12323;
  t20796 = t20750 + t20795;
  t20817 = -3.e-6*t12183*t12204*t12253*t17023;
  t20827 = t12183*t12253*t17023*t12323;
  t20833 = t20817 + t20827;
  t17872 = 0.2000000000018*t12183*t12253*t17023;
  t21092 = -3.e-6*t12138*t12204*t17023*t12256;
  t21103 = t12693*t17023*t12256*t12323;
  t21105 = t17933 + t21092 + t21103;
  t21107 = -1.*t11463*t12204*t17023*t12256;
  t21109 = 3.e-6*t12138*t17023*t12256*t12323;
  t21111 = t17993 + t21107 + t21109;
  t21115 = t12204*t12253*t17023*t12256;
  t21119 = 3.e-6*t12253*t17023*t12256*t12323;
  t21120 = t18002 + t21115 + t21119;
  t20682 = -6.000000000054e-7*t12138*t12183*t12204*t17023;
  t20700 = -1.*t12175*t12183*t17023*t12323;
  t20738 = t12663*t20735;
  t20799 = t12743*t20796;
  t20838 = t12818*t20833;
  t20906 = t12836*t20735;
  t20954 = t12876*t20796;
  t20975 = t12907*t20833;
  t20989 = t20906 + t20954 + t20975;
  t20995 = -0.3*t20989;
  t21002 = -1.*t13001*t20735;
  t21022 = -1.*t12907*t20796;
  t21041 = -1.*t13009*t20833;
  t21045 = t21002 + t21022 + t21041;
  t21051 = 0.2*t21045;
  t21054 = t13036*t20735;
  t21055 = t12836*t20796;
  t21064 = t13001*t20833;
  t21067 = t21054 + t21055 + t21064;
  t21070 = -0.099999*t21067;
  t21074 = t20682 + t20700 + t20738 + t20799 + t20838 + t20995 + t21051 + t21070;
  t17028 = 6.000000000054e-7*t12138*t17025;
  t17035 = t12175*t17032;
  t17065 = t12663*t17059;
  t17176 = t12743*t17104;
  t17190 = t12818*t17189;
  t17191 = t12836*t17059;
  t17209 = t12876*t17104;
  t17248 = t12907*t17189;
  t17273 = t17191 + t17209 + t17248;
  t17283 = -0.3*t17273;
  t17340 = -1.*t13001*t17059;
  t17346 = -1.*t12907*t17104;
  t17347 = -1.*t13009*t17189;
  t17348 = t17340 + t17346 + t17347;
  t17349 = 0.2*t17348;
  t17350 = t13036*t17059;
  t17355 = t12836*t17104;
  t17360 = t13001*t17189;
  t17361 = t17350 + t17355 + t17360;
  t17366 = -0.099999*t17361;
  t17383 = t17028 + t17035 + t17065 + t17176 + t17190 + t17283 + t17349 + t17366;
  t21250 = t16844*t12204;
  t21252 = -1.*t17023*t12256*t12323;
  t21263 = t21250 + t21252;
  t21241 = t12693*t17876;
  t21280 = 3.e-6*t12138*t21263;
  t21283 = t21241 + t21280;
  t21296 = t11463*t21263;
  t21302 = t17938 + t21296;
  t21319 = 3.e-6*t12253*t17876;
  t21330 = -1.*t12253*t21263;
  t21335 = t21319 + t21330;
  t21545 = 3.e-6*t11463*t17876;
  t21562 = -1.*t11463*t21263;
  t21564 = t21545 + t21562;
  t21637 = -9.e-12*t12253*t17876;
  t21638 = 3.e-6*t12253*t21263;
  t21643 = t21637 + t21638;
  t17877 = t12175*t17876;
  t17920 = 6.000000000054e-7*t12138*t17883;
  t21867 = t17938 + t17942;
  t21883 = t17994 + t17995;
  t21902 = t18024 + t18027;
  t19606 = -0.2000000000018*t12183*t12204*t12253*t17023;
  t19658 = 0.2000000000018*t11463*t17023*t12256;
  t19665 = -6.000000000054e-7*t12183*t12253*t17023*t12323;
  t19961 = t12818*t19931;
  t20246 = t12743*t20244;
  t20351 = t12663*t20350;
  t20396 = t13001*t19931;
  t20406 = t12836*t20244;
  t20409 = t13036*t20350;
  t20431 = t20396 + t20406 + t20409;
  t20448 = -0.099999*t20431;
  t20457 = t12907*t19931;
  t20523 = t12876*t20244;
  t20526 = t12836*t20350;
  t20567 = t20457 + t20523 + t20526;
  t20572 = -0.3*t20567;
  t20573 = -1.*t13009*t19931;
  t20578 = -1.*t12907*t20244;
  t20601 = -1.*t13001*t20350;
  t20613 = t20573 + t20578 + t20601;
  t20672 = 0.2*t20613;
  t20674 = t19606 + t19658 + t19665 + t19961 + t20246 + t20351 + t20448 + t20572 + t20672;
  t17666 = -0.2000000000018*t11463*t16844*t12183;
  t17667 = -0.2000000000018*t12253*t17403;
  t17668 = 6.000000000054e-7*t12253*t17032;
  t17711 = t12818*t17710;
  t17740 = t12663*t17735;
  t17782 = t12743*t17772;
  t17784 = -1.*t13009*t17710;
  t17786 = -1.*t13001*t17735;
  t17793 = -1.*t12907*t17772;
  t17808 = t17784 + t17786 + t17793;
  t17820 = 0.2*t17808;
  t17823 = t13001*t17710;
  t17826 = t13036*t17735;
  t17827 = t12836*t17772;
  t17836 = t17823 + t17826 + t17827;
  t17840 = -0.099999*t17836;
  t17843 = t12907*t17710;
  t17844 = t12836*t17735;
  t17847 = t12876*t17772;
  t17848 = t17843 + t17844 + t17847;
  t17868 = -0.3*t17848;
  t17869 = t17666 + t17667 + t17668 + t17711 + t17740 + t17782 + t17820 + t17840 + t17868;
  t22407 = t12204*t17023*t12256;
  t22409 = t16844*t12323;
  t22482 = t22407 + t22409;
  t22534 = 3.e-6*t11463*t22482;
  t22540 = -9.e-12*t11463*t21263;
  t22623 = t17933 + t22534 + t22540;
  t22753 = -1.*t11463*t22482;
  t22776 = 3.e-6*t11463*t21263;
  t22782 = t17993 + t22753 + t22776;
  t22969 = 1.000000000009*t11463*t12183*t17023;
  t22992 = t12253*t22482;
  t23064 = -3.e-6*t12253*t21263;
  t23070 = t22969 + t22992 + t23064;
  t21535 = 6.000000000054e-7*t12253*t17876;
  t21539 = -0.2000000000018*t12253*t21263;
  t21571 = t12818*t21564;
  t21601 = t12743*t21335;
  t21699 = t12663*t21643;
  t21710 = t13001*t21564;
  t21712 = t12836*t21335;
  t21729 = t13036*t21643;
  t21752 = t21710 + t21712 + t21729;
  t21765 = -0.099999*t21752;
  t21787 = t12907*t21564;
  t21790 = t12876*t21335;
  t21800 = t12836*t21643;
  t21802 = t21787 + t21790 + t21800;
  t21807 = -0.3*t21802;
  t21815 = -1.*t13009*t21564;
  t21816 = -1.*t12907*t21335;
  t21824 = -1.*t13001*t21643;
  t21829 = t21815 + t21816 + t21824;
  t21830 = 0.2*t21829;
  t21841 = t21535 + t21539 + t21571 + t21601 + t21699 + t21765 + t21807 + t21830;
  t23577 = 1.000000000009*t12183*t12253*t17023;
  t23590 = t23577 + t22753 + t22776;
  t23606 = 3.e-6*t11463*t12183*t17023;
  t23623 = 3.e-6*t12253*t22482;
  t23624 = -9.e-12*t12253*t21263;
  t23646 = t23606 + t23623 + t23624;
  t23687 = -1.*t11463*t12183*t17023;
  t23691 = -1.*t12253*t22482;
  t23692 = t23687 + t23691 + t21638;
  t18453 = t13452*t18277;
  t18578 = t13515*t18575;
  t18666 = t13612*t18664;
  t18701 = -1.*t13620*t18277;
  t19204 = 1.000000000009*t12440*t18575;
  t19205 = -1.*t13625*t18664;
  t19263 = t18701 + t19204 + t19205;
  t19335 = 0.2*t19263;
  t19337 = -1.8e-11*t12440*t18277;
  t19350 = t13710*t18575;
  t19373 = t13620*t18664;
  t19382 = t19337 + t19350 + t19373;
  t19404 = -0.099999*t19382;
  t19406 = t13710*t18277;
  t19417 = t13722*t18575;
  t19456 = -1.000000000009*t12440*t18664;
  t19484 = t19406 + t19417 + t19456;
  t19486 = -0.3*t19484;
  t19487 = t18453 + t18578 + t18666 + t19335 + t19404 + t19486;
  t17438 = t13452*t17406;
  t17514 = t13515*t17509;
  t17574 = t13612*t17558;
  t17585 = -1.*t13620*t17406;
  t17596 = 1.000000000009*t12440*t17509;
  t17611 = -1.*t13625*t17558;
  t17612 = t17585 + t17596 + t17611;
  t17613 = 0.2*t17612;
  t17615 = -1.8e-11*t12440*t17406;
  t17616 = t13710*t17509;
  t17617 = t13620*t17558;
  t17630 = t17615 + t17616 + t17617;
  t17652 = -0.099999*t17630;
  t17656 = t13710*t17406;
  t17657 = t13722*t17509;
  t17659 = -1.000000000009*t12440*t17558;
  t17661 = t17656 + t17657 + t17659;
  t17662 = -0.3*t17661;
  t17663 = t17438 + t17514 + t17574 + t17613 + t17652 + t17662;
  t21295 = t13452*t21283;
  t21307 = t13515*t21302;
  t21339 = t13612*t21335;
  t21353 = -1.*t13620*t21283;
  t21364 = 1.000000000009*t12440*t21302;
  t21371 = -1.*t13625*t21335;
  t21398 = t21353 + t21364 + t21371;
  t21399 = 0.2*t21398;
  t21400 = -1.8e-11*t12440*t21283;
  t21428 = t13710*t21302;
  t21445 = t13620*t21335;
  t21448 = t21400 + t21428 + t21445;
  t21452 = -0.099999*t21448;
  t21481 = t13710*t21283;
  t21493 = t13722*t21302;
  t21495 = -1.000000000009*t12440*t21335;
  t21496 = t21481 + t21493 + t21495;
  t21500 = -0.3*t21496;
  t21502 = t21295 + t21307 + t21339 + t21399 + t21452 + t21500;
  t15882 = 5.4e-18*t12432;
  t15883 = 0.100000000003*t13434;
  t15887 = -0.200000000003*t13710;
  t15888 = t15882 + t15883 + t15887;
  t15910 = -0.2000000000048*t12432;
  t15912 = t15911 + t12440;
  t15913 = 0.100000000003*t15912;
  t15918 = t15910 + t13607 + t15913;
  t15936 = 0.1000000000039*t12432;
  t15940 = t15911 + t12738;
  t15944 = -0.200000000003*t15940;
  t15946 = 3.e-7*t13710;
  t15954 = t15936 + t15944 + t15946;
  t24086 = 3.e-6*t12183*t12253*t17023;
  t24087 = 3.e-6*t12138*t22482;
  t24092 = t12693*t21263;
  t24098 = t24086 + t24087 + t24092;
  t15977 = t15974 + t12738;
  t24128 = -1.*t12183*t12253*t17023;
  t24170 = t11463*t22482;
  t24171 = t24128 + t24170 + t21280;
  t24200 = -1.*t12822*t12183*t17023;
  t24201 = t24200 + t23691 + t21638;
  t16092 = t15974 + t12440;
  t23605 = t13612*t23590;
  t23668 = t13452*t23646;
  t23719 = t13515*t23692;
  t23724 = -1.000000000009*t12440*t23590;
  t23743 = t13710*t23646;
  t23747 = t13722*t23692;
  t23754 = t23724 + t23743 + t23747;
  t23761 = -0.3*t23754;
  t23814 = t13620*t23590;
  t23908 = -1.8e-11*t12440*t23646;
  t23917 = t13710*t23692;
  t23960 = t23814 + t23908 + t23917;
  t23964 = -0.099999*t23960;
  t23968 = -1.*t13625*t23590;
  t23971 = -1.*t13620*t23646;
  t23983 = 1.000000000009*t12440*t23692;
  t24003 = t23968 + t23971 + t23983;
  t24004 = 0.2*t24003;
  t24006 = t23605 + t23668 + t23719 + t23761 + t23964 + t24004;
  t24419 = t12175*t12183*t12204*t17023;
  t24420 = 0.2000000000018*t12253*t17023*t12256;
  t24421 = -6.000000000054e-7*t12138*t12183*t17023*t12323;
  t24422 = t12663*t18277;
  t24423 = t12743*t18575;
  t24424 = t12818*t18664;
  t24425 = t12836*t18277;
  t24426 = t12876*t18575;
  t24427 = t12907*t18664;
  t24428 = t24425 + t24426 + t24427;
  t24429 = -0.3*t24428;
  t24430 = -1.*t13001*t18277;
  t24431 = -1.*t12907*t18575;
  t24432 = -1.*t13009*t18664;
  t24433 = t24430 + t24431 + t24432;
  t24437 = 0.2*t24433;
  t24439 = t13036*t18277;
  t24441 = t12836*t18575;
  t24444 = t13001*t18664;
  t24446 = t24439 + t24441 + t24444;
  t24448 = -0.099999*t24446;
  t24449 = t24419 + t24420 + t24421 + t24422 + t24423 + t24424 + t24429 + t24437 + t24448;
  t24368 = -0.2000000000018*t16844*t12183*t12253;
  t24372 = t12175*t17403;
  t24373 = 6.000000000054e-7*t12138*t17032;
  t24374 = t12663*t17406;
  t24375 = t12743*t17509;
  t24389 = t12818*t17558;
  t24390 = t12836*t17406;
  t24392 = t12876*t17509;
  t24393 = t12907*t17558;
  t24394 = t24390 + t24392 + t24393;
  t24398 = -0.3*t24394;
  t24400 = -1.*t13001*t17406;
  t24401 = -1.*t12907*t17509;
  t24404 = -1.*t13009*t17558;
  t24405 = t24400 + t24401 + t24404;
  t24406 = 0.2*t24405;
  t24407 = t13036*t17406;
  t24413 = t12836*t17509;
  t24415 = t13001*t17558;
  t24416 = t24407 + t24413 + t24415;
  t24417 = -0.099999*t24416;
  t24418 = t24368 + t24372 + t24373 + t24374 + t24375 + t24389 + t24398 + t24406 + t24417;
  t24452 = 6.000000000054e-7*t12138*t17876;
  t24453 = t12175*t21263;
  t24455 = t12663*t21283;
  t24456 = t12743*t21302;
  t24457 = t12818*t21335;
  t24458 = t12836*t21283;
  t24459 = t12876*t21302;
  t24482 = t12907*t21335;
  t24483 = t24458 + t24459 + t24482;
  t24531 = -0.3*t24483;
  t24533 = -1.*t13001*t21283;
  t24544 = -1.*t12907*t21302;
  t24547 = -1.*t13009*t21335;
  t24556 = t24533 + t24544 + t24547;
  t24560 = 0.2*t24556;
  t24567 = t13036*t21283;
  t24571 = t12836*t21302;
  t24576 = t13001*t21335;
  t24587 = t24567 + t24571 + t24576;
  t24588 = -0.099999*t24587;
  t24589 = t24452 + t24453 + t24455 + t24456 + t24457 + t24531 + t24560 + t24588;
  t24725 = t13452*t24098;
  t24729 = t13515*t24171;
  t24730 = t13612*t24201;
  t24734 = -1.*t13620*t24098;
  t24752 = 1.000000000009*t12440*t24171;
  t24753 = -1.*t13625*t24201;
  t24754 = t24734 + t24752 + t24753;
  t24770 = 0.2*t24754;
  t24773 = -1.8e-11*t12440*t24098;
  t24784 = t13710*t24171;
  t24794 = t13620*t24201;
  t24820 = t24773 + t24784 + t24794;
  t24826 = -0.099999*t24820;
  t24844 = t13710*t24098;
  t25006 = t13722*t24171;
  t25034 = -1.000000000009*t12440*t24201;
  t25121 = t24844 + t25006 + t25034;
  t25139 = -0.3*t25121;
  t25152 = t24725 + t24729 + t24730 + t24770 + t24826 + t25139;
  t24595 = -0.2000000000018*t11463*t12183*t17023;
  t24598 = -0.2000000000018*t12253*t22482;
  t24599 = 6.000000000054e-7*t12253*t21263;
  t24601 = t12818*t23590;
  t24608 = t12663*t23646;
  t24615 = t12743*t23692;
  t24616 = -1.*t13009*t23590;
  t24617 = -1.*t13001*t23646;
  t24623 = -1.*t12907*t23692;
  t24625 = t24616 + t24617 + t24623;
  t24630 = 0.2*t24625;
  t24631 = t13001*t23590;
  t24639 = t13036*t23646;
  t24640 = t12836*t23692;
  t24660 = t24631 + t24639 + t24640;
  t24673 = -0.099999*t24660;
  t24676 = t12907*t23590;
  t24681 = t12836*t23646;
  t24684 = t12876*t23692;
  t24685 = t24676 + t24681 + t24684;
  t24705 = -0.3*t24685;
  t24708 = t24595 + t24598 + t24599 + t24601 + t24608 + t24615 + t24630 + t24673 + t24705;
  t25260 = t12693*t16844*t12183*t12204;
  t25261 = 3.e-6*t12138*t16844*t12183*t12323;
  t25262 = t25260 + t25261;
  t25272 = t11463*t16844*t12183*t12323;
  t25276 = t16896 + t25272;
  t25288 = 3.e-6*t16844*t12183*t12204*t12253;
  t25292 = -1.*t16844*t12183*t12253*t12323;
  t25293 = t25288 + t25292;
  t25345 = -3.e-6*t12138*t16844*t12183*t12204;
  t25350 = 3.e-6*t16844*t12253*t12256;
  t25352 = t12693*t16844*t12183*t12323;
  t25359 = t25345 + t25350 + t25352;
  t25375 = -1.*t11463*t16844*t12183*t12204;
  t25378 = -1.*t16844*t12253*t12256;
  t25379 = t25375 + t25378 + t25261;
  t25393 = t16844*t12183*t12204*t12253;
  t25410 = -1.*t12822*t16844*t12256;
  t25415 = 3.e-6*t16844*t12183*t12253*t12323;
  t25422 = t25393 + t25410 + t25415;
  t25697 = 1.000000000009*t16844*t12253*t12256;
  t25718 = 3.e-6*t11463*t16844*t12183*t12323;
  t25746 = t16917 + t25697 + t25718;
  t25832 = -3.e-6*t16844*t12183*t12204*t12253;
  t25834 = 3.e-6*t11463*t16844*t12256;
  t25836 = -9.e-12*t16844*t12183*t12253*t12323;
  t25840 = t25832 + t25834 + t25836;
  t25864 = -1.*t11463*t16844*t12256;
  t25865 = t25393 + t25864 + t25415;
  t26044 = 3.e-6*t12138*t16844*t12204*t12256;
  t26050 = -1.*t12693*t16844*t12256*t12323;
  t26069 = t17392 + t26044 + t26050;
  t26074 = t11463*t16844*t12204*t12256;
  t26076 = -3.e-6*t12138*t16844*t12256*t12323;
  t26077 = t17471 + t26074 + t26076;
  t26130 = -1.*t16844*t12204*t12253*t12256;
  t26131 = -3.e-6*t16844*t12253*t12256*t12323;
  t26148 = t17515 + t26130 + t26131;
  t25252 = 6.000000000054e-7*t12138*t16844*t12183*t12204;
  t25254 = t12175*t16844*t12183*t12323;
  t25270 = t12663*t25262;
  t25287 = t12743*t25276;
  t25297 = t12818*t25293;
  t25299 = t12836*t25262;
  t25301 = t12876*t25276;
  t25309 = t12907*t25293;
  t25314 = t25299 + t25301 + t25309;
  t25315 = -0.3*t25314;
  t25317 = -1.*t13001*t25262;
  t25318 = -1.*t12907*t25276;
  t25320 = -1.*t13009*t25293;
  t25323 = t25317 + t25318 + t25320;
  t25328 = 0.2*t25323;
  t25330 = t13036*t25262;
  t25336 = t12836*t25276;
  t25337 = t13001*t25293;
  t25338 = t25330 + t25336 + t25337;
  t25341 = -0.099999*t25338;
  t25342 = t25252 + t25254 + t25270 + t25287 + t25297 + t25315 + t25328 + t25341;
  t26260 = t17404 + t17405;
  t26300 = t17475 + t17037;
  t26323 = t17550 + t17554;
  t26429 = t12204*t17023;
  t26430 = t16844*t12256*t12323;
  t26431 = t26429 + t26430;
  t26428 = t12693*t17403;
  t26432 = 3.e-6*t12138*t26431;
  t26433 = t26428 + t26432;
  t26435 = t11463*t26431;
  t26436 = t17404 + t26435;
  t26438 = -1.*t12253*t26431;
  t26439 = t17717 + t26438;
  t26530 = 3.e-6*t11463*t17403;
  t26531 = -1.*t11463*t26431;
  t26532 = t26530 + t26531;
  t26535 = -9.e-12*t12253*t17403;
  t26536 = 3.e-6*t12253*t26431;
  t26537 = t26535 + t26536;
  t25685 = 0.2000000000018*t16844*t12183*t12204*t12253;
  t25686 = -0.2000000000018*t11463*t16844*t12256;
  t25693 = 6.000000000054e-7*t16844*t12183*t12253*t12323;
  t25788 = t12818*t25746;
  t25844 = t12663*t25840;
  t25866 = t12743*t25865;
  t25867 = -1.*t13009*t25746;
  t25868 = -1.*t13001*t25840;
  t25870 = -1.*t12907*t25865;
  t25872 = t25867 + t25868 + t25870;
  t25874 = 0.2*t25872;
  t25895 = t13001*t25746;
  t25899 = t13036*t25840;
  t25903 = t12836*t25865;
  t25909 = t25895 + t25899 + t25903;
  t25910 = -0.099999*t25909;
  t25911 = t12907*t25746;
  t25912 = t12836*t25840;
  t25913 = t12876*t25865;
  t25914 = t25911 + t25912 + t25913;
  t25924 = -0.3*t25914;
  t25955 = t25685 + t25686 + t25693 + t25788 + t25844 + t25866 + t25874 + t25910 + t25924;
  t26568 = 3.e-6*t11463*t17025;
  t26584 = -9.e-12*t11463*t26431;
  t26585 = t17392 + t26568 + t26584;
  t26605 = -1.*t11463*t17025;
  t26606 = 3.e-6*t11463*t26431;
  t26608 = t17471 + t26605 + t26606;
  t26611 = -1.000000000009*t11463*t16844*t12183;
  t26621 = t12253*t17025;
  t26622 = -3.e-6*t12253*t26431;
  t26683 = t26611 + t26621 + t26622;
  t26528 = 6.000000000054e-7*t12253*t17403;
  t26529 = -0.2000000000018*t12253*t26431;
  t26533 = t12818*t26532;
  t26534 = t12743*t26439;
  t26538 = t12663*t26537;
  t26540 = t13001*t26532;
  t26542 = t12836*t26439;
  t26543 = t13036*t26537;
  t26546 = t26540 + t26542 + t26543;
  t26547 = -0.099999*t26546;
  t26549 = t12907*t26532;
  t26550 = t12876*t26439;
  t26551 = t12836*t26537;
  t26554 = t26549 + t26550 + t26551;
  t26555 = -0.3*t26554;
  t26556 = -1.*t13009*t26532;
  t26557 = -1.*t12907*t26439;
  t26558 = -1.*t13001*t26537;
  t26559 = t26556 + t26557 + t26558;
  t26560 = 0.2*t26559;
  t26561 = t26528 + t26529 + t26533 + t26534 + t26538 + t26547 + t26555 + t26560;
  t26832 = -1.000000000009*t16844*t12183*t12253;
  t27002 = t26832 + t26605 + t26606;
  t27010 = -3.e-6*t11463*t16844*t12183;
  t27019 = -9.e-12*t12253*t26431;
  t27070 = t27010 + t17186 + t27019;
  t27080 = t11463*t16844*t12183;
  t27092 = -1.*t12253*t17025;
  t27111 = t27080 + t27092 + t26536;
  t25361 = t13452*t25359;
  t25385 = t13515*t25379;
  t25426 = t13612*t25422;
  t25428 = -1.*t13620*t25359;
  t25444 = 1.000000000009*t12440*t25379;
  t25469 = -1.*t13625*t25422;
  t25470 = t25428 + t25444 + t25469;
  t25504 = 0.2*t25470;
  t25525 = -1.8e-11*t12440*t25359;
  t25558 = t13710*t25379;
  t25561 = t13620*t25422;
  t25571 = t25525 + t25558 + t25561;
  t25582 = -0.099999*t25571;
  t25592 = t13710*t25359;
  t25616 = t13722*t25379;
  t25635 = -1.000000000009*t12440*t25422;
  t25639 = t25592 + t25616 + t25635;
  t25652 = -0.3*t25639;
  t25683 = t25361 + t25385 + t25426 + t25504 + t25582 + t25652;
  t26434 = t13452*t26433;
  t26437 = t13515*t26436;
  t26440 = t13612*t26439;
  t26441 = -1.*t13620*t26433;
  t26442 = 1.000000000009*t12440*t26436;
  t26453 = -1.*t13625*t26439;
  t26470 = t26441 + t26442 + t26453;
  t26503 = 0.2*t26470;
  t26508 = -1.8e-11*t12440*t26433;
  t26511 = t13710*t26436;
  t26513 = t13620*t26439;
  t26517 = t26508 + t26511 + t26513;
  t26518 = -0.099999*t26517;
  t26520 = t13710*t26433;
  t26522 = t13722*t26436;
  t26523 = -1.000000000009*t12440*t26439;
  t26524 = t26520 + t26522 + t26523;
  t26525 = -0.3*t26524;
  t26526 = t26434 + t26437 + t26440 + t26503 + t26518 + t26525;
  t27425 = -3.e-6*t16844*t12183*t12253;
  t27426 = t12693*t26431;
  t27429 = t27425 + t17066 + t27426;
  t27432 = t16844*t12183*t12253;
  t27436 = t11463*t17025;
  t27437 = t27432 + t27436 + t26432;
  t27439 = t12822*t16844*t12183;
  t27440 = t27439 + t27092 + t26536;
  t27003 = t13612*t27002;
  t27076 = t13452*t27070;
  t27118 = t13515*t27111;
  t27183 = -1.000000000009*t12440*t27002;
  t27184 = t13710*t27070;
  t27185 = t13722*t27111;
  t27186 = t27183 + t27184 + t27185;
  t27187 = -0.3*t27186;
  t27221 = t13620*t27002;
  t27252 = -1.8e-11*t12440*t27070;
  t27292 = t13710*t27111;
  t27308 = t27221 + t27252 + t27292;
  t27309 = -0.099999*t27308;
  t27310 = -1.*t13625*t27002;
  t27311 = -1.*t13620*t27070;
  t27312 = 1.000000000009*t12440*t27111;
  t27313 = t27310 + t27311 + t27312;
  t27316 = 0.2*t27313;
  t27377 = t27003 + t27076 + t27118 + t27187 + t27309 + t27316;
  p_output1[0]=(t12229 + t12261 + t12427 + t12663*t12705 + t12743*t12812 + t12818*t12827 - 0.3*(t12705*t12836 + t12812*t12876 + t12827*t12907) + 0.2*(-1.*t12812*t12907 - 1.*t12705*t13001 - 1.*t12827*t13009) - 0.099999*(t12812*t12836 + t12827*t13001 + t12705*t13036))*var2[4] + t13425*var2[5] + t14333*var2[19] + t13746*var2[21];
  p_output1[1]=t13425*var2[4] + (t12229 + t12427 + t12663*t14449 + t12743*t14455 + t12818*t14457 - 0.3*(t12836*t14449 + t12876*t14455 + t12907*t14457) - 0.099999*(t13036*t14449 + t12836*t14455 + t13001*t14457) + 0.2*(-1.*t13001*t14449 - 1.*t12907*t14455 - 1.*t13009*t14457))*var2[5] + t15690*var2[19] + t15533*var2[21];
  p_output1[2]=t14333*var2[4] + t15690*var2[5] + (-0.2000000000018*t11463*t12183*t12204 + t12261 - 6.000000000054e-7*t11463*t12183*t12323 + t12743*t15815 + t12663*t15819 + t12818*t15831 - 0.3*(t12876*t15815 + t12836*t15819 + t12907*t15831) - 0.099999*(t12836*t15815 + t13036*t15819 + t13001*t15831) + 0.2*(-1.*t12907*t15815 - 1.*t13001*t15819 - 1.*t13009*t15831))*var2[19] + t15809*var2[21];
  p_output1[3]=t13746*var2[4] + t15533*var2[5] + t15809*var2[19] + (t15888*t15899 + t15918*t15932 + t15954*t15957 - 0.099999*(-1.8e-11*t12432*t15899 + t13620*t15932 + t13437*t15957) - 0.3*(t13620*t15899 - 1.000000000009*t12432*t15957 + t15932*t15977) + 0.2*(-1.*t13437*t15899 + 1.000000000009*t12432*t15932 - 1.*t15957*t16092))*var2[21];
  p_output1[4]=1.;
  p_output1[5]=0.2000000000018*t12183*t12253 - 1.*t12175*t12204*t12256 + 6.000000000054e-7*t12138*t12256*t12323 + t12663*t13486 + t12743*t13604 + t12818*t13616 - 0.3*(t12836*t13486 + t12876*t13604 + t12907*t13616) - 0.099999*(t13036*t13486 + t12836*t13604 + t13001*t13616) + 0.2*(-1.*t13001*t13486 - 1.*t12907*t13604 - 1.*t13009*t13616);
  p_output1[6]=-6.000000000054e-7*t12138*t12183*t12204 - 1.*t12175*t12183*t12323 + t12663*t14984 + t12743*t15011 + t12818*t15021 - 0.3*(t12836*t14984 + t12876*t15011 + t12907*t15021) - 0.099999*(t13036*t14984 + t12836*t15011 + t13001*t15021) + 0.2*(-1.*t13001*t14984 - 1.*t12907*t15011 - 1.*t13009*t15021);
  p_output1[7]=-0.2000000000018*t12183*t12204*t12253 + 0.2000000000018*t11463*t12256 - 6.000000000054e-7*t12183*t12253*t12323 + t12818*t15725 + t12743*t15737 + t12663*t15749 - 0.3*(t12907*t15725 + t12876*t15737 + t12836*t15749) + 0.2*(-1.*t13009*t15725 - 1.*t12907*t15737 - 1.*t13001*t15749) - 0.099999*(t13001*t15725 + t12836*t15737 + t13036*t15749);
  p_output1[8]=t13452*t15899 + t13515*t15932 + t13612*t15957 - 0.3*(t13710*t15899 + t13722*t15932 - 1.000000000009*t12440*t15957) - 0.099999*(-1.8e-11*t12440*t15899 + t13710*t15932 + t13620*t15957) + 0.2*(-1.*t13620*t15899 + 1.000000000009*t12440*t15932 - 1.*t13625*t15957);
  p_output1[9]=(t17872 + t17877 + t17920 + t12663*t17950 + t12743*t17997 + t12818*t18029 - 0.3*(t12836*t17950 + t12876*t17997 + t12907*t18029) - 0.099999*(t13036*t17950 + t12836*t17997 + t13001*t18029) + 0.2*(-1.*t13001*t17950 - 1.*t12907*t17997 - 1.*t13009*t18029))*var2[3] + t17005*var2[4] + t17383*var2[5] + t17869*var2[19] + t17663*var2[21];
  p_output1[10]=t17005*var2[3] + (-1.*t12175*t12204*t12256*t17023 + 6.000000000054e-7*t12138*t12256*t12323*t17023 + t17872 + t12663*t21105 + t12743*t21111 + t12818*t21120 - 0.3*(t12836*t21105 + t12876*t21111 + t12907*t21120) - 0.099999*(t13036*t21105 + t12836*t21111 + t13001*t21120) + 0.2*(-1.*t13001*t21105 - 1.*t12907*t21111 - 1.*t13009*t21120))*var2[4] + t21074*var2[5] + t20674*var2[19] + t19487*var2[21];
  p_output1[11]=t17383*var2[3] + t21074*var2[4] + (t17877 + t17920 + t12663*t21867 + t12743*t21883 + t12818*t21902 - 0.3*(t12836*t21867 + t12876*t21883 + t12907*t21902) - 0.099999*(t13036*t21867 + t12836*t21883 + t13001*t21902) + 0.2*(-1.*t13001*t21867 - 1.*t12907*t21883 - 1.*t13009*t21902))*var2[5] + t21841*var2[19] + t21502*var2[21];
  p_output1[12]=t17869*var2[3] + t20674*var2[4] + t21841*var2[5] + (t17872 + 6.000000000054e-7*t11463*t21263 - 0.2000000000018*t11463*t22482 + t12663*t22623 + t12743*t22782 + t12818*t23070 - 0.3*(t12836*t22623 + t12876*t22782 + t12907*t23070) - 0.099999*(t13036*t22623 + t12836*t22782 + t13001*t23070) + 0.2*(-1.*t13001*t22623 - 1.*t12907*t22782 - 1.*t13009*t23070))*var2[19] + t24006*var2[21];
  p_output1[13]=t17663*var2[3] + t19487*var2[4] + t21502*var2[5] + t24006*var2[19] + (t15888*t24098 + t15918*t24171 + t15954*t24201 - 0.3*(t13620*t24098 + t15977*t24171 - 1.000000000009*t12432*t24201) - 0.099999*(-1.8e-11*t12432*t24098 + t13620*t24171 + t13437*t24201) + 0.2*(-1.*t13437*t24098 + 1.000000000009*t12432*t24171 - 1.*t16092*t24201))*var2[21];
  p_output1[14]=1.;
  p_output1[15]=t24418;
  p_output1[16]=t24449;
  p_output1[17]=t24589;
  p_output1[18]=t24708;
  p_output1[19]=t25152;
  p_output1[20]=t24418*var2[3] + t24449*var2[4] + t24589*var2[5] + t24708*var2[19] + t25152*var2[21];
  p_output1[21]=t24449*var2[3] + (t12175*t12204*t12256*t16844 - 6.000000000054e-7*t12138*t12256*t12323*t16844 + t24368 + t12663*t26069 + t12743*t26077 + t12818*t26148 - 0.3*(t12836*t26069 + t12876*t26077 + t12907*t26148) - 0.099999*(t13036*t26069 + t12836*t26077 + t13001*t26148) + 0.2*(-1.*t13001*t26069 - 1.*t12907*t26077 - 1.*t13009*t26148))*var2[4] + t25342*var2[5] + t25955*var2[19] + t25683*var2[21];
  p_output1[22]=t24589*var2[3] + t25342*var2[4] + (t24372 + t24373 + t12663*t26260 + t12743*t26300 + t12818*t26323 - 0.3*(t12836*t26260 + t12876*t26300 + t12907*t26323) - 0.099999*(t13036*t26260 + t12836*t26300 + t13001*t26323) + 0.2*(-1.*t13001*t26260 - 1.*t12907*t26300 - 1.*t13009*t26323))*var2[5] + t26561*var2[19] + t26526*var2[21];
  p_output1[23]=t24708*var2[3] + t25955*var2[4] + t26561*var2[5] + (-0.2000000000018*t11463*t17025 + t24368 + 6.000000000054e-7*t11463*t26431 + t12663*t26585 + t12743*t26608 + t12818*t26683 - 0.3*(t12836*t26585 + t12876*t26608 + t12907*t26683) - 0.099999*(t13036*t26585 + t12836*t26608 + t13001*t26683) + 0.2*(-1.*t13001*t26585 - 1.*t12907*t26608 - 1.*t13009*t26683))*var2[19] + t27377*var2[21];
  p_output1[24]=t25152*var2[3] + t25683*var2[4] + t26526*var2[5] + t27377*var2[19] + (t15888*t27429 + t15918*t27437 + t15954*t27440 - 0.3*(t13620*t27429 + t15977*t27437 - 1.000000000009*t12432*t27440) - 0.099999*(-1.8e-11*t12432*t27429 + t13620*t27437 + t13437*t27440) + 0.2*(-1.*t13437*t27429 + 1.000000000009*t12432*t27437 - 1.*t16092*t27440))*var2[21];
  p_output1[25]=1.;
  p_output1[26]=-0.2000000000018*t12183*t12253*t17023 + 6.000000000054e-7*t12138*t21263 + t12175*t22482 + t12663*t24098 + t12743*t24171 + t12818*t24201 - 0.3*(t12836*t24098 + t12876*t24171 + t12907*t24201) - 0.099999*(t13036*t24098 + t12836*t24171 + t13001*t24201) + 0.2*(-1.*t13001*t24098 - 1.*t12907*t24171 - 1.*t13009*t24201);
  p_output1[27]=-1.*t12175*t12183*t12204*t16844 - 0.2000000000018*t12253*t12256*t16844 + 6.000000000054e-7*t12138*t12183*t12323*t16844 + t12663*t25359 + t12743*t25379 + t12818*t25422 - 0.3*(t12836*t25359 + t12876*t25379 + t12907*t25422) - 0.099999*(t13036*t25359 + t12836*t25379 + t13001*t25422) + 0.2*(-1.*t13001*t25359 - 1.*t12907*t25379 - 1.*t13009*t25422);
  p_output1[28]=6.000000000054e-7*t12138*t17403 + t12175*t26431 + t12663*t26433 + t12743*t26436 + t12818*t26439 - 0.3*(t12836*t26433 + t12876*t26436 + t12907*t26439) - 0.099999*(t13036*t26433 + t12836*t26436 + t13001*t26439) + 0.2*(-1.*t13001*t26433 - 1.*t12907*t26436 - 1.*t13009*t26439);
  p_output1[29]=0.2000000000018*t11463*t12183*t16844 - 0.2000000000018*t12253*t17025 + 6.000000000054e-7*t12253*t26431 + t12818*t27002 + t12663*t27070 + t12743*t27111 - 0.099999*(t13001*t27002 + t13036*t27070 + t12836*t27111) - 0.3*(t12907*t27002 + t12836*t27070 + t12876*t27111) + 0.2*(-1.*t13009*t27002 - 1.*t13001*t27070 - 1.*t12907*t27111);
  p_output1[30]=t13452*t27429 + t13515*t27437 + t13612*t27440 - 0.3*(t13710*t27429 + t13722*t27437 - 1.000000000009*t12440*t27440) - 0.099999*(-1.8e-11*t12440*t27429 + t13710*t27437 + t13620*t27440) + 0.2*(-1.*t13620*t27429 + 1.000000000009*t12440*t27437 - 1.*t13625*t27440);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RightBackFoot_BackStance.hh"

namespace BackStance
{

void J_dh_RightBackFoot_BackStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
