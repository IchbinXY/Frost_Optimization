/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:09:05 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t908;
  double t2293;
  double t2786;
  double t2991;
  double t3548;
  double t3718;
  double t4310;
  double t4390;
  double t287;
  double t4419;
  double t4860;
  double t4899;
  double t4909;
  double t4436;
  double t6970;
  double t6971;
  double t13051;
  double t6158;
  double t14631;
  double t19197;
  double t4903;
  double t4945;
  double t5079;
  double t14368;
  double t14633;
  double t14180;
  double t14215;
  double t14219;
  double t14234;
  double t7162;
  double t7301;
  double t12224;
  double t17364;
  double t17680;
  double t18151;
  double t32333;
  double t12316;
  double t12334;
  double t12340;
  double t32397;
  double t5230;
  double t6365;
  double t22776;
  double t23080;
  double t30116;
  double t30429;
  double t30445;
  double t31657;
  double t31677;
  double t31683;
  double t13066;
  double t13938;
  double t14342;
  double t14642;
  double t14783;
  double t15192;
  double t18234;
  double t18537;
  double t19339;
  double t19405;
  double t19190;
  double t19216;
  double t19457;
  double t19463;
  double t19498;
  double t19794;
  double t19876;
  double t19733;
  double t19781;
  double t20214;
  double t20228;
  double t20840;
  double t22633;
  double t27875;
  double t28231;
  double t29897;
  double t30447;
  double t30582;
  double t31656;
  double t31731;
  double t31734;
  double t32334;
  double t32341;
  double t32380;
  double t32479;
  double t32495;
  double t32518;
  double t32776;
  double t32854;
  double t32864;
  double t32974;
  double t33061;
  double t33204;
  double t33236;
  double t33239;
  double t33241;
  double t33509;
  double t33598;
  double t33648;
  double t42663;
  double t44266;
  double t44271;
  double t45447;
  double t45475;
  double t45613;
  double t45624;
  double t45630;
  double t45634;
  double t47649;
  double t47847;
  double t48083;
  double t48576;
  double t48588;
  double t48602;
  double t48658;
  double t48660;
  double t48666;
  double t49018;
  double t49019;
  double t49023;
  double t4400;
  double t4674;
  double t4684;
  double t50401;
  double t50416;
  double t50425;
  double t50429;
  double t50572;
  double t50577;
  double t50589;
  double t50593;
  double t50397;
  double t50543;
  double t50599;
  double t50617;
  double t51170;
  double t51180;
  double t51191;
  double t51232;
  double t50752;
  double t50787;
  double t50797;
  double t50845;
  double t50847;
  double t50861;
  double t50627;
  double t50629;
  double t50698;
  double t50717;
  double t50728;
  double t50729;
  double t53287;
  double t53625;
  double t53635;
  double t52340;
  double t52628;
  double t52809;
  double t50732;
  double t51067;
  double t51082;
  double t51167;
  double t51240;
  double t52075;
  double t50355;
  double t50379;
  double t50384;
  double t52909;
  double t52999;
  double t53005;
  double t5172;
  double t6393;
  double t6664;
  double t53235;
  double t53662;
  double t53737;
  double t54567;
  double t55485;
  double t55630;
  double t12304;
  double t12353;
  double t12598;
  double t59515;
  double t59545;
  double t59550;
  double t61024;
  double t61073;
  double t61083;
  double t58911;
  double t58933;
  double t59056;
  double t59087;
  double t59123;
  double t59193;
  double t59337;
  double t59392;
  double t59699;
  double t59792;
  double t59793;
  double t59805;
  double t60691;
  double t60700;
  double t60728;
  double t60737;
  double t60825;
  double t60854;
  double t60859;
  double t60861;
  double t60895;
  double t60919;
  double t60921;
  double t60922;
  double t61878;
  double t61885;
  double t61905;
  double t19784;
  double t21473;
  double t21941;
  double t62369;
  double t62372;
  double t62386;
  double t62391;
  double t62396;
  double t62388;
  double t62401;
  double t62402;
  double t62350;
  double t62352;
  double t62361;
  double t62411;
  double t62425;
  double t62427;
  double t62429;
  double t62430;
  double t62432;
  double t62362;
  double t62403;
  double t62405;
  double t62428;
  double t62434;
  double t62435;
  double t62443;
  double t62444;
  double t62446;
  double t19315;
  double t19501;
  double t19510;
  double t50618;
  double t51125;
  double t56510;
  double t57340;
  double t59588;
  double t59605;
  double t59928;
  double t60096;
  double t60792;
  double t60793;
  double t60884;
  double t60885;
  double t63348;
  double t63356;
  double t63358;
  double t60996;
  double t61001;
  double t63423;
  double t63442;
  double t63444;
  double t61175;
  double t61200;
  double t63528;
  double t63530;
  double t63531;
  double t61310;
  double t61317;
  double t63568;
  double t63571;
  double t63573;
  double t61395;
  double t61396;
  double t63603;
  double t63610;
  double t63611;
  double t61633;
  double t61642;
  double t63636;
  double t63637;
  double t63641;
  double t61797;
  double t61801;
  double t62887;
  double t62909;
  double t62916;
  double t63207;
  double t63208;
  double t62952;
  double t62954;
  double t62410;
  double t62486;
  double t62824;
  double t63298;
  double t63362;
  double t63388;
  double t63488;
  double t63539;
  double t63541;
  double t63578;
  double t63580;
  double t63618;
  double t63623;
  double t64047;
  double t64643;
  double t64647;
  double t64656;
  double t64657;
  double t64658;
  double t64660;
  double t64098;
  double t64100;
  double t64858;
  double t64862;
  double t64863;
  double t64878;
  double t64904;
  double t64915;
  double t64323;
  double t64337;
  double t64450;
  double t64451;
  double t64578;
  double t64581;
  double t64475;
  double t64494;
  double t64496;
  double t65034;
  double t65035;
  double t65020;
  double t64943;
  double t64946;
  double t65021;
  double t65126;
  double t65133;
  double t65142;
  double t65173;
  double t65310;
  double t65211;
  double t65247;
  double t65315;
  t908 = Cos(var1[16]);
  t2293 = -1.*t908;
  t2786 = 1. + t2293;
  t2991 = 3.e-6*t2786;
  t3548 = 3.e-6*t908;
  t3718 = t2991 + t3548;
  t4310 = Cos(var1[4]);
  t4390 = Cos(var1[5]);
  t287 = Cos(var1[14]);
  t4419 = Sin(var1[14]);
  t4860 = 9.e-12*t2786;
  t4899 = t4860 + t2293;
  t4909 = Sin(var1[16]);
  t4436 = Sin(var1[4]);
  t6970 = -1.000000000009*t2786;
  t6971 = 1. + t6970;
  t13051 = Sin(var1[5]);
  t6158 = -1.000000000009*t287*t4909;
  t14631 = 1.000000000009*t287*t4909;
  t19197 = 1.000000000009*t4419*t4909;
  t4903 = t287*t4899;
  t4945 = -1.000000000009*t4419*t4909;
  t5079 = t4903 + t4945;
  t14368 = t4899*t4419;
  t14633 = t14368 + t14631;
  t14180 = -9.e-12*t2786;
  t14215 = 1. + t14180;
  t14219 = -3.e-6*t14215;
  t14234 = t14219 + t2991;
  t7162 = -1.*t6971*t4419;
  t7301 = t287*t4909;
  t12224 = t7162 + t7301;
  t17364 = t287*t6971;
  t17680 = t4419*t4909;
  t18151 = t17364 + t17680;
  t32333 = Sin(var1[3]);
  t12316 = -1.*t287*t6971;
  t12334 = -1.*t4419*t4909;
  t12340 = t12316 + t12334;
  t32397 = Cos(var1[3]);
  t5230 = -1.*t4899*t4419;
  t6365 = t5230 + t6158;
  t22776 = t3718*t4390*t4419;
  t23080 = t22776 + t13051;
  t30116 = t4390*t14633;
  t30429 = -1.*t14234*t13051;
  t30445 = t30116 + t30429;
  t31657 = t4390*t18151;
  t31677 = -3.e-6*t4909*t13051;
  t31683 = t31657 + t31677;
  t13066 = -1.*t3718*t4419*t13051;
  t13938 = t4390 + t13066;
  t14342 = -1.*t14234*t4390;
  t14642 = -1.*t14633*t13051;
  t14783 = t14342 + t14642;
  t15192 = -3.e-6*t4390*t4909;
  t18234 = -1.*t18151*t13051;
  t18537 = t15192 + t18234;
  t19339 = t908*t4419;
  t19405 = t19339 + t6158;
  t19190 = t287*t908;
  t19216 = t19190 + t19197;
  t19457 = t4390*t19405;
  t19463 = -3.e-6*t908*t13051;
  t19498 = t19457 + t19463;
  t19794 = 1.000000000009*t287*t908;
  t19876 = t19794 + t19197;
  t19733 = -1.000000000009*t908*t4419;
  t19781 = t19733 + t14631;
  t20214 = t4390*t19876;
  t20228 = -3.000000000027e-6*t4909*t13051;
  t20840 = t20214 + t20228;
  t22633 = t287*t3718*t4310;
  t27875 = -1.*t4436*t23080;
  t28231 = t22633 + t27875;
  t29897 = t4310*t5079;
  t30447 = -1.*t4436*t30445;
  t30582 = t29897 + t30447;
  t31656 = t4310*t12224;
  t31731 = -1.*t4436*t31683;
  t31734 = t31656 + t31731;
  t32334 = -1.*t3718*t4310*t4419;
  t32341 = -1.*t287*t3718*t4390*t4436;
  t32380 = t32334 + t32341;
  t32479 = t4310*t12340;
  t32495 = -1.*t4390*t12224*t4436;
  t32518 = t32479 + t32495;
  t32776 = t4310*t6365;
  t32854 = -1.*t4390*t5079*t4436;
  t32864 = t32776 + t32854;
  t32974 = -1.*t287*t3718*t4436;
  t33061 = -1.*t4310*t23080;
  t33204 = t32974 + t33061;
  t33236 = -1.*t5079*t4436;
  t33239 = -1.*t4310*t30445;
  t33241 = t33236 + t33239;
  t33509 = -1.*t12224*t4436;
  t33598 = -1.*t4310*t31683;
  t33648 = t33509 + t33598;
  t42663 = 3.e-6*t908*t4390;
  t44266 = t19405*t13051;
  t44271 = t42663 + t44266;
  t45447 = t4310*t19216;
  t45475 = -1.*t4436*t19498;
  t45613 = t45447 + t45475;
  t45624 = 3.000000000027e-6*t4390*t4909;
  t45630 = t19876*t13051;
  t45634 = t45624 + t45630;
  t47649 = t4310*t19781;
  t47847 = -1.*t4436*t20840;
  t48083 = t47649 + t47847;
  t48576 = -1.*t4390;
  t48588 = t3718*t4419*t13051;
  t48602 = t48576 + t48588;
  t48658 = t14234*t4390;
  t48660 = t14633*t13051;
  t48666 = t48658 + t48660;
  t49018 = 3.e-6*t4390*t4909;
  t49019 = t18151*t13051;
  t49023 = t49018 + t49019;
  t4400 = t287*t3718*t4310*t4390;
  t4674 = -1.*t3718*t4419*t4436;
  t4684 = t4400 + t4674;
  t50401 = 1.2e-12*var1[16];
  t50416 = 0.1000003000009*t2786;
  t50425 = -3.e-12*t4909;
  t50429 = t50401 + t50416 + t50425;
  t50572 = 0.2*t6971;
  t50577 = 0.2000000000048*t2786;
  t50589 = 0.1000003000009*t4909;
  t50593 = t50572 + t50577 + t50589;
  t50397 = 0.2*t4419;
  t50543 = t287*t50429;
  t50599 = -1.*t4419*t50593;
  t50617 = t50397 + t50543 + t50599;
  t51170 = 0.2*t287;
  t51180 = -1.*t4419*t50429;
  t51191 = -1.*t287*t50593;
  t51232 = t51170 + t51180 + t51191;
  t50752 = -1.*t287;
  t50787 = 1. + t50752;
  t50797 = 0.2*t50787;
  t50845 = t4419*t50429;
  t50847 = t287*t50593;
  t50861 = t50797 + t50845 + t50847;
  t50627 = -4.e-7*var1[16];
  t50629 = -1. + t4860;
  t50698 = 0.1*t50629;
  t50717 = 3.000000000027e-7*t2786;
  t50728 = -9.e-18*t4909;
  t50729 = t50627 + t50698 + t50717 + t50728;
  t53287 = t4390*t50861;
  t53625 = -1.*t50729*t13051;
  t53635 = t53287 + t53625;
  t52340 = t287*t3718*t4436;
  t52628 = t4310*t23080;
  t52809 = t52340 + t52628;
  t50732 = t4390*t50729;
  t51067 = t50861*t13051;
  t51082 = t50732 + t51067;
  t51167 = t4310*t4390*t50617;
  t51240 = t51232*t4436;
  t52075 = t51167 + t51240;
  t50355 = t5079*t4436;
  t50379 = t4310*t30445;
  t50384 = t50355 + t50379;
  t52909 = t4310*t51232;
  t52999 = -1.*t4390*t50617*t4436;
  t53005 = t52909 + t52999;
  t5172 = t4310*t4390*t5079;
  t6393 = t6365*t4436;
  t6664 = t5172 + t6393;
  t53235 = t50617*t4436;
  t53662 = t4310*t53635;
  t53737 = t53235 + t53662;
  t54567 = t4310*t50617;
  t55485 = -1.*t4436*t53635;
  t55630 = t54567 + t55485;
  t12304 = t4310*t4390*t12224;
  t12353 = t12340*t4436;
  t12598 = t12304 + t12353;
  t59515 = t12224*t4436;
  t59545 = t4310*t31683;
  t59550 = t59515 + t59545;
  t61024 = -1.*t4390*t50729;
  t61073 = -1.*t50861*t13051;
  t61083 = t61024 + t61073;
  t58911 = -1.*t48602*t51082;
  t58933 = -1.*t52809*t53737;
  t59056 = -1.*t28231*t55630;
  t59087 = t58911 + t58933 + t59056;
  t59123 = t51082*t48666;
  t59193 = t50384*t53737;
  t59337 = t30582*t55630;
  t59392 = t59123 + t59193 + t59337;
  t59699 = t48602*t51082;
  t59792 = t52809*t53737;
  t59793 = t28231*t55630;
  t59805 = t59699 + t59792 + t59793;
  t60691 = -1.*t51082*t49023;
  t60700 = -1.*t53737*t59550;
  t60728 = -1.*t55630*t31734;
  t60737 = t60691 + t60700 + t60728;
  t60825 = -1.*t51082*t48666;
  t60854 = -1.*t50384*t53737;
  t60859 = -1.*t30582*t55630;
  t60861 = t60825 + t60854 + t60859;
  t60895 = t51082*t49023;
  t60919 = t53737*t59550;
  t60921 = t55630*t31734;
  t60922 = t60895 + t60919 + t60921;
  t61878 = -1.*t50617*t4436;
  t61885 = -1.*t4310*t53635;
  t61905 = t61878 + t61885;
  t19784 = t19781*t4436;
  t21473 = t4310*t20840;
  t21941 = t19784 + t21473;
  t62369 = 0.1000003000009*t908;
  t62372 = 3.000000000027e-12*t4909;
  t62386 = t62369 + t62372;
  t62391 = -3.e-12*t908;
  t62396 = 1.2e-12 + t62391 + t50589;
  t62388 = t287*t62386;
  t62401 = t4419*t62396;
  t62402 = t62388 + t62401;
  t62350 = -9.e-18*t908;
  t62352 = 3.000009000027e-7*t4909;
  t62361 = -4.e-7 + t62350 + t62352;
  t62411 = -1.*t4419*t62386;
  t62425 = t287*t62396;
  t62427 = t62411 + t62425;
  t62429 = t4390*t62402;
  t62430 = -1.*t62361*t13051;
  t62432 = t62429 + t62430;
  t62362 = t4390*t62361;
  t62403 = t62402*t13051;
  t62405 = t62362 + t62403;
  t62428 = t62427*t4436;
  t62434 = t4310*t62432;
  t62435 = t62428 + t62434;
  t62443 = t4310*t62427;
  t62444 = -1.*t4436*t62432;
  t62446 = t62443 + t62444;
  t19315 = t19216*t4436;
  t19501 = t4310*t19498;
  t19510 = t19315 + t19501;
  t50618 = -1.*t50617*t13051*t48602;
  t51125 = -1.*t287*t3718*t13051*t51082;
  t56510 = t5079*t13051*t51082;
  t57340 = t50617*t13051*t48666;
  t59588 = t50617*t13051*t48602;
  t59605 = t287*t3718*t13051*t51082;
  t59928 = -1.*t12224*t13051*t51082;
  t60096 = -1.*t50617*t13051*t49023;
  t60792 = -1.*t5079*t13051*t51082;
  t60793 = -1.*t50617*t13051*t48666;
  t60884 = t12224*t13051*t51082;
  t60885 = t50617*t13051*t49023;
  t63348 = -1.*t287*t3718*t50617;
  t63356 = -1.*t23080*t53635;
  t63358 = t63348 + t58911 + t63356;
  t60996 = -1.*t23080*t51082;
  t61001 = -1.*t48602*t53635;
  t63423 = t50617*t5079;
  t63442 = t30445*t53635;
  t63444 = t63423 + t63442 + t59123;
  t61175 = t30445*t51082;
  t61200 = t53635*t48666;
  t63528 = t287*t3718*t50617;
  t63530 = t23080*t53635;
  t63531 = t63528 + t59699 + t63530;
  t61310 = t23080*t51082;
  t61317 = t48602*t53635;
  t63568 = -1.*t50617*t12224;
  t63571 = -1.*t53635*t31683;
  t63573 = t63568 + t63571 + t60691;
  t61395 = -1.*t51082*t31683;
  t61396 = -1.*t53635*t49023;
  t63603 = -1.*t50617*t5079;
  t63610 = -1.*t30445*t53635;
  t63611 = t63603 + t63610 + t60825;
  t61633 = -1.*t30445*t51082;
  t61642 = -1.*t53635*t48666;
  t63636 = t50617*t12224;
  t63637 = t53635*t31683;
  t63641 = t63636 + t63637 + t60895;
  t61797 = t51082*t31683;
  t61801 = t53635*t49023;
  t62887 = t48602*t62405;
  t62909 = -1.*t51082*t44271;
  t62916 = -1.*t62405*t49023;
  t63207 = t51082*t44271;
  t63208 = t62405*t49023;
  t62952 = -1.*t62405*t48666;
  t62954 = -1.*t51082*t45634;
  t62410 = -1.*t48602*t62405;
  t62486 = t62405*t48666;
  t62824 = t51082*t45634;
  t63298 = -1.*t287*t3718*t51232;
  t63362 = t50617*t6365;
  t63388 = t51232*t5079;
  t63488 = t287*t3718*t51232;
  t63539 = -1.*t51232*t12224;
  t63541 = -1.*t50617*t12340;
  t63578 = -1.*t50617*t6365;
  t63580 = -1.*t51232*t5079;
  t63618 = t51232*t12224;
  t63623 = t50617*t12340;
  t64047 = t287*t3718*t62427;
  t64643 = 4.e-7*var1[16];
  t64647 = 0.1*t14215;
  t64656 = -3.000000000027e-7*t2786;
  t64657 = t3718*t4419*t50861;
  t64658 = 9.e-18*t4909;
  t64660 = t64643 + t64647 + t64656 + t64657 + t63528 + t64658;
  t64098 = -1.*t62427*t12224;
  t64100 = -1.*t50617*t19216;
  t64858 = -1.*t14234*t50729;
  t64862 = -1.*t50861*t14633;
  t64863 = t64858 + t64862 + t63603;
  t64878 = 3.e-6*t50729*t4909;
  t64904 = t50861*t18151;
  t64915 = t64878 + t63636 + t64904;
  t64323 = t62427*t12224;
  t64337 = t50617*t19216;
  t64450 = -1.*t50617*t19781;
  t64451 = -1.*t62427*t5079;
  t64578 = -1.*t3718*t4419*t50861;
  t64581 = t50627 + t50698 + t50717 + t64578 + t63348 + t50728;
  t64475 = -1.*t287*t3718*t62427;
  t64494 = t50617*t19781;
  t64496 = t62427*t5079;
  t65034 = -1.*t14234*t62361;
  t65035 = -3.000000000027e-6*t50729*t4909;
  t65020 = 3.e-6*t908*t50729;
  t64943 = 9.e-18*t908;
  t64946 = -3.000009000027e-7*t4909;
  t65021 = 3.e-6*t62361*t4909;
  t65126 = -1.000000000009*t908*t50593;
  t65133 = -1.*t4899*t62396;
  t65142 = -1.000000000009*t50429*t4909;
  t65173 = -1.000000000009*t62386*t4909;
  t65310 = -1.000000000009*t50593*t4909;
  t65211 = t908*t50429;
  t65247 = t6971*t62386;
  t65315 = t62396*t4909;
  p_output1[0]=var2[16]*(-0.5*(2.0744e-8*t28231 + 6.2232e-14*t30582 + 0.005186015558*t31734)*var2[4] - 0.5*(2.0744e-8*t13938*t4310 + 6.2232e-14*t14783*t4310 + 0.005186015558*t18537*t4310)*var2[5] - 0.5*(0.005186015558*t12598 + 2.0744e-8*t4684 + 6.2232e-14*t6664)*var2[14] - 0.5*(0.005186015558*t19510 + 6.2232e-14*t21941)*var2[16]);
  p_output1[1]=var2[16]*(-0.5*(2.0744e-8*(-1.*t28231*t32397 - 1.*t32333*t48602) + 6.2232e-14*(-1.*t30582*t32397 - 1.*t32333*t48666) + 0.005186015558*(-1.*t31734*t32397 - 1.*t32333*t49023))*var2[3] - 0.5*(-2.0744e-8*t32333*t33204 - 6.2232e-14*t32333*t33241 - 0.005186015558*t32333*t33648)*var2[4] - 0.5*(2.0744e-8*(t23080*t32397 + t13938*t32333*t4436) + 6.2232e-14*(t30445*t32397 + t14783*t32333*t4436) + 0.005186015558*(t31683*t32397 + t18537*t32333*t4436))*var2[5] - 0.5*(0.005186015558*(t12224*t13051*t32397 - 1.*t32333*t32518) + 2.0744e-8*(-1.*t32333*t32380 + t13051*t287*t32397*t3718) + 6.2232e-14*(-1.*t32333*t32864 + t13051*t32397*t5079))*var2[14] - 0.5*(0.005186015558*(t32397*t44271 - 1.*t32333*t45613) + 6.2232e-14*(t32397*t45634 - 1.*t32333*t48083))*var2[16]);
  p_output1[2]=var2[16]*(-0.5*(2.0744e-8*(-1.*t28231*t32333 + t32397*t48602) + 6.2232e-14*(-1.*t30582*t32333 + t32397*t48666) + 0.005186015558*(-1.*t31734*t32333 + t32397*t49023))*var2[3] - 0.5*(2.0744e-8*t32397*t33204 + 6.2232e-14*t32397*t33241 + 0.005186015558*t32397*t33648)*var2[4] - 0.5*(2.0744e-8*(t23080*t32333 - 1.*t13938*t32397*t4436) + 6.2232e-14*(t30445*t32333 - 1.*t14783*t32397*t4436) + 0.005186015558*(t31683*t32333 - 1.*t18537*t32397*t4436))*var2[5] - 0.5*(0.005186015558*(t12224*t13051*t32333 + t32397*t32518) + 2.0744e-8*(t32380*t32397 + t13051*t287*t32333*t3718) + 6.2232e-14*(t32397*t32864 + t13051*t32333*t5079))*var2[14] - 0.5*(0.005186015558*(t32333*t44271 + t32397*t45613) + 6.2232e-14*(t32333*t45634 + t32397*t48083))*var2[16]);
  p_output1[3]=var2[16]*(-0.5*(0.000245000000002205*t28231 + 0.005186015558*(t30582*t59087 + t28231*t59392 + t50384*(-1.*t28231*t53737 - 1.*t33204*t55630 - 1.*t52809*t55630 - 1.*t28231*t61905) + t52809*(t30582*t53737 + t33241*t55630 + t50384*t55630 + t30582*t61905)) + 6.2232e-14*(t31734*t59805 + t28231*t60737 + t59550*(t28231*t53737 + t33204*t55630 + t52809*t55630 + t28231*t61905) + t52809*(-1.*t31734*t53737 - 1.*t33648*t55630 - 1.*t55630*t59550 - 1.*t31734*t61905)) + 2.0744e-8*(t31734*t60861 + t30582*t60922 + t59550*(-1.*t30582*t53737 - 1.*t33241*t55630 - 1.*t50384*t55630 - 1.*t30582*t61905) + t50384*(t31734*t53737 + t33648*t55630 + t55630*t59550 + t31734*t61905)))*var2[4] - 0.5*(0.000245000000002205*t13938*t4310 + 0.005186015558*(t14783*t4310*t59087 + t13938*t4310*t59392 + t50384*(-1.*t13938*t4310*t53737 + t13938*t4436*t55630 + t60996 + t61001 + t28231*t4436*t61083 - 1.*t4310*t52809*t61083) + t52809*(t14783*t4310*t53737 - 1.*t14783*t4436*t55630 - 1.*t30582*t4436*t61083 + t4310*t50384*t61083 + t61175 + t61200)) + 6.2232e-14*(t18537*t4310*t59805 + t13938*t4310*t60737 + t59550*(t13938*t4310*t53737 - 1.*t13938*t4436*t55630 - 1.*t28231*t4436*t61083 + t4310*t52809*t61083 + t61310 + t61317) + t52809*(-1.*t18537*t4310*t53737 + t18537*t4436*t55630 + t31734*t4436*t61083 - 1.*t4310*t59550*t61083 + t61395 + t61396)) + 2.0744e-8*(t18537*t4310*t60861 + t14783*t4310*t60922 + t59550*(-1.*t14783*t4310*t53737 + t14783*t4436*t55630 + t30582*t4436*t61083 - 1.*t4310*t50384*t61083 + t61633 + t61642) + t50384*(t18537*t4310*t53737 - 1.*t18537*t4436*t55630 - 1.*t31734*t4436*t61083 + t4310*t59550*t61083 + t61797 + t61801)))*var2[5] - 0.5*(0.000245000000002205*t4684 + 6.2232e-14*(t59550*(t52075*t52809 + t28231*t53005 + t4684*t53737 + t32380*t55630 + t59588 + t59605) + t12598*t59805 + t52809*(-1.*t31734*t53005 - 1.*t12598*t53737 - 1.*t32518*t55630 - 1.*t52075*t59550 + t59928 + t60096) + t4684*t60737) + 2.0744e-8*(t12598*t60861 + t50384*(t31734*t53005 + t12598*t53737 + t32518*t55630 + t52075*t59550 + t60884 + t60885) + t60922*t6664 + t59550*(-1.*t50384*t52075 - 1.*t30582*t53005 - 1.*t32864*t55630 + t60792 + t60793 - 1.*t53737*t6664)) + 0.005186015558*(t50384*(t50618 + t51125 - 1.*t52075*t52809 - 1.*t28231*t53005 - 1.*t4684*t53737 - 1.*t32380*t55630) + t4684*t59392 + t59087*t6664 + t52809*(t50384*t52075 + t30582*t53005 + t32864*t55630 + t56510 + t57340 + t53737*t6664)))*var2[14] - 0.5*(0.005186015558*(t21941*t59087 + t50384*(t62410 - 1.*t52809*t62435 - 1.*t28231*t62446) + t52809*(t21941*t53737 + t48083*t55630 + t50384*t62435 + t30582*t62446 + t62486 + t62824)) + 6.2232e-14*(t19510*t59805 + t59550*(t52809*t62435 + t28231*t62446 + t62887) + t52809*(-1.*t19510*t53737 - 1.*t45613*t55630 - 1.*t59550*t62435 - 1.*t31734*t62446 + t62909 + t62916)) + 2.0744e-8*(t19510*t60861 + t21941*t60922 + t59550*(-1.*t21941*t53737 - 1.*t48083*t55630 - 1.*t50384*t62435 - 1.*t30582*t62446 + t62952 + t62954) + t50384*(t19510*t53737 + t45613*t55630 + t59550*t62435 + t31734*t62446 + t63207 + t63208)))*var2[16]);
  p_output1[4]=var2[16]*(-0.5*(0.000245000000002205*t23080 + 0.005186015558*(t48666*(-1.*t13938*t53635 + t60996 + t61001 - 1.*t23080*t61083) + t48602*(t14783*t53635 + t30445*t61083 + t61175 + t61200) + t30445*t63358 + t23080*t63444) + 6.2232e-14*(t49023*(t13938*t53635 + t23080*t61083 + t61310 + t61317) + t48602*(-1.*t18537*t53635 - 1.*t31683*t61083 + t61395 + t61396) + t31683*t63531 + t23080*t63573) + 2.0744e-8*(t49023*(-1.*t14783*t53635 - 1.*t30445*t61083 + t61633 + t61642) + t48666*(t18537*t53635 + t31683*t61083 + t61797 + t61801) + t31683*t63611 + t30445*t63641))*var2[5] - 0.5*(0.000245000000002205*t13051*t287*t3718 + 0.005186015558*(t48666*(-1.*t23080*t4390*t50617 + t3718*t4419*t50617 + t50618 + t51125 - 1.*t287*t3718*t4390*t53635 + t63298) + t13051*t5079*t63358 + t48602*(t30445*t4390*t50617 + t4390*t5079*t53635 + t56510 + t57340 + t63362 + t63388) + t13051*t287*t3718*t63444) + 6.2232e-14*(t49023*(t23080*t4390*t50617 - 1.*t3718*t4419*t50617 + t287*t3718*t4390*t53635 + t59588 + t59605 + t63488) + t12224*t13051*t63531 + t48602*(-1.*t31683*t4390*t50617 - 1.*t12224*t4390*t53635 + t59928 + t60096 + t63539 + t63541) + t13051*t287*t3718*t63573) + 2.0744e-8*(t49023*(-1.*t30445*t4390*t50617 - 1.*t4390*t5079*t53635 + t60792 + t60793 + t63578 + t63580) + t12224*t13051*t63611 + t48666*(t31683*t4390*t50617 + t12224*t4390*t53635 + t60884 + t60885 + t63618 + t63623) + t13051*t5079*t63641))*var2[14] - 0.5*(6.2232e-14*(t44271*t63531 + t49023*(t23080*t62432 + t62887 + t64047) + t48602*(-1.*t19498*t53635 - 1.*t31683*t62432 + t62909 + t62916 + t64098 + t64100)) + 2.0744e-8*(t44271*t63611 + t45634*t63641 + t48666*(t19498*t53635 + t31683*t62432 + t63207 + t63208 + t64323 + t64337) + t49023*(-1.*t20840*t53635 - 1.*t30445*t62432 + t62952 + t62954 + t64450 + t64451)) + 0.005186015558*(t45634*t63358 + t48666*(t62410 - 1.*t23080*t62432 + t64475) + t48602*(t20840*t53635 + t30445*t62432 + t62486 + t62824 + t64494 + t64496)))*var2[16]);
  p_output1[5]=var2[16]*(-0.5*(-0.000245000000002205*t3718*t4419 + 0.005186015558*(t5079*(-1.*t287*t3718*t50861 + t63298) + t287*t3718*(t14633*t50617 + t5079*t50861 + t63362 + t63388) - 1.*t3718*t4419*(t14234*t50729 + t14633*t50861 + t63423) + t6365*t64581) + 6.2232e-14*(t12224*(t287*t3718*t50861 + t63488) + t287*t3718*(-1.*t18151*t50617 - 1.*t12224*t50861 + t63539 + t63541) - 1.*t3718*t4419*(-3.e-6*t4909*t50729 - 1.*t18151*t50861 + t63568) + t12340*t64660) + 2.0744e-8*(t12224*(-1.*t14633*t50617 - 1.*t5079*t50861 + t63578 + t63580) + t5079*(t18151*t50617 + t12224*t50861 + t63618 + t63623) + t12340*t64863 + t6365*t64915))*var2[14] - 0.5*(0.005186015558*(t5079*(-4.e-7 + t62350 + t62352 - 1.*t3718*t4419*t62402 + t64475) + t287*t3718*(3.000000000027e-6*t4909*t50729 + t19876*t50861 + t14234*t62361 + t14633*t62402 + t64494 + t64496) + t19781*t64581) + 2.0744e-8*(t19216*t64863 + t19781*t64915 + t5079*(t19405*t50861 + t18151*t62402 + t64323 + t64337 + t65020 + t65021) + t12224*(-1.*t19876*t50861 - 1.*t14633*t62402 + t64450 + t64451 + t65034 + t65035)) + 6.2232e-14*(t19216*t64660 + t12224*(4.e-7 + t3718*t4419*t62402 + t64047 + t64943 + t64946) + t287*t3718*(-1.*t19405*t50861 - 3.e-6*t4909*t62361 - 1.*t18151*t62402 + t64098 + t64100 - 3.e-6*t50729*t908)))*var2[16]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=-0.5*(0.005186015558*(3.000000000027e-6*t4909*(-1.*t3718*t50429 + t50627 + t50698 + t50717 + t50728) + t14234*(-4.e-7 + t62350 + t62352 - 1.*t3718*t62396) + t65034 + t65035 + t65126 + t65133 + t65142 + t65173 + 0.2*t908) + 6.2232e-14*(0.2000000000018*t4909 + 3.e-6*t4909*(4.e-7 + t3718*t62396 + t64943 + t64946) + t65020 + t65021 + t65211 + t65247 + t65310 + t65315 + 3.e-6*(t3718*t50429 + t64643 + t64647 + t64656 + t64658)*t908) + 2.0744e-8*(3.e-6*t4909*(t65034 + t65035 + t65126 + t65133 + t65142 + t65173) + t14234*(t65020 + t65021 + t65211 + t65247 + t65310 + t65315) + 3.000000000027e-6*t4909*(t4909*t50429 + t64878 + t50593*t6971) + 3.e-6*(-1.*t4899*t50429 + t64858 + t65310)*t908))*Power(var2[16],2);
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec17_minitaur.hh"

namespace FrontStance
{

void Ce1_vec17_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
