/*
 * Automatically Generated from Mathematica.
 * Thu 30 May 2019 00:03:14 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t28995;
  double t29029;
  double t29092;
  double t31273;
  double t34565;
  double t35470;
  double t36464;
  double t36927;
  double t36929;
  double t31902;
  double t32330;
  double t33121;
  double t33292;
  double t37370;
  double t37602;
  double t37814;
  double t36936;
  double t36960;
  double t38166;
  double t37717;
  double t37759;
  double t37765;
  double t37773;
  double t37790;
  double t37800;
  double t38388;
  double t38393;
  double t38406;
  double t38719;
  double t52841;
  double t52851;
  double t52859;
  double t52873;
  double t52882;
  double t52949;
  double t53013;
  double t69949;
  double t69971;
  double t69862;
  double t38284;
  double t59761;
  double t70568;
  double t29306;
  double t30214;
  double t30885;
  double t31263;
  double t33817;
  double t36910;
  double t36966;
  double t37610;
  double t37651;
  double t38060;
  double t38320;
  double t38345;
  double t38381;
  double t38387;
  double t38806;
  double t38814;
  double t38838;
  double t52506;
  double t52703;
  double t72045;
  double t72047;
  double t72048;
  double t69865;
  double t72051;
  double t72054;
  double t72056;
  double t72059;
  double t72061;
  double t72062;
  double t70577;
  double t70582;
  double t70585;
  double t72159;
  double t72161;
  double t72154;
  double t72156;
  double t72210;
  double t72166;
  double t72169;
  double t72175;
  double t72179;
  double t72225;
  double t72228;
  double t72230;
  double t72241;
  double t72245;
  double t72246;
  double t72247;
  double t72274;
  double t72304;
  double t72293;
  double t73670;
  double t73913;
  double t73917;
  double t73921;
  double t74014;
  double t74018;
  double t74019;
  double t74020;
  double t74023;
  double t74024;
  double t32126;
  double t33718;
  double t74519;
  double t74521;
  double t74541;
  double t72157;
  double t72162;
  double t72163;
  double t72164;
  double t72200;
  double t72212;
  double t72217;
  double t72222;
  double t72224;
  double t72232;
  double t72234;
  double t72235;
  double t72236;
  double t72239;
  double t74866;
  double t74868;
  double t74869;
  double t74878;
  double t74885;
  double t72295;
  double t74891;
  double t74892;
  double t74894;
  double t73049;
  double t75615;
  double t75636;
  double t75643;
  double t75650;
  double t75653;
  double t75665;
  double t72042;
  double t72044;
  double t72049;
  double t72057;
  double t72063;
  double t72064;
  double t72075;
  double t72085;
  double t72109;
  double t72112;
  double t72113;
  double t72118;
  double t72125;
  double t72130;
  double t72131;
  double t72132;
  double t72133;
  double t72135;
  double t72141;
  double t72148;
  double t72149;
  double t75887;
  double t75888;
  double t75893;
  double t75897;
  double t75898;
  double t75899;
  double t75901;
  double t75905;
  double t75913;
  double t75922;
  double t33153;
  double t76028;
  double t76031;
  double t76032;
  double t76033;
  double t76037;
  double t76038;
  double t75608;
  double t75614;
  double t75649;
  double t75668;
  double t75696;
  double t75701;
  double t75704;
  double t75705;
  double t75707;
  double t75709;
  double t75723;
  double t75730;
  double t75731;
  double t75735;
  double t75736;
  double t75739;
  double t75740;
  double t75741;
  double t75743;
  double t75744;
  double t75854;
  double t73261;
  double t73274;
  double t73484;
  double t73946;
  double t74022;
  double t74026;
  double t74027;
  double t74029;
  double t74031;
  double t74032;
  double t74033;
  double t74034;
  double t74060;
  double t74485;
  double t74499;
  double t74501;
  double t74505;
  double t74506;
  double t74508;
  double t74509;
  double t74513;
  double t74515;
  double t76080;
  double t76069;
  double t76070;
  double t76072;
  double t76074;
  double t76085;
  double t76086;
  double t76087;
  double t76097;
  double t76098;
  double t76102;
  double t75894;
  double t75900;
  double t75929;
  double t75930;
  double t75931;
  double t75973;
  double t75975;
  double t75976;
  double t75977;
  double t75978;
  double t75984;
  double t76000;
  double t76007;
  double t76010;
  double t76011;
  double t76020;
  double t76021;
  double t76022;
  double t76023;
  double t74872;
  double t74890;
  double t74904;
  double t74909;
  double t74913;
  double t74940;
  double t74946;
  double t75327;
  double t75328;
  double t75329;
  double t75332;
  double t75333;
  double t75334;
  double t75406;
  double t75504;
  double t75594;
  double t75596;
  double t75597;
  double t75598;
  double t72186;
  double t72231;
  double t72263;
  double t72281;
  double t72288;
  double t72296;
  double t72297;
  double t72300;
  double t72303;
  double t72306;
  double t72310;
  double t72428;
  double t72651;
  double t72959;
  double t73227;
  double t73233;
  double t73241;
  double t73242;
  double t73243;
  double t76350;
  double t76354;
  double t76356;
  double t76358;
  double t76359;
  double t76361;
  double t76362;
  double t76363;
  double t76364;
  double t76366;
  double t76367;
  double t76368;
  double t76371;
  double t76395;
  double t76394;
  double t76396;
  double t76397;
  double t76400;
  double t76402;
  double t76403;
  double t76408;
  double t76410;
  double t76415;
  double t76417;
  double t76418;
  double t76419;
  double t76426;
  double t76427;
  double t76428;
  double t76479;
  double t76481;
  double t76482;
  double t76478;
  double t76483;
  double t76484;
  double t76486;
  double t76488;
  double t76490;
  double t76492;
  double t76494;
  double t76495;
  double t76496;
  double t76497;
  double t76544;
  double t76545;
  double t76549;
  double t76552;
  double t76554;
  double t76555;
  double t76556;
  double t76557;
  double t76563;
  double t76566;
  double t76625;
  double t76627;
  double t76628;
  double t76630;
  double t76631;
  double t76632;
  double t76635;
  double t76636;
  double t76637;
  double t76638;
  double t76641;
  double t76642;
  double t76643;
  double t76644;
  double t76646;
  double t76647;
  double t76648;
  double t76649;
  double t76351;
  double t76352;
  double t76353;
  double t76360;
  double t76365;
  double t76373;
  double t76374;
  double t76375;
  double t76376;
  double t76377;
  double t76378;
  double t76379;
  double t76383;
  double t76384;
  double t76385;
  double t76386;
  double t76387;
  double t76388;
  double t76389;
  double t76390;
  double t76391;
  double t76392;
  double t76670;
  double t76672;
  double t76673;
  double t76674;
  double t76676;
  double t76677;
  double t76678;
  double t76679;
  double t76681;
  double t76682;
  double t76683;
  double t76684;
  double t76759;
  double t76760;
  double t76761;
  double t76762;
  double t76764;
  double t76765;
  double t76767;
  double t76768;
  double t76772;
  double t76791;
  double t76824;
  double t76826;
  double t76828;
  double t76829;
  double t76830;
  double t76836;
  double t76838;
  double t76839;
  double t76624;
  double t77000;
  double t77020;
  double t77025;
  double t77027;
  double t77036;
  double t77037;
  double t77042;
  double t77043;
  double t77046;
  double t76822;
  double t76823;
  double t76827;
  double t76834;
  double t76844;
  double t76846;
  double t76847;
  double t76852;
  double t76858;
  double t76863;
  double t76867;
  double t76875;
  double t76882;
  double t76888;
  double t76889;
  double t76897;
  double t76902;
  double t76909;
  double t76916;
  double t76951;
  double t76952;
  double t76398;
  double t76405;
  double t76416;
  double t76420;
  double t76429;
  double t76431;
  double t76438;
  double t76439;
  double t76440;
  double t76445;
  double t76447;
  double t76448;
  double t76454;
  double t76455;
  double t76456;
  double t76469;
  double t76470;
  double t76471;
  double t76473;
  double t76474;
  double t76475;
  double t77107;
  double t77111;
  double t77116;
  double t77106;
  double t77117;
  double t77122;
  double t77131;
  double t77132;
  double t77134;
  double t77137;
  double t77138;
  double t77185;
  double t77187;
  double t77188;
  double t77192;
  double t77193;
  double t77195;
  double t76629;
  double t76634;
  double t77242;
  double t77246;
  double t77300;
  double t76756;
  double t76757;
  double t76758;
  double t76763;
  double t76766;
  double t76792;
  double t76793;
  double t76794;
  double t76796;
  double t76797;
  double t76798;
  double t76799;
  double t76800;
  double t76801;
  double t76806;
  double t76810;
  double t76811;
  double t76814;
  double t76815;
  double t76817;
  double t76819;
  double t76820;
  double t76537;
  double t76538;
  double t76541;
  double t76553;
  double t76558;
  double t76575;
  double t76576;
  double t76579;
  double t76580;
  double t76581;
  double t76590;
  double t76591;
  double t76596;
  double t76598;
  double t76599;
  double t76600;
  double t76603;
  double t76615;
  double t76618;
  double t76619;
  double t76620;
  double t76621;
  double t77449;
  double t77450;
  double t77451;
  double t77455;
  double t77456;
  double t77457;
  double t77465;
  double t77467;
  double t77468;
  double t77471;
  double t77474;
  double t77475;
  double t77485;
  double t77182;
  double t77183;
  double t77189;
  double t77191;
  double t77200;
  double t77201;
  double t77202;
  double t77204;
  double t77206;
  double t77214;
  double t77215;
  double t77216;
  double t77217;
  double t77218;
  double t77219;
  double t77230;
  double t77233;
  double t77234;
  double t77235;
  double t77236;
  double t77239;
  double t77553;
  double t77554;
  double t77556;
  double t77557;
  double t77558;
  double t77560;
  double t77576;
  double t77580;
  double t77587;
  double t76675;
  double t76680;
  double t76686;
  double t76687;
  double t76688;
  double t76689;
  double t76694;
  double t76700;
  double t76707;
  double t76712;
  double t76713;
  double t76721;
  double t76722;
  double t76727;
  double t76749;
  double t76750;
  double t76751;
  double t76752;
  double t76754;
  double t76487;
  double t76493;
  double t76498;
  double t76499;
  double t76500;
  double t76501;
  double t76502;
  double t76503;
  double t76504;
  double t76506;
  double t76507;
  double t76508;
  double t76511;
  double t76517;
  double t76519;
  double t76530;
  double t76533;
  double t76534;
  double t76535;
  double t77123;
  double t77133;
  double t77140;
  double t77141;
  double t77142;
  double t77143;
  double t77144;
  double t77145;
  double t77155;
  double t77156;
  double t77157;
  double t77159;
  double t77165;
  double t77166;
  double t77168;
  double t77170;
  double t77174;
  double t77177;
  double t77178;
  double t76064;
  double t76065;
  double t76067;
  double t76068;
  double t76078;
  double t76081;
  double t76083;
  double t76084;
  double t76090;
  double t76091;
  double t76092;
  double t76093;
  double t76096;
  double t77626;
  double t77628;
  double t77630;
  double t77642;
  double t76103;
  double t77652;
  double t77665;
  double t77666;
  double t77668;
  double t77669;
  double t76117;
  double t77555;
  double t77575;
  double t77588;
  double t77589;
  double t77590;
  double t77592;
  double t77593;
  double t77594;
  double t77595;
  double t77596;
  double t77597;
  double t77598;
  double t77605;
  double t77607;
  double t77608;
  double t77609;
  double t77611;
  double t77613;
  double t77614;
  double t77898;
  double t77900;
  double t77904;
  double t77907;
  double t77909;
  double t77910;
  double t77911;
  double t77912;
  double t77913;
  double t77914;
  double t77915;
  double t77916;
  double t77920;
  double t77921;
  double t77926;
  double t77927;
  double t77928;
  double t77941;
  double t77945;
  double t77946;
  double t77948;
  double t77949;
  double t77835;
  double t77836;
  double t77837;
  double t77838;
  double t77843;
  double t77844;
  double t77845;
  double t77846;
  double t77848;
  double t77864;
  double t77866;
  double t77867;
  double t77868;
  double t77869;
  double t77874;
  double t77878;
  double t77880;
  double t77889;
  double t77890;
  double t77891;
  double t77892;
  double t77894;
  double t77950;
  double t77951;
  double t77953;
  double t77954;
  double t77955;
  double t77956;
  double t77959;
  double t77963;
  double t77964;
  double t77966;
  double t77971;
  double t77972;
  double t77973;
  double t77974;
  double t77980;
  double t77991;
  double t77992;
  double t78003;
  double t78004;
  double t78005;
  double t78007;
  double t78046;
  double t78047;
  double t78051;
  double t78052;
  double t78055;
  double t78056;
  double t78058;
  double t78059;
  double t78060;
  double t78067;
  double t78069;
  double t78071;
  double t78072;
  double t78073;
  double t78074;
  double t78075;
  double t78080;
  double t78081;
  double t78084;
  double t78008;
  double t78009;
  double t78011;
  double t78012;
  double t78013;
  double t78014;
  double t78015;
  double t78016;
  double t78017;
  double t78019;
  double t78020;
  double t78030;
  double t78031;
  double t78032;
  double t78033;
  double t78036;
  double t78037;
  double t78038;
  double t78039;
  double t78042;
  double t78043;
  double t78045;
  double t78239;
  double t78245;
  double t78250;
  double t78254;
  double t78255;
  double t78265;
  double t78269;
  double t78274;
  double t78331;
  double t78332;
  double t78333;
  double t78334;
  double t78337;
  double t78338;
  double t78339;
  double t78341;
  double t78342;
  double t78343;
  double t78344;
  double t78381;
  double t78383;
  double t78404;
  double t78409;
  double t78422;
  double t78425;
  double t78426;
  double t78442;
  double t78443;
  double t78482;
  double t78483;
  double t78484;
  double t78487;
  double t78488;
  double t78489;
  double t78491;
  double t78492;
  double t78493;
  double t78181;
  double t78228;
  double t78251;
  double t78257;
  double t78275;
  double t78304;
  double t78308;
  double t78309;
  double t78311;
  double t78314;
  double t78315;
  double t78316;
  double t78318;
  double t78320;
  double t78321;
  double t78323;
  double t78324;
  double t78325;
  double t78326;
  double t78328;
  double t78329;
  double t78522;
  double t78524;
  double t78526;
  double t78548;
  double t78549;
  double t78550;
  double t78547;
  double t78551;
  double t78554;
  double t78556;
  double t78557;
  double t78560;
  double t78561;
  double t78597;
  double t78599;
  double t78601;
  double t78604;
  double t78605;
  double t78617;
  double t78368;
  double t78374;
  double t78380;
  double t78408;
  double t78441;
  double t78444;
  double t78451;
  double t78452;
  double t78453;
  double t78454;
  double t78455;
  double t78456;
  double t78457;
  double t78458;
  double t78459;
  double t78460;
  double t78461;
  double t78462;
  double t78463;
  double t78465;
  double t78471;
  double t78472;
  double t78855;
  double t78857;
  double t78862;
  double t78864;
  double t78865;
  double t78866;
  double t78868;
  double t78870;
  double t78871;
  double t78872;
  double t78591;
  double t78592;
  double t78602;
  double t78603;
  double t78620;
  double t78623;
  double t78626;
  double t78628;
  double t78644;
  double t78660;
  double t78662;
  double t78669;
  double t78672;
  double t78673;
  double t78674;
  double t78675;
  double t78678;
  double t78708;
  double t78720;
  double t78721;
  double t78726;
  double t78904;
  double t78905;
  double t78912;
  double t78913;
  double t78914;
  double t78916;
  double t78917;
  double t78918;
  double t78335;
  double t78340;
  double t78345;
  double t78346;
  double t78348;
  double t78349;
  double t78351;
  double t78352;
  double t78353;
  double t78354;
  double t78355;
  double t78356;
  double t78358;
  double t78359;
  double t78360;
  double t78361;
  double t78362;
  double t78363;
  double t78365;
  double t78555;
  double t78559;
  double t78562;
  double t78563;
  double t78565;
  double t78568;
  double t78569;
  double t78572;
  double t78573;
  double t78574;
  double t78575;
  double t78578;
  double t78579;
  double t78581;
  double t78582;
  double t78584;
  double t78585;
  double t78586;
  double t78587;
  double t78957;
  double t78960;
  double t78961;
  double t78970;
  double t78972;
  double t78982;
  double t78985;
  double t78987;
  double t78909;
  double t78915;
  double t78923;
  double t78924;
  double t78925;
  double t78926;
  double t78928;
  double t78930;
  double t78931;
  double t78932;
  double t78934;
  double t78935;
  double t78936;
  double t78939;
  double t78940;
  double t78941;
  double t78942;
  double t78944;
  double t78945;
  t28995 = Cos(var1[10]);
  t29029 = -1.*t28995;
  t29092 = 1. + t29029;
  t31273 = Cos(var1[4]);
  t34565 = Cos(var1[12]);
  t35470 = -1.*t34565;
  t36464 = 1. + t35470;
  t36927 = -3.e-6*t36464;
  t36929 = Sin(var1[12]);
  t31902 = Cos(var1[5]);
  t32330 = Sin(var1[10]);
  t33121 = Sin(var1[4]);
  t33292 = Sin(var1[5]);
  t37370 = 3.e-6*t36929;
  t37602 = t36927 + t37370;
  t37814 = 3.e-13*var1[12];
  t36936 = -3.e-6*t36929;
  t36960 = t36927 + t36936;
  t38166 = -9.e-12*t36464;
  t37717 = -3.e-6*t29092*t31273*t31902;
  t37759 = 3.e-6*t32330*t33121;
  t37765 = -9.e-12*t29092;
  t37773 = 1. + t37765;
  t37790 = t37773*t31273*t33292;
  t37800 = t37717 + t37759 + t37790;
  t38388 = -1.*t28995*t31273*t31902;
  t38393 = -1.*t32330*t33121;
  t38406 = 3.e-6*t29092*t31273*t33292;
  t38719 = t38388 + t38393 + t38406;
  t52841 = t31273*t31902*t32330;
  t52851 = -1.000000000009*t29092;
  t52859 = 1. + t52851;
  t52873 = -1.*t52859*t33121;
  t52882 = 3.e-6*t31273*t32330*t33292;
  t52949 = t52841 + t52873 + t52882;
  t53013 = 3.e-6*t36464;
  t69949 = -1.000000000009*t36464;
  t69971 = 1. + t69949;
  t69862 = 9.e-12*t36464;
  t38284 = -1.*t36929;
  t59761 = t53013 + t36936;
  t70568 = t53013 + t37370;
  t29306 = -1.8e-12*t29092;
  t30214 = -1. + t28995;
  t30885 = 0.2*t30214;
  t31263 = t29306 + t30885;
  t33817 = 1.e-7*var1[12];
  t36910 = 5.4e-18*t36464;
  t36966 = -0.200000000003*t36960;
  t37610 = 0.100000000003*t37602;
  t37651 = t33817 + t36910 + t36966 + t37610;
  t38060 = -0.2000000000048*t36464;
  t38320 = t38166 + t38284;
  t38345 = 0.100000000003*t38320;
  t38381 = 3.e-7*t37602;
  t38387 = t37814 + t38060 + t38345 + t38381;
  t38806 = 0.1000000000039*t36464;
  t38814 = 3.e-7*t36960;
  t38838 = t38166 + t36929;
  t52506 = -0.200000000003*t38838;
  t52703 = t37814 + t38806 + t38814 + t52506;
  t72045 = t37773*t31902*t33121;
  t72047 = 3.e-6*t29092*t33121*t33292;
  t72048 = t72045 + t72047;
  t69865 = t69862 + t36929;
  t72051 = 3.e-6*t29092*t31902*t33121;
  t72054 = t28995*t33121*t33292;
  t72056 = t72051 + t72054;
  t72059 = 3.e-6*t31902*t32330*t33121;
  t72061 = -1.*t32330*t33121*t33292;
  t72062 = t72059 + t72061;
  t70577 = t69862 + t38284;
  t70582 = -1.8e-11*t36464;
  t70585 = 1. + t70582;
  t72159 = 3.e-6*t34565;
  t72161 = t72159 + t36936;
  t72154 = -3.e-6*t34565;
  t72156 = t72154 + t36936;
  t72210 = -9.e-12*t36929;
  t72166 = -3.e-6*t31273*t32330;
  t72169 = -3.e-6*t29092*t31902*t33121;
  t72175 = t37773*t33121*t33292;
  t72179 = t72166 + t72169 + t72175;
  t72225 = t31273*t32330;
  t72228 = -1.*t28995*t31902*t33121;
  t72230 = t72225 + t72228 + t72047;
  t72241 = t52859*t31273;
  t72245 = t31902*t32330*t33121;
  t72246 = 3.e-6*t32330*t33121*t33292;
  t72247 = t72241 + t72245 + t72246;
  t72274 = t72159 + t37370;
  t72304 = t72154 + t37370;
  t72293 = 9.e-12*t36929;
  t73670 = -1.000000000009*t31273*t32330;
  t73913 = t28995*t31902*t33121;
  t73917 = 3.e-6*t28995*t33121*t33292;
  t73921 = t73670 + t73913 + t73917;
  t74014 = -3.e-6*t28995*t31273;
  t74018 = -3.e-6*t31902*t32330*t33121;
  t74019 = -9.e-12*t32330*t33121*t33292;
  t74020 = t74014 + t74018 + t74019;
  t74023 = t28995*t31273;
  t74024 = t74023 + t72245 + t72246;
  t32126 = -1.*t31263*t31273*t31902;
  t33718 = 6.000000000054e-7*t29092*t31273*t33292;
  t74519 = t37717 + t37790;
  t74521 = t38388 + t38406;
  t74541 = t52841 + t52882;
  t72157 = -0.200000000003*t72156;
  t72162 = 0.100000000003*t72161;
  t72163 = 5.4e-18*t36929;
  t72164 = 1.e-7 + t72157 + t72162 + t72163;
  t72200 = 3.e-7*t72161;
  t72212 = t35470 + t72210;
  t72217 = 0.100000000003*t72212;
  t72222 = -0.2000000000048*t36929;
  t72224 = 3.e-13 + t72200 + t72217 + t72222;
  t72232 = 3.e-7*t72156;
  t72234 = t34565 + t72210;
  t72235 = -0.200000000003*t72234;
  t72236 = 0.1000000000039*t36929;
  t72239 = 3.e-13 + t72232 + t72235 + t72236;
  t74866 = -1.*t37773*t31273*t31902;
  t74868 = -3.e-6*t29092*t31273*t33292;
  t74869 = t74866 + t74868;
  t74878 = -1.*t28995*t31273*t33292;
  t74885 = t37717 + t74878;
  t72295 = t35470 + t72293;
  t74891 = -3.e-6*t31273*t31902*t32330;
  t74892 = t31273*t32330*t33292;
  t74894 = t74891 + t74892;
  t73049 = t34565 + t72293;
  t75615 = -3.e-6*t28995*t31273*t31902;
  t75636 = t28995*t31273*t33292;
  t75643 = t75615 + t75636;
  t75650 = 9.e-12*t31273*t31902*t32330;
  t75653 = -3.e-6*t31273*t32330*t33292;
  t75665 = t75650 + t75653;
  t72042 = 6.000000000054e-7*t29092*t31902*t33121;
  t72044 = t31263*t33121*t33292;
  t72049 = t37651*t72048;
  t72057 = t38387*t72056;
  t72063 = t52703*t72062;
  t72064 = t59761*t72048;
  t72075 = t69865*t72056;
  t72085 = t69971*t72062;
  t72109 = t72064 + t72075 + t72085;
  t72112 = -0.3*t72109;
  t72113 = -1.*t70568*t72048;
  t72118 = -1.*t69971*t72056;
  t72125 = -1.*t70577*t72062;
  t72130 = t72113 + t72118 + t72125;
  t72131 = 0.2*t72130;
  t72132 = t70585*t72048;
  t72133 = t59761*t72056;
  t72135 = t70568*t72062;
  t72141 = t72132 + t72133 + t72135;
  t72148 = 0.100001*t72141;
  t72149 = t72042 + t72044 + t72049 + t72057 + t72063 + t72112 + t72131 + t72148;
  t75887 = -1.000000000009*t32330*t33121;
  t75888 = -3.e-6*t28995*t31273*t33292;
  t75893 = t38388 + t75887 + t75888;
  t75897 = -1.*t31273*t31902*t32330;
  t75898 = t28995*t33121;
  t75899 = t75897 + t75898 + t75653;
  t75901 = 3.e-6*t31273*t31902*t32330;
  t75905 = -3.e-6*t28995*t33121;
  t75913 = 9.e-12*t31273*t32330*t33292;
  t75922 = t75901 + t75905 + t75913;
  t33153 = -0.2000000000018*t32330*t33121;
  t76028 = t38388 + t38393 + t75888;
  t76031 = 3.e-6*t28995*t31273*t31902;
  t76032 = 9.e-12*t28995*t31273*t33292;
  t76033 = t76031 + t37759 + t76032;
  t76037 = -1.000000000009*t28995*t33121;
  t76038 = t52841 + t76037 + t52882;
  t75608 = -6.000000000054e-7*t31273*t31902*t32330;
  t75614 = 0.2000000000018*t31273*t32330*t33292;
  t75649 = t52703*t75643;
  t75668 = t37651*t75665;
  t75696 = t38387*t74894;
  t75701 = -1.*t70577*t75643;
  t75704 = -1.*t70568*t75665;
  t75705 = -1.*t69971*t74894;
  t75707 = t75701 + t75704 + t75705;
  t75709 = 0.2*t75707;
  t75723 = t70568*t75643;
  t75730 = t70585*t75665;
  t75731 = t59761*t74894;
  t75735 = t75723 + t75730 + t75731;
  t75736 = 0.100001*t75735;
  t75739 = t69971*t75643;
  t75740 = t59761*t75665;
  t75741 = t69865*t74894;
  t75743 = t75739 + t75740 + t75741;
  t75744 = -0.3*t75743;
  t75854 = t75608 + t75614 + t75649 + t75668 + t75696 + t75709 + t75736 + t75744;
  t73261 = 0.2000000000018*t28995*t31273;
  t73274 = 0.2000000000018*t31902*t32330*t33121;
  t73484 = 6.000000000054e-7*t32330*t33121*t33292;
  t73946 = t52703*t73921;
  t74022 = t37651*t74020;
  t74026 = t38387*t74024;
  t74027 = -1.*t70577*t73921;
  t74029 = -1.*t70568*t74020;
  t74031 = -1.*t69971*t74024;
  t74032 = t74027 + t74029 + t74031;
  t74033 = 0.2*t74032;
  t74034 = t70568*t73921;
  t74060 = t70585*t74020;
  t74485 = t59761*t74024;
  t74499 = t74034 + t74060 + t74485;
  t74501 = 0.100001*t74499;
  t74505 = t69971*t73921;
  t74506 = t59761*t74020;
  t74508 = t69865*t74024;
  t74509 = t74505 + t74506 + t74508;
  t74513 = -0.3*t74509;
  t74515 = t73261 + t73274 + t73484 + t73946 + t74022 + t74026 + t74033 + t74501 + t74513;
  t76080 = -9.e-12*t34565;
  t76069 = 3.e-6*t29092*t31273*t31902;
  t76070 = -3.e-6*t32330*t33121;
  t76072 = -1.*t37773*t31273*t33292;
  t76074 = t76069 + t76070 + t76072;
  t76085 = t28995*t31273*t31902;
  t76086 = t32330*t33121;
  t76087 = t76085 + t76086 + t74868;
  t76097 = t52859*t33121;
  t76098 = t75897 + t76097 + t75653;
  t76102 = 9.e-12*t34565;
  t75894 = t72239*t75893;
  t75900 = t72224*t75899;
  t75929 = t72164*t75922;
  t75930 = -1.000000000009*t36929*t75893;
  t75931 = t73049*t75899;
  t75973 = t72304*t75922;
  t75975 = t75930 + t75931 + t75973;
  t75976 = -0.3*t75975;
  t75977 = -1.*t72295*t75893;
  t75978 = 1.000000000009*t36929*t75899;
  t75984 = -1.*t72274*t75922;
  t76000 = t75977 + t75978 + t75984;
  t76007 = 0.2*t76000;
  t76010 = t72274*t75893;
  t76011 = t72304*t75899;
  t76020 = -1.8e-11*t36929*t75922;
  t76021 = t76010 + t76011 + t76020;
  t76022 = 0.100001*t76021;
  t76023 = t75894 + t75900 + t75929 + t75976 + t76007 + t76022;
  t74872 = t72164*t74869;
  t74890 = t72224*t74885;
  t74904 = t72239*t74894;
  t74909 = -1.*t72274*t74869;
  t74913 = 1.000000000009*t36929*t74885;
  t74940 = -1.*t72295*t74894;
  t74946 = t74909 + t74913 + t74940;
  t75327 = 0.2*t74946;
  t75328 = -1.8e-11*t36929*t74869;
  t75329 = t72304*t74885;
  t75332 = t72274*t74894;
  t75333 = t75328 + t75329 + t75332;
  t75334 = 0.100001*t75333;
  t75406 = t72304*t74869;
  t75504 = t73049*t74885;
  t75594 = -1.000000000009*t36929*t74894;
  t75596 = t75406 + t75504 + t75594;
  t75597 = -0.3*t75596;
  t75598 = t74872 + t74890 + t74904 + t75327 + t75334 + t75597;
  t72186 = t72164*t72179;
  t72231 = t72224*t72230;
  t72263 = t72239*t72247;
  t72281 = -1.*t72274*t72179;
  t72288 = 1.000000000009*t36929*t72230;
  t72296 = -1.*t72295*t72247;
  t72297 = t72281 + t72288 + t72296;
  t72300 = 0.2*t72297;
  t72303 = -1.8e-11*t36929*t72179;
  t72306 = t72304*t72230;
  t72310 = t72274*t72247;
  t72428 = t72303 + t72306 + t72310;
  t72651 = 0.100001*t72428;
  t72959 = t72304*t72179;
  t73227 = t73049*t72230;
  t73233 = -1.000000000009*t36929*t72247;
  t73241 = t72959 + t73227 + t73233;
  t73242 = -0.3*t73241;
  t73243 = t72186 + t72231 + t72263 + t72300 + t72651 + t73242;
  t76350 = Cos(var1[3]);
  t76354 = 3.e-6*t29092*t76350*t31273*t31902;
  t76356 = -3.e-6*t76350*t32330*t33121;
  t76358 = -1.*t37773*t76350*t31273*t33292;
  t76359 = t76354 + t76356 + t76358;
  t76361 = t28995*t76350*t31273*t31902;
  t76362 = t76350*t32330*t33121;
  t76363 = -3.e-6*t29092*t76350*t31273*t33292;
  t76364 = t76361 + t76362 + t76363;
  t76366 = -1.*t76350*t31273*t31902*t32330;
  t76367 = t52859*t76350*t33121;
  t76368 = -3.e-6*t76350*t31273*t32330*t33292;
  t76371 = t76366 + t76367 + t76368;
  t76395 = Sin(var1[3]);
  t76394 = -1.*t76350*t31902*t33121;
  t76396 = t76395*t33292;
  t76397 = t76394 + t76396;
  t76400 = -1.*t31902*t76395;
  t76402 = -1.*t76350*t33121*t33292;
  t76403 = t76400 + t76402;
  t76408 = t37773*t76397;
  t76410 = 3.e-6*t29092*t76403;
  t76415 = t76408 + t76410;
  t76417 = 3.e-6*t29092*t76397;
  t76418 = t28995*t76403;
  t76419 = t76417 + t76418;
  t76426 = 3.e-6*t32330*t76397;
  t76427 = -1.*t32330*t76403;
  t76428 = t76426 + t76427;
  t76479 = t76350*t31902*t33121;
  t76481 = -1.*t76395*t33292;
  t76482 = t76479 + t76481;
  t76478 = 3.e-6*t76350*t31273*t32330;
  t76483 = 3.e-6*t29092*t76482;
  t76484 = t37773*t76403;
  t76486 = t76478 + t76483 + t76484;
  t76488 = -1.*t76350*t31273*t32330;
  t76490 = t28995*t76482;
  t76492 = t76488 + t76490 + t76410;
  t76494 = -1.*t52859*t76350*t31273;
  t76495 = -1.*t32330*t76482;
  t76496 = 3.e-6*t32330*t76403;
  t76497 = t76494 + t76495 + t76496;
  t76544 = 1.000000000009*t76350*t31273*t32330;
  t76545 = -1.*t28995*t76482;
  t76549 = 3.e-6*t28995*t76403;
  t76552 = t76544 + t76545 + t76549;
  t76554 = 3.e-6*t28995*t76350*t31273;
  t76555 = 3.e-6*t32330*t76482;
  t76556 = -9.e-12*t32330*t76403;
  t76557 = t76554 + t76555 + t76556;
  t76563 = -1.*t28995*t76350*t31273;
  t76566 = t76563 + t76495 + t76496;
  t76625 = -1.*t31902*t76395*t33121;
  t76627 = -1.*t76350*t33292;
  t76628 = t76625 + t76627;
  t76630 = -1.*t76350*t31902;
  t76631 = t76395*t33121*t33292;
  t76632 = t76630 + t76631;
  t76635 = -3.e-6*t31273*t32330*t76395;
  t76636 = 3.e-6*t29092*t76628;
  t76637 = t37773*t76632;
  t76638 = t76635 + t76636 + t76637;
  t76641 = t31273*t32330*t76395;
  t76642 = t28995*t76628;
  t76643 = 3.e-6*t29092*t76632;
  t76644 = t76641 + t76642 + t76643;
  t76646 = t52859*t31273*t76395;
  t76647 = -1.*t32330*t76628;
  t76648 = 3.e-6*t32330*t76632;
  t76649 = t76646 + t76647 + t76648;
  t76351 = t31263*t76350*t31273*t31902;
  t76352 = 0.2000000000018*t76350*t32330*t33121;
  t76353 = -6.000000000054e-7*t29092*t76350*t31273*t33292;
  t76360 = t37651*t76359;
  t76365 = t38387*t76364;
  t76373 = t52703*t76371;
  t76374 = t59761*t76359;
  t76375 = t69865*t76364;
  t76376 = t69971*t76371;
  t76377 = t76374 + t76375 + t76376;
  t76378 = -0.3*t76377;
  t76379 = -1.*t70568*t76359;
  t76383 = -1.*t69971*t76364;
  t76384 = -1.*t70577*t76371;
  t76385 = t76379 + t76383 + t76384;
  t76386 = 0.2*t76385;
  t76387 = t70585*t76359;
  t76388 = t59761*t76364;
  t76389 = t70568*t76371;
  t76390 = t76387 + t76388 + t76389;
  t76391 = 0.100001*t76390;
  t76392 = t76351 + t76352 + t76353 + t76360 + t76365 + t76373 + t76378 + t76386 + t76391;
  t76670 = 3.e-6*t29092*t31273*t31902*t76395;
  t76672 = -3.e-6*t32330*t76395*t33121;
  t76673 = -1.*t37773*t31273*t76395*t33292;
  t76674 = t76670 + t76672 + t76673;
  t76676 = t28995*t31273*t31902*t76395;
  t76677 = t32330*t76395*t33121;
  t76678 = -3.e-6*t29092*t31273*t76395*t33292;
  t76679 = t76676 + t76677 + t76678;
  t76681 = -1.*t31273*t31902*t32330*t76395;
  t76682 = t52859*t76395*t33121;
  t76683 = -3.e-6*t31273*t32330*t76395*t33292;
  t76684 = t76681 + t76682 + t76683;
  t76759 = -1.*t28995*t31273*t31902*t76395;
  t76760 = -1.000000000009*t32330*t76395*t33121;
  t76761 = -3.e-6*t28995*t31273*t76395*t33292;
  t76762 = t76759 + t76760 + t76761;
  t76764 = t28995*t76395*t33121;
  t76765 = t76681 + t76764 + t76683;
  t76767 = 3.e-6*t31273*t31902*t32330*t76395;
  t76768 = -3.e-6*t28995*t76395*t33121;
  t76772 = 9.e-12*t31273*t32330*t76395*t33292;
  t76791 = t76767 + t76768 + t76772;
  t76824 = -1.*t37773*t31273*t31902*t76395;
  t76826 = t76824 + t76678;
  t76828 = -3.e-6*t29092*t31273*t31902*t76395;
  t76829 = -1.*t28995*t31273*t76395*t33292;
  t76830 = t76828 + t76829;
  t76836 = -3.e-6*t31273*t31902*t32330*t76395;
  t76838 = t31273*t32330*t76395*t33292;
  t76839 = t76836 + t76838;
  t76624 = 0.2000000000018*t31273*t32330*t76395;
  t77000 = -3.e-6*t29092*t31902*t76395*t33121;
  t77020 = t37773*t76395*t33121*t33292;
  t77025 = t76635 + t77000 + t77020;
  t77027 = -1.*t28995*t31902*t76395*t33121;
  t77036 = 3.e-6*t29092*t76395*t33121*t33292;
  t77037 = t76641 + t77027 + t77036;
  t77042 = t31902*t32330*t76395*t33121;
  t77043 = 3.e-6*t32330*t76395*t33121*t33292;
  t77046 = t76646 + t77042 + t77043;
  t76822 = -6.000000000054e-7*t29092*t31273*t31902*t76395;
  t76823 = -1.*t31263*t31273*t76395*t33292;
  t76827 = t37651*t76826;
  t76834 = t38387*t76830;
  t76844 = t52703*t76839;
  t76846 = t59761*t76826;
  t76847 = t69865*t76830;
  t76852 = t69971*t76839;
  t76858 = t76846 + t76847 + t76852;
  t76863 = -0.3*t76858;
  t76867 = -1.*t70568*t76826;
  t76875 = -1.*t69971*t76830;
  t76882 = -1.*t70577*t76839;
  t76888 = t76867 + t76875 + t76882;
  t76889 = 0.2*t76888;
  t76897 = t70585*t76826;
  t76902 = t59761*t76830;
  t76909 = t70568*t76839;
  t76916 = t76897 + t76902 + t76909;
  t76951 = 0.100001*t76916;
  t76952 = t76822 + t76823 + t76827 + t76834 + t76844 + t76863 + t76889 + t76951;
  t76398 = 6.000000000054e-7*t29092*t76397;
  t76405 = t31263*t76403;
  t76416 = t37651*t76415;
  t76420 = t38387*t76419;
  t76429 = t52703*t76428;
  t76431 = t59761*t76415;
  t76438 = t69865*t76419;
  t76439 = t69971*t76428;
  t76440 = t76431 + t76438 + t76439;
  t76445 = -0.3*t76440;
  t76447 = -1.*t70568*t76415;
  t76448 = -1.*t69971*t76419;
  t76454 = -1.*t70577*t76428;
  t76455 = t76447 + t76448 + t76454;
  t76456 = 0.2*t76455;
  t76469 = t70585*t76415;
  t76470 = t59761*t76419;
  t76471 = t70568*t76428;
  t76473 = t76469 + t76470 + t76471;
  t76474 = 0.100001*t76473;
  t76475 = t76398 + t76405 + t76416 + t76420 + t76429 + t76445 + t76456 + t76474;
  t77107 = t76350*t31902;
  t77111 = -1.*t76395*t33121*t33292;
  t77116 = t77107 + t77111;
  t77106 = t37773*t76628;
  t77117 = 3.e-6*t29092*t77116;
  t77122 = t77106 + t77117;
  t77131 = t28995*t77116;
  t77132 = t76636 + t77131;
  t77134 = 3.e-6*t32330*t76628;
  t77137 = -1.*t32330*t77116;
  t77138 = t77134 + t77137;
  t77185 = 3.e-6*t28995*t76628;
  t77187 = -1.*t28995*t77116;
  t77188 = t77185 + t77187;
  t77192 = -9.e-12*t32330*t76628;
  t77193 = 3.e-6*t32330*t77116;
  t77195 = t77192 + t77193;
  t76629 = t31263*t76628;
  t76634 = 6.000000000054e-7*t29092*t76632;
  t77242 = t76636 + t76637;
  t77246 = t76642 + t76643;
  t77300 = t76647 + t76648;
  t76756 = -0.2000000000018*t31273*t31902*t32330*t76395;
  t76757 = 0.2000000000018*t28995*t76395*t33121;
  t76758 = -6.000000000054e-7*t31273*t32330*t76395*t33292;
  t76763 = t52703*t76762;
  t76766 = t38387*t76765;
  t76792 = t37651*t76791;
  t76793 = t70568*t76762;
  t76794 = t59761*t76765;
  t76796 = t70585*t76791;
  t76797 = t76793 + t76794 + t76796;
  t76798 = 0.100001*t76797;
  t76799 = t69971*t76762;
  t76800 = t69865*t76765;
  t76801 = t59761*t76791;
  t76806 = t76799 + t76800 + t76801;
  t76810 = -0.3*t76806;
  t76811 = -1.*t70577*t76762;
  t76814 = -1.*t69971*t76765;
  t76815 = -1.*t70568*t76791;
  t76817 = t76811 + t76814 + t76815;
  t76819 = 0.2*t76817;
  t76820 = t76756 + t76757 + t76758 + t76763 + t76766 + t76792 + t76798 + t76810 + t76819;
  t76537 = -0.2000000000018*t28995*t76350*t31273;
  t76538 = -0.2000000000018*t32330*t76482;
  t76541 = 6.000000000054e-7*t32330*t76403;
  t76553 = t52703*t76552;
  t76558 = t37651*t76557;
  t76575 = t38387*t76566;
  t76576 = -1.*t70577*t76552;
  t76579 = -1.*t70568*t76557;
  t76580 = -1.*t69971*t76566;
  t76581 = t76576 + t76579 + t76580;
  t76590 = 0.2*t76581;
  t76591 = t70568*t76552;
  t76596 = t70585*t76557;
  t76598 = t59761*t76566;
  t76599 = t76591 + t76596 + t76598;
  t76600 = 0.100001*t76599;
  t76603 = t69971*t76552;
  t76615 = t59761*t76557;
  t76618 = t69865*t76566;
  t76619 = t76603 + t76615 + t76618;
  t76620 = -0.3*t76619;
  t76621 = t76537 + t76538 + t76541 + t76553 + t76558 + t76575 + t76590 + t76600 + t76620;
  t77449 = t31902*t76395*t33121;
  t77450 = t76350*t33292;
  t77451 = t77449 + t77450;
  t77455 = 3.e-6*t28995*t77451;
  t77456 = -9.e-12*t28995*t77116;
  t77457 = t76635 + t77455 + t77456;
  t77465 = -1.*t28995*t77451;
  t77467 = 3.e-6*t28995*t77116;
  t77468 = t76641 + t77465 + t77467;
  t77471 = 1.000000000009*t28995*t31273*t76395;
  t77474 = t32330*t77451;
  t77475 = -3.e-6*t32330*t77116;
  t77485 = t77471 + t77474 + t77475;
  t77182 = 6.000000000054e-7*t32330*t76628;
  t77183 = -0.2000000000018*t32330*t77116;
  t77189 = t52703*t77188;
  t77191 = t38387*t77138;
  t77200 = t37651*t77195;
  t77201 = t70568*t77188;
  t77202 = t59761*t77138;
  t77204 = t70585*t77195;
  t77206 = t77201 + t77202 + t77204;
  t77214 = 0.100001*t77206;
  t77215 = t69971*t77188;
  t77216 = t69865*t77138;
  t77217 = t59761*t77195;
  t77218 = t77215 + t77216 + t77217;
  t77219 = -0.3*t77218;
  t77230 = -1.*t70577*t77188;
  t77233 = -1.*t69971*t77138;
  t77234 = -1.*t70568*t77195;
  t77235 = t77230 + t77233 + t77234;
  t77236 = 0.2*t77235;
  t77239 = t77182 + t77183 + t77189 + t77191 + t77200 + t77214 + t77219 + t77236;
  t77553 = 1.000000000009*t31273*t32330*t76395;
  t77554 = t77553 + t77465 + t77467;
  t77556 = 3.e-6*t28995*t31273*t76395;
  t77557 = 3.e-6*t32330*t77451;
  t77558 = -9.e-12*t32330*t77116;
  t77560 = t77556 + t77557 + t77558;
  t77576 = -1.*t28995*t31273*t76395;
  t77580 = -1.*t32330*t77451;
  t77587 = t77576 + t77580 + t77193;
  t76675 = t72164*t76674;
  t76680 = t72224*t76679;
  t76686 = t72239*t76684;
  t76687 = -1.*t72274*t76674;
  t76688 = 1.000000000009*t36929*t76679;
  t76689 = -1.*t72295*t76684;
  t76694 = t76687 + t76688 + t76689;
  t76700 = 0.2*t76694;
  t76707 = -1.8e-11*t36929*t76674;
  t76712 = t72304*t76679;
  t76713 = t72274*t76684;
  t76721 = t76707 + t76712 + t76713;
  t76722 = 0.100001*t76721;
  t76727 = t72304*t76674;
  t76749 = t73049*t76679;
  t76750 = -1.000000000009*t36929*t76684;
  t76751 = t76727 + t76749 + t76750;
  t76752 = -0.3*t76751;
  t76754 = t76675 + t76680 + t76686 + t76700 + t76722 + t76752;
  t76487 = t72164*t76486;
  t76493 = t72224*t76492;
  t76498 = t72239*t76497;
  t76499 = -1.*t72274*t76486;
  t76500 = 1.000000000009*t36929*t76492;
  t76501 = -1.*t72295*t76497;
  t76502 = t76499 + t76500 + t76501;
  t76503 = 0.2*t76502;
  t76504 = -1.8e-11*t36929*t76486;
  t76506 = t72304*t76492;
  t76507 = t72274*t76497;
  t76508 = t76504 + t76506 + t76507;
  t76511 = 0.100001*t76508;
  t76517 = t72304*t76486;
  t76519 = t73049*t76492;
  t76530 = -1.000000000009*t36929*t76497;
  t76533 = t76517 + t76519 + t76530;
  t76534 = -0.3*t76533;
  t76535 = t76487 + t76493 + t76498 + t76503 + t76511 + t76534;
  t77123 = t72164*t77122;
  t77133 = t72224*t77132;
  t77140 = t72239*t77138;
  t77141 = -1.*t72274*t77122;
  t77142 = 1.000000000009*t36929*t77132;
  t77143 = -1.*t72295*t77138;
  t77144 = t77141 + t77142 + t77143;
  t77145 = 0.2*t77144;
  t77155 = -1.8e-11*t36929*t77122;
  t77156 = t72304*t77132;
  t77157 = t72274*t77138;
  t77159 = t77155 + t77156 + t77157;
  t77165 = 0.100001*t77159;
  t77166 = t72304*t77122;
  t77168 = t73049*t77132;
  t77170 = -1.000000000009*t36929*t77138;
  t77174 = t77166 + t77168 + t77170;
  t77177 = -0.3*t77174;
  t77178 = t77123 + t77133 + t77140 + t77145 + t77165 + t77177;
  t76064 = 5.4e-18*t34565;
  t76065 = 0.100000000003*t72156;
  t76067 = -0.200000000003*t72304;
  t76068 = t76064 + t76065 + t76067;
  t76078 = -0.2000000000048*t34565;
  t76081 = t76080 + t36929;
  t76083 = 0.100000000003*t76081;
  t76084 = t76078 + t72232 + t76083;
  t76090 = 0.1000000000039*t34565;
  t76091 = t76080 + t38284;
  t76092 = -0.200000000003*t76091;
  t76093 = 3.e-7*t72304;
  t76096 = t76090 + t76092 + t76093;
  t77626 = 3.e-6*t31273*t32330*t76395;
  t77628 = 3.e-6*t29092*t77451;
  t77630 = t37773*t77116;
  t77642 = t77626 + t77628 + t77630;
  t76103 = t76102 + t38284;
  t77652 = -1.*t31273*t32330*t76395;
  t77665 = t28995*t77451;
  t77666 = t77652 + t77665 + t77117;
  t77668 = -1.*t52859*t31273*t76395;
  t77669 = t77668 + t77580 + t77193;
  t76117 = t76102 + t36929;
  t77555 = t72239*t77554;
  t77575 = t72164*t77560;
  t77588 = t72224*t77587;
  t77589 = -1.000000000009*t36929*t77554;
  t77590 = t72304*t77560;
  t77592 = t73049*t77587;
  t77593 = t77589 + t77590 + t77592;
  t77594 = -0.3*t77593;
  t77595 = t72274*t77554;
  t77596 = -1.8e-11*t36929*t77560;
  t77597 = t72304*t77587;
  t77598 = t77595 + t77596 + t77597;
  t77605 = 0.100001*t77598;
  t77607 = -1.*t72295*t77554;
  t77608 = -1.*t72274*t77560;
  t77609 = 1.000000000009*t36929*t77587;
  t77611 = t77607 + t77608 + t77609;
  t77613 = 0.2*t77611;
  t77614 = t77555 + t77575 + t77588 + t77594 + t77605 + t77613;
  t77898 = t31263*t31273*t31902*t76395;
  t77900 = 0.2000000000018*t32330*t76395*t33121;
  t77904 = -6.000000000054e-7*t29092*t31273*t76395*t33292;
  t77907 = t37651*t76674;
  t77909 = t38387*t76679;
  t77910 = t52703*t76684;
  t77911 = t59761*t76674;
  t77912 = t69865*t76679;
  t77913 = t69971*t76684;
  t77914 = t77911 + t77912 + t77913;
  t77915 = -0.3*t77914;
  t77916 = -1.*t70568*t76674;
  t77920 = -1.*t69971*t76679;
  t77921 = -1.*t70577*t76684;
  t77926 = t77916 + t77920 + t77921;
  t77927 = 0.2*t77926;
  t77928 = t70585*t76674;
  t77941 = t59761*t76679;
  t77945 = t70568*t76684;
  t77946 = t77928 + t77941 + t77945;
  t77948 = 0.100001*t77946;
  t77949 = t77898 + t77900 + t77904 + t77907 + t77909 + t77910 + t77915 + t77927 + t77948;
  t77835 = -0.2000000000018*t76350*t31273*t32330;
  t77836 = t31263*t76482;
  t77837 = 6.000000000054e-7*t29092*t76403;
  t77838 = t37651*t76486;
  t77843 = t38387*t76492;
  t77844 = t52703*t76497;
  t77845 = t59761*t76486;
  t77846 = t69865*t76492;
  t77848 = t69971*t76497;
  t77864 = t77845 + t77846 + t77848;
  t77866 = -0.3*t77864;
  t77867 = -1.*t70568*t76486;
  t77868 = -1.*t69971*t76492;
  t77869 = -1.*t70577*t76497;
  t77874 = t77867 + t77868 + t77869;
  t77878 = 0.2*t77874;
  t77880 = t70585*t76486;
  t77889 = t59761*t76492;
  t77890 = t70568*t76497;
  t77891 = t77880 + t77889 + t77890;
  t77892 = 0.100001*t77891;
  t77894 = t77835 + t77836 + t77837 + t77838 + t77843 + t77844 + t77866 + t77878 + t77892;
  t77950 = 6.000000000054e-7*t29092*t76628;
  t77951 = t31263*t77116;
  t77953 = t37651*t77122;
  t77954 = t38387*t77132;
  t77955 = t52703*t77138;
  t77956 = t59761*t77122;
  t77959 = t69865*t77132;
  t77963 = t69971*t77138;
  t77964 = t77956 + t77959 + t77963;
  t77966 = -0.3*t77964;
  t77971 = -1.*t70568*t77122;
  t77972 = -1.*t69971*t77132;
  t77973 = -1.*t70577*t77138;
  t77974 = t77971 + t77972 + t77973;
  t77980 = 0.2*t77974;
  t77991 = t70585*t77122;
  t77992 = t59761*t77132;
  t78003 = t70568*t77138;
  t78004 = t77991 + t77992 + t78003;
  t78005 = 0.100001*t78004;
  t78007 = t77950 + t77951 + t77953 + t77954 + t77955 + t77966 + t77980 + t78005;
  t78046 = t72164*t77642;
  t78047 = t72224*t77666;
  t78051 = t72239*t77669;
  t78052 = -1.*t72274*t77642;
  t78055 = 1.000000000009*t36929*t77666;
  t78056 = -1.*t72295*t77669;
  t78058 = t78052 + t78055 + t78056;
  t78059 = 0.2*t78058;
  t78060 = -1.8e-11*t36929*t77642;
  t78067 = t72304*t77666;
  t78069 = t72274*t77669;
  t78071 = t78060 + t78067 + t78069;
  t78072 = 0.100001*t78071;
  t78073 = t72304*t77642;
  t78074 = t73049*t77666;
  t78075 = -1.000000000009*t36929*t77669;
  t78080 = t78073 + t78074 + t78075;
  t78081 = -0.3*t78080;
  t78084 = t78046 + t78047 + t78051 + t78059 + t78072 + t78081;
  t78008 = -0.2000000000018*t28995*t31273*t76395;
  t78009 = -0.2000000000018*t32330*t77451;
  t78011 = 6.000000000054e-7*t32330*t77116;
  t78012 = t52703*t77554;
  t78013 = t37651*t77560;
  t78014 = t38387*t77587;
  t78015 = -1.*t70577*t77554;
  t78016 = -1.*t70568*t77560;
  t78017 = -1.*t69971*t77587;
  t78019 = t78015 + t78016 + t78017;
  t78020 = 0.2*t78019;
  t78030 = t70568*t77554;
  t78031 = t70585*t77560;
  t78032 = t59761*t77587;
  t78033 = t78030 + t78031 + t78032;
  t78036 = 0.100001*t78033;
  t78037 = t69971*t77554;
  t78038 = t59761*t77560;
  t78039 = t69865*t77587;
  t78042 = t78037 + t78038 + t78039;
  t78043 = -0.3*t78042;
  t78045 = t78008 + t78009 + t78011 + t78012 + t78013 + t78014 + t78020 + t78036 + t78043;
  t78239 = t37773*t76350*t31273*t31902;
  t78245 = 3.e-6*t29092*t76350*t31273*t33292;
  t78250 = t78239 + t78245;
  t78254 = t28995*t76350*t31273*t33292;
  t78255 = t76354 + t78254;
  t78265 = 3.e-6*t76350*t31273*t31902*t32330;
  t78269 = -1.*t76350*t31273*t32330*t33292;
  t78274 = t78265 + t78269;
  t78331 = -3.e-6*t29092*t76350*t31273*t31902;
  t78332 = 3.e-6*t76350*t32330*t33121;
  t78333 = t37773*t76350*t31273*t33292;
  t78334 = t78331 + t78332 + t78333;
  t78337 = -1.*t28995*t76350*t31273*t31902;
  t78338 = -1.*t76350*t32330*t33121;
  t78339 = t78337 + t78338 + t78245;
  t78341 = t76350*t31273*t31902*t32330;
  t78342 = -1.*t52859*t76350*t33121;
  t78343 = 3.e-6*t76350*t31273*t32330*t33292;
  t78344 = t78341 + t78342 + t78343;
  t78381 = 1.000000000009*t76350*t32330*t33121;
  t78383 = 3.e-6*t28995*t76350*t31273*t33292;
  t78404 = t76361 + t78381 + t78383;
  t78409 = -3.e-6*t76350*t31273*t31902*t32330;
  t78422 = 3.e-6*t28995*t76350*t33121;
  t78425 = -9.e-12*t76350*t31273*t32330*t33292;
  t78426 = t78409 + t78422 + t78425;
  t78442 = -1.*t28995*t76350*t33121;
  t78443 = t78341 + t78442 + t78343;
  t78482 = 3.e-6*t29092*t76350*t31902*t33121;
  t78483 = -1.*t37773*t76350*t33121*t33292;
  t78484 = t76478 + t78482 + t78483;
  t78487 = t28995*t76350*t31902*t33121;
  t78488 = -3.e-6*t29092*t76350*t33121*t33292;
  t78489 = t76488 + t78487 + t78488;
  t78491 = -1.*t76350*t31902*t32330*t33121;
  t78492 = -3.e-6*t76350*t32330*t33121*t33292;
  t78493 = t76494 + t78491 + t78492;
  t78181 = 6.000000000054e-7*t29092*t76350*t31273*t31902;
  t78228 = t31263*t76350*t31273*t33292;
  t78251 = t37651*t78250;
  t78257 = t38387*t78255;
  t78275 = t52703*t78274;
  t78304 = t59761*t78250;
  t78308 = t69865*t78255;
  t78309 = t69971*t78274;
  t78311 = t78304 + t78308 + t78309;
  t78314 = -0.3*t78311;
  t78315 = -1.*t70568*t78250;
  t78316 = -1.*t69971*t78255;
  t78318 = -1.*t70577*t78274;
  t78320 = t78315 + t78316 + t78318;
  t78321 = 0.2*t78320;
  t78323 = t70585*t78250;
  t78324 = t59761*t78255;
  t78325 = t70568*t78274;
  t78326 = t78323 + t78324 + t78325;
  t78328 = 0.100001*t78326;
  t78329 = t78181 + t78228 + t78251 + t78257 + t78275 + t78314 + t78321 + t78328;
  t78522 = t76483 + t76484;
  t78524 = t76490 + t76410;
  t78526 = t76495 + t76496;
  t78548 = t31902*t76395;
  t78549 = t76350*t33121*t33292;
  t78550 = t78548 + t78549;
  t78547 = t37773*t76482;
  t78551 = 3.e-6*t29092*t78550;
  t78554 = t78547 + t78551;
  t78556 = t28995*t78550;
  t78557 = t76483 + t78556;
  t78560 = -1.*t32330*t78550;
  t78561 = t76555 + t78560;
  t78597 = 3.e-6*t28995*t76482;
  t78599 = -1.*t28995*t78550;
  t78601 = t78597 + t78599;
  t78604 = -9.e-12*t32330*t76482;
  t78605 = 3.e-6*t32330*t78550;
  t78617 = t78604 + t78605;
  t78368 = 0.2000000000018*t76350*t31273*t31902*t32330;
  t78374 = -0.2000000000018*t28995*t76350*t33121;
  t78380 = 6.000000000054e-7*t76350*t31273*t32330*t33292;
  t78408 = t52703*t78404;
  t78441 = t37651*t78426;
  t78444 = t38387*t78443;
  t78451 = -1.*t70577*t78404;
  t78452 = -1.*t70568*t78426;
  t78453 = -1.*t69971*t78443;
  t78454 = t78451 + t78452 + t78453;
  t78455 = 0.2*t78454;
  t78456 = t70568*t78404;
  t78457 = t70585*t78426;
  t78458 = t59761*t78443;
  t78459 = t78456 + t78457 + t78458;
  t78460 = 0.100001*t78459;
  t78461 = t69971*t78404;
  t78462 = t59761*t78426;
  t78463 = t69865*t78443;
  t78465 = t78461 + t78462 + t78463;
  t78471 = -0.3*t78465;
  t78472 = t78368 + t78374 + t78380 + t78408 + t78441 + t78444 + t78455 + t78460 + t78471;
  t78855 = 3.e-6*t28995*t76397;
  t78857 = -9.e-12*t28995*t78550;
  t78862 = t76478 + t78855 + t78857;
  t78864 = -1.*t28995*t76397;
  t78865 = 3.e-6*t28995*t78550;
  t78866 = t76488 + t78864 + t78865;
  t78868 = -1.000000000009*t28995*t76350*t31273;
  t78870 = t32330*t76397;
  t78871 = -3.e-6*t32330*t78550;
  t78872 = t78868 + t78870 + t78871;
  t78591 = 6.000000000054e-7*t32330*t76482;
  t78592 = -0.2000000000018*t32330*t78550;
  t78602 = t52703*t78601;
  t78603 = t38387*t78561;
  t78620 = t37651*t78617;
  t78623 = t70568*t78601;
  t78626 = t59761*t78561;
  t78628 = t70585*t78617;
  t78644 = t78623 + t78626 + t78628;
  t78660 = 0.100001*t78644;
  t78662 = t69971*t78601;
  t78669 = t69865*t78561;
  t78672 = t59761*t78617;
  t78673 = t78662 + t78669 + t78672;
  t78674 = -0.3*t78673;
  t78675 = -1.*t70577*t78601;
  t78678 = -1.*t69971*t78561;
  t78708 = -1.*t70568*t78617;
  t78720 = t78675 + t78678 + t78708;
  t78721 = 0.2*t78720;
  t78726 = t78591 + t78592 + t78602 + t78603 + t78620 + t78660 + t78674 + t78721;
  t78904 = -1.000000000009*t76350*t31273*t32330;
  t78905 = t78904 + t78864 + t78865;
  t78912 = -3.e-6*t28995*t76350*t31273;
  t78913 = -9.e-12*t32330*t78550;
  t78914 = t78912 + t76426 + t78913;
  t78916 = t28995*t76350*t31273;
  t78917 = -1.*t32330*t76397;
  t78918 = t78916 + t78917 + t78605;
  t78335 = t72164*t78334;
  t78340 = t72224*t78339;
  t78345 = t72239*t78344;
  t78346 = -1.*t72274*t78334;
  t78348 = 1.000000000009*t36929*t78339;
  t78349 = -1.*t72295*t78344;
  t78351 = t78346 + t78348 + t78349;
  t78352 = 0.2*t78351;
  t78353 = -1.8e-11*t36929*t78334;
  t78354 = t72304*t78339;
  t78355 = t72274*t78344;
  t78356 = t78353 + t78354 + t78355;
  t78358 = 0.100001*t78356;
  t78359 = t72304*t78334;
  t78360 = t73049*t78339;
  t78361 = -1.000000000009*t36929*t78344;
  t78362 = t78359 + t78360 + t78361;
  t78363 = -0.3*t78362;
  t78365 = t78335 + t78340 + t78345 + t78352 + t78358 + t78363;
  t78555 = t72164*t78554;
  t78559 = t72224*t78557;
  t78562 = t72239*t78561;
  t78563 = -1.*t72274*t78554;
  t78565 = 1.000000000009*t36929*t78557;
  t78568 = -1.*t72295*t78561;
  t78569 = t78563 + t78565 + t78568;
  t78572 = 0.2*t78569;
  t78573 = -1.8e-11*t36929*t78554;
  t78574 = t72304*t78557;
  t78575 = t72274*t78561;
  t78578 = t78573 + t78574 + t78575;
  t78579 = 0.100001*t78578;
  t78581 = t72304*t78554;
  t78582 = t73049*t78557;
  t78584 = -1.000000000009*t36929*t78561;
  t78585 = t78581 + t78582 + t78584;
  t78586 = -0.3*t78585;
  t78587 = t78555 + t78559 + t78562 + t78572 + t78579 + t78586;
  t78957 = -3.e-6*t76350*t31273*t32330;
  t78960 = t37773*t78550;
  t78961 = t78957 + t76417 + t78960;
  t78970 = t76350*t31273*t32330;
  t78972 = t28995*t76397;
  t78982 = t78970 + t78972 + t78551;
  t78985 = t52859*t76350*t31273;
  t78987 = t78985 + t78917 + t78605;
  t78909 = t72239*t78905;
  t78915 = t72164*t78914;
  t78923 = t72224*t78918;
  t78924 = -1.000000000009*t36929*t78905;
  t78925 = t72304*t78914;
  t78926 = t73049*t78918;
  t78928 = t78924 + t78925 + t78926;
  t78930 = -0.3*t78928;
  t78931 = t72274*t78905;
  t78932 = -1.8e-11*t36929*t78914;
  t78934 = t72304*t78918;
  t78935 = t78931 + t78932 + t78934;
  t78936 = 0.100001*t78935;
  t78939 = -1.*t72295*t78905;
  t78940 = -1.*t72274*t78914;
  t78941 = 1.000000000009*t36929*t78918;
  t78942 = t78939 + t78940 + t78941;
  t78944 = 0.2*t78942;
  t78945 = t78909 + t78915 + t78923 + t78930 + t78936 + t78944;
  p_output1[0]=(t32126 + t33153 + t33718 + t37651*t37800 + t38387*t38719 + t52703*t52949 - 0.3*(t37800*t59761 + t38719*t69865 + t52949*t69971) + 0.2*(-1.*t38719*t69971 - 1.*t37800*t70568 - 1.*t52949*t70577) + 0.100001*(t38719*t59761 + t52949*t70568 + t37800*t70585))*var2[4] + t72149*var2[5] + t74515*var2[10] + t73243*var2[12];
  p_output1[1]=t72149*var2[4] + (t32126 + t33718 + t37651*t74519 + t38387*t74521 + t52703*t74541 - 0.3*(t59761*t74519 + t69865*t74521 + t69971*t74541) + 0.100001*(t70585*t74519 + t59761*t74521 + t70568*t74541) + 0.2*(-1.*t70568*t74519 - 1.*t69971*t74521 - 1.*t70577*t74541))*var2[5] + t75854*var2[10] + t75598*var2[12];
  p_output1[2]=t74515*var2[4] + t75854*var2[5] + (-0.2000000000018*t28995*t31273*t31902 + t33153 - 6.000000000054e-7*t28995*t31273*t33292 + t38387*t76028 + t37651*t76033 + t52703*t76038 - 0.3*(t69865*t76028 + t59761*t76033 + t69971*t76038) + 0.100001*(t59761*t76028 + t70585*t76033 + t70568*t76038) + 0.2*(-1.*t69971*t76028 - 1.*t70568*t76033 - 1.*t70577*t76038))*var2[10] + t76023*var2[12];
  p_output1[3]=t73243*var2[4] + t75598*var2[5] + t76023*var2[10] + (t76068*t76074 + t76084*t76087 + t76096*t76098 + 0.100001*(-1.8e-11*t34565*t76074 + t72274*t76087 + t72161*t76098) - 0.3*(t72274*t76074 - 1.000000000009*t34565*t76098 + t76087*t76103) + 0.2*(-1.*t72161*t76074 + 1.000000000009*t34565*t76087 - 1.*t76098*t76117))*var2[12];
  p_output1[4]=1.;
  p_output1[5]=0.2000000000018*t31273*t32330 - 1.*t31263*t31902*t33121 + 6.000000000054e-7*t29092*t33121*t33292 + t37651*t72179 + t38387*t72230 + t52703*t72247 - 0.3*(t59761*t72179 + t69865*t72230 + t69971*t72247) + 0.100001*(t70585*t72179 + t59761*t72230 + t70568*t72247) + 0.2*(-1.*t70568*t72179 - 1.*t69971*t72230 - 1.*t70577*t72247);
  p_output1[6]=-6.000000000054e-7*t29092*t31273*t31902 - 1.*t31263*t31273*t33292 + t37651*t74869 + t38387*t74885 + t52703*t74894 - 0.3*(t59761*t74869 + t69865*t74885 + t69971*t74894) + 0.100001*(t70585*t74869 + t59761*t74885 + t70568*t74894) + 0.2*(-1.*t70568*t74869 - 1.*t69971*t74885 - 1.*t70577*t74894);
  p_output1[7]=-0.2000000000018*t31273*t31902*t32330 + 0.2000000000018*t28995*t33121 - 6.000000000054e-7*t31273*t32330*t33292 + t52703*t75893 + t38387*t75899 + t37651*t75922 - 0.3*(t69971*t75893 + t69865*t75899 + t59761*t75922) + 0.2*(-1.*t70577*t75893 - 1.*t69971*t75899 - 1.*t70568*t75922) + 0.100001*(t70568*t75893 + t59761*t75899 + t70585*t75922);
  p_output1[8]=t72164*t76074 + t72224*t76087 + t72239*t76098 - 0.3*(t72304*t76074 + t73049*t76087 - 1.000000000009*t36929*t76098) + 0.100001*(-1.8e-11*t36929*t76074 + t72304*t76087 + t72274*t76098) + 0.2*(-1.*t72274*t76074 + 1.000000000009*t36929*t76087 - 1.*t72295*t76098);
  p_output1[9]=(t76624 + t76629 + t76634 + t37651*t76638 + t38387*t76644 + t52703*t76649 - 0.3*(t59761*t76638 + t69865*t76644 + t69971*t76649) + 0.100001*(t70585*t76638 + t59761*t76644 + t70568*t76649) + 0.2*(-1.*t70568*t76638 - 1.*t69971*t76644 - 1.*t70577*t76649))*var2[3] + t76392*var2[4] + t76475*var2[5] + t76621*var2[10] + t76535*var2[12];
  p_output1[10]=t76392*var2[3] + (-1.*t31263*t31902*t33121*t76395 + 6.000000000054e-7*t29092*t33121*t33292*t76395 + t76624 + t37651*t77025 + t38387*t77037 + t52703*t77046 - 0.3*(t59761*t77025 + t69865*t77037 + t69971*t77046) + 0.100001*(t70585*t77025 + t59761*t77037 + t70568*t77046) + 0.2*(-1.*t70568*t77025 - 1.*t69971*t77037 - 1.*t70577*t77046))*var2[4] + t76952*var2[5] + t76820*var2[10] + t76754*var2[12];
  p_output1[11]=t76475*var2[3] + t76952*var2[4] + (t76629 + t76634 + t37651*t77242 + t38387*t77246 + t52703*t77300 - 0.3*(t59761*t77242 + t69865*t77246 + t69971*t77300) + 0.100001*(t70585*t77242 + t59761*t77246 + t70568*t77300) + 0.2*(-1.*t70568*t77242 - 1.*t69971*t77246 - 1.*t70577*t77300))*var2[5] + t77239*var2[10] + t77178*var2[12];
  p_output1[12]=t76621*var2[3] + t76820*var2[4] + t77239*var2[5] + (t76624 + 6.000000000054e-7*t28995*t77116 - 0.2000000000018*t28995*t77451 + t37651*t77457 + t38387*t77468 + t52703*t77485 - 0.3*(t59761*t77457 + t69865*t77468 + t69971*t77485) + 0.100001*(t70585*t77457 + t59761*t77468 + t70568*t77485) + 0.2*(-1.*t70568*t77457 - 1.*t69971*t77468 - 1.*t70577*t77485))*var2[10] + t77614*var2[12];
  p_output1[13]=t76535*var2[3] + t76754*var2[4] + t77178*var2[5] + t77614*var2[10] + (t76068*t77642 + t76084*t77666 + t76096*t77669 - 0.3*(t72274*t77642 + t76103*t77666 - 1.000000000009*t34565*t77669) + 0.100001*(-1.8e-11*t34565*t77642 + t72274*t77666 + t72161*t77669) + 0.2*(-1.*t72161*t77642 + 1.000000000009*t34565*t77666 - 1.*t76117*t77669))*var2[12];
  p_output1[14]=1.;
  p_output1[15]=t77894;
  p_output1[16]=t77949;
  p_output1[17]=t78007;
  p_output1[18]=t78045;
  p_output1[19]=t78084;
  p_output1[20]=t77894*var2[3] + t77949*var2[4] + t78007*var2[5] + t78045*var2[10] + t78084*var2[12];
  p_output1[21]=t77949*var2[3] + (t31263*t31902*t33121*t76350 - 6.000000000054e-7*t29092*t33121*t33292*t76350 + t77835 + t37651*t78484 + t38387*t78489 + t52703*t78493 - 0.3*(t59761*t78484 + t69865*t78489 + t69971*t78493) + 0.100001*(t70585*t78484 + t59761*t78489 + t70568*t78493) + 0.2*(-1.*t70568*t78484 - 1.*t69971*t78489 - 1.*t70577*t78493))*var2[4] + t78329*var2[5] + t78472*var2[10] + t78365*var2[12];
  p_output1[22]=t78007*var2[3] + t78329*var2[4] + (t77836 + t77837 + t37651*t78522 + t38387*t78524 + t52703*t78526 - 0.3*(t59761*t78522 + t69865*t78524 + t69971*t78526) + 0.100001*(t70585*t78522 + t59761*t78524 + t70568*t78526) + 0.2*(-1.*t70568*t78522 - 1.*t69971*t78524 - 1.*t70577*t78526))*var2[5] + t78726*var2[10] + t78587*var2[12];
  p_output1[23]=t78045*var2[3] + t78472*var2[4] + t78726*var2[5] + (-0.2000000000018*t28995*t76397 + t77835 + 6.000000000054e-7*t28995*t78550 + t37651*t78862 + t38387*t78866 + t52703*t78872 - 0.3*(t59761*t78862 + t69865*t78866 + t69971*t78872) + 0.100001*(t70585*t78862 + t59761*t78866 + t70568*t78872) + 0.2*(-1.*t70568*t78862 - 1.*t69971*t78866 - 1.*t70577*t78872))*var2[10] + t78945*var2[12];
  p_output1[24]=t78084*var2[3] + t78365*var2[4] + t78587*var2[5] + t78945*var2[10] + (t76068*t78961 + t76084*t78982 + t76096*t78987 - 0.3*(t72274*t78961 + t76103*t78982 - 1.000000000009*t34565*t78987) + 0.100001*(-1.8e-11*t34565*t78961 + t72274*t78982 + t72161*t78987) + 0.2*(-1.*t72161*t78961 + 1.000000000009*t34565*t78982 - 1.*t76117*t78987))*var2[12];
  p_output1[25]=1.;
  p_output1[26]=-0.2000000000018*t31273*t32330*t76395 + 6.000000000054e-7*t29092*t77116 + t31263*t77451 + t37651*t77642 + t38387*t77666 + t52703*t77669 - 0.3*(t59761*t77642 + t69865*t77666 + t69971*t77669) + 0.100001*(t70585*t77642 + t59761*t77666 + t70568*t77669) + 0.2*(-1.*t70568*t77642 - 1.*t69971*t77666 - 1.*t70577*t77669);
  p_output1[27]=-1.*t31263*t31273*t31902*t76350 - 0.2000000000018*t32330*t33121*t76350 + 6.000000000054e-7*t29092*t31273*t33292*t76350 + t37651*t78334 + t38387*t78339 + t52703*t78344 - 0.3*(t59761*t78334 + t69865*t78339 + t69971*t78344) + 0.100001*(t70585*t78334 + t59761*t78339 + t70568*t78344) + 0.2*(-1.*t70568*t78334 - 1.*t69971*t78339 - 1.*t70577*t78344);
  p_output1[28]=6.000000000054e-7*t29092*t76482 + t31263*t78550 + t37651*t78554 + t38387*t78557 + t52703*t78561 - 0.3*(t59761*t78554 + t69865*t78557 + t69971*t78561) + 0.100001*(t70585*t78554 + t59761*t78557 + t70568*t78561) + 0.2*(-1.*t70568*t78554 - 1.*t69971*t78557 - 1.*t70577*t78561);
  p_output1[29]=0.2000000000018*t28995*t31273*t76350 - 0.2000000000018*t32330*t76397 + 6.000000000054e-7*t32330*t78550 + t52703*t78905 + t37651*t78914 + t38387*t78918 + 0.100001*(t70568*t78905 + t70585*t78914 + t59761*t78918) - 0.3*(t69971*t78905 + t59761*t78914 + t69865*t78918) + 0.2*(-1.*t70577*t78905 - 1.*t70568*t78914 - 1.*t69971*t78918);
  p_output1[30]=t72164*t78961 + t72224*t78982 + t72239*t78987 - 0.3*(t72304*t78961 + t73049*t78982 - 1.000000000009*t36929*t78987) + 0.100001*(-1.8e-11*t36929*t78961 + t72304*t78982 + t72274*t78987) + 0.2*(-1.*t72274*t78961 + 1.000000000009*t36929*t78982 - 1.*t72295*t78987);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_LeftBackFoot.hh"

namespace Flight2
{

void J_impact_velocity_LeftBackFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
