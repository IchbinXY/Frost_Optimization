/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:02:46 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t243;
  double t703;
  double t727;
  double t3466;
  double t4449;
  double t4522;
  double t4677;
  double t4690;
  double t4691;
  double t3483;
  double t3521;
  double t4079;
  double t4262;
  double t4704;
  double t4705;
  double t5221;
  double t4695;
  double t4700;
  double t5234;
  double t4713;
  double t4715;
  double t4717;
  double t4878;
  double t4881;
  double t4960;
  double t5321;
  double t5322;
  double t5330;
  double t5338;
  double t5664;
  double t6345;
  double t6386;
  double t6666;
  double t6844;
  double t6849;
  double t6873;
  double t7067;
  double t7090;
  double t6891;
  double t5266;
  double t6881;
  double t7320;
  double t790;
  double t1256;
  double t1645;
  double t2169;
  double t4439;
  double t4685;
  double t4702;
  double t4706;
  double t4707;
  double t5226;
  double t5271;
  double t5282;
  double t5305;
  double t5317;
  double t5343;
  double t5346;
  double t5347;
  double t5379;
  double t5380;
  double t9652;
  double t9668;
  double t9672;
  double t7010;
  double t10776;
  double t12113;
  double t12155;
  double t12386;
  double t12398;
  double t12399;
  double t7385;
  double t7880;
  double t8369;
  double t14453;
  double t14494;
  double t14397;
  double t14398;
  double t14684;
  double t14522;
  double t14552;
  double t14553;
  double t14554;
  double t15442;
  double t15443;
  double t15447;
  double t15468;
  double t15469;
  double t15477;
  double t15478;
  double t15520;
  double t16996;
  double t15773;
  double t17644;
  double t17742;
  double t17770;
  double t17917;
  double t17932;
  double t17934;
  double t17945;
  double t17957;
  double t18142;
  double t18143;
  double t3519;
  double t4437;
  double t19123;
  double t19125;
  double t19155;
  double t14439;
  double t14496;
  double t14512;
  double t14513;
  double t14576;
  double t14740;
  double t15061;
  double t15415;
  double t15435;
  double t15453;
  double t15455;
  double t15457;
  double t15459;
  double t15465;
  double t19225;
  double t19227;
  double t19228;
  double t19230;
  double t19232;
  double t15787;
  double t19267;
  double t19269;
  double t19272;
  double t17069;
  double t19431;
  double t19443;
  double t19444;
  double t19447;
  double t19458;
  double t19462;
  double t9632;
  double t9639;
  double t10672;
  double t12379;
  double t12423;
  double t12514;
  double t12698;
  double t13923;
  double t13944;
  double t13968;
  double t13976;
  double t13981;
  double t13983;
  double t14001;
  double t14002;
  double t14153;
  double t14329;
  double t14330;
  double t14338;
  double t14339;
  double t14340;
  double t19506;
  double t19512;
  double t19539;
  double t19541;
  double t19668;
  double t19689;
  double t19694;
  double t19699;
  double t19701;
  double t19705;
  double t4249;
  double t19737;
  double t19761;
  double t19765;
  double t19766;
  double t19775;
  double t19776;
  double t19422;
  double t19427;
  double t19446;
  double t19467;
  double t19468;
  double t19469;
  double t19470;
  double t19471;
  double t19473;
  double t19474;
  double t19475;
  double t19476;
  double t19477;
  double t19479;
  double t19480;
  double t19484;
  double t19487;
  double t19488;
  double t19491;
  double t19492;
  double t19493;
  double t17194;
  double t17200;
  double t17605;
  double t17930;
  double t18141;
  double t18145;
  double t18147;
  double t18149;
  double t18150;
  double t18152;
  double t18153;
  double t18154;
  double t18155;
  double t18157;
  double t18159;
  double t18172;
  double t19077;
  double t19087;
  double t19088;
  double t19090;
  double t19091;
  double t19092;
  double t19869;
  double t19856;
  double t19857;
  double t19861;
  double t19865;
  double t19883;
  double t19884;
  double t19885;
  double t19893;
  double t19894;
  double t19897;
  double t19540;
  double t19690;
  double t19706;
  double t19707;
  double t19708;
  double t19709;
  double t19710;
  double t19712;
  double t19713;
  double t19715;
  double t19716;
  double t19717;
  double t19718;
  double t19720;
  double t19724;
  double t19725;
  double t19726;
  double t19727;
  double t19728;
  double t19229;
  double t19233;
  double t19283;
  double t19284;
  double t19286;
  double t19299;
  double t19314;
  double t19321;
  double t19327;
  double t19348;
  double t19376;
  double t19386;
  double t19387;
  double t19395;
  double t19408;
  double t19412;
  double t19415;
  double t19417;
  double t19418;
  double t14556;
  double t15450;
  double t15514;
  double t15559;
  double t15706;
  double t16220;
  double t16592;
  double t16685;
  double t16970;
  double t17008;
  double t17011;
  double t17060;
  double t17063;
  double t17066;
  double t17070;
  double t17071;
  double t17072;
  double t17073;
  double t17074;
  double t21454;
  double t21464;
  double t21465;
  double t21466;
  double t21467;
  double t21475;
  double t21478;
  double t21480;
  double t21482;
  double t21484;
  double t21488;
  double t21489;
  double t21490;
  double t21555;
  double t21554;
  double t21568;
  double t21571;
  double t21574;
  double t21578;
  double t21591;
  double t21597;
  double t21599;
  double t21600;
  double t21603;
  double t21604;
  double t21609;
  double t21611;
  double t21616;
  double t21617;
  double t21660;
  double t21661;
  double t21663;
  double t21659;
  double t21664;
  double t21666;
  double t21672;
  double t21676;
  double t21677;
  double t21678;
  double t21689;
  double t21690;
  double t21691;
  double t21692;
  double t21806;
  double t21809;
  double t21810;
  double t21813;
  double t21817;
  double t21819;
  double t21822;
  double t21824;
  double t21829;
  double t21833;
  double t21958;
  double t21965;
  double t21966;
  double t21970;
  double t21974;
  double t21976;
  double t21983;
  double t21986;
  double t21988;
  double t21991;
  double t21998;
  double t22003;
  double t22014;
  double t22016;
  double t22019;
  double t22020;
  double t22026;
  double t22028;
  double t21456;
  double t21460;
  double t21461;
  double t21471;
  double t21483;
  double t21491;
  double t21492;
  double t21494;
  double t21495;
  double t21498;
  double t21511;
  double t21512;
  double t21515;
  double t21519;
  double t21522;
  double t21525;
  double t21527;
  double t21535;
  double t21537;
  double t21540;
  double t21541;
  double t21545;
  double t22102;
  double t22103;
  double t22108;
  double t22109;
  double t22115;
  double t22116;
  double t22118;
  double t22165;
  double t22175;
  double t22250;
  double t22254;
  double t22257;
  double t22375;
  double t22378;
  double t22379;
  double t22381;
  double t22388;
  double t22389;
  double t22391;
  double t22393;
  double t22397;
  double t22398;
  double t22567;
  double t22569;
  double t22575;
  double t22582;
  double t22586;
  double t22590;
  double t22702;
  double t22703;
  double t21954;
  double t22749;
  double t22750;
  double t22751;
  double t22762;
  double t22770;
  double t22772;
  double t22914;
  double t30475;
  double t30973;
  double t22551;
  double t22566;
  double t22573;
  double t22587;
  double t22705;
  double t22709;
  double t22712;
  double t22716;
  double t22717;
  double t22718;
  double t22719;
  double t22720;
  double t22721;
  double t22723;
  double t22724;
  double t22725;
  double t22729;
  double t22732;
  double t22736;
  double t22737;
  double t22740;
  double t21572;
  double t21594;
  double t21601;
  double t21610;
  double t21619;
  double t21621;
  double t21623;
  double t21624;
  double t21627;
  double t21628;
  double t21630;
  double t21631;
  double t21635;
  double t21637;
  double t21638;
  double t21646;
  double t21649;
  double t21650;
  double t21655;
  double t21656;
  double t21657;
  double t37524;
  double t37766;
  double t38036;
  double t37395;
  double t39039;
  double t40229;
  double t40235;
  double t40251;
  double t40381;
  double t40425;
  double t40434;
  double t44698;
  double t44699;
  double t44700;
  double t44707;
  double t44709;
  double t44713;
  double t21969;
  double t21982;
  double t44908;
  double t44910;
  double t44913;
  double t22369;
  double t22373;
  double t22374;
  double t22385;
  double t22390;
  double t22399;
  double t22404;
  double t22408;
  double t22415;
  double t22417;
  double t22464;
  double t22466;
  double t22476;
  double t22486;
  double t22490;
  double t22493;
  double t22495;
  double t22499;
  double t22501;
  double t22503;
  double t22505;
  double t22507;
  double t21802;
  double t21803;
  double t21804;
  double t21815;
  double t21828;
  double t21835;
  double t21838;
  double t21839;
  double t21888;
  double t21891;
  double t21898;
  double t21900;
  double t21901;
  double t21918;
  double t21924;
  double t21926;
  double t21928;
  double t21930;
  double t21931;
  double t21937;
  double t21940;
  double t21951;
  double t45111;
  double t45112;
  double t45117;
  double t45130;
  double t45131;
  double t45140;
  double t45143;
  double t45144;
  double t45145;
  double t45177;
  double t45184;
  double t45185;
  double t45190;
  double t44684;
  double t44695;
  double t44701;
  double t44706;
  double t44719;
  double t44722;
  double t44725;
  double t44726;
  double t44727;
  double t44728;
  double t44729;
  double t44732;
  double t44734;
  double t44735;
  double t44744;
  double t44758;
  double t44823;
  double t44871;
  double t44877;
  double t44887;
  double t44889;
  double t45276;
  double t45277;
  double t45283;
  double t45284;
  double t45285;
  double t45286;
  double t45289;
  double t45290;
  double t45292;
  double t22111;
  double t22169;
  double t22282;
  double t22298;
  double t22312;
  double t22317;
  double t22319;
  double t22320;
  double t22327;
  double t22328;
  double t22330;
  double t22345;
  double t22349;
  double t22351;
  double t22354;
  double t22359;
  double t22364;
  double t22365;
  double t22366;
  double t21673;
  double t21681;
  double t21701;
  double t21703;
  double t21704;
  double t21706;
  double t21709;
  double t21725;
  double t21737;
  double t21738;
  double t21740;
  double t21741;
  double t21742;
  double t21770;
  double t21773;
  double t21774;
  double t21776;
  double t21777;
  double t21795;
  double t40230;
  double t40367;
  double t40439;
  double t40447;
  double t40448;
  double t40453;
  double t40454;
  double t40465;
  double t40483;
  double t40494;
  double t40513;
  double t43500;
  double t44513;
  double t44523;
  double t44525;
  double t44660;
  double t44663;
  double t44664;
  double t44669;
  double t19848;
  double t19852;
  double t19854;
  double t19855;
  double t19867;
  double t19878;
  double t19881;
  double t19882;
  double t19887;
  double t19888;
  double t19889;
  double t19890;
  double t19891;
  double t45323;
  double t45324;
  double t45326;
  double t45327;
  double t19899;
  double t45330;
  double t45386;
  double t45445;
  double t45575;
  double t45591;
  double t19967;
  double t45282;
  double t45287;
  double t45293;
  double t45294;
  double t45295;
  double t45296;
  double t45299;
  double t45301;
  double t45302;
  double t45303;
  double t45304;
  double t45306;
  double t45307;
  double t45309;
  double t45310;
  double t45311;
  double t45312;
  double t45313;
  double t45314;
  double t46134;
  double t46199;
  double t46201;
  double t46202;
  double t46203;
  double t46205;
  double t46229;
  double t46230;
  double t46484;
  double t46618;
  double t46635;
  double t46637;
  double t46670;
  double t46682;
  double t46691;
  double t46695;
  double t46696;
  double t46697;
  double t46699;
  double t46701;
  double t46705;
  double t46716;
  double t45635;
  double t45755;
  double t45870;
  double t45928;
  double t45938;
  double t45940;
  double t45942;
  double t45986;
  double t46029;
  double t46036;
  double t46041;
  double t46058;
  double t46071;
  double t46073;
  double t46075;
  double t46076;
  double t46105;
  double t46128;
  double t46129;
  double t46130;
  double t46131;
  double t46133;
  double t46739;
  double t46740;
  double t46741;
  double t46742;
  double t46744;
  double t46745;
  double t46747;
  double t46749;
  double t46750;
  double t46753;
  double t46754;
  double t46759;
  double t46760;
  double t46770;
  double t46782;
  double t46793;
  double t46796;
  double t46797;
  double t46801;
  double t46803;
  double t46806;
  double t47201;
  double t47207;
  double t47216;
  double t47223;
  double t47229;
  double t47231;
  double t47232;
  double t47235;
  double t47236;
  double t47240;
  double t47244;
  double t47246;
  double t47249;
  double t47250;
  double t47256;
  double t47265;
  double t47267;
  double t47276;
  double t47703;
  double t46810;
  double t46812;
  double t46813;
  double t46814;
  double t46816;
  double t46818;
  double t46819;
  double t46821;
  double t46823;
  double t46824;
  double t46826;
  double t46828;
  double t46829;
  double t47071;
  double t47072;
  double t47073;
  double t47074;
  double t47075;
  double t47107;
  double t47146;
  double t47174;
  double t47200;
  double t48134;
  double t48140;
  double t48142;
  double t48146;
  double t48148;
  double t48159;
  double t48163;
  double t48168;
  double t48213;
  double t48217;
  double t48221;
  double t48222;
  double t48224;
  double t48225;
  double t48226;
  double t48229;
  double t48230;
  double t48235;
  double t48237;
  double t48428;
  double t48429;
  double t48430;
  double t48432;
  double t48433;
  double t48435;
  double t48436;
  double t48439;
  double t48440;
  double t48541;
  double t48542;
  double t48545;
  double t48549;
  double t48551;
  double t48553;
  double t48555;
  double t48558;
  double t48559;
  double t47981;
  double t48063;
  double t48145;
  double t48154;
  double t48169;
  double t48171;
  double t48172;
  double t48177;
  double t48181;
  double t48182;
  double t48183;
  double t48186;
  double t48187;
  double t48192;
  double t48194;
  double t48195;
  double t48197;
  double t48198;
  double t48200;
  double t48207;
  double t48208;
  double t48606;
  double t48612;
  double t48618;
  double t48672;
  double t48673;
  double t48674;
  double t48671;
  double t48675;
  double t48676;
  double t48679;
  double t48681;
  double t48685;
  double t48686;
  double t48734;
  double t48735;
  double t48736;
  double t48745;
  double t48746;
  double t48747;
  double t48413;
  double t48414;
  double t48418;
  double t48431;
  double t48438;
  double t48442;
  double t48443;
  double t48444;
  double t48445;
  double t48447;
  double t48449;
  double t48450;
  double t48451;
  double t48453;
  double t48489;
  double t48491;
  double t48493;
  double t48494;
  double t48495;
  double t48497;
  double t48504;
  double t48510;
  double t48815;
  double t48816;
  double t48817;
  double t48820;
  double t48821;
  double t48822;
  double t48824;
  double t48826;
  double t48828;
  double t48829;
  double t48732;
  double t48733;
  double t48737;
  double t48742;
  double t48748;
  double t48751;
  double t48755;
  double t48756;
  double t48757;
  double t48759;
  double t48760;
  double t48761;
  double t48762;
  double t48768;
  double t48769;
  double t48776;
  double t48780;
  double t48783;
  double t48785;
  double t48793;
  double t48794;
  double t48859;
  double t48861;
  double t48865;
  double t48868;
  double t48869;
  double t48873;
  double t48876;
  double t48886;
  double t48223;
  double t48227;
  double t48239;
  double t48240;
  double t48241;
  double t48243;
  double t48245;
  double t48246;
  double t48248;
  double t48301;
  double t48366;
  double t48368;
  double t48370;
  double t48371;
  double t48372;
  double t48377;
  double t48404;
  double t48405;
  double t48411;
  double t48677;
  double t48682;
  double t48687;
  double t48688;
  double t48690;
  double t48692;
  double t48693;
  double t48694;
  double t48697;
  double t48700;
  double t48709;
  double t48711;
  double t48713;
  double t48717;
  double t48721;
  double t48724;
  double t48726;
  double t48728;
  double t48729;
  double t48919;
  double t48923;
  double t48924;
  double t48927;
  double t48928;
  double t48929;
  double t48936;
  double t48939;
  double t48864;
  double t48871;
  double t48887;
  double t48888;
  double t48889;
  double t48890;
  double t48891;
  double t48892;
  double t48896;
  double t48897;
  double t48899;
  double t48901;
  double t48903;
  double t48904;
  double t48905;
  double t48906;
  double t48908;
  double t48909;
  double t48911;
  t243 = Cos(var1[10]);
  t703 = -1.*t243;
  t727 = 1. + t703;
  t3466 = Cos(var1[4]);
  t4449 = Cos(var1[12]);
  t4522 = -1.*t4449;
  t4677 = 1. + t4522;
  t4690 = -3.e-6*t4677;
  t4691 = Sin(var1[12]);
  t3483 = Cos(var1[5]);
  t3521 = Sin(var1[10]);
  t4079 = Sin(var1[4]);
  t4262 = Sin(var1[5]);
  t4704 = 3.e-6*t4691;
  t4705 = t4690 + t4704;
  t5221 = 3.e-13*var1[12];
  t4695 = -3.e-6*t4691;
  t4700 = t4690 + t4695;
  t5234 = -9.e-12*t4677;
  t4713 = -3.e-6*t727*t3466*t3483;
  t4715 = 3.e-6*t3521*t4079;
  t4717 = -9.e-12*t727;
  t4878 = 1. + t4717;
  t4881 = t4878*t3466*t4262;
  t4960 = t4713 + t4715 + t4881;
  t5321 = -1.*t243*t3466*t3483;
  t5322 = -1.*t3521*t4079;
  t5330 = 3.e-6*t727*t3466*t4262;
  t5338 = t5321 + t5322 + t5330;
  t5664 = t3466*t3483*t3521;
  t6345 = -1.000000000009*t727;
  t6386 = 1. + t6345;
  t6666 = -1.*t6386*t4079;
  t6844 = 3.e-6*t3466*t3521*t4262;
  t6849 = t5664 + t6666 + t6844;
  t6873 = 3.e-6*t4677;
  t7067 = -1.000000000009*t4677;
  t7090 = 1. + t7067;
  t6891 = 9.e-12*t4677;
  t5266 = -1.*t4691;
  t6881 = t6873 + t4695;
  t7320 = t6873 + t4704;
  t790 = -1.8e-12*t727;
  t1256 = -1. + t243;
  t1645 = 0.2*t1256;
  t2169 = t790 + t1645;
  t4439 = 1.e-7*var1[12];
  t4685 = 5.4e-18*t4677;
  t4702 = -0.200000000003*t4700;
  t4706 = 0.100000000003*t4705;
  t4707 = t4439 + t4685 + t4702 + t4706;
  t5226 = -0.2000000000048*t4677;
  t5271 = t5234 + t5266;
  t5282 = 0.100000000003*t5271;
  t5305 = 3.e-7*t4705;
  t5317 = t5221 + t5226 + t5282 + t5305;
  t5343 = 0.1000000000039*t4677;
  t5346 = 3.e-7*t4700;
  t5347 = t5234 + t4691;
  t5379 = -0.200000000003*t5347;
  t5380 = t5221 + t5343 + t5346 + t5379;
  t9652 = t4878*t3483*t4079;
  t9668 = 3.e-6*t727*t4079*t4262;
  t9672 = t9652 + t9668;
  t7010 = t6891 + t4691;
  t10776 = 3.e-6*t727*t3483*t4079;
  t12113 = t243*t4079*t4262;
  t12155 = t10776 + t12113;
  t12386 = 3.e-6*t3483*t3521*t4079;
  t12398 = -1.*t3521*t4079*t4262;
  t12399 = t12386 + t12398;
  t7385 = t6891 + t5266;
  t7880 = -1.8e-11*t4677;
  t8369 = 1. + t7880;
  t14453 = 3.e-6*t4449;
  t14494 = t14453 + t4695;
  t14397 = -3.e-6*t4449;
  t14398 = t14397 + t4695;
  t14684 = -9.e-12*t4691;
  t14522 = -3.e-6*t3466*t3521;
  t14552 = -3.e-6*t727*t3483*t4079;
  t14553 = t4878*t4079*t4262;
  t14554 = t14522 + t14552 + t14553;
  t15442 = t3466*t3521;
  t15443 = -1.*t243*t3483*t4079;
  t15447 = t15442 + t15443 + t9668;
  t15468 = t6386*t3466;
  t15469 = t3483*t3521*t4079;
  t15477 = 3.e-6*t3521*t4079*t4262;
  t15478 = t15468 + t15469 + t15477;
  t15520 = t14453 + t4704;
  t16996 = t14397 + t4704;
  t15773 = 9.e-12*t4691;
  t17644 = -1.000000000009*t3466*t3521;
  t17742 = t243*t3483*t4079;
  t17770 = 3.e-6*t243*t4079*t4262;
  t17917 = t17644 + t17742 + t17770;
  t17932 = -3.e-6*t243*t3466;
  t17934 = -3.e-6*t3483*t3521*t4079;
  t17945 = -9.e-12*t3521*t4079*t4262;
  t17957 = t17932 + t17934 + t17945;
  t18142 = t243*t3466;
  t18143 = t18142 + t15469 + t15477;
  t3519 = -1.*t2169*t3466*t3483;
  t4437 = 6.000000000054e-7*t727*t3466*t4262;
  t19123 = t4713 + t4881;
  t19125 = t5321 + t5330;
  t19155 = t5664 + t6844;
  t14439 = -0.200000000003*t14398;
  t14496 = 0.100000000003*t14494;
  t14512 = 5.4e-18*t4691;
  t14513 = 1.e-7 + t14439 + t14496 + t14512;
  t14576 = 3.e-7*t14494;
  t14740 = t4522 + t14684;
  t15061 = 0.100000000003*t14740;
  t15415 = -0.2000000000048*t4691;
  t15435 = 3.e-13 + t14576 + t15061 + t15415;
  t15453 = 3.e-7*t14398;
  t15455 = t4449 + t14684;
  t15457 = -0.200000000003*t15455;
  t15459 = 0.1000000000039*t4691;
  t15465 = 3.e-13 + t15453 + t15457 + t15459;
  t19225 = -1.*t4878*t3466*t3483;
  t19227 = -3.e-6*t727*t3466*t4262;
  t19228 = t19225 + t19227;
  t19230 = -1.*t243*t3466*t4262;
  t19232 = t4713 + t19230;
  t15787 = t4522 + t15773;
  t19267 = -3.e-6*t3466*t3483*t3521;
  t19269 = t3466*t3521*t4262;
  t19272 = t19267 + t19269;
  t17069 = t4449 + t15773;
  t19431 = -3.e-6*t243*t3466*t3483;
  t19443 = t243*t3466*t4262;
  t19444 = t19431 + t19443;
  t19447 = 9.e-12*t3466*t3483*t3521;
  t19458 = -3.e-6*t3466*t3521*t4262;
  t19462 = t19447 + t19458;
  t9632 = 6.000000000054e-7*t727*t3483*t4079;
  t9639 = t2169*t4079*t4262;
  t10672 = t4707*t9672;
  t12379 = t5317*t12155;
  t12423 = t5380*t12399;
  t12514 = t6881*t9672;
  t12698 = t7010*t12155;
  t13923 = t7090*t12399;
  t13944 = t12514 + t12698 + t13923;
  t13968 = -0.3*t13944;
  t13976 = -1.*t7320*t9672;
  t13981 = -1.*t7090*t12155;
  t13983 = -1.*t7385*t12399;
  t14001 = t13976 + t13981 + t13983;
  t14002 = 0.2*t14001;
  t14153 = t8369*t9672;
  t14329 = t6881*t12155;
  t14330 = t7320*t12399;
  t14338 = t14153 + t14329 + t14330;
  t14339 = 0.100001*t14338;
  t14340 = t9632 + t9639 + t10672 + t12379 + t12423 + t13968 + t14002 + t14339;
  t19506 = -1.000000000009*t3521*t4079;
  t19512 = -3.e-6*t243*t3466*t4262;
  t19539 = t5321 + t19506 + t19512;
  t19541 = -1.*t3466*t3483*t3521;
  t19668 = t243*t4079;
  t19689 = t19541 + t19668 + t19458;
  t19694 = 3.e-6*t3466*t3483*t3521;
  t19699 = -3.e-6*t243*t4079;
  t19701 = 9.e-12*t3466*t3521*t4262;
  t19705 = t19694 + t19699 + t19701;
  t4249 = -0.2000000000018*t3521*t4079;
  t19737 = t5321 + t5322 + t19512;
  t19761 = 3.e-6*t243*t3466*t3483;
  t19765 = 9.e-12*t243*t3466*t4262;
  t19766 = t19761 + t4715 + t19765;
  t19775 = -1.000000000009*t243*t4079;
  t19776 = t5664 + t19775 + t6844;
  t19422 = -6.000000000054e-7*t3466*t3483*t3521;
  t19427 = 0.2000000000018*t3466*t3521*t4262;
  t19446 = t5380*t19444;
  t19467 = t4707*t19462;
  t19468 = t5317*t19272;
  t19469 = -1.*t7385*t19444;
  t19470 = -1.*t7320*t19462;
  t19471 = -1.*t7090*t19272;
  t19473 = t19469 + t19470 + t19471;
  t19474 = 0.2*t19473;
  t19475 = t7320*t19444;
  t19476 = t8369*t19462;
  t19477 = t6881*t19272;
  t19479 = t19475 + t19476 + t19477;
  t19480 = 0.100001*t19479;
  t19484 = t7090*t19444;
  t19487 = t6881*t19462;
  t19488 = t7010*t19272;
  t19491 = t19484 + t19487 + t19488;
  t19492 = -0.3*t19491;
  t19493 = t19422 + t19427 + t19446 + t19467 + t19468 + t19474 + t19480 + t19492;
  t17194 = 0.2000000000018*t243*t3466;
  t17200 = 0.2000000000018*t3483*t3521*t4079;
  t17605 = 6.000000000054e-7*t3521*t4079*t4262;
  t17930 = t5380*t17917;
  t18141 = t4707*t17957;
  t18145 = t5317*t18143;
  t18147 = -1.*t7385*t17917;
  t18149 = -1.*t7320*t17957;
  t18150 = -1.*t7090*t18143;
  t18152 = t18147 + t18149 + t18150;
  t18153 = 0.2*t18152;
  t18154 = t7320*t17917;
  t18155 = t8369*t17957;
  t18157 = t6881*t18143;
  t18159 = t18154 + t18155 + t18157;
  t18172 = 0.100001*t18159;
  t19077 = t7090*t17917;
  t19087 = t6881*t17957;
  t19088 = t7010*t18143;
  t19090 = t19077 + t19087 + t19088;
  t19091 = -0.3*t19090;
  t19092 = t17194 + t17200 + t17605 + t17930 + t18141 + t18145 + t18153 + t18172 + t19091;
  t19869 = -9.e-12*t4449;
  t19856 = 3.e-6*t727*t3466*t3483;
  t19857 = -3.e-6*t3521*t4079;
  t19861 = -1.*t4878*t3466*t4262;
  t19865 = t19856 + t19857 + t19861;
  t19883 = t243*t3466*t3483;
  t19884 = t3521*t4079;
  t19885 = t19883 + t19884 + t19227;
  t19893 = t6386*t4079;
  t19894 = t19541 + t19893 + t19458;
  t19897 = 9.e-12*t4449;
  t19540 = t15465*t19539;
  t19690 = t15435*t19689;
  t19706 = t14513*t19705;
  t19707 = -1.000000000009*t4691*t19539;
  t19708 = t17069*t19689;
  t19709 = t16996*t19705;
  t19710 = t19707 + t19708 + t19709;
  t19712 = -0.3*t19710;
  t19713 = -1.*t15787*t19539;
  t19715 = 1.000000000009*t4691*t19689;
  t19716 = -1.*t15520*t19705;
  t19717 = t19713 + t19715 + t19716;
  t19718 = 0.2*t19717;
  t19720 = t15520*t19539;
  t19724 = t16996*t19689;
  t19725 = -1.8e-11*t4691*t19705;
  t19726 = t19720 + t19724 + t19725;
  t19727 = 0.100001*t19726;
  t19728 = t19540 + t19690 + t19706 + t19712 + t19718 + t19727;
  t19229 = t14513*t19228;
  t19233 = t15435*t19232;
  t19283 = t15465*t19272;
  t19284 = -1.*t15520*t19228;
  t19286 = 1.000000000009*t4691*t19232;
  t19299 = -1.*t15787*t19272;
  t19314 = t19284 + t19286 + t19299;
  t19321 = 0.2*t19314;
  t19327 = -1.8e-11*t4691*t19228;
  t19348 = t16996*t19232;
  t19376 = t15520*t19272;
  t19386 = t19327 + t19348 + t19376;
  t19387 = 0.100001*t19386;
  t19395 = t16996*t19228;
  t19408 = t17069*t19232;
  t19412 = -1.000000000009*t4691*t19272;
  t19415 = t19395 + t19408 + t19412;
  t19417 = -0.3*t19415;
  t19418 = t19229 + t19233 + t19283 + t19321 + t19387 + t19417;
  t14556 = t14513*t14554;
  t15450 = t15435*t15447;
  t15514 = t15465*t15478;
  t15559 = -1.*t15520*t14554;
  t15706 = 1.000000000009*t4691*t15447;
  t16220 = -1.*t15787*t15478;
  t16592 = t15559 + t15706 + t16220;
  t16685 = 0.2*t16592;
  t16970 = -1.8e-11*t4691*t14554;
  t17008 = t16996*t15447;
  t17011 = t15520*t15478;
  t17060 = t16970 + t17008 + t17011;
  t17063 = 0.100001*t17060;
  t17066 = t16996*t14554;
  t17070 = t17069*t15447;
  t17071 = -1.000000000009*t4691*t15478;
  t17072 = t17066 + t17070 + t17071;
  t17073 = -0.3*t17072;
  t17074 = t14556 + t15450 + t15514 + t16685 + t17063 + t17073;
  t21454 = Cos(var1[3]);
  t21464 = 3.e-6*t727*t21454*t3466*t3483;
  t21465 = -3.e-6*t21454*t3521*t4079;
  t21466 = -1.*t4878*t21454*t3466*t4262;
  t21467 = t21464 + t21465 + t21466;
  t21475 = t243*t21454*t3466*t3483;
  t21478 = t21454*t3521*t4079;
  t21480 = -3.e-6*t727*t21454*t3466*t4262;
  t21482 = t21475 + t21478 + t21480;
  t21484 = -1.*t21454*t3466*t3483*t3521;
  t21488 = t6386*t21454*t4079;
  t21489 = -3.e-6*t21454*t3466*t3521*t4262;
  t21490 = t21484 + t21488 + t21489;
  t21555 = Sin(var1[3]);
  t21554 = -1.*t21454*t3483*t4079;
  t21568 = t21555*t4262;
  t21571 = t21554 + t21568;
  t21574 = -1.*t3483*t21555;
  t21578 = -1.*t21454*t4079*t4262;
  t21591 = t21574 + t21578;
  t21597 = t4878*t21571;
  t21599 = 3.e-6*t727*t21591;
  t21600 = t21597 + t21599;
  t21603 = 3.e-6*t727*t21571;
  t21604 = t243*t21591;
  t21609 = t21603 + t21604;
  t21611 = 3.e-6*t3521*t21571;
  t21616 = -1.*t3521*t21591;
  t21617 = t21611 + t21616;
  t21660 = t21454*t3483*t4079;
  t21661 = -1.*t21555*t4262;
  t21663 = t21660 + t21661;
  t21659 = 3.e-6*t21454*t3466*t3521;
  t21664 = 3.e-6*t727*t21663;
  t21666 = t4878*t21591;
  t21672 = t21659 + t21664 + t21666;
  t21676 = -1.*t21454*t3466*t3521;
  t21677 = t243*t21663;
  t21678 = t21676 + t21677 + t21599;
  t21689 = -1.*t6386*t21454*t3466;
  t21690 = -1.*t3521*t21663;
  t21691 = 3.e-6*t3521*t21591;
  t21692 = t21689 + t21690 + t21691;
  t21806 = 1.000000000009*t21454*t3466*t3521;
  t21809 = -1.*t243*t21663;
  t21810 = 3.e-6*t243*t21591;
  t21813 = t21806 + t21809 + t21810;
  t21817 = 3.e-6*t243*t21454*t3466;
  t21819 = 3.e-6*t3521*t21663;
  t21822 = -9.e-12*t3521*t21591;
  t21824 = t21817 + t21819 + t21822;
  t21829 = -1.*t243*t21454*t3466;
  t21833 = t21829 + t21690 + t21691;
  t21958 = -1.*t3483*t21555*t4079;
  t21965 = -1.*t21454*t4262;
  t21966 = t21958 + t21965;
  t21970 = -1.*t21454*t3483;
  t21974 = t21555*t4079*t4262;
  t21976 = t21970 + t21974;
  t21983 = -3.e-6*t3466*t3521*t21555;
  t21986 = 3.e-6*t727*t21966;
  t21988 = t4878*t21976;
  t21991 = t21983 + t21986 + t21988;
  t21998 = t3466*t3521*t21555;
  t22003 = t243*t21966;
  t22014 = 3.e-6*t727*t21976;
  t22016 = t21998 + t22003 + t22014;
  t22019 = t6386*t3466*t21555;
  t22020 = -1.*t3521*t21966;
  t22026 = 3.e-6*t3521*t21976;
  t22028 = t22019 + t22020 + t22026;
  t21456 = t2169*t21454*t3466*t3483;
  t21460 = 0.2000000000018*t21454*t3521*t4079;
  t21461 = -6.000000000054e-7*t727*t21454*t3466*t4262;
  t21471 = t4707*t21467;
  t21483 = t5317*t21482;
  t21491 = t5380*t21490;
  t21492 = t6881*t21467;
  t21494 = t7010*t21482;
  t21495 = t7090*t21490;
  t21498 = t21492 + t21494 + t21495;
  t21511 = -0.3*t21498;
  t21512 = -1.*t7320*t21467;
  t21515 = -1.*t7090*t21482;
  t21519 = -1.*t7385*t21490;
  t21522 = t21512 + t21515 + t21519;
  t21525 = 0.2*t21522;
  t21527 = t8369*t21467;
  t21535 = t6881*t21482;
  t21537 = t7320*t21490;
  t21540 = t21527 + t21535 + t21537;
  t21541 = 0.100001*t21540;
  t21545 = t21456 + t21460 + t21461 + t21471 + t21483 + t21491 + t21511 + t21525 + t21541;
  t22102 = 3.e-6*t727*t3466*t3483*t21555;
  t22103 = -3.e-6*t3521*t21555*t4079;
  t22108 = -1.*t4878*t3466*t21555*t4262;
  t22109 = t22102 + t22103 + t22108;
  t22115 = t243*t3466*t3483*t21555;
  t22116 = t3521*t21555*t4079;
  t22118 = -3.e-6*t727*t3466*t21555*t4262;
  t22165 = t22115 + t22116 + t22118;
  t22175 = -1.*t3466*t3483*t3521*t21555;
  t22250 = t6386*t21555*t4079;
  t22254 = -3.e-6*t3466*t3521*t21555*t4262;
  t22257 = t22175 + t22250 + t22254;
  t22375 = -1.*t243*t3466*t3483*t21555;
  t22378 = -1.000000000009*t3521*t21555*t4079;
  t22379 = -3.e-6*t243*t3466*t21555*t4262;
  t22381 = t22375 + t22378 + t22379;
  t22388 = t243*t21555*t4079;
  t22389 = t22175 + t22388 + t22254;
  t22391 = 3.e-6*t3466*t3483*t3521*t21555;
  t22393 = -3.e-6*t243*t21555*t4079;
  t22397 = 9.e-12*t3466*t3521*t21555*t4262;
  t22398 = t22391 + t22393 + t22397;
  t22567 = -1.*t4878*t3466*t3483*t21555;
  t22569 = t22567 + t22118;
  t22575 = -3.e-6*t727*t3466*t3483*t21555;
  t22582 = -1.*t243*t3466*t21555*t4262;
  t22586 = t22575 + t22582;
  t22590 = -3.e-6*t3466*t3483*t3521*t21555;
  t22702 = t3466*t3521*t21555*t4262;
  t22703 = t22590 + t22702;
  t21954 = 0.2000000000018*t3466*t3521*t21555;
  t22749 = -3.e-6*t727*t3483*t21555*t4079;
  t22750 = t4878*t21555*t4079*t4262;
  t22751 = t21983 + t22749 + t22750;
  t22762 = -1.*t243*t3483*t21555*t4079;
  t22770 = 3.e-6*t727*t21555*t4079*t4262;
  t22772 = t21998 + t22762 + t22770;
  t22914 = t3483*t3521*t21555*t4079;
  t30475 = 3.e-6*t3521*t21555*t4079*t4262;
  t30973 = t22019 + t22914 + t30475;
  t22551 = -6.000000000054e-7*t727*t3466*t3483*t21555;
  t22566 = -1.*t2169*t3466*t21555*t4262;
  t22573 = t4707*t22569;
  t22587 = t5317*t22586;
  t22705 = t5380*t22703;
  t22709 = t6881*t22569;
  t22712 = t7010*t22586;
  t22716 = t7090*t22703;
  t22717 = t22709 + t22712 + t22716;
  t22718 = -0.3*t22717;
  t22719 = -1.*t7320*t22569;
  t22720 = -1.*t7090*t22586;
  t22721 = -1.*t7385*t22703;
  t22723 = t22719 + t22720 + t22721;
  t22724 = 0.2*t22723;
  t22725 = t8369*t22569;
  t22729 = t6881*t22586;
  t22732 = t7320*t22703;
  t22736 = t22725 + t22729 + t22732;
  t22737 = 0.100001*t22736;
  t22740 = t22551 + t22566 + t22573 + t22587 + t22705 + t22718 + t22724 + t22737;
  t21572 = 6.000000000054e-7*t727*t21571;
  t21594 = t2169*t21591;
  t21601 = t4707*t21600;
  t21610 = t5317*t21609;
  t21619 = t5380*t21617;
  t21621 = t6881*t21600;
  t21623 = t7010*t21609;
  t21624 = t7090*t21617;
  t21627 = t21621 + t21623 + t21624;
  t21628 = -0.3*t21627;
  t21630 = -1.*t7320*t21600;
  t21631 = -1.*t7090*t21609;
  t21635 = -1.*t7385*t21617;
  t21637 = t21630 + t21631 + t21635;
  t21638 = 0.2*t21637;
  t21646 = t8369*t21600;
  t21649 = t6881*t21609;
  t21650 = t7320*t21617;
  t21655 = t21646 + t21649 + t21650;
  t21656 = 0.100001*t21655;
  t21657 = t21572 + t21594 + t21601 + t21610 + t21619 + t21628 + t21638 + t21656;
  t37524 = t21454*t3483;
  t37766 = -1.*t21555*t4079*t4262;
  t38036 = t37524 + t37766;
  t37395 = t4878*t21966;
  t39039 = 3.e-6*t727*t38036;
  t40229 = t37395 + t39039;
  t40235 = t243*t38036;
  t40251 = t21986 + t40235;
  t40381 = 3.e-6*t3521*t21966;
  t40425 = -1.*t3521*t38036;
  t40434 = t40381 + t40425;
  t44698 = 3.e-6*t243*t21966;
  t44699 = -1.*t243*t38036;
  t44700 = t44698 + t44699;
  t44707 = -9.e-12*t3521*t21966;
  t44709 = 3.e-6*t3521*t38036;
  t44713 = t44707 + t44709;
  t21969 = t2169*t21966;
  t21982 = 6.000000000054e-7*t727*t21976;
  t44908 = t21986 + t21988;
  t44910 = t22003 + t22014;
  t44913 = t22020 + t22026;
  t22369 = -0.2000000000018*t3466*t3483*t3521*t21555;
  t22373 = 0.2000000000018*t243*t21555*t4079;
  t22374 = -6.000000000054e-7*t3466*t3521*t21555*t4262;
  t22385 = t5380*t22381;
  t22390 = t5317*t22389;
  t22399 = t4707*t22398;
  t22404 = t7320*t22381;
  t22408 = t6881*t22389;
  t22415 = t8369*t22398;
  t22417 = t22404 + t22408 + t22415;
  t22464 = 0.100001*t22417;
  t22466 = t7090*t22381;
  t22476 = t7010*t22389;
  t22486 = t6881*t22398;
  t22490 = t22466 + t22476 + t22486;
  t22493 = -0.3*t22490;
  t22495 = -1.*t7385*t22381;
  t22499 = -1.*t7090*t22389;
  t22501 = -1.*t7320*t22398;
  t22503 = t22495 + t22499 + t22501;
  t22505 = 0.2*t22503;
  t22507 = t22369 + t22373 + t22374 + t22385 + t22390 + t22399 + t22464 + t22493 + t22505;
  t21802 = -0.2000000000018*t243*t21454*t3466;
  t21803 = -0.2000000000018*t3521*t21663;
  t21804 = 6.000000000054e-7*t3521*t21591;
  t21815 = t5380*t21813;
  t21828 = t4707*t21824;
  t21835 = t5317*t21833;
  t21838 = -1.*t7385*t21813;
  t21839 = -1.*t7320*t21824;
  t21888 = -1.*t7090*t21833;
  t21891 = t21838 + t21839 + t21888;
  t21898 = 0.2*t21891;
  t21900 = t7320*t21813;
  t21901 = t8369*t21824;
  t21918 = t6881*t21833;
  t21924 = t21900 + t21901 + t21918;
  t21926 = 0.100001*t21924;
  t21928 = t7090*t21813;
  t21930 = t6881*t21824;
  t21931 = t7010*t21833;
  t21937 = t21928 + t21930 + t21931;
  t21940 = -0.3*t21937;
  t21951 = t21802 + t21803 + t21804 + t21815 + t21828 + t21835 + t21898 + t21926 + t21940;
  t45111 = t3483*t21555*t4079;
  t45112 = t21454*t4262;
  t45117 = t45111 + t45112;
  t45130 = 3.e-6*t243*t45117;
  t45131 = -9.e-12*t243*t38036;
  t45140 = t21983 + t45130 + t45131;
  t45143 = -1.*t243*t45117;
  t45144 = 3.e-6*t243*t38036;
  t45145 = t21998 + t45143 + t45144;
  t45177 = 1.000000000009*t243*t3466*t21555;
  t45184 = t3521*t45117;
  t45185 = -3.e-6*t3521*t38036;
  t45190 = t45177 + t45184 + t45185;
  t44684 = 6.000000000054e-7*t3521*t21966;
  t44695 = -0.2000000000018*t3521*t38036;
  t44701 = t5380*t44700;
  t44706 = t5317*t40434;
  t44719 = t4707*t44713;
  t44722 = t7320*t44700;
  t44725 = t6881*t40434;
  t44726 = t8369*t44713;
  t44727 = t44722 + t44725 + t44726;
  t44728 = 0.100001*t44727;
  t44729 = t7090*t44700;
  t44732 = t7010*t40434;
  t44734 = t6881*t44713;
  t44735 = t44729 + t44732 + t44734;
  t44744 = -0.3*t44735;
  t44758 = -1.*t7385*t44700;
  t44823 = -1.*t7090*t40434;
  t44871 = -1.*t7320*t44713;
  t44877 = t44758 + t44823 + t44871;
  t44887 = 0.2*t44877;
  t44889 = t44684 + t44695 + t44701 + t44706 + t44719 + t44728 + t44744 + t44887;
  t45276 = 1.000000000009*t3466*t3521*t21555;
  t45277 = t45276 + t45143 + t45144;
  t45283 = 3.e-6*t243*t3466*t21555;
  t45284 = 3.e-6*t3521*t45117;
  t45285 = -9.e-12*t3521*t38036;
  t45286 = t45283 + t45284 + t45285;
  t45289 = -1.*t243*t3466*t21555;
  t45290 = -1.*t3521*t45117;
  t45292 = t45289 + t45290 + t44709;
  t22111 = t14513*t22109;
  t22169 = t15435*t22165;
  t22282 = t15465*t22257;
  t22298 = -1.*t15520*t22109;
  t22312 = 1.000000000009*t4691*t22165;
  t22317 = -1.*t15787*t22257;
  t22319 = t22298 + t22312 + t22317;
  t22320 = 0.2*t22319;
  t22327 = -1.8e-11*t4691*t22109;
  t22328 = t16996*t22165;
  t22330 = t15520*t22257;
  t22345 = t22327 + t22328 + t22330;
  t22349 = 0.100001*t22345;
  t22351 = t16996*t22109;
  t22354 = t17069*t22165;
  t22359 = -1.000000000009*t4691*t22257;
  t22364 = t22351 + t22354 + t22359;
  t22365 = -0.3*t22364;
  t22366 = t22111 + t22169 + t22282 + t22320 + t22349 + t22365;
  t21673 = t14513*t21672;
  t21681 = t15435*t21678;
  t21701 = t15465*t21692;
  t21703 = -1.*t15520*t21672;
  t21704 = 1.000000000009*t4691*t21678;
  t21706 = -1.*t15787*t21692;
  t21709 = t21703 + t21704 + t21706;
  t21725 = 0.2*t21709;
  t21737 = -1.8e-11*t4691*t21672;
  t21738 = t16996*t21678;
  t21740 = t15520*t21692;
  t21741 = t21737 + t21738 + t21740;
  t21742 = 0.100001*t21741;
  t21770 = t16996*t21672;
  t21773 = t17069*t21678;
  t21774 = -1.000000000009*t4691*t21692;
  t21776 = t21770 + t21773 + t21774;
  t21777 = -0.3*t21776;
  t21795 = t21673 + t21681 + t21701 + t21725 + t21742 + t21777;
  t40230 = t14513*t40229;
  t40367 = t15435*t40251;
  t40439 = t15465*t40434;
  t40447 = -1.*t15520*t40229;
  t40448 = 1.000000000009*t4691*t40251;
  t40453 = -1.*t15787*t40434;
  t40454 = t40447 + t40448 + t40453;
  t40465 = 0.2*t40454;
  t40483 = -1.8e-11*t4691*t40229;
  t40494 = t16996*t40251;
  t40513 = t15520*t40434;
  t43500 = t40483 + t40494 + t40513;
  t44513 = 0.100001*t43500;
  t44523 = t16996*t40229;
  t44525 = t17069*t40251;
  t44660 = -1.000000000009*t4691*t40434;
  t44663 = t44523 + t44525 + t44660;
  t44664 = -0.3*t44663;
  t44669 = t40230 + t40367 + t40439 + t40465 + t44513 + t44664;
  t19848 = 5.4e-18*t4449;
  t19852 = 0.100000000003*t14398;
  t19854 = -0.200000000003*t16996;
  t19855 = t19848 + t19852 + t19854;
  t19867 = -0.2000000000048*t4449;
  t19878 = t19869 + t4691;
  t19881 = 0.100000000003*t19878;
  t19882 = t19867 + t15453 + t19881;
  t19887 = 0.1000000000039*t4449;
  t19888 = t19869 + t5266;
  t19889 = -0.200000000003*t19888;
  t19890 = 3.e-7*t16996;
  t19891 = t19887 + t19889 + t19890;
  t45323 = 3.e-6*t3466*t3521*t21555;
  t45324 = 3.e-6*t727*t45117;
  t45326 = t4878*t38036;
  t45327 = t45323 + t45324 + t45326;
  t19899 = t19897 + t5266;
  t45330 = -1.*t3466*t3521*t21555;
  t45386 = t243*t45117;
  t45445 = t45330 + t45386 + t39039;
  t45575 = -1.*t6386*t3466*t21555;
  t45591 = t45575 + t45290 + t44709;
  t19967 = t19897 + t4691;
  t45282 = t15465*t45277;
  t45287 = t14513*t45286;
  t45293 = t15435*t45292;
  t45294 = -1.000000000009*t4691*t45277;
  t45295 = t16996*t45286;
  t45296 = t17069*t45292;
  t45299 = t45294 + t45295 + t45296;
  t45301 = -0.3*t45299;
  t45302 = t15520*t45277;
  t45303 = -1.8e-11*t4691*t45286;
  t45304 = t16996*t45292;
  t45306 = t45302 + t45303 + t45304;
  t45307 = 0.100001*t45306;
  t45309 = -1.*t15787*t45277;
  t45310 = -1.*t15520*t45286;
  t45311 = 1.000000000009*t4691*t45292;
  t45312 = t45309 + t45310 + t45311;
  t45313 = 0.2*t45312;
  t45314 = t45282 + t45287 + t45293 + t45301 + t45307 + t45313;
  t46134 = t2169*t3466*t3483*t21555;
  t46199 = 0.2000000000018*t3521*t21555*t4079;
  t46201 = -6.000000000054e-7*t727*t3466*t21555*t4262;
  t46202 = t4707*t22109;
  t46203 = t5317*t22165;
  t46205 = t5380*t22257;
  t46229 = t6881*t22109;
  t46230 = t7010*t22165;
  t46484 = t7090*t22257;
  t46618 = t46229 + t46230 + t46484;
  t46635 = -0.3*t46618;
  t46637 = -1.*t7320*t22109;
  t46670 = -1.*t7090*t22165;
  t46682 = -1.*t7385*t22257;
  t46691 = t46637 + t46670 + t46682;
  t46695 = 0.2*t46691;
  t46696 = t8369*t22109;
  t46697 = t6881*t22165;
  t46699 = t7320*t22257;
  t46701 = t46696 + t46697 + t46699;
  t46705 = 0.100001*t46701;
  t46716 = t46134 + t46199 + t46201 + t46202 + t46203 + t46205 + t46635 + t46695 + t46705;
  t45635 = -0.2000000000018*t21454*t3466*t3521;
  t45755 = t2169*t21663;
  t45870 = 6.000000000054e-7*t727*t21591;
  t45928 = t4707*t21672;
  t45938 = t5317*t21678;
  t45940 = t5380*t21692;
  t45942 = t6881*t21672;
  t45986 = t7010*t21678;
  t46029 = t7090*t21692;
  t46036 = t45942 + t45986 + t46029;
  t46041 = -0.3*t46036;
  t46058 = -1.*t7320*t21672;
  t46071 = -1.*t7090*t21678;
  t46073 = -1.*t7385*t21692;
  t46075 = t46058 + t46071 + t46073;
  t46076 = 0.2*t46075;
  t46105 = t8369*t21672;
  t46128 = t6881*t21678;
  t46129 = t7320*t21692;
  t46130 = t46105 + t46128 + t46129;
  t46131 = 0.100001*t46130;
  t46133 = t45635 + t45755 + t45870 + t45928 + t45938 + t45940 + t46041 + t46076 + t46131;
  t46739 = 6.000000000054e-7*t727*t21966;
  t46740 = t2169*t38036;
  t46741 = t4707*t40229;
  t46742 = t5317*t40251;
  t46744 = t5380*t40434;
  t46745 = t6881*t40229;
  t46747 = t7010*t40251;
  t46749 = t7090*t40434;
  t46750 = t46745 + t46747 + t46749;
  t46753 = -0.3*t46750;
  t46754 = -1.*t7320*t40229;
  t46759 = -1.*t7090*t40251;
  t46760 = -1.*t7385*t40434;
  t46770 = t46754 + t46759 + t46760;
  t46782 = 0.2*t46770;
  t46793 = t8369*t40229;
  t46796 = t6881*t40251;
  t46797 = t7320*t40434;
  t46801 = t46793 + t46796 + t46797;
  t46803 = 0.100001*t46801;
  t46806 = t46739 + t46740 + t46741 + t46742 + t46744 + t46753 + t46782 + t46803;
  t47201 = t14513*t45327;
  t47207 = t15435*t45445;
  t47216 = t15465*t45591;
  t47223 = -1.*t15520*t45327;
  t47229 = 1.000000000009*t4691*t45445;
  t47231 = -1.*t15787*t45591;
  t47232 = t47223 + t47229 + t47231;
  t47235 = 0.2*t47232;
  t47236 = -1.8e-11*t4691*t45327;
  t47240 = t16996*t45445;
  t47244 = t15520*t45591;
  t47246 = t47236 + t47240 + t47244;
  t47249 = 0.100001*t47246;
  t47250 = t16996*t45327;
  t47256 = t17069*t45445;
  t47265 = -1.000000000009*t4691*t45591;
  t47267 = t47250 + t47256 + t47265;
  t47276 = -0.3*t47267;
  t47703 = t47201 + t47207 + t47216 + t47235 + t47249 + t47276;
  t46810 = -0.2000000000018*t243*t3466*t21555;
  t46812 = -0.2000000000018*t3521*t45117;
  t46813 = 6.000000000054e-7*t3521*t38036;
  t46814 = t5380*t45277;
  t46816 = t4707*t45286;
  t46818 = t5317*t45292;
  t46819 = -1.*t7385*t45277;
  t46821 = -1.*t7320*t45286;
  t46823 = -1.*t7090*t45292;
  t46824 = t46819 + t46821 + t46823;
  t46826 = 0.2*t46824;
  t46828 = t7320*t45277;
  t46829 = t8369*t45286;
  t47071 = t6881*t45292;
  t47072 = t46828 + t46829 + t47071;
  t47073 = 0.100001*t47072;
  t47074 = t7090*t45277;
  t47075 = t6881*t45286;
  t47107 = t7010*t45292;
  t47146 = t47074 + t47075 + t47107;
  t47174 = -0.3*t47146;
  t47200 = t46810 + t46812 + t46813 + t46814 + t46816 + t46818 + t46826 + t47073 + t47174;
  t48134 = t4878*t21454*t3466*t3483;
  t48140 = 3.e-6*t727*t21454*t3466*t4262;
  t48142 = t48134 + t48140;
  t48146 = t243*t21454*t3466*t4262;
  t48148 = t21464 + t48146;
  t48159 = 3.e-6*t21454*t3466*t3483*t3521;
  t48163 = -1.*t21454*t3466*t3521*t4262;
  t48168 = t48159 + t48163;
  t48213 = -3.e-6*t727*t21454*t3466*t3483;
  t48217 = 3.e-6*t21454*t3521*t4079;
  t48221 = t4878*t21454*t3466*t4262;
  t48222 = t48213 + t48217 + t48221;
  t48224 = -1.*t243*t21454*t3466*t3483;
  t48225 = -1.*t21454*t3521*t4079;
  t48226 = t48224 + t48225 + t48140;
  t48229 = t21454*t3466*t3483*t3521;
  t48230 = -1.*t6386*t21454*t4079;
  t48235 = 3.e-6*t21454*t3466*t3521*t4262;
  t48237 = t48229 + t48230 + t48235;
  t48428 = 1.000000000009*t21454*t3521*t4079;
  t48429 = 3.e-6*t243*t21454*t3466*t4262;
  t48430 = t21475 + t48428 + t48429;
  t48432 = -3.e-6*t21454*t3466*t3483*t3521;
  t48433 = 3.e-6*t243*t21454*t4079;
  t48435 = -9.e-12*t21454*t3466*t3521*t4262;
  t48436 = t48432 + t48433 + t48435;
  t48439 = -1.*t243*t21454*t4079;
  t48440 = t48229 + t48439 + t48235;
  t48541 = 3.e-6*t727*t21454*t3483*t4079;
  t48542 = -1.*t4878*t21454*t4079*t4262;
  t48545 = t21659 + t48541 + t48542;
  t48549 = t243*t21454*t3483*t4079;
  t48551 = -3.e-6*t727*t21454*t4079*t4262;
  t48553 = t21676 + t48549 + t48551;
  t48555 = -1.*t21454*t3483*t3521*t4079;
  t48558 = -3.e-6*t21454*t3521*t4079*t4262;
  t48559 = t21689 + t48555 + t48558;
  t47981 = 6.000000000054e-7*t727*t21454*t3466*t3483;
  t48063 = t2169*t21454*t3466*t4262;
  t48145 = t4707*t48142;
  t48154 = t5317*t48148;
  t48169 = t5380*t48168;
  t48171 = t6881*t48142;
  t48172 = t7010*t48148;
  t48177 = t7090*t48168;
  t48181 = t48171 + t48172 + t48177;
  t48182 = -0.3*t48181;
  t48183 = -1.*t7320*t48142;
  t48186 = -1.*t7090*t48148;
  t48187 = -1.*t7385*t48168;
  t48192 = t48183 + t48186 + t48187;
  t48194 = 0.2*t48192;
  t48195 = t8369*t48142;
  t48197 = t6881*t48148;
  t48198 = t7320*t48168;
  t48200 = t48195 + t48197 + t48198;
  t48207 = 0.100001*t48200;
  t48208 = t47981 + t48063 + t48145 + t48154 + t48169 + t48182 + t48194 + t48207;
  t48606 = t21664 + t21666;
  t48612 = t21677 + t21599;
  t48618 = t21690 + t21691;
  t48672 = t3483*t21555;
  t48673 = t21454*t4079*t4262;
  t48674 = t48672 + t48673;
  t48671 = t4878*t21663;
  t48675 = 3.e-6*t727*t48674;
  t48676 = t48671 + t48675;
  t48679 = t243*t48674;
  t48681 = t21664 + t48679;
  t48685 = -1.*t3521*t48674;
  t48686 = t21819 + t48685;
  t48734 = 3.e-6*t243*t21663;
  t48735 = -1.*t243*t48674;
  t48736 = t48734 + t48735;
  t48745 = -9.e-12*t3521*t21663;
  t48746 = 3.e-6*t3521*t48674;
  t48747 = t48745 + t48746;
  t48413 = 0.2000000000018*t21454*t3466*t3483*t3521;
  t48414 = -0.2000000000018*t243*t21454*t4079;
  t48418 = 6.000000000054e-7*t21454*t3466*t3521*t4262;
  t48431 = t5380*t48430;
  t48438 = t4707*t48436;
  t48442 = t5317*t48440;
  t48443 = -1.*t7385*t48430;
  t48444 = -1.*t7320*t48436;
  t48445 = -1.*t7090*t48440;
  t48447 = t48443 + t48444 + t48445;
  t48449 = 0.2*t48447;
  t48450 = t7320*t48430;
  t48451 = t8369*t48436;
  t48453 = t6881*t48440;
  t48489 = t48450 + t48451 + t48453;
  t48491 = 0.100001*t48489;
  t48493 = t7090*t48430;
  t48494 = t6881*t48436;
  t48495 = t7010*t48440;
  t48497 = t48493 + t48494 + t48495;
  t48504 = -0.3*t48497;
  t48510 = t48413 + t48414 + t48418 + t48431 + t48438 + t48442 + t48449 + t48491 + t48504;
  t48815 = 3.e-6*t243*t21571;
  t48816 = -9.e-12*t243*t48674;
  t48817 = t21659 + t48815 + t48816;
  t48820 = -1.*t243*t21571;
  t48821 = 3.e-6*t243*t48674;
  t48822 = t21676 + t48820 + t48821;
  t48824 = -1.000000000009*t243*t21454*t3466;
  t48826 = t3521*t21571;
  t48828 = -3.e-6*t3521*t48674;
  t48829 = t48824 + t48826 + t48828;
  t48732 = 6.000000000054e-7*t3521*t21663;
  t48733 = -0.2000000000018*t3521*t48674;
  t48737 = t5380*t48736;
  t48742 = t5317*t48686;
  t48748 = t4707*t48747;
  t48751 = t7320*t48736;
  t48755 = t6881*t48686;
  t48756 = t8369*t48747;
  t48757 = t48751 + t48755 + t48756;
  t48759 = 0.100001*t48757;
  t48760 = t7090*t48736;
  t48761 = t7010*t48686;
  t48762 = t6881*t48747;
  t48768 = t48760 + t48761 + t48762;
  t48769 = -0.3*t48768;
  t48776 = -1.*t7385*t48736;
  t48780 = -1.*t7090*t48686;
  t48783 = -1.*t7320*t48747;
  t48785 = t48776 + t48780 + t48783;
  t48793 = 0.2*t48785;
  t48794 = t48732 + t48733 + t48737 + t48742 + t48748 + t48759 + t48769 + t48793;
  t48859 = -1.000000000009*t21454*t3466*t3521;
  t48861 = t48859 + t48820 + t48821;
  t48865 = -3.e-6*t243*t21454*t3466;
  t48868 = -9.e-12*t3521*t48674;
  t48869 = t48865 + t21611 + t48868;
  t48873 = t243*t21454*t3466;
  t48876 = -1.*t3521*t21571;
  t48886 = t48873 + t48876 + t48746;
  t48223 = t14513*t48222;
  t48227 = t15435*t48226;
  t48239 = t15465*t48237;
  t48240 = -1.*t15520*t48222;
  t48241 = 1.000000000009*t4691*t48226;
  t48243 = -1.*t15787*t48237;
  t48245 = t48240 + t48241 + t48243;
  t48246 = 0.2*t48245;
  t48248 = -1.8e-11*t4691*t48222;
  t48301 = t16996*t48226;
  t48366 = t15520*t48237;
  t48368 = t48248 + t48301 + t48366;
  t48370 = 0.100001*t48368;
  t48371 = t16996*t48222;
  t48372 = t17069*t48226;
  t48377 = -1.000000000009*t4691*t48237;
  t48404 = t48371 + t48372 + t48377;
  t48405 = -0.3*t48404;
  t48411 = t48223 + t48227 + t48239 + t48246 + t48370 + t48405;
  t48677 = t14513*t48676;
  t48682 = t15435*t48681;
  t48687 = t15465*t48686;
  t48688 = -1.*t15520*t48676;
  t48690 = 1.000000000009*t4691*t48681;
  t48692 = -1.*t15787*t48686;
  t48693 = t48688 + t48690 + t48692;
  t48694 = 0.2*t48693;
  t48697 = -1.8e-11*t4691*t48676;
  t48700 = t16996*t48681;
  t48709 = t15520*t48686;
  t48711 = t48697 + t48700 + t48709;
  t48713 = 0.100001*t48711;
  t48717 = t16996*t48676;
  t48721 = t17069*t48681;
  t48724 = -1.000000000009*t4691*t48686;
  t48726 = t48717 + t48721 + t48724;
  t48728 = -0.3*t48726;
  t48729 = t48677 + t48682 + t48687 + t48694 + t48713 + t48728;
  t48919 = -3.e-6*t21454*t3466*t3521;
  t48923 = t4878*t48674;
  t48924 = t48919 + t21603 + t48923;
  t48927 = t21454*t3466*t3521;
  t48928 = t243*t21571;
  t48929 = t48927 + t48928 + t48675;
  t48936 = t6386*t21454*t3466;
  t48939 = t48936 + t48876 + t48746;
  t48864 = t15465*t48861;
  t48871 = t14513*t48869;
  t48887 = t15435*t48886;
  t48888 = -1.000000000009*t4691*t48861;
  t48889 = t16996*t48869;
  t48890 = t17069*t48886;
  t48891 = t48888 + t48889 + t48890;
  t48892 = -0.3*t48891;
  t48896 = t15520*t48861;
  t48897 = -1.8e-11*t4691*t48869;
  t48899 = t16996*t48886;
  t48901 = t48896 + t48897 + t48899;
  t48903 = 0.100001*t48901;
  t48904 = -1.*t15787*t48861;
  t48905 = -1.*t15520*t48869;
  t48906 = 1.000000000009*t4691*t48886;
  t48908 = t48904 + t48905 + t48906;
  t48909 = 0.2*t48908;
  t48911 = t48864 + t48871 + t48887 + t48892 + t48903 + t48909;
  p_output1[0]=(t3519 + t4249 + t4437 + t4707*t4960 + t5317*t5338 + t5380*t6849 - 0.3*(t4960*t6881 + t5338*t7010 + t6849*t7090) + 0.2*(-1.*t5338*t7090 - 1.*t4960*t7320 - 1.*t6849*t7385) + 0.100001*(t5338*t6881 + t6849*t7320 + t4960*t8369))*var2[4] + t14340*var2[5] + t19092*var2[10] + t17074*var2[12];
  p_output1[1]=t14340*var2[4] + (t3519 + t4437 + t19123*t4707 + t19125*t5317 + t19155*t5380 - 0.3*(t19123*t6881 + t19125*t7010 + t19155*t7090) + 0.2*(-1.*t19125*t7090 - 1.*t19123*t7320 - 1.*t19155*t7385) + 0.100001*(t19125*t6881 + t19155*t7320 + t19123*t8369))*var2[5] + t19493*var2[10] + t19418*var2[12];
  p_output1[2]=t19092*var2[4] + t19493*var2[5] + (-0.2000000000018*t243*t3466*t3483 + t4249 - 6.000000000054e-7*t243*t3466*t4262 + t19766*t4707 + t19737*t5317 + t19776*t5380 - 0.3*(t19766*t6881 + t19737*t7010 + t19776*t7090) + 0.2*(-1.*t19737*t7090 - 1.*t19766*t7320 - 1.*t19776*t7385) + 0.100001*(t19737*t6881 + t19776*t7320 + t19766*t8369))*var2[10] + t19728*var2[12];
  p_output1[3]=t17074*var2[4] + t19418*var2[5] + t19728*var2[10] + (t19855*t19865 + t19882*t19885 + t19891*t19894 + 0.100001*(t15520*t19885 + t14494*t19894 - 1.8e-11*t19865*t4449) + 0.2*(-1.*t14494*t19865 - 1.*t19894*t19967 + 1.000000000009*t19885*t4449) - 0.3*(t15520*t19865 + t19885*t19899 - 1.000000000009*t19894*t4449))*var2[12];
  p_output1[4]=1.;
  p_output1[5]=0.2000000000018*t3466*t3521 - 1.*t2169*t3483*t4079 + t14554*t4707 + t15447*t5317 + t15478*t5380 - 0.3*(t14554*t6881 + t15447*t7010 + t15478*t7090) + 6.000000000054e-7*t4079*t4262*t727 + 0.2*(-1.*t15447*t7090 - 1.*t14554*t7320 - 1.*t15478*t7385) + 0.100001*(t15447*t6881 + t15478*t7320 + t14554*t8369);
  p_output1[6]=-1.*t2169*t3466*t4262 + t19228*t4707 + t19232*t5317 + t19272*t5380 - 0.3*(t19228*t6881 + t19232*t7010 + t19272*t7090) - 6.000000000054e-7*t3466*t3483*t727 + 0.2*(-1.*t19232*t7090 - 1.*t19228*t7320 - 1.*t19272*t7385) + 0.100001*(t19232*t6881 + t19272*t7320 + t19228*t8369);
  p_output1[7]=-0.2000000000018*t3466*t3483*t3521 + 0.2000000000018*t243*t4079 - 6.000000000054e-7*t3466*t3521*t4262 + t19705*t4707 + t19689*t5317 + t19539*t5380 - 0.3*(t19705*t6881 + t19689*t7010 + t19539*t7090) + 0.2*(-1.*t19689*t7090 - 1.*t19705*t7320 - 1.*t19539*t7385) + 0.100001*(t19689*t6881 + t19539*t7320 + t19705*t8369);
  p_output1[8]=t14513*t19865 + t15435*t19885 + t15465*t19894 + 0.100001*(t16996*t19885 + t15520*t19894 - 1.8e-11*t19865*t4691) + 0.2*(-1.*t15520*t19865 - 1.*t15787*t19894 + 1.000000000009*t19885*t4691) - 0.3*(t16996*t19865 + t17069*t19885 - 1.000000000009*t19894*t4691);
  p_output1[9]=(t21954 + t21969 + t21982 + t21991*t4707 + t22016*t5317 + t22028*t5380 - 0.3*(t21991*t6881 + t22016*t7010 + t22028*t7090) + 0.2*(-1.*t22016*t7090 - 1.*t21991*t7320 - 1.*t22028*t7385) + 0.100001*(t22016*t6881 + t22028*t7320 + t21991*t8369))*var2[3] + t21545*var2[4] + t21657*var2[5] + t21951*var2[10] + t21795*var2[12];
  p_output1[10]=t21545*var2[3] + (t21954 - 1.*t21555*t2169*t3483*t4079 + t22751*t4707 + t22772*t5317 + t30973*t5380 - 0.3*(t22751*t6881 + t22772*t7010 + t30973*t7090) + 6.000000000054e-7*t21555*t4079*t4262*t727 + 0.2*(-1.*t22772*t7090 - 1.*t22751*t7320 - 1.*t30973*t7385) + 0.100001*(t22772*t6881 + t30973*t7320 + t22751*t8369))*var2[4] + t22740*var2[5] + t22507*var2[10] + t22366*var2[12];
  p_output1[11]=t21657*var2[3] + t22740*var2[4] + (t21969 + t21982 + t44908*t4707 + t44910*t5317 + t44913*t5380 - 0.3*(t44908*t6881 + t44910*t7010 + t44913*t7090) + 0.2*(-1.*t44910*t7090 - 1.*t44908*t7320 - 1.*t44913*t7385) + 0.100001*(t44910*t6881 + t44913*t7320 + t44908*t8369))*var2[5] + t44889*var2[10] + t44669*var2[12];
  p_output1[12]=t21951*var2[3] + t22507*var2[4] + t44889*var2[5] + (t21954 + 6.000000000054e-7*t243*t38036 - 0.2000000000018*t243*t45117 + t45140*t4707 + t45145*t5317 + t45190*t5380 - 0.3*(t45140*t6881 + t45145*t7010 + t45190*t7090) + 0.2*(-1.*t45145*t7090 - 1.*t45140*t7320 - 1.*t45190*t7385) + 0.100001*(t45145*t6881 + t45190*t7320 + t45140*t8369))*var2[10] + t45314*var2[12];
  p_output1[13]=t21795*var2[3] + t22366*var2[4] + t44669*var2[5] + t45314*var2[10] + (t19855*t45327 + t19882*t45445 + t19891*t45591 + 0.100001*(-1.8e-11*t4449*t45327 + t15520*t45445 + t14494*t45591) + 0.2*(-1.*t14494*t45327 + 1.000000000009*t4449*t45445 - 1.*t19967*t45591) - 0.3*(t15520*t45327 + t19899*t45445 - 1.000000000009*t4449*t45591))*var2[12];
  p_output1[14]=1.;
  p_output1[15]=t46133;
  p_output1[16]=t46716;
  p_output1[17]=t46806;
  p_output1[18]=t47200;
  p_output1[19]=t47703;
  p_output1[20]=t46133*var2[3] + t46716*var2[4] + t46806*var2[5] + t47200*var2[10] + t47703*var2[12];
  p_output1[21]=t46716*var2[3] + (t21454*t2169*t3483*t4079 + t45635 + t4707*t48545 + t48553*t5317 + t48559*t5380 - 0.3*(t48545*t6881 + t48553*t7010 + t48559*t7090) - 6.000000000054e-7*t21454*t4079*t4262*t727 + 0.2*(-1.*t48553*t7090 - 1.*t48545*t7320 - 1.*t48559*t7385) + 0.100001*(t48553*t6881 + t48559*t7320 + t48545*t8369))*var2[4] + t48208*var2[5] + t48510*var2[10] + t48411*var2[12];
  p_output1[22]=t46806*var2[3] + t48208*var2[4] + (t45755 + t45870 + t4707*t48606 + t48612*t5317 + t48618*t5380 - 0.3*(t48606*t6881 + t48612*t7010 + t48618*t7090) + 0.2*(-1.*t48612*t7090 - 1.*t48606*t7320 - 1.*t48618*t7385) + 0.100001*(t48612*t6881 + t48618*t7320 + t48606*t8369))*var2[5] + t48794*var2[10] + t48729*var2[12];
  p_output1[23]=t47200*var2[3] + t48510*var2[4] + t48794*var2[5] + (-0.2000000000018*t21571*t243 + t45635 + 6.000000000054e-7*t243*t48674 + t4707*t48817 + t48822*t5317 + t48829*t5380 - 0.3*(t48817*t6881 + t48822*t7010 + t48829*t7090) + 0.2*(-1.*t48822*t7090 - 1.*t48817*t7320 - 1.*t48829*t7385) + 0.100001*(t48822*t6881 + t48829*t7320 + t48817*t8369))*var2[10] + t48911*var2[12];
  p_output1[24]=t47703*var2[3] + t48411*var2[4] + t48729*var2[5] + t48911*var2[10] + (t19855*t48924 + t19882*t48929 + t19891*t48939 + 0.100001*(-1.8e-11*t4449*t48924 + t15520*t48929 + t14494*t48939) + 0.2*(-1.*t14494*t48924 + 1.000000000009*t4449*t48929 - 1.*t19967*t48939) - 0.3*(t15520*t48924 + t19899*t48929 - 1.000000000009*t4449*t48939))*var2[12];
  p_output1[25]=1.;
  p_output1[26]=-0.2000000000018*t21555*t3466*t3521 + t2169*t45117 + t45327*t4707 + t45445*t5317 + t45591*t5380 - 0.3*(t45327*t6881 + t45445*t7010 + t45591*t7090) + 6.000000000054e-7*t38036*t727 + 0.2*(-1.*t45445*t7090 - 1.*t45327*t7320 - 1.*t45591*t7385) + 0.100001*(t45445*t6881 + t45591*t7320 + t45327*t8369);
  p_output1[27]=-1.*t21454*t2169*t3466*t3483 - 0.2000000000018*t21454*t3521*t4079 + t4707*t48222 + t48226*t5317 + t48237*t5380 - 0.3*(t48222*t6881 + t48226*t7010 + t48237*t7090) + 6.000000000054e-7*t21454*t3466*t4262*t727 + 0.2*(-1.*t48226*t7090 - 1.*t48222*t7320 - 1.*t48237*t7385) + 0.100001*(t48226*t6881 + t48237*t7320 + t48222*t8369);
  p_output1[28]=t2169*t48674 + t4707*t48676 + t48681*t5317 + t48686*t5380 - 0.3*(t48676*t6881 + t48681*t7010 + t48686*t7090) + 6.000000000054e-7*t21663*t727 + 0.2*(-1.*t48681*t7090 - 1.*t48676*t7320 - 1.*t48686*t7385) + 0.100001*(t48681*t6881 + t48686*t7320 + t48676*t8369);
  p_output1[29]=0.2000000000018*t21454*t243*t3466 - 0.2000000000018*t21571*t3521 + 6.000000000054e-7*t3521*t48674 + t4707*t48869 + t48886*t5317 + t48861*t5380 - 0.3*(t48869*t6881 + t48886*t7010 + t48861*t7090) + 0.2*(-1.*t48886*t7090 - 1.*t48869*t7320 - 1.*t48861*t7385) + 0.100001*(t48886*t6881 + t48861*t7320 + t48869*t8369);
  p_output1[30]=t14513*t48924 + t15435*t48929 + t15465*t48939 + 0.100001*(-1.8e-11*t4691*t48924 + t16996*t48929 + t15520*t48939) + 0.2*(-1.*t15520*t48924 + 1.000000000009*t4691*t48929 - 1.*t15787*t48939) - 0.3*(t16996*t48924 + t17069*t48929 - 1.000000000009*t4691*t48939);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_LeftBackFoot.hh"

namespace Flight2
{

void J_impact_velocity_LeftBackFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
