/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:11:22 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t32283;
  double t45278;
  double t70307;
  double t70977;
  double t71406;
  double t71414;
  double t71415;
  double t71419;
  double t30418;
  double t71425;
  double t72166;
  double t72167;
  double t72203;
  double t71567;
  double t72300;
  double t72301;
  double t72687;
  double t72828;
  double t72831;
  double t72832;
  double t72932;
  double t72942;
  double t72973;
  double t72999;
  double t73000;
  double t73002;
  double t73008;
  double t73011;
  double t73013;
  double t73014;
  double t72834;
  double t72922;
  double t72927;
  double t72928;
  double t72929;
  double t72930;
  double t71420;
  double t71613;
  double t71911;
  double t72931;
  double t73004;
  double t73015;
  double t72176;
  double t72232;
  double t72233;
  double t72264;
  double t72265;
  double t72267;
  double t72269;
  double t72270;
  double t72271;
  double t73018;
  double t73019;
  double t73020;
  double t72302;
  double t72307;
  double t72317;
  double t72326;
  double t72328;
  double t72329;
  double t72330;
  double t72331;
  double t72332;
  double t72395;
  double t72396;
  double t72397;
  double t73310;
  double t73311;
  double t73312;
  double t73313;
  double t73299;
  double t73300;
  double t73303;
  double t73304;
  double t73305;
  double t73211;
  double t73212;
  double t73213;
  double t73251;
  double t73458;
  double t73470;
  double t73517;
  double t73306;
  double t73307;
  double t73308;
  double t73655;
  double t73659;
  double t73660;
  double t73674;
  double t73309;
  double t73314;
  double t73315;
  double t73435;
  double t73550;
  double t73552;
  double t73827;
  double t73828;
  double t73857;
  double t73820;
  double t73565;
  double t73567;
  double t73587;
  double t73600;
  double t73602;
  double t73604;
  double t73605;
  double t73614;
  double t73615;
  double t73616;
  double t73620;
  double t73629;
  double t73630;
  double t73631;
  double t73293;
  double t73294;
  double t73295;
  double t74033;
  double t74034;
  double t74037;
  double t73899;
  double t73900;
  double t73901;
  double t73902;
  double t73903;
  double t73943;
  double t73944;
  double t73945;
  double t73946;
  double t73947;
  double t73948;
  double t74024;
  double t74025;
  double t74026;
  double t74027;
  double t74028;
  double t74029;
  double t74057;
  double t74058;
  double t74060;
  double t74079;
  double t74080;
  double t74081;
  double t74082;
  double t74083;
  double t74377;
  double t74378;
  double t74379;
  double t74089;
  double t74093;
  double t74094;
  double t74105;
  double t74106;
  double t74107;
  double t74112;
  double t74113;
  double t74117;
  double t74125;
  double t74218;
  double t74311;
  double t74316;
  double t74318;
  double t74322;
  double t74330;
  double t74331;
  double t74332;
  double t74334;
  double t74335;
  double t74336;
  double t74343;
  double t74345;
  double t74346;
  double t74351;
  double t74352;
  double t74353;
  double t74359;
  double t74360;
  double t74364;
  double t74366;
  double t74367;
  double t74368;
  double t73669;
  double t74516;
  double t74517;
  double t74518;
  double t74520;
  double t74521;
  double t74522;
  double t74544;
  double t74529;
  double t74587;
  double t74530;
  double t73662;
  double t74566;
  double t74589;
  double t73672;
  double t73673;
  double t73679;
  double t73698;
  double t74601;
  double t74602;
  double t74538;
  double t74539;
  double t74540;
  double t74519;
  double t74523;
  double t74527;
  double t74622;
  double t74628;
  double t74632;
  double t73971;
  double t74648;
  double t74649;
  double t74650;
  double t74660;
  double t74661;
  double t74663;
  double t74016;
  double t74018;
  double t74667;
  double t74668;
  double t74672;
  double t74687;
  double t74688;
  double t74694;
  double t73905;
  double t73917;
  double t73928;
  double t74716;
  double t74717;
  double t74718;
  double t74847;
  double t74848;
  double t74849;
  double t73824;
  double t73858;
  double t73881;
  double t73883;
  double t74864;
  double t74867;
  double t74868;
  double t74879;
  double t74880;
  double t74881;
  double t74891;
  double t74892;
  double t74893;
  double t74896;
  double t74897;
  double t74899;
  double t74914;
  double t74915;
  double t74918;
  double t74910;
  double t74911;
  double t74912;
  double t74588;
  double t74903;
  double t74904;
  double t74596;
  double t74949;
  double t74950;
  double t74607;
  double t74942;
  double t74943;
  double t74944;
  double t74895;
  double t74900;
  double t74901;
  double t74640;
  double t74647;
  double t74654;
  double t74677;
  double t74679;
  double t75085;
  double t75086;
  double t75087;
  double t75089;
  double t75097;
  double t75107;
  double t75126;
  double t75137;
  double t75138;
  double t75140;
  double t75141;
  double t75142;
  double t75153;
  double t75154;
  double t75155;
  double t75158;
  double t75159;
  double t75160;
  double t74711;
  double t74712;
  double t74725;
  double t74728;
  double t75174;
  double t75175;
  double t75176;
  double t75187;
  double t75188;
  double t75189;
  double t74859;
  double t74861;
  double t74872;
  double t74876;
  double t75204;
  double t75205;
  double t75206;
  double t75214;
  double t75215;
  double t75216;
  double t74478;
  double t74479;
  double t74483;
  double t74492;
  double t74493;
  double t74494;
  double t74485;
  double t74486;
  double t74487;
  double t72442;
  double t72674;
  double t72678;
  double t72679;
  double t73016;
  double t73017;
  double t73029;
  double t73091;
  double t73097;
  double t74382;
  double t74470;
  double t74472;
  double t73273;
  double t73274;
  double t73275;
  double t73281;
  double t73283;
  double t73195;
  double t73210;
  double t73214;
  double t73253;
  double t73254;
  double t73260;
  double t73404;
  double t73556;
  double t73562;
  double t74474;
  double t74475;
  double t74476;
  double t73618;
  double t73643;
  double t73644;
  double t73596;
  double t73606;
  double t73612;
  double t73661;
  double t73663;
  double t73667;
  double t73668;
  double t73670;
  double t73671;
  double t73675;
  double t73676;
  double t73700;
  double t73720;
  double t73724;
  double t73825;
  double t73859;
  double t73860;
  double t73871;
  double t73875;
  double t73876;
  double t73882;
  double t73884;
  double t73888;
  double t73891;
  double t73892;
  double t74496;
  double t74497;
  double t74498;
  double t73909;
  double t73910;
  double t73911;
  double t73912;
  double t73913;
  double t73921;
  double t73931;
  double t73940;
  double t73941;
  double t73942;
  double t74500;
  double t74501;
  double t74505;
  double t73950;
  double t73992;
  double t74014;
  double t74015;
  double t74017;
  double t74019;
  double t74020;
  double t74021;
  double t74022;
  double t74023;
  double t74507;
  double t74508;
  double t74509;
  double t74380;
  double t74381;
  double t74473;
  double t74477;
  double t74484;
  double t74491;
  double t74495;
  double t74499;
  double t74506;
  double t74513;
  double t74514;
  double t74095;
  double t74099;
  double t74103;
  double t74108;
  double t74109;
  double t74110;
  double t74333;
  double t74337;
  double t74338;
  double t74121;
  double t74122;
  double t74123;
  double t74347;
  double t74355;
  double t74356;
  double t74312;
  double t74313;
  double t74314;
  double t74365;
  double t74369;
  double t74373;
  double t74323;
  double t74324;
  double t74325;
  double t74528;
  double t74531;
  double t74535;
  double t74536;
  double t74541;
  double t74542;
  double t74545;
  double t74590;
  double t74591;
  double t74592;
  double t75249;
  double t75256;
  double t75257;
  double t74594;
  double t74595;
  double t74597;
  double t74598;
  double t74599;
  double t74600;
  double t74603;
  double t74605;
  double t74606;
  double t74609;
  double t74610;
  double t74611;
  double t74616;
  double t74633;
  double t74634;
  double t74635;
  double t74637;
  double t74638;
  double t74639;
  double t74641;
  double t74642;
  double t74643;
  double t74645;
  double t74646;
  double t74664;
  double t74665;
  double t74666;
  double t74674;
  double t74676;
  double t74678;
  double t74680;
  double t74686;
  double t74698;
  double t74700;
  double t74702;
  double t74703;
  double t74704;
  double t74706;
  double t74710;
  double t74713;
  double t74714;
  double t74715;
  double t74724;
  double t74726;
  double t74727;
  double t74845;
  double t74846;
  double t74850;
  double t74852;
  double t74854;
  double t74855;
  double t74856;
  double t74858;
  double t74860;
  double t74862;
  double t74863;
  double t74869;
  double t74874;
  double t74875;
  double t74877;
  double t74878;
  double t74882;
  double t74883;
  double t74885;
  double t74886;
  double t74887;
  double t74902;
  double t74905;
  double t74906;
  double t74907;
  double t74909;
  double t74913;
  double t74919;
  double t74940;
  double t74941;
  double t74945;
  double t74946;
  double t74947;
  double t74951;
  double t74953;
  double t74954;
  double t74956;
  double t74957;
  double t74958;
  double t74959;
  double t74960;
  double t74962;
  double t74963;
  double t74964;
  double t74965;
  double t74966;
  double t74968;
  double t74969;
  double t74970;
  double t74971;
  double t74976;
  double t74984;
  double t74989;
  double t75008;
  double t75019;
  double t75020;
  double t75024;
  double t75025;
  double t75026;
  double t75028;
  double t75029;
  double t75030;
  double t75035;
  double t75043;
  double t75048;
  double t75056;
  double t75067;
  double t75078;
  double t75079;
  double t75080;
  double t75081;
  double t75083;
  double t75088;
  double t75115;
  double t75139;
  double t75143;
  double t75144;
  double t75145;
  double t75147;
  double t75148;
  double t75149;
  double t75150;
  double t75151;
  double t75152;
  double t75157;
  double t75161;
  double t75162;
  double t75164;
  double t75165;
  double t75166;
  double t75168;
  double t75169;
  double t75170;
  double t75171;
  double t75172;
  double t75173;
  double t75178;
  double t75179;
  double t75180;
  double t75182;
  double t75184;
  double t75185;
  double t75186;
  double t75190;
  double t75191;
  double t75194;
  double t75195;
  double t75196;
  double t75198;
  double t75199;
  double t75200;
  double t75201;
  double t75202;
  double t75203;
  double t75207;
  double t75208;
  double t75209;
  double t75210;
  double t75211;
  double t75212;
  double t75213;
  double t75217;
  double t75218;
  double t75221;
  double t75222;
  double t75223;
  double t74084;
  double t74085;
  double t74104;
  double t74111;
  double t74124;
  double t74315;
  double t74326;
  double t74342;
  double t74357;
  double t74374;
  double t74375;
  double t75322;
  double t75323;
  double t75324;
  double t75325;
  double t75326;
  double t75327;
  double t75328;
  double t75329;
  double t75330;
  double t75331;
  double t75332;
  double t75381;
  double t75382;
  double t75383;
  double t74908;
  double t74955;
  double t74997;
  double t75027;
  double t75084;
  double t75163;
  double t75167;
  double t75192;
  double t75197;
  double t75220;
  double t75224;
  double t75225;
  double t75348;
  double t75349;
  double t75350;
  double t75351;
  double t75352;
  double t75353;
  double t75354;
  double t75355;
  double t75356;
  double t75357;
  double t75358;
  double t75359;
  double t75417;
  double t75418;
  double t75419;
  double t75420;
  double t75421;
  double t75422;
  double t75424;
  double t75425;
  double t75426;
  double t75427;
  double t75428;
  double t75429;
  double t75470;
  double t75472;
  double t75473;
  double t75544;
  double t75545;
  double t75546;
  double t75482;
  double t75483;
  double t75493;
  double t74537;
  double t74593;
  double t74612;
  double t74636;
  double t74644;
  double t74701;
  double t74705;
  double t74853;
  double t74857;
  double t74884;
  double t74888;
  double t74889;
  double t75334;
  double t75335;
  double t75336;
  double t75337;
  double t75338;
  double t75340;
  double t75341;
  double t75342;
  double t75343;
  double t75344;
  double t75345;
  double t75346;
  double t75401;
  double t75402;
  double t75404;
  double t75405;
  double t75407;
  double t75408;
  double t75409;
  double t75410;
  double t75411;
  double t75413;
  double t75414;
  double t75415;
  double t75533;
  double t75535;
  double t75536;
  double t75537;
  double t75539;
  double t75540;
  double t75541;
  double t75542;
  double t75543;
  double t75547;
  double t75548;
  double t75549;
  double t75550;
  double t75551;
  double t75552;
  double t75553;
  double t75554;
  double t75555;
  double t75558;
  double t75559;
  double t75560;
  double t75561;
  double t75596;
  double t73292;
  double t73297;
  double t73563;
  double t73613;
  double t73654;
  double t73821;
  double t73904;
  double t73949;
  double t74030;
  double t74031;
  double t75376;
  double t75377;
  double t75378;
  double t75379;
  double t75380;
  double t75384;
  double t75385;
  double t75386;
  double t75387;
  double t75388;
  double t75240;
  double t75241;
  double t75242;
  double t75243;
  double t75244;
  double t75293;
  double t75294;
  double t75301;
  double t75309;
  double t75310;
  double t75595;
  double t75597;
  double t75598;
  double t75600;
  double t75601;
  double t75602;
  double t75603;
  double t75604;
  double t75605;
  double t75606;
  double t75607;
  double t75608;
  double t75609;
  double t75610;
  double t75611;
  double t75613;
  double t75614;
  double t75615;
  double t75616;
  double t75617;
  double t75618;
  double t75619;
  double t75627;
  double t75458;
  double t75459;
  double t75460;
  double t75461;
  double t75462;
  double t75464;
  double t75465;
  double t75466;
  double t75467;
  double t75468;
  double t75469;
  double t75479;
  double t75496;
  double t75497;
  double t75505;
  double t75506;
  double t75507;
  double t75511;
  double t75524;
  double t75525;
  double t75526;
  double t75527;
  double t75653;
  double t75654;
  double t75656;
  double t75657;
  double t75658;
  double t75663;
  double t75664;
  double t75665;
  double t72423;
  double t73098;
  double t73261;
  double t73284;
  double t73289;
  double t75234;
  double t75235;
  double t75236;
  double t75237;
  double t75238;
  double t75370;
  double t75371;
  double t75372;
  double t75373;
  double t75374;
  double t75586;
  double t75587;
  double t75588;
  double t75589;
  double t75590;
  double t75591;
  double t75592;
  double t75593;
  double t75443;
  double t75446;
  double t75447;
  double t75448;
  double t75449;
  double t75451;
  double t75452;
  double t75455;
  double t75647;
  double t75648;
  double t75649;
  double t75650;
  double t75651;
  double t72165;
  double t72283;
  double t72342;
  double t72344;
  double t75229;
  double t75230;
  double t75231;
  double t75232;
  double t75365;
  double t75366;
  double t75367;
  double t75368;
  double t75579;
  double t75581;
  double t75582;
  double t75583;
  double t75584;
  double t75437;
  double t75438;
  double t75439;
  double t75440;
  double t75441;
  t32283 = Cos(var1[20]);
  t45278 = -1.*t32283;
  t70307 = 1. + t45278;
  t70977 = 3.e-6*t70307;
  t71406 = 3.e-6*t32283;
  t71414 = t70977 + t71406;
  t71415 = Cos(var1[4]);
  t71419 = Cos(var1[5]);
  t30418 = Cos(var1[18]);
  t71425 = Sin(var1[18]);
  t72166 = 9.e-12*t70307;
  t72167 = t72166 + t45278;
  t72203 = Sin(var1[20]);
  t71567 = Sin(var1[4]);
  t72300 = -1.000000000009*t70307;
  t72301 = 1. + t72300;
  t72687 = -9.e-12*t70307;
  t72828 = 1. + t72687;
  t72831 = -3.e-6*t72828;
  t72832 = t72831 + t70977;
  t72932 = 4.e-7*var1[20];
  t72942 = -1. + t72166;
  t72973 = 0.1*t72942;
  t72999 = 3.000000000027e-7*t70307;
  t73000 = 9.e-18*t72203;
  t73002 = t72932 + t72973 + t72999 + t73000;
  t73008 = -1.2e-12*var1[20];
  t73011 = 0.1000003000009*t70307;
  t73013 = 3.e-12*t72203;
  t73014 = t73008 + t73011 + t73013;
  t72834 = 1.000000000009*t70307;
  t72922 = -1. + t72834;
  t72927 = 0.2*t72922;
  t72928 = -0.2000000000048*t70307;
  t72929 = 0.1000003000009*t72203;
  t72930 = t72927 + t72928 + t72929;
  t71420 = t30418*t71414*t71415*t71419;
  t71613 = -1.*t71414*t71425*t71567;
  t71911 = t71420 + t71613;
  t72931 = t72301*t72930;
  t73004 = 3.e-6*t73002*t72203;
  t73015 = t73014*t72203;
  t72176 = t30418*t72167;
  t72232 = -1.000000000009*t71425*t72203;
  t72233 = t72176 + t72232;
  t72264 = t71415*t71419*t72233;
  t72265 = -1.*t72167*t71425;
  t72267 = -1.000000000009*t30418*t72203;
  t72269 = t72265 + t72267;
  t72270 = t72269*t71567;
  t72271 = t72264 + t72270;
  t73018 = -1.*t72832*t73002;
  t73019 = -1.*t72167*t73014;
  t73020 = -1.000000000009*t72930*t72203;
  t72302 = -1.*t72301*t71425;
  t72307 = t30418*t72203;
  t72317 = t72302 + t72307;
  t72326 = t71415*t71419*t72317;
  t72328 = -1.*t30418*t72301;
  t72329 = -1.*t71425*t72203;
  t72330 = t72328 + t72329;
  t72331 = t72330*t71567;
  t72332 = t72326 + t72331;
  t72395 = -1.*t71415*t71419*t71425;
  t72396 = -1.*t30418*t71567;
  t72397 = t72395 + t72396;
  t73310 = -0.2*t71425;
  t73311 = t30418*t73014;
  t73312 = -1.*t71425*t72930;
  t73313 = t73310 + t73311 + t73312;
  t73299 = -1. + t30418;
  t73300 = 0.2*t73299;
  t73303 = t71425*t73014;
  t73304 = t30418*t72930;
  t73305 = t73300 + t73303 + t73304;
  t73211 = -4.e-7*var1[20];
  t73212 = 0.1*t72828;
  t73213 = -3.000000000027e-7*t70307;
  t73251 = -9.e-18*t72203;
  t73458 = t30418*t72301;
  t73470 = t71425*t72203;
  t73517 = t73458 + t73470;
  t73306 = t72167*t71425;
  t73307 = 1.000000000009*t30418*t72203;
  t73308 = t73306 + t73307;
  t73655 = -0.2*t30418;
  t73659 = 0.05*t71425;
  t73660 = t73300 + t73655 + t73659;
  t73674 = -1.*t73660*t71425;
  t73309 = -1.*t73305*t73308;
  t73314 = -1.*t73313*t72233;
  t73315 = t73018 + t73309 + t73314;
  t73435 = t73313*t72317;
  t73550 = t73305*t73517;
  t73552 = t73004 + t73435 + t73550;
  t73827 = -1.*t71425*t73014;
  t73828 = -1.*t30418*t72930;
  t73857 = t73655 + t73827 + t73828;
  t73820 = Sin(var1[5]);
  t73565 = t71414*t71425*t73305;
  t73567 = t30418*t71414*t73313;
  t73587 = t73211 + t73212 + t73213 + t73565 + t73567 + t73251;
  t73600 = -3.e-6*t73002*t72203;
  t73602 = -1.*t73313*t72317;
  t73604 = -1.*t73305*t73517;
  t73605 = t73600 + t73602 + t73604;
  t73614 = -1.*t71414*t71425*t73305;
  t73615 = -1.*t30418*t71414*t73313;
  t73616 = t72932 + t72973 + t72999 + t73614 + t73615 + t73000;
  t73620 = t72832*t73002;
  t73629 = t73305*t73308;
  t73630 = t73313*t72233;
  t73631 = t73620 + t73629 + t73630;
  t73293 = t71415*t71419*t71425;
  t73294 = t30418*t71567;
  t73295 = t73293 + t73294;
  t74033 = t30418*t71415*t71419;
  t74034 = -1.*t71425*t71567;
  t74037 = t74033 + t74034;
  t73899 = t30418*t71414*t71567;
  t73900 = t71414*t71419*t71425;
  t73901 = t73900 + t73820;
  t73902 = t71415*t73901;
  t73903 = t73899 + t73902;
  t73943 = t72233*t71567;
  t73944 = t71419*t73308;
  t73945 = -1.*t72832*t73820;
  t73946 = t73944 + t73945;
  t73947 = t71415*t73946;
  t73948 = t73943 + t73947;
  t74024 = t72317*t71567;
  t74025 = t71419*t73517;
  t74026 = -3.e-6*t72203*t73820;
  t74027 = t74025 + t74026;
  t74028 = t71415*t74027;
  t74029 = t74024 + t74028;
  t74057 = Cos(var1[3]);
  t74058 = -1.*t71415*t71425;
  t74060 = -1.*t30418*t71419*t71567;
  t74079 = t74058 + t74060;
  t74080 = t74057*t74079;
  t74081 = Sin(var1[3]);
  t74082 = t30418*t74081*t73820;
  t74083 = t74080 + t74082;
  t74377 = -1.*t74081*t74079;
  t74378 = t30418*t74057*t73820;
  t74379 = t74377 + t74378;
  t74089 = -1.*t30418*t71415;
  t74093 = t71419*t71425*t71567;
  t74094 = t74089 + t74093;
  t74105 = t30418*t71415;
  t74106 = -1.*t71419*t71425*t71567;
  t74107 = t74105 + t74106;
  t74112 = -1.*t71414*t71415*t71425;
  t74113 = -1.*t30418*t71414*t71419*t71567;
  t74117 = t74112 + t74113;
  t74125 = t71415*t72269;
  t74218 = -1.*t71419*t72233*t71567;
  t74311 = t74125 + t74218;
  t74316 = t71415*t72330;
  t74318 = -1.*t71419*t72317*t71567;
  t74322 = t74316 + t74318;
  t74330 = -1.*t71419;
  t74331 = t71414*t71425*t73820;
  t74332 = t74330 + t74331;
  t74334 = t30418*t71414*t71415;
  t74335 = -1.*t71567*t73901;
  t74336 = t74334 + t74335;
  t74343 = t72832*t71419;
  t74345 = t73308*t73820;
  t74346 = t74343 + t74345;
  t74351 = t71415*t72233;
  t74352 = -1.*t71567*t73946;
  t74353 = t74351 + t74352;
  t74359 = 3.e-6*t71419*t72203;
  t74360 = t73517*t73820;
  t74364 = t74359 + t74360;
  t74366 = t71415*t72317;
  t74367 = -1.*t71567*t74027;
  t74368 = t74366 + t74367;
  t73669 = 0.05*t30418*t71425;
  t74516 = t71419*t73660;
  t74517 = 0.1*t73820;
  t74518 = t74516 + t74517;
  t74520 = -0.1*t71419;
  t74521 = t73660*t73820;
  t74522 = t74520 + t74521;
  t74544 = Power(t71419,2);
  t74529 = -1.*t30418*t71419*t74518;
  t74587 = Power(t73820,2);
  t74530 = -1.*t30418*t73820*t74522;
  t73662 = -0.05*t30418*t71425;
  t74566 = t30418*t71419*t74518;
  t74589 = t30418*t73820*t74522;
  t73672 = Power(t30418,2);
  t73673 = -0.05*t73672;
  t73679 = Power(t71425,2);
  t73698 = 0.05*t73679;
  t74601 = -1.*t71419*t71425*t74518;
  t74602 = -1.*t71425*t73820*t74522;
  t74538 = t74518*t73820;
  t74539 = -1.*t71419*t74522;
  t74540 = t74538 + t74539;
  t74519 = -1.*t74518*t73820;
  t74523 = t71419*t74522;
  t74527 = t74519 + t74523;
  t74622 = 0.05*t73672;
  t74628 = t71419*t71425*t74518;
  t74632 = t71425*t73820*t74522;
  t73971 = -1.*t30418*t71414*t73857;
  t74648 = t71419*t73002;
  t74649 = t73305*t73820;
  t74650 = t74648 + t74649;
  t74660 = t71419*t73305;
  t74661 = -1.*t73002*t73820;
  t74663 = t74660 + t74661;
  t74016 = t73313*t72269;
  t74018 = t73857*t72233;
  t74667 = -1.*t74332*t74650;
  t74668 = -1.*t73901*t74663;
  t74672 = t73615 + t74667 + t74668;
  t74687 = t73946*t74663;
  t74688 = t74650*t74346;
  t74694 = t73630 + t74687 + t74688;
  t73905 = t30418*t71414*t73857;
  t73917 = -1.*t73857*t72317;
  t73928 = -1.*t73313*t72330;
  t74716 = t74332*t74650;
  t74717 = t73901*t74663;
  t74718 = t73567 + t74716 + t74717;
  t74847 = -1.*t74663*t74027;
  t74848 = -1.*t74650*t74364;
  t74849 = t73602 + t74847 + t74848;
  t73824 = -1.*t73313*t72269;
  t73858 = -1.*t73857*t72233;
  t73881 = t73857*t72317;
  t73883 = t73313*t72330;
  t74864 = -1.*t73946*t74663;
  t74867 = -1.*t74650*t74346;
  t74868 = t73314 + t74864 + t74867;
  t74879 = t74663*t74027;
  t74880 = t74650*t74364;
  t74881 = t73435 + t74879 + t74880;
  t74891 = 0.05*t30418*t71567;
  t74892 = t71415*t74518;
  t74893 = t74891 + t74892;
  t74896 = 0.05*t30418*t71415;
  t74897 = -1.*t71567*t74518;
  t74899 = t74896 + t74897;
  t74914 = 0.05*t30418*t71415*t71419;
  t74915 = -0.05*t71425*t71567;
  t74918 = t74914 + t74915;
  t74910 = -0.05*t71415*t71425;
  t74911 = -0.05*t30418*t71419*t71567;
  t74912 = t74910 + t74911;
  t74588 = 0.05*t30418*t71425*t74587;
  t74903 = -1.*t74037*t74893;
  t74904 = -1.*t74079*t74899;
  t74596 = -0.05*t30418*t71425*t74587;
  t74949 = t74037*t74893;
  t74950 = t74079*t74899;
  t74607 = 0.05*t73672*t74587;
  t74942 = t71415*t74893*t73820;
  t74943 = -1.*t71567*t74899*t73820;
  t74944 = t74942 + t74943 + t74539;
  t74895 = -1.*t71415*t74893*t73820;
  t74900 = t71567*t74899*t73820;
  t74901 = t74895 + t74900 + t74523;
  t74640 = -0.05*t73672*t74587;
  t74647 = -1.*t73313*t73820*t74332;
  t74654 = -1.*t30418*t71414*t73820*t74650;
  t74677 = t72233*t73820*t74650;
  t74679 = t73313*t73820*t74346;
  t75085 = t71415*t71419*t73313;
  t75086 = t73857*t71567;
  t75087 = t75085 + t75086;
  t75089 = t71415*t73857;
  t75097 = -1.*t71419*t73313*t71567;
  t75107 = t75089 + t75097;
  t75126 = t73313*t71567;
  t75137 = t71415*t74663;
  t75138 = t75126 + t75137;
  t75140 = t71415*t73313;
  t75141 = -1.*t71567*t74663;
  t75142 = t75140 + t75141;
  t75153 = -1.*t73903*t75138;
  t75154 = -1.*t74336*t75142;
  t75155 = t74667 + t75153 + t75154;
  t75158 = t73948*t75138;
  t75159 = t74353*t75142;
  t75160 = t74688 + t75158 + t75159;
  t74711 = t73313*t73820*t74332;
  t74712 = t30418*t71414*t73820*t74650;
  t74725 = -1.*t72317*t73820*t74650;
  t74728 = -1.*t73313*t73820*t74364;
  t75174 = t73903*t75138;
  t75175 = t74336*t75142;
  t75176 = t74716 + t75174 + t75175;
  t75187 = -1.*t75138*t74029;
  t75188 = -1.*t75142*t74368;
  t75189 = t74848 + t75187 + t75188;
  t74859 = -1.*t72233*t73820*t74650;
  t74861 = -1.*t73313*t73820*t74346;
  t74872 = t72317*t73820*t74650;
  t74876 = t73313*t73820*t74364;
  t75204 = -1.*t73948*t75138;
  t75205 = -1.*t74353*t75142;
  t75206 = t74867 + t75204 + t75205;
  t75214 = t75138*t74029;
  t75215 = t75142*t74368;
  t75216 = t74880 + t75214 + t75215;
  t74478 = -1.*t74081*t74117;
  t74479 = t30418*t71414*t74057*t73820;
  t74483 = t74478 + t74479;
  t74492 = -1.*t74081*t74322;
  t74493 = t74057*t72317*t73820;
  t74494 = t74492 + t74493;
  t74485 = -1.*t74081*t74311;
  t74486 = t74057*t72233*t73820;
  t74487 = t74485 + t74486;
  t72442 = -3.e-6*t70307;
  t72674 = -3.e-6*t32283;
  t72678 = t72442 + t72674;
  t72679 = 0.2*t72678;
  t73016 = t72931 + t73004 + t73015;
  t73017 = t72832*t73016;
  t73029 = t73018 + t73019 + t73020;
  t73091 = 3.e-6*t72203*t73029;
  t73097 = t72679 + t73017 + t73091;
  t74382 = -1.*t74081*t74094;
  t74470 = -1.*t74057*t71425*t73820;
  t74472 = t74382 + t74470;
  t73273 = -1.*t71414*t73014;
  t73274 = t72932 + t72973 + t72999 + t73273 + t73000;
  t73275 = t72832*t73274;
  t73281 = -0.2*t72203;
  t73283 = t73018 + t73275 + t73019 + t73281 + t73020;
  t73195 = t72687 + t32283;
  t73210 = 0.2*t73195;
  t73214 = t71414*t73014;
  t73253 = t73211 + t73212 + t73213 + t73214 + t73251;
  t73254 = 3.e-6*t73253*t72203;
  t73260 = t73210 + t72931 + t73254 + t73004 + t73015;
  t73404 = t72317*t73315;
  t73556 = t72233*t73552;
  t73562 = t73404 + t73556;
  t74474 = -1.*t74081*t74107;
  t74475 = t74057*t71425*t73820;
  t74476 = t74474 + t74475;
  t73618 = t73616*t72233;
  t73643 = t30418*t71414*t73631;
  t73644 = t73618 + t73643;
  t73596 = t73587*t72317;
  t73606 = t30418*t71414*t73605;
  t73612 = t73596 + t73606;
  t73661 = t30418*t73660;
  t73663 = t73661 + t73662;
  t73667 = -1.*t71425*t73663;
  t73668 = -1.*t30418*t73660;
  t73670 = t73668 + t73669;
  t73671 = -1.*t71425*t73670;
  t73675 = t73673 + t73674;
  t73676 = -1.*t30418*t73675;
  t73700 = t73674 + t73698;
  t73720 = t30418*t73700;
  t73724 = t73667 + t73671 + t73676 + t73720;
  t73825 = -1.*t73313*t73308;
  t73859 = -1.*t73305*t72233;
  t73860 = t73824 + t73825 + t73858 + t73859;
  t73871 = t72317*t73860;
  t73875 = t72330*t73315;
  t73876 = t72269*t73552;
  t73882 = t73305*t72317;
  t73884 = t73313*t73517;
  t73888 = t73881 + t73882 + t73883 + t73884;
  t73891 = t72233*t73888;
  t73892 = t73871 + t73875 + t73876 + t73891;
  t74496 = t74057*t74332;
  t74497 = -1.*t74081*t74336;
  t74498 = t74496 + t74497;
  t73909 = t30418*t71414*t73305;
  t73910 = t73905 + t73909;
  t73911 = t73910*t72317;
  t73912 = t73587*t72330;
  t73913 = -1.*t71414*t71425*t73605;
  t73921 = -1.*t73305*t72317;
  t73931 = -1.*t73313*t73517;
  t73940 = t73917 + t73921 + t73928 + t73931;
  t73941 = t30418*t71414*t73940;
  t73942 = t73911 + t73912 + t73913 + t73941;
  t74500 = t74057*t74346;
  t74501 = -1.*t74081*t74353;
  t74505 = t74500 + t74501;
  t73950 = t73616*t72269;
  t73992 = -1.*t30418*t71414*t73305;
  t74014 = t73971 + t73992;
  t74015 = t74014*t72233;
  t74017 = t73313*t73308;
  t74019 = t73305*t72233;
  t74020 = t74016 + t74017 + t74018 + t74019;
  t74021 = t30418*t71414*t74020;
  t74022 = -1.*t71414*t71425*t73631;
  t74023 = t73950 + t74015 + t74021 + t74022;
  t74507 = t74057*t74364;
  t74508 = -1.*t74081*t74368;
  t74509 = t74507 + t74508;
  t74380 = 0.026*t72397*t74379;
  t74381 = 0.026*t73295*t74379;
  t74473 = 0.026*t74037*t74472;
  t74477 = 0.026*t74037*t74476;
  t74484 = 0.05186*t74483*t73903;
  t74491 = 0.05186*t74487*t73948;
  t74495 = 0.05186*t74494*t74029;
  t74499 = 0.05186*t71911*t74498;
  t74506 = 0.05186*t72271*t74505;
  t74513 = 0.05186*t72332*t74509;
  t74514 = t74380 + t74381 + t74473 + t74477 + t74484 + t74491 + t74495 + t74499 + t74506 + t74513;
  t74095 = t74057*t74094;
  t74099 = -1.*t71425*t74081*t73820;
  t74103 = t74095 + t74099;
  t74108 = t74057*t74107;
  t74109 = t71425*t74081*t73820;
  t74110 = t74108 + t74109;
  t74333 = t74081*t74332;
  t74337 = t74057*t74336;
  t74338 = t74333 + t74337;
  t74121 = t74057*t74117;
  t74122 = t30418*t71414*t74081*t73820;
  t74123 = t74121 + t74122;
  t74347 = t74081*t74346;
  t74355 = t74057*t74353;
  t74356 = t74347 + t74355;
  t74312 = t74057*t74311;
  t74313 = t72233*t74081*t73820;
  t74314 = t74312 + t74313;
  t74365 = t74081*t74364;
  t74369 = t74057*t74368;
  t74373 = t74365 + t74369;
  t74323 = t74057*t74322;
  t74324 = t72317*t74081*t73820;
  t74325 = t74323 + t74324;
  t74528 = t30418*t73820*t74527;
  t74531 = t73669 + t74529 + t74530;
  t74535 = t71419*t74531;
  t74536 = t74528 + t74535;
  t74541 = t30418*t73820*t74540;
  t74542 = -0.1*t30418*t71425;
  t74545 = 0.05*t30418*t74544*t71425;
  t74590 = t74542 + t74545 + t74566 + t74588 + t74589;
  t74591 = t71419*t74590;
  t74592 = t74541 + t74591;
  t75249 = t74057*t71419;
  t75256 = -1.*t74081*t71567*t73820;
  t75257 = t75249 + t75256;
  t74594 = 0.1*t30418*t71425;
  t74595 = -0.05*t30418*t74544*t71425;
  t74597 = t74594 + t74595 + t74529 + t74596 + t74530;
  t74598 = t30418*t73820*t74597;
  t74599 = t73662 + t74566 + t74589;
  t74600 = t30418*t73820*t74599;
  t74603 = t73673 + t74601 + t74602;
  t74605 = -1.*t71425*t73820*t74603;
  t74606 = 0.05*t73672*t74544;
  t74609 = t73673 + t74606 + t73698 + t74601 + t74607 + t74602;
  t74610 = t71425*t73820*t74609;
  t74611 = t74598 + t74600 + t74605 + t74610;
  t74616 = t71425*t73820*t74540;
  t74633 = t74622 + t74628 + t74632;
  t74634 = t71419*t74633;
  t74635 = t74616 + t74634;
  t74637 = -1.*t71425*t73820*t74527;
  t74638 = -0.05*t73672*t74544;
  t74639 = -0.05*t73679;
  t74641 = t74622 + t74638 + t74639 + t74628 + t74640 + t74632;
  t74642 = t71419*t74641;
  t74643 = t74637 + t74642;
  t74645 = t71414*t71425*t73313;
  t74646 = -1.*t71419*t73313*t73901;
  t74664 = -1.*t30418*t71414*t71419*t74663;
  t74665 = t73971 + t74645 + t74646 + t74647 + t74654 + t74664;
  t74666 = t74346*t74665;
  t74674 = t72233*t73820*t74672;
  t74676 = t71419*t73313*t73946;
  t74678 = t71419*t72233*t74663;
  t74680 = t74016 + t74018 + t74676 + t74677 + t74678 + t74679;
  t74686 = t74332*t74680;
  t74698 = t30418*t71414*t73820*t74694;
  t74700 = t74666 + t74674 + t74686 + t74698;
  t74702 = t74346*t74672;
  t74703 = t74332*t74694;
  t74704 = t74702 + t74703;
  t74706 = -1.*t71414*t71425*t73313;
  t74710 = t71419*t73313*t73901;
  t74713 = t30418*t71414*t71419*t74663;
  t74714 = t73905 + t74706 + t74710 + t74711 + t74712 + t74713;
  t74715 = t74364*t74714;
  t74724 = t72317*t73820*t74718;
  t74726 = -1.*t71419*t72317*t74663;
  t74727 = -1.*t71419*t73313*t74027;
  t74845 = t73917 + t73928 + t74725 + t74726 + t74727 + t74728;
  t74846 = t74332*t74845;
  t74850 = t30418*t71414*t73820*t74849;
  t74852 = t74715 + t74724 + t74846 + t74850;
  t74854 = t74364*t74718;
  t74855 = t74332*t74849;
  t74856 = t74854 + t74855;
  t74858 = -1.*t71419*t73313*t73946;
  t74860 = -1.*t71419*t72233*t74663;
  t74862 = t73824 + t73858 + t74858 + t74859 + t74860 + t74861;
  t74863 = t74364*t74862;
  t74869 = t72317*t73820*t74868;
  t74874 = t71419*t72317*t74663;
  t74875 = t71419*t73313*t74027;
  t74877 = t73881 + t73883 + t74872 + t74874 + t74875 + t74876;
  t74878 = t74346*t74877;
  t74882 = t72233*t73820*t74881;
  t74883 = t74863 + t74869 + t74878 + t74882;
  t74885 = t74364*t74868;
  t74886 = t74346*t74881;
  t74887 = t74885 + t74886;
  t74902 = t74037*t74901;
  t74905 = t74903 + t74904 + t74530;
  t74906 = -1.*t71415*t73820*t74905;
  t74907 = t74902 + t74906;
  t74909 = -0.05*t30418*t71419*t73820;
  t74913 = -1.*t71567*t74912*t73820;
  t74919 = t71415*t74918*t73820;
  t74940 = t74909 + t74913 + t74919;
  t74941 = t73295*t74940;
  t74945 = t74037*t74944;
  t74946 = t73295*t74918;
  t74947 = t74912*t74107;
  t74951 = t74946 + t74947 + t74949 + t74950 + t74588 + t74589;
  t74953 = -1.*t71415*t73820*t74951;
  t74954 = t74941 + t74945 + t74953;
  t74956 = -1.*t73295*t74918;
  t74957 = -1.*t74912*t74107;
  t74958 = t74956 + t74957 + t74903 + t74904 + t74596 + t74530;
  t74959 = t74037*t74958;
  t74960 = t74949 + t74950 + t74589;
  t74962 = t74037*t74960;
  t74963 = -1.*t73295*t74893;
  t74964 = -1.*t74107*t74899;
  t74965 = t74963 + t74964 + t74602;
  t74966 = t72397*t74965;
  t74968 = t74079*t74912;
  t74969 = t74037*t74918;
  t74970 = t72397*t74893;
  t74971 = t74094*t74899;
  t74976 = t74968 + t74969 + t74970 + t74971 + t74607 + t74602;
  t74984 = t73295*t74976;
  t74989 = t74959 + t74962 + t74966 + t74984;
  t75008 = t73295*t74944;
  t75019 = t73295*t74893;
  t75020 = t74107*t74899;
  t75024 = t75019 + t75020 + t74632;
  t75025 = -1.*t71415*t73820*t75024;
  t75026 = t75008 + t75025;
  t75028 = 0.05*t30418*t71419*t73820;
  t75029 = t71567*t74912*t73820;
  t75030 = -1.*t71415*t74918*t73820;
  t75035 = t75028 + t75029 + t75030;
  t75043 = t74037*t75035;
  t75048 = t72397*t74901;
  t75056 = -1.*t74079*t74912;
  t75067 = -1.*t74037*t74918;
  t75078 = -1.*t72397*t74893;
  t75079 = -1.*t74094*t74899;
  t75080 = t75056 + t75067 + t75078 + t75079 + t74640 + t74632;
  t75081 = -1.*t71415*t73820*t75080;
  t75083 = t75043 + t75048 + t75081;
  t75088 = -1.*t75087*t73903;
  t75115 = -1.*t75107*t74336;
  t75139 = -1.*t71911*t75138;
  t75143 = -1.*t74117*t75142;
  t75144 = t74647 + t74654 + t75088 + t75115 + t75139 + t75143;
  t75145 = t73948*t75144;
  t75147 = t75087*t73948;
  t75148 = t75107*t74353;
  t75149 = t72271*t75138;
  t75150 = t74311*t75142;
  t75151 = t74677 + t74679 + t75147 + t75148 + t75149 + t75150;
  t75152 = t73903*t75151;
  t75157 = t72271*t75155;
  t75161 = t71911*t75160;
  t75162 = t75145 + t75152 + t75157 + t75161;
  t75164 = t73948*t75155;
  t75165 = t73903*t75160;
  t75166 = t75164 + t75165;
  t75168 = t75087*t73903;
  t75169 = t75107*t74336;
  t75170 = t71911*t75138;
  t75171 = t74117*t75142;
  t75172 = t74711 + t74712 + t75168 + t75169 + t75170 + t75171;
  t75173 = t74029*t75172;
  t75178 = t72332*t75176;
  t75179 = -1.*t72332*t75138;
  t75180 = -1.*t74322*t75142;
  t75182 = -1.*t75087*t74029;
  t75184 = -1.*t75107*t74368;
  t75185 = t74725 + t74728 + t75179 + t75180 + t75182 + t75184;
  t75186 = t73903*t75185;
  t75190 = t71911*t75189;
  t75191 = t75173 + t75178 + t75186 + t75190;
  t75194 = t74029*t75176;
  t75195 = t73903*t75189;
  t75196 = t75194 + t75195;
  t75198 = -1.*t75087*t73948;
  t75199 = -1.*t75107*t74353;
  t75200 = -1.*t72271*t75138;
  t75201 = -1.*t74311*t75142;
  t75202 = t74859 + t74861 + t75198 + t75199 + t75200 + t75201;
  t75203 = t74029*t75202;
  t75207 = t72332*t75206;
  t75208 = t72332*t75138;
  t75209 = t74322*t75142;
  t75210 = t75087*t74029;
  t75211 = t75107*t74368;
  t75212 = t74872 + t74876 + t75208 + t75209 + t75210 + t75211;
  t75213 = t73948*t75212;
  t75217 = t72271*t75216;
  t75218 = t75203 + t75207 + t75213 + t75217;
  t75221 = t74029*t75206;
  t75222 = t73948*t75216;
  t75223 = t75221 + t75222;
  t74084 = 0.026*t72397*t74083;
  t74085 = 0.026*t73295*t74083;
  t74104 = 0.026*t74037*t74103;
  t74111 = 0.026*t74037*t74110;
  t74124 = 0.05186*t74123*t73903;
  t74315 = 0.05186*t74314*t73948;
  t74326 = 0.05186*t74325*t74029;
  t74342 = 0.05186*t71911*t74338;
  t74357 = 0.05186*t72271*t74356;
  t74374 = 0.05186*t72332*t74373;
  t74375 = t74084 + t74085 + t74104 + t74111 + t74124 + t74315 + t74326 + t74342 + t74357 + t74374;
  t75322 = 0.026*t74472*t74083;
  t75323 = 0.026*t74476*t74083;
  t75324 = 0.026*t74379*t74103;
  t75325 = 0.026*t74379*t74110;
  t75326 = 0.05186*t74483*t74338;
  t75327 = 0.05186*t74123*t74498;
  t75328 = 0.05186*t74487*t74356;
  t75329 = 0.05186*t74314*t74505;
  t75330 = 0.05186*t74494*t74373;
  t75331 = 0.05186*t74325*t74509;
  t75332 = t75322 + t75323 + t75324 + t75325 + t75326 + t75327 + t75328 + t75329 + t75330 + t75331;
  t75381 = t71419*t74081;
  t75382 = t74057*t71567*t73820;
  t75383 = t75381 + t75382;
  t74908 = 0.026*t74037*t74907;
  t74955 = 0.026*t74037*t74954;
  t74997 = -0.026*t71415*t73820*t74989;
  t75027 = 0.026*t72397*t75026;
  t75084 = 0.026*t73295*t75083;
  t75163 = 0.05186*t74029*t75162;
  t75167 = 0.05186*t72332*t75166;
  t75192 = 0.05186*t73948*t75191;
  t75197 = 0.05186*t72271*t75196;
  t75220 = 0.05186*t73903*t75218;
  t75224 = 0.05186*t71911*t75223;
  t75225 = t74908 + t74955 + t74997 + t75027 + t75084 + t75163 + t75167 + t75192 + t75197 + t75220 + t75224;
  t75348 = 0.026*t74379*t74907;
  t75349 = 0.026*t74379*t74954;
  t75350 = 0.026*t75257*t74989;
  t75351 = 0.026*t74472*t75026;
  t75352 = 0.026*t74476*t75083;
  t75353 = 0.05186*t74509*t75162;
  t75354 = 0.05186*t74494*t75166;
  t75355 = 0.05186*t74505*t75191;
  t75356 = 0.05186*t74487*t75196;
  t75357 = 0.05186*t74498*t75218;
  t75358 = 0.05186*t74483*t75223;
  t75359 = t75348 + t75349 + t75350 + t75351 + t75352 + t75353 + t75354 + t75355 + t75356 + t75357 + t75358;
  t75417 = 0.026*t74083*t74907;
  t75418 = 0.026*t74083*t74954;
  t75419 = 0.026*t75383*t74989;
  t75420 = 0.026*t74103*t75026;
  t75421 = 0.026*t74110*t75083;
  t75422 = 0.05186*t74373*t75162;
  t75424 = 0.05186*t74325*t75166;
  t75425 = 0.05186*t74356*t75191;
  t75426 = 0.05186*t74314*t75196;
  t75427 = 0.05186*t74338*t75218;
  t75428 = 0.05186*t74123*t75223;
  t75429 = t75417 + t75418 + t75419 + t75420 + t75421 + t75422 + t75424 + t75425 + t75426 + t75427 + t75428;
  t75470 = t73295*t74960;
  t75472 = t74037*t74965;
  t75473 = t75470 + t75472;
  t75544 = t71425*t73820*t74599;
  t75545 = t30418*t73820*t74603;
  t75546 = t75544 + t75545;
  t75482 = t30418*t73663;
  t75483 = -1.*t71425*t73675;
  t75493 = t75482 + t75483;
  t74537 = 0.026*t74037*t74536;
  t74593 = 0.026*t74037*t74592;
  t74612 = -0.026*t71415*t73820*t74611;
  t74636 = 0.026*t72397*t74635;
  t74644 = 0.026*t73295*t74643;
  t74701 = 0.05186*t74029*t74700;
  t74705 = 0.05186*t72332*t74704;
  t74853 = 0.05186*t73948*t74852;
  t74857 = 0.05186*t72271*t74856;
  t74884 = 0.05186*t73903*t74883;
  t74888 = 0.05186*t71911*t74887;
  t74889 = t74537 + t74593 + t74612 + t74636 + t74644 + t74701 + t74705 + t74853 + t74857 + t74884 + t74888;
  t75334 = 0.026*t74379*t74536;
  t75335 = 0.026*t74379*t74592;
  t75336 = 0.026*t75257*t74611;
  t75337 = 0.026*t74472*t74635;
  t75338 = 0.026*t74476*t74643;
  t75340 = 0.05186*t74509*t74700;
  t75341 = 0.05186*t74494*t74704;
  t75342 = 0.05186*t74505*t74852;
  t75343 = 0.05186*t74487*t74856;
  t75344 = 0.05186*t74498*t74883;
  t75345 = 0.05186*t74483*t74887;
  t75346 = t75334 + t75335 + t75336 + t75337 + t75338 + t75340 + t75341 + t75342 + t75343 + t75344 + t75345;
  t75401 = 0.026*t74083*t74536;
  t75402 = 0.026*t74083*t74592;
  t75404 = 0.026*t75383*t74611;
  t75405 = 0.026*t74103*t74635;
  t75407 = 0.026*t74110*t74643;
  t75408 = 0.05186*t74373*t74700;
  t75409 = 0.05186*t74325*t74704;
  t75410 = 0.05186*t74356*t74852;
  t75411 = 0.05186*t74314*t74856;
  t75413 = 0.05186*t74338*t74883;
  t75414 = 0.05186*t74123*t74887;
  t75415 = t75401 + t75402 + t75404 + t75405 + t75407 + t75408 + t75409 + t75410 + t75411 + t75413 + t75414;
  t75533 = 0.000014*t30418*t72397*t73820;
  t75535 = 0.000056*t30418*t73295*t73820;
  t75536 = 0.000042*t71425*t74037*t73820;
  t75537 = 0.000245*t71911*t74332;
  t75539 = 0.000245*t72271*t74346;
  t75540 = 2.e-6*t72332*t74364;
  t75541 = 0.000245*t30418*t71414*t73820*t73903;
  t75542 = 0.000245*t72233*t73820*t73948;
  t75543 = 2.e-6*t72317*t73820*t74029;
  t75547 = 0.026*t75546*t74989;
  t75548 = 0.026*t75473*t74611;
  t75549 = 0.026*t74592*t75026;
  t75550 = 0.026*t74954*t74635;
  t75551 = 0.026*t74536*t75083;
  t75552 = 0.026*t74907*t74643;
  t75553 = 0.05186*t74704*t75162;
  t75554 = 0.05186*t74700*t75166;
  t75555 = 0.05186*t74856*t75191;
  t75558 = 0.05186*t74852*t75196;
  t75559 = 0.05186*t74887*t75218;
  t75560 = 0.05186*t74883*t75223;
  t75561 = t75533 + t75535 + t75536 + t75537 + t75539 + t75540 + t75541 + t75542 + t75543 + t75547 + t75548 + t75549 + t75550 + t75551 + t75552 + t75553 + t75554 + t75555 + t75558 + t75559 + t75560;
  t75596 = Power(t71414,2);
  t73292 = 0.0026*t30418*t72397;
  t73297 = 0.0026*t30418*t73295;
  t73563 = 0.05186*t73562*t71911;
  t73613 = 0.05186*t73612*t72271;
  t73654 = 0.05186*t73644*t72332;
  t73821 = -0.026*t71415*t73724*t73820;
  t73904 = 0.05186*t73892*t73903;
  t73949 = 0.05186*t73942*t73948;
  t74030 = 0.05186*t74023*t74029;
  t74031 = t73292 + t73297 + t73563 + t73613 + t73654 + t73821 + t73904 + t73949 + t74030;
  t75376 = 0.05186*t73562*t74123;
  t75377 = 0.0026*t30418*t74103;
  t75378 = 0.0026*t30418*t74110;
  t75379 = 0.05186*t73644*t74325;
  t75380 = 0.05186*t73612*t74314;
  t75384 = 0.026*t73724*t75383;
  t75385 = 0.05186*t73892*t74338;
  t75386 = 0.05186*t73942*t74356;
  t75387 = 0.05186*t74023*t74373;
  t75388 = t75376 + t75377 + t75378 + t75379 + t75380 + t75384 + t75385 + t75386 + t75387;
  t75240 = 0.05186*t73562*t74483;
  t75241 = 0.0026*t30418*t74472;
  t75242 = 0.0026*t30418*t74476;
  t75243 = 0.05186*t73644*t74494;
  t75244 = 0.05186*t73612*t74487;
  t75293 = 0.026*t73724*t75257;
  t75294 = 0.05186*t73892*t74498;
  t75301 = 0.05186*t73942*t74505;
  t75309 = 0.05186*t74023*t74509;
  t75310 = t75240 + t75241 + t75242 + t75243 + t75244 + t75293 + t75294 + t75301 + t75309;
  t75595 = 0.000042*t73672*t73820;
  t75597 = 0.000245*t73672*t75596*t73820;
  t75598 = -0.000042*t73679*t73820;
  t75600 = Power(t72317,2);
  t75601 = 2.e-6*t75600*t73820;
  t75602 = Power(t72233,2);
  t75603 = 0.000245*t75602*t73820;
  t75604 = -0.000245*t71414*t71425*t74332;
  t75605 = 0.000245*t72269*t74346;
  t75606 = 2.e-6*t72330*t74364;
  t75607 = 0.0026*t30418*t74536;
  t75608 = 0.0026*t30418*t74592;
  t75609 = 0.026*t73724*t75546;
  t75610 = 0.026*t75493*t74611;
  t75611 = -0.0026*t71425*t74635;
  t75613 = 0.0026*t71425*t74643;
  t75614 = 0.05186*t73644*t74700;
  t75615 = 0.05186*t74023*t74704;
  t75616 = 0.05186*t73612*t74852;
  t75617 = 0.05186*t73942*t74856;
  t75618 = 0.05186*t73562*t74883;
  t75619 = 0.05186*t73892*t74887;
  t75627 = t75595 + t75597 + t75598 + t75601 + t75603 + t75604 + t75605 + t75606 + t75607 + t75608 + t75609 + t75610 + t75611 + t75613 + t75614 + t75615 + t75616 + t75617 + t75618 + t75619;
  t75458 = -0.000014*t71425*t72397;
  t75459 = -0.000056*t71425*t73295;
  t75460 = 0.000042*t30418*t74037;
  t75461 = 0.000245*t30418*t71414*t71911;
  t75462 = 0.000245*t72233*t72271;
  t75464 = 2.e-6*t72317*t72332;
  t75465 = -0.000245*t71414*t71425*t73903;
  t75466 = 0.000245*t72269*t73948;
  t75467 = 2.e-6*t72330*t74029;
  t75468 = 0.0026*t30418*t74907;
  t75469 = 0.0026*t30418*t74954;
  t75479 = 0.026*t73724*t75473;
  t75496 = 0.026*t75493*t74989;
  t75497 = -0.0026*t71425*t75026;
  t75505 = 0.0026*t71425*t75083;
  t75506 = 0.05186*t73644*t75162;
  t75507 = 0.05186*t74023*t75166;
  t75511 = 0.05186*t73612*t75191;
  t75524 = 0.05186*t73942*t75196;
  t75525 = 0.05186*t73562*t75218;
  t75526 = 0.05186*t73892*t75223;
  t75527 = t75458 + t75459 + t75460 + t75461 + t75462 + t75464 + t75465 + t75466 + t75467 + t75468 + t75469 + t75479 + t75496 + t75497 + t75505 + t75506 + t75507 + t75511 + t75524 + t75525 + t75526;
  t75653 = -0.00013*t71425;
  t75654 = 0.000245*t71414*t71425;
  t75656 = 0.000245*t72832*t72269;
  t75657 = 6.e-12*t72203*t72330;
  t75658 = 0.05186*t73283*t74023;
  t75663 = 0.05186*t73260*t73942;
  t75664 = 0.05186*t73097*t73892;
  t75665 = t75653 + t75654 + t75656 + t75657 + t75658 + t75663 + t75664;
  t72423 = 0.0013*t72397;
  t73098 = 0.05186*t73097*t71911;
  t73261 = 0.05186*t73260*t72271;
  t73284 = 0.05186*t73283*t72332;
  t73289 = t72423 + t73098 + t73261 + t73284;
  t75234 = 0.05186*t73097*t74483;
  t75235 = 0.0013*t74472;
  t75236 = 0.05186*t73283*t74494;
  t75237 = 0.05186*t73260*t74487;
  t75238 = t75234 + t75235 + t75236 + t75237;
  t75370 = 0.05186*t73097*t74123;
  t75371 = 0.0013*t74103;
  t75372 = 0.05186*t73283*t74325;
  t75373 = 0.05186*t73260*t74314;
  t75374 = t75370 + t75371 + t75372 + t75373;
  t75586 = -0.000245*t30418*t71414*t73820;
  t75587 = 6.e-12*t72203*t72317*t73820;
  t75588 = 0.000245*t72832*t72233*t73820;
  t75589 = 0.0013*t74592;
  t75590 = 0.05186*t73283*t74700;
  t75591 = 0.05186*t73260*t74852;
  t75592 = 0.05186*t73097*t74883;
  t75593 = t75586 + t75587 + t75588 + t75589 + t75590 + t75591 + t75592;
  t75443 = -0.000245*t71911;
  t75446 = 0.000245*t72832*t72271;
  t75447 = 6.e-12*t72203*t72332;
  t75448 = 0.0013*t74954;
  t75449 = 0.05186*t73283*t75162;
  t75451 = 0.05186*t73260*t75191;
  t75452 = 0.05186*t73097*t75218;
  t75455 = t75443 + t75446 + t75447 + t75448 + t75449 + t75451 + t75452;
  t75647 = -0.000245000000002205*t71414*t71425;
  t75648 = 0.005186015558*t74023;
  t75649 = -6.2232e-14*t73942;
  t75650 = -2.0744e-8*t73892;
  t75651 = t75647 + t75648 + t75649 + t75650;
  t72165 = -2.0744e-8*t71911;
  t72283 = -6.2232e-14*t72271;
  t72342 = 0.005186015558*t72332;
  t72344 = t72165 + t72283 + t72342;
  t75229 = -2.0744e-8*t74483;
  t75230 = 0.005186015558*t74494;
  t75231 = -6.2232e-14*t74487;
  t75232 = t75229 + t75230 + t75231;
  t75365 = -2.0744e-8*t74123;
  t75366 = 0.005186015558*t74325;
  t75367 = -6.2232e-14*t74314;
  t75368 = t75365 + t75366 + t75367;
  t75579 = 0.000245000000002205*t30418*t71414*t73820;
  t75581 = 0.005186015558*t74700;
  t75582 = -6.2232e-14*t74852;
  t75583 = -2.0744e-8*t74883;
  t75584 = t75579 + t75581 + t75582 + t75583;
  t75437 = 0.000245000000002205*t71911;
  t75438 = 0.005186015558*t75162;
  t75439 = -6.2232e-14*t75191;
  t75440 = -2.0744e-8*t75218;
  t75441 = t75437 + t75438 + t75439 + t75440;
  p_output1[0]=var2[18]*(-0.5*(0.10372*t71911*t73903 + 0.10372*t72271*t73948 + 0.10372*t72332*t74029 + 0.052*t72397*t74037 + 0.052*t73295*t74037)*var2[0] - 0.5*t74514*var2[1] - 0.5*t74375*var2[2] - 0.5*t75225*var2[3] - 0.5*t74889*var2[4] - 0.5*t74031*var2[5] - 0.5*t73289*var2[18] - 0.5*t72344*var2[20]);
  p_output1[1]=var2[18]*(-0.5*t74514*var2[0] - 0.5*(0.052*t74379*t74472 + 0.052*t74379*t74476 + 0.10372*t74483*t74498 + 0.10372*t74487*t74505 + 0.10372*t74494*t74509)*var2[1] - 0.5*t75332*var2[2] - 0.5*t75359*var2[3] - 0.5*t75346*var2[4] - 0.5*t75310*var2[5] - 0.5*t75238*var2[18] - 0.5*t75232*var2[20]);
  p_output1[2]=var2[18]*(-0.5*t74375*var2[0] - 0.5*t75332*var2[1] - 0.5*(0.052*t74083*t74103 + 0.052*t74083*t74110 + 0.10372*t74123*t74338 + 0.10372*t74314*t74356 + 0.10372*t74325*t74373)*var2[2] - 0.5*t75429*var2[3] - 0.5*t75415*var2[4] - 0.5*t75388*var2[5] - 0.5*t75374*var2[18] - 0.5*t75368*var2[20]);
  p_output1[3]=var2[18]*(-0.5*t75225*var2[0] - 0.5*t75359*var2[1] - 0.5*t75429*var2[2] - 0.5*(0.00049*t71911*t73903 + 0.00049*t72271*t73948 + 4.e-6*t72332*t74029 + 0.000028*t72397*t74037 + 0.000112*t73295*t74037 + 0.052*t74954*t75026 + 0.052*t74907*t75083 + 0.10372*t75162*t75166 + 0.10372*t75191*t75196 + 0.10372*t75218*t75223 + 0.052*t74989*t75473)*var2[3] - 0.5*t75561*var2[4] - 0.5*t75527*var2[5] - 0.5*t75455*var2[18] - 0.5*t75441*var2[20]);
  p_output1[4]=var2[18]*(-0.5*t74889*var2[0] - 0.5*t75346*var2[1] - 0.5*t75415*var2[2] - 0.5*t75561*var2[3] - 0.5*(0.00049*t30418*t71414*t73820*t74332 + 0.00049*t72233*t73820*t74346 + 4.e-6*t72317*t73820*t74364 + 0.000084*t30418*t71425*t74587 + 0.052*t74592*t74635 + 0.052*t74536*t74643 + 0.10372*t74700*t74704 + 0.10372*t74852*t74856 + 0.10372*t74883*t74887 + 0.052*t74611*t75546)*var2[4] - 0.5*t75627*var2[5] - 0.5*t75593*var2[18] - 0.5*t75584*var2[20]);
  p_output1[5]=var2[18]*(-0.5*t74031*var2[0] - 0.5*t75310*var2[1] - 0.5*t75388*var2[2] - 0.5*t75527*var2[3] - 0.5*t75627*var2[4] - 0.5*(-0.000084*t30418*t71425 + 0.00049*t72233*t72269 + 4.e-6*t72317*t72330 + 0.10372*t73562*t73892 + 0.10372*t73612*t73942 + 0.10372*t73644*t74023 + 0.052*t73724*t75493 - 0.00049*t30418*t71425*t75596)*var2[5] - 0.5*t75665*var2[18] - 0.5*t75651*var2[20]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=(-0.5*t73289*var2[0] - 0.5*t75238*var2[1] - 0.5*t75374*var2[2] - 0.5*t75455*var2[3] - 0.5*t75593*var2[4] - 0.5*t75665*var2[5])*var2[18];
  p_output1[19]=0;
  p_output1[20]=(-0.5*t72344*var2[0] - 0.5*t75232*var2[1] - 0.5*t75368*var2[2] - 0.5*t75441*var2[3] - 0.5*t75584*var2[4] - 0.5*t75651*var2[5])*var2[18];
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec19_minitaur.hh"

namespace FrontStance
{

void Ce2_vec19_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
