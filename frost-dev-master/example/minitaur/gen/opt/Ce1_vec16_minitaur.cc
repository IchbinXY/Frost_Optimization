/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:09:00 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t694;
  double t2669;
  double t2758;
  double t632;
  double t4354;
  double t5232;
  double t4770;
  double t6185;
  double t6199;
  double t6377;
  double t6766;
  double t7091;
  double t7185;
  double t7209;
  double t7331;
  double t7701;
  double t7877;
  double t6739;
  double t12798;
  double t12934;
  double t7307;
  double t12446;
  double t7888;
  double t9532;
  double t12486;
  double t18629;
  double t20066;
  double t20828;
  double t22034;
  double t7912;
  double t14022;
  double t14507;
  double t15049;
  double t17839;
  double t18618;
  double t19164;
  double t19633;
  double t19909;
  double t19980;
  double t12145;
  double t22613;
  double t23138;
  double t22561;
  double t23179;
  double t23464;
  double t23644;
  double t23646;
  double t24258;
  double t12394;
  double t12422;
  double t12566;
  double t12592;
  double t12988;
  double t13078;
  double t24768;
  double t28046;
  double t28179;
  double t29808;
  double t8299;
  double t8524;
  double t13175;
  double t22193;
  double t22428;
  double t24259;
  double t24552;
  double t24692;
  double t24797;
  double t24971;
  double t26105;
  double t29915;
  double t30466;
  double t2814;
  double t3727;
  double t32320;
  double t32494;
  double t32672;
  double t7226;
  double t34148;
  double t34173;
  double t34338;
  double t34368;
  double t34387;
  double t34436;
  double t34553;
  double t34633;
  double t42174;
  double t45317;
  double t45621;
  double t45631;
  double t48539;
  double t48540;
  double t48582;
  double t48798;
  double t40377;
  double t41589;
  double t41832;
  double t42061;
  double t45725;
  double t48971;
  double t49006;
  double t49020;
  double t49176;
  double t49197;
  double t49202;
  double t50409;
  double t50190;
  double t50739;
  double t50778;
  double t50206;
  double t50330;
  double t50455;
  double t50493;
  double t50540;
  double t50560;
  double t50745;
  double t50761;
  double t50799;
  double t50844;
  double t50848;
  double t50878;
  double t51373;
  double t51522;
  double t51418;
  double t51523;
  double t51526;
  double t51538;
  double t51543;
  double t51544;
  double t51566;
  double t51570;
  double t51590;
  double t51602;
  double t51605;
  double t51619;
  double t51405;
  double t51446;
  double t51457;
  double t51463;
  double t51490;
  double t51497;
  double t51482;
  double t51504;
  double t51559;
  double t51683;
  double t51691;
  double t51692;
  double t51704;
  double t51705;
  double t51718;
  double t51724;
  double t51835;
  double t51849;
  double t51850;
  double t51861;
  double t51892;
  double t51893;
  double t51945;
  double t50641;
  double t50657;
  double t50960;
  double t32943;
  double t32990;
  double t33011;
  double t33053;
  double t32469;
  double t32550;
  double t32704;
  double t32730;
  double t51287;
  double t53528;
  double t53521;
  double t53530;
  double t53552;
  double t53571;
  double t53602;
  double t53647;
  double t53652;
  double t53894;
  double t54152;
  double t54174;
  double t54235;
  double t54410;
  double t54472;
  double t54535;
  double t54543;
  double t54572;
  double t38265;
  double t38543;
  double t38546;
  double t38964;
  double t36419;
  double t36462;
  double t36526;
  double t38236;
  double t33381;
  double t33386;
  double t34370;
  double t35834;
  double t35877;
  double t36159;
  double t36177;
  double t36193;
  double t36345;
  double t7288;
  double t7292;
  double t24559;
  double t30467;
  double t30802;
  double t31308;
  double t31693;
  double t31837;
  double t32277;
  double t58233;
  double t58238;
  double t58247;
  double t58251;
  double t58257;
  double t58266;
  double t58267;
  double t58275;
  double t58298;
  double t58397;
  double t58436;
  double t58462;
  double t58465;
  double t58487;
  double t49388;
  double t49396;
  double t49424;
  double t49429;
  double t49270;
  double t49299;
  double t49303;
  double t49306;
  double t4722;
  double t4738;
  double t3729;
  double t3811;
  double t3943;
  double t52654;
  double t52677;
  double t52679;
  double t52685;
  double t52737;
  double t52771;
  double t52861;
  double t54946;
  double t54952;
  double t55036;
  double t55073;
  double t55126;
  double t55127;
  double t55417;
  double t58860;
  double t58862;
  double t58905;
  double t58913;
  double t58928;
  double t58929;
  double t58932;
  double t59374;
  double t59390;
  double t59394;
  double t60664;
  double t59514;
  double t59516;
  double t59524;
  double t4402;
  double t4868;
  double t4894;
  double t60791;
  double t5261;
  double t5264;
  double t5275;
  double t32863;
  double t33056;
  double t33057;
  double t38243;
  double t39129;
  double t39331;
  double t49363;
  double t49435;
  double t49458;
  double t59126;
  double t59395;
  double t59444;
  double t59504;
  double t59546;
  double t59594;
  double t59607;
  double t59609;
  double t59628;
  double t59662;
  double t59666;
  double t59690;
  double t59702;
  double t59722;
  double t59790;
  double t51072;
  double t51080;
  double t51090;
  double t51110;
  double t50967;
  double t51025;
  double t51029;
  double t51048;
  double t50594;
  double t50809;
  double t50885;
  double t50953;
  double t51057;
  double t51112;
  double t51124;
  double t51305;
  double t51354;
  double t51364;
  double t51753;
  double t51756;
  double t51980;
  double t52007;
  double t52035;
  double t52060;
  double t52064;
  double t52428;
  double t52443;
  double t52546;
  double t52637;
  double t60973;
  double t60974;
  double t60985;
  double t53447;
  double t53484;
  double t53507;
  double t54167;
  double t54639;
  double t54662;
  double t54668;
  double t54682;
  double t54851;
  double t54889;
  double t54891;
  double t54920;
  double t54944;
  double t61057;
  double t61068;
  double t61072;
  double t55781;
  double t55783;
  double t55784;
  double t55787;
  double t55590;
  double t55743;
  double t55764;
  double t55776;
  double t55516;
  double t55572;
  double t55577;
  double t55578;
  double t55778;
  double t55793;
  double t55795;
  double t57382;
  double t57447;
  double t57500;
  double t57590;
  double t56540;
  double t56604;
  double t56761;
  double t56823;
  double t55819;
  double t56054;
  double t56159;
  double t56182;
  double t56889;
  double t57687;
  double t57694;
  double t57875;
  double t57992;
  double t57996;
  double t58000;
  double t58213;
  double t58268;
  double t58272;
  double t58489;
  double t58570;
  double t58592;
  double t58629;
  double t58634;
  double t58808;
  double t58853;
  double t58854;
  double t61099;
  double t61119;
  double t61127;
  double t59823;
  double t59878;
  double t59886;
  double t59893;
  double t59896;
  double t59897;
  double t60017;
  double t60018;
  double t60020;
  double t60068;
  double t59993;
  double t59996;
  double t60001;
  double t60002;
  double t59929;
  double t59968;
  double t59969;
  double t60014;
  double t60069;
  double t60081;
  double t60137;
  double t60144;
  double t60158;
  double t60196;
  double t60116;
  double t60117;
  double t60120;
  double t60125;
  double t60109;
  double t60111;
  double t60113;
  double t60128;
  double t60200;
  double t60213;
  double t60328;
  double t60329;
  double t60333;
  double t60336;
  double t60263;
  double t60273;
  double t60283;
  double t60324;
  double t60242;
  double t60244;
  double t60249;
  double t60325;
  double t60456;
  double t60461;
  double t60665;
  double t60674;
  double t60689;
  double t60692;
  double t60694;
  double t60699;
  double t60703;
  double t60710;
  double t60727;
  double t60732;
  double t60734;
  double t60735;
  double t60746;
  double t60750;
  double t60781;
  double t61229;
  double t61231;
  double t61236;
  double t61239;
  double t61240;
  double t61244;
  double t61270;
  double t61272;
  double t61274;
  double t61286;
  double t61289;
  double t61290;
  double t61307;
  double t61308;
  double t61309;
  double t61311;
  double t61315;
  double t61316;
  double t60897;
  double t60907;
  double t60915;
  double t60930;
  double t60936;
  double t60942;
  double t61250;
  double t61255;
  double t61260;
  double t61263;
  double t61265;
  double t61266;
  double t61326;
  double t61327;
  double t61332;
  double t61363;
  double t61364;
  double t61381;
  double t61388;
  double t61391;
  double t61402;
  double t61419;
  double t61424;
  double t61436;
  double t61441;
  double t61443;
  double t61481;
  double t61484;
  double t61490;
  double t61514;
  double t61516;
  double t61525;
  double t61577;
  double t61578;
  double t61585;
  double t61618;
  double t61619;
  double t61622;
  double t61691;
  double t61700;
  double t61716;
  double t61718;
  double t61738;
  double t61741;
  double t62459;
  double t62447;
  double t62453;
  double t62578;
  double t62582;
  double t62590;
  double t62606;
  double t62497;
  double t62500;
  double t62519;
  double t62540;
  double t62549;
  double t62661;
  double t62700;
  double t62711;
  double t62760;
  double t62761;
  double t62775;
  double t62780;
  double t62787;
  double t62565;
  double t62610;
  double t62652;
  double t59806;
  double t62836;
  double t62841;
  double t62846;
  double t62765;
  double t62794;
  double t62797;
  double t62805;
  double t62808;
  double t62813;
  double t62849;
  double t62853;
  double t62490;
  double t62491;
  double t62494;
  double t62456;
  double t62457;
  double t62877;
  double t62879;
  double t62917;
  double t62918;
  double t62919;
  double t55104;
  double t55452;
  double t55456;
  double t62984;
  double t62985;
  double t62986;
  double t62987;
  double t62988;
  double t62972;
  double t62973;
  double t62974;
  double t62975;
  double t62981;
  double t52734;
  double t53191;
  double t53226;
  double t63159;
  double t63160;
  double t63161;
  double t63118;
  double t63151;
  double t63152;
  double t63165;
  double t63166;
  double t63167;
  double t63168;
  double t63169;
  double t62982;
  double t63079;
  double t63085;
  double t63170;
  double t63171;
  double t63172;
  double t63193;
  double t63195;
  double t63206;
  double t58921;
  double t58941;
  double t59033;
  double t62464;
  double t62466;
  double t62471;
  double t62472;
  double t62476;
  double t62477;
  double t62482;
  double t62654;
  double t62802;
  double t62819;
  double t62822;
  double t63555;
  double t63560;
  double t63561;
  double t62897;
  double t62901;
  double t62902;
  double t62905;
  double t62910;
  double t62912;
  double t62914;
  double t62915;
  double t62957;
  double t62958;
  double t62960;
  double t62967;
  double t63249;
  double t63251;
  double t63252;
  double t63253;
  double t63643;
  double t63645;
  double t63647;
  double t63255;
  double t63257;
  double t63258;
  double t63259;
  double t63313;
  double t63318;
  double t63322;
  double t63323;
  double t63367;
  double t63375;
  double t63381;
  double t63383;
  double t63454;
  double t63457;
  double t63458;
  double t63466;
  double t63516;
  double t63520;
  double t63521;
  double t63523;
  double t50966;
  double t51129;
  double t51159;
  double t64139;
  double t55589;
  double t55796;
  double t55799;
  double t56422;
  double t57739;
  double t57775;
  double t64378;
  double t64382;
  double t64383;
  double t64384;
  double t64355;
  double t64357;
  double t64363;
  double t64370;
  double t64401;
  double t64406;
  double t64408;
  double t64410;
  double t64425;
  double t64426;
  double t64427;
  double t64376;
  double t64386;
  double t64387;
  double t64417;
  double t64430;
  double t64432;
  double t64438;
  double t64444;
  double t64446;
  double t59970;
  double t60090;
  double t60094;
  double t60115;
  double t60221;
  double t60235;
  double t60252;
  double t60462;
  double t60463;
  double t64702;
  double t64704;
  double t64708;
  double t64689;
  double t64691;
  double t64696;
  double t64713;
  double t64716;
  double t64717;
  double t64727;
  double t64729;
  double t64732;
  double t59887;
  double t59888;
  double t64699;
  double t64710;
  double t64711;
  double t64722;
  double t64733;
  double t64738;
  double t64741;
  double t64750;
  double t64752;
  double t59892;
  double t59915;
  double t59926;
  double t64955;
  double t64957;
  double t64958;
  double t64959;
  double t64960;
  double t64947;
  double t64950;
  double t64951;
  double t64952;
  double t64953;
  double t64967;
  double t64969;
  double t64970;
  double t64971;
  double t64974;
  double t64976;
  double t64978;
  double t64954;
  double t64961;
  double t64962;
  double t64972;
  double t64982;
  double t64983;
  double t64987;
  double t64988;
  double t64989;
  double t64117;
  double t64153;
  double t64199;
  double t64201;
  double t64277;
  double t64283;
  double t64288;
  double t64297;
  double t65202;
  double t65209;
  double t65210;
  double t65216;
  double t65217;
  double t65221;
  double t64388;
  double t64394;
  double t64463;
  double t64466;
  double t65401;
  double t65402;
  double t65410;
  double t64510;
  double t64517;
  double t64573;
  double t64575;
  double t65424;
  double t65425;
  double t65426;
  double t65453;
  double t65455;
  double t65457;
  double t64624;
  double t64626;
  double t64638;
  double t64640;
  double t65460;
  double t65461;
  double t65462;
  double t62830;
  double t62831;
  double t62881;
  double t62885;
  double t62931;
  double t62932;
  double t62945;
  double t62946;
  double t63113;
  double t63158;
  double t63224;
  double t63225;
  double t63292;
  double t63294;
  double t63327;
  double t63339;
  double t63412;
  double t63414;
  double t63471;
  double t63473;
  double t64712;
  double t65537;
  double t65539;
  double t64818;
  double t64825;
  double t64902;
  double t65505;
  double t65507;
  double t64925;
  double t64927;
  double t64964;
  double t64966;
  double t65002;
  double t65004;
  double t65027;
  double t65028;
  double t65040;
  double t65041;
  double t65059;
  double t65061;
  double t65100;
  double t65101;
  double t65788;
  double t65789;
  double t65800;
  double t65801;
  double t65825;
  double t65827;
  double t65846;
  double t65851;
  double t65877;
  double t65881;
  double t65894;
  double t65897;
  double t66043;
  double t66048;
  double t66049;
  double t66090;
  double t66111;
  double t66113;
  double t65258;
  double t65263;
  double t65311;
  double t65314;
  double t66119;
  double t66120;
  double t66121;
  double t65432;
  double t65433;
  double t65438;
  double t65439;
  double t66135;
  double t66136;
  double t66140;
  double t66169;
  double t66170;
  double t66172;
  double t65469;
  double t65470;
  double t65477;
  double t65481;
  double t66179;
  double t66186;
  double t66191;
  t694 = Cos(var1[15]);
  t2669 = -1.*t694;
  t2758 = 1. + t2669;
  t632 = Cos(var1[4]);
  t4354 = Cos(var1[5]);
  t5232 = Sin(var1[15]);
  t4770 = Sin(var1[5]);
  t6185 = Cos(var1[17]);
  t6199 = -1.*t6185;
  t6377 = 1. + t6199;
  t6766 = 3.e-6*t6377;
  t7091 = Sin(var1[17]);
  t7185 = 3.e-6*t7091;
  t7209 = t6766 + t7185;
  t7331 = -3.e-6*t7091;
  t7701 = t6766 + t7331;
  t7877 = 3.e-6*t7701;
  t6739 = -1.000000000009*t6377;
  t12798 = -3.e-6*t6377;
  t12934 = t12798 + t7185;
  t7307 = -1.8e-11*t6377;
  t12446 = -9.e-12*t6377;
  t7888 = 3.e-6*t7209;
  t9532 = 9.e-13*var1[17];
  t12486 = -1.*t7091;
  t18629 = t12798 + t7331;
  t20066 = 1. + t7307;
  t20828 = 3.e-6*t20066;
  t22034 = t20828 + t12798 + t7331;
  t7912 = 1. + t7307 + t7877 + t7888;
  t14022 = 3.e-7*var1[17];
  t14507 = 1.8e-11*t6377;
  t15049 = -1. + t14507;
  t17839 = 0.1*t15049;
  t18618 = -1.62e-17*t6377;
  t19164 = 0.2*t18629;
  t19633 = 0.1*t12934;
  t19909 = 0.2*t7209;
  t19980 = t14022 + t17839 + t18618 + t19164 + t19633 + t19909;
  t12145 = 1. + t6739;
  t22613 = 9.e-12*t6377;
  t23138 = t22613 + t12486;
  t22561 = 0.1000000000009*t6377;
  t23179 = 0.2*t23138;
  t23464 = 0.0999991*t18629;
  t23644 = t12446 + t7091;
  t23646 = 0.2*t23644;
  t24258 = t9532 + t22561 + t23179 + t23464 + t23646;
  t12394 = 0.2*t12145;
  t12422 = 0.2000000000018*t6377;
  t12566 = t12446 + t12486;
  t12592 = 0.1*t12566;
  t12988 = 0.0999991*t12934;
  t13078 = t9532 + t12394 + t12422 + t12592 + t12988;
  t24768 = 3.e-6*t12145;
  t28046 = t22613 + t7091;
  t28179 = 3.e-6*t28046;
  t29808 = t24768 + t6766 + t7331 + t28179;
  t8299 = 1.000000000009*t6377;
  t8524 = -1. + t8299 + t7877;
  t13175 = -1.*t8524*t13078;
  t22193 = -1.*t19980*t22034;
  t22428 = t12446 + t7888 + t7091;
  t24259 = -1.*t22428*t24258;
  t24552 = t13175 + t22193 + t24259;
  t24692 = t7912*t19980;
  t24797 = 3.e-6*t23138;
  t24971 = t24768 + t6766 + t24797 + t7185;
  t26105 = t24971*t24258;
  t29915 = t13078*t29808;
  t30466 = t24692 + t26105 + t29915;
  t2814 = -9.e-12*t2758;
  t3727 = 1. + t2814;
  t32320 = -1. + t8299 + t7888;
  t32494 = t12446 + t7877 + t12486;
  t32672 = t20828 + t12798 + t7185;
  t7226 = -3.e-6*t7209;
  t34148 = t13078*t32494;
  t34173 = t19980*t32672;
  t34338 = t32320*t24258;
  t34368 = t34148 + t34173 + t34338;
  t34387 = -1.*t7912*t19980;
  t34436 = -1.*t24971*t24258;
  t34553 = -1.*t13078*t29808;
  t34633 = t34387 + t34436 + t34553;
  t42174 = -1.*t13078*t32494;
  t45317 = -1.*t19980*t32672;
  t45621 = -1.*t32320*t24258;
  t45631 = t42174 + t45317 + t45621;
  t48539 = t8524*t13078;
  t48540 = t19980*t22034;
  t48582 = t22428*t24258;
  t48798 = t48539 + t48540 + t48582;
  t40377 = -3.e-6*t12145;
  t41589 = -3.e-6*t23138;
  t41832 = t40377 + t12798 + t41589 + t7331;
  t42061 = 0.2*t41832;
  t45725 = -1.*t22034*t45631;
  t48971 = -1.*t32672*t48798;
  t49006 = t8524*t45631;
  t49020 = t32494*t48798;
  t49176 = t49006 + t49020;
  t49197 = -3.e-6*t49176;
  t49202 = t42061 + t45725 + t48971 + t49197;
  t50409 = 3.e-6*t6185;
  t50190 = -3.e-6*t6185;
  t50739 = 9.e-12*t7091;
  t50778 = -2.7e-17*t7091;
  t50206 = t50190 + t7185;
  t50330 = 3.e-6*t50206;
  t50455 = t50409 + t7185;
  t50493 = 3.e-6*t50455;
  t50540 = -1.8e-11*t7091;
  t50560 = t50330 + t50493 + t50540;
  t50745 = t6199 + t50739;
  t50761 = 3.e-6*t50745;
  t50799 = t50409 + t50761 + t50778;
  t50844 = t6185 + t50739;
  t50848 = 3.e-6*t50844;
  t50878 = t50190 + t50848 + t50778;
  t51373 = t50409 + t7331;
  t51522 = t50190 + t7331;
  t51418 = -9.e-12*t7091;
  t51523 = 0.2*t51522;
  t51526 = 0.1*t51373;
  t51538 = 0.2*t50455;
  t51543 = 1.7999838e-12*t7091;
  t51544 = 3.e-7 + t51523 + t51526 + t51538 + t51543;
  t51566 = 0.0999991*t51522;
  t51570 = t6185 + t51418;
  t51590 = 0.2*t51570;
  t51602 = 0.2*t50745;
  t51605 = 0.1000000000009*t7091;
  t51619 = 9.e-13 + t51566 + t51590 + t51602 + t51605;
  t51405 = 0.0999991*t51373;
  t51446 = t6199 + t51418;
  t51457 = 0.1*t51446;
  t51463 = 9.e-13 + t51405 + t51457;
  t51490 = -3.000000000054e-6*t7091;
  t51497 = t50190 + t51490;
  t51482 = -1.*t8524*t51463;
  t51504 = -1.*t19980*t51497;
  t51559 = -1.*t22034*t51544;
  t51683 = -1.*t51619*t22428;
  t51691 = 1.000000000009*t7091;
  t51692 = t50330 + t51691;
  t51704 = -1.*t13078*t51692;
  t51705 = t6185 + t50493 + t51418;
  t51718 = -1.*t51705*t24258;
  t51724 = t51482 + t51504 + t51559 + t51683 + t51704 + t51718;
  t51835 = t19980*t50560;
  t51849 = t13078*t50878;
  t51850 = t7912*t51544;
  t51861 = t24971*t51619;
  t51892 = t50799*t24258;
  t51893 = t51463*t29808;
  t51945 = t51835 + t51849 + t51850 + t51861 + t51892 + t51893;
  t50641 = -1.000000000009*t2758;
  t50657 = 1. + t50641;
  t50960 = Sin(var1[4]);
  t32943 = -1.*t5232*t32320;
  t32990 = t694*t32494;
  t33011 = 3.e-6*t2758*t32672;
  t33053 = t32943 + t32990 + t33011;
  t32469 = 3.e-6*t5232*t32320;
  t32550 = 3.e-6*t2758*t32494;
  t32704 = t3727*t32672;
  t32730 = t32469 + t32550 + t32704;
  t51287 = -3.e-6*t50455;
  t53528 = t50409 + t51490;
  t53521 = t51463*t32494;
  t53530 = t19980*t53528;
  t53552 = t6199 + t50330 + t51418;
  t53571 = t13078*t53552;
  t53602 = t51544*t32672;
  t53647 = t32320*t51619;
  t53652 = t50493 + t51691;
  t53894 = t53652*t24258;
  t54152 = t53521 + t53530 + t53571 + t53602 + t53647 + t53894;
  t54174 = -1.*t19980*t50560;
  t54235 = -1.*t13078*t50878;
  t54410 = -1.*t7912*t51544;
  t54472 = -1.*t24971*t51619;
  t54535 = -1.*t50799*t24258;
  t54543 = -1.*t51463*t29808;
  t54572 = t54174 + t54235 + t54410 + t54472 + t54535 + t54543;
  t38265 = t694*t8524;
  t38543 = 3.e-6*t2758*t22034;
  t38546 = -1.*t5232*t22428;
  t38964 = t38265 + t38543 + t38546;
  t36419 = 3.e-6*t2758*t8524;
  t36462 = t3727*t22034;
  t36526 = 3.e-6*t5232*t22428;
  t38236 = t36419 + t36462 + t36526;
  t33381 = t22613 + t7226 + t12486;
  t33386 = 0.2*t33381;
  t34370 = -1.*t7912*t34368;
  t35834 = -1.*t32672*t34633;
  t35877 = t29808*t34368;
  t36159 = t32494*t34633;
  t36177 = t35877 + t36159;
  t36193 = -3.e-6*t36177;
  t36345 = t33386 + t34370 + t35834 + t36193;
  t7288 = 1. + t6739 + t7226;
  t7292 = 0.2*t7288;
  t24559 = -1.*t7912*t24552;
  t30467 = -1.*t22034*t30466;
  t30802 = t29808*t24552;
  t31308 = t8524*t30466;
  t31693 = t30802 + t31308;
  t31837 = -3.e-6*t31693;
  t32277 = t7292 + t24559 + t30467 + t31837;
  t58233 = t8524*t51463;
  t58238 = t19980*t51497;
  t58247 = t22034*t51544;
  t58251 = t51619*t22428;
  t58257 = t13078*t51692;
  t58266 = t51705*t24258;
  t58267 = t58233 + t58238 + t58247 + t58251 + t58257 + t58266;
  t58275 = -1.*t51463*t32494;
  t58298 = -1.*t19980*t53528;
  t58397 = -1.*t13078*t53552;
  t58436 = -1.*t51544*t32672;
  t58462 = -1.*t32320*t51619;
  t58465 = -1.*t53652*t24258;
  t58487 = t58275 + t58298 + t58397 + t58436 + t58462 + t58465;
  t49388 = 3.e-6*t2758*t7912;
  t49396 = -1.*t5232*t24971;
  t49424 = t694*t29808;
  t49429 = t49388 + t49396 + t49424;
  t49270 = t3727*t7912;
  t49299 = 3.e-6*t5232*t24971;
  t49303 = 3.e-6*t2758*t29808;
  t49306 = t49270 + t49299 + t49303;
  t4722 = 9.e-12*t2758;
  t4738 = t4722 + t2669;
  t3729 = 3.e-6*t3727;
  t3811 = -3.e-6*t2758;
  t3943 = t3729 + t3811;
  t52654 = t50657*t32320;
  t52677 = t5232*t32494;
  t52679 = -3.e-6*t5232*t32672;
  t52685 = t52654 + t52677 + t52679;
  t52737 = t4354*t33053;
  t52771 = -1.*t32730*t4770;
  t52861 = t52737 + t52771;
  t54946 = t5232*t8524;
  t54952 = -3.e-6*t5232*t22034;
  t55036 = t50657*t22428;
  t55073 = t54946 + t54952 + t55036;
  t55126 = t4354*t38964;
  t55127 = -1.*t38236*t4770;
  t55417 = t55126 + t55127;
  t58860 = -3.e-6*t5232*t7912;
  t58862 = t50657*t24971;
  t58905 = t5232*t29808;
  t58913 = t58860 + t58862 + t58905;
  t58928 = t4354*t49429;
  t58929 = -1.*t49306*t4770;
  t58932 = t58928 + t58929;
  t59374 = t4738*t4354;
  t59390 = -1.*t3943*t4770;
  t59394 = t59374 + t59390;
  t60664 = Sin(var1[3]);
  t59514 = -1.*t4354*t5232;
  t59516 = -3.e-6*t5232*t4770;
  t59524 = t59514 + t59516;
  t4402 = -1.*t3943*t4354;
  t4868 = -1.*t4738*t4770;
  t4894 = t4402 + t4868;
  t60791 = Cos(var1[3]);
  t5261 = -3.e-6*t4354*t5232;
  t5264 = t5232*t4770;
  t5275 = t5261 + t5264;
  t32863 = -1.*t4354*t32730;
  t33056 = -1.*t33053*t4770;
  t33057 = t32863 + t33056;
  t38243 = -1.*t4354*t38236;
  t39129 = -1.*t38964*t4770;
  t39331 = t38243 + t39129;
  t49363 = -1.*t4354*t49306;
  t49435 = -1.*t49429*t4770;
  t49458 = t49363 + t49435;
  t59126 = -1.000000000009*t632*t5232;
  t59395 = -1.*t50960*t59394;
  t59444 = t59126 + t59395;
  t59504 = t50657*t632;
  t59546 = -1.*t50960*t59524;
  t59594 = t59504 + t59546;
  t59607 = t632*t52685;
  t59609 = -1.*t50960*t52861;
  t59628 = t59607 + t59609;
  t59662 = t632*t55073;
  t59666 = -1.*t50960*t55417;
  t59690 = t59662 + t59666;
  t59702 = t632*t58913;
  t59722 = -1.*t50960*t58932;
  t59790 = t59702 + t59722;
  t51072 = t3727*t50560;
  t51080 = 3.e-6*t5232*t50799;
  t51090 = 3.e-6*t2758*t50878;
  t51110 = t51072 + t51080 + t51090;
  t50967 = 3.e-6*t2758*t50560;
  t51025 = -1.*t5232*t50799;
  t51029 = t694*t50878;
  t51048 = t50967 + t51025 + t51029;
  t50594 = -3.e-6*t5232*t50560;
  t50809 = t50657*t50799;
  t50885 = t5232*t50878;
  t50953 = t50594 + t50809 + t50885;
  t51057 = t4354*t51048;
  t51112 = -1.*t51110*t4770;
  t51124 = t51057 + t51112;
  t51305 = -1.000000000009*t7091;
  t51354 = t51287 + t51305;
  t51364 = 0.2*t51354;
  t51753 = -1.*t7912*t51724;
  t51756 = -1.*t50560*t24552;
  t51980 = -1.*t22034*t51945;
  t52007 = -1.*t51497*t30466;
  t52035 = t29808*t51724;
  t52060 = t50878*t24552;
  t52064 = t8524*t51945;
  t52428 = t51692*t30466;
  t52443 = t52035 + t52060 + t52064 + t52428;
  t52546 = -3.e-6*t52443;
  t52637 = t51364 + t51753 + t51756 + t51980 + t52007 + t52546;
  t60973 = t4354*t32730;
  t60974 = t33053*t4770;
  t60985 = t60973 + t60974;
  t53447 = t6199 + t51287 + t50739;
  t53484 = 0.2*t53447;
  t53507 = -1.*t50560*t34368;
  t54167 = -1.*t7912*t54152;
  t54639 = -1.*t32672*t54572;
  t54662 = -1.*t53528*t34633;
  t54668 = t50878*t34368;
  t54682 = t29808*t54152;
  t54851 = t32494*t54572;
  t54889 = t53552*t34633;
  t54891 = t54668 + t54682 + t54851 + t54889;
  t54920 = -3.e-6*t54891;
  t54944 = t53484 + t53507 + t54167 + t54639 + t54662 + t54920;
  t61057 = t4354*t38236;
  t61068 = t38964*t4770;
  t61072 = t61057 + t61068;
  t55781 = t3727*t51497;
  t55783 = 3.e-6*t5232*t51705;
  t55784 = 3.e-6*t2758*t51692;
  t55787 = t55781 + t55783 + t55784;
  t55590 = 3.e-6*t2758*t51497;
  t55743 = -1.*t5232*t51705;
  t55764 = t694*t51692;
  t55776 = t55590 + t55743 + t55764;
  t55516 = -3.e-6*t5232*t51497;
  t55572 = t50657*t51705;
  t55577 = t5232*t51692;
  t55578 = t55516 + t55572 + t55577;
  t55778 = t4354*t55776;
  t55793 = -1.*t55787*t4770;
  t55795 = t55778 + t55793;
  t57382 = t3727*t53528;
  t57447 = 3.e-6*t2758*t53552;
  t57500 = 3.e-6*t5232*t53652;
  t57590 = t57382 + t57447 + t57500;
  t56540 = 3.e-6*t2758*t53528;
  t56604 = t694*t53552;
  t56761 = -1.*t5232*t53652;
  t56823 = t56540 + t56604 + t56761;
  t55819 = -3.e-6*t5232*t53528;
  t56054 = t5232*t53552;
  t56159 = t50657*t53652;
  t56182 = t55819 + t56054 + t56159;
  t56889 = t4354*t56823;
  t57687 = -1.*t57590*t4770;
  t57694 = t56889 + t57687;
  t57875 = -3.e-6*t50745;
  t57992 = 2.7e-17*t7091;
  t57996 = t50190 + t57875 + t57992;
  t58000 = 0.2*t57996;
  t58213 = -1.*t51497*t45631;
  t58268 = -1.*t32672*t58267;
  t58272 = -1.*t53528*t48798;
  t58489 = -1.*t22034*t58487;
  t58570 = t51692*t45631;
  t58592 = t32494*t58267;
  t58629 = t53552*t48798;
  t58634 = t8524*t58487;
  t58808 = t58570 + t58592 + t58629 + t58634;
  t58853 = -3.e-6*t58808;
  t58854 = t58000 + t58213 + t58268 + t58272 + t58489 + t58853;
  t61099 = t4354*t49306;
  t61119 = t49429*t4770;
  t61127 = t61099 + t61119;
  t59823 = -1.*t694*t4354;
  t59878 = -3.e-6*t694*t4770;
  t59886 = t59823 + t59878;
  t59893 = 1.000000000009*t4354*t5232;
  t59896 = 3.000000000027e-6*t5232*t4770;
  t59897 = t59893 + t59896;
  t60017 = 3.e-6*t694*t32320;
  t60018 = 3.e-6*t5232*t32494;
  t60020 = -9.e-12*t5232*t32672;
  t60068 = t60017 + t60018 + t60020;
  t59993 = -1.*t694*t32320;
  t59996 = -1.*t5232*t32494;
  t60001 = 3.e-6*t5232*t32672;
  t60002 = t59993 + t59996 + t60001;
  t59929 = -1.000000000009*t5232*t32320;
  t59968 = -3.e-6*t694*t32672;
  t59969 = t59929 + t32990 + t59968;
  t60014 = t4354*t60002;
  t60069 = -1.*t60068*t4770;
  t60081 = t60014 + t60069;
  t60137 = 3.e-6*t5232*t8524;
  t60144 = -9.e-12*t5232*t22034;
  t60158 = 3.e-6*t694*t22428;
  t60196 = t60137 + t60144 + t60158;
  t60116 = -1.*t5232*t8524;
  t60117 = 3.e-6*t5232*t22034;
  t60120 = -1.*t694*t22428;
  t60125 = t60116 + t60117 + t60120;
  t60109 = -3.e-6*t694*t22034;
  t60111 = -1.000000000009*t5232*t22428;
  t60113 = t38265 + t60109 + t60111;
  t60128 = t4354*t60125;
  t60200 = -1.*t60196*t4770;
  t60213 = t60128 + t60200;
  t60328 = -9.e-12*t5232*t7912;
  t60329 = 3.e-6*t694*t24971;
  t60333 = 3.e-6*t5232*t29808;
  t60336 = t60328 + t60329 + t60333;
  t60263 = 3.e-6*t5232*t7912;
  t60273 = -1.*t694*t24971;
  t60283 = -1.*t5232*t29808;
  t60324 = t60263 + t60273 + t60283;
  t60242 = -3.e-6*t694*t7912;
  t60244 = -1.000000000009*t5232*t24971;
  t60249 = t60242 + t60244 + t49424;
  t60325 = t4354*t60324;
  t60456 = -1.*t60336*t4770;
  t60461 = t60325 + t60456;
  t60665 = 1.000000000009*t5232*t50960;
  t60674 = -1.*t632*t59394;
  t60689 = t60665 + t60674;
  t60692 = -1.*t50657*t50960;
  t60694 = -1.*t632*t59524;
  t60699 = t60692 + t60694;
  t60703 = -1.*t52685*t50960;
  t60710 = -1.*t632*t52861;
  t60727 = t60703 + t60710;
  t60732 = -1.*t55073*t50960;
  t60734 = -1.*t632*t55417;
  t60735 = t60732 + t60734;
  t60746 = -1.*t58913*t50960;
  t60750 = -1.*t632*t58932;
  t60781 = t60746 + t60750;
  t61229 = t4354*t51110;
  t61231 = t51048*t4770;
  t61236 = t61229 + t61231;
  t61239 = t632*t50953;
  t61240 = -1.*t50960*t51124;
  t61244 = t61239 + t61240;
  t61270 = t4354*t55787;
  t61272 = t55776*t4770;
  t61274 = t61270 + t61272;
  t61286 = t632*t55578;
  t61289 = -1.*t50960*t55795;
  t61290 = t61286 + t61289;
  t61307 = t4354*t57590;
  t61308 = t56823*t4770;
  t61309 = t61307 + t61308;
  t61311 = t632*t56182;
  t61315 = -1.*t50960*t57694;
  t61316 = t61311 + t61315;
  t60897 = t3943*t4354;
  t60907 = t4738*t4770;
  t60915 = t60897 + t60907;
  t60930 = 3.e-6*t4354*t5232;
  t60936 = -1.*t5232*t4770;
  t60942 = t60930 + t60936;
  t61250 = t60791*t60985;
  t61255 = -1.*t60664*t59628;
  t61260 = t61250 + t61255;
  t61263 = t60791*t61072;
  t61265 = -1.*t60664*t59690;
  t61266 = t61263 + t61265;
  t61326 = t60791*t61127;
  t61327 = -1.*t60664*t59790;
  t61332 = t61326 + t61327;
  t61363 = 3.e-6*t694*t4354;
  t61364 = -1.*t694*t4770;
  t61381 = t61363 + t61364;
  t61388 = -1.*t50960*t59886;
  t61391 = t59126 + t61388;
  t61402 = -3.000000000027e-6*t4354*t5232;
  t61419 = 1.000000000009*t5232*t4770;
  t61424 = t61402 + t61419;
  t61436 = -1.000000000009*t694*t632;
  t61441 = -1.*t50960*t59897;
  t61443 = t61436 + t61441;
  t61481 = t4354*t60068;
  t61484 = t60002*t4770;
  t61490 = t61481 + t61484;
  t61514 = t632*t59969;
  t61516 = -1.*t50960*t60081;
  t61525 = t61514 + t61516;
  t61577 = t4354*t60196;
  t61578 = t60125*t4770;
  t61585 = t61577 + t61578;
  t61618 = t632*t60113;
  t61619 = -1.*t50960*t60213;
  t61622 = t61618 + t61619;
  t61691 = t4354*t60336;
  t61700 = t60324*t4770;
  t61716 = t61691 + t61700;
  t61718 = t632*t60249;
  t61738 = -1.*t50960*t60461;
  t61741 = t61718 + t61738;
  t62459 = -3.e-6*t20066;
  t62447 = -3.e-6*t694;
  t62453 = t3811 + t62447;
  t62578 = 0.1999997000018*t2758;
  t62582 = 0.2*t694;
  t62590 = -0.05*t5232;
  t62606 = t62578 + t62582 + t62590;
  t62497 = -1. + t4722;
  t62500 = 0.1*t62497;
  t62519 = -5.4e-18*t2758;
  t62540 = 1.5e-7*t5232;
  t62549 = t62500 + t62519 + t62540;
  t62661 = t62453*t4354;
  t62700 = t62661 + t4770;
  t62711 = 0.05*t50657;
  t62760 = 2.999982e-7*t5232;
  t62761 = t62711 + t62760;
  t62775 = t4354*t62606;
  t62780 = -1.*t62549*t4770;
  t62787 = t62775 + t62780;
  t62565 = t4354*t62549;
  t62610 = t62606*t4770;
  t62652 = t62565 + t62610;
  t59806 = -1.000000000009*t5232*t50960;
  t62836 = -1.*t4354*t62549;
  t62841 = -1.*t62606*t4770;
  t62846 = t62836 + t62841;
  t62765 = t62761*t50960;
  t62794 = t632*t62787;
  t62797 = t62765 + t62794;
  t62805 = t632*t62761;
  t62808 = -1.*t50960*t62787;
  t62813 = t62805 + t62808;
  t62849 = t632*t59394;
  t62853 = t59806 + t62849;
  t62490 = -1.*t4354;
  t62491 = t62453*t4770;
  t62494 = t62490 + t62491;
  t62456 = -1.*t62453*t4770;
  t62457 = t4354 + t62456;
  t62877 = Power(t632,2);
  t62879 = Power(t50960,2);
  t62917 = t50657*t50960;
  t62918 = t632*t59524;
  t62919 = t62917 + t62918;
  t55104 = t55073*t50960;
  t55452 = t632*t55417;
  t55456 = t55104 + t55452;
  t62984 = 0.2000000000018*t2758;
  t62985 = t694*t13078;
  t62986 = 3.e-6*t2758*t19980;
  t62987 = -1.*t5232*t24258;
  t62988 = t62984 + t62985 + t62986 + t62987;
  t62972 = -6.000000000054e-7*t2758;
  t62973 = 3.e-6*t2758*t13078;
  t62974 = t3727*t19980;
  t62975 = 3.e-6*t5232*t24258;
  t62981 = t62972 + t62973 + t62974 + t62975;
  t52734 = t52685*t50960;
  t53191 = t632*t52861;
  t53226 = t52734 + t53191;
  t63159 = -1.*t4354*t62981;
  t63160 = -1.*t62988*t4770;
  t63161 = t63159 + t63160;
  t63118 = t4354*t62988;
  t63151 = -1.*t62981*t4770;
  t63152 = t63118 + t63151;
  t63165 = -0.2000000000018*t5232;
  t63166 = t5232*t13078;
  t63167 = -3.e-6*t5232*t19980;
  t63168 = t50657*t24258;
  t63169 = t63165 + t63166 + t63167 + t63168;
  t62982 = t4354*t62981;
  t63079 = t62988*t4770;
  t63085 = t62982 + t63079;
  t63170 = t63169*t50960;
  t63171 = t632*t63152;
  t63172 = t63170 + t63171;
  t63193 = t632*t63169;
  t63195 = -1.*t50960*t63152;
  t63206 = t63193 + t63195;
  t58921 = t58913*t50960;
  t58941 = t632*t58932;
  t59033 = t58921 + t58941;
  t62464 = -3.e-6*t32494;
  t62466 = t62459 + t6766 + t62464 + t7331;
  t62471 = -3.e-6*t8524;
  t62472 = t62459 + t6766 + t62471 + t7185;
  t62476 = -3.e-6*t7701;
  t62477 = -3.e-6*t29808;
  t62482 = -1. + t14507 + t62476 + t7226 + t62477;
  t62654 = t62494*t62652;
  t62802 = t632*t62700*t62797;
  t62819 = -1.*t50960*t62700*t62813;
  t62822 = t62654 + t62802 + t62819;
  t63555 = -1.*t62761*t50960;
  t63560 = -1.*t632*t62787;
  t63561 = t63555 + t63560;
  t62897 = -1.*t60915*t62652;
  t62901 = -1.*t62853*t62797;
  t62902 = -1.*t59444*t62813;
  t62905 = t62897 + t62901 + t62902;
  t62910 = -1.*t62494*t62652;
  t62912 = -1.*t632*t62700*t62797;
  t62914 = t50960*t62700*t62813;
  t62915 = t62910 + t62912 + t62914;
  t62957 = t62652*t60942;
  t62958 = t62797*t62919;
  t62960 = t62813*t59594;
  t62967 = t62957 + t62958 + t62960;
  t63249 = -1.*t60985*t63085;
  t63251 = -1.*t53226*t63172;
  t63252 = -1.*t59628*t63206;
  t63253 = t63249 + t63251 + t63252;
  t63643 = -1.*t63169*t50960;
  t63645 = -1.*t632*t63152;
  t63647 = t63643 + t63645;
  t63255 = t61072*t63085;
  t63257 = t55456*t63172;
  t63258 = t59690*t63206;
  t63259 = t63255 + t63257 + t63258;
  t63313 = t60985*t63085;
  t63318 = t53226*t63172;
  t63322 = t59628*t63206;
  t63323 = t63313 + t63318 + t63322;
  t63367 = -1.*t63085*t61127;
  t63375 = -1.*t63172*t59033;
  t63381 = -1.*t63206*t59790;
  t63383 = t63367 + t63375 + t63381;
  t63454 = -1.*t61072*t63085;
  t63457 = -1.*t55456*t63172;
  t63458 = -1.*t59690*t63206;
  t63466 = t63454 + t63457 + t63458;
  t63516 = t63085*t61127;
  t63520 = t63172*t59033;
  t63521 = t63206*t59790;
  t63523 = t63516 + t63520 + t63521;
  t50966 = t50953*t50960;
  t51129 = t632*t51124;
  t51159 = t50966 + t51129;
  t64139 = 3.000000000054e-6*t7091;
  t55589 = t55578*t50960;
  t55796 = t632*t55795;
  t55799 = t55589 + t55796;
  t56422 = t56182*t50960;
  t57739 = t632*t57694;
  t57775 = t56422 + t57739;
  t64378 = t694*t51463;
  t64382 = 3.e-6*t2758*t51544;
  t64383 = -1.*t5232*t51619;
  t64384 = t64378 + t64382 + t64383;
  t64355 = 3.e-6*t2758*t51463;
  t64357 = t3727*t51544;
  t64363 = 3.e-6*t5232*t51619;
  t64370 = t64355 + t64357 + t64363;
  t64401 = t5232*t51463;
  t64406 = -3.e-6*t5232*t51544;
  t64408 = t50657*t51619;
  t64410 = t64401 + t64406 + t64408;
  t64425 = t4354*t64384;
  t64426 = -1.*t64370*t4770;
  t64427 = t64425 + t64426;
  t64376 = t4354*t64370;
  t64386 = t64384*t4770;
  t64387 = t64376 + t64386;
  t64417 = t64410*t50960;
  t64430 = t632*t64427;
  t64432 = t64417 + t64430;
  t64438 = t632*t64410;
  t64444 = -1.*t50960*t64427;
  t64446 = t64438 + t64444;
  t59970 = t59969*t50960;
  t60090 = t632*t60081;
  t60094 = t59970 + t60090;
  t60115 = t60113*t50960;
  t60221 = t632*t60213;
  t60235 = t60115 + t60221;
  t60252 = t60249*t50960;
  t60462 = t632*t60461;
  t60463 = t60252 + t60462;
  t64702 = -0.05*t694;
  t64704 = -2.999982e-7*t5232;
  t64708 = t64702 + t64704;
  t64689 = 1.5e-7*t694;
  t64691 = 8.999946e-13*t5232;
  t64696 = t64689 + t64691;
  t64713 = 2.999982e-7*t694;
  t64716 = -0.05000000000045*t5232;
  t64717 = t64713 + t64716;
  t64727 = t4354*t64708;
  t64729 = -1.*t64696*t4770;
  t64732 = t64727 + t64729;
  t59887 = t632*t59886;
  t59888 = t59806 + t59887;
  t64699 = t4354*t64696;
  t64710 = t64708*t4770;
  t64711 = t64699 + t64710;
  t64722 = t64717*t50960;
  t64733 = t632*t64732;
  t64738 = t64722 + t64733;
  t64741 = t632*t64717;
  t64750 = -1.*t50960*t64732;
  t64752 = t64741 + t64750;
  t59892 = -1.000000000009*t694*t50960;
  t59915 = t632*t59897;
  t59926 = t59892 + t59915;
  t64955 = 0.2000000000018*t5232;
  t64957 = -1.*t5232*t13078;
  t64958 = 3.e-6*t5232*t19980;
  t64959 = -1.*t694*t24258;
  t64960 = t64955 + t64957 + t64958 + t64959;
  t64947 = -6.000000000054e-7*t5232;
  t64950 = 3.e-6*t5232*t13078;
  t64951 = -9.e-12*t5232*t19980;
  t64952 = 3.e-6*t694*t24258;
  t64953 = t64947 + t64950 + t64951 + t64952;
  t64967 = -0.2000000000018*t694;
  t64969 = -3.e-6*t694*t19980;
  t64970 = -1.000000000009*t5232*t24258;
  t64971 = t64967 + t62985 + t64969 + t64970;
  t64974 = t4354*t64960;
  t64976 = -1.*t64953*t4770;
  t64978 = t64974 + t64976;
  t64954 = t4354*t64953;
  t64961 = t64960*t4770;
  t64962 = t64954 + t64961;
  t64972 = t64971*t50960;
  t64982 = t632*t64978;
  t64983 = t64972 + t64982;
  t64987 = t632*t64971;
  t64988 = -1.*t50960*t64978;
  t64989 = t64987 + t64988;
  t64117 = -3.e-6*t53552;
  t64153 = t50190 + t64117 + t64139;
  t64199 = -3.e-6*t51692;
  t64201 = t50409 + t64139 + t64199;
  t64277 = -3.e-6*t50878;
  t64283 = -3.e-6*t50206;
  t64288 = 1.8e-11*t7091;
  t64297 = t64277 + t64283 + t51287 + t64288;
  t65202 = -1.*t52685*t63169;
  t65209 = -1.*t52861*t63152;
  t65210 = t65202 + t63249 + t65209;
  t65216 = t55073*t63169;
  t65217 = t55417*t63152;
  t65221 = t65216 + t63255 + t65217;
  t64388 = t64387*t61072;
  t64394 = t61274*t63085;
  t64463 = -1.*t60985*t64387;
  t64466 = -1.*t61309*t63085;
  t65401 = t52685*t63169;
  t65402 = t52861*t63152;
  t65410 = t65401 + t63313 + t65402;
  t64510 = t60985*t64387;
  t64517 = t61309*t63085;
  t64573 = -1.*t61236*t63085;
  t64575 = -1.*t64387*t61127;
  t65424 = -1.*t63169*t58913;
  t65425 = -1.*t63152*t58932;
  t65426 = t65424 + t65425 + t63367;
  t65453 = -1.*t55073*t63169;
  t65455 = -1.*t55417*t63152;
  t65457 = t65453 + t63454 + t65455;
  t64624 = -1.*t64387*t61072;
  t64626 = -1.*t61274*t63085;
  t64638 = t61236*t63085;
  t64640 = t64387*t61127;
  t65460 = t63169*t58913;
  t65461 = t63152*t58932;
  t65462 = t65460 + t65461 + t63516;
  t62830 = -1.*t59394*t62652;
  t62831 = -1.*t60915*t62787;
  t62881 = t62700*t62652;
  t62885 = t62494*t62787;
  t62931 = -1.*t62700*t62652;
  t62932 = -1.*t62494*t62787;
  t62945 = t62787*t60942;
  t62946 = t62652*t59524;
  t63113 = -1.*t52861*t63085;
  t63158 = -1.*t60985*t63152;
  t63224 = t55417*t63085;
  t63225 = t61072*t63152;
  t63292 = t52861*t63085;
  t63294 = t60985*t63152;
  t63327 = -1.*t63085*t58932;
  t63339 = -1.*t63152*t61127;
  t63412 = -1.*t55417*t63085;
  t63414 = -1.*t61072*t63152;
  t63471 = t63085*t58932;
  t63473 = t63152*t61127;
  t64712 = -1.*t62494*t64711;
  t65537 = -1.*t62700*t62787;
  t65539 = t62910 + t65537;
  t64818 = t61381*t62652;
  t64825 = t64711*t60942;
  t64902 = t62494*t64711;
  t65505 = t62700*t62787;
  t65507 = t62654 + t65505;
  t64925 = -1.*t60915*t64711;
  t64927 = -1.*t62652*t61424;
  t64964 = -1.*t60985*t64962;
  t64966 = -1.*t61490*t63085;
  t65002 = t61072*t64962;
  t65004 = t61585*t63085;
  t65027 = t60985*t64962;
  t65028 = t61490*t63085;
  t65040 = -1.*t64962*t61127;
  t65041 = -1.*t63085*t61716;
  t65059 = -1.*t61072*t64962;
  t65061 = -1.*t61585*t63085;
  t65100 = t64962*t61127;
  t65101 = t63085*t61716;
  t65788 = -1.*t59969*t63169;
  t65789 = -1.*t52685*t64971;
  t65800 = t60113*t63169;
  t65801 = t55073*t64971;
  t65825 = t59969*t63169;
  t65827 = t52685*t64971;
  t65846 = -1.*t63169*t60249;
  t65851 = -1.*t64971*t58913;
  t65877 = -1.*t60113*t63169;
  t65881 = -1.*t55073*t64971;
  t65894 = t63169*t60249;
  t65897 = t64971*t58913;
  t66043 = -1.*t33053*t62988;
  t66048 = -1.*t32730*t62981;
  t66049 = t65202 + t66043 + t66048;
  t66090 = t38964*t62988;
  t66111 = t38236*t62981;
  t66113 = t65216 + t66090 + t66111;
  t65258 = t64410*t55073;
  t65263 = t55578*t63169;
  t65311 = -1.*t52685*t64410;
  t65314 = -1.*t56182*t63169;
  t66119 = t33053*t62988;
  t66120 = t32730*t62981;
  t66121 = t65401 + t66119 + t66120;
  t65432 = t52685*t64410;
  t65433 = t56182*t63169;
  t65438 = -1.*t50953*t63169;
  t65439 = -1.*t64410*t58913;
  t66135 = -1.*t62981*t49306;
  t66136 = -1.*t62988*t49429;
  t66140 = t66135 + t66136 + t65424;
  t66169 = -1.*t38964*t62988;
  t66170 = -1.*t38236*t62981;
  t66172 = t65453 + t66169 + t66170;
  t65469 = -1.*t64410*t55073;
  t65470 = -1.*t55578*t63169;
  t65477 = t50953*t63169;
  t65481 = t64410*t58913;
  t66179 = t62981*t49306;
  t66186 = t62988*t49429;
  t66191 = t66179 + t66186 + t65460;
  p_output1[0]=var2[15]*(-0.5*(0.0013000000000117*t59444 + 7.8000468000702e-9*t59594 + 0.043*t32277*t59628 + 0.043*t36345*t59690 + 0.043*t49202*t59790)*var2[4] - 0.5*(0.043*t32277*t33057*t632 + 0.043*t36345*t39331*t632 + 0.0013000000000117*t4894*t632 + 0.043*t49202*t49458*t632 + 7.8000468000702e-9*t5275*t632)*var2[5] - 0.5*(7.8000468000702e-9*t59888 + 0.0013000000000117*t59926 + 0.043*t32277*t60094 + 0.043*t36345*t60235 + 0.043*t49202*t60463)*var2[15] - 0.5*(0.043*t49202*t51159 + 0.043*t52637*t53226 + 0.043*t54944*t55456 + 0.043*t36345*t55799 + 0.043*t32277*t57775 + 0.043*t58854*t59033)*var2[17]);
  p_output1[1]=var2[15]*(-0.5*(0.0013000000000117*(-1.*t59444*t60791 - 1.*t60664*t60915) + 7.8000468000702e-9*(-1.*t59594*t60791 - 1.*t60664*t60942) + 0.043*t32277*(-1.*t59628*t60791 - 1.*t60664*t60985) + 0.043*t36345*(-1.*t59690*t60791 - 1.*t60664*t61072) + 0.043*t49202*(-1.*t59790*t60791 - 1.*t60664*t61127))*var2[3] - 0.5*(-0.0013000000000117*t60664*t60689 - 7.8000468000702e-9*t60664*t60699 - 0.043*t32277*t60664*t60727 - 0.043*t36345*t60664*t60735 - 0.043*t49202*t60664*t60781)*var2[4] - 0.5*(0.043*t32277*(t33057*t50960*t60664 + t52861*t60791) + 0.043*t36345*(t39331*t50960*t60664 + t55417*t60791) + 0.043*t49202*(t49458*t50960*t60664 + t58932*t60791) + 0.0013000000000117*(t4894*t50960*t60664 + t59394*t60791) + 7.8000468000702e-9*(t50960*t5275*t60664 + t59524*t60791))*var2[5] - 0.5*(7.8000468000702e-9*(t60791*t61381 - 1.*t60664*t61391) + 0.0013000000000117*(t60791*t61424 - 1.*t60664*t61443) + 0.043*t32277*(t60791*t61490 - 1.*t60664*t61525) + 0.043*t36345*(t60791*t61585 - 1.*t60664*t61622) + 0.043*t49202*(t60791*t61716 - 1.*t60664*t61741))*var2[15] - 0.5*(0.043*t49202*(t60791*t61236 - 1.*t60664*t61244) + 0.043*t52637*t61260 + 0.043*t54944*t61266 + 0.043*t36345*(t60791*t61274 - 1.*t60664*t61290) + 0.043*t32277*(t60791*t61309 - 1.*t60664*t61316) + 0.043*t58854*t61332)*var2[17]);
  p_output1[2]=var2[15]*(-0.5*(0.0013000000000117*(-1.*t59444*t60664 + t60791*t60915) + 7.8000468000702e-9*(-1.*t59594*t60664 + t60791*t60942) + 0.043*t32277*t61260 + 0.043*t36345*t61266 + 0.043*t49202*t61332)*var2[3] - 0.5*(0.0013000000000117*t60689*t60791 + 7.8000468000702e-9*t60699*t60791 + 0.043*t32277*t60727*t60791 + 0.043*t36345*t60735*t60791 + 0.043*t49202*t60781*t60791)*var2[4] - 0.5*(0.043*t32277*(t52861*t60664 - 1.*t33057*t50960*t60791) + 0.043*t36345*(t55417*t60664 - 1.*t39331*t50960*t60791) + 0.0013000000000117*(t59394*t60664 - 1.*t4894*t50960*t60791) + 0.043*t49202*(t58932*t60664 - 1.*t49458*t50960*t60791) + 7.8000468000702e-9*(t59524*t60664 - 1.*t50960*t5275*t60791))*var2[5] - 0.5*(7.8000468000702e-9*(t60664*t61381 + t60791*t61391) + 0.0013000000000117*(t60664*t61424 + t60791*t61443) + 0.043*t32277*(t60664*t61490 + t60791*t61525) + 0.043*t36345*(t60664*t61585 + t60791*t61622) + 0.043*t49202*(t60664*t61716 + t60791*t61741))*var2[15] - 0.5*(0.043*t52637*(t59628*t60791 + t60664*t60985) + 0.043*t54944*(t59690*t60791 + t60664*t61072) + 0.043*t58854*(t59790*t60791 + t60664*t61127) + 0.043*t49202*(t60664*t61236 + t60791*t61244) + 0.043*t36345*(t60664*t61274 + t60791*t61290) + 0.043*t32277*(t60664*t61309 + t60791*t61316))*var2[17]);
  p_output1[3]=var2[15]*(-0.5*(0.000271*t59628*t62466 + 2.e-6*t59690*t62472 + 0.000271*t59790*t62482 - 0.000046000000000414*t50960*t62700 + 7.8000468000702e-9*(t59444*t62822 - 1.*t50960*t62700*t62905 + t62700*t632*(-1.*t59444*t62797 - 1.*t60689*t62813 - 1.*t62813*t62853 - 1.*t59444*t63561) + t62853*(-1.*t50960*t62700*t62797 - 1.*t50960*t62700*t63561)) + 0.0013000000000117*(t59594*t62915 - 1.*t50960*t62700*t62967 + t62700*t632*(t59594*t62797 + t60699*t62813 + t62813*t62919 + t59594*t63561) + t62919*(t50960*t62700*t62797 + t50960*t62700*t63561)) + 0.043*t49202*(t59690*t63253 + t59628*t63259 + t55456*(-1.*t59628*t63172 - 1.*t53226*t63206 - 1.*t60727*t63206 - 1.*t59628*t63647) + t53226*(t59690*t63172 + t55456*t63206 + t60735*t63206 + t59690*t63647)) + 0.043*t36345*(t59790*t63323 + t59628*t63383 + t59033*(t59628*t63172 + t53226*t63206 + t60727*t63206 + t59628*t63647) + t53226*(-1.*t59790*t63172 - 1.*t59033*t63206 - 1.*t60781*t63206 - 1.*t59790*t63647)) + 0.043*t32277*(t59790*t63466 + t59690*t63523 + t59033*(-1.*t59690*t63172 - 1.*t55456*t63206 - 1.*t60735*t63206 - 1.*t59690*t63647) + t55456*(t59790*t63172 + t59033*t63206 + t60781*t63206 + t59790*t63647)))*var2[4] - 0.5*(0.000046000000000414*t62457*t632 + 0.000271*t33057*t62466*t632 + 2.e-6*t39331*t62472*t632 + 0.000271*t49458*t62482*t632 + 7.8000468000702e-9*(t4894*t62822*t632 + t62457*t62905*t632 + t62853*(-1.*t50960*t62457*t62813 + t62700*t62846*t62877 + t62700*t62846*t62879 + t62881 + t62885 + t62457*t62797*t632) + t62700*t632*(t4894*t50960*t62813 + t62830 + t62831 + t50960*t59444*t62846 - 1.*t4894*t62797*t632 - 1.*t62846*t62853*t632)) + 0.0013000000000117*(t5275*t62915*t632 + t62457*t62967*t632 + t62919*(t50960*t62457*t62813 - 1.*t62700*t62846*t62877 - 1.*t62700*t62846*t62879 + t62931 + t62932 - 1.*t62457*t62797*t632) + t62700*t632*(-1.*t50960*t5275*t62813 - 1.*t50960*t59594*t62846 + t62945 + t62946 + t5275*t62797*t632 + t62846*t62919*t632)) + 0.043*t49202*(t55456*(t63113 + t63158 + t50960*t59628*t63161 - 1.*t53226*t63161*t632 - 1.*t33057*t63172*t632 + t33057*t50960*t63206) + t53226*(-1.*t50960*t59690*t63161 + t55456*t63161*t632 + t39331*t63172*t632 - 1.*t39331*t50960*t63206 + t63224 + t63225) + t39331*t632*t63253 + t33057*t632*t63259) + 0.043*t36345*(t59033*(-1.*t50960*t59628*t63161 + t53226*t63161*t632 + t33057*t63172*t632 - 1.*t33057*t50960*t63206 + t63292 + t63294) + t49458*t632*t63323 + t53226*(t50960*t59790*t63161 - 1.*t59033*t63161*t632 - 1.*t49458*t63172*t632 + t49458*t50960*t63206 + t63327 + t63339) + t33057*t632*t63383) + 0.043*t32277*(t59033*(t50960*t59690*t63161 - 1.*t55456*t63161*t632 - 1.*t39331*t63172*t632 + t39331*t50960*t63206 + t63412 + t63414) + t49458*t632*t63466 + t55456*(-1.*t50960*t59790*t63161 + t59033*t63161*t632 + t49458*t63172*t632 - 1.*t49458*t50960*t63206 + t63471 + t63473) + t39331*t632*t63523))*var2[5] - 0.5*(0.000271*t60094*t62466 + 2.e-6*t60235*t62472 + 0.000271*t60463*t62482 + 0.0013000000000117*(t59888*t62915 + t62919*(t64712 - 1.*t62700*t632*t64738 + t50960*t62700*t64752) + t62700*t632*(t59888*t62797 + t61391*t62813 + t62919*t64738 + t59594*t64752 + t64818 + t64825)) + 7.8000468000702e-9*(t59926*t62822 + t62853*(t62700*t632*t64738 - 1.*t50960*t62700*t64752 + t64902) + t62700*t632*(-1.*t59926*t62797 - 1.*t61443*t62813 - 1.*t62853*t64738 - 1.*t59444*t64752 + t64925 + t64927)) + 0.043*t49202*(t60235*t63253 + t60094*t63259 + t55456*(-1.*t60094*t63172 - 1.*t61525*t63206 + t64964 + t64966 - 1.*t53226*t64983 - 1.*t59628*t64989) + t53226*(t60235*t63172 + t61622*t63206 + t55456*t64983 + t59690*t64989 + t65002 + t65004)) + 0.043*t36345*(t60463*t63323 + t60094*t63383 + t59033*(t60094*t63172 + t61525*t63206 + t53226*t64983 + t59628*t64989 + t65027 + t65028) + t53226*(-1.*t60463*t63172 - 1.*t61741*t63206 - 1.*t59033*t64983 - 1.*t59790*t64989 + t65040 + t65041)) + 0.043*t32277*(t60463*t63466 + t60235*t63523 + t59033*(-1.*t60235*t63172 - 1.*t61622*t63206 - 1.*t55456*t64983 - 1.*t59690*t64989 + t65059 + t65061) + t55456*(t60463*t63172 + t61741*t63206 + t59033*t64983 + t59790*t64989 + t65100 + t65101)))*var2[15] - 0.5*(0.000271*t57775*t62466 + 2.e-6*t55799*t62472 + 0.000271*t51159*t62482 + 0.043*t58854*(t55456*t63253 + t53226*t63259) + 0.043*t54944*(t59033*t63323 + t53226*t63383) + 0.043*t52637*(t59033*t63466 + t55456*t63523) + 0.000271*t53226*t64153 + 2.e-6*t55456*t64201 + 0.000271*t59033*t64297 + 0.043*t49202*(t55799*t63253 + t57775*t63259 + t53226*(t55799*t63172 + t61290*t63206 + t64388 + t64394 + t55456*t64432 + t59690*t64446) + t55456*(-1.*t57775*t63172 - 1.*t61316*t63206 - 1.*t53226*t64432 - 1.*t59628*t64446 + t64463 + t64466)) + 0.043*t36345*(t51159*t63323 + t57775*t63383 + t59033*(t57775*t63172 + t61316*t63206 + t53226*t64432 + t59628*t64446 + t64510 + t64517) + t53226*(-1.*t51159*t63172 - 1.*t61244*t63206 - 1.*t59033*t64432 - 1.*t59790*t64446 + t64573 + t64575)) + 0.043*t32277*(t51159*t63466 + t55799*t63523 + t59033*(-1.*t55799*t63172 - 1.*t61290*t63206 - 1.*t55456*t64432 - 1.*t59690*t64446 + t64624 + t64626) + t55456*(t51159*t63172 + t61244*t63206 + t59033*t64432 + t59790*t64446 + t64638 + t64640)))*var2[17]);
  p_output1[4]=var2[15]*(-0.5*(0.000271*t52861*t62466 + 2.e-6*t55417*t62472 + 0.000271*t58932*t62482 + 0.000046000000000414*t62700 + 0.043*t49202*(t61072*(t63113 - 1.*t33057*t63152 + t63158 - 1.*t52861*t63161) + t60985*(t39331*t63152 + t55417*t63161 + t63224 + t63225) + t55417*t65210 + t52861*t65221) + 0.043*t36345*(t61127*(t33057*t63152 + t52861*t63161 + t63292 + t63294) + t60985*(-1.*t49458*t63152 - 1.*t58932*t63161 + t63327 + t63339) + t58932*t65410 + t52861*t65426) + 0.043*t32277*(t61127*(-1.*t39331*t63152 - 1.*t55417*t63161 + t63412 + t63414) + t61072*(t49458*t63152 + t58932*t63161 + t63471 + t63473) + t58932*t65457 + t55417*t65462) + 7.8000468000702e-9*(t62494*(-1.*t4894*t62787 + t62830 + t62831 - 1.*t59394*t62846) + t60915*(t62457*t62787 + t62700*t62846 + t62881 + t62885) + t62700*(1.000000000009*t5232*t62761 - 1.*t59394*t62787 + t62897) + t59394*t65507) + 0.0013000000000117*(t60942*(-1.*t62457*t62787 - 1.*t62700*t62846 + t62931 + t62932) + t62494*(t5275*t62787 + t59524*t62846 + t62945 + t62946) + t62700*(t50657*t62761 + t59524*t62787 + t62957) + t59524*t65539))*var2[5] - 0.5*(0.000271*t61490*t62466 + 2.e-6*t61585*t62472 + 0.000271*t61716*t62482 + 0.0013000000000117*(t60942*(t64712 - 1.*t62700*t64732) + t62494*(-1.000000000009*t5232*t62761 + t59886*t62787 + t50657*t64717 + t59524*t64732 + t64818 + t64825) + t61381*t65539) + 0.043*t49202*(t61585*t65210 + t61490*t65221 + t61072*(-1.*t60081*t63152 + t64964 + t64966 - 1.*t52861*t64978 + t65788 + t65789) + t60985*(t60213*t63152 + t55417*t64978 + t65002 + t65004 + t65800 + t65801)) + 0.043*t36345*(t61716*t65410 + t61490*t65426 + t61127*(t60081*t63152 + t52861*t64978 + t65027 + t65028 + t65825 + t65827) + t60985*(-1.*t60461*t63152 - 1.*t58932*t64978 + t65040 + t65041 + t65846 + t65851)) + 0.043*t32277*(t61716*t65457 + t61585*t65462 + t61127*(-1.*t60213*t63152 - 1.*t55417*t64978 + t65059 + t65061 + t65877 + t65881) + t61072*(t60461*t63152 + t58932*t64978 + t65100 + t65101 + t65894 + t65897)) + 7.8000468000702e-9*(t60915*(t62700*t64732 + t64902) + t61424*t65507 + t62494*(-1.*t59897*t62787 + 1.000000000009*t5232*t64717 - 1.*t59394*t64732 + t64925 + t64927 + 1.000000000009*t62761*t694)))*var2[15] - 0.5*(0.000271*t61309*t62466 + 2.e-6*t61274*t62472 + 0.000271*t61236*t62482 + 0.000271*t60985*t64153 + 2.e-6*t61072*t64201 + 0.000271*t61127*t64297 + 0.043*t58854*(t61072*t65210 + t60985*t65221) + 0.043*t49202*(t61274*t65210 + t61309*t65221 + t60985*(t55795*t63152 + t64388 + t64394 + t55417*t64427 + t65258 + t65263) + t61072*(-1.*t57694*t63152 - 1.*t52861*t64427 + t64463 + t64466 + t65311 + t65314)) + 0.043*t54944*(t61127*t65410 + t60985*t65426) + 0.043*t36345*(t61236*t65410 + t61309*t65426 + t61127*(t57694*t63152 + t52861*t64427 + t64510 + t64517 + t65432 + t65433) + t60985*(-1.*t51124*t63152 - 1.*t58932*t64427 + t64573 + t64575 + t65438 + t65439)) + 0.043*t52637*(t61127*t65457 + t61072*t65462) + 0.043*t32277*(t61236*t65457 + t61274*t65462 + t61127*(-1.*t55795*t63152 - 1.*t55417*t64427 + t64624 + t64626 + t65469 + t65470) + t61072*(t51124*t63152 + t58932*t64427 + t64638 + t64640 + t65477 + t65481)))*var2[17]);
  p_output1[5]=var2[15]*(-0.5*(0.000271*t59969*t62466 + 2.e-6*t60113*t62472 + 0.000271*t60249*t62482 - 0.0013000000000234*t5232*(t62500 + t62519 + t62540 - 1.*t62453*t62606) + 0.0013000000000117*t50657*(t64689 + t64691 - 1.*t62453*t64708) + 0.043*t49202*(t55073*(-1.*t60068*t62981 - 1.*t60002*t62988 - 1.*t32730*t64953 - 1.*t33053*t64960 + t65788 + t65789) + t52685*(t60196*t62981 + t60125*t62988 + t38236*t64953 + t38964*t64960 + t65800 + t65801) + t60113*t66049 + t59969*t66113) + 0.043*t36345*(t58913*(t60068*t62981 + t60002*t62988 + t32730*t64953 + t33053*t64960 + t65825 + t65827) + t52685*(-1.*t60336*t62981 - 1.*t60324*t62988 - 1.*t49306*t64953 - 1.*t49429*t64960 + t65846 + t65851) + t60249*t66121 + t59969*t66140) + 0.043*t32277*(t58913*(-1.*t60196*t62981 - 1.*t60125*t62988 - 1.*t38236*t64953 - 1.*t38964*t64960 + t65877 + t65881) + t55073*(t60336*t62981 + t60324*t62988 + t49306*t64953 + t49429*t64960 + t65894 + t65897) + t60249*t66172 + t60113*t66191) - 7.8000468001404e-9*t5232*(-8.999946e-13*t5232 + t62453*t64708 - 1.5e-7*t694) - 7.8000468001404e-9*(5.4e-18*t2758 + 0.1*t3727 - 1.5e-7*t5232 + t62453*t62606)*t694)*var2[15] - 0.5*(0.000271*t56182*t62466 + 2.e-6*t55578*t62472 + 0.000271*t50953*t62482 + 0.000271*t52685*t64153 + 2.e-6*t55073*t64201 + 0.000271*t58913*t64297 + 0.043*t58854*(t55073*t66049 + t52685*t66113) + 0.043*t49202*(t52685*(t55787*t62981 + t55776*t62988 + t38236*t64370 + t38964*t64384 + t65258 + t65263) + t55073*(-1.*t57590*t62981 - 1.*t56823*t62988 - 1.*t32730*t64370 - 1.*t33053*t64384 + t65311 + t65314) + t55578*t66049 + t56182*t66113) + 0.043*t54944*(t58913*t66121 + t52685*t66140) + 0.043*t36345*(t58913*(t57590*t62981 + t56823*t62988 + t32730*t64370 + t33053*t64384 + t65432 + t65433) + t52685*(-1.*t51110*t62981 - 1.*t51048*t62988 - 1.*t49306*t64370 - 1.*t49429*t64384 + t65438 + t65439) + t50953*t66121 + t56182*t66140) + 0.043*t52637*(t58913*t66172 + t55073*t66191) + 0.043*t32277*(t58913*(-1.*t55787*t62981 - 1.*t55776*t62988 - 1.*t38236*t64370 - 1.*t38964*t64384 + t65469 + t65470) + t55073*(t51110*t62981 + t51048*t62988 + t49306*t64370 + t49429*t64384 + t65477 + t65481) + t50953*t66172 + t55578*t66191))*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=-0.5*(0.086*t32277*t52637 + 0.086*t36345*t54944 + 0.086*t49202*t58854 + 0.000542*t62466*t64153 + 4.e-6*t62472*t64201 + 0.000542*t62482*t64297)*var2[15]*var2[17];
  p_output1[16]=0;
  p_output1[17]=-0.5*(1.29001548002322e-8*t52637 + 0.0042999871*t54944 + 1.29e-8*t58854 + 0.000271000000004878*t64297)*var2[15]*var2[17];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec16_minitaur.hh"

namespace FrontStance
{

void Ce1_vec16_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
