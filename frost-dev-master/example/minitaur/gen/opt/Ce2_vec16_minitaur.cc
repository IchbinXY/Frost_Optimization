/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:11:07 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t45634;
  double t48630;
  double t54877;
  double t58614;
  double t62707;
  double t63180;
  double t62969;
  double t55392;
  double t63173;
  double t63177;
  double t63178;
  double t26309;
  double t63181;
  double t63182;
  double t63183;
  double t63309;
  double t63351;
  double t63430;
  double t64073;
  double t64075;
  double t64076;
  double t64085;
  double t64092;
  double t64149;
  double t64165;
  double t64166;
  double t64306;
  double t64310;
  double t64312;
  double t64272;
  double t64570;
  double t64571;
  double t64572;
  double t64576;
  double t64567;
  double t64577;
  double t64578;
  double t64581;
  double t64604;
  double t64649;
  double t64650;
  double t64723;
  double t64724;
  double t64725;
  double t64734;
  double t64740;
  double t64762;
  double t64764;
  double t64765;
  double t64774;
  double t64775;
  double t64776;
  double t64778;
  double t64780;
  double t64782;
  double t64784;
  double t64786;
  double t64787;
  double t64742;
  double t64751;
  double t64754;
  double t64755;
  double t64756;
  double t64757;
  double t64767;
  double t64768;
  double t64770;
  double t64743;
  double t64746;
  double t64747;
  double t64758;
  double t64759;
  double t64760;
  double t64814;
  double t64816;
  double t64824;
  double t64826;
  double t64828;
  double t64830;
  double t64831;
  double t64832;
  double t64838;
  double t64839;
  double t64840;
  double t64841;
  double t64842;
  double t64852;
  double t64853;
  double t64854;
  double t64855;
  double t64856;
  double t64857;
  double t64834;
  double t64836;
  double t64307;
  double t64311;
  double t64330;
  double t64369;
  double t64888;
  double t64881;
  double t64903;
  double t64882;
  double t64883;
  double t64885;
  double t64886;
  double t64889;
  double t64890;
  double t64892;
  double t64893;
  double t64897;
  double t64900;
  double t64901;
  double t64905;
  double t64907;
  double t64908;
  double t64909;
  double t64911;
  double t64912;
  double t64913;
  double t64914;
  double t64915;
  double t64916;
  double t64390;
  double t64418;
  double t64455;
  double t64522;
  double t65011;
  double t64524;
  double t64525;
  double t64555;
  double t64556;
  double t64569;
  double t64593;
  double t64651;
  double t64652;
  double t65005;
  double t65006;
  double t65008;
  double t65009;
  double t64880;
  double t64891;
  double t64910;
  double t64917;
  double t64918;
  double t64923;
  double t64924;
  double t64926;
  double t65020;
  double t65021;
  double t65023;
  double t65026;
  double t64946;
  double t64948;
  double t64965;
  double t64985;
  double t65035;
  double t65038;
  double t65047;
  double t65048;
  double t65050;
  double t64872;
  double t64874;
  double t64875;
  double t64878;
  double t64990;
  double t64991;
  double t64993;
  double t64999;
  double t65000;
  double t65074;
  double t65075;
  double t65076;
  double t65077;
  double t64933;
  double t64934;
  double t64935;
  double t64936;
  double t64943;
  double t65079;
  double t65080;
  double t65081;
  double t64656;
  double t64657;
  double t64658;
  double t64663;
  double t64666;
  double t64667;
  double t64668;
  double t64669;
  double t65010;
  double t65012;
  double t65013;
  double t65016;
  double t63796;
  double t65067;
  double t65069;
  double t65070;
  double t65071;
  double t65078;
  double t65082;
  double t65083;
  double t65084;
  double t63179;
  double t64147;
  double t64148;
  double t64150;
  double t64169;
  double t64179;
  double t64183;
  double t64218;
  double t64236;
  double t64255;
  double t64256;
  double t64257;
  double t64263;
  double t64296;
  double t64298;
  double t64299;
  double t64302;
  double t65127;
  double t65129;
  double t65130;
  double t65133;
  double t65137;
  double t65139;
  double t65140;
  double t65143;
  double t65146;
  double t65147;
  double t65148;
  double t64385;
  double t64523;
  double t64557;
  double t64558;
  double t64559;
  double t64560;
  double t65161;
  double t65162;
  double t65164;
  double t65167;
  double t65169;
  double t65170;
  double t65171;
  double t65172;
  double t65230;
  double t65231;
  double t65232;
  double t65233;
  double t65273;
  double t65274;
  double t65277;
  double t65279;
  double t64655;
  double t64664;
  double t64670;
  double t64671;
  double t64674;
  double t64678;
  double t64843;
  double t64844;
  double t64846;
  double t64848;
  double t64849;
  double t64864;
  double t64865;
  double t64866;
  double t64867;
  double t64868;
  double t64869;
  double t65316;
  double t65318;
  double t65319;
  double t65320;
  double t65324;
  double t65325;
  double t65326;
  double t65327;
  double t65302;
  double t65341;
  double t65343;
  double t65345;
  double t65346;
  double t65348;
  double t65350;
  double t65351;
  double t65356;
  double t65372;
  double t65373;
  double t65374;
  double t65375;
  double t65377;
  double t65379;
  double t65380;
  double t65381;
  double t65136;
  double t65142;
  double t65149;
  double t65150;
  double t65151;
  double t65152;
  double t65211;
  double t65220;
  double t65222;
  double t65223;
  double t65225;
  double t65226;
  double t65283;
  double t65284;
  double t65285;
  double t65286;
  double t65287;
  double t65288;
  double t65449;
  double t65468;
  double t65471;
  double t65450;
  double t65452;
  double t65459;
  double t65472;
  double t65473;
  double t65491;
  double t65493;
  double t65496;
  double t65498;
  double t65503;
  double t65514;
  double t65517;
  double t65518;
  double t65522;
  double t65523;
  double t65524;
  double t65534;
  double t65535;
  double t65540;
  double t65549;
  double t65550;
  double t65552;
  double t65570;
  double t65572;
  double t65574;
  double t65578;
  double t65581;
  double t65587;
  double t65594;
  double t65599;
  double t65600;
  double t65609;
  double t65610;
  double t65614;
  double t65622;
  double t65625;
  double t65626;
  double t65630;
  double t65637;
  double t65638;
  double t65655;
  double t65657;
  double t65658;
  double t65666;
  double t65673;
  double t65694;
  double t65703;
  double t65705;
  double t65708;
  double t65714;
  double t65715;
  double t65719;
  double t65724;
  double t65726;
  double t65727;
  double t65738;
  double t65744;
  double t65751;
  double t64817;
  double t64820;
  double t65887;
  double t65888;
  double t65891;
  double t64810;
  double t65902;
  double t65908;
  double t65911;
  double t65930;
  double t65931;
  double t65933;
  double t64800;
  double t65996;
  double t65998;
  double t66000;
  double t66002;
  double t66007;
  double t66008;
  double t66014;
  double t66017;
  double t66020;
  double t65914;
  double t65943;
  double t65964;
  double t64804;
  double t64791;
  double t64766;
  double t64773;
  double t66190;
  double t66197;
  double t66198;
  double t66212;
  double t66213;
  double t66221;
  double t66210;
  double t66224;
  double t66225;
  double t65240;
  double t65245;
  double t65261;
  double t65265;
  double t66245;
  double t66246;
  double t66248;
  double t66252;
  double t66255;
  double t66258;
  double t66232;
  double t66233;
  double t66236;
  double t66305;
  double t66312;
  double t66318;
  double t65177;
  double t65180;
  double t66326;
  double t66327;
  double t66329;
  double t65191;
  double t65196;
  double t64921;
  double t65018;
  double t66337;
  double t66338;
  double t66339;
  double t66342;
  double t66346;
  double t66347;
  double t65098;
  double t65117;
  double t65974;
  double t66430;
  double t66431;
  double t66432;
  double t66435;
  double t66437;
  double t66438;
  double t66001;
  double t66025;
  double t66034;
  double t66457;
  double t66458;
  double t66461;
  double t66464;
  double t66465;
  double t66467;
  double t66480;
  double t66483;
  double t66488;
  double t66059;
  double t66068;
  double t66433;
  double t66440;
  double t66441;
  double t66109;
  double t66116;
  double t66130;
  double t66138;
  double t66145;
  double t66153;
  double t66160;
  double t66165;
  double t66611;
  double t66613;
  double t66614;
  double t66618;
  double t66620;
  double t66621;
  double t66615;
  double t66622;
  double t66623;
  double t66250;
  double t66261;
  double t66268;
  double t66270;
  double t66636;
  double t66637;
  double t66638;
  double t66640;
  double t66641;
  double t66642;
  double t66626;
  double t66628;
  double t66629;
  double t66688;
  double t66689;
  double t66695;
  double t66361;
  double t66364;
  double t66704;
  double t66708;
  double t66714;
  double t66380;
  double t66383;
  double t66394;
  double t66397;
  double t66735;
  double t66737;
  double t66738;
  double t66741;
  double t66743;
  double t66745;
  double t66415;
  double t66416;
  double t65820;
  double t65821;
  double t65824;
  double t65832;
  double t65834;
  double t65837;
  double t65879;
  double t65882;
  double t65883;
  double t64748;
  double t64761;
  double t64779;
  double t64788;
  double t64789;
  double t64790;
  double t64793;
  double t64794;
  double t64795;
  double t64796;
  double t64798;
  double t64799;
  double t64802;
  double t64803;
  double t64806;
  double t64807;
  double t64808;
  double t64809;
  double t64811;
  double t64812;
  double t64813;
  double t64822;
  double t64823;
  double t65765;
  double t65775;
  double t65777;
  double t65780;
  double t65781;
  double t65786;
  double t65794;
  double t65795;
  double t65796;
  double t64859;
  double t64860;
  double t64861;
  double t64862;
  double t65802;
  double t65803;
  double t65804;
  double t64945;
  double t65001;
  double t65034;
  double t65062;
  double t65063;
  double t65065;
  double t65072;
  double t65085;
  double t65086;
  double t65111;
  double t65112;
  double t65115;
  double t65119;
  double t65121;
  double t65126;
  double t65810;
  double t65813;
  double t65816;
  double t65155;
  double t65156;
  double t65158;
  double t65168;
  double t65173;
  double t65174;
  double t65176;
  double t65178;
  double t65179;
  double t65183;
  double t65184;
  double t65185;
  double t65187;
  double t65189;
  double t65190;
  double t65192;
  double t65193;
  double t65194;
  double t65197;
  double t65198;
  double t65199;
  double t65845;
  double t65852;
  double t65858;
  double t65238;
  double t65241;
  double t65243;
  double t65246;
  double t65249;
  double t65252;
  double t65255;
  double t65262;
  double t65264;
  double t65266;
  double t65269;
  double t65270;
  double t65272;
  double t65280;
  double t65281;
  double t65868;
  double t65870;
  double t65871;
  double t65290;
  double t65291;
  double t65292;
  double t65310;
  double t65315;
  double t65322;
  double t65328;
  double t65329;
  double t65331;
  double t65332;
  double t65333;
  double t65334;
  double t65338;
  double t65340;
  double t65347;
  double t65357;
  double t65359;
  double t65360;
  double t65361;
  double t65362;
  double t65363;
  double t65365;
  double t65367;
  double t65369;
  double t65371;
  double t65376;
  double t65383;
  double t65387;
  double t65416;
  double t65423;
  double t65427;
  double t65428;
  double t65779;
  double t65787;
  double t65799;
  double t65809;
  double t65817;
  double t65826;
  double t65844;
  double t65866;
  double t65874;
  double t65884;
  double t65885;
  double t65519;
  double t65525;
  double t65528;
  double t65497;
  double t65511;
  double t65512;
  double t65544;
  double t65561;
  double t65563;
  double t65467;
  double t65484;
  double t65486;
  double t65603;
  double t65615;
  double t65619;
  double t65577;
  double t65588;
  double t65591;
  double t65659;
  double t65695;
  double t65698;
  double t65627;
  double t65639;
  double t65641;
  double t65735;
  double t65754;
  double t65755;
  double t65711;
  double t65721;
  double t65722;
  double t65968;
  double t65976;
  double t65979;
  double t65981;
  double t65983;
  double t66011;
  double t66012;
  double t66013;
  double t66023;
  double t66024;
  double t66032;
  double t66036;
  double t66038;
  double t66040;
  double t66041;
  double t66051;
  double t66056;
  double t66060;
  double t66062;
  double t66063;
  double t66065;
  double t66070;
  double t66071;
  double t66072;
  double t66075;
  double t66082;
  double t66085;
  double t66114;
  double t66115;
  double t66118;
  double t66123;
  double t66124;
  double t66910;
  double t66913;
  double t66914;
  double t66131;
  double t66132;
  double t66134;
  double t66142;
  double t66147;
  double t66148;
  double t66152;
  double t66155;
  double t66157;
  double t66159;
  double t66162;
  double t66163;
  double t66167;
  double t66168;
  double t66173;
  double t66244;
  double t66260;
  double t66262;
  double t66265;
  double t66266;
  double t66269;
  double t66272;
  double t66274;
  double t66275;
  double t66276;
  double t66277;
  double t66322;
  double t66330;
  double t66331;
  double t66340;
  double t66349;
  double t66358;
  double t66230;
  double t66237;
  double t66240;
  double t66360;
  double t66362;
  double t66367;
  double t66371;
  double t66377;
  double t66378;
  double t66379;
  double t66385;
  double t66386;
  double t66387;
  double t66391;
  double t66395;
  double t66398;
  double t66406;
  double t66407;
  double t66411;
  double t66412;
  double t66413;
  double t66417;
  double t66418;
  double t66421;
  double t66422;
  double t66443;
  double t66444;
  double t66445;
  double t66446;
  double t66450;
  double t66452;
  double t66462;
  double t66469;
  double t66473;
  double t66474;
  double t66503;
  double t66505;
  double t66507;
  double t66512;
  double t66513;
  double t66514;
  double t66523;
  double t66525;
  double t66533;
  double t66535;
  double t66537;
  double t66540;
  double t66541;
  double t66543;
  double t66545;
  double t66547;
  double t66558;
  double t66559;
  double t66560;
  double t66561;
  double t66565;
  double t66566;
  double t66567;
  double t66569;
  double t66573;
  double t66574;
  double t66576;
  double t66580;
  double t66582;
  double t66583;
  double t66584;
  double t66585;
  double t66589;
  double t66590;
  double t66591;
  double t66592;
  double t66593;
  double t66594;
  double t66595;
  double t66598;
  double t66599;
  double t66600;
  double t66602;
  double t66603;
  double t66606;
  double t66607;
  double t66608;
  double t66624;
  double t66630;
  double t66631;
  double t66635;
  double t66639;
  double t66643;
  double t66646;
  double t66647;
  double t66648;
  double t66650;
  double t66651;
  double t66658;
  double t66664;
  double t66665;
  double t66666;
  double t66669;
  double t66674;
  double t66676;
  double t66697;
  double t66730;
  double t66731;
  double t66740;
  double t66749;
  double t66750;
  double t66755;
  double t66757;
  double t66769;
  double t66771;
  double t66772;
  double t66796;
  double t66801;
  double t66802;
  double t66805;
  double t66810;
  double t66811;
  double t66814;
  double t66830;
  double t66836;
  double t66839;
  double t66842;
  double t66846;
  double t66847;
  double t66848;
  double t66851;
  double t66852;
  double t66855;
  double t66856;
  double t66868;
  double t66874;
  double t66876;
  double t66878;
  double t66879;
  double t66880;
  double t66881;
  double t65490;
  double t65513;
  double t65530;
  double t65566;
  double t65592;
  double t65620;
  double t65652;
  double t65700;
  double t65723;
  double t65756;
  double t65758;
  double t66963;
  double t66965;
  double t66966;
  double t66970;
  double t66972;
  double t66975;
  double t66976;
  double t66978;
  double t66979;
  double t66980;
  double t66981;
  double t67047;
  double t67049;
  double t67050;
  double t67390;
  double t66455;
  double t66527;
  double t66544;
  double t66575;
  double t66609;
  double t66633;
  double t66683;
  double t66734;
  double t66754;
  double t66840;
  double t66885;
  double t66886;
  double t67184;
  double t67185;
  double t67186;
  double t67187;
  double t67191;
  double t67192;
  double t67193;
  double t67199;
  double t67204;
  double t67206;
  double t67207;
  double t67208;
  double t67022;
  double t67024;
  double t67025;
  double t67026;
  double t67027;
  double t67029;
  double t67030;
  double t67031;
  double t67032;
  double t67033;
  double t67034;
  double t67035;
  double t67277;
  double t67283;
  double t67329;
  double t67566;
  double t67567;
  double t67568;
  double t67337;
  double t67339;
  double t67341;
  double t67391;
  double t67394;
  double t67401;
  double t67416;
  double t67426;
  double t67450;
  double t67451;
  double t65986;
  double t66050;
  double t66067;
  double t66128;
  double t66178;
  double t66242;
  double t66295;
  double t66334;
  double t66359;
  double t66392;
  double t66424;
  double t66425;
  double t67147;
  double t67149;
  double t67151;
  double t67152;
  double t67155;
  double t67157;
  double t67166;
  double t67167;
  double t67168;
  double t67169;
  double t67174;
  double t67180;
  double t67001;
  double t67002;
  double t67003;
  double t67004;
  double t67006;
  double t67007;
  double t67008;
  double t67009;
  double t67011;
  double t67014;
  double t67015;
  double t67016;
  double t67507;
  double t67511;
  double t67512;
  double t67514;
  double t67540;
  double t67542;
  double t67545;
  double t67550;
  double t67551;
  double t67553;
  double t67557;
  double t67558;
  double t67562;
  double t67563;
  double t67564;
  double t67569;
  double t67581;
  double t67599;
  double t67600;
  double t67604;
  double t67606;
  double t67608;
  double t67618;
  double t64821;
  double t64833;
  double t64837;
  double t64851;
  double t64858;
  double t64863;
  double t64871;
  double t65153;
  double t65159;
  double t65175;
  double t65229;
  double t65289;
  double t65294;
  double t65295;
  double t67054;
  double t67057;
  double t67066;
  double t67070;
  double t67078;
  double t67080;
  double t67084;
  double t67086;
  double t67089;
  double t67090;
  double t67091;
  double t67100;
  double t67105;
  double t67106;
  double t66919;
  double t66927;
  double t66928;
  double t66929;
  double t66930;
  double t66934;
  double t66937;
  double t66943;
  double t66944;
  double t66945;
  double t66948;
  double t66949;
  double t66950;
  double t66951;
  double t67743;
  double t67760;
  double t67762;
  double t67763;
  double t67764;
  double t67766;
  double t67770;
  double t67774;
  double t67778;
  double t67781;
  double t67783;
  double t67784;
  double t67785;
  double t67790;
  double t67795;
  double t67799;
  double t67800;
  double t67801;
  double t67804;
  double t67806;
  double t67812;
  double t67817;
  double t67822;
  double t67826;
  double t67833;
  double t67219;
  double t67220;
  double t67221;
  double t67222;
  double t67227;
  double t67231;
  double t67237;
  double t67238;
  double t67245;
  double t67248;
  double t67249;
  double t67253;
  double t67268;
  double t67330;
  double t67331;
  double t67335;
  double t67336;
  double t67343;
  double t67351;
  double t67354;
  double t67355;
  double t67362;
  double t67369;
  double t67370;
  double t67372;
  double t68043;
  double t68047;
  double t68048;
  double t68056;
  double t68060;
  double t68061;
  double t68063;
  double t68064;
  double t68067;
  double t68070;
  double t68072;
  double t65297;
  double t65298;
  double t65337;
  double t65364;
  double t65430;
  double t65431;
  double t67109;
  double t67110;
  double t67112;
  double t67121;
  double t67123;
  double t67129;
  double t66953;
  double t66954;
  double t66956;
  double t66957;
  double t66958;
  double t66960;
  double t67841;
  double t67842;
  double t67849;
  double t67856;
  double t67857;
  double t67860;
  double t67884;
  double t67888;
  double t67912;
  double t67395;
  double t67419;
  double t67452;
  double t67460;
  double t67474;
  double t67477;
  double t67479;
  double t67482;
  double t67483;
  double t67959;
  double t67960;
  double t67962;
  double t67963;
  double t67965;
  double t64304;
  double t64561;
  double t64681;
  double t64688;
  double t67039;
  double t67040;
  double t67041;
  double t67044;
  double t66893;
  double t66895;
  double t66899;
  double t66902;
  double t67664;
  double t67674;
  double t67692;
  double t67698;
  double t67701;
  double t67213;
  double t67214;
  double t67215;
  double t67216;
  double t67217;
  t45634 = Cos(var1[17]);
  t48630 = -1.*t45634;
  t54877 = 1. + t48630;
  t58614 = 3.e-6*t54877;
  t62707 = Sin(var1[17]);
  t63180 = Cos(var1[15]);
  t62969 = 3.e-6*t62707;
  t55392 = 1.000000000009*t54877;
  t63173 = t58614 + t62969;
  t63177 = 3.e-6*t63173;
  t63178 = -1. + t55392 + t63177;
  t26309 = Sin(var1[15]);
  t63181 = -9.e-12*t54877;
  t63182 = -3.e-6*t62707;
  t63183 = t58614 + t63182;
  t63309 = 3.e-6*t63183;
  t63351 = -1.*t62707;
  t63430 = t63181 + t63309 + t63351;
  t64073 = -1.8e-11*t54877;
  t64075 = 1. + t64073;
  t64076 = 3.e-6*t64075;
  t64085 = -3.e-6*t54877;
  t64092 = t64076 + t64085 + t62969;
  t64149 = Sin(var1[4]);
  t64165 = Cos(var1[4]);
  t64166 = Cos(var1[5]);
  t64306 = -1. + t55392 + t63309;
  t64310 = t64076 + t64085 + t63182;
  t64312 = t63181 + t63177 + t62707;
  t64272 = Sin(var1[5]);
  t64570 = -1.000000000009*t54877;
  t64571 = 1. + t64570;
  t64572 = 3.e-6*t64571;
  t64576 = 9.e-12*t54877;
  t64567 = 1. + t64073 + t63309 + t63177;
  t64577 = t64576 + t63351;
  t64578 = 3.e-6*t64577;
  t64581 = t64572 + t58614 + t64578 + t62969;
  t64604 = t64576 + t62707;
  t64649 = 3.e-6*t64604;
  t64650 = t64572 + t58614 + t63182 + t64649;
  t64723 = -1.*t63180;
  t64724 = 1. + t64723;
  t64725 = -1.000000000009*t64724;
  t64734 = 1. + t64725;
  t64740 = 9.e-12*t64724;
  t64762 = 0.05*t64734;
  t64764 = 2.999982e-7*t26309;
  t64765 = t64762 + t64764;
  t64774 = 0.1999997000018*t64724;
  t64775 = 0.2*t63180;
  t64776 = -0.05*t26309;
  t64778 = t64774 + t64775 + t64776;
  t64780 = -1. + t64740;
  t64782 = 0.1*t64780;
  t64784 = -5.4e-18*t64724;
  t64786 = 1.5e-7*t26309;
  t64787 = t64782 + t64784 + t64786;
  t64742 = t64740 + t64723;
  t64751 = -9.e-12*t64724;
  t64754 = 1. + t64751;
  t64755 = 3.e-6*t64754;
  t64756 = -3.e-6*t64724;
  t64757 = t64755 + t64756;
  t64767 = 2.999982e-7*t63180;
  t64768 = -0.05000000000045*t26309;
  t64770 = t64767 + t64768;
  t64743 = -0.05*t63180;
  t64746 = -2.999982e-7*t26309;
  t64747 = t64743 + t64746;
  t64758 = 1.5e-7*t63180;
  t64759 = 8.999946e-13*t26309;
  t64760 = t64758 + t64759;
  t64814 = -3.e-6*t63180;
  t64816 = t64756 + t64814;
  t64824 = -1.000000000009*t26309*t64149;
  t64826 = t64742*t64166;
  t64828 = -1.*t64757*t64272;
  t64830 = t64826 + t64828;
  t64831 = t64165*t64830;
  t64832 = t64824 + t64831;
  t64838 = 0.1*t64754;
  t64839 = 5.4e-18*t64724;
  t64840 = t64816*t64778;
  t64841 = -1.5e-7*t26309;
  t64842 = t64838 + t64839 + t64840 + t64841;
  t64852 = t64734*t64149;
  t64853 = -1.*t64166*t26309;
  t64854 = -3.e-6*t26309*t64272;
  t64855 = t64853 + t64854;
  t64856 = t64165*t64855;
  t64857 = t64852 + t64856;
  t64834 = -1.*t64816*t64778;
  t64836 = t64782 + t64784 + t64834 + t64786;
  t64307 = t63180*t64306;
  t64311 = -3.e-6*t63180*t64310;
  t64330 = -1.000000000009*t26309*t64312;
  t64369 = t64307 + t64311 + t64330;
  t64888 = t64085 + t62969;
  t64881 = 9.e-13*var1[17];
  t64903 = t64085 + t63182;
  t64882 = 0.2*t64571;
  t64883 = 0.2000000000018*t54877;
  t64885 = t63181 + t63351;
  t64886 = 0.1*t64885;
  t64889 = 0.0999991*t64888;
  t64890 = t64881 + t64882 + t64883 + t64886 + t64889;
  t64892 = 3.e-7*var1[17];
  t64893 = 1.8e-11*t54877;
  t64897 = -1. + t64893;
  t64900 = 0.1*t64897;
  t64901 = -1.62e-17*t54877;
  t64905 = 0.2*t64903;
  t64907 = 0.1*t64888;
  t64908 = 0.2*t63173;
  t64909 = t64892 + t64900 + t64901 + t64905 + t64907 + t64908;
  t64911 = 0.1000000000009*t54877;
  t64912 = 0.2*t64577;
  t64913 = 0.0999991*t64903;
  t64914 = t63181 + t62707;
  t64915 = 0.2*t64914;
  t64916 = t64881 + t64911 + t64912 + t64913 + t64915;
  t64390 = -1.*t26309*t64306;
  t64418 = 3.e-6*t26309*t64310;
  t64455 = -1.*t63180*t64312;
  t64522 = t64390 + t64418 + t64455;
  t65011 = t63180*t64890;
  t64524 = 3.e-6*t26309*t64306;
  t64525 = -9.e-12*t26309*t64310;
  t64555 = 3.e-6*t63180*t64312;
  t64556 = t64524 + t64525 + t64555;
  t64569 = -3.e-6*t63180*t64567;
  t64593 = -1.000000000009*t26309*t64581;
  t64651 = t63180*t64650;
  t64652 = t64569 + t64593 + t64651;
  t65005 = t26309*t64306;
  t65006 = -3.e-6*t26309*t64310;
  t65008 = t64734*t64312;
  t65009 = t65005 + t65006 + t65008;
  t64880 = -0.2000000000018*t26309;
  t64891 = t26309*t64890;
  t64910 = -3.e-6*t26309*t64909;
  t64917 = t64734*t64916;
  t64918 = t64880 + t64891 + t64910 + t64917;
  t64923 = 3.e-6*t64724*t64310;
  t64924 = -1.*t26309*t64312;
  t64926 = t64307 + t64923 + t64924;
  t65020 = 0.2000000000018*t64724;
  t65021 = 3.e-6*t64724*t64909;
  t65023 = -1.*t26309*t64916;
  t65026 = t65020 + t65011 + t65021 + t65023;
  t64946 = 3.e-6*t64724*t64306;
  t64948 = t64754*t64310;
  t64965 = 3.e-6*t26309*t64312;
  t64985 = t64946 + t64948 + t64965;
  t65035 = -6.000000000054e-7*t64724;
  t65038 = 3.e-6*t64724*t64890;
  t65047 = t64754*t64909;
  t65048 = 3.e-6*t26309*t64916;
  t65050 = t65035 + t65038 + t65047 + t65048;
  t64872 = -3.e-6*t26309*t64567;
  t64874 = t64734*t64581;
  t64875 = t26309*t64650;
  t64878 = t64872 + t64874 + t64875;
  t64990 = -6.000000000054e-7*t26309;
  t64991 = 3.e-6*t26309*t64890;
  t64993 = -9.e-12*t26309*t64909;
  t64999 = 3.e-6*t63180*t64916;
  t65000 = t64990 + t64991 + t64993 + t64999;
  t65074 = t64754*t64567;
  t65075 = 3.e-6*t26309*t64581;
  t65076 = 3.e-6*t64724*t64650;
  t65077 = t65074 + t65075 + t65076;
  t64933 = 0.2000000000018*t26309;
  t64934 = -1.*t26309*t64890;
  t64935 = 3.e-6*t26309*t64909;
  t64936 = -1.*t63180*t64916;
  t64943 = t64933 + t64934 + t64935 + t64936;
  t65079 = 3.e-6*t64724*t64567;
  t65080 = -1.*t26309*t64581;
  t65081 = t65079 + t65080 + t64651;
  t64656 = 3.e-6*t26309*t64567;
  t64657 = -1.*t63180*t64581;
  t64658 = -1.*t26309*t64650;
  t64663 = t64656 + t64657 + t64658;
  t64666 = -9.e-12*t26309*t64567;
  t64667 = 3.e-6*t63180*t64581;
  t64668 = 3.e-6*t26309*t64650;
  t64669 = t64666 + t64667 + t64668;
  t65010 = -0.2000000000018*t63180;
  t65012 = -3.e-6*t63180*t64909;
  t65013 = -1.000000000009*t26309*t64916;
  t65016 = t65010 + t65011 + t65012 + t65013;
  t63796 = t63180*t63430;
  t65067 = -1.*t65009*t64918;
  t65069 = -1.*t64926*t65026;
  t65070 = -1.*t64985*t65050;
  t65071 = t65067 + t65069 + t65070;
  t65078 = t65050*t65077;
  t65082 = t65026*t65081;
  t65083 = t64918*t64878;
  t65084 = t65078 + t65082 + t65083;
  t63179 = -1.000000000009*t26309*t63178;
  t64147 = -3.e-6*t63180*t64092;
  t64148 = t63179 + t63796 + t64147;
  t64150 = t64148*t64149;
  t64169 = -1.*t63180*t63178;
  t64179 = -1.*t26309*t63430;
  t64183 = 3.e-6*t26309*t64092;
  t64218 = t64169 + t64179 + t64183;
  t64236 = t64166*t64218;
  t64255 = 3.e-6*t63180*t63178;
  t64256 = 3.e-6*t26309*t63430;
  t64257 = -9.e-12*t26309*t64092;
  t64263 = t64255 + t64256 + t64257;
  t64296 = -1.*t64263*t64272;
  t64298 = t64236 + t64296;
  t64299 = t64165*t64298;
  t64302 = t64150 + t64299;
  t65127 = t64734*t63178;
  t65129 = t26309*t63430;
  t65130 = -3.e-6*t26309*t64092;
  t65133 = t65127 + t65129 + t65130;
  t65137 = -1.*t26309*t63178;
  t65139 = 3.e-6*t64724*t64092;
  t65140 = t65137 + t63796 + t65139;
  t65143 = 3.e-6*t26309*t63178;
  t65146 = 3.e-6*t64724*t63430;
  t65147 = t64754*t64092;
  t65148 = t65143 + t65146 + t65147;
  t64385 = t64369*t64149;
  t64523 = t64166*t64522;
  t64557 = -1.*t64556*t64272;
  t64558 = t64523 + t64557;
  t64559 = t64165*t64558;
  t64560 = t64385 + t64559;
  t65161 = t65133*t64918;
  t65162 = t65140*t65026;
  t65164 = t65148*t65050;
  t65167 = t65161 + t65162 + t65164;
  t65169 = -1.*t65050*t65077;
  t65170 = -1.*t65026*t65081;
  t65171 = -1.*t64918*t64878;
  t65172 = t65169 + t65170 + t65171;
  t65230 = -1.*t65133*t64918;
  t65231 = -1.*t65140*t65026;
  t65232 = -1.*t65148*t65050;
  t65233 = t65230 + t65231 + t65232;
  t65273 = t65009*t64918;
  t65274 = t64926*t65026;
  t65277 = t64985*t65050;
  t65279 = t65273 + t65274 + t65277;
  t64655 = t64652*t64149;
  t64664 = t64166*t64663;
  t64670 = -1.*t64669*t64272;
  t64671 = t64664 + t64670;
  t64674 = t64165*t64671;
  t64678 = t64655 + t64674;
  t64843 = -1.*t63180*t64166;
  t64844 = -3.e-6*t63180*t64272;
  t64846 = t64843 + t64844;
  t64848 = t64165*t64846;
  t64849 = t64824 + t64848;
  t64864 = -1.000000000009*t63180*t64149;
  t64865 = 1.000000000009*t64166*t26309;
  t64866 = 3.000000000027e-6*t26309*t64272;
  t64867 = t64865 + t64866;
  t64868 = t64165*t64867;
  t64869 = t64864 + t64868;
  t65316 = -1.*t64306*t64890;
  t65318 = -1.*t64909*t64310;
  t65319 = -1.*t64312*t64916;
  t65320 = t65316 + t65318 + t65319;
  t65324 = t64567*t64909;
  t65325 = t64581*t64916;
  t65326 = t64890*t64650;
  t65327 = t65324 + t65325 + t65326;
  t65302 = -3.e-6*t63173;
  t65341 = t64890*t63430;
  t65343 = t64909*t64092;
  t65345 = t63178*t64916;
  t65346 = t65341 + t65343 + t65345;
  t65348 = -1.*t64567*t64909;
  t65350 = -1.*t64581*t64916;
  t65351 = -1.*t64890*t64650;
  t65356 = t65348 + t65350 + t65351;
  t65372 = -1.*t64890*t63430;
  t65373 = -1.*t64909*t64092;
  t65374 = -1.*t63178*t64916;
  t65375 = t65372 + t65373 + t65374;
  t65377 = t64306*t64890;
  t65379 = t64909*t64310;
  t65380 = t64312*t64916;
  t65381 = t65377 + t65379 + t65380;
  t65136 = t65133*t64149;
  t65142 = t64166*t65140;
  t65149 = -1.*t65148*t64272;
  t65150 = t65142 + t65149;
  t65151 = t64165*t65150;
  t65152 = t65136 + t65151;
  t65211 = t65009*t64149;
  t65220 = t64166*t64926;
  t65222 = -1.*t64985*t64272;
  t65223 = t65220 + t65222;
  t65225 = t64165*t65223;
  t65226 = t65211 + t65225;
  t65283 = t64878*t64149;
  t65284 = t64166*t65081;
  t65285 = -1.*t65077*t64272;
  t65286 = t65284 + t65285;
  t65287 = t64165*t65286;
  t65288 = t65283 + t65287;
  t65449 = Sin(var1[3]);
  t65468 = Cos(var1[3]);
  t65471 = -1.000000000009*t64165*t26309;
  t65450 = t64757*t64166;
  t65452 = t64742*t64272;
  t65459 = t65450 + t65452;
  t65472 = -1.*t64149*t64830;
  t65473 = t65471 + t65472;
  t65491 = 3.e-6*t63180*t64166;
  t65493 = -1.*t63180*t64272;
  t65496 = t65491 + t65493;
  t65498 = -1.*t64149*t64846;
  t65503 = t65471 + t65498;
  t65514 = 3.e-6*t64166*t26309;
  t65517 = -1.*t26309*t64272;
  t65518 = t65514 + t65517;
  t65522 = t64734*t64165;
  t65523 = -1.*t64149*t64855;
  t65524 = t65522 + t65523;
  t65534 = -3.000000000027e-6*t64166*t26309;
  t65535 = 1.000000000009*t26309*t64272;
  t65540 = t65534 + t65535;
  t65549 = -1.000000000009*t63180*t64165;
  t65550 = -1.*t64149*t64867;
  t65552 = t65549 + t65550;
  t65570 = t64166*t65148;
  t65572 = t65140*t64272;
  t65574 = t65570 + t65572;
  t65578 = t64165*t65133;
  t65581 = -1.*t64149*t65150;
  t65587 = t65578 + t65581;
  t65594 = t64166*t64263;
  t65599 = t64218*t64272;
  t65600 = t65594 + t65599;
  t65609 = t64165*t64148;
  t65610 = -1.*t64149*t64298;
  t65614 = t65609 + t65610;
  t65622 = t64166*t64556;
  t65625 = t64522*t64272;
  t65626 = t65622 + t65625;
  t65630 = t64165*t64369;
  t65637 = -1.*t64149*t64558;
  t65638 = t65630 + t65637;
  t65655 = t64166*t64985;
  t65657 = t64926*t64272;
  t65658 = t65655 + t65657;
  t65666 = t64165*t65009;
  t65673 = -1.*t64149*t65223;
  t65694 = t65666 + t65673;
  t65703 = t64166*t65077;
  t65705 = t65081*t64272;
  t65708 = t65703 + t65705;
  t65714 = t64165*t64878;
  t65715 = -1.*t64149*t65286;
  t65719 = t65714 + t65715;
  t65724 = t64166*t64669;
  t65726 = t64663*t64272;
  t65727 = t65724 + t65726;
  t65738 = t64165*t64652;
  t65744 = -1.*t64149*t64671;
  t65751 = t65738 + t65744;
  t64817 = t64816*t64166;
  t64820 = t64817 + t64272;
  t65887 = -1.*t64166;
  t65888 = t64816*t64272;
  t65891 = t65887 + t65888;
  t64810 = 1.000000000009*t64765*t26309;
  t65902 = t64166*t64787;
  t65908 = t64778*t64272;
  t65911 = t65902 + t65908;
  t65930 = t64166*t64778;
  t65931 = -1.*t64787*t64272;
  t65933 = t65930 + t65931;
  t64800 = -1.000000000009*t64765*t26309;
  t65996 = t64166*t64760;
  t65998 = t64747*t64272;
  t66000 = t65996 + t65998;
  t66002 = t64166*t64747;
  t66007 = -1.*t64760*t64272;
  t66008 = t66002 + t66007;
  t66014 = -1.*t65891*t65911;
  t66017 = -1.*t64820*t65933;
  t66020 = t66014 + t66017;
  t65914 = t65891*t65911;
  t65943 = t64820*t65933;
  t65964 = t65914 + t65943;
  t64804 = -1.*t64734*t64770;
  t64791 = -1.*t64734*t64765;
  t64766 = -1.000000000009*t63180*t64765;
  t64773 = -1.000000000009*t64770*t26309;
  t66190 = t64166*t65050;
  t66197 = t65026*t64272;
  t66198 = t66190 + t66197;
  t66212 = t64166*t65026;
  t66213 = -1.*t65050*t64272;
  t66221 = t66212 + t66213;
  t66210 = -1.*t65574*t66198;
  t66224 = -1.*t65150*t66221;
  t66225 = t65230 + t66210 + t66224;
  t65240 = -1.*t64148*t64918;
  t65245 = -1.*t65133*t65016;
  t65261 = t64369*t64918;
  t65265 = t65009*t65016;
  t66245 = t64166*t65000;
  t66246 = t64943*t64272;
  t66248 = t66245 + t66246;
  t66252 = t64166*t64943;
  t66255 = -1.*t65000*t64272;
  t66258 = t66252 + t66255;
  t66232 = t65658*t66198;
  t66233 = t65223*t66221;
  t66236 = t65273 + t66232 + t66233;
  t66305 = t65574*t66198;
  t66312 = t65150*t66221;
  t66318 = t65161 + t66305 + t66312;
  t65177 = t64148*t64918;
  t65180 = t65133*t65016;
  t66326 = -1.*t66221*t65286;
  t66327 = -1.*t66198*t65708;
  t66329 = t65171 + t66326 + t66327;
  t65191 = -1.*t64918*t64652;
  t65196 = -1.*t65016*t64878;
  t64921 = -1.*t64369*t64918;
  t65018 = -1.*t65009*t65016;
  t66337 = -1.*t65658*t66198;
  t66338 = -1.*t65223*t66221;
  t66339 = t65067 + t66337 + t66338;
  t66342 = t66221*t65286;
  t66346 = t66198*t65708;
  t66347 = t65083 + t66342 + t66346;
  t65098 = t64918*t64652;
  t65117 = t65016*t64878;
  t65974 = -1.*t65459*t65911;
  t66430 = t64765*t64149;
  t66431 = t64165*t65933;
  t66432 = t66430 + t66431;
  t66435 = t64165*t64765;
  t66437 = -1.*t64149*t65933;
  t66438 = t66435 + t66437;
  t66001 = -1.*t65891*t66000;
  t66025 = t65496*t65911;
  t66034 = t66000*t65518;
  t66457 = t64770*t64149;
  t66458 = t64165*t66008;
  t66461 = t66457 + t66458;
  t66464 = t64165*t64770;
  t66465 = -1.*t64149*t66008;
  t66467 = t66464 + t66465;
  t66480 = -1.*t64165*t64820*t66432;
  t66483 = t64149*t64820*t66438;
  t66488 = t66014 + t66480 + t66483;
  t66059 = t65911*t65518;
  t66068 = t65891*t66000;
  t66433 = t64165*t64820*t66432;
  t66440 = -1.*t64149*t64820*t66438;
  t66441 = t65914 + t66433 + t66440;
  t66109 = -1.*t65459*t66000;
  t66116 = -1.*t65911*t65540;
  t66130 = t65459*t65911;
  t66138 = -1.*t65496*t65911;
  t66145 = -1.*t66000*t65518;
  t66153 = -1.*t65911*t65518;
  t66160 = t65459*t66000;
  t66165 = t65911*t65540;
  t66611 = t64918*t64149;
  t66613 = t64165*t66221;
  t66614 = t66611 + t66613;
  t66618 = t64165*t64918;
  t66620 = -1.*t64149*t66221;
  t66621 = t66618 + t66620;
  t66615 = -1.*t65152*t66614;
  t66622 = -1.*t65587*t66621;
  t66623 = t66210 + t66615 + t66622;
  t66250 = -1.*t65574*t66248;
  t66261 = -1.*t65600*t66198;
  t66268 = t65658*t66248;
  t66270 = t65626*t66198;
  t66636 = t65016*t64149;
  t66637 = t64165*t66258;
  t66638 = t66636 + t66637;
  t66640 = t64165*t65016;
  t66641 = -1.*t64149*t66258;
  t66642 = t66640 + t66641;
  t66626 = t65226*t66614;
  t66628 = t65694*t66621;
  t66629 = t66232 + t66626 + t66628;
  t66688 = t65152*t66614;
  t66689 = t65587*t66621;
  t66695 = t66305 + t66688 + t66689;
  t66361 = t65574*t66248;
  t66364 = t65600*t66198;
  t66704 = -1.*t66614*t65288;
  t66708 = -1.*t66621*t65719;
  t66714 = t66327 + t66704 + t66708;
  t66380 = -1.*t66248*t65708;
  t66383 = -1.*t66198*t65727;
  t66394 = -1.*t65658*t66248;
  t66397 = -1.*t65626*t66198;
  t66735 = -1.*t65226*t66614;
  t66737 = -1.*t65694*t66621;
  t66738 = t66337 + t66735 + t66737;
  t66741 = t66614*t65288;
  t66743 = t66621*t65719;
  t66745 = t66346 + t66741 + t66743;
  t66415 = t66248*t65708;
  t66416 = t66198*t65727;
  t65820 = t65468*t65600;
  t65821 = -1.*t65449*t65614;
  t65824 = t65820 + t65821;
  t65832 = t65468*t65626;
  t65834 = -1.*t65449*t65638;
  t65837 = t65832 + t65834;
  t65879 = t65468*t65727;
  t65882 = -1.*t65449*t65751;
  t65883 = t65879 + t65882;
  t64748 = t64742*t64747;
  t64761 = t64757*t64760;
  t64779 = 1.000000000009*t64778*t26309;
  t64788 = -3.000000000027e-6*t64787*t26309;
  t64789 = t64748 + t64761 + t64766 + t64773 + t64779 + t64788;
  t64790 = t64734*t64789;
  t64793 = t64778*t26309;
  t64794 = -3.e-6*t64787*t26309;
  t64795 = t64791 + t64793 + t64794;
  t64796 = -1.000000000009*t63180*t64795;
  t64798 = t64742*t64778;
  t64799 = t64757*t64787;
  t64802 = t64798 + t64799 + t64800;
  t64803 = -1.000000000009*t26309*t64802;
  t64806 = t63180*t64778;
  t64807 = -3.e-6*t63180*t64787;
  t64808 = t64747*t26309;
  t64809 = -3.e-6*t64760*t26309;
  t64811 = t64804 + t64806 + t64807 + t64808 + t64809 + t64810;
  t64812 = -1.000000000009*t26309*t64811;
  t64813 = t64790 + t64796 + t64803 + t64812;
  t64822 = -1.*t64816*t64747;
  t64823 = t64758 + t64822 + t64759;
  t65765 = t65468*t65459;
  t65775 = -1.*t65449*t65473;
  t65777 = t65765 + t65775;
  t65780 = t65468*t65496;
  t65781 = -1.*t65449*t65503;
  t65786 = t65780 + t65781;
  t65794 = t65468*t65518;
  t65795 = -1.*t65449*t65524;
  t65796 = t65794 + t65795;
  t64859 = -1.5e-7*t63180;
  t64860 = t64816*t64747;
  t64861 = -8.999946e-13*t26309;
  t64862 = t64859 + t64860 + t64861;
  t65802 = t65468*t65540;
  t65803 = -1.*t65449*t65552;
  t65804 = t65802 + t65803;
  t64945 = -1.*t64926*t64943;
  t65001 = -1.*t64985*t65000;
  t65034 = -1.*t64522*t65026;
  t65062 = -1.*t64556*t65050;
  t65063 = t64921 + t64945 + t65001 + t65018 + t65034 + t65062;
  t65065 = t64878*t65063;
  t65072 = t64652*t65071;
  t65085 = t64369*t65084;
  t65086 = t65000*t65077;
  t65111 = t64943*t65081;
  t65112 = t65026*t64663;
  t65115 = t65050*t64669;
  t65119 = t65086 + t65098 + t65111 + t65112 + t65115 + t65117;
  t65121 = t65009*t65119;
  t65126 = t65065 + t65072 + t65085 + t65121;
  t65810 = t65468*t65574;
  t65813 = -1.*t65449*t65587;
  t65816 = t65810 + t65813;
  t65155 = t64878*t65071;
  t65156 = t65009*t65084;
  t65158 = t65155 + t65156;
  t65168 = t64878*t65167;
  t65173 = t65133*t65172;
  t65174 = t65168 + t65173;
  t65176 = t64652*t65167;
  t65178 = t65140*t64943;
  t65179 = t65148*t65000;
  t65183 = t64218*t65026;
  t65184 = t64263*t65050;
  t65185 = t65177 + t65178 + t65179 + t65180 + t65183 + t65184;
  t65187 = t64878*t65185;
  t65189 = t64148*t65172;
  t65190 = -1.*t65000*t65077;
  t65192 = -1.*t64943*t65081;
  t65193 = -1.*t65026*t64663;
  t65194 = -1.*t65050*t64669;
  t65197 = t65190 + t65191 + t65192 + t65193 + t65194 + t65196;
  t65198 = t65133*t65197;
  t65199 = t65176 + t65187 + t65189 + t65198;
  t65845 = t65468*t65658;
  t65852 = -1.*t65449*t65694;
  t65858 = t65845 + t65852;
  t65238 = t64369*t65233;
  t65241 = -1.*t65140*t64943;
  t65243 = -1.*t65148*t65000;
  t65246 = -1.*t64218*t65026;
  t65249 = -1.*t64263*t65050;
  t65252 = t65240 + t65241 + t65243 + t65245 + t65246 + t65249;
  t65255 = t65009*t65252;
  t65262 = t64926*t64943;
  t65264 = t64985*t65000;
  t65266 = t64522*t65026;
  t65269 = t64556*t65050;
  t65270 = t65261 + t65262 + t65264 + t65265 + t65266 + t65269;
  t65272 = t65133*t65270;
  t65280 = t64148*t65279;
  t65281 = t65238 + t65255 + t65272 + t65280;
  t65868 = t65468*t65708;
  t65870 = -1.*t65449*t65719;
  t65871 = t65868 + t65870;
  t65290 = t65009*t65233;
  t65291 = t65133*t65279;
  t65292 = t65290 + t65291;
  t65310 = 1. + t64570 + t65302;
  t65315 = 0.2*t65310;
  t65322 = -1.*t64567*t65320;
  t65328 = -1.*t64310*t65327;
  t65329 = t64650*t65320;
  t65331 = t64306*t65327;
  t65332 = t65329 + t65331;
  t65333 = -3.e-6*t65332;
  t65334 = t65315 + t65322 + t65328 + t65333;
  t65338 = t64576 + t65302 + t63351;
  t65340 = 0.2*t65338;
  t65347 = -1.*t64567*t65346;
  t65357 = -1.*t64092*t65356;
  t65359 = t64650*t65346;
  t65360 = t63430*t65356;
  t65361 = t65359 + t65360;
  t65362 = -3.e-6*t65361;
  t65363 = t65340 + t65347 + t65357 + t65362;
  t65365 = -3.e-6*t64571;
  t65367 = -3.e-6*t64577;
  t65369 = t65365 + t64085 + t65367 + t63182;
  t65371 = 0.2*t65369;
  t65376 = -1.*t64310*t65375;
  t65383 = -1.*t64092*t65381;
  t65387 = t64306*t65375;
  t65416 = t63430*t65381;
  t65423 = t65387 + t65416;
  t65427 = -3.e-6*t65423;
  t65428 = t65371 + t65376 + t65383 + t65427;
  t65779 = 0.026*t64869*t65777;
  t65787 = 0.026*t64857*t65786;
  t65799 = 0.026*t64849*t65796;
  t65809 = 0.026*t64832*t65804;
  t65817 = 0.043*t64302*t65816;
  t65826 = 0.043*t65152*t65824;
  t65844 = 0.043*t65226*t65837;
  t65866 = 0.043*t64560*t65858;
  t65874 = 0.043*t64678*t65871;
  t65884 = 0.043*t65288*t65883;
  t65885 = t65779 + t65787 + t65799 + t65809 + t65817 + t65826 + t65844 + t65866 + t65874 + t65884;
  t65519 = t65449*t65518;
  t65525 = t65468*t65524;
  t65528 = t65519 + t65525;
  t65497 = t65449*t65496;
  t65511 = t65468*t65503;
  t65512 = t65497 + t65511;
  t65544 = t65449*t65540;
  t65561 = t65468*t65552;
  t65563 = t65544 + t65561;
  t65467 = t65449*t65459;
  t65484 = t65468*t65473;
  t65486 = t65467 + t65484;
  t65603 = t65449*t65600;
  t65615 = t65468*t65614;
  t65619 = t65603 + t65615;
  t65577 = t65449*t65574;
  t65588 = t65468*t65587;
  t65591 = t65577 + t65588;
  t65659 = t65449*t65658;
  t65695 = t65468*t65694;
  t65698 = t65659 + t65695;
  t65627 = t65449*t65626;
  t65639 = t65468*t65638;
  t65641 = t65627 + t65639;
  t65735 = t65449*t65727;
  t65754 = t65468*t65751;
  t65755 = t65735 + t65754;
  t65711 = t65449*t65708;
  t65721 = t65468*t65719;
  t65722 = t65711 + t65721;
  t65968 = t65459*t65964;
  t65976 = -1.*t64830*t65933;
  t65979 = t64810 + t65974 + t65976;
  t65981 = t65891*t65979;
  t65983 = t65968 + t65981;
  t66011 = -1.*t64820*t66008;
  t66012 = t66001 + t66011;
  t66013 = t65518*t66012;
  t66023 = t65496*t66020;
  t66024 = t64734*t64770;
  t66032 = t64846*t65933;
  t66036 = t66008*t64855;
  t66038 = t66024 + t64800 + t66025 + t66032 + t66034 + t66036;
  t66040 = t65891*t66038;
  t66041 = t66013 + t66023 + t66040;
  t66051 = t65518*t66020;
  t66056 = t64734*t64765;
  t66060 = t65933*t64855;
  t66062 = t66056 + t66059 + t66060;
  t66063 = t65891*t66062;
  t66065 = t66051 + t66063;
  t66070 = t64820*t66008;
  t66071 = t66068 + t66070;
  t66072 = t65459*t66071;
  t66075 = t65540*t65964;
  t66082 = 1.000000000009*t63180*t64765;
  t66085 = 1.000000000009*t64770*t26309;
  t66114 = -1.*t64830*t66008;
  t66115 = -1.*t65933*t64867;
  t66118 = t66082 + t66085 + t66109 + t66114 + t66115 + t66116;
  t66123 = t65891*t66118;
  t66124 = t66072 + t66075 + t66123;
  t66910 = t65449*t64149*t64820;
  t66913 = t65468*t65891;
  t66914 = t66910 + t66913;
  t66131 = t64830*t65933;
  t66132 = t64800 + t66130 + t66131;
  t66134 = t65496*t66132;
  t66142 = -1.*t64846*t65933;
  t66147 = -1.*t66008*t64855;
  t66148 = t64804 + t64810 + t66138 + t66142 + t66145 + t66147;
  t66152 = t65459*t66148;
  t66155 = -1.*t65933*t64855;
  t66157 = t64791 + t66153 + t66155;
  t66159 = t65540*t66157;
  t66162 = t64830*t66008;
  t66163 = t65933*t64867;
  t66167 = t64766 + t64773 + t66160 + t66162 + t66163 + t66165;
  t66168 = t65518*t66167;
  t66173 = t66134 + t66152 + t66159 + t66168;
  t66244 = t65626*t66225;
  t66260 = -1.*t65150*t66258;
  t66262 = -1.*t64298*t66221;
  t66265 = t65240 + t65245 + t66250 + t66260 + t66261 + t66262;
  t66266 = t65658*t66265;
  t66269 = t65223*t66258;
  t66272 = t64558*t66221;
  t66274 = t65261 + t65265 + t66268 + t66269 + t66270 + t66272;
  t66275 = t65574*t66274;
  t66276 = t65600*t66236;
  t66277 = t66244 + t66266 + t66275 + t66276;
  t66322 = t65708*t66318;
  t66330 = t65574*t66329;
  t66331 = t66322 + t66330;
  t66340 = t65708*t66339;
  t66349 = t65658*t66347;
  t66358 = t66340 + t66349;
  t66230 = t65658*t66225;
  t66237 = t65574*t66236;
  t66240 = t66230 + t66237;
  t66360 = t65727*t66318;
  t66362 = t65150*t66258;
  t66367 = t64298*t66221;
  t66371 = t65177 + t65180 + t66361 + t66362 + t66364 + t66367;
  t66377 = t65708*t66371;
  t66378 = t65600*t66329;
  t66379 = -1.*t66258*t65286;
  t66385 = -1.*t66221*t64671;
  t66386 = t65191 + t65196 + t66379 + t66380 + t66383 + t66385;
  t66387 = t65574*t66386;
  t66391 = t66360 + t66377 + t66378 + t66387;
  t66395 = -1.*t65223*t66258;
  t66398 = -1.*t64558*t66221;
  t66406 = t64921 + t65018 + t66394 + t66395 + t66397 + t66398;
  t66407 = t65708*t66406;
  t66411 = t65727*t66339;
  t66412 = t65626*t66347;
  t66413 = t66258*t65286;
  t66417 = t66221*t64671;
  t66418 = t65098 + t65117 + t66413 + t66415 + t66416 + t66417;
  t66421 = t65658*t66418;
  t66422 = t66407 + t66411 + t66412 + t66421;
  t66443 = t64832*t66441;
  t66444 = -1.*t64832*t66432;
  t66445 = -1.*t65473*t66438;
  t66446 = t65974 + t66444 + t66445;
  t66450 = t64165*t64820*t66446;
  t66452 = t66443 + t66450;
  t66462 = -1.*t64165*t64820*t66461;
  t66469 = t64149*t64820*t66467;
  t66473 = t66001 + t66462 + t66469;
  t66474 = t64857*t66473;
  t66503 = t64849*t66488;
  t66505 = t64849*t66432;
  t66507 = t65503*t66438;
  t66512 = t66461*t64857;
  t66513 = t66467*t65524;
  t66514 = t66025 + t66034 + t66505 + t66507 + t66512 + t66513;
  t66523 = t64165*t64820*t66514;
  t66525 = t66474 + t66503 + t66523;
  t66533 = t64857*t66488;
  t66535 = t66432*t64857;
  t66537 = t66438*t65524;
  t66540 = t66059 + t66535 + t66537;
  t66541 = t64165*t64820*t66540;
  t66543 = t66533 + t66541;
  t66545 = t64165*t64820*t66461;
  t66547 = -1.*t64149*t64820*t66467;
  t66558 = t66068 + t66545 + t66547;
  t66559 = t64832*t66558;
  t66560 = t64869*t66441;
  t66561 = -1.*t64832*t66461;
  t66565 = -1.*t65473*t66467;
  t66566 = -1.*t66432*t64869;
  t66567 = -1.*t66438*t65552;
  t66569 = t66109 + t66116 + t66561 + t66565 + t66566 + t66567;
  t66573 = t64165*t64820*t66569;
  t66574 = t66559 + t66560 + t66573;
  t66576 = t64832*t66432;
  t66580 = t65473*t66438;
  t66582 = t66130 + t66576 + t66580;
  t66583 = t64849*t66582;
  t66584 = -1.*t64849*t66432;
  t66585 = -1.*t65503*t66438;
  t66589 = -1.*t66461*t64857;
  t66590 = -1.*t66467*t65524;
  t66591 = t66138 + t66145 + t66584 + t66585 + t66589 + t66590;
  t66592 = t64832*t66591;
  t66593 = -1.*t66432*t64857;
  t66594 = -1.*t66438*t65524;
  t66595 = t66153 + t66593 + t66594;
  t66598 = t64869*t66595;
  t66599 = t64832*t66461;
  t66600 = t65473*t66467;
  t66602 = t66432*t64869;
  t66603 = t66438*t65552;
  t66606 = t66160 + t66165 + t66599 + t66600 + t66602 + t66603;
  t66607 = t64857*t66606;
  t66608 = t66583 + t66592 + t66598 + t66607;
  t66624 = t65226*t66623;
  t66630 = t65152*t66629;
  t66631 = t66624 + t66630;
  t66635 = t64560*t66623;
  t66639 = -1.*t65152*t66638;
  t66643 = -1.*t65587*t66642;
  t66646 = -1.*t64302*t66614;
  t66647 = -1.*t65614*t66621;
  t66648 = t66250 + t66261 + t66639 + t66643 + t66646 + t66647;
  t66650 = t65226*t66648;
  t66651 = t65226*t66638;
  t66658 = t65694*t66642;
  t66664 = t64560*t66614;
  t66665 = t65638*t66621;
  t66666 = t66268 + t66270 + t66651 + t66658 + t66664 + t66665;
  t66669 = t65152*t66666;
  t66674 = t64302*t66629;
  t66676 = t66635 + t66650 + t66669 + t66674;
  t66697 = t65288*t66695;
  t66730 = t65152*t66714;
  t66731 = t66697 + t66730;
  t66740 = t65288*t66738;
  t66749 = t65226*t66745;
  t66750 = t66740 + t66749;
  t66755 = t64678*t66695;
  t66757 = t65152*t66638;
  t66769 = t65587*t66642;
  t66771 = t64302*t66614;
  t66772 = t65614*t66621;
  t66796 = t66361 + t66364 + t66757 + t66769 + t66771 + t66772;
  t66801 = t65288*t66796;
  t66802 = t64302*t66714;
  t66805 = -1.*t66638*t65288;
  t66810 = -1.*t66642*t65719;
  t66811 = -1.*t66614*t64678;
  t66814 = -1.*t66621*t65751;
  t66830 = t66380 + t66383 + t66805 + t66810 + t66811 + t66814;
  t66836 = t65152*t66830;
  t66839 = t66755 + t66801 + t66802 + t66836;
  t66842 = -1.*t65226*t66638;
  t66846 = -1.*t65694*t66642;
  t66847 = -1.*t64560*t66614;
  t66848 = -1.*t65638*t66621;
  t66851 = t66394 + t66397 + t66842 + t66846 + t66847 + t66848;
  t66852 = t65288*t66851;
  t66855 = t64678*t66738;
  t66856 = t64560*t66745;
  t66868 = t66638*t65288;
  t66874 = t66642*t65719;
  t66876 = t66614*t64678;
  t66878 = t66621*t65751;
  t66879 = t66415 + t66416 + t66868 + t66874 + t66876 + t66878;
  t66880 = t65226*t66879;
  t66881 = t66852 + t66855 + t66856 + t66880;
  t65490 = 0.026*t64869*t65486;
  t65513 = 0.026*t64857*t65512;
  t65530 = 0.026*t64849*t65528;
  t65566 = 0.026*t64832*t65563;
  t65592 = 0.043*t64302*t65591;
  t65620 = 0.043*t65152*t65619;
  t65652 = 0.043*t65226*t65641;
  t65700 = 0.043*t64560*t65698;
  t65723 = 0.043*t64678*t65722;
  t65756 = 0.043*t65288*t65755;
  t65758 = t65490 + t65513 + t65530 + t65566 + t65592 + t65620 + t65652 + t65700 + t65723 + t65756;
  t66963 = 0.026*t65786*t65528;
  t66965 = 0.026*t65512*t65796;
  t66966 = 0.026*t65777*t65563;
  t66970 = 0.026*t65486*t65804;
  t66972 = 0.043*t65816*t65619;
  t66975 = 0.043*t65591*t65824;
  t66976 = 0.043*t65837*t65698;
  t66978 = 0.043*t65641*t65858;
  t66979 = 0.043*t65871*t65755;
  t66980 = 0.043*t65722*t65883;
  t66981 = t66963 + t66965 + t66966 + t66970 + t66972 + t66975 + t66976 + t66978 + t66979 + t66980;
  t67047 = -1.*t65468*t64149*t64820;
  t67049 = t65449*t65891;
  t67050 = t67047 + t67049;
  t67390 = -3.e-6*t64075;
  t66455 = 0.026*t64849*t66452;
  t66527 = 0.026*t64832*t66525;
  t66544 = 0.026*t64869*t66543;
  t66575 = 0.026*t64857*t66574;
  t66609 = 0.026*t64165*t64820*t66608;
  t66633 = 0.043*t64678*t66631;
  t66683 = 0.043*t65288*t66676;
  t66734 = 0.043*t64560*t66731;
  t66754 = 0.043*t64302*t66750;
  t66840 = 0.043*t65226*t66839;
  t66885 = 0.043*t65152*t66881;
  t66886 = t66455 + t66527 + t66544 + t66575 + t66609 + t66633 + t66683 + t66734 + t66754 + t66840 + t66885;
  t67184 = 0.026*t65512*t66452;
  t67185 = 0.026*t65486*t66525;
  t67186 = 0.026*t65563*t66543;
  t67187 = 0.026*t65528*t66574;
  t67191 = 0.026*t67050*t66608;
  t67192 = 0.043*t65755*t66631;
  t67193 = 0.043*t65722*t66676;
  t67199 = 0.043*t65641*t66731;
  t67204 = 0.043*t65619*t66750;
  t67206 = 0.043*t65698*t66839;
  t67207 = 0.043*t65591*t66881;
  t67208 = t67184 + t67185 + t67186 + t67187 + t67191 + t67192 + t67193 + t67199 + t67204 + t67206 + t67207;
  t67022 = 0.026*t65786*t66452;
  t67024 = 0.026*t65777*t66525;
  t67025 = 0.026*t65804*t66543;
  t67026 = 0.026*t65796*t66574;
  t67027 = 0.026*t66914*t66608;
  t67029 = 0.043*t65883*t66631;
  t67030 = 0.043*t65871*t66676;
  t67031 = 0.043*t65837*t66731;
  t67032 = 0.043*t65824*t66750;
  t67033 = 0.043*t65858*t66839;
  t67034 = 0.043*t65816*t66881;
  t67035 = t67022 + t67024 + t67025 + t67026 + t67027 + t67029 + t67030 + t67031 + t67032 + t67033 + t67034;
  t67277 = t64857*t66582;
  t67283 = t64832*t66595;
  t67329 = t67277 + t67283;
  t67566 = t65518*t66132;
  t67567 = t65459*t66157;
  t67568 = t67566 + t67567;
  t67337 = -1.000000000009*t26309*t64795;
  t67339 = t64734*t64802;
  t67341 = t67337 + t67339;
  t67391 = -3.e-6*t63430;
  t67394 = t67390 + t58614 + t67391 + t63182;
  t67401 = -3.e-6*t64306;
  t67416 = t67390 + t58614 + t67401 + t62969;
  t67426 = -3.e-6*t63183;
  t67450 = -3.e-6*t64650;
  t67451 = -1. + t64893 + t67426 + t65302 + t67450;
  t65986 = 0.026*t64849*t65983;
  t66050 = 0.026*t64832*t66041;
  t66067 = 0.026*t64869*t66065;
  t66128 = 0.026*t64857*t66124;
  t66178 = 0.026*t64165*t64820*t66173;
  t66242 = 0.043*t64678*t66240;
  t66295 = 0.043*t65288*t66277;
  t66334 = 0.043*t64560*t66331;
  t66359 = 0.043*t64302*t66358;
  t66392 = 0.043*t65226*t66391;
  t66424 = 0.043*t65152*t66422;
  t66425 = t65986 + t66050 + t66067 + t66128 + t66178 + t66242 + t66295 + t66334 + t66359 + t66392 + t66424;
  t67147 = 0.026*t65512*t65983;
  t67149 = 0.026*t65486*t66041;
  t67151 = 0.026*t66065*t65563;
  t67152 = 0.026*t65528*t66124;
  t67155 = 0.026*t67050*t66173;
  t67157 = 0.043*t66277*t65722;
  t67166 = 0.043*t65641*t66331;
  t67167 = 0.043*t65619*t66358;
  t67168 = 0.043*t66240*t65755;
  t67169 = 0.043*t65698*t66391;
  t67174 = 0.043*t65591*t66422;
  t67180 = t67147 + t67149 + t67151 + t67152 + t67155 + t67157 + t67166 + t67167 + t67168 + t67169 + t67174;
  t67001 = 0.026*t65786*t65983;
  t67002 = 0.026*t65777*t66041;
  t67003 = 0.026*t66065*t65804;
  t67004 = 0.026*t65796*t66124;
  t67006 = 0.026*t66914*t66173;
  t67007 = 0.043*t66277*t65871;
  t67008 = 0.043*t65837*t66331;
  t67009 = 0.043*t65824*t66358;
  t67011 = 0.043*t66240*t65883;
  t67014 = 0.043*t65858*t66391;
  t67015 = 0.043*t65816*t66422;
  t67016 = t67001 + t67002 + t67003 + t67004 + t67006 + t67007 + t67008 + t67009 + t67011 + t67014 + t67015;
  t67507 = 0.000014*t65540*t64832;
  t67511 = 0.000056*t65518*t64849;
  t67512 = 0.000056*t65496*t64857;
  t67514 = 0.000014*t65459*t64869;
  t67540 = 0.000271*t65600*t65152;
  t67542 = 0.000271*t65574*t64302;
  t67545 = 2.e-6*t65658*t64560;
  t67550 = 2.e-6*t65626*t65226;
  t67551 = 0.000271*t65727*t65288;
  t67553 = 0.000271*t65708*t64678;
  t67557 = 0.026*t66124*t66452;
  t67558 = 0.026*t66065*t66525;
  t67562 = 0.026*t66173*t67329;
  t67563 = 0.026*t66041*t66543;
  t67564 = 0.026*t65983*t66574;
  t67569 = 0.026*t67568*t66608;
  t67581 = 0.043*t66277*t66631;
  t67599 = 0.043*t66240*t66676;
  t67600 = 0.043*t66391*t66731;
  t67604 = 0.043*t66422*t66750;
  t67606 = 0.043*t66331*t66839;
  t67608 = 0.043*t66358*t66881;
  t67618 = t67507 + t67511 + t67512 + t67514 + t67540 + t67542 + t67545 + t67550 + t67551 + t67553 + t67557 + t67558 + t67562 + t67563 + t67564 + t67569 + t67581 + t67599 + t67600 + t67604 + t67606 + t67608;
  t64821 = 0.026*t64165*t64813*t64820;
  t64833 = 0.026*t64734*t64823*t64832;
  t64837 = -0.026000000000234*t64836*t26309*t64832;
  t64851 = -0.026000000000234*t64842*t26309*t64849;
  t64858 = -0.026000000000234*t63180*t64842*t64857;
  t64863 = -0.026000000000234*t64862*t26309*t64857;
  t64871 = 0.026*t64734*t64836*t64869;
  t65153 = 0.043*t65126*t65152;
  t65159 = 0.043*t65158*t64302;
  t65175 = 0.043*t65174*t64560;
  t65229 = 0.043*t65199*t65226;
  t65289 = 0.043*t65281*t65288;
  t65294 = 0.043*t65292*t64678;
  t65295 = t64821 + t64833 + t64837 + t64851 + t64858 + t64863 + t64871 + t65153 + t65159 + t65175 + t65229 + t65289 + t65294;
  t67054 = 0.026*t64813*t67050;
  t67057 = 0.026*t64734*t64823*t65486;
  t67066 = -0.026000000000234*t64836*t26309*t65486;
  t67070 = -0.026000000000234*t64842*t26309*t65512;
  t67078 = -0.026000000000234*t63180*t64842*t65528;
  t67080 = -0.026000000000234*t64862*t26309*t65528;
  t67084 = 0.026*t64734*t64836*t65563;
  t67086 = 0.043*t65126*t65591;
  t67089 = 0.043*t65158*t65619;
  t67090 = 0.043*t65174*t65641;
  t67091 = 0.043*t65199*t65698;
  t67100 = 0.043*t65281*t65722;
  t67105 = 0.043*t65292*t65755;
  t67106 = t67054 + t67057 + t67066 + t67070 + t67078 + t67080 + t67084 + t67086 + t67089 + t67090 + t67091 + t67100 + t67105;
  t66919 = 0.026*t64813*t66914;
  t66927 = 0.026*t64734*t64823*t65777;
  t66928 = -0.026000000000234*t64836*t26309*t65777;
  t66929 = -0.026000000000234*t64842*t26309*t65786;
  t66930 = -0.026000000000234*t63180*t64842*t65796;
  t66934 = -0.026000000000234*t64862*t26309*t65796;
  t66937 = 0.026*t64734*t64836*t65804;
  t66943 = 0.043*t65126*t65816;
  t66944 = 0.043*t65158*t65824;
  t66945 = 0.043*t65174*t65837;
  t66948 = 0.043*t65199*t65858;
  t66949 = 0.043*t65281*t65871;
  t66950 = 0.043*t65292*t65883;
  t66951 = t66919 + t66927 + t66928 + t66929 + t66930 + t66934 + t66937 + t66943 + t66944 + t66945 + t66948 + t66949 + t66950;
  t67743 = -0.000014000000000126*t63180*t65459;
  t67760 = 0.000056*t64734*t65496;
  t67762 = -0.000056000000000504*t26309*t65518;
  t67763 = -0.000014000000000126*t26309*t65540;
  t67764 = 0.000271*t64148*t65574;
  t67766 = 0.000271*t65133*t65600;
  t67770 = 2.e-6*t65009*t65626;
  t67774 = 2.e-6*t64369*t65658;
  t67778 = 0.000271*t64652*t65708;
  t67781 = 0.000271*t64878*t65727;
  t67783 = -0.026000000000234*t63180*t64842*t65983;
  t67784 = -0.026000000000234*t64862*t26309*t65983;
  t67785 = 0.026*t64734*t64836*t66041;
  t67790 = 0.026*t64813*t67568;
  t67795 = 0.026*t64734*t64823*t66065;
  t67799 = -0.026000000000234*t64836*t26309*t66065;
  t67800 = -0.026000000000234*t64842*t26309*t66124;
  t67801 = 0.026*t67341*t66173;
  t67804 = 0.043*t65281*t66240;
  t67806 = 0.043*t65292*t66277;
  t67812 = 0.043*t65199*t66331;
  t67817 = 0.043*t65126*t66358;
  t67822 = 0.043*t65174*t66391;
  t67826 = 0.043*t65158*t66422;
  t67833 = t67743 + t67760 + t67762 + t67763 + t67764 + t67766 + t67770 + t67774 + t67778 + t67781 + t67783 + t67784 + t67785 + t67790 + t67795 + t67799 + t67800 + t67801 + t67804 + t67806 + t67812 + t67817 + t67822 + t67826;
  t67219 = -0.000014000000000126*t63180*t64832;
  t67220 = 0.000056*t64734*t64849;
  t67221 = -0.000056000000000504*t26309*t64857;
  t67222 = -0.000014000000000126*t26309*t64869;
  t67227 = 0.000271*t64148*t65152;
  t67231 = 0.000271*t65133*t64302;
  t67237 = 2.e-6*t65009*t64560;
  t67238 = 2.e-6*t64369*t65226;
  t67245 = 0.000271*t64652*t65288;
  t67248 = 0.000271*t64878*t64678;
  t67249 = -0.026000000000234*t63180*t64842*t66452;
  t67253 = -0.026000000000234*t64862*t26309*t66452;
  t67268 = 0.026*t64734*t64836*t66525;
  t67330 = 0.026*t64813*t67329;
  t67331 = 0.026*t64734*t64823*t66543;
  t67335 = -0.026000000000234*t64836*t26309*t66543;
  t67336 = -0.026000000000234*t64842*t26309*t66574;
  t67343 = 0.026*t67341*t66608;
  t67351 = 0.043*t65281*t66631;
  t67354 = 0.043*t65292*t66676;
  t67355 = 0.043*t65199*t66731;
  t67362 = 0.043*t65126*t66750;
  t67369 = 0.043*t65174*t66839;
  t67370 = 0.043*t65158*t66881;
  t67372 = t67219 + t67220 + t67221 + t67222 + t67227 + t67231 + t67237 + t67238 + t67245 + t67248 + t67249 + t67253 + t67268 + t67330 + t67331 + t67335 + t67336 + t67343 + t67351 + t67354 + t67355 + t67362 + t67369 + t67370;
  t68043 = -7.8000468001404e-9*t63180*t64842;
  t68047 = 0.0013000000000117*t64734*t64823;
  t68048 = -7.8000468001404e-9*t64862*t26309;
  t68056 = -0.0013000000000234*t64836*t26309;
  t68060 = 0.000271*t64148*t67394;
  t68061 = 2.e-6*t67416*t64369;
  t68063 = 0.000271*t67451*t64652;
  t68064 = 0.043*t65281*t65428;
  t68067 = 0.043*t65199*t65363;
  t68070 = 0.043*t65126*t65334;
  t68072 = t68043 + t68047 + t68048 + t68056 + t68060 + t68061 + t68063 + t68064 + t68067 + t68070;
  t65297 = 7.8000468000702e-9*t64849;
  t65298 = 0.0013000000000117*t64869;
  t65337 = 0.043*t65334*t64302;
  t65364 = 0.043*t65363*t64560;
  t65430 = 0.043*t65428*t64678;
  t65431 = t65297 + t65298 + t65337 + t65364 + t65430;
  t67109 = 7.8000468000702e-9*t65512;
  t67110 = 0.0013000000000117*t65563;
  t67112 = 0.043*t65334*t65619;
  t67121 = 0.043*t65363*t65641;
  t67123 = 0.043*t65428*t65755;
  t67129 = t67109 + t67110 + t67112 + t67121 + t67123;
  t66953 = 7.8000468000702e-9*t65786;
  t66954 = 0.0013000000000117*t65804;
  t66956 = 0.043*t65334*t65824;
  t66957 = 0.043*t65363*t65837;
  t66958 = 0.043*t65428*t65883;
  t66960 = t66953 + t66954 + t66956 + t66957 + t66958;
  t67841 = 0.000271*t67394*t65600;
  t67842 = 2.e-6*t67416*t65626;
  t67849 = 0.000271*t67451*t65727;
  t67856 = 0.0013000000000117*t66041;
  t67857 = 7.8000468000702e-9*t66124;
  t67860 = 0.043*t65428*t66277;
  t67884 = 0.043*t65363*t66391;
  t67888 = 0.043*t65334*t66422;
  t67912 = t67841 + t67842 + t67849 + t67856 + t67857 + t67860 + t67884 + t67888;
  t67395 = 0.000271*t67394*t64302;
  t67419 = 2.e-6*t67416*t64560;
  t67452 = 0.000271*t67451*t64678;
  t67460 = 0.0013000000000117*t66525;
  t67474 = 7.8000468000702e-9*t66574;
  t67477 = 0.043*t65428*t66676;
  t67479 = 0.043*t65363*t66839;
  t67482 = 0.043*t65334*t66881;
  t67483 = t67395 + t67419 + t67452 + t67460 + t67474 + t67477 + t67479 + t67482;
  t67959 = 0.000271000000004878*t64652;
  t67960 = 1.29e-8*t65281;
  t67962 = 0.0042999871*t65199;
  t67963 = 1.29001548002322e-8*t65126;
  t67965 = t67959 + t67960 + t67962 + t67963;
  t64304 = 1.29001548002322e-8*t64302;
  t64561 = 0.0042999871*t64560;
  t64681 = 1.29e-8*t64678;
  t64688 = t64304 + t64561 + t64681;
  t67039 = 1.29001548002322e-8*t65619;
  t67040 = 0.0042999871*t65641;
  t67041 = 1.29e-8*t65755;
  t67044 = t67039 + t67040 + t67041;
  t66893 = 1.29001548002322e-8*t65824;
  t66895 = 0.0042999871*t65837;
  t66899 = 1.29e-8*t65883;
  t66902 = t66893 + t66895 + t66899;
  t67664 = 0.000271000000004878*t65727;
  t67674 = 1.29e-8*t66277;
  t67692 = 0.0042999871*t66391;
  t67698 = 1.29001548002322e-8*t66422;
  t67701 = t67664 + t67674 + t67692 + t67698;
  t67213 = 0.000271000000004878*t64678;
  t67214 = 1.29e-8*t66676;
  t67215 = 0.0042999871*t66839;
  t67216 = 1.29001548002322e-8*t66881;
  t67217 = t67213 + t67214 + t67215 + t67216;
  p_output1[0]=var2[15]*(-0.5*(0.052*t64849*t64857 + 0.052*t64832*t64869 + 0.086*t64302*t65152 + 0.086*t64560*t65226 + 0.086*t64678*t65288)*var2[0] - 0.5*t65885*var2[1] - 0.5*t65758*var2[2] - 0.5*t66886*var2[3] - 0.5*t66425*var2[4] - 0.5*t65295*var2[5] - 0.5*t65431*var2[15] - 0.5*t64688*var2[17]);
  p_output1[1]=var2[15]*(-0.5*t65885*var2[0] - 0.5*(0.052*t65786*t65796 + 0.052*t65777*t65804 + 0.086*t65816*t65824 + 0.086*t65837*t65858 + 0.086*t65871*t65883)*var2[1] - 0.5*t66981*var2[2] - 0.5*t67035*var2[3] - 0.5*t67016*var2[4] - 0.5*t66951*var2[5] - 0.5*t66960*var2[15] - 0.5*t66902*var2[17]);
  p_output1[2]=var2[15]*(-0.5*t65758*var2[0] - 0.5*t66981*var2[1] - 0.5*(0.052*t65512*t65528 + 0.052*t65486*t65563 + 0.086*t65591*t65619 + 0.086*t65641*t65698 + 0.086*t65722*t65755)*var2[2] - 0.5*t67208*var2[3] - 0.5*t67180*var2[4] - 0.5*t67106*var2[5] - 0.5*t67129*var2[15] - 0.5*t67044*var2[17]);
  p_output1[3]=var2[15]*(-0.5*t66886*var2[0] - 0.5*t67035*var2[1] - 0.5*t67208*var2[2] - 0.5*(0.000112*t64849*t64857 + 0.000028*t64832*t64869 + 0.000542*t64302*t65152 + 4.e-6*t64560*t65226 + 0.000542*t64678*t65288 + 0.052*t66525*t66543 + 0.052*t66452*t66574 + 0.086*t66631*t66676 + 0.086*t66731*t66839 + 0.086*t66750*t66881 + 0.052*t66608*t67329)*var2[3] - 0.5*t67618*var2[4] - 0.5*t67372*var2[5] - 0.5*t67483*var2[15] - 0.5*t67217*var2[17]);
  p_output1[4]=var2[15]*(-0.5*t66425*var2[0] - 0.5*t67016*var2[1] - 0.5*t67180*var2[2] - 0.5*t67618*var2[3] - 0.5*(0.000112*t65496*t65518 + 0.000028*t65459*t65540 + 0.000542*t65574*t65600 + 4.e-6*t65626*t65658 + 0.000542*t65708*t65727 + 0.052*t66041*t66065 + 0.052*t65983*t66124 + 0.086*t66240*t66277 + 0.086*t66331*t66391 + 0.086*t66358*t66422 + 0.052*t66173*t67568)*var2[4] - 0.5*t67833*var2[5] - 0.5*t67912*var2[15] - 0.5*t67701*var2[17]);
  p_output1[5]=var2[15]*(-0.5*t65295*var2[0] - 0.5*t66951*var2[1] - 0.5*t67106*var2[2] - 0.5*t67372*var2[3] - 0.5*t67833*var2[4] - 0.5*(0.000028000000000504*t26309*t63180 - 0.000112000000001008*t26309*t64734 + 0.052*Power(t64734,2)*t64823*t64836 - 0.052000000000468*t26309*t64734*Power(t64836,2) + 0.052000000000936*t26309*t63180*Power(t64842,2) + 0.052000000000936*Power(t26309,2)*t64842*t64862 + 0.000542*t64652*t64878 + 4.e-6*t64369*t65009 + 0.000542*t64148*t65133 + 0.086*t65126*t65158 + 0.086*t65174*t65199 + 0.086*t65281*t65292 + 0.052*t64813*t67341)*var2[5] - 0.5*t68072*var2[15] - 0.5*t67965*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=(-0.5*t65431*var2[0] - 0.5*t66960*var2[1] - 0.5*t67129*var2[2] - 0.5*t67483*var2[3] - 0.5*t67912*var2[4] - 0.5*t68072*var2[5])*var2[15];
  p_output1[16]=0;
  p_output1[17]=(-0.5*t64688*var2[0] - 0.5*t66902*var2[1] - 0.5*t67044*var2[2] - 0.5*t67217*var2[3] - 0.5*t67701*var2[4] - 0.5*t67965*var2[5])*var2[15];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec16_minitaur.hh"

namespace FrontStance
{

void Ce2_vec16_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
