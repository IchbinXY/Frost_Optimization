/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:12:49 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t12813;
  double t12831;
  double t12837;
  double t13002;
  double t13079;
  double t13080;
  double t13081;
  double t13747;
  double t14447;
  double t13007;
  double t13014;
  double t13027;
  double t13069;
  double t14486;
  double t14487;
  double t14521;
  double t14448;
  double t14454;
  double t14948;
  double t14495;
  double t14506;
  double t14508;
  double t14512;
  double t14516;
  double t14517;
  double t15692;
  double t15700;
  double t15720;
  double t15811;
  double t15835;
  double t15836;
  double t15840;
  double t15841;
  double t15845;
  double t15846;
  double t15848;
  double t15867;
  double t15870;
  double t15861;
  double t14955;
  double t15850;
  double t15880;
  double t16095;
  double t16096;
  double t16047;
  double t16087;
  double t16181;
  double t16265;
  double t16430;
  double t16327;
  double t16093;
  double t16098;
  double t16111;
  double t16124;
  double t16140;
  double t16142;
  double t16182;
  double t16183;
  double t16190;
  double t16193;
  double t16195;
  double t16228;
  double t16232;
  double t16242;
  double t16255;
  double t16260;
  double t16262;
  double t16272;
  double t16293;
  double t16367;
  double t16382;
  double t16411;
  double t16412;
  double t16429;
  double t16431;
  double t16434;
  double t16437;
  double t16439;
  double t16440;
  double t16446;
  double t16450;
  double t16452;
  double t16470;
  double t16471;
  double t16500;
  double t15813;
  double t15816;
  double t15822;
  double t15832;
  double t15834;
  double t14915;
  double t14965;
  double t14973;
  double t14974;
  double t15545;
  double t13075;
  double t13426;
  double t14456;
  double t14488;
  double t14490;
  double t16523;
  double t16585;
  double t16598;
  double t16600;
  double t16603;
  double t16618;
  double t16017;
  double t16030;
  double t16620;
  double t16623;
  double t16625;
  double t16629;
  double t15863;
  double t15963;
  double t16511;
  double t16513;
  double t16514;
  double t16602;
  double t16619;
  double t16631;
  double t16634;
  double t16635;
  double t16638;
  double t16677;
  double t16678;
  double t16680;
  double t16681;
  double t16688;
  double t16718;
  double t16724;
  double t16730;
  double t16731;
  double t16734;
  double t16737;
  double t16738;
  double t16748;
  double t12881;
  double t12987;
  double t12998;
  double t13000;
  double t16765;
  double t16766;
  double t16769;
  double t16773;
  double t16775;
  double t16795;
  double t16798;
  double t16811;
  double t16757;
  double t16763;
  double t16768;
  double t16778;
  double t16830;
  double t16833;
  double t16834;
  double t16835;
  double t17013;
  double t17389;
  double t17664;
  double t17871;
  double t17968;
  double t18000;
  double t18001;
  double t18030;
  double t18031;
  double t18035;
  double t18061;
  double t18064;
  double t18066;
  double t18194;
  double t18195;
  double t18197;
  double t18203;
  double t18243;
  double t18245;
  double t18248;
  double t18250;
  double t20675;
  double t21083;
  double t21085;
  double t21091;
  double t18187;
  double t18188;
  double t18190;
  double t18240;
  double t19491;
  double t21106;
  double t21113;
  double t21121;
  double t21123;
  double t21125;
  double t21127;
  double t21129;
  double t21133;
  double t21134;
  double t21151;
  double t21153;
  double t21156;
  double t21158;
  double t21161;
  double t21166;
  double t21168;
  double t21170;
  double t21232;
  double t21233;
  double t21862;
  double t21871;
  double t21926;
  double t21942;
  double t21951;
  double t23576;
  double t24016;
  double t24019;
  double t24036;
  double t24084;
  double t24365;
  double t25173;
  double t25212;
  double t25228;
  double t25231;
  double t25344;
  double t25684;
  double t25972;
  double t26265;
  double t26399;
  double t22487;
  double t22526;
  double t22665;
  double t22815;
  double t23114;
  double t23216;
  double t23225;
  double t23231;
  double t23261;
  double t23281;
  double t23389;
  double t23428;
  double t23429;
  double t23472;
  double t23502;
  double t23510;
  double t23511;
  double t23519;
  double t23522;
  double t21186;
  double t21207;
  double t27538;
  double t27539;
  double t27541;
  double t27542;
  double t27544;
  double t27545;
  double t24353;
  double t24359;
  double t25191;
  double t25237;
  double t25990;
  double t25994;
  double t26013;
  double t26070;
  double t26129;
  double t26149;
  double t26150;
  double t26151;
  double t26152;
  double t26162;
  double t26175;
  double t26176;
  double t26177;
  double t26187;
  double t26188;
  double t26216;
  double t26217;
  double t27424;
  double t27431;
  double t27438;
  double t27441;
  double t27442;
  double t27445;
  double t27447;
  double t27456;
  double t27485;
  double t27486;
  double t27490;
  double t27507;
  double t27508;
  double t27528;
  double t27529;
  double t27530;
  double t27531;
  double t27532;
  double t27533;
  double t27593;
  double t27594;
  double t27595;
  double t27596;
  double t27598;
  double t27599;
  double t27600;
  double t27602;
  double t27604;
  double t27605;
  double t26701;
  double t26717;
  double t26725;
  double t26765;
  double t26766;
  double t26770;
  double t26774;
  double t26775;
  double t26782;
  double t26783;
  double t26784;
  double t26790;
  double t26791;
  double t26797;
  double t26826;
  double t26829;
  double t26831;
  double t27378;
  double t27379;
  double t27537;
  double t27635;
  double t27640;
  double t27641;
  double t27642;
  double t27644;
  double t27645;
  double t23568;
  double t23575;
  double t24032;
  double t24106;
  double t24199;
  double t24203;
  double t24204;
  double t24205;
  double t24208;
  double t24226;
  double t24227;
  double t24228;
  double t24230;
  double t24231;
  double t24255;
  double t24265;
  double t24269;
  double t24284;
  double t24313;
  double t24323;
  double t24328;
  double t27590;
  double t27591;
  double t27592;
  double t27597;
  double t27603;
  double t27609;
  double t27610;
  double t27611;
  double t27613;
  double t27614;
  double t27616;
  double t27617;
  double t27618;
  double t27619;
  double t27620;
  double t27621;
  double t27622;
  double t27624;
  double t27625;
  double t27626;
  double t27627;
  double t27628;
  double t27680;
  double t27700;
  double t27699;
  double t27701;
  double t27702;
  double t27704;
  double t27705;
  double t27706;
  double t27739;
  double t27758;
  double t27759;
  double t27760;
  double t27769;
  double t27771;
  double t27772;
  double t27774;
  double t27779;
  double t27782;
  double t27786;
  double t27791;
  double t27733;
  double t27734;
  double t27735;
  double t27767;
  double t27775;
  double t27793;
  double t27794;
  double t27797;
  double t27800;
  double t27803;
  double t27804;
  double t27810;
  double t27825;
  double t27828;
  double t27829;
  double t27830;
  double t27831;
  double t27832;
  double t27833;
  double t27834;
  double t27835;
  double t27836;
  double t27709;
  double t27710;
  double t27711;
  double t27712;
  double t27714;
  double t27715;
  double t27718;
  double t27719;
  double t27721;
  double t27722;
  double t27724;
  double t27725;
  double t27855;
  double t27856;
  double t27857;
  double t27859;
  double t27860;
  double t27861;
  double t27863;
  double t27864;
  double t27865;
  double t27866;
  double t27869;
  double t27870;
  double t27871;
  double t27872;
  double t27874;
  double t27875;
  double t27876;
  double t27877;
  double t27854;
  double t27858;
  double t27862;
  double t27868;
  double t27873;
  double t27878;
  double t27879;
  double t27880;
  double t27881;
  double t27882;
  double t27883;
  double t27884;
  double t27885;
  double t27886;
  double t27887;
  double t27888;
  double t27889;
  double t27890;
  double t27891;
  double t27892;
  double t27893;
  double t27894;
  double t27897;
  double t27898;
  double t27899;
  double t27903;
  double t27904;
  double t27906;
  double t27907;
  double t27908;
  double t27910;
  double t27911;
  double t27912;
  double t27901;
  double t27902;
  double t27905;
  double t27909;
  double t27913;
  double t27914;
  double t27915;
  double t27916;
  double t27917;
  double t27918;
  double t27919;
  double t27921;
  double t27922;
  double t27923;
  double t27924;
  double t27931;
  double t27932;
  double t27934;
  double t27942;
  double t27943;
  double t27944;
  double t27947;
  double t27948;
  double t27949;
  double t27950;
  double t27951;
  double t27952;
  double t27953;
  double t27954;
  double t27955;
  double t27956;
  double t27957;
  double t27958;
  double t27959;
  double t27960;
  double t27961;
  double t27962;
  double t27963;
  double t27964;
  double t27965;
  double t27971;
  double t27972;
  double t27973;
  double t27974;
  double t27977;
  double t27978;
  double t27979;
  double t27980;
  double t27982;
  double t27983;
  double t27968;
  double t27969;
  double t27970;
  double t27975;
  double t27981;
  double t27984;
  double t27985;
  double t27986;
  double t27987;
  double t27988;
  double t27989;
  double t27990;
  double t27991;
  double t27992;
  double t27993;
  double t27994;
  double t27995;
  double t27996;
  double t27997;
  double t27998;
  double t27999;
  double t28000;
  double t28006;
  double t28007;
  double t28008;
  double t28011;
  double t28013;
  double t28014;
  double t28015;
  double t28016;
  double t28018;
  double t28019;
  double t28020;
  double t28021;
  double t28064;
  double t28065;
  double t28066;
  double t28067;
  double t28069;
  double t28070;
  double t28075;
  double t28076;
  double t28077;
  double t28079;
  double t28116;
  double t28117;
  double t28119;
  double t28120;
  double t28121;
  double t28123;
  double t28124;
  double t28125;
  double t28149;
  double t28150;
  double t28151;
  double t28152;
  double t28154;
  double t28155;
  double t28156;
  double t28157;
  double t28159;
  double t28160;
  double t28161;
  double t28162;
  double t28040;
  double t28041;
  double t28043;
  double t28044;
  double t28045;
  double t28046;
  double t28047;
  double t28048;
  double t28049;
  double t28050;
  double t28051;
  double t28052;
  double t28053;
  double t28054;
  double t28055;
  double t28056;
  double t28057;
  double t28058;
  double t28059;
  double t26239;
  double t26249;
  double t26255;
  double t26257;
  double t26259;
  double t26302;
  double t26325;
  double t26326;
  double t26328;
  double t26329;
  double t26367;
  double t26374;
  double t26383;
  double t26404;
  double t26566;
  double t28061;
  double t28062;
  double t28063;
  double t28068;
  double t28071;
  double t28080;
  double t28081;
  double t28084;
  double t28085;
  double t28086;
  double t28089;
  double t28094;
  double t28097;
  double t28102;
  double t28105;
  double t28106;
  double t28107;
  double t28108;
  double t28109;
  double t28110;
  double t28111;
  double t28112;
  double t28344;
  double t28345;
  double t28346;
  double t28347;
  double t28349;
  double t28350;
  double t28351;
  double t28352;
  double t28354;
  double t28355;
  double t28146;
  double t28376;
  double t28377;
  double t28378;
  double t28380;
  double t28382;
  double t28383;
  double t28384;
  double t28385;
  double t28406;
  double t28407;
  double t28408;
  double t28411;
  double t28412;
  double t28299;
  double t28300;
  double t28301;
  double t28302;
  double t28306;
  double t28307;
  double t28308;
  double t28314;
  double t28326;
  double t28327;
  double t28328;
  double t28329;
  double t28330;
  double t28331;
  double t28332;
  double t28333;
  double t28334;
  double t28335;
  double t28336;
  double t28114;
  double t28115;
  double t28118;
  double t28122;
  double t28126;
  double t28127;
  double t28128;
  double t28129;
  double t28130;
  double t28131;
  double t28132;
  double t28133;
  double t28134;
  double t28135;
  double t28136;
  double t28139;
  double t28140;
  double t28141;
  double t28142;
  double t28143;
  double t28144;
  double t28441;
  double t28442;
  double t28443;
  double t28446;
  double t28447;
  double t28449;
  double t28450;
  double t28451;
  double t28453;
  double t28454;
  double t28455;
  double t28228;
  double t28229;
  double t28230;
  double t28231;
  double t28232;
  double t28233;
  double t28234;
  double t28235;
  double t28236;
  double t28237;
  double t28238;
  double t28239;
  double t28240;
  double t28241;
  double t28242;
  double t28243;
  double t28244;
  double t28245;
  double t28246;
  double t28404;
  double t28405;
  double t28409;
  double t28410;
  double t28413;
  double t28414;
  double t28415;
  double t28416;
  double t28417;
  double t28418;
  double t28419;
  double t28420;
  double t28421;
  double t28422;
  double t28423;
  double t28424;
  double t28425;
  double t28426;
  double t28427;
  double t28428;
  double t28429;
  double t28478;
  double t28479;
  double t28480;
  double t28482;
  double t28483;
  double t28485;
  double t28486;
  double t28487;
  double t28489;
  double t28490;
  double t28491;
  double t28003;
  double t28004;
  double t28005;
  double t28012;
  double t28017;
  double t28022;
  double t28023;
  double t28024;
  double t28025;
  double t28026;
  double t28027;
  double t28028;
  double t28029;
  double t28030;
  double t28031;
  double t28032;
  double t28033;
  double t28034;
  double t28035;
  double t28036;
  double t28037;
  double t28038;
  double t28444;
  double t28445;
  double t28448;
  double t28452;
  double t28456;
  double t28457;
  double t28458;
  double t28459;
  double t28460;
  double t28461;
  double t28462;
  double t28463;
  double t28464;
  double t28465;
  double t28466;
  double t28468;
  double t28469;
  double t28470;
  double t28471;
  double t28472;
  double t28473;
  double t28206;
  double t28207;
  double t28208;
  double t28209;
  double t28210;
  double t28211;
  double t28212;
  double t28213;
  double t28214;
  double t28215;
  double t28216;
  double t28217;
  double t28218;
  double t28219;
  double t28220;
  double t28221;
  double t28224;
  double t28225;
  double t28226;
  double t28341;
  double t28342;
  double t28343;
  double t28348;
  double t28353;
  double t28356;
  double t28357;
  double t28358;
  double t28359;
  double t28360;
  double t28361;
  double t28362;
  double t28363;
  double t28364;
  double t28365;
  double t28366;
  double t28367;
  double t28368;
  double t28369;
  double t28370;
  double t28371;
  double t28372;
  double t28477;
  double t28481;
  double t28534;
  double t28536;
  double t28538;
  double t28564;
  double t28565;
  double t28566;
  double t28585;
  double t28586;
  double t28587;
  double t28588;
  double t28590;
  double t28591;
  double t28593;
  double t28595;
  double t28599;
  double t28600;
  double t28613;
  double t28614;
  double t28582;
  double t28583;
  double t28584;
  double t28589;
  double t28598;
  double t28616;
  double t28617;
  double t28618;
  double t28619;
  double t28620;
  double t28621;
  double t28622;
  double t28623;
  double t28624;
  double t28625;
  double t28626;
  double t28627;
  double t28628;
  double t28629;
  double t28630;
  double t28631;
  double t28632;
  double t28568;
  double t28569;
  double t28570;
  double t28572;
  double t28573;
  double t28574;
  double t28575;
  double t28577;
  double t28578;
  double t28579;
  double t28580;
  double t28653;
  double t28654;
  double t28656;
  double t28657;
  double t28659;
  double t28660;
  double t28651;
  double t28652;
  double t28655;
  double t28658;
  double t28661;
  double t28662;
  double t28663;
  double t28664;
  double t28665;
  double t28666;
  double t28667;
  double t28668;
  double t28669;
  double t28670;
  double t28671;
  double t28672;
  double t28673;
  double t28674;
  double t28675;
  double t28678;
  double t28680;
  double t28683;
  double t28684;
  double t28685;
  double t28686;
  double t28687;
  double t28688;
  double t28689;
  double t28691;
  double t28692;
  double t28694;
  double t28697;
  double t28708;
  double t28714;
  double t28715;
  double t28717;
  double t28718;
  double t28719;
  double t28722;
  double t28723;
  double t28733;
  double t28735;
  double t28736;
  double t28737;
  double t28744;
  double t28748;
  double t28751;
  double t28757;
  double t28758;
  double t28726;
  double t28729;
  double t28731;
  double t28739;
  double t28756;
  double t28760;
  double t28762;
  double t28763;
  double t28766;
  double t28768;
  double t28772;
  double t28780;
  double t28790;
  double t28796;
  double t28798;
  double t28801;
  double t28804;
  double t28831;
  double t28832;
  double t28833;
  double t28837;
  double t28838;
  double t28864;
  double t28868;
  double t28872;
  double t28875;
  double t28879;
  double t28881;
  double t28885;
  double t28997;
  double t28999;
  double t29000;
  double t29033;
  double t29035;
  double t29041;
  double t29042;
  double t29047;
  double t29048;
  double t29204;
  double t29205;
  double t29207;
  double t29209;
  double t29210;
  double t29211;
  double t29213;
  double t29214;
  double t29215;
  double t27683;
  double t27703;
  double t27708;
  double t27713;
  double t27720;
  double t27732;
  double t27839;
  double t27840;
  double t27841;
  double t27842;
  double t27843;
  double t27844;
  double t27845;
  double t27846;
  double t27847;
  double t27848;
  double t27849;
  double t27850;
  double t27851;
  double t27852;
  double t27853;
  double t29326;
  double t28858;
  double t28859;
  double t28870;
  double t28876;
  double t28886;
  double t28888;
  double t28893;
  double t28894;
  double t28895;
  double t28901;
  double t28904;
  double t28905;
  double t28906;
  double t28907;
  double t28911;
  double t28917;
  double t28921;
  double t28922;
  double t28924;
  double t28930;
  double t28932;
  double t29330;
  double t29332;
  double t29337;
  double t29491;
  double t29492;
  double t29493;
  double t29496;
  double t29497;
  double t28936;
  double t28939;
  double t28942;
  double t28943;
  double t28944;
  double t28946;
  double t28947;
  double t28948;
  double t28951;
  double t28956;
  double t28959;
  double t28960;
  double t28966;
  double t28967;
  double t28968;
  double t28971;
  double t28978;
  double t28979;
  double t28981;
  double t29392;
  double t29393;
  double t29395;
  double t29396;
  double t29397;
  double t29399;
  double t29404;
  double t29415;
  double t29419;
  double t29429;
  double t29430;
  double t29435;
  double t29436;
  double t29439;
  double t29453;
  double t29454;
  double t29456;
  double t29486;
  double t29487;
  double t27838;
  double t27896;
  double t27946;
  double t27967;
  double t28002;
  double t28988;
  double t28989;
  double t28992;
  double t29001;
  double t29046;
  double t29062;
  double t29068;
  double t29069;
  double t29070;
  double t29071;
  double t29072;
  double t29073;
  double t29074;
  double t29077;
  double t29090;
  double t29095;
  double t29097;
  double t29099;
  double t29134;
  double t29135;
  double t29157;
  double t29182;
  double t29629;
  double t29635;
  double t29639;
  double t29641;
  double t29647;
  double t29648;
  double t29650;
  double t29651;
  double t29489;
  double t29490;
  double t29494;
  double t29495;
  double t29498;
  double t29499;
  double t29500;
  double t29501;
  double t29502;
  double t29503;
  double t29506;
  double t29511;
  double t29513;
  double t29514;
  double t29520;
  double t29521;
  double t29522;
  double t29523;
  double t29524;
  double t29525;
  double t29526;
  double t29572;
  double t29573;
  double t29574;
  double t29575;
  double t29576;
  double t29582;
  double t29587;
  double t29590;
  double t29609;
  double t29610;
  double t29611;
  double t29612;
  double t29613;
  double t29614;
  double t29615;
  double t29616;
  double t29617;
  double t29618;
  double t29619;
  t12813 = Cos(var1[19]);
  t12831 = -1.*t12813;
  t12837 = 1. + t12831;
  t13002 = Cos(var1[4]);
  t13079 = Cos(var1[21]);
  t13080 = -1.*t13079;
  t13081 = 1. + t13080;
  t13747 = -3.e-6*t13081;
  t14447 = Sin(var1[21]);
  t13007 = Cos(var1[5]);
  t13014 = Sin(var1[19]);
  t13027 = Sin(var1[4]);
  t13069 = Sin(var1[5]);
  t14486 = 3.e-6*t14447;
  t14487 = t13747 + t14486;
  t14521 = 3.e-13*var1[21];
  t14448 = -3.e-6*t14447;
  t14454 = t13747 + t14448;
  t14948 = -9.e-12*t13081;
  t14495 = 3.e-6*t12837*t13002*t13007;
  t14506 = -3.e-6*t13014*t13027;
  t14508 = -9.e-12*t12837;
  t14512 = 1. + t14508;
  t14516 = -1.*t14512*t13002*t13069;
  t14517 = t14495 + t14506 + t14516;
  t15692 = t12813*t13002*t13007;
  t15700 = t13014*t13027;
  t15720 = -3.e-6*t12837*t13002*t13069;
  t15811 = t15692 + t15700 + t15720;
  t15835 = -1.*t13002*t13007*t13014;
  t15836 = -1.000000000009*t12837;
  t15840 = 1. + t15836;
  t15841 = t15840*t13027;
  t15845 = -3.e-6*t13002*t13014*t13069;
  t15846 = t15835 + t15841 + t15845;
  t15848 = 3.e-6*t13081;
  t15867 = -1.000000000009*t13081;
  t15870 = 1. + t15867;
  t15861 = 9.e-12*t13081;
  t14955 = -1.*t14447;
  t15850 = t15848 + t14448;
  t15880 = t15848 + t14486;
  t16095 = 3.e-6*t13079;
  t16096 = t16095 + t14448;
  t16047 = -3.e-6*t13079;
  t16087 = t16047 + t14448;
  t16181 = -9.e-12*t14447;
  t16265 = t16095 + t14486;
  t16430 = t16047 + t14486;
  t16327 = 9.e-12*t14447;
  t16093 = -0.200000000003*t16087;
  t16098 = 0.100000000003*t16096;
  t16111 = 5.4e-18*t14447;
  t16124 = 1.e-7 + t16093 + t16098 + t16111;
  t16140 = t16124*t14517;
  t16142 = 3.e-7*t16096;
  t16182 = t13080 + t16181;
  t16183 = 0.100000000003*t16182;
  t16190 = -0.2000000000048*t14447;
  t16193 = 3.e-13 + t16142 + t16183 + t16190;
  t16195 = t16193*t15811;
  t16228 = 3.e-7*t16087;
  t16232 = t13079 + t16181;
  t16242 = -0.200000000003*t16232;
  t16255 = 0.1000000000039*t14447;
  t16260 = 3.e-13 + t16228 + t16242 + t16255;
  t16262 = t16260*t15846;
  t16272 = -1.*t16265*t14517;
  t16293 = 1.000000000009*t14447*t15811;
  t16367 = t13080 + t16327;
  t16382 = -1.*t16367*t15846;
  t16411 = t16272 + t16293 + t16382;
  t16412 = 0.2*t16411;
  t16429 = -1.8e-11*t14447*t14517;
  t16431 = t16430*t15811;
  t16434 = t16265*t15846;
  t16437 = t16429 + t16431 + t16434;
  t16439 = -0.099999*t16437;
  t16440 = t16430*t14517;
  t16446 = t13079 + t16327;
  t16450 = t16446*t15811;
  t16452 = -1.000000000009*t14447*t15846;
  t16470 = t16440 + t16450 + t16452;
  t16471 = -0.3*t16470;
  t16500 = t16140 + t16195 + t16262 + t16412 + t16439 + t16471;
  t15813 = 0.1000000000039*t13081;
  t15816 = 3.e-7*t14454;
  t15822 = t14948 + t14447;
  t15832 = -0.200000000003*t15822;
  t15834 = t14521 + t15813 + t15816 + t15832;
  t14915 = -0.2000000000048*t13081;
  t14965 = t14948 + t14955;
  t14973 = 0.100000000003*t14965;
  t14974 = 3.e-7*t14487;
  t15545 = t14521 + t14915 + t14973 + t14974;
  t13075 = 1.e-7*var1[21];
  t13426 = 5.4e-18*t13081;
  t14456 = -0.200000000003*t14454;
  t14488 = 0.100000000003*t14487;
  t14490 = t13075 + t13426 + t14456 + t14488;
  t16523 = -1.*t12813*t13002*t13007;
  t16585 = -1.000000000009*t13014*t13027;
  t16598 = -3.e-6*t12813*t13002*t13069;
  t16600 = t16523 + t16585 + t16598;
  t16603 = t12813*t13027;
  t16618 = t15835 + t16603 + t15845;
  t16017 = -1.8e-11*t13081;
  t16030 = 1. + t16017;
  t16620 = 3.e-6*t13002*t13007*t13014;
  t16623 = -3.e-6*t12813*t13027;
  t16625 = 9.e-12*t13002*t13014*t13069;
  t16629 = t16620 + t16623 + t16625;
  t15863 = t15861 + t14447;
  t15963 = t15861 + t14955;
  t16511 = -0.2000000000018*t13002*t13007*t13014;
  t16513 = 0.2000000000018*t12813*t13027;
  t16514 = -6.000000000054e-7*t13002*t13014*t13069;
  t16602 = t15834*t16600;
  t16619 = t15545*t16618;
  t16631 = t14490*t16629;
  t16634 = t15880*t16600;
  t16635 = t15850*t16618;
  t16638 = t16030*t16629;
  t16677 = t16634 + t16635 + t16638;
  t16678 = -0.099999*t16677;
  t16680 = t15870*t16600;
  t16681 = t15863*t16618;
  t16688 = t15850*t16629;
  t16718 = t16680 + t16681 + t16688;
  t16724 = -0.3*t16718;
  t16730 = -1.*t15963*t16600;
  t16731 = -1.*t15870*t16618;
  t16734 = -1.*t15880*t16629;
  t16737 = t16730 + t16731 + t16734;
  t16738 = 0.2*t16737;
  t16748 = t16511 + t16513 + t16514 + t16602 + t16619 + t16631 + t16678 + t16724 + t16738;
  t12881 = -1.8e-12*t12837;
  t12987 = -1. + t12813;
  t12998 = 0.2*t12987;
  t13000 = t12881 + t12998;
  t16765 = -1.*t14512*t13002*t13007;
  t16766 = t16765 + t15720;
  t16769 = -3.e-6*t12837*t13002*t13007;
  t16773 = -1.*t12813*t13002*t13069;
  t16775 = t16769 + t16773;
  t16795 = -3.e-6*t13002*t13007*t13014;
  t16798 = t13002*t13014*t13069;
  t16811 = t16795 + t16798;
  t16757 = -6.000000000054e-7*t12837*t13002*t13007;
  t16763 = -1.*t13000*t13002*t13069;
  t16768 = t14490*t16766;
  t16778 = t15545*t16775;
  t16830 = t15834*t16811;
  t16833 = t15850*t16766;
  t16834 = t15863*t16775;
  t16835 = t15870*t16811;
  t17013 = t16833 + t16834 + t16835;
  t17389 = -0.3*t17013;
  t17664 = -1.*t15880*t16766;
  t17871 = -1.*t15870*t16775;
  t17968 = -1.*t15963*t16811;
  t18000 = t17664 + t17871 + t17968;
  t18001 = 0.2*t18000;
  t18030 = t16030*t16766;
  t18031 = t15850*t16775;
  t18035 = t15880*t16811;
  t18061 = t18030 + t18031 + t18035;
  t18064 = -0.099999*t18061;
  t18066 = t16757 + t16763 + t16768 + t16778 + t16830 + t17389 + t18001 + t18064;
  t18194 = -3.e-6*t13002*t13014;
  t18195 = -3.e-6*t12837*t13007*t13027;
  t18197 = t14512*t13027*t13069;
  t18203 = t18194 + t18195 + t18197;
  t18243 = t13002*t13014;
  t18245 = -1.*t12813*t13007*t13027;
  t18248 = 3.e-6*t12837*t13027*t13069;
  t18250 = t18243 + t18245 + t18248;
  t20675 = t15840*t13002;
  t21083 = t13007*t13014*t13027;
  t21085 = 3.e-6*t13014*t13027*t13069;
  t21091 = t20675 + t21083 + t21085;
  t18187 = 0.2000000000018*t13002*t13014;
  t18188 = -1.*t13000*t13007*t13027;
  t18190 = 6.000000000054e-7*t12837*t13027*t13069;
  t18240 = t14490*t18203;
  t19491 = t15545*t18250;
  t21106 = t15834*t21091;
  t21113 = t15850*t18203;
  t21121 = t15863*t18250;
  t21123 = t15870*t21091;
  t21125 = t21113 + t21121 + t21123;
  t21127 = -0.3*t21125;
  t21129 = -1.*t15880*t18203;
  t21133 = -1.*t15870*t18250;
  t21134 = -1.*t15963*t21091;
  t21151 = t21129 + t21133 + t21134;
  t21153 = 0.2*t21151;
  t21156 = t16030*t18203;
  t21158 = t15850*t18250;
  t21161 = t15880*t21091;
  t21166 = t21156 + t21158 + t21161;
  t21168 = -0.099999*t21166;
  t21170 = t18187 + t18188 + t18190 + t18240 + t19491 + t21106 + t21127 + t21153 + t21168;
  t21232 = t14512*t13002*t13069;
  t21233 = t16769 + t21232;
  t21862 = 3.e-6*t12837*t13002*t13069;
  t21871 = t16523 + t21862;
  t21926 = t13002*t13007*t13014;
  t21942 = 3.e-6*t13002*t13014*t13069;
  t21951 = t21926 + t21942;
  t23576 = -3.e-6*t12813*t13002*t13007;
  t24016 = t12813*t13002*t13069;
  t24019 = t23576 + t24016;
  t24036 = 9.e-12*t13002*t13007*t13014;
  t24084 = t24036 + t15845;
  t24365 = t14512*t13007*t13027;
  t25173 = t24365 + t18248;
  t25212 = 3.e-6*t12837*t13007*t13027;
  t25228 = t12813*t13027*t13069;
  t25231 = t25212 + t25228;
  t25344 = 3.e-6*t13007*t13014*t13027;
  t25684 = -1.*t13014*t13027*t13069;
  t25972 = t25344 + t25684;
  t26265 = -9.e-12*t13079;
  t26399 = 9.e-12*t13079;
  t22487 = t16124*t16766;
  t22526 = t16193*t16775;
  t22665 = t16260*t16811;
  t22815 = -1.*t16265*t16766;
  t23114 = 1.000000000009*t14447*t16775;
  t23216 = -1.*t16367*t16811;
  t23225 = t22815 + t23114 + t23216;
  t23231 = 0.2*t23225;
  t23261 = -1.8e-11*t14447*t16766;
  t23281 = t16430*t16775;
  t23389 = t16265*t16811;
  t23428 = t23261 + t23281 + t23389;
  t23429 = -0.099999*t23428;
  t23472 = t16430*t16766;
  t23502 = t16446*t16775;
  t23510 = -1.000000000009*t14447*t16811;
  t23511 = t23472 + t23502 + t23510;
  t23519 = -0.3*t23511;
  t23522 = t22487 + t22526 + t22665 + t23231 + t23429 + t23519;
  t21186 = -1.*t13000*t13002*t13007;
  t21207 = 6.000000000054e-7*t12837*t13002*t13069;
  t27538 = 3.e-6*t13014*t13027;
  t27539 = t16769 + t27538 + t21232;
  t27541 = -1.*t13014*t13027;
  t27542 = t16523 + t27541 + t21862;
  t27544 = -1.*t15840*t13027;
  t27545 = t21926 + t27544 + t21942;
  t24353 = 6.000000000054e-7*t12837*t13007*t13027;
  t24359 = t13000*t13027*t13069;
  t25191 = t14490*t25173;
  t25237 = t15545*t25231;
  t25990 = t15834*t25972;
  t25994 = t15850*t25173;
  t26013 = t15863*t25231;
  t26070 = t15870*t25972;
  t26129 = t25994 + t26013 + t26070;
  t26149 = -0.3*t26129;
  t26150 = -1.*t15880*t25173;
  t26151 = -1.*t15870*t25231;
  t26152 = -1.*t15963*t25972;
  t26162 = t26150 + t26151 + t26152;
  t26175 = 0.2*t26162;
  t26176 = t16030*t25173;
  t26177 = t15850*t25231;
  t26187 = t15880*t25972;
  t26188 = t26176 + t26177 + t26187;
  t26216 = -0.099999*t26188;
  t26217 = t24353 + t24359 + t25191 + t25237 + t25990 + t26149 + t26175 + t26216;
  t27424 = t16124*t18203;
  t27431 = t16193*t18250;
  t27438 = t16260*t21091;
  t27441 = -1.*t16265*t18203;
  t27442 = 1.000000000009*t14447*t18250;
  t27445 = -1.*t16367*t21091;
  t27447 = t27441 + t27442 + t27445;
  t27456 = 0.2*t27447;
  t27485 = -1.8e-11*t14447*t18203;
  t27486 = t16430*t18250;
  t27490 = t16265*t21091;
  t27507 = t27485 + t27486 + t27490;
  t27508 = -0.099999*t27507;
  t27528 = t16430*t18203;
  t27529 = t16446*t18250;
  t27530 = -1.000000000009*t14447*t21091;
  t27531 = t27528 + t27529 + t27530;
  t27532 = -0.3*t27531;
  t27533 = t27424 + t27431 + t27438 + t27456 + t27508 + t27532;
  t27593 = -1.000000000009*t13002*t13014;
  t27594 = t12813*t13007*t13027;
  t27595 = 3.e-6*t12813*t13027*t13069;
  t27596 = t27593 + t27594 + t27595;
  t27598 = -3.e-6*t12813*t13002;
  t27599 = -3.e-6*t13007*t13014*t13027;
  t27600 = -9.e-12*t13014*t13027*t13069;
  t27602 = t27598 + t27599 + t27600;
  t27604 = t12813*t13002;
  t27605 = t27604 + t21083 + t21085;
  t26701 = t16260*t16600;
  t26717 = t16193*t16618;
  t26725 = t16124*t16629;
  t26765 = -1.000000000009*t14447*t16600;
  t26766 = t16446*t16618;
  t26770 = t16430*t16629;
  t26774 = t26765 + t26766 + t26770;
  t26775 = -0.3*t26774;
  t26782 = -1.*t16367*t16600;
  t26783 = 1.000000000009*t14447*t16618;
  t26784 = -1.*t16265*t16629;
  t26790 = t26782 + t26783 + t26784;
  t26791 = 0.2*t26790;
  t26797 = t16265*t16600;
  t26826 = t16430*t16618;
  t26829 = -1.8e-11*t14447*t16629;
  t26831 = t26797 + t26826 + t26829;
  t27378 = -0.099999*t26831;
  t27379 = t26701 + t26717 + t26725 + t26775 + t26791 + t27378;
  t27537 = -0.2000000000018*t13014*t13027;
  t27635 = t16523 + t27541 + t16598;
  t27640 = 3.e-6*t12813*t13002*t13007;
  t27641 = 9.e-12*t12813*t13002*t13069;
  t27642 = t27640 + t27538 + t27641;
  t27644 = -1.000000000009*t12813*t13027;
  t27645 = t21926 + t27644 + t21942;
  t23568 = -6.000000000054e-7*t13002*t13007*t13014;
  t23575 = 0.2000000000018*t13002*t13014*t13069;
  t24032 = t15834*t24019;
  t24106 = t14490*t24084;
  t24199 = t15545*t16811;
  t24203 = -1.*t15963*t24019;
  t24204 = -1.*t15880*t24084;
  t24205 = -1.*t15870*t16811;
  t24208 = t24203 + t24204 + t24205;
  t24226 = 0.2*t24208;
  t24227 = t15880*t24019;
  t24228 = t16030*t24084;
  t24230 = t15850*t16811;
  t24231 = t24227 + t24228 + t24230;
  t24255 = -0.099999*t24231;
  t24265 = t15870*t24019;
  t24269 = t15850*t24084;
  t24284 = t15863*t16811;
  t24313 = t24265 + t24269 + t24284;
  t24323 = -0.3*t24313;
  t24328 = t23568 + t23575 + t24032 + t24106 + t24199 + t24226 + t24255 + t24323;
  t27590 = 0.2000000000018*t12813*t13002;
  t27591 = 0.2000000000018*t13007*t13014*t13027;
  t27592 = 6.000000000054e-7*t13014*t13027*t13069;
  t27597 = t15834*t27596;
  t27603 = t14490*t27602;
  t27609 = t15545*t27605;
  t27610 = -1.*t15963*t27596;
  t27611 = -1.*t15880*t27602;
  t27613 = -1.*t15870*t27605;
  t27614 = t27610 + t27611 + t27613;
  t27616 = 0.2*t27614;
  t27617 = t15880*t27596;
  t27618 = t16030*t27602;
  t27619 = t15850*t27605;
  t27620 = t27617 + t27618 + t27619;
  t27621 = -0.099999*t27620;
  t27622 = t15870*t27596;
  t27624 = t15850*t27602;
  t27625 = t15863*t27605;
  t27626 = t27622 + t27624 + t27625;
  t27627 = -0.3*t27626;
  t27628 = t27590 + t27591 + t27592 + t27597 + t27603 + t27609 + t27616 + t27621 + t27627;
  t27680 = Sin(var1[3]);
  t27700 = Cos(var1[3]);
  t27699 = t13007*t27680*t13027;
  t27701 = t27700*t13069;
  t27702 = t27699 + t27701;
  t27704 = t27700*t13007;
  t27705 = -1.*t27680*t13027*t13069;
  t27706 = t27704 + t27705;
  t27739 = 3.e-6*t12837*t13002*t13007*t27680;
  t27758 = -3.e-6*t13014*t27680*t13027;
  t27759 = -1.*t14512*t13002*t27680*t13069;
  t27760 = t27739 + t27758 + t27759;
  t27769 = t12813*t13002*t13007*t27680;
  t27771 = t13014*t27680*t13027;
  t27772 = -3.e-6*t12837*t13002*t27680*t13069;
  t27774 = t27769 + t27771 + t27772;
  t27779 = -1.*t13002*t13007*t13014*t27680;
  t27782 = t15840*t27680*t13027;
  t27786 = -3.e-6*t13002*t13014*t27680*t13069;
  t27791 = t27779 + t27782 + t27786;
  t27733 = t13000*t13002*t13007*t27680;
  t27734 = 0.2000000000018*t13014*t27680*t13027;
  t27735 = -6.000000000054e-7*t12837*t13002*t27680*t13069;
  t27767 = t14490*t27760;
  t27775 = t15545*t27774;
  t27793 = t15834*t27791;
  t27794 = t15850*t27760;
  t27797 = t15863*t27774;
  t27800 = t15870*t27791;
  t27803 = t27794 + t27797 + t27800;
  t27804 = -0.3*t27803;
  t27810 = -1.*t15880*t27760;
  t27825 = -1.*t15870*t27774;
  t27828 = -1.*t15963*t27791;
  t27829 = t27810 + t27825 + t27828;
  t27830 = 0.2*t27829;
  t27831 = t16030*t27760;
  t27832 = t15850*t27774;
  t27833 = t15880*t27791;
  t27834 = t27831 + t27832 + t27833;
  t27835 = -0.099999*t27834;
  t27836 = t27733 + t27734 + t27735 + t27767 + t27775 + t27793 + t27804 + t27830 + t27835;
  t27709 = 3.e-6*t13002*t13014*t27680;
  t27710 = 3.e-6*t12837*t27702;
  t27711 = t14512*t27706;
  t27712 = t27709 + t27710 + t27711;
  t27714 = -1.*t13002*t13014*t27680;
  t27715 = t12813*t27702;
  t27718 = 3.e-6*t12837*t27706;
  t27719 = t27714 + t27715 + t27718;
  t27721 = -1.*t15840*t13002*t27680;
  t27722 = -1.*t13014*t27702;
  t27724 = 3.e-6*t13014*t27706;
  t27725 = t27721 + t27722 + t27724;
  t27855 = t27700*t13007*t13027;
  t27856 = -1.*t27680*t13069;
  t27857 = t27855 + t27856;
  t27859 = -1.*t13007*t27680;
  t27860 = -1.*t27700*t13027*t13069;
  t27861 = t27859 + t27860;
  t27863 = 3.e-6*t27700*t13002*t13014;
  t27864 = 3.e-6*t12837*t27857;
  t27865 = t14512*t27861;
  t27866 = t27863 + t27864 + t27865;
  t27869 = -1.*t27700*t13002*t13014;
  t27870 = t12813*t27857;
  t27871 = 3.e-6*t12837*t27861;
  t27872 = t27869 + t27870 + t27871;
  t27874 = -1.*t15840*t27700*t13002;
  t27875 = -1.*t13014*t27857;
  t27876 = 3.e-6*t13014*t27861;
  t27877 = t27874 + t27875 + t27876;
  t27854 = -0.2000000000018*t27700*t13002*t13014;
  t27858 = t13000*t27857;
  t27862 = 6.000000000054e-7*t12837*t27861;
  t27868 = t14490*t27866;
  t27873 = t15545*t27872;
  t27878 = t15834*t27877;
  t27879 = t15850*t27866;
  t27880 = t15863*t27872;
  t27881 = t15870*t27877;
  t27882 = t27879 + t27880 + t27881;
  t27883 = -0.3*t27882;
  t27884 = -1.*t15880*t27866;
  t27885 = -1.*t15870*t27872;
  t27886 = -1.*t15963*t27877;
  t27887 = t27884 + t27885 + t27886;
  t27888 = 0.2*t27887;
  t27889 = t16030*t27866;
  t27890 = t15850*t27872;
  t27891 = t15880*t27877;
  t27892 = t27889 + t27890 + t27891;
  t27893 = -0.099999*t27892;
  t27894 = t27854 + t27858 + t27862 + t27868 + t27873 + t27878 + t27883 + t27888 + t27893;
  t27897 = -1.*t13007*t27680*t13027;
  t27898 = -1.*t27700*t13069;
  t27899 = t27897 + t27898;
  t27903 = t14512*t27899;
  t27904 = t27903 + t27718;
  t27906 = 3.e-6*t12837*t27899;
  t27907 = t12813*t27706;
  t27908 = t27906 + t27907;
  t27910 = 3.e-6*t13014*t27899;
  t27911 = -1.*t13014*t27706;
  t27912 = t27910 + t27911;
  t27901 = 6.000000000054e-7*t12837*t27899;
  t27902 = t13000*t27706;
  t27905 = t14490*t27904;
  t27909 = t15545*t27908;
  t27913 = t15834*t27912;
  t27914 = t15850*t27904;
  t27915 = t15863*t27908;
  t27916 = t15870*t27912;
  t27917 = t27914 + t27915 + t27916;
  t27918 = -0.3*t27917;
  t27919 = -1.*t15880*t27904;
  t27921 = -1.*t15870*t27908;
  t27922 = -1.*t15963*t27912;
  t27923 = t27919 + t27921 + t27922;
  t27924 = 0.2*t27923;
  t27931 = t16030*t27904;
  t27932 = t15850*t27908;
  t27934 = t15880*t27912;
  t27942 = t27931 + t27932 + t27934;
  t27943 = -0.099999*t27942;
  t27944 = t27901 + t27902 + t27905 + t27909 + t27913 + t27918 + t27924 + t27943;
  t27947 = t16124*t27712;
  t27948 = t16193*t27719;
  t27949 = t16260*t27725;
  t27950 = -1.*t16265*t27712;
  t27951 = 1.000000000009*t14447*t27719;
  t27952 = -1.*t16367*t27725;
  t27953 = t27950 + t27951 + t27952;
  t27954 = 0.2*t27953;
  t27955 = -1.8e-11*t14447*t27712;
  t27956 = t16430*t27719;
  t27957 = t16265*t27725;
  t27958 = t27955 + t27956 + t27957;
  t27959 = -0.099999*t27958;
  t27960 = t16430*t27712;
  t27961 = t16446*t27719;
  t27962 = -1.000000000009*t14447*t27725;
  t27963 = t27960 + t27961 + t27962;
  t27964 = -0.3*t27963;
  t27965 = t27947 + t27948 + t27949 + t27954 + t27959 + t27964;
  t27971 = 1.000000000009*t13002*t13014*t27680;
  t27972 = -1.*t12813*t27702;
  t27973 = 3.e-6*t12813*t27706;
  t27974 = t27971 + t27972 + t27973;
  t27977 = 3.e-6*t12813*t13002*t27680;
  t27978 = 3.e-6*t13014*t27702;
  t27979 = -9.e-12*t13014*t27706;
  t27980 = t27977 + t27978 + t27979;
  t27982 = -1.*t12813*t13002*t27680;
  t27983 = t27982 + t27722 + t27724;
  t27968 = -0.2000000000018*t12813*t13002*t27680;
  t27969 = -0.2000000000018*t13014*t27702;
  t27970 = 6.000000000054e-7*t13014*t27706;
  t27975 = t15834*t27974;
  t27981 = t14490*t27980;
  t27984 = t15545*t27983;
  t27985 = -1.*t15963*t27974;
  t27986 = -1.*t15880*t27980;
  t27987 = -1.*t15870*t27983;
  t27988 = t27985 + t27986 + t27987;
  t27989 = 0.2*t27988;
  t27990 = t15880*t27974;
  t27991 = t16030*t27980;
  t27992 = t15850*t27983;
  t27993 = t27990 + t27991 + t27992;
  t27994 = -0.099999*t27993;
  t27995 = t15870*t27974;
  t27996 = t15850*t27980;
  t27997 = t15863*t27983;
  t27998 = t27995 + t27996 + t27997;
  t27999 = -0.3*t27998;
  t28000 = t27968 + t27969 + t27970 + t27975 + t27981 + t27984 + t27989 + t27994 + t27999;
  t28006 = 3.e-6*t12837*t27700*t13002*t13007;
  t28007 = -3.e-6*t27700*t13014*t13027;
  t28008 = -1.*t14512*t27700*t13002*t13069;
  t28011 = t28006 + t28007 + t28008;
  t28013 = t12813*t27700*t13002*t13007;
  t28014 = t27700*t13014*t13027;
  t28015 = -3.e-6*t12837*t27700*t13002*t13069;
  t28016 = t28013 + t28014 + t28015;
  t28018 = -1.*t27700*t13002*t13007*t13014;
  t28019 = t15840*t27700*t13027;
  t28020 = -3.e-6*t27700*t13002*t13014*t13069;
  t28021 = t28018 + t28019 + t28020;
  t28064 = -1.*t12813*t13002*t13007*t27680;
  t28065 = -1.000000000009*t13014*t27680*t13027;
  t28066 = -3.e-6*t12813*t13002*t27680*t13069;
  t28067 = t28064 + t28065 + t28066;
  t28069 = t12813*t27680*t13027;
  t28070 = t27779 + t28069 + t27786;
  t28075 = 3.e-6*t13002*t13007*t13014*t27680;
  t28076 = -3.e-6*t12813*t27680*t13027;
  t28077 = 9.e-12*t13002*t13014*t27680*t13069;
  t28079 = t28075 + t28076 + t28077;
  t28116 = -1.*t14512*t13002*t13007*t27680;
  t28117 = t28116 + t27772;
  t28119 = -3.e-6*t12837*t13002*t13007*t27680;
  t28120 = -1.*t12813*t13002*t27680*t13069;
  t28121 = t28119 + t28120;
  t28123 = -3.e-6*t13002*t13007*t13014*t27680;
  t28124 = t13002*t13014*t27680*t13069;
  t28125 = t28123 + t28124;
  t28149 = -3.e-6*t13002*t13014*t27680;
  t28150 = -3.e-6*t12837*t13007*t27680*t13027;
  t28151 = t14512*t27680*t13027*t13069;
  t28152 = t28149 + t28150 + t28151;
  t28154 = t13002*t13014*t27680;
  t28155 = -1.*t12813*t13007*t27680*t13027;
  t28156 = 3.e-6*t12837*t27680*t13027*t13069;
  t28157 = t28154 + t28155 + t28156;
  t28159 = t15840*t13002*t27680;
  t28160 = t13007*t13014*t27680*t13027;
  t28161 = 3.e-6*t13014*t27680*t13027*t13069;
  t28162 = t28159 + t28160 + t28161;
  t28040 = t16124*t27760;
  t28041 = t16193*t27774;
  t28043 = t16260*t27791;
  t28044 = -1.*t16265*t27760;
  t28045 = 1.000000000009*t14447*t27774;
  t28046 = -1.*t16367*t27791;
  t28047 = t28044 + t28045 + t28046;
  t28048 = 0.2*t28047;
  t28049 = -1.8e-11*t14447*t27760;
  t28050 = t16430*t27774;
  t28051 = t16265*t27791;
  t28052 = t28049 + t28050 + t28051;
  t28053 = -0.099999*t28052;
  t28054 = t16430*t27760;
  t28055 = t16446*t27774;
  t28056 = -1.000000000009*t14447*t27791;
  t28057 = t28054 + t28055 + t28056;
  t28058 = -0.3*t28057;
  t28059 = t28040 + t28041 + t28043 + t28048 + t28053 + t28058;
  t26239 = 5.4e-18*t13079;
  t26249 = 0.100000000003*t16087;
  t26255 = -0.200000000003*t16430;
  t26257 = t26239 + t26249 + t26255;
  t26259 = -0.2000000000048*t13079;
  t26302 = t26265 + t14447;
  t26325 = 0.100000000003*t26302;
  t26326 = t26259 + t16228 + t26325;
  t26328 = 0.1000000000039*t13079;
  t26329 = t26265 + t14955;
  t26367 = -0.200000000003*t26329;
  t26374 = 3.e-7*t16430;
  t26383 = t26328 + t26367 + t26374;
  t26404 = t26399 + t14955;
  t26566 = t26399 + t14447;
  t28061 = -0.2000000000018*t13002*t13007*t13014*t27680;
  t28062 = 0.2000000000018*t12813*t27680*t13027;
  t28063 = -6.000000000054e-7*t13002*t13014*t27680*t13069;
  t28068 = t15834*t28067;
  t28071 = t15545*t28070;
  t28080 = t14490*t28079;
  t28081 = t15880*t28067;
  t28084 = t15850*t28070;
  t28085 = t16030*t28079;
  t28086 = t28081 + t28084 + t28085;
  t28089 = -0.099999*t28086;
  t28094 = t15870*t28067;
  t28097 = t15863*t28070;
  t28102 = t15850*t28079;
  t28105 = t28094 + t28097 + t28102;
  t28106 = -0.3*t28105;
  t28107 = -1.*t15963*t28067;
  t28108 = -1.*t15870*t28070;
  t28109 = -1.*t15880*t28079;
  t28110 = t28107 + t28108 + t28109;
  t28111 = 0.2*t28110;
  t28112 = t28061 + t28062 + t28063 + t28068 + t28071 + t28080 + t28089 + t28106 + t28111;
  t28344 = 1.000000000009*t27700*t13002*t13014;
  t28345 = -1.*t12813*t27857;
  t28346 = 3.e-6*t12813*t27861;
  t28347 = t28344 + t28345 + t28346;
  t28349 = 3.e-6*t12813*t27700*t13002;
  t28350 = 3.e-6*t13014*t27857;
  t28351 = -9.e-12*t13014*t27861;
  t28352 = t28349 + t28350 + t28351;
  t28354 = -1.*t12813*t27700*t13002;
  t28355 = t28354 + t27875 + t27876;
  t28146 = 0.2000000000018*t13002*t13014*t27680;
  t28376 = 3.e-6*t12813*t27702;
  t28377 = -9.e-12*t12813*t27706;
  t28378 = t28149 + t28376 + t28377;
  t28380 = t28154 + t27972 + t27973;
  t28382 = 1.000000000009*t12813*t13002*t27680;
  t28383 = t13014*t27702;
  t28384 = -3.e-6*t13014*t27706;
  t28385 = t28382 + t28383 + t28384;
  t28406 = 3.e-6*t12813*t27899;
  t28407 = -1.*t12813*t27706;
  t28408 = t28406 + t28407;
  t28411 = -9.e-12*t13014*t27899;
  t28412 = t28411 + t27724;
  t28299 = t16260*t27974;
  t28300 = t16124*t27980;
  t28301 = t16193*t27983;
  t28302 = -1.000000000009*t14447*t27974;
  t28306 = t16430*t27980;
  t28307 = t16446*t27983;
  t28308 = t28302 + t28306 + t28307;
  t28314 = -0.3*t28308;
  t28326 = t16265*t27974;
  t28327 = -1.8e-11*t14447*t27980;
  t28328 = t16430*t27983;
  t28329 = t28326 + t28327 + t28328;
  t28330 = -0.099999*t28329;
  t28331 = -1.*t16367*t27974;
  t28332 = -1.*t16265*t27980;
  t28333 = 1.000000000009*t14447*t27983;
  t28334 = t28331 + t28332 + t28333;
  t28335 = 0.2*t28334;
  t28336 = t28299 + t28300 + t28301 + t28314 + t28330 + t28335;
  t28114 = -6.000000000054e-7*t12837*t13002*t13007*t27680;
  t28115 = -1.*t13000*t13002*t27680*t13069;
  t28118 = t14490*t28117;
  t28122 = t15545*t28121;
  t28126 = t15834*t28125;
  t28127 = t15850*t28117;
  t28128 = t15863*t28121;
  t28129 = t15870*t28125;
  t28130 = t28127 + t28128 + t28129;
  t28131 = -0.3*t28130;
  t28132 = -1.*t15880*t28117;
  t28133 = -1.*t15870*t28121;
  t28134 = -1.*t15963*t28125;
  t28135 = t28132 + t28133 + t28134;
  t28136 = 0.2*t28135;
  t28139 = t16030*t28117;
  t28140 = t15850*t28121;
  t28141 = t15880*t28125;
  t28142 = t28139 + t28140 + t28141;
  t28143 = -0.099999*t28142;
  t28144 = t28114 + t28115 + t28118 + t28122 + t28126 + t28131 + t28136 + t28143;
  t28441 = -1.*t27700*t13007*t13027;
  t28442 = t27680*t13069;
  t28443 = t28441 + t28442;
  t28446 = t14512*t28443;
  t28447 = t28446 + t27871;
  t28449 = 3.e-6*t12837*t28443;
  t28450 = t12813*t27861;
  t28451 = t28449 + t28450;
  t28453 = 3.e-6*t13014*t28443;
  t28454 = -1.*t13014*t27861;
  t28455 = t28453 + t28454;
  t28228 = t16124*t27904;
  t28229 = t16193*t27908;
  t28230 = t16260*t27912;
  t28231 = -1.*t16265*t27904;
  t28232 = 1.000000000009*t14447*t27908;
  t28233 = -1.*t16367*t27912;
  t28234 = t28231 + t28232 + t28233;
  t28235 = 0.2*t28234;
  t28236 = -1.8e-11*t14447*t27904;
  t28237 = t16430*t27908;
  t28238 = t16265*t27912;
  t28239 = t28236 + t28237 + t28238;
  t28240 = -0.099999*t28239;
  t28241 = t16430*t27904;
  t28242 = t16446*t27908;
  t28243 = -1.000000000009*t14447*t27912;
  t28244 = t28241 + t28242 + t28243;
  t28245 = -0.3*t28244;
  t28246 = t28228 + t28229 + t28230 + t28235 + t28240 + t28245;
  t28404 = 6.000000000054e-7*t13014*t27899;
  t28405 = -0.2000000000018*t13014*t27706;
  t28409 = t15834*t28408;
  t28410 = t15545*t27912;
  t28413 = t14490*t28412;
  t28414 = t15880*t28408;
  t28415 = t15850*t27912;
  t28416 = t16030*t28412;
  t28417 = t28414 + t28415 + t28416;
  t28418 = -0.099999*t28417;
  t28419 = t15870*t28408;
  t28420 = t15863*t27912;
  t28421 = t15850*t28412;
  t28422 = t28419 + t28420 + t28421;
  t28423 = -0.3*t28422;
  t28424 = -1.*t15963*t28408;
  t28425 = -1.*t15870*t27912;
  t28426 = -1.*t15880*t28412;
  t28427 = t28424 + t28425 + t28426;
  t28428 = 0.2*t28427;
  t28429 = t28404 + t28405 + t28409 + t28410 + t28413 + t28418 + t28423 + t28428;
  t28478 = -1.*t27700*t13007;
  t28479 = t27680*t13027*t13069;
  t28480 = t28478 + t28479;
  t28482 = t14512*t28480;
  t28483 = t27906 + t28482;
  t28485 = t12813*t27899;
  t28486 = 3.e-6*t12837*t28480;
  t28487 = t28485 + t28486;
  t28489 = -1.*t13014*t27899;
  t28490 = 3.e-6*t13014*t28480;
  t28491 = t28489 + t28490;
  t28003 = t13000*t27700*t13002*t13007;
  t28004 = 0.2000000000018*t27700*t13014*t13027;
  t28005 = -6.000000000054e-7*t12837*t27700*t13002*t13069;
  t28012 = t14490*t28011;
  t28017 = t15545*t28016;
  t28022 = t15834*t28021;
  t28023 = t15850*t28011;
  t28024 = t15863*t28016;
  t28025 = t15870*t28021;
  t28026 = t28023 + t28024 + t28025;
  t28027 = -0.3*t28026;
  t28028 = -1.*t15880*t28011;
  t28029 = -1.*t15870*t28016;
  t28030 = -1.*t15963*t28021;
  t28031 = t28028 + t28029 + t28030;
  t28032 = 0.2*t28031;
  t28033 = t16030*t28011;
  t28034 = t15850*t28016;
  t28035 = t15880*t28021;
  t28036 = t28033 + t28034 + t28035;
  t28037 = -0.099999*t28036;
  t28038 = t28003 + t28004 + t28005 + t28012 + t28017 + t28022 + t28027 + t28032 + t28037;
  t28444 = 6.000000000054e-7*t12837*t28443;
  t28445 = t13000*t27861;
  t28448 = t14490*t28447;
  t28452 = t15545*t28451;
  t28456 = t15834*t28455;
  t28457 = t15850*t28447;
  t28458 = t15863*t28451;
  t28459 = t15870*t28455;
  t28460 = t28457 + t28458 + t28459;
  t28461 = -0.3*t28460;
  t28462 = -1.*t15880*t28447;
  t28463 = -1.*t15870*t28451;
  t28464 = -1.*t15963*t28455;
  t28465 = t28462 + t28463 + t28464;
  t28466 = 0.2*t28465;
  t28468 = t16030*t28447;
  t28469 = t15850*t28451;
  t28470 = t15880*t28455;
  t28471 = t28468 + t28469 + t28470;
  t28472 = -0.099999*t28471;
  t28473 = t28444 + t28445 + t28448 + t28452 + t28456 + t28461 + t28466 + t28472;
  t28206 = t16124*t27866;
  t28207 = t16193*t27872;
  t28208 = t16260*t27877;
  t28209 = -1.*t16265*t27866;
  t28210 = 1.000000000009*t14447*t27872;
  t28211 = -1.*t16367*t27877;
  t28212 = t28209 + t28210 + t28211;
  t28213 = 0.2*t28212;
  t28214 = -1.8e-11*t14447*t27866;
  t28215 = t16430*t27872;
  t28216 = t16265*t27877;
  t28217 = t28214 + t28215 + t28216;
  t28218 = -0.099999*t28217;
  t28219 = t16430*t27866;
  t28220 = t16446*t27872;
  t28221 = -1.000000000009*t14447*t27877;
  t28224 = t28219 + t28220 + t28221;
  t28225 = -0.3*t28224;
  t28226 = t28206 + t28207 + t28208 + t28213 + t28218 + t28225;
  t28341 = -0.2000000000018*t12813*t27700*t13002;
  t28342 = -0.2000000000018*t13014*t27857;
  t28343 = 6.000000000054e-7*t13014*t27861;
  t28348 = t15834*t28347;
  t28353 = t14490*t28352;
  t28356 = t15545*t28355;
  t28357 = -1.*t15963*t28347;
  t28358 = -1.*t15880*t28352;
  t28359 = -1.*t15870*t28355;
  t28360 = t28357 + t28358 + t28359;
  t28361 = 0.2*t28360;
  t28362 = t15880*t28347;
  t28363 = t16030*t28352;
  t28364 = t15850*t28355;
  t28365 = t28362 + t28363 + t28364;
  t28366 = -0.099999*t28365;
  t28367 = t15870*t28347;
  t28368 = t15850*t28352;
  t28369 = t15863*t28355;
  t28370 = t28367 + t28368 + t28369;
  t28371 = -0.3*t28370;
  t28372 = t28341 + t28342 + t28343 + t28348 + t28353 + t28356 + t28361 + t28366 + t28371;
  t28477 = t13000*t27899;
  t28481 = 6.000000000054e-7*t12837*t28480;
  t28534 = t28149 + t27906 + t28482;
  t28536 = t28154 + t28485 + t28486;
  t28538 = t28159 + t28489 + t28490;
  t28564 = t13007*t27680;
  t28565 = t27700*t13027*t13069;
  t28566 = t28564 + t28565;
  t28585 = -3.e-6*t12837*t27700*t13002*t13007;
  t28586 = 3.e-6*t27700*t13014*t13027;
  t28587 = t14512*t27700*t13002*t13069;
  t28588 = t28585 + t28586 + t28587;
  t28590 = -1.*t12813*t27700*t13002*t13007;
  t28591 = -1.*t27700*t13014*t13027;
  t28593 = 3.e-6*t12837*t27700*t13002*t13069;
  t28595 = t28590 + t28591 + t28593;
  t28599 = t27700*t13002*t13007*t13014;
  t28600 = -1.*t15840*t27700*t13027;
  t28613 = 3.e-6*t27700*t13002*t13014*t13069;
  t28614 = t28599 + t28600 + t28613;
  t28582 = -1.*t13000*t27700*t13002*t13007;
  t28583 = -0.2000000000018*t27700*t13014*t13027;
  t28584 = 6.000000000054e-7*t12837*t27700*t13002*t13069;
  t28589 = t14490*t28588;
  t28598 = t15545*t28595;
  t28616 = t15834*t28614;
  t28617 = t15850*t28588;
  t28618 = t15863*t28595;
  t28619 = t15870*t28614;
  t28620 = t28617 + t28618 + t28619;
  t28621 = -0.3*t28620;
  t28622 = -1.*t15880*t28588;
  t28623 = -1.*t15870*t28595;
  t28624 = -1.*t15963*t28614;
  t28625 = t28622 + t28623 + t28624;
  t28626 = 0.2*t28625;
  t28627 = t16030*t28588;
  t28628 = t15850*t28595;
  t28629 = t15880*t28614;
  t28630 = t28627 + t28628 + t28629;
  t28631 = -0.099999*t28630;
  t28632 = t28582 + t28583 + t28584 + t28589 + t28598 + t28616 + t28621 + t28626 + t28631;
  t28568 = -3.e-6*t27700*t13002*t13014;
  t28569 = t14512*t28566;
  t28570 = t28568 + t28449 + t28569;
  t28572 = t27700*t13002*t13014;
  t28573 = t12813*t28443;
  t28574 = 3.e-6*t12837*t28566;
  t28575 = t28572 + t28573 + t28574;
  t28577 = t15840*t27700*t13002;
  t28578 = -1.*t13014*t28443;
  t28579 = 3.e-6*t13014*t28566;
  t28580 = t28577 + t28578 + t28579;
  t28653 = t14512*t27857;
  t28654 = t28653 + t28574;
  t28656 = t12813*t28566;
  t28657 = t27864 + t28656;
  t28659 = -1.*t13014*t28566;
  t28660 = t28350 + t28659;
  t28651 = 6.000000000054e-7*t12837*t27857;
  t28652 = t13000*t28566;
  t28655 = t14490*t28654;
  t28658 = t15545*t28657;
  t28661 = t15834*t28660;
  t28662 = t15850*t28654;
  t28663 = t15863*t28657;
  t28664 = t15870*t28660;
  t28665 = t28662 + t28663 + t28664;
  t28666 = -0.3*t28665;
  t28667 = -1.*t15880*t28654;
  t28668 = -1.*t15870*t28657;
  t28669 = -1.*t15963*t28660;
  t28670 = t28667 + t28668 + t28669;
  t28671 = 0.2*t28670;
  t28672 = t16030*t28654;
  t28673 = t15850*t28657;
  t28674 = t15880*t28660;
  t28675 = t28672 + t28673 + t28674;
  t28678 = -0.099999*t28675;
  t28680 = t28651 + t28652 + t28655 + t28658 + t28661 + t28666 + t28671 + t28678;
  t28683 = t16124*t28570;
  t28684 = t16193*t28575;
  t28685 = t16260*t28580;
  t28686 = -1.*t16265*t28570;
  t28687 = 1.000000000009*t14447*t28575;
  t28688 = -1.*t16367*t28580;
  t28689 = t28686 + t28687 + t28688;
  t28691 = 0.2*t28689;
  t28692 = -1.8e-11*t14447*t28570;
  t28694 = t16430*t28575;
  t28697 = t16265*t28580;
  t28708 = t28692 + t28694 + t28697;
  t28714 = -0.099999*t28708;
  t28715 = t16430*t28570;
  t28717 = t16446*t28575;
  t28718 = -1.000000000009*t14447*t28580;
  t28719 = t28715 + t28717 + t28718;
  t28722 = -0.3*t28719;
  t28723 = t28683 + t28684 + t28685 + t28691 + t28714 + t28722;
  t28733 = -1.000000000009*t27700*t13002*t13014;
  t28735 = -1.*t12813*t28443;
  t28736 = 3.e-6*t12813*t28566;
  t28737 = t28733 + t28735 + t28736;
  t28744 = -3.e-6*t12813*t27700*t13002;
  t28748 = -9.e-12*t13014*t28566;
  t28751 = t28744 + t28453 + t28748;
  t28757 = t12813*t27700*t13002;
  t28758 = t28757 + t28578 + t28579;
  t28726 = 0.2000000000018*t12813*t27700*t13002;
  t28729 = -0.2000000000018*t13014*t28443;
  t28731 = 6.000000000054e-7*t13014*t28566;
  t28739 = t15834*t28737;
  t28756 = t14490*t28751;
  t28760 = t15545*t28758;
  t28762 = -1.*t15963*t28737;
  t28763 = -1.*t15880*t28751;
  t28766 = -1.*t15870*t28758;
  t28768 = t28762 + t28763 + t28766;
  t28772 = 0.2*t28768;
  t28780 = t15880*t28737;
  t28790 = t16030*t28751;
  t28796 = t15850*t28758;
  t28798 = t28780 + t28790 + t28796;
  t28801 = -0.099999*t28798;
  t28804 = t15870*t28737;
  t28831 = t15850*t28751;
  t28832 = t15863*t28758;
  t28833 = t28804 + t28831 + t28832;
  t28837 = -0.3*t28833;
  t28838 = t28726 + t28729 + t28731 + t28739 + t28756 + t28760 + t28772 + t28801 + t28837;
  t28864 = t14512*t27700*t13002*t13007;
  t28868 = t28864 + t28593;
  t28872 = t12813*t27700*t13002*t13069;
  t28875 = t28006 + t28872;
  t28879 = 3.e-6*t27700*t13002*t13007*t13014;
  t28881 = -1.*t27700*t13002*t13014*t13069;
  t28885 = t28879 + t28881;
  t28997 = 1.000000000009*t27700*t13014*t13027;
  t28999 = 3.e-6*t12813*t27700*t13002*t13069;
  t29000 = t28013 + t28997 + t28999;
  t29033 = -3.e-6*t27700*t13002*t13007*t13014;
  t29035 = 3.e-6*t12813*t27700*t13027;
  t29041 = -9.e-12*t27700*t13002*t13014*t13069;
  t29042 = t29033 + t29035 + t29041;
  t29047 = -1.*t12813*t27700*t13027;
  t29048 = t28599 + t29047 + t28613;
  t29204 = 3.e-6*t12837*t27700*t13007*t13027;
  t29205 = -1.*t14512*t27700*t13027*t13069;
  t29207 = t27863 + t29204 + t29205;
  t29209 = t12813*t27700*t13007*t13027;
  t29210 = -3.e-6*t12837*t27700*t13027*t13069;
  t29211 = t27869 + t29209 + t29210;
  t29213 = -1.*t27700*t13007*t13014*t13027;
  t29214 = -3.e-6*t27700*t13014*t13027*t13069;
  t29215 = t27874 + t29213 + t29214;
  t27683 = -0.2000000000018*t13002*t13014*t27680;
  t27703 = t13000*t27702;
  t27708 = 6.000000000054e-7*t12837*t27706;
  t27713 = t14490*t27712;
  t27720 = t15545*t27719;
  t27732 = t15834*t27725;
  t27839 = t15850*t27712;
  t27840 = t15863*t27719;
  t27841 = t15870*t27725;
  t27842 = t27839 + t27840 + t27841;
  t27843 = -0.3*t27842;
  t27844 = -1.*t15880*t27712;
  t27845 = -1.*t15870*t27719;
  t27846 = -1.*t15963*t27725;
  t27847 = t27844 + t27845 + t27846;
  t27848 = 0.2*t27847;
  t27849 = t16030*t27712;
  t27850 = t15850*t27719;
  t27851 = t15880*t27725;
  t27852 = t27849 + t27850 + t27851;
  t27853 = -0.099999*t27852;
  t29326 = t27683 + t27703 + t27708 + t27713 + t27720 + t27732 + t27843 + t27848 + t27853;
  t28858 = 6.000000000054e-7*t12837*t27700*t13002*t13007;
  t28859 = t13000*t27700*t13002*t13069;
  t28870 = t14490*t28868;
  t28876 = t15545*t28875;
  t28886 = t15834*t28885;
  t28888 = t15850*t28868;
  t28893 = t15863*t28875;
  t28894 = t15870*t28885;
  t28895 = t28888 + t28893 + t28894;
  t28901 = -0.3*t28895;
  t28904 = -1.*t15880*t28868;
  t28905 = -1.*t15870*t28875;
  t28906 = -1.*t15963*t28885;
  t28907 = t28904 + t28905 + t28906;
  t28911 = 0.2*t28907;
  t28917 = t16030*t28868;
  t28921 = t15850*t28875;
  t28922 = t15880*t28885;
  t28924 = t28917 + t28921 + t28922;
  t28930 = -0.099999*t28924;
  t28932 = t28858 + t28859 + t28870 + t28876 + t28886 + t28901 + t28911 + t28930;
  t29330 = t27864 + t27865;
  t29332 = t27870 + t27871;
  t29337 = t27875 + t27876;
  t29491 = 3.e-6*t12813*t27857;
  t29492 = -1.*t12813*t28566;
  t29493 = t29491 + t29492;
  t29496 = -9.e-12*t13014*t27857;
  t29497 = t29496 + t28579;
  t28936 = t16124*t28588;
  t28939 = t16193*t28595;
  t28942 = t16260*t28614;
  t28943 = -1.*t16265*t28588;
  t28944 = 1.000000000009*t14447*t28595;
  t28946 = -1.*t16367*t28614;
  t28947 = t28943 + t28944 + t28946;
  t28948 = 0.2*t28947;
  t28951 = -1.8e-11*t14447*t28588;
  t28956 = t16430*t28595;
  t28959 = t16265*t28614;
  t28960 = t28951 + t28956 + t28959;
  t28966 = -0.099999*t28960;
  t28967 = t16430*t28588;
  t28968 = t16446*t28595;
  t28971 = -1.000000000009*t14447*t28614;
  t28978 = t28967 + t28968 + t28971;
  t28979 = -0.3*t28978;
  t28981 = t28936 + t28939 + t28942 + t28948 + t28966 + t28979;
  t29392 = t16124*t28654;
  t29393 = t16193*t28657;
  t29395 = t16260*t28660;
  t29396 = -1.*t16265*t28654;
  t29397 = 1.000000000009*t14447*t28657;
  t29399 = -1.*t16367*t28660;
  t29404 = t29396 + t29397 + t29399;
  t29415 = 0.2*t29404;
  t29419 = -1.8e-11*t14447*t28654;
  t29429 = t16430*t28657;
  t29430 = t16265*t28660;
  t29435 = t29419 + t29429 + t29430;
  t29436 = -0.099999*t29435;
  t29439 = t16430*t28654;
  t29453 = t16446*t28657;
  t29454 = -1.000000000009*t14447*t28660;
  t29456 = t29439 + t29453 + t29454;
  t29486 = -0.3*t29456;
  t29487 = t29392 + t29393 + t29395 + t29415 + t29436 + t29486;
  t27838 = var2[4]*t27836;
  t27896 = var2[3]*t27894;
  t27946 = var2[5]*t27944;
  t27967 = var2[21]*t27965;
  t28002 = var2[19]*t28000;
  t28988 = 0.2000000000018*t27700*t13002*t13007*t13014;
  t28989 = -0.2000000000018*t12813*t27700*t13027;
  t28992 = 6.000000000054e-7*t27700*t13002*t13014*t13069;
  t29001 = t15834*t29000;
  t29046 = t14490*t29042;
  t29062 = t15545*t29048;
  t29068 = -1.*t15963*t29000;
  t29069 = -1.*t15880*t29042;
  t29070 = -1.*t15870*t29048;
  t29071 = t29068 + t29069 + t29070;
  t29072 = 0.2*t29071;
  t29073 = t15880*t29000;
  t29074 = t16030*t29042;
  t29077 = t15850*t29048;
  t29090 = t29073 + t29074 + t29077;
  t29095 = -0.099999*t29090;
  t29097 = t15870*t29000;
  t29099 = t15850*t29042;
  t29134 = t15863*t29048;
  t29135 = t29097 + t29099 + t29134;
  t29157 = -0.3*t29135;
  t29182 = t28988 + t28989 + t28992 + t29001 + t29046 + t29062 + t29072 + t29095 + t29157;
  t29629 = 3.e-6*t12813*t28443;
  t29635 = -9.e-12*t12813*t28566;
  t29639 = t27863 + t29629 + t29635;
  t29641 = t27869 + t28735 + t28736;
  t29647 = -1.000000000009*t12813*t27700*t13002;
  t29648 = t13014*t28443;
  t29650 = -3.e-6*t13014*t28566;
  t29651 = t29647 + t29648 + t29650;
  t29489 = 6.000000000054e-7*t13014*t27857;
  t29490 = -0.2000000000018*t13014*t28566;
  t29494 = t15834*t29493;
  t29495 = t15545*t28660;
  t29498 = t14490*t29497;
  t29499 = t15880*t29493;
  t29500 = t15850*t28660;
  t29501 = t16030*t29497;
  t29502 = t29499 + t29500 + t29501;
  t29503 = -0.099999*t29502;
  t29506 = t15870*t29493;
  t29511 = t15863*t28660;
  t29513 = t15850*t29497;
  t29514 = t29506 + t29511 + t29513;
  t29520 = -0.3*t29514;
  t29521 = -1.*t15963*t29493;
  t29522 = -1.*t15870*t28660;
  t29523 = -1.*t15880*t29497;
  t29524 = t29521 + t29522 + t29523;
  t29525 = 0.2*t29524;
  t29526 = t29489 + t29490 + t29494 + t29495 + t29498 + t29503 + t29520 + t29525;
  t29572 = t16260*t28737;
  t29573 = t16124*t28751;
  t29574 = t16193*t28758;
  t29575 = -1.000000000009*t14447*t28737;
  t29576 = t16430*t28751;
  t29582 = t16446*t28758;
  t29587 = t29575 + t29576 + t29582;
  t29590 = -0.3*t29587;
  t29609 = t16265*t28737;
  t29610 = -1.8e-11*t14447*t28751;
  t29611 = t16430*t28758;
  t29612 = t29609 + t29610 + t29611;
  t29613 = -0.099999*t29612;
  t29614 = -1.*t16367*t28737;
  t29615 = -1.*t16265*t28751;
  t29616 = 1.000000000009*t14447*t28758;
  t29617 = t29614 + t29615 + t29616;
  t29618 = 0.2*t29617;
  t29619 = t29572 + t29573 + t29574 + t29590 + t29613 + t29618;
  p_output1[0]=t13000*t13002*t13007 + 0.2000000000018*t13014*t13027 - 6.000000000054e-7*t12837*t13002*t13069 + t14490*t14517 + t15545*t15811 + t15834*t15846 - 0.3*(t14517*t15850 + t15811*t15863 + t15846*t15870) + 0.2*(-1.*t15811*t15870 - 1.*t14517*t15880 - 1.*t15846*t15963) - 0.099999*(t15811*t15850 + t15846*t15880 + t14517*t16030) + var1[0] + var2[0] + t21170*var2[4] + t18066*var2[5] + t16748*var2[19] + t16500*var2[21] + var2[5]*(t26217*var2[4] + (t21186 + t21207 + t14490*t21233 + t15545*t21871 + t15834*t21951 - 0.3*(t15850*t21233 + t15863*t21871 + t15870*t21951) - 0.099999*(t16030*t21233 + t15850*t21871 + t15880*t21951) + 0.2*(-1.*t15880*t21233 - 1.*t15870*t21871 - 1.*t15963*t21951))*var2[5] + t24328*var2[19] + t23522*var2[21]) + var2[21]*(t27533*var2[4] + t23522*var2[5] + t27379*var2[19] + (-0.099999*(-1.8e-11*t13079*t14517 + t15846*t16096 + t15811*t16265) + t14517*t26257 + t15811*t26326 + t15846*t26383 - 0.3*(-1.000000000009*t13079*t15846 + t14517*t16265 + t15811*t26404) + 0.2*(1.000000000009*t13079*t15811 - 1.*t14517*t16096 - 1.*t15846*t26566))*var2[21]) + var2[19]*(t27628*var2[4] + t24328*var2[5] + (-0.2000000000018*t12813*t13002*t13007 - 6.000000000054e-7*t12813*t13002*t13069 + t27537 + t15545*t27635 + t14490*t27642 + t15834*t27645 - 0.3*(t15863*t27635 + t15850*t27642 + t15870*t27645) - 0.099999*(t15850*t27635 + t16030*t27642 + t15880*t27645) + 0.2*(-1.*t15870*t27635 - 1.*t15880*t27642 - 1.*t15963*t27645))*var2[19] + t27379*var2[21]) + var2[4]*((t21186 + t21207 + t27537 + t14490*t27539 + t15545*t27542 + t15834*t27545 - 0.3*(t15850*t27539 + t15863*t27542 + t15870*t27545) - 0.099999*(t16030*t27539 + t15850*t27542 + t15880*t27545) + 0.2*(-1.*t15880*t27539 - 1.*t15870*t27542 - 1.*t15963*t27545))*var2[4] + t26217*var2[5] + t27628*var2[19] + t27533*var2[21]) + var3[0] + t21170*var3[4] + t18066*var3[5] + t16748*var3[19] + t16500*var3[21] - 1.*var4[0];
  p_output1[1]=t27683 + t27703 + t27708 + t27713 + t27720 + t27732 + t27838 + t27843 + t27848 + t27853 + t27896 + t27946 + t27967 + t28002 + var1[1] + var2[1] + var2[21]*(t28226*var2[3] + t28059*var2[4] + t28246*var2[5] + t28336*var2[19] + (t26257*t27712 + t26326*t27719 + t26383*t27725 - 0.3*(t16265*t27712 + t26404*t27719 - 1.000000000009*t13079*t27725) - 0.099999*(-1.8e-11*t13079*t27712 + t16265*t27719 + t16096*t27725) + 0.2*(-1.*t16096*t27712 + 1.000000000009*t13079*t27719 - 1.*t26566*t27725))*var2[21]) + var2[4]*(t28038*var2[3] + (-1.*t13000*t13007*t13027*t27680 + 6.000000000054e-7*t12837*t13027*t13069*t27680 + t28146 + t14490*t28152 + t15545*t28157 + t15834*t28162 - 0.3*(t15850*t28152 + t15863*t28157 + t15870*t28162) - 0.099999*(t16030*t28152 + t15850*t28157 + t15880*t28162) + 0.2*(-1.*t15880*t28152 - 1.*t15870*t28157 - 1.*t15963*t28162))*var2[4] + t28144*var2[5] + t28112*var2[19] + t28059*var2[21]) + var2[3]*((t28146 + t28477 + t28481 + t14490*t28534 + t15545*t28536 + t15834*t28538 - 0.3*(t15850*t28534 + t15863*t28536 + t15870*t28538) - 0.099999*(t16030*t28534 + t15850*t28536 + t15880*t28538) + 0.2*(-1.*t15880*t28534 - 1.*t15870*t28536 - 1.*t15963*t28538))*var2[3] + t28038*var2[4] + t28473*var2[5] + t28372*var2[19] + t28226*var2[21]) + var2[5]*(t28473*var2[3] + t28144*var2[4] + (t28477 + t28481 + t14490*t28483 + t15545*t28487 + t15834*t28491 - 0.3*(t15850*t28483 + t15863*t28487 + t15870*t28491) - 0.099999*(t16030*t28483 + t15850*t28487 + t15880*t28491) + 0.2*(-1.*t15880*t28483 - 1.*t15870*t28487 - 1.*t15963*t28491))*var2[5] + t28429*var2[19] + t28246*var2[21]) + var2[19]*(t28372*var2[3] + t28112*var2[4] + t28429*var2[5] + (-0.2000000000018*t12813*t27702 + 6.000000000054e-7*t12813*t27706 + t28146 + t14490*t28378 + t15545*t28380 + t15834*t28385 - 0.3*(t15850*t28378 + t15863*t28380 + t15870*t28385) - 0.099999*(t16030*t28378 + t15850*t28380 + t15880*t28385) + 0.2*(-1.*t15880*t28378 - 1.*t15870*t28380 - 1.*t15963*t28385))*var2[19] + t28336*var2[21]) + var3[1] + t27894*var3[3] + t27836*var3[4] + t27944*var3[5] + t28000*var3[19] + t27965*var3[21] - 1.*var4[1];
  p_output1[2]=0.2000000000018*t13002*t13014*t27700 + t13000*t28443 + 6.000000000054e-7*t12837*t28566 + t14490*t28570 + t15545*t28575 + t15834*t28580 - 0.3*(t15850*t28570 + t15863*t28575 + t15870*t28580) - 0.099999*(t16030*t28570 + t15850*t28575 + t15880*t28580) + 0.2*(-1.*t15880*t28570 - 1.*t15870*t28575 - 1.*t15963*t28580) + var1[2] + var2[2] + (t27838 + t27896 + t27946 + t27967 + t28002)*var2[3] + t29326*var2[3] + t28632*var2[4] + t28680*var2[5] + t28838*var2[19] + t28723*var2[21] + var2[21]*(t27965*var2[3] + t28981*var2[4] + t29487*var2[5] + t29619*var2[19] + (t26257*t28570 + t26326*t28575 + t26383*t28580 - 0.3*(t16265*t28570 + t26404*t28575 - 1.000000000009*t13079*t28580) - 0.099999*(-1.8e-11*t13079*t28570 + t16265*t28575 + t16096*t28580) + 0.2*(-1.*t16096*t28570 + 1.000000000009*t13079*t28575 - 1.*t26566*t28580))*var2[21]) + var2[4]*(t27836*var2[3] + (t13000*t13007*t13027*t27700 - 6.000000000054e-7*t12837*t13027*t13069*t27700 + t27854 + t14490*t29207 + t15545*t29211 + t15834*t29215 - 0.3*(t15850*t29207 + t15863*t29211 + t15870*t29215) - 0.099999*(t16030*t29207 + t15850*t29211 + t15880*t29215) + 0.2*(-1.*t15880*t29207 - 1.*t15870*t29211 - 1.*t15963*t29215))*var2[4] + t28932*var2[5] + t29182*var2[19] + t28981*var2[21]) + var2[5]*(t27944*var2[3] + t28932*var2[4] + (t27858 + t27862 + t14490*t29330 + t15545*t29332 + t15834*t29337 - 0.3*(t15850*t29330 + t15863*t29332 + t15870*t29337) - 0.099999*(t16030*t29330 + t15850*t29332 + t15880*t29337) + 0.2*(-1.*t15880*t29330 - 1.*t15870*t29332 - 1.*t15963*t29337))*var2[5] + t29526*var2[19] + t29487*var2[21]) + var2[19]*(t28000*var2[3] + t29182*var2[4] + t29526*var2[5] + (t27854 - 0.2000000000018*t12813*t28443 + 6.000000000054e-7*t12813*t28566 + t14490*t29639 + t15545*t29641 + t15834*t29651 - 0.3*(t15850*t29639 + t15863*t29641 + t15870*t29651) - 0.099999*(t16030*t29639 + t15850*t29641 + t15880*t29651) + 0.2*(-1.*t15880*t29639 - 1.*t15870*t29641 - 1.*t15963*t29651))*var2[19] + t29619*var2[21]) + var3[2] + t29326*var3[3] + t28632*var3[4] + t28680*var3[5] + t28838*var3[19] + t28723*var3[21] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RightBackFoot_BackStance.hh"

namespace BackStance
{

void ddh_RightBackFoot_BackStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
