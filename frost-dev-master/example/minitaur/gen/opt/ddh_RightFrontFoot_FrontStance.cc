/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:05:21 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t430;
  double t1063;
  double t1720;
  double t1779;
  double t1899;
  double t1900;
  double t1901;
  double t1905;
  double t1906;
  double t1815;
  double t1821;
  double t1824;
  double t1826;
  double t1910;
  double t2011;
  double t2252;
  double t1907;
  double t1908;
  double t2254;
  double t2229;
  double t2239;
  double t2245;
  double t2247;
  double t2248;
  double t2249;
  double t2260;
  double t2261;
  double t2262;
  double t2263;
  double t8061;
  double t8065;
  double t8068;
  double t8073;
  double t8156;
  double t8189;
  double t8195;
  double t8203;
  double t8204;
  double t8200;
  double t2255;
  double t8198;
  double t8210;
  double t8291;
  double t8292;
  double t8288;
  double t8289;
  double t8299;
  double t8313;
  double t8322;
  double t8316;
  double t8290;
  double t8293;
  double t8294;
  double t8295;
  double t8297;
  double t8298;
  double t8300;
  double t8303;
  double t8304;
  double t8305;
  double t8306;
  double t8307;
  double t8308;
  double t8309;
  double t8310;
  double t8311;
  double t8312;
  double t8314;
  double t8315;
  double t8317;
  double t8318;
  double t8319;
  double t8320;
  double t8321;
  double t8323;
  double t8324;
  double t8325;
  double t8326;
  double t8327;
  double t8328;
  double t8329;
  double t8330;
  double t8331;
  double t8332;
  double t8333;
  double t2271;
  double t2351;
  double t7064;
  double t7067;
  double t7079;
  double t2253;
  double t2256;
  double t2257;
  double t2258;
  double t2259;
  double t1897;
  double t1904;
  double t1909;
  double t2139;
  double t2228;
  double t8341;
  double t8342;
  double t8343;
  double t8344;
  double t8346;
  double t8347;
  double t8251;
  double t8264;
  double t8349;
  double t8350;
  double t8351;
  double t8352;
  double t8201;
  double t8214;
  double t8338;
  double t8339;
  double t8340;
  double t8345;
  double t8348;
  double t8388;
  double t8426;
  double t8461;
  double t8494;
  double t8508;
  double t8513;
  double t8518;
  double t8519;
  double t8520;
  double t8521;
  double t8522;
  double t8523;
  double t8524;
  double t8527;
  double t8528;
  double t8529;
  double t8530;
  double t8535;
  double t8536;
  double t8569;
  double t8602;
  double t8632;
  double t8634;
  double t8638;
  double t8642;
  double t8533;
  double t8534;
  double t8537;
  double t8633;
  double t8646;
  double t8647;
  double t8648;
  double t8649;
  double t8650;
  double t8651;
  double t8652;
  double t8653;
  double t8789;
  double t9082;
  double t9202;
  double t9290;
  double t9308;
  double t9335;
  double t9340;
  double t9341;
  double t9342;
  double t9348;
  double t9349;
  double t9350;
  double t9351;
  double t9353;
  double t9354;
  double t9355;
  double t9356;
  double t9358;
  double t9359;
  double t9431;
  double t9469;
  double t9345;
  double t9346;
  double t9347;
  double t9352;
  double t9357;
  double t9500;
  double t9501;
  double t9502;
  double t9506;
  double t9510;
  double t9514;
  double t9515;
  double t9516;
  double t9517;
  double t9518;
  double t9519;
  double t9520;
  double t9521;
  double t9522;
  double t9523;
  double t9524;
  double t9525;
  double t9530;
  double t9531;
  double t9536;
  double t9537;
  double t9599;
  double t9601;
  double t9603;
  double t9664;
  double t9665;
  double t9666;
  double t9700;
  double t9701;
  double t9745;
  double t9748;
  double t9753;
  double t9925;
  double t9926;
  double t9932;
  double t9933;
  double t9934;
  double t10109;
  double t10139;
  double t9626;
  double t9627;
  double t9628;
  double t9633;
  double t9634;
  double t9638;
  double t9644;
  double t9649;
  double t9650;
  double t9651;
  double t9652;
  double t9653;
  double t9654;
  double t9655;
  double t9656;
  double t9657;
  double t9658;
  double t9659;
  double t9660;
  double t9528;
  double t9529;
  double t10330;
  double t10331;
  double t10334;
  double t10335;
  double t10337;
  double t10338;
  double t9741;
  double t9744;
  double t9752;
  double t9927;
  double t9966;
  double t10019;
  double t10055;
  double t10056;
  double t10057;
  double t10058;
  double t10063;
  double t10067;
  double t10072;
  double t10073;
  double t10074;
  double t10075;
  double t10076;
  double t10077;
  double t10080;
  double t10084;
  double t10088;
  double t10297;
  double t10298;
  double t10299;
  double t10300;
  double t10304;
  double t10308;
  double t10311;
  double t10314;
  double t10315;
  double t10316;
  double t10317;
  double t10318;
  double t10319;
  double t10320;
  double t10321;
  double t10322;
  double t10323;
  double t10324;
  double t10325;
  double t10363;
  double t10364;
  double t10365;
  double t10374;
  double t10384;
  double t10387;
  double t10391;
  double t10392;
  double t10396;
  double t10397;
  double t10241;
  double t10246;
  double t10247;
  double t10248;
  double t10251;
  double t10252;
  double t10253;
  double t10254;
  double t10255;
  double t10256;
  double t10257;
  double t10258;
  double t10259;
  double t10261;
  double t10262;
  double t10263;
  double t10264;
  double t10265;
  double t10266;
  double t10329;
  double t10462;
  double t10464;
  double t10465;
  double t10466;
  double t10468;
  double t10469;
  double t9662;
  double t9663;
  double t9667;
  double t9702;
  double t9704;
  double t9705;
  double t9710;
  double t9714;
  double t9717;
  double t9723;
  double t9724;
  double t9726;
  double t9727;
  double t9728;
  double t9729;
  double t9731;
  double t9732;
  double t9733;
  double t9734;
  double t9736;
  double t10360;
  double t10361;
  double t10362;
  double t10383;
  double t10395;
  double t10398;
  double t10413;
  double t10419;
  double t10420;
  double t10424;
  double t10426;
  double t10428;
  double t10445;
  double t10447;
  double t10448;
  double t10449;
  double t10450;
  double t10451;
  double t10452;
  double t10453;
  double t10454;
  double t10455;
  double t10499;
  double t10505;
  double t10502;
  double t10509;
  double t10510;
  double t10512;
  double t10514;
  double t10515;
  double t10535;
  double t10536;
  double t10537;
  double t10538;
  double t10540;
  double t10545;
  double t10548;
  double t10549;
  double t10551;
  double t10552;
  double t10554;
  double t10555;
  double t10532;
  double t10533;
  double t10534;
  double t10539;
  double t10550;
  double t10556;
  double t10557;
  double t10561;
  double t10565;
  double t10567;
  double t10568;
  double t10569;
  double t10570;
  double t10571;
  double t10572;
  double t10574;
  double t10575;
  double t10576;
  double t10577;
  double t10578;
  double t10579;
  double t10580;
  double t10517;
  double t10518;
  double t10519;
  double t10520;
  double t10522;
  double t10523;
  double t10524;
  double t10525;
  double t10527;
  double t10528;
  double t10529;
  double t10530;
  double t10620;
  double t10623;
  double t10624;
  double t10630;
  double t10635;
  double t10640;
  double t10642;
  double t10643;
  double t10644;
  double t10645;
  double t10647;
  double t10648;
  double t10650;
  double t10651;
  double t10653;
  double t10654;
  double t10655;
  double t10656;
  double t10619;
  double t10625;
  double t10641;
  double t10646;
  double t10652;
  double t10657;
  double t10658;
  double t10660;
  double t10664;
  double t10668;
  double t10673;
  double t10675;
  double t10676;
  double t10680;
  double t10687;
  double t10688;
  double t10689;
  double t10690;
  double t10691;
  double t10692;
  double t10693;
  double t10694;
  double t10697;
  double t10698;
  double t10699;
  double t10702;
  double t10703;
  double t10705;
  double t10709;
  double t10713;
  double t10721;
  double t10725;
  double t10726;
  double t10700;
  double t10701;
  double t10704;
  double t10717;
  double t10727;
  double t10728;
  double t10729;
  double t10730;
  double t10731;
  double t10732;
  double t10733;
  double t10736;
  double t10737;
  double t10738;
  double t10739;
  double t10740;
  double t10741;
  double t10742;
  double t10743;
  double t10744;
  double t10752;
  double t10765;
  double t10766;
  double t10767;
  double t10768;
  double t10769;
  double t10770;
  double t10772;
  double t10773;
  double t10774;
  double t10775;
  double t10778;
  double t10779;
  double t10782;
  double t10783;
  double t10784;
  double t10785;
  double t10786;
  double t10787;
  double t10792;
  double t10810;
  double t10811;
  double t10812;
  double t10813;
  double t10815;
  double t10816;
  double t10817;
  double t10818;
  double t10820;
  double t10821;
  double t10799;
  double t10804;
  double t10809;
  double t10814;
  double t10819;
  double t10822;
  double t10823;
  double t10824;
  double t10825;
  double t10826;
  double t10827;
  double t10828;
  double t10829;
  double t10830;
  double t10835;
  double t10845;
  double t10846;
  double t10847;
  double t10848;
  double t10849;
  double t10850;
  double t10853;
  double t10864;
  double t10865;
  double t10866;
  double t10872;
  double t10890;
  double t10891;
  double t10892;
  double t10893;
  double t10895;
  double t10896;
  double t10897;
  double t10898;
  double t10971;
  double t10972;
  double t10973;
  double t10974;
  double t10976;
  double t10977;
  double t10981;
  double t10982;
  double t10983;
  double t10984;
  double t11014;
  double t11015;
  double t11017;
  double t11018;
  double t11019;
  double t11024;
  double t11032;
  double t11033;
  double t11073;
  double t11074;
  double t11075;
  double t11076;
  double t11078;
  double t11079;
  double t11081;
  double t11082;
  double t11084;
  double t11085;
  double t11086;
  double t11087;
  double t10936;
  double t10937;
  double t10938;
  double t10939;
  double t10940;
  double t10941;
  double t10942;
  double t10943;
  double t10944;
  double t10945;
  double t10946;
  double t10947;
  double t10948;
  double t10949;
  double t10954;
  double t10959;
  double t10962;
  double t10963;
  double t10964;
  double t10102;
  double t10103;
  double t10104;
  double t10105;
  double t10108;
  double t10110;
  double t10112;
  double t10114;
  double t10131;
  double t10132;
  double t10133;
  double t10135;
  double t10136;
  double t10140;
  double t10227;
  double t10968;
  double t10969;
  double t10970;
  double t10975;
  double t10980;
  double t10985;
  double t10986;
  double t10987;
  double t10988;
  double t10989;
  double t10990;
  double t10991;
  double t10992;
  double t10993;
  double t10994;
  double t11002;
  double t11003;
  double t11004;
  double t11005;
  double t11006;
  double t11008;
  double t11009;
  double t11363;
  double t11364;
  double t11365;
  double t11366;
  double t11368;
  double t11369;
  double t11370;
  double t11371;
  double t11373;
  double t11374;
  double t11070;
  double t11400;
  double t11401;
  double t11402;
  double t11404;
  double t11406;
  double t11407;
  double t11408;
  double t11409;
  double t11434;
  double t11435;
  double t11436;
  double t11439;
  double t11440;
  double t11310;
  double t11314;
  double t11328;
  double t11331;
  double t11332;
  double t11333;
  double t11334;
  double t11335;
  double t11336;
  double t11337;
  double t11338;
  double t11339;
  double t11340;
  double t11341;
  double t11343;
  double t11344;
  double t11345;
  double t11346;
  double t11347;
  double t11012;
  double t11013;
  double t11016;
  double t11020;
  double t11034;
  double t11036;
  double t11038;
  double t11039;
  double t11054;
  double t11055;
  double t11056;
  double t11059;
  double t11060;
  double t11061;
  double t11062;
  double t11063;
  double t11064;
  double t11065;
  double t11066;
  double t11067;
  double t11068;
  double t11462;
  double t11464;
  double t11465;
  double t11468;
  double t11469;
  double t11471;
  double t11472;
  double t11473;
  double t11475;
  double t11476;
  double t11477;
  double t11173;
  double t11174;
  double t11175;
  double t11176;
  double t11178;
  double t11179;
  double t11180;
  double t11181;
  double t11182;
  double t11183;
  double t11208;
  double t11209;
  double t11211;
  double t11212;
  double t11215;
  double t11226;
  double t11229;
  double t11235;
  double t11236;
  double t11432;
  double t11433;
  double t11437;
  double t11438;
  double t11441;
  double t11442;
  double t11443;
  double t11444;
  double t11445;
  double t11446;
  double t11447;
  double t11448;
  double t11449;
  double t11450;
  double t11451;
  double t11452;
  double t11453;
  double t11454;
  double t11455;
  double t11456;
  double t11501;
  double t11502;
  double t11503;
  double t11505;
  double t11506;
  double t11508;
  double t11509;
  double t11510;
  double t11512;
  double t11513;
  double t11515;
  double t10859;
  double t10862;
  double t10863;
  double t10876;
  double t10894;
  double t10899;
  double t10900;
  double t10901;
  double t10902;
  double t10903;
  double t10904;
  double t10905;
  double t10906;
  double t10913;
  double t10919;
  double t10923;
  double t10929;
  double t10930;
  double t10931;
  double t10932;
  double t10933;
  double t10934;
  double t11466;
  double t11467;
  double t11470;
  double t11474;
  double t11478;
  double t11479;
  double t11480;
  double t11481;
  double t11483;
  double t11484;
  double t11485;
  double t11486;
  double t11487;
  double t11488;
  double t11489;
  double t11490;
  double t11491;
  double t11492;
  double t11493;
  double t11494;
  double t11495;
  double t11127;
  double t11128;
  double t11129;
  double t11147;
  double t11148;
  double t11149;
  double t11150;
  double t11151;
  double t11152;
  double t11158;
  double t11159;
  double t11160;
  double t11165;
  double t11166;
  double t11167;
  double t11168;
  double t11169;
  double t11170;
  double t11171;
  double t11353;
  double t11358;
  double t11359;
  double t11367;
  double t11372;
  double t11375;
  double t11376;
  double t11377;
  double t11379;
  double t11381;
  double t11382;
  double t11384;
  double t11385;
  double t11386;
  double t11387;
  double t11388;
  double t11389;
  double t11390;
  double t11392;
  double t11394;
  double t11395;
  double t11396;
  double t11499;
  double t11504;
  double t11553;
  double t11555;
  double t11557;
  double t11584;
  double t11585;
  double t11587;
  double t11607;
  double t11608;
  double t11609;
  double t11610;
  double t11612;
  double t11614;
  double t11615;
  double t11618;
  double t11620;
  double t11622;
  double t11623;
  double t11624;
  double t11604;
  double t11605;
  double t11606;
  double t11611;
  double t11619;
  double t11625;
  double t11626;
  double t11627;
  double t11628;
  double t11629;
  double t11630;
  double t11631;
  double t11632;
  double t11633;
  double t11634;
  double t11635;
  double t11636;
  double t11637;
  double t11638;
  double t11639;
  double t11640;
  double t11641;
  double t11589;
  double t11590;
  double t11591;
  double t11593;
  double t11594;
  double t11595;
  double t11597;
  double t11599;
  double t11600;
  double t11601;
  double t11602;
  double t11683;
  double t11684;
  double t11686;
  double t11687;
  double t11689;
  double t11690;
  double t11681;
  double t11682;
  double t11685;
  double t11688;
  double t11691;
  double t11692;
  double t11693;
  double t11694;
  double t11695;
  double t11696;
  double t11698;
  double t11699;
  double t11700;
  double t11701;
  double t11702;
  double t11703;
  double t11704;
  double t11705;
  double t11706;
  double t11708;
  double t11709;
  double t11712;
  double t11713;
  double t11714;
  double t11716;
  double t11721;
  double t11723;
  double t11724;
  double t11725;
  double t11726;
  double t11727;
  double t11728;
  double t11729;
  double t11730;
  double t11731;
  double t11732;
  double t11733;
  double t11734;
  double t11735;
  double t11736;
  double t11742;
  double t11743;
  double t11744;
  double t11746;
  double t11750;
  double t11751;
  double t11752;
  double t11754;
  double t11755;
  double t11739;
  double t11740;
  double t11741;
  double t11749;
  double t11753;
  double t11756;
  double t11757;
  double t11760;
  double t11761;
  double t11762;
  double t11779;
  double t11780;
  double t11781;
  double t11784;
  double t11785;
  double t11786;
  double t11788;
  double t11789;
  double t11790;
  double t11791;
  double t11792;
  double t11793;
  double t11804;
  double t11805;
  double t11808;
  double t11811;
  double t11816;
  double t11817;
  double t11822;
  double t11899;
  double t11900;
  double t11901;
  double t11904;
  double t11913;
  double t11914;
  double t11915;
  double t11918;
  double t11921;
  double t11948;
  double t11949;
  double t11950;
  double t11952;
  double t11953;
  double t11954;
  double t11956;
  double t11957;
  double t11958;
  double t10500;
  double t10511;
  double t10516;
  double t10521;
  double t10526;
  double t10531;
  double t10583;
  double t10584;
  double t10586;
  double t10592;
  double t10603;
  double t10604;
  double t10606;
  double t10607;
  double t10608;
  double t10609;
  double t10610;
  double t10611;
  double t10612;
  double t10614;
  double t10617;
  double t11980;
  double t11800;
  double t11803;
  double t11807;
  double t11812;
  double t11823;
  double t11848;
  double t11850;
  double t11852;
  double t11853;
  double t11854;
  double t11855;
  double t11856;
  double t11857;
  double t11858;
  double t11859;
  double t11860;
  double t11861;
  double t11862;
  double t11863;
  double t11864;
  double t11865;
  double t11984;
  double t11987;
  double t11989;
  double t12034;
  double t12035;
  double t12036;
  double t12039;
  double t12040;
  double t11867;
  double t11868;
  double t11869;
  double t11870;
  double t11871;
  double t11872;
  double t11873;
  double t11874;
  double t11875;
  double t11876;
  double t11877;
  double t11878;
  double t11879;
  double t11880;
  double t11881;
  double t11882;
  double t11891;
  double t11892;
  double t11893;
  double t12009;
  double t12010;
  double t12011;
  double t12012;
  double t12013;
  double t12014;
  double t12015;
  double t12016;
  double t12017;
  double t12019;
  double t12020;
  double t12021;
  double t12023;
  double t12024;
  double t12026;
  double t12027;
  double t12028;
  double t12029;
  double t12030;
  double t10582;
  double t10696;
  double t10759;
  double t10794;
  double t10855;
  double t11895;
  double t11896;
  double t11897;
  double t11903;
  double t11917;
  double t11922;
  double t11926;
  double t11927;
  double t11928;
  double t11929;
  double t11931;
  double t11932;
  double t11933;
  double t11934;
  double t11935;
  double t11936;
  double t11937;
  double t11938;
  double t11939;
  double t11940;
  double t11941;
  double t11942;
  double t12124;
  double t12125;
  double t12127;
  double t12129;
  double t12131;
  double t12132;
  double t12133;
  double t12134;
  double t12032;
  double t12033;
  double t12037;
  double t12038;
  double t12041;
  double t12042;
  double t12043;
  double t12044;
  double t12045;
  double t12046;
  double t12047;
  double t12052;
  double t12053;
  double t12054;
  double t12056;
  double t12057;
  double t12058;
  double t12059;
  double t12064;
  double t12065;
  double t12094;
  double t12095;
  double t12096;
  double t12097;
  double t12098;
  double t12099;
  double t12100;
  double t12101;
  double t12102;
  double t12103;
  double t12104;
  double t12105;
  double t12106;
  double t12107;
  double t12108;
  double t12109;
  double t12110;
  double t12111;
  double t12112;
  t430 = Cos(var1[15]);
  t1063 = -1.*t430;
  t1720 = 1. + t1063;
  t1779 = Cos(var1[4]);
  t1899 = Cos(var1[17]);
  t1900 = -1.*t1899;
  t1901 = 1. + t1900;
  t1905 = -3.e-6*t1901;
  t1906 = Sin(var1[17]);
  t1815 = Cos(var1[5]);
  t1821 = Sin(var1[15]);
  t1824 = Sin(var1[4]);
  t1826 = Sin(var1[5]);
  t1910 = 3.e-6*t1906;
  t2011 = t1905 + t1910;
  t2252 = 9.e-13*var1[17];
  t1907 = -3.e-6*t1906;
  t1908 = t1905 + t1907;
  t2254 = -9.e-12*t1901;
  t2229 = 3.e-6*t1720*t1779*t1815;
  t2239 = -3.e-6*t1821*t1824;
  t2245 = -9.e-12*t1720;
  t2247 = 1. + t2245;
  t2248 = -1.*t2247*t1779*t1826;
  t2249 = t2229 + t2239 + t2248;
  t2260 = t430*t1779*t1815;
  t2261 = t1821*t1824;
  t2262 = -3.e-6*t1720*t1779*t1826;
  t2263 = t2260 + t2261 + t2262;
  t8061 = -1.*t1779*t1815*t1821;
  t8065 = -1.000000000009*t1720;
  t8068 = 1. + t8065;
  t8073 = t8068*t1824;
  t8156 = -3.e-6*t1779*t1821*t1826;
  t8189 = t8061 + t8073 + t8156;
  t8195 = 3.e-6*t1901;
  t8203 = -1.000000000009*t1901;
  t8204 = 1. + t8203;
  t8200 = 9.e-12*t1901;
  t2255 = -1.*t1906;
  t8198 = t8195 + t1907;
  t8210 = t8195 + t1910;
  t8291 = 3.e-6*t1899;
  t8292 = t8291 + t1907;
  t8288 = -3.e-6*t1899;
  t8289 = t8288 + t1907;
  t8299 = -9.e-12*t1906;
  t8313 = t8291 + t1910;
  t8322 = t8288 + t1910;
  t8316 = 9.e-12*t1906;
  t8290 = 0.2*t8289;
  t8293 = 0.1*t8292;
  t8294 = -1.62e-17*t1906;
  t8295 = 3.e-7 + t8290 + t8293 + t8294;
  t8297 = t8295*t2249;
  t8298 = -9.e-7*t8292;
  t8300 = t1900 + t8299;
  t8303 = 0.1*t8300;
  t8304 = 0.2000000000018*t1906;
  t8305 = 9.e-13 + t8298 + t8303 + t8304;
  t8306 = t8305*t2263;
  t8307 = -9.e-7*t8289;
  t8308 = t1899 + t8299;
  t8309 = 0.2*t8308;
  t8310 = 0.1000000000009*t1906;
  t8311 = 9.e-13 + t8307 + t8309 + t8310;
  t8312 = t8311*t8189;
  t8314 = t8313*t2249;
  t8315 = -1.000000000009*t1906*t2263;
  t8317 = t1900 + t8316;
  t8318 = t8317*t8189;
  t8319 = t8314 + t8315 + t8318;
  t8320 = 0.2*t8319;
  t8321 = -1.8e-11*t1906*t2249;
  t8323 = t8322*t2263;
  t8324 = t8313*t8189;
  t8325 = t8321 + t8323 + t8324;
  t8326 = -0.099999*t8325;
  t8327 = t8322*t2249;
  t8328 = t1899 + t8316;
  t8329 = t8328*t2263;
  t8330 = -1.000000000009*t1906*t8189;
  t8331 = t8327 + t8329 + t8330;
  t8332 = -0.3*t8331;
  t8333 = t8297 + t8306 + t8312 + t8320 + t8326 + t8332;
  t2271 = 0.1000000000009*t1901;
  t2351 = -9.e-7*t1908;
  t7064 = t2254 + t1906;
  t7067 = 0.2*t7064;
  t7079 = t2252 + t2271 + t2351 + t7067;
  t2253 = 0.2000000000018*t1901;
  t2256 = t2254 + t2255;
  t2257 = 0.1*t2256;
  t2258 = -9.e-7*t2011;
  t2259 = t2252 + t2253 + t2257 + t2258;
  t1897 = 3.e-7*var1[17];
  t1904 = -1.62e-17*t1901;
  t1909 = 0.2*t1908;
  t2139 = 0.1*t2011;
  t2228 = t1897 + t1904 + t1909 + t2139;
  t8341 = -1.*t430*t1779*t1815;
  t8342 = -1.000000000009*t1821*t1824;
  t8343 = -3.e-6*t430*t1779*t1826;
  t8344 = t8341 + t8342 + t8343;
  t8346 = t430*t1824;
  t8347 = t8061 + t8346 + t8156;
  t8251 = -1.8e-11*t1901;
  t8264 = 1. + t8251;
  t8349 = 3.e-6*t1779*t1815*t1821;
  t8350 = -3.e-6*t430*t1824;
  t8351 = 9.e-12*t1779*t1821*t1826;
  t8352 = t8349 + t8350 + t8351;
  t8201 = t8200 + t1906;
  t8214 = t8200 + t2255;
  t8338 = 0.2000000000018*t1779*t1815*t1821;
  t8339 = -0.2000000000018*t430*t1824;
  t8340 = 6.000000000054e-7*t1779*t1821*t1826;
  t8345 = t7079*t8344;
  t8348 = t2259*t8347;
  t8388 = t2228*t8352;
  t8426 = t8210*t8344;
  t8461 = t8198*t8347;
  t8494 = t8264*t8352;
  t8508 = t8426 + t8461 + t8494;
  t8513 = -0.099999*t8508;
  t8518 = t8204*t8344;
  t8519 = t8201*t8347;
  t8520 = t8198*t8352;
  t8521 = t8518 + t8519 + t8520;
  t8522 = -0.3*t8521;
  t8523 = t8214*t8344;
  t8524 = t8204*t8347;
  t8527 = t8210*t8352;
  t8528 = t8523 + t8524 + t8527;
  t8529 = 0.2*t8528;
  t8530 = t8338 + t8339 + t8340 + t8345 + t8348 + t8388 + t8513 + t8522 + t8529;
  t8535 = -1.*t2247*t1779*t1815;
  t8536 = t8535 + t2262;
  t8569 = -3.e-6*t1720*t1779*t1815;
  t8602 = -1.*t430*t1779*t1826;
  t8632 = t8569 + t8602;
  t8634 = -3.e-6*t1779*t1815*t1821;
  t8638 = t1779*t1821*t1826;
  t8642 = t8634 + t8638;
  t8533 = 6.000000000054e-7*t1720*t1779*t1815;
  t8534 = -0.2000000000018*t1720*t1779*t1826;
  t8537 = t2228*t8536;
  t8633 = t2259*t8632;
  t8646 = t7079*t8642;
  t8647 = t8198*t8536;
  t8648 = t8201*t8632;
  t8649 = t8204*t8642;
  t8650 = t8647 + t8648 + t8649;
  t8651 = -0.3*t8650;
  t8652 = t8210*t8536;
  t8653 = t8204*t8632;
  t8789 = t8214*t8642;
  t9082 = t8652 + t8653 + t8789;
  t9202 = 0.2*t9082;
  t9290 = t8264*t8536;
  t9308 = t8198*t8632;
  t9335 = t8210*t8642;
  t9340 = t9290 + t9308 + t9335;
  t9341 = -0.099999*t9340;
  t9342 = t8533 + t8534 + t8537 + t8633 + t8646 + t8651 + t9202 + t9341;
  t9348 = -3.e-6*t1779*t1821;
  t9349 = -3.e-6*t1720*t1815*t1824;
  t9350 = t2247*t1824*t1826;
  t9351 = t9348 + t9349 + t9350;
  t9353 = t1779*t1821;
  t9354 = -1.*t430*t1815*t1824;
  t9355 = 3.e-6*t1720*t1824*t1826;
  t9356 = t9353 + t9354 + t9355;
  t9358 = t8068*t1779;
  t9359 = t1815*t1821*t1824;
  t9431 = 3.e-6*t1821*t1824*t1826;
  t9469 = t9358 + t9359 + t9431;
  t9345 = -0.2000000000018*t1779*t1821;
  t9346 = -0.2000000000018*t1720*t1815*t1824;
  t9347 = -6.000000000054e-7*t1720*t1824*t1826;
  t9352 = t2228*t9351;
  t9357 = t2259*t9356;
  t9500 = t7079*t9469;
  t9501 = t8198*t9351;
  t9502 = t8201*t9356;
  t9506 = t8204*t9469;
  t9510 = t9501 + t9502 + t9506;
  t9514 = -0.3*t9510;
  t9515 = t8210*t9351;
  t9516 = t8204*t9356;
  t9517 = t8214*t9469;
  t9518 = t9515 + t9516 + t9517;
  t9519 = 0.2*t9518;
  t9520 = t8264*t9351;
  t9521 = t8198*t9356;
  t9522 = t8210*t9469;
  t9523 = t9520 + t9521 + t9522;
  t9524 = -0.099999*t9523;
  t9525 = t9345 + t9346 + t9347 + t9352 + t9357 + t9500 + t9514 + t9519 + t9524;
  t9530 = t2247*t1779*t1826;
  t9531 = t8569 + t9530;
  t9536 = 3.e-6*t1720*t1779*t1826;
  t9537 = t8341 + t9536;
  t9599 = t1779*t1815*t1821;
  t9601 = 3.e-6*t1779*t1821*t1826;
  t9603 = t9599 + t9601;
  t9664 = -3.e-6*t430*t1779*t1815;
  t9665 = t430*t1779*t1826;
  t9666 = t9664 + t9665;
  t9700 = 9.e-12*t1779*t1815*t1821;
  t9701 = t9700 + t8156;
  t9745 = t2247*t1815*t1824;
  t9748 = t9745 + t9355;
  t9753 = 3.e-6*t1720*t1815*t1824;
  t9925 = t430*t1824*t1826;
  t9926 = t9753 + t9925;
  t9932 = 3.e-6*t1815*t1821*t1824;
  t9933 = -1.*t1821*t1824*t1826;
  t9934 = t9932 + t9933;
  t10109 = -9.e-12*t1899;
  t10139 = 9.e-12*t1899;
  t9626 = t8295*t8536;
  t9627 = t8305*t8632;
  t9628 = t8311*t8642;
  t9633 = t8313*t8536;
  t9634 = -1.000000000009*t1906*t8632;
  t9638 = t8317*t8642;
  t9644 = t9633 + t9634 + t9638;
  t9649 = 0.2*t9644;
  t9650 = -1.8e-11*t1906*t8536;
  t9651 = t8322*t8632;
  t9652 = t8313*t8642;
  t9653 = t9650 + t9651 + t9652;
  t9654 = -0.099999*t9653;
  t9655 = t8322*t8536;
  t9656 = t8328*t8632;
  t9657 = -1.000000000009*t1906*t8642;
  t9658 = t9655 + t9656 + t9657;
  t9659 = -0.3*t9658;
  t9660 = t9626 + t9627 + t9628 + t9649 + t9654 + t9659;
  t9528 = -0.2000000000018*t1720*t1779*t1815;
  t9529 = -6.000000000054e-7*t1720*t1779*t1826;
  t10330 = 3.e-6*t1821*t1824;
  t10331 = t8569 + t10330 + t9530;
  t10334 = -1.*t1821*t1824;
  t10335 = t8341 + t10334 + t9536;
  t10337 = -1.*t8068*t1824;
  t10338 = t9599 + t10337 + t9601;
  t9741 = -6.000000000054e-7*t1720*t1815*t1824;
  t9744 = 0.2000000000018*t1720*t1824*t1826;
  t9752 = t2228*t9748;
  t9927 = t2259*t9926;
  t9966 = t7079*t9934;
  t10019 = t8198*t9748;
  t10055 = t8201*t9926;
  t10056 = t8204*t9934;
  t10057 = t10019 + t10055 + t10056;
  t10058 = -0.3*t10057;
  t10063 = t8210*t9748;
  t10067 = t8204*t9926;
  t10072 = t8214*t9934;
  t10073 = t10063 + t10067 + t10072;
  t10074 = 0.2*t10073;
  t10075 = t8264*t9748;
  t10076 = t8198*t9926;
  t10077 = t8210*t9934;
  t10080 = t10075 + t10076 + t10077;
  t10084 = -0.099999*t10080;
  t10088 = t9741 + t9744 + t9752 + t9927 + t9966 + t10058 + t10074 + t10084;
  t10297 = t8295*t9351;
  t10298 = t8305*t9356;
  t10299 = t8311*t9469;
  t10300 = t8313*t9351;
  t10304 = -1.000000000009*t1906*t9356;
  t10308 = t8317*t9469;
  t10311 = t10300 + t10304 + t10308;
  t10314 = 0.2*t10311;
  t10315 = -1.8e-11*t1906*t9351;
  t10316 = t8322*t9356;
  t10317 = t8313*t9469;
  t10318 = t10315 + t10316 + t10317;
  t10319 = -0.099999*t10318;
  t10320 = t8322*t9351;
  t10321 = t8328*t9356;
  t10322 = -1.000000000009*t1906*t9469;
  t10323 = t10320 + t10321 + t10322;
  t10324 = -0.3*t10323;
  t10325 = t10297 + t10298 + t10299 + t10314 + t10319 + t10324;
  t10363 = -1.000000000009*t1779*t1821;
  t10364 = t430*t1815*t1824;
  t10365 = 3.e-6*t430*t1824*t1826;
  t10374 = t10363 + t10364 + t10365;
  t10384 = -3.e-6*t430*t1779;
  t10387 = -3.e-6*t1815*t1821*t1824;
  t10391 = -9.e-12*t1821*t1824*t1826;
  t10392 = t10384 + t10387 + t10391;
  t10396 = t430*t1779;
  t10397 = t10396 + t9359 + t9431;
  t10241 = t8311*t8344;
  t10246 = t8305*t8347;
  t10247 = t8295*t8352;
  t10248 = -1.000000000009*t1906*t8344;
  t10251 = t8328*t8347;
  t10252 = t8322*t8352;
  t10253 = t10248 + t10251 + t10252;
  t10254 = -0.3*t10253;
  t10255 = t8317*t8344;
  t10256 = -1.000000000009*t1906*t8347;
  t10257 = t8313*t8352;
  t10258 = t10255 + t10256 + t10257;
  t10259 = 0.2*t10258;
  t10261 = t8313*t8344;
  t10262 = t8322*t8347;
  t10263 = -1.8e-11*t1906*t8352;
  t10264 = t10261 + t10262 + t10263;
  t10265 = -0.099999*t10264;
  t10266 = t10241 + t10246 + t10247 + t10254 + t10259 + t10265;
  t10329 = 0.2000000000018*t1821*t1824;
  t10462 = t8341 + t10334 + t8343;
  t10464 = 3.e-6*t430*t1779*t1815;
  t10465 = 9.e-12*t430*t1779*t1826;
  t10466 = t10464 + t10330 + t10465;
  t10468 = -1.000000000009*t430*t1824;
  t10469 = t9599 + t10468 + t9601;
  t9662 = 6.000000000054e-7*t1779*t1815*t1821;
  t9663 = -0.2000000000018*t1779*t1821*t1826;
  t9667 = t7079*t9666;
  t9702 = t2228*t9701;
  t9704 = t2259*t8642;
  t9705 = t8214*t9666;
  t9710 = t8210*t9701;
  t9714 = t9705 + t9710 + t8649;
  t9717 = 0.2*t9714;
  t9723 = t8210*t9666;
  t9724 = t8264*t9701;
  t9726 = t8198*t8642;
  t9727 = t9723 + t9724 + t9726;
  t9728 = -0.099999*t9727;
  t9729 = t8204*t9666;
  t9731 = t8198*t9701;
  t9732 = t8201*t8642;
  t9733 = t9729 + t9731 + t9732;
  t9734 = -0.3*t9733;
  t9736 = t9662 + t9663 + t9667 + t9702 + t9704 + t9717 + t9728 + t9734;
  t10360 = -0.2000000000018*t430*t1779;
  t10361 = -0.2000000000018*t1815*t1821*t1824;
  t10362 = -6.000000000054e-7*t1821*t1824*t1826;
  t10383 = t7079*t10374;
  t10395 = t2228*t10392;
  t10398 = t2259*t10397;
  t10413 = t8214*t10374;
  t10419 = t8210*t10392;
  t10420 = t8204*t10397;
  t10424 = t10413 + t10419 + t10420;
  t10426 = 0.2*t10424;
  t10428 = t8210*t10374;
  t10445 = t8264*t10392;
  t10447 = t8198*t10397;
  t10448 = t10428 + t10445 + t10447;
  t10449 = -0.099999*t10448;
  t10450 = t8204*t10374;
  t10451 = t8198*t10392;
  t10452 = t8201*t10397;
  t10453 = t10450 + t10451 + t10452;
  t10454 = -0.3*t10453;
  t10455 = t10360 + t10361 + t10362 + t10383 + t10395 + t10398 + t10426 + t10449 + t10454;
  t10499 = Sin(var1[3]);
  t10505 = Cos(var1[3]);
  t10502 = t1815*t10499*t1824;
  t10509 = t10505*t1826;
  t10510 = t10502 + t10509;
  t10512 = t10505*t1815;
  t10514 = -1.*t10499*t1824*t1826;
  t10515 = t10512 + t10514;
  t10535 = 3.e-6*t1720*t1779*t1815*t10499;
  t10536 = -3.e-6*t1821*t10499*t1824;
  t10537 = -1.*t2247*t1779*t10499*t1826;
  t10538 = t10535 + t10536 + t10537;
  t10540 = t430*t1779*t1815*t10499;
  t10545 = t1821*t10499*t1824;
  t10548 = -3.e-6*t1720*t1779*t10499*t1826;
  t10549 = t10540 + t10545 + t10548;
  t10551 = -1.*t1779*t1815*t1821*t10499;
  t10552 = t8068*t10499*t1824;
  t10554 = -3.e-6*t1779*t1821*t10499*t1826;
  t10555 = t10551 + t10552 + t10554;
  t10532 = 0.2000000000018*t1720*t1779*t1815*t10499;
  t10533 = -0.2000000000018*t1821*t10499*t1824;
  t10534 = 6.000000000054e-7*t1720*t1779*t10499*t1826;
  t10539 = t2228*t10538;
  t10550 = t2259*t10549;
  t10556 = t7079*t10555;
  t10557 = t8198*t10538;
  t10561 = t8201*t10549;
  t10565 = t8204*t10555;
  t10567 = t10557 + t10561 + t10565;
  t10568 = -0.3*t10567;
  t10569 = t8210*t10538;
  t10570 = t8204*t10549;
  t10571 = t8214*t10555;
  t10572 = t10569 + t10570 + t10571;
  t10574 = 0.2*t10572;
  t10575 = t8264*t10538;
  t10576 = t8198*t10549;
  t10577 = t8210*t10555;
  t10578 = t10575 + t10576 + t10577;
  t10579 = -0.099999*t10578;
  t10580 = t10532 + t10533 + t10534 + t10539 + t10550 + t10556 + t10568 + t10574 + t10579;
  t10517 = 3.e-6*t1779*t1821*t10499;
  t10518 = 3.e-6*t1720*t10510;
  t10519 = t2247*t10515;
  t10520 = t10517 + t10518 + t10519;
  t10522 = -1.*t1779*t1821*t10499;
  t10523 = t430*t10510;
  t10524 = 3.e-6*t1720*t10515;
  t10525 = t10522 + t10523 + t10524;
  t10527 = -1.*t8068*t1779*t10499;
  t10528 = -1.*t1821*t10510;
  t10529 = 3.e-6*t1821*t10515;
  t10530 = t10527 + t10528 + t10529;
  t10620 = t10505*t1815*t1824;
  t10623 = -1.*t10499*t1826;
  t10624 = t10620 + t10623;
  t10630 = -1.*t1815*t10499;
  t10635 = -1.*t10505*t1824*t1826;
  t10640 = t10630 + t10635;
  t10642 = 3.e-6*t10505*t1779*t1821;
  t10643 = 3.e-6*t1720*t10624;
  t10644 = t2247*t10640;
  t10645 = t10642 + t10643 + t10644;
  t10647 = -1.*t10505*t1779*t1821;
  t10648 = t430*t10624;
  t10650 = 3.e-6*t1720*t10640;
  t10651 = t10647 + t10648 + t10650;
  t10653 = -1.*t8068*t10505*t1779;
  t10654 = -1.*t1821*t10624;
  t10655 = 3.e-6*t1821*t10640;
  t10656 = t10653 + t10654 + t10655;
  t10619 = 0.2000000000018*t10505*t1779*t1821;
  t10625 = 0.2000000000018*t1720*t10624;
  t10641 = -6.000000000054e-7*t1720*t10640;
  t10646 = t2228*t10645;
  t10652 = t2259*t10651;
  t10657 = t7079*t10656;
  t10658 = t8198*t10645;
  t10660 = t8201*t10651;
  t10664 = t8204*t10656;
  t10668 = t10658 + t10660 + t10664;
  t10673 = -0.3*t10668;
  t10675 = t8210*t10645;
  t10676 = t8204*t10651;
  t10680 = t8214*t10656;
  t10687 = t10675 + t10676 + t10680;
  t10688 = 0.2*t10687;
  t10689 = t8264*t10645;
  t10690 = t8198*t10651;
  t10691 = t8210*t10656;
  t10692 = t10689 + t10690 + t10691;
  t10693 = -0.099999*t10692;
  t10694 = t10619 + t10625 + t10641 + t10646 + t10652 + t10657 + t10673 + t10688 + t10693;
  t10697 = -1.*t1815*t10499*t1824;
  t10698 = -1.*t10505*t1826;
  t10699 = t10697 + t10698;
  t10702 = t2247*t10699;
  t10703 = t10702 + t10524;
  t10705 = 3.e-6*t1720*t10699;
  t10709 = t430*t10515;
  t10713 = t10705 + t10709;
  t10721 = 3.e-6*t1821*t10699;
  t10725 = -1.*t1821*t10515;
  t10726 = t10721 + t10725;
  t10700 = -6.000000000054e-7*t1720*t10699;
  t10701 = 0.2000000000018*t1720*t10515;
  t10704 = t2228*t10703;
  t10717 = t2259*t10713;
  t10727 = t7079*t10726;
  t10728 = t8198*t10703;
  t10729 = t8201*t10713;
  t10730 = t8204*t10726;
  t10731 = t10728 + t10729 + t10730;
  t10732 = -0.3*t10731;
  t10733 = t8210*t10703;
  t10736 = t8204*t10713;
  t10737 = t8214*t10726;
  t10738 = t10733 + t10736 + t10737;
  t10739 = 0.2*t10738;
  t10740 = t8264*t10703;
  t10741 = t8198*t10713;
  t10742 = t8210*t10726;
  t10743 = t10740 + t10741 + t10742;
  t10744 = -0.099999*t10743;
  t10752 = t10700 + t10701 + t10704 + t10717 + t10727 + t10732 + t10739 + t10744;
  t10765 = t8295*t10520;
  t10766 = t8305*t10525;
  t10767 = t8311*t10530;
  t10768 = t8313*t10520;
  t10769 = -1.000000000009*t1906*t10525;
  t10770 = t8317*t10530;
  t10772 = t10768 + t10769 + t10770;
  t10773 = 0.2*t10772;
  t10774 = -1.8e-11*t1906*t10520;
  t10775 = t8322*t10525;
  t10778 = t8313*t10530;
  t10779 = t10774 + t10775 + t10778;
  t10782 = -0.099999*t10779;
  t10783 = t8322*t10520;
  t10784 = t8328*t10525;
  t10785 = -1.000000000009*t1906*t10530;
  t10786 = t10783 + t10784 + t10785;
  t10787 = -0.3*t10786;
  t10792 = t10765 + t10766 + t10767 + t10773 + t10782 + t10787;
  t10810 = 1.000000000009*t1779*t1821*t10499;
  t10811 = -1.*t430*t10510;
  t10812 = 3.e-6*t430*t10515;
  t10813 = t10810 + t10811 + t10812;
  t10815 = 3.e-6*t430*t1779*t10499;
  t10816 = 3.e-6*t1821*t10510;
  t10817 = -9.e-12*t1821*t10515;
  t10818 = t10815 + t10816 + t10817;
  t10820 = -1.*t430*t1779*t10499;
  t10821 = t10820 + t10528 + t10529;
  t10799 = 0.2000000000018*t430*t1779*t10499;
  t10804 = 0.2000000000018*t1821*t10510;
  t10809 = -6.000000000054e-7*t1821*t10515;
  t10814 = t7079*t10813;
  t10819 = t2228*t10818;
  t10822 = t2259*t10821;
  t10823 = t8214*t10813;
  t10824 = t8210*t10818;
  t10825 = t8204*t10821;
  t10826 = t10823 + t10824 + t10825;
  t10827 = 0.2*t10826;
  t10828 = t8210*t10813;
  t10829 = t8264*t10818;
  t10830 = t8198*t10821;
  t10835 = t10828 + t10829 + t10830;
  t10845 = -0.099999*t10835;
  t10846 = t8204*t10813;
  t10847 = t8198*t10818;
  t10848 = t8201*t10821;
  t10849 = t10846 + t10847 + t10848;
  t10850 = -0.3*t10849;
  t10853 = t10799 + t10804 + t10809 + t10814 + t10819 + t10822 + t10827 + t10845 + t10850;
  t10864 = 3.e-6*t1720*t10505*t1779*t1815;
  t10865 = -3.e-6*t10505*t1821*t1824;
  t10866 = -1.*t2247*t10505*t1779*t1826;
  t10872 = t10864 + t10865 + t10866;
  t10890 = t430*t10505*t1779*t1815;
  t10891 = t10505*t1821*t1824;
  t10892 = -3.e-6*t1720*t10505*t1779*t1826;
  t10893 = t10890 + t10891 + t10892;
  t10895 = -1.*t10505*t1779*t1815*t1821;
  t10896 = t8068*t10505*t1824;
  t10897 = -3.e-6*t10505*t1779*t1821*t1826;
  t10898 = t10895 + t10896 + t10897;
  t10971 = -1.*t430*t1779*t1815*t10499;
  t10972 = -1.000000000009*t1821*t10499*t1824;
  t10973 = -3.e-6*t430*t1779*t10499*t1826;
  t10974 = t10971 + t10972 + t10973;
  t10976 = t430*t10499*t1824;
  t10977 = t10551 + t10976 + t10554;
  t10981 = 3.e-6*t1779*t1815*t1821*t10499;
  t10982 = -3.e-6*t430*t10499*t1824;
  t10983 = 9.e-12*t1779*t1821*t10499*t1826;
  t10984 = t10981 + t10982 + t10983;
  t11014 = -1.*t2247*t1779*t1815*t10499;
  t11015 = t11014 + t10548;
  t11017 = -3.e-6*t1720*t1779*t1815*t10499;
  t11018 = -1.*t430*t1779*t10499*t1826;
  t11019 = t11017 + t11018;
  t11024 = -3.e-6*t1779*t1815*t1821*t10499;
  t11032 = t1779*t1821*t10499*t1826;
  t11033 = t11024 + t11032;
  t11073 = -3.e-6*t1779*t1821*t10499;
  t11074 = -3.e-6*t1720*t1815*t10499*t1824;
  t11075 = t2247*t10499*t1824*t1826;
  t11076 = t11073 + t11074 + t11075;
  t11078 = t1779*t1821*t10499;
  t11079 = -1.*t430*t1815*t10499*t1824;
  t11081 = 3.e-6*t1720*t10499*t1824*t1826;
  t11082 = t11078 + t11079 + t11081;
  t11084 = t8068*t1779*t10499;
  t11085 = t1815*t1821*t10499*t1824;
  t11086 = 3.e-6*t1821*t10499*t1824*t1826;
  t11087 = t11084 + t11085 + t11086;
  t10936 = t8295*t10538;
  t10937 = t8305*t10549;
  t10938 = t8311*t10555;
  t10939 = t8313*t10538;
  t10940 = -1.000000000009*t1906*t10549;
  t10941 = t8317*t10555;
  t10942 = t10939 + t10940 + t10941;
  t10943 = 0.2*t10942;
  t10944 = -1.8e-11*t1906*t10538;
  t10945 = t8322*t10549;
  t10946 = t8313*t10555;
  t10947 = t10944 + t10945 + t10946;
  t10948 = -0.099999*t10947;
  t10949 = t8322*t10538;
  t10954 = t8328*t10549;
  t10959 = -1.000000000009*t1906*t10555;
  t10962 = t10949 + t10954 + t10959;
  t10963 = -0.3*t10962;
  t10964 = t10936 + t10937 + t10938 + t10943 + t10948 + t10963;
  t10102 = -1.62e-17*t1899;
  t10103 = 0.1*t8289;
  t10104 = 0.2*t8322;
  t10105 = t10102 + t10103 + t10104;
  t10108 = 0.2000000000018*t1899;
  t10110 = t10109 + t1906;
  t10112 = 0.1*t10110;
  t10114 = t10108 + t8307 + t10112;
  t10131 = 0.1000000000009*t1899;
  t10132 = t10109 + t2255;
  t10133 = 0.2*t10132;
  t10135 = -9.e-7*t8322;
  t10136 = t10131 + t10133 + t10135;
  t10140 = t10139 + t2255;
  t10227 = t10139 + t1906;
  t10968 = 0.2000000000018*t1779*t1815*t1821*t10499;
  t10969 = -0.2000000000018*t430*t10499*t1824;
  t10970 = 6.000000000054e-7*t1779*t1821*t10499*t1826;
  t10975 = t7079*t10974;
  t10980 = t2259*t10977;
  t10985 = t2228*t10984;
  t10986 = t8210*t10974;
  t10987 = t8198*t10977;
  t10988 = t8264*t10984;
  t10989 = t10986 + t10987 + t10988;
  t10990 = -0.099999*t10989;
  t10991 = t8204*t10974;
  t10992 = t8201*t10977;
  t10993 = t8198*t10984;
  t10994 = t10991 + t10992 + t10993;
  t11002 = -0.3*t10994;
  t11003 = t8214*t10974;
  t11004 = t8204*t10977;
  t11005 = t8210*t10984;
  t11006 = t11003 + t11004 + t11005;
  t11008 = 0.2*t11006;
  t11009 = t10968 + t10969 + t10970 + t10975 + t10980 + t10985 + t10990 + t11002 + t11008;
  t11363 = 1.000000000009*t10505*t1779*t1821;
  t11364 = -1.*t430*t10624;
  t11365 = 3.e-6*t430*t10640;
  t11366 = t11363 + t11364 + t11365;
  t11368 = 3.e-6*t430*t10505*t1779;
  t11369 = 3.e-6*t1821*t10624;
  t11370 = -9.e-12*t1821*t10640;
  t11371 = t11368 + t11369 + t11370;
  t11373 = -1.*t430*t10505*t1779;
  t11374 = t11373 + t10654 + t10655;
  t11070 = -0.2000000000018*t1779*t1821*t10499;
  t11400 = 3.e-6*t430*t10510;
  t11401 = -9.e-12*t430*t10515;
  t11402 = t11073 + t11400 + t11401;
  t11404 = t11078 + t10811 + t10812;
  t11406 = 1.000000000009*t430*t1779*t10499;
  t11407 = t1821*t10510;
  t11408 = -3.e-6*t1821*t10515;
  t11409 = t11406 + t11407 + t11408;
  t11434 = 3.e-6*t430*t10699;
  t11435 = -1.*t430*t10515;
  t11436 = t11434 + t11435;
  t11439 = -9.e-12*t1821*t10699;
  t11440 = t11439 + t10529;
  t11310 = t8311*t10813;
  t11314 = t8295*t10818;
  t11328 = t8305*t10821;
  t11331 = -1.000000000009*t1906*t10813;
  t11332 = t8322*t10818;
  t11333 = t8328*t10821;
  t11334 = t11331 + t11332 + t11333;
  t11335 = -0.3*t11334;
  t11336 = t8313*t10813;
  t11337 = -1.8e-11*t1906*t10818;
  t11338 = t8322*t10821;
  t11339 = t11336 + t11337 + t11338;
  t11340 = -0.099999*t11339;
  t11341 = t8317*t10813;
  t11343 = t8313*t10818;
  t11344 = -1.000000000009*t1906*t10821;
  t11345 = t11341 + t11343 + t11344;
  t11346 = 0.2*t11345;
  t11347 = t11310 + t11314 + t11328 + t11335 + t11340 + t11346;
  t11012 = 6.000000000054e-7*t1720*t1779*t1815*t10499;
  t11013 = -0.2000000000018*t1720*t1779*t10499*t1826;
  t11016 = t2228*t11015;
  t11020 = t2259*t11019;
  t11034 = t7079*t11033;
  t11036 = t8198*t11015;
  t11038 = t8201*t11019;
  t11039 = t8204*t11033;
  t11054 = t11036 + t11038 + t11039;
  t11055 = -0.3*t11054;
  t11056 = t8210*t11015;
  t11059 = t8204*t11019;
  t11060 = t8214*t11033;
  t11061 = t11056 + t11059 + t11060;
  t11062 = 0.2*t11061;
  t11063 = t8264*t11015;
  t11064 = t8198*t11019;
  t11065 = t8210*t11033;
  t11066 = t11063 + t11064 + t11065;
  t11067 = -0.099999*t11066;
  t11068 = t11012 + t11013 + t11016 + t11020 + t11034 + t11055 + t11062 + t11067;
  t11462 = -1.*t10505*t1815*t1824;
  t11464 = t10499*t1826;
  t11465 = t11462 + t11464;
  t11468 = t2247*t11465;
  t11469 = t11468 + t10650;
  t11471 = 3.e-6*t1720*t11465;
  t11472 = t430*t10640;
  t11473 = t11471 + t11472;
  t11475 = 3.e-6*t1821*t11465;
  t11476 = -1.*t1821*t10640;
  t11477 = t11475 + t11476;
  t11173 = t8295*t10703;
  t11174 = t8305*t10713;
  t11175 = t8311*t10726;
  t11176 = t8313*t10703;
  t11178 = -1.000000000009*t1906*t10713;
  t11179 = t8317*t10726;
  t11180 = t11176 + t11178 + t11179;
  t11181 = 0.2*t11180;
  t11182 = -1.8e-11*t1906*t10703;
  t11183 = t8322*t10713;
  t11208 = t8313*t10726;
  t11209 = t11182 + t11183 + t11208;
  t11211 = -0.099999*t11209;
  t11212 = t8322*t10703;
  t11215 = t8328*t10713;
  t11226 = -1.000000000009*t1906*t10726;
  t11229 = t11212 + t11215 + t11226;
  t11235 = -0.3*t11229;
  t11236 = t11173 + t11174 + t11175 + t11181 + t11211 + t11235;
  t11432 = -6.000000000054e-7*t1821*t10699;
  t11433 = 0.2000000000018*t1821*t10515;
  t11437 = t7079*t11436;
  t11438 = t2259*t10726;
  t11441 = t2228*t11440;
  t11442 = t8210*t11436;
  t11443 = t8198*t10726;
  t11444 = t8264*t11440;
  t11445 = t11442 + t11443 + t11444;
  t11446 = -0.099999*t11445;
  t11447 = t8204*t11436;
  t11448 = t8201*t10726;
  t11449 = t8198*t11440;
  t11450 = t11447 + t11448 + t11449;
  t11451 = -0.3*t11450;
  t11452 = t8214*t11436;
  t11453 = t8210*t11440;
  t11454 = t11452 + t10730 + t11453;
  t11455 = 0.2*t11454;
  t11456 = t11432 + t11433 + t11437 + t11438 + t11441 + t11446 + t11451 + t11455;
  t11501 = -1.*t10505*t1815;
  t11502 = t10499*t1824*t1826;
  t11503 = t11501 + t11502;
  t11505 = t2247*t11503;
  t11506 = t10705 + t11505;
  t11508 = t430*t10699;
  t11509 = 3.e-6*t1720*t11503;
  t11510 = t11508 + t11509;
  t11512 = -1.*t1821*t10699;
  t11513 = 3.e-6*t1821*t11503;
  t11515 = t11512 + t11513;
  t10859 = 0.2000000000018*t1720*t10505*t1779*t1815;
  t10862 = -0.2000000000018*t10505*t1821*t1824;
  t10863 = 6.000000000054e-7*t1720*t10505*t1779*t1826;
  t10876 = t2228*t10872;
  t10894 = t2259*t10893;
  t10899 = t7079*t10898;
  t10900 = t8198*t10872;
  t10901 = t8201*t10893;
  t10902 = t8204*t10898;
  t10903 = t10900 + t10901 + t10902;
  t10904 = -0.3*t10903;
  t10905 = t8210*t10872;
  t10906 = t8204*t10893;
  t10913 = t8214*t10898;
  t10919 = t10905 + t10906 + t10913;
  t10923 = 0.2*t10919;
  t10929 = t8264*t10872;
  t10930 = t8198*t10893;
  t10931 = t8210*t10898;
  t10932 = t10929 + t10930 + t10931;
  t10933 = -0.099999*t10932;
  t10934 = t10859 + t10862 + t10863 + t10876 + t10894 + t10899 + t10904 + t10923 + t10933;
  t11466 = -6.000000000054e-7*t1720*t11465;
  t11467 = 0.2000000000018*t1720*t10640;
  t11470 = t2228*t11469;
  t11474 = t2259*t11473;
  t11478 = t7079*t11477;
  t11479 = t8198*t11469;
  t11480 = t8201*t11473;
  t11481 = t8204*t11477;
  t11483 = t11479 + t11480 + t11481;
  t11484 = -0.3*t11483;
  t11485 = t8210*t11469;
  t11486 = t8204*t11473;
  t11487 = t8214*t11477;
  t11488 = t11485 + t11486 + t11487;
  t11489 = 0.2*t11488;
  t11490 = t8264*t11469;
  t11491 = t8198*t11473;
  t11492 = t8210*t11477;
  t11493 = t11490 + t11491 + t11492;
  t11494 = -0.099999*t11493;
  t11495 = t11466 + t11467 + t11470 + t11474 + t11478 + t11484 + t11489 + t11494;
  t11127 = t8295*t10645;
  t11128 = t8305*t10651;
  t11129 = t8311*t10656;
  t11147 = t8313*t10645;
  t11148 = -1.000000000009*t1906*t10651;
  t11149 = t8317*t10656;
  t11150 = t11147 + t11148 + t11149;
  t11151 = 0.2*t11150;
  t11152 = -1.8e-11*t1906*t10645;
  t11158 = t8322*t10651;
  t11159 = t8313*t10656;
  t11160 = t11152 + t11158 + t11159;
  t11165 = -0.099999*t11160;
  t11166 = t8322*t10645;
  t11167 = t8328*t10651;
  t11168 = -1.000000000009*t1906*t10656;
  t11169 = t11166 + t11167 + t11168;
  t11170 = -0.3*t11169;
  t11171 = t11127 + t11128 + t11129 + t11151 + t11165 + t11170;
  t11353 = 0.2000000000018*t430*t10505*t1779;
  t11358 = 0.2000000000018*t1821*t10624;
  t11359 = -6.000000000054e-7*t1821*t10640;
  t11367 = t7079*t11366;
  t11372 = t2228*t11371;
  t11375 = t2259*t11374;
  t11376 = t8214*t11366;
  t11377 = t8210*t11371;
  t11379 = t8204*t11374;
  t11381 = t11376 + t11377 + t11379;
  t11382 = 0.2*t11381;
  t11384 = t8210*t11366;
  t11385 = t8264*t11371;
  t11386 = t8198*t11374;
  t11387 = t11384 + t11385 + t11386;
  t11388 = -0.099999*t11387;
  t11389 = t8204*t11366;
  t11390 = t8198*t11371;
  t11392 = t8201*t11374;
  t11394 = t11389 + t11390 + t11392;
  t11395 = -0.3*t11394;
  t11396 = t11353 + t11358 + t11359 + t11367 + t11372 + t11375 + t11382 + t11388 + t11395;
  t11499 = 0.2000000000018*t1720*t10699;
  t11504 = -6.000000000054e-7*t1720*t11503;
  t11553 = t11073 + t10705 + t11505;
  t11555 = t11078 + t11508 + t11509;
  t11557 = t11084 + t11512 + t11513;
  t11584 = t1815*t10499;
  t11585 = t10505*t1824*t1826;
  t11587 = t11584 + t11585;
  t11607 = -3.e-6*t1720*t10505*t1779*t1815;
  t11608 = 3.e-6*t10505*t1821*t1824;
  t11609 = t2247*t10505*t1779*t1826;
  t11610 = t11607 + t11608 + t11609;
  t11612 = -1.*t430*t10505*t1779*t1815;
  t11614 = -1.*t10505*t1821*t1824;
  t11615 = 3.e-6*t1720*t10505*t1779*t1826;
  t11618 = t11612 + t11614 + t11615;
  t11620 = t10505*t1779*t1815*t1821;
  t11622 = -1.*t8068*t10505*t1824;
  t11623 = 3.e-6*t10505*t1779*t1821*t1826;
  t11624 = t11620 + t11622 + t11623;
  t11604 = -0.2000000000018*t1720*t10505*t1779*t1815;
  t11605 = 0.2000000000018*t10505*t1821*t1824;
  t11606 = -6.000000000054e-7*t1720*t10505*t1779*t1826;
  t11611 = t2228*t11610;
  t11619 = t2259*t11618;
  t11625 = t7079*t11624;
  t11626 = t8198*t11610;
  t11627 = t8201*t11618;
  t11628 = t8204*t11624;
  t11629 = t11626 + t11627 + t11628;
  t11630 = -0.3*t11629;
  t11631 = t8210*t11610;
  t11632 = t8204*t11618;
  t11633 = t8214*t11624;
  t11634 = t11631 + t11632 + t11633;
  t11635 = 0.2*t11634;
  t11636 = t8264*t11610;
  t11637 = t8198*t11618;
  t11638 = t8210*t11624;
  t11639 = t11636 + t11637 + t11638;
  t11640 = -0.099999*t11639;
  t11641 = t11604 + t11605 + t11606 + t11611 + t11619 + t11625 + t11630 + t11635 + t11640;
  t11589 = -3.e-6*t10505*t1779*t1821;
  t11590 = t2247*t11587;
  t11591 = t11589 + t11471 + t11590;
  t11593 = t10505*t1779*t1821;
  t11594 = t430*t11465;
  t11595 = 3.e-6*t1720*t11587;
  t11597 = t11593 + t11594 + t11595;
  t11599 = t8068*t10505*t1779;
  t11600 = -1.*t1821*t11465;
  t11601 = 3.e-6*t1821*t11587;
  t11602 = t11599 + t11600 + t11601;
  t11683 = t2247*t10624;
  t11684 = t11683 + t11595;
  t11686 = t430*t11587;
  t11687 = t10643 + t11686;
  t11689 = -1.*t1821*t11587;
  t11690 = t11369 + t11689;
  t11681 = -6.000000000054e-7*t1720*t10624;
  t11682 = 0.2000000000018*t1720*t11587;
  t11685 = t2228*t11684;
  t11688 = t2259*t11687;
  t11691 = t7079*t11690;
  t11692 = t8198*t11684;
  t11693 = t8201*t11687;
  t11694 = t8204*t11690;
  t11695 = t11692 + t11693 + t11694;
  t11696 = -0.3*t11695;
  t11698 = t8210*t11684;
  t11699 = t8204*t11687;
  t11700 = t8214*t11690;
  t11701 = t11698 + t11699 + t11700;
  t11702 = 0.2*t11701;
  t11703 = t8264*t11684;
  t11704 = t8198*t11687;
  t11705 = t8210*t11690;
  t11706 = t11703 + t11704 + t11705;
  t11708 = -0.099999*t11706;
  t11709 = t11681 + t11682 + t11685 + t11688 + t11691 + t11696 + t11702 + t11708;
  t11712 = t8295*t11591;
  t11713 = t8305*t11597;
  t11714 = t8311*t11602;
  t11716 = t8313*t11591;
  t11721 = -1.000000000009*t1906*t11597;
  t11723 = t8317*t11602;
  t11724 = t11716 + t11721 + t11723;
  t11725 = 0.2*t11724;
  t11726 = -1.8e-11*t1906*t11591;
  t11727 = t8322*t11597;
  t11728 = t8313*t11602;
  t11729 = t11726 + t11727 + t11728;
  t11730 = -0.099999*t11729;
  t11731 = t8322*t11591;
  t11732 = t8328*t11597;
  t11733 = -1.000000000009*t1906*t11602;
  t11734 = t11731 + t11732 + t11733;
  t11735 = -0.3*t11734;
  t11736 = t11712 + t11713 + t11714 + t11725 + t11730 + t11735;
  t11742 = -1.000000000009*t10505*t1779*t1821;
  t11743 = -1.*t430*t11465;
  t11744 = 3.e-6*t430*t11587;
  t11746 = t11742 + t11743 + t11744;
  t11750 = -3.e-6*t430*t10505*t1779;
  t11751 = -9.e-12*t1821*t11587;
  t11752 = t11750 + t11475 + t11751;
  t11754 = t430*t10505*t1779;
  t11755 = t11754 + t11600 + t11601;
  t11739 = -0.2000000000018*t430*t10505*t1779;
  t11740 = 0.2000000000018*t1821*t11465;
  t11741 = -6.000000000054e-7*t1821*t11587;
  t11749 = t7079*t11746;
  t11753 = t2228*t11752;
  t11756 = t2259*t11755;
  t11757 = t8214*t11746;
  t11760 = t8210*t11752;
  t11761 = t8204*t11755;
  t11762 = t11757 + t11760 + t11761;
  t11779 = 0.2*t11762;
  t11780 = t8210*t11746;
  t11781 = t8264*t11752;
  t11784 = t8198*t11755;
  t11785 = t11780 + t11781 + t11784;
  t11786 = -0.099999*t11785;
  t11788 = t8204*t11746;
  t11789 = t8198*t11752;
  t11790 = t8201*t11755;
  t11791 = t11788 + t11789 + t11790;
  t11792 = -0.3*t11791;
  t11793 = t11739 + t11740 + t11741 + t11749 + t11753 + t11756 + t11779 + t11786 + t11792;
  t11804 = t2247*t10505*t1779*t1815;
  t11805 = t11804 + t11615;
  t11808 = t430*t10505*t1779*t1826;
  t11811 = t10864 + t11808;
  t11816 = 3.e-6*t10505*t1779*t1815*t1821;
  t11817 = -1.*t10505*t1779*t1821*t1826;
  t11822 = t11816 + t11817;
  t11899 = 1.000000000009*t10505*t1821*t1824;
  t11900 = 3.e-6*t430*t10505*t1779*t1826;
  t11901 = t10890 + t11899 + t11900;
  t11904 = -3.e-6*t10505*t1779*t1815*t1821;
  t11913 = 3.e-6*t430*t10505*t1824;
  t11914 = -9.e-12*t10505*t1779*t1821*t1826;
  t11915 = t11904 + t11913 + t11914;
  t11918 = -1.*t430*t10505*t1824;
  t11921 = t11620 + t11918 + t11623;
  t11948 = 3.e-6*t1720*t10505*t1815*t1824;
  t11949 = -1.*t2247*t10505*t1824*t1826;
  t11950 = t10642 + t11948 + t11949;
  t11952 = t430*t10505*t1815*t1824;
  t11953 = -3.e-6*t1720*t10505*t1824*t1826;
  t11954 = t10647 + t11952 + t11953;
  t11956 = -1.*t10505*t1815*t1821*t1824;
  t11957 = -3.e-6*t10505*t1821*t1824*t1826;
  t11958 = t10653 + t11956 + t11957;
  t10500 = 0.2000000000018*t1779*t1821*t10499;
  t10511 = 0.2000000000018*t1720*t10510;
  t10516 = -6.000000000054e-7*t1720*t10515;
  t10521 = t2228*t10520;
  t10526 = t2259*t10525;
  t10531 = t7079*t10530;
  t10583 = t8198*t10520;
  t10584 = t8201*t10525;
  t10586 = t8204*t10530;
  t10592 = t10583 + t10584 + t10586;
  t10603 = -0.3*t10592;
  t10604 = t8210*t10520;
  t10606 = t8204*t10525;
  t10607 = t8214*t10530;
  t10608 = t10604 + t10606 + t10607;
  t10609 = 0.2*t10608;
  t10610 = t8264*t10520;
  t10611 = t8198*t10525;
  t10612 = t8210*t10530;
  t10614 = t10610 + t10611 + t10612;
  t10617 = -0.099999*t10614;
  t11980 = t10500 + t10511 + t10516 + t10521 + t10526 + t10531 + t10603 + t10609 + t10617;
  t11800 = -6.000000000054e-7*t1720*t10505*t1779*t1815;
  t11803 = 0.2000000000018*t1720*t10505*t1779*t1826;
  t11807 = t2228*t11805;
  t11812 = t2259*t11811;
  t11823 = t7079*t11822;
  t11848 = t8198*t11805;
  t11850 = t8201*t11811;
  t11852 = t8204*t11822;
  t11853 = t11848 + t11850 + t11852;
  t11854 = -0.3*t11853;
  t11855 = t8210*t11805;
  t11856 = t8204*t11811;
  t11857 = t8214*t11822;
  t11858 = t11855 + t11856 + t11857;
  t11859 = 0.2*t11858;
  t11860 = t8264*t11805;
  t11861 = t8198*t11811;
  t11862 = t8210*t11822;
  t11863 = t11860 + t11861 + t11862;
  t11864 = -0.099999*t11863;
  t11865 = t11800 + t11803 + t11807 + t11812 + t11823 + t11854 + t11859 + t11864;
  t11984 = t10643 + t10644;
  t11987 = t10648 + t10650;
  t11989 = t10654 + t10655;
  t12034 = 3.e-6*t430*t10624;
  t12035 = -1.*t430*t11587;
  t12036 = t12034 + t12035;
  t12039 = -9.e-12*t1821*t10624;
  t12040 = t12039 + t11601;
  t11867 = t8295*t11610;
  t11868 = t8305*t11618;
  t11869 = t8311*t11624;
  t11870 = t8313*t11610;
  t11871 = -1.000000000009*t1906*t11618;
  t11872 = t8317*t11624;
  t11873 = t11870 + t11871 + t11872;
  t11874 = 0.2*t11873;
  t11875 = -1.8e-11*t1906*t11610;
  t11876 = t8322*t11618;
  t11877 = t8313*t11624;
  t11878 = t11875 + t11876 + t11877;
  t11879 = -0.099999*t11878;
  t11880 = t8322*t11610;
  t11881 = t8328*t11618;
  t11882 = -1.000000000009*t1906*t11624;
  t11891 = t11880 + t11881 + t11882;
  t11892 = -0.3*t11891;
  t11893 = t11867 + t11868 + t11869 + t11874 + t11879 + t11892;
  t12009 = t8295*t11684;
  t12010 = t8305*t11687;
  t12011 = t8311*t11690;
  t12012 = t8313*t11684;
  t12013 = -1.000000000009*t1906*t11687;
  t12014 = t8317*t11690;
  t12015 = t12012 + t12013 + t12014;
  t12016 = 0.2*t12015;
  t12017 = -1.8e-11*t1906*t11684;
  t12019 = t8322*t11687;
  t12020 = t8313*t11690;
  t12021 = t12017 + t12019 + t12020;
  t12023 = -0.099999*t12021;
  t12024 = t8322*t11684;
  t12026 = t8328*t11687;
  t12027 = -1.000000000009*t1906*t11690;
  t12028 = t12024 + t12026 + t12027;
  t12029 = -0.3*t12028;
  t12030 = t12009 + t12010 + t12011 + t12016 + t12023 + t12029;
  t10582 = var2[4]*t10580;
  t10696 = var2[3]*t10694;
  t10759 = var2[5]*t10752;
  t10794 = var2[17]*t10792;
  t10855 = var2[15]*t10853;
  t11895 = -0.2000000000018*t10505*t1779*t1815*t1821;
  t11896 = 0.2000000000018*t430*t10505*t1824;
  t11897 = -6.000000000054e-7*t10505*t1779*t1821*t1826;
  t11903 = t7079*t11901;
  t11917 = t2228*t11915;
  t11922 = t2259*t11921;
  t11926 = t8214*t11901;
  t11927 = t8210*t11915;
  t11928 = t8204*t11921;
  t11929 = t11926 + t11927 + t11928;
  t11931 = 0.2*t11929;
  t11932 = t8210*t11901;
  t11933 = t8264*t11915;
  t11934 = t8198*t11921;
  t11935 = t11932 + t11933 + t11934;
  t11936 = -0.099999*t11935;
  t11937 = t8204*t11901;
  t11938 = t8198*t11915;
  t11939 = t8201*t11921;
  t11940 = t11937 + t11938 + t11939;
  t11941 = -0.3*t11940;
  t11942 = t11895 + t11896 + t11897 + t11903 + t11917 + t11922 + t11931 + t11936 + t11941;
  t12124 = 3.e-6*t430*t11465;
  t12125 = -9.e-12*t430*t11587;
  t12127 = t10642 + t12124 + t12125;
  t12129 = t10647 + t11743 + t11744;
  t12131 = -1.000000000009*t430*t10505*t1779;
  t12132 = t1821*t11465;
  t12133 = -3.e-6*t1821*t11587;
  t12134 = t12131 + t12132 + t12133;
  t12032 = -6.000000000054e-7*t1821*t10624;
  t12033 = 0.2000000000018*t1821*t11587;
  t12037 = t7079*t12036;
  t12038 = t2259*t11690;
  t12041 = t2228*t12040;
  t12042 = t8210*t12036;
  t12043 = t8198*t11690;
  t12044 = t8264*t12040;
  t12045 = t12042 + t12043 + t12044;
  t12046 = -0.099999*t12045;
  t12047 = t8204*t12036;
  t12052 = t8201*t11690;
  t12053 = t8198*t12040;
  t12054 = t12047 + t12052 + t12053;
  t12056 = -0.3*t12054;
  t12057 = t8214*t12036;
  t12058 = t8210*t12040;
  t12059 = t12057 + t11694 + t12058;
  t12064 = 0.2*t12059;
  t12065 = t12032 + t12033 + t12037 + t12038 + t12041 + t12046 + t12056 + t12064;
  t12094 = t8311*t11746;
  t12095 = t8295*t11752;
  t12096 = t8305*t11755;
  t12097 = -1.000000000009*t1906*t11746;
  t12098 = t8322*t11752;
  t12099 = t8328*t11755;
  t12100 = t12097 + t12098 + t12099;
  t12101 = -0.3*t12100;
  t12102 = t8313*t11746;
  t12103 = -1.8e-11*t1906*t11752;
  t12104 = t8322*t11755;
  t12105 = t12102 + t12103 + t12104;
  t12106 = -0.099999*t12105;
  t12107 = t8317*t11746;
  t12108 = t8313*t11752;
  t12109 = -1.000000000009*t1906*t11755;
  t12110 = t12107 + t12108 + t12109;
  t12111 = 0.2*t12110;
  t12112 = t12094 + t12095 + t12096 + t12101 + t12106 + t12111;
  p_output1[0]=0.2000000000018*t1720*t1779*t1815 - 0.2000000000018*t1821*t1824 + 6.000000000054e-7*t1720*t1779*t1826 + t2228*t2249 + t2259*t2263 + t7079*t8189 - 0.3*(t2249*t8198 + t2263*t8201 + t8189*t8204) + 0.2*(t2263*t8204 + t2249*t8210 + t8189*t8214) - 0.099999*(t2263*t8198 + t8189*t8210 + t2249*t8264) + var1[0] + var2[0] + t9525*var2[4] + t9342*var2[5] + t8530*var2[15] + t8333*var2[17] + var2[15]*(t10455*var2[4] + t9736*var2[5] + (t10329 + t10466*t2228 + t10462*t2259 + 0.2000000000018*t1779*t1815*t430 + 6.000000000054e-7*t1779*t1826*t430 + t10469*t7079 - 0.3*(t10466*t8198 + t10462*t8201 + t10469*t8204) + 0.2*(t10462*t8204 + t10466*t8210 + t10469*t8214) - 0.099999*(t10462*t8198 + t10469*t8210 + t10466*t8264))*var2[15] + t10266*var2[17]) + var2[4]*((t10329 + t10331*t2228 + t10335*t2259 + t10338*t7079 - 0.3*(t10331*t8198 + t10335*t8201 + t10338*t8204) + 0.2*(t10335*t8204 + t10331*t8210 + t10338*t8214) - 0.099999*(t10335*t8198 + t10338*t8210 + t10331*t8264) + t9528 + t9529)*var2[4] + t10088*var2[5] + t10455*var2[15] + t10325*var2[17]) + var2[17]*(t10325*var2[4] + t9660*var2[5] + t10266*var2[15] + (t10105*t2249 + t10114*t2263 + t10136*t8189 + 0.2*(-1.000000000009*t1899*t2263 + t10227*t8189 + t2249*t8292) - 0.099999*(-1.8e-11*t1899*t2249 + t8189*t8292 + t2263*t8313) - 0.3*(t10140*t2263 - 1.000000000009*t1899*t8189 + t8314))*var2[17]) + var2[5]*(t10088*var2[4] + (t9528 + t9529 + t2228*t9531 + t2259*t9537 + t7079*t9603 - 0.3*(t8198*t9531 + t8201*t9537 + t8204*t9603) - 0.099999*(t8264*t9531 + t8198*t9537 + t8210*t9603) + 0.2*(t8210*t9531 + t8204*t9537 + t8214*t9603))*var2[5] + t9736*var2[15] + t9660*var2[17]) + var3[0] + t9525*var3[4] + t9342*var3[5] + t8530*var3[15] + t8333*var3[17] - 1.*var4[0];
  p_output1[1]=t10500 + t10511 + t10516 + t10521 + t10526 + t10531 + t10582 + t10603 + t10609 + t10617 + t10696 + t10759 + t10794 + t10855 + var1[1] + var2[1] + var2[4]*(t10934*var2[3] + (t11070 - 0.2000000000018*t10499*t1720*t1815*t1824 - 6.000000000054e-7*t10499*t1720*t1824*t1826 + t11076*t2228 + t11082*t2259 + t11087*t7079 - 0.3*(t11076*t8198 + t11082*t8201 + t11087*t8204) + 0.2*(t11082*t8204 + t11076*t8210 + t11087*t8214) - 0.099999*(t11082*t8198 + t11087*t8210 + t11076*t8264))*var2[4] + t11068*var2[5] + t11009*var2[15] + t10964*var2[17]) + var2[3]*((t11070 + t11499 + t11504 + t11553*t2228 + t11555*t2259 + t11557*t7079 - 0.3*(t11553*t8198 + t11555*t8201 + t11557*t8204) + 0.2*(t11555*t8204 + t11553*t8210 + t11557*t8214) - 0.099999*(t11555*t8198 + t11557*t8210 + t11553*t8264))*var2[3] + t10934*var2[4] + t11495*var2[5] + t11396*var2[15] + t11171*var2[17]) + var2[5]*(t11495*var2[3] + t11068*var2[4] + (t11499 + t11504 + t11506*t2228 + t11510*t2259 + t11515*t7079 - 0.3*(t11506*t8198 + t11510*t8201 + t11515*t8204) + 0.2*(t11510*t8204 + t11506*t8210 + t11515*t8214) - 0.099999*(t11510*t8198 + t11515*t8210 + t11506*t8264))*var2[5] + t11456*var2[15] + t11236*var2[17]) + var2[15]*(t11396*var2[3] + t11009*var2[4] + t11456*var2[5] + (t11070 + t11402*t2228 + t11404*t2259 + 0.2000000000018*t10510*t430 - 6.000000000054e-7*t10515*t430 + t11409*t7079 - 0.3*(t11402*t8198 + t11404*t8201 + t11409*t8204) + 0.2*(t11404*t8204 + t11402*t8210 + t11409*t8214) - 0.099999*(t11404*t8198 + t11409*t8210 + t11402*t8264))*var2[15] + t11347*var2[17]) + var2[17]*(t11171*var2[3] + t10964*var2[4] + t11236*var2[5] + t11347*var2[15] + (t10105*t10520 + t10114*t10525 + t10136*t10530 - 0.3*(t10140*t10525 + t10768 - 1.000000000009*t10530*t1899) + 0.2*(t10227*t10530 - 1.000000000009*t10525*t1899 + t10520*t8292) - 0.099999*(-1.8e-11*t10520*t1899 + t10530*t8292 + t10525*t8313))*var2[17]) + var3[1] + t10694*var3[3] + t10580*var3[4] + t10752*var3[5] + t10853*var3[15] + t10792*var3[17] - 1.*var4[1];
  p_output1[2]=0.2000000000018*t11465*t1720 - 6.000000000054e-7*t11587*t1720 - 0.2000000000018*t10505*t1779*t1821 + t11591*t2228 + t11597*t2259 + t11602*t7079 - 0.3*(t11591*t8198 + t11597*t8201 + t11602*t8204) + 0.2*(t11597*t8204 + t11591*t8210 + t11602*t8214) - 0.099999*(t11597*t8198 + t11602*t8210 + t11591*t8264) + var1[2] + var2[2] + (t10582 + t10696 + t10759 + t10794 + t10855)*var2[3] + t11980*var2[3] + t11641*var2[4] + t11709*var2[5] + t11793*var2[15] + t11736*var2[17] + var2[4]*(t10580*var2[3] + (t10619 + 0.2000000000018*t10505*t1720*t1815*t1824 + 6.000000000054e-7*t10505*t1720*t1824*t1826 + t11950*t2228 + t11954*t2259 + t11958*t7079 - 0.3*(t11950*t8198 + t11954*t8201 + t11958*t8204) + 0.2*(t11954*t8204 + t11950*t8210 + t11958*t8214) - 0.099999*(t11954*t8198 + t11958*t8210 + t11950*t8264))*var2[4] + t11865*var2[5] + t11942*var2[15] + t11893*var2[17]) + var2[5]*(t10752*var2[3] + t11865*var2[4] + (t10625 + t10641 + t11984*t2228 + t11987*t2259 + t11989*t7079 - 0.3*(t11984*t8198 + t11987*t8201 + t11989*t8204) + 0.2*(t11987*t8204 + t11984*t8210 + t11989*t8214) - 0.099999*(t11987*t8198 + t11989*t8210 + t11984*t8264))*var2[5] + t12065*var2[15] + t12030*var2[17]) + var2[15]*(t10853*var2[3] + t11942*var2[4] + t12065*var2[5] + (t10619 + t12127*t2228 + t12129*t2259 + 0.2000000000018*t11465*t430 - 6.000000000054e-7*t11587*t430 + t12134*t7079 - 0.3*(t12127*t8198 + t12129*t8201 + t12134*t8204) + 0.2*(t12129*t8204 + t12127*t8210 + t12134*t8214) - 0.099999*(t12129*t8198 + t12134*t8210 + t12127*t8264))*var2[15] + t12112*var2[17]) + var2[17]*(t10792*var2[3] + t11893*var2[4] + t12030*var2[5] + t12112*var2[15] + (t10105*t11591 + t10114*t11597 + t10136*t11602 - 0.3*(t10140*t11597 + t11716 - 1.000000000009*t11602*t1899) + 0.2*(t10227*t11602 - 1.000000000009*t11597*t1899 + t11591*t8292) - 0.099999*(-1.8e-11*t11591*t1899 + t11602*t8292 + t11597*t8313))*var2[17]) + var3[2] + t11980*var3[3] + t11641*var3[4] + t11709*var3[5] + t11793*var3[15] + t11736*var3[17] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RightFrontFoot_FrontStance.hh"

namespace FrontStance
{

void ddh_RightFrontFoot_FrontStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
