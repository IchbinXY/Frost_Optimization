/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 22:30:21 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t2634;
  double t2764;
  double t3139;
  double t3211;
  double t3484;
  double t3519;
  double t3531;
  double t3548;
  double t3551;
  double t3215;
  double t3224;
  double t3227;
  double t3318;
  double t3588;
  double t3631;
  double t3909;
  double t3554;
  double t3569;
  double t3911;
  double t3719;
  double t3826;
  double t3830;
  double t3850;
  double t3904;
  double t3905;
  double t3922;
  double t3933;
  double t3934;
  double t3940;
  double t4015;
  double t4018;
  double t4062;
  double t4063;
  double t4074;
  double t4247;
  double t4249;
  double t4259;
  double t4302;
  double t4254;
  double t3913;
  double t4252;
  double t4332;
  double t4631;
  double t4634;
  double t4624;
  double t4627;
  double t4711;
  double t4782;
  double t4846;
  double t4811;
  double t4628;
  double t4690;
  double t4691;
  double t4703;
  double t4704;
  double t4707;
  double t4732;
  double t4733;
  double t4737;
  double t4740;
  double t4741;
  double t4744;
  double t4745;
  double t4770;
  double t4776;
  double t4780;
  double t4781;
  double t4806;
  double t4810;
  double t4812;
  double t4815;
  double t4820;
  double t4821;
  double t4822;
  double t4850;
  double t4851;
  double t4852;
  double t4855;
  double t4876;
  double t4877;
  double t4878;
  double t4879;
  double t4881;
  double t4882;
  double t4886;
  double t4002;
  double t4003;
  double t4010;
  double t4012;
  double t4013;
  double t3910;
  double t3916;
  double t3919;
  double t3920;
  double t3921;
  double t3410;
  double t3540;
  double t3577;
  double t3633;
  double t3695;
  double t4897;
  double t4900;
  double t4903;
  double t4905;
  double t4932;
  double t4935;
  double t4466;
  double t4524;
  double t4939;
  double t6184;
  double t6185;
  double t6516;
  double t4257;
  double t4459;
  double t4893;
  double t4894;
  double t4896;
  double t4930;
  double t4936;
  double t6633;
  double t6634;
  double t6652;
  double t6666;
  double t6674;
  double t6675;
  double t6676;
  double t6678;
  double t6680;
  double t6681;
  double t6696;
  double t6709;
  double t6711;
  double t6712;
  double t6713;
  double t6720;
  double t6722;
  double t6738;
  double t6935;
  double t6990;
  double t6991;
  double t7031;
  double t7033;
  double t7047;
  double t7053;
  double t6731;
  double t6737;
  double t6989;
  double t7032;
  double t7073;
  double t7074;
  double t7078;
  double t7079;
  double t7083;
  double t7084;
  double t7085;
  double t7086;
  double t7088;
  double t7095;
  double t7096;
  double t7097;
  double t7100;
  double t7101;
  double t7103;
  double t7104;
  double t7105;
  double t7162;
  double t7277;
  double t7288;
  double t7292;
  double t7294;
  double t7295;
  double t7296;
  double t7297;
  double t7299;
  double t7300;
  double t7301;
  double t7304;
  double t7125;
  double t7131;
  double t7144;
  double t7293;
  double t7298;
  double t7305;
  double t7306;
  double t7307;
  double t7342;
  double t7374;
  double t7375;
  double t7376;
  double t7378;
  double t7380;
  double t7381;
  double t7384;
  double t7385;
  double t7387;
  double t7389;
  double t7392;
  double t7393;
  double t7395;
  double t7492;
  double t7493;
  double t7496;
  double t7497;
  double t7499;
  double t7503;
  double t7508;
  double t7801;
  double t7802;
  double t7805;
  double t7807;
  double t7808;
  double t8186;
  double t8187;
  double t8190;
  double t8191;
  double t8192;
  double t8194;
  double t8195;
  double t8196;
  double t8404;
  double t8420;
  double t7672;
  double t7701;
  double t7702;
  double t7703;
  double t7707;
  double t7712;
  double t7716;
  double t7718;
  double t7719;
  double t7720;
  double t7721;
  double t7722;
  double t7723;
  double t7724;
  double t7725;
  double t7726;
  double t7727;
  double t7728;
  double t7733;
  double t7464;
  double t7470;
  double t8782;
  double t8783;
  double t8787;
  double t8788;
  double t8791;
  double t8792;
  double t8172;
  double t8178;
  double t8189;
  double t8193;
  double t8197;
  double t8198;
  double t8199;
  double t8200;
  double t8201;
  double t8202;
  double t8204;
  double t8205;
  double t8206;
  double t8207;
  double t8248;
  double t8299;
  double t8371;
  double t8372;
  double t8376;
  double t8382;
  double t8388;
  double t8617;
  double t8618;
  double t8620;
  double t8623;
  double t8624;
  double t8626;
  double t8627;
  double t8628;
  double t8629;
  double t8741;
  double t8743;
  double t8744;
  double t8746;
  double t8747;
  double t8753;
  double t8759;
  double t8762;
  double t8769;
  double t8774;
  double t12113;
  double t12116;
  double t12121;
  double t12130;
  double t12136;
  double t12137;
  double t12145;
  double t12148;
  double t12155;
  double t12157;
  double t8550;
  double t8553;
  double t8555;
  double t8556;
  double t8557;
  double t8560;
  double t8561;
  double t8584;
  double t8585;
  double t8589;
  double t8594;
  double t8599;
  double t8600;
  double t8601;
  double t8602;
  double t8603;
  double t8604;
  double t8606;
  double t8607;
  double t8781;
  double t12668;
  double t13039;
  double t13040;
  double t13042;
  double t13045;
  double t13133;
  double t7796;
  double t7799;
  double t7806;
  double t7809;
  double t7811;
  double t7812;
  double t7813;
  double t7817;
  double t7819;
  double t7821;
  double t7849;
  double t7880;
  double t7884;
  double t7888;
  double t7911;
  double t7912;
  double t7913;
  double t8006;
  double t8078;
  double t8118;
  double t12081;
  double t12108;
  double t12112;
  double t12135;
  double t12152;
  double t12167;
  double t12182;
  double t12189;
  double t12255;
  double t12276;
  double t12312;
  double t12319;
  double t12358;
  double t12374;
  double t12379;
  double t12380;
  double t12385;
  double t12386;
  double t12388;
  double t12393;
  double t12398;
  double t12399;
  double t13841;
  double t13898;
  double t13887;
  double t13903;
  double t13905;
  double t13910;
  double t13913;
  double t13915;
  double t13959;
  double t13960;
  double t13963;
  double t13964;
  double t13968;
  double t13976;
  double t13979;
  double t13980;
  double t13984;
  double t13999;
  double t14000;
  double t14001;
  double t13952;
  double t13955;
  double t13956;
  double t13967;
  double t13983;
  double t14002;
  double t14006;
  double t14010;
  double t14014;
  double t14015;
  double t14016;
  double t14017;
  double t14018;
  double t14019;
  double t14021;
  double t14022;
  double t14023;
  double t14025;
  double t14026;
  double t14027;
  double t14029;
  double t14030;
  double t13920;
  double t13923;
  double t13925;
  double t13928;
  double t13933;
  double t13937;
  double t13938;
  double t13939;
  double t13943;
  double t13944;
  double t13948;
  double t13949;
  double t14126;
  double t14127;
  double t14128;
  double t14130;
  double t14131;
  double t14132;
  double t14134;
  double t14135;
  double t14136;
  double t14149;
  double t14153;
  double t14165;
  double t14180;
  double t14185;
  double t14190;
  double t14192;
  double t14197;
  double t14198;
  double t14125;
  double t14129;
  double t14133;
  double t14150;
  double t14186;
  double t14199;
  double t14200;
  double t14201;
  double t14202;
  double t14203;
  double t14204;
  double t14205;
  double t14206;
  double t14207;
  double t14208;
  double t14209;
  double t14210;
  double t14211;
  double t14212;
  double t14216;
  double t14218;
  double t14223;
  double t14226;
  double t14228;
  double t14229;
  double t14232;
  double t14233;
  double t14235;
  double t14236;
  double t14237;
  double t14239;
  double t14240;
  double t14241;
  double t14230;
  double t14231;
  double t14234;
  double t14238;
  double t14242;
  double t14344;
  double t14345;
  double t14346;
  double t14347;
  double t14348;
  double t14351;
  double t14352;
  double t14353;
  double t14354;
  double t14355;
  double t14357;
  double t14358;
  double t14359;
  double t14361;
  double t14377;
  double t14383;
  double t14388;
  double t14389;
  double t14390;
  double t14392;
  double t14393;
  double t14394;
  double t14396;
  double t14397;
  double t14398;
  double t14399;
  double t14419;
  double t14420;
  double t14421;
  double t14422;
  double t14423;
  double t14424;
  double t14425;
  double t14426;
  double t14427;
  double t14433;
  double t14434;
  double t14435;
  double t14444;
  double t14470;
  double t14473;
  double t14485;
  double t14486;
  double t14492;
  double t14493;
  double t14430;
  double t14431;
  double t14432;
  double t14459;
  double t14491;
  double t14494;
  double t14495;
  double t14496;
  double t14497;
  double t14498;
  double t14499;
  double t14500;
  double t14501;
  double t14503;
  double t14504;
  double t14505;
  double t14506;
  double t14507;
  double t14511;
  double t14515;
  double t14522;
  double t14523;
  double t14529;
  double t14530;
  double t14531;
  double t14532;
  double t14534;
  double t14535;
  double t14536;
  double t14537;
  double t14539;
  double t14540;
  double t14541;
  double t14542;
  double t14586;
  double t14593;
  double t14594;
  double t14595;
  double t14597;
  double t14598;
  double t14600;
  double t14601;
  double t14602;
  double t14603;
  double t14630;
  double t14631;
  double t14633;
  double t14634;
  double t14635;
  double t14637;
  double t14638;
  double t14639;
  double t14664;
  double t14665;
  double t14666;
  double t14667;
  double t14669;
  double t14670;
  double t14671;
  double t14672;
  double t14674;
  double t14675;
  double t14676;
  double t14677;
  double t14561;
  double t14562;
  double t14563;
  double t14564;
  double t14565;
  double t14566;
  double t14567;
  double t14568;
  double t14569;
  double t14570;
  double t14571;
  double t14572;
  double t14573;
  double t14574;
  double t14575;
  double t14576;
  double t14577;
  double t14578;
  double t14579;
  double t8398;
  double t8399;
  double t8400;
  double t8401;
  double t8403;
  double t8405;
  double t8409;
  double t8410;
  double t8413;
  double t8414;
  double t8415;
  double t8416;
  double t8417;
  double t8467;
  double t8541;
  double t14581;
  double t14582;
  double t14585;
  double t14596;
  double t14599;
  double t14604;
  double t14605;
  double t14606;
  double t14607;
  double t14608;
  double t14609;
  double t14610;
  double t14611;
  double t14617;
  double t14618;
  double t14619;
  double t14620;
  double t14621;
  double t14623;
  double t14624;
  double t14625;
  double t14626;
  double t14835;
  double t14836;
  double t14837;
  double t14838;
  double t14840;
  double t14841;
  double t14842;
  double t14843;
  double t14845;
  double t14846;
  double t14661;
  double t14877;
  double t14879;
  double t14880;
  double t14884;
  double t14887;
  double t14888;
  double t14900;
  double t14907;
  double t14954;
  double t14957;
  double t14958;
  double t14961;
  double t14962;
  double t14803;
  double t14805;
  double t14806;
  double t14807;
  double t14808;
  double t14810;
  double t14811;
  double t14812;
  double t14814;
  double t14817;
  double t14818;
  double t14819;
  double t14820;
  double t14821;
  double t14822;
  double t14824;
  double t14825;
  double t14826;
  double t14827;
  double t14628;
  double t14629;
  double t14632;
  double t14636;
  double t14640;
  double t14641;
  double t14642;
  double t14645;
  double t14646;
  double t14647;
  double t14648;
  double t14649;
  double t14650;
  double t14651;
  double t14652;
  double t14654;
  double t14655;
  double t14656;
  double t14657;
  double t14658;
  double t14659;
  double t14989;
  double t14990;
  double t14991;
  double t14994;
  double t14995;
  double t14997;
  double t14998;
  double t14999;
  double t15001;
  double t15002;
  double t15003;
  double t14749;
  double t14750;
  double t14751;
  double t14752;
  double t14753;
  double t14761;
  double t14762;
  double t14763;
  double t14764;
  double t14765;
  double t14766;
  double t14767;
  double t14768;
  double t14769;
  double t14770;
  double t14771;
  double t14773;
  double t14774;
  double t14775;
  double t14952;
  double t14953;
  double t14959;
  double t14960;
  double t14964;
  double t14965;
  double t14966;
  double t14970;
  double t14971;
  double t14972;
  double t14973;
  double t14974;
  double t14975;
  double t14977;
  double t14978;
  double t14979;
  double t14980;
  double t14981;
  double t14982;
  double t14983;
  double t15025;
  double t15026;
  double t15027;
  double t15029;
  double t15030;
  double t15032;
  double t15033;
  double t15034;
  double t15036;
  double t15037;
  double t15038;
  double t14526;
  double t14527;
  double t14528;
  double t14533;
  double t14538;
  double t14543;
  double t14544;
  double t14545;
  double t14546;
  double t14547;
  double t14548;
  double t14549;
  double t14550;
  double t14551;
  double t14552;
  double t14553;
  double t14554;
  double t14555;
  double t14556;
  double t14557;
  double t14558;
  double t14559;
  double t14992;
  double t14993;
  double t14996;
  double t15000;
  double t15004;
  double t15005;
  double t15006;
  double t15007;
  double t15008;
  double t15009;
  double t15010;
  double t15011;
  double t15012;
  double t15013;
  double t15014;
  double t15015;
  double t15016;
  double t15017;
  double t15018;
  double t15019;
  double t15020;
  double t14722;
  double t14723;
  double t14724;
  double t14728;
  double t14729;
  double t14730;
  double t14731;
  double t14732;
  double t14734;
  double t14736;
  double t14737;
  double t14738;
  double t14741;
  double t14742;
  double t14743;
  double t14744;
  double t14745;
  double t14746;
  double t14747;
  double t14832;
  double t14833;
  double t14834;
  double t14839;
  double t14844;
  double t14847;
  double t14848;
  double t14849;
  double t14850;
  double t14851;
  double t14852;
  double t14853;
  double t14854;
  double t14855;
  double t14856;
  double t14857;
  double t14858;
  double t14859;
  double t14860;
  double t14861;
  double t14862;
  double t14863;
  double t15024;
  double t15028;
  double t15071;
  double t15073;
  double t15075;
  double t15108;
  double t15109;
  double t15110;
  double t15142;
  double t15148;
  double t15151;
  double t15152;
  double t15158;
  double t15163;
  double t15166;
  double t15167;
  double t15173;
  double t15174;
  double t15175;
  double t15176;
  double t15135;
  double t15136;
  double t15141;
  double t15157;
  double t15168;
  double t15177;
  double t15178;
  double t15179;
  double t15180;
  double t15181;
  double t15182;
  double t15183;
  double t15184;
  double t15185;
  double t15186;
  double t15192;
  double t15193;
  double t15194;
  double t15199;
  double t15200;
  double t15202;
  double t15203;
  double t15112;
  double t15113;
  double t15115;
  double t15118;
  double t15119;
  double t15121;
  double t15122;
  double t15125;
  double t15127;
  double t15128;
  double t15133;
  double t15241;
  double t15242;
  double t15247;
  double t15255;
  double t15257;
  double t15258;
  double t15239;
  double t15240;
  double t15246;
  double t15256;
  double t15260;
  double t15262;
  double t15263;
  double t15266;
  double t15267;
  double t15268;
  double t15269;
  double t15271;
  double t15274;
  double t15276;
  double t15279;
  double t15281;
  double t15282;
  double t15283;
  double t15284;
  double t15290;
  double t15291;
  double t15294;
  double t15295;
  double t15296;
  double t15297;
  double t15298;
  double t15300;
  double t15301;
  double t15302;
  double t15303;
  double t15304;
  double t15305;
  double t15306;
  double t15307;
  double t15308;
  double t15309;
  double t15313;
  double t15317;
  double t15318;
  double t15321;
  double t15327;
  double t15328;
  double t15329;
  double t15330;
  double t15332;
  double t15334;
  double t15335;
  double t15337;
  double t15339;
  double t15324;
  double t15325;
  double t15326;
  double t15331;
  double t15336;
  double t15340;
  double t15341;
  double t15342;
  double t15343;
  double t15348;
  double t15349;
  double t15354;
  double t15355;
  double t15356;
  double t15357;
  double t15358;
  double t15359;
  double t15360;
  double t15361;
  double t15362;
  double t15363;
  double t15364;
  double t15370;
  double t15371;
  double t15373;
  double t15374;
  double t15376;
  double t15377;
  double t15378;
  double t15433;
  double t15434;
  double t15435;
  double t15437;
  double t15438;
  double t15439;
  double t15440;
  double t15442;
  double t15443;
  double t15466;
  double t15468;
  double t15469;
  double t15473;
  double t15474;
  double t15476;
  double t15478;
  double t15479;
  double t15482;
  double t13852;
  double t13908;
  double t13918;
  double t13930;
  double t13940;
  double t13951;
  double t14057;
  double t14059;
  double t14060;
  double t14061;
  double t14062;
  double t14092;
  double t14111;
  double t14115;
  double t14118;
  double t14119;
  double t14120;
  double t14121;
  double t14122;
  double t14123;
  double t14124;
  double t15514;
  double t15368;
  double t15369;
  double t15372;
  double t15375;
  double t15379;
  double t15380;
  double t15381;
  double t15382;
  double t15383;
  double t15384;
  double t15385;
  double t15390;
  double t15394;
  double t15395;
  double t15396;
  double t15398;
  double t15399;
  double t15400;
  double t15401;
  double t15402;
  double t15403;
  double t15518;
  double t15520;
  double t15522;
  double t15580;
  double t15582;
  double t15583;
  double t15586;
  double t15587;
  double t15405;
  double t15406;
  double t15407;
  double t15408;
  double t15409;
  double t15410;
  double t15411;
  double t15414;
  double t15415;
  double t15416;
  double t15417;
  double t15420;
  double t15421;
  double t15422;
  double t15423;
  double t15424;
  double t15425;
  double t15426;
  double t15427;
  double t15552;
  double t15553;
  double t15554;
  double t15559;
  double t15561;
  double t15562;
  double t15563;
  double t15564;
  double t15565;
  double t15566;
  double t15567;
  double t15568;
  double t15570;
  double t15571;
  double t15572;
  double t15573;
  double t15574;
  double t15575;
  double t15576;
  double t14032;
  double t14225;
  double t14385;
  double t14429;
  double t14525;
  double t15429;
  double t15430;
  double t15432;
  double t15436;
  double t15441;
  double t15444;
  double t15445;
  double t15446;
  double t15447;
  double t15448;
  double t15449;
  double t15450;
  double t15451;
  double t15452;
  double t15453;
  double t15454;
  double t15455;
  double t15456;
  double t15457;
  double t15458;
  double t15459;
  double t15461;
  double t15699;
  double t15700;
  double t15701;
  double t15704;
  double t15707;
  double t15708;
  double t15710;
  double t15711;
  double t15578;
  double t15579;
  double t15584;
  double t15585;
  double t15588;
  double t15589;
  double t15590;
  double t15591;
  double t15592;
  double t15593;
  double t15594;
  double t15595;
  double t15596;
  double t15598;
  double t15599;
  double t15600;
  double t15601;
  double t15602;
  double t15603;
  double t15604;
  double t15641;
  double t15642;
  double t15643;
  double t15644;
  double t15645;
  double t15646;
  double t15647;
  double t15649;
  double t15650;
  double t15651;
  double t15652;
  double t15653;
  double t15654;
  double t15658;
  double t15661;
  double t15664;
  double t15665;
  double t15669;
  double t15670;
  t2634 = Cos(var1[15]);
  t2764 = -1.*t2634;
  t3139 = 1. + t2764;
  t3211 = Cos(var1[4]);
  t3484 = Cos(var1[17]);
  t3519 = -1.*t3484;
  t3531 = 1. + t3519;
  t3548 = -3.e-6*t3531;
  t3551 = Sin(var1[17]);
  t3215 = Cos(var1[5]);
  t3224 = Sin(var1[15]);
  t3227 = Sin(var1[4]);
  t3318 = Sin(var1[5]);
  t3588 = 3.e-6*t3551;
  t3631 = t3548 + t3588;
  t3909 = 9.e-13*var1[17];
  t3554 = -3.e-6*t3551;
  t3569 = t3548 + t3554;
  t3911 = -9.e-12*t3531;
  t3719 = 3.e-6*t3139*t3211*t3215;
  t3826 = -3.e-6*t3224*t3227;
  t3830 = -9.e-12*t3139;
  t3850 = 1. + t3830;
  t3904 = -1.*t3850*t3211*t3318;
  t3905 = t3719 + t3826 + t3904;
  t3922 = t2634*t3211*t3215;
  t3933 = t3224*t3227;
  t3934 = -3.e-6*t3139*t3211*t3318;
  t3940 = t3922 + t3933 + t3934;
  t4015 = -1.*t3211*t3215*t3224;
  t4018 = -1.000000000009*t3139;
  t4062 = 1. + t4018;
  t4063 = t4062*t3227;
  t4074 = -3.e-6*t3211*t3224*t3318;
  t4247 = t4015 + t4063 + t4074;
  t4249 = 3.e-6*t3531;
  t4259 = -1.000000000009*t3531;
  t4302 = 1. + t4259;
  t4254 = 9.e-12*t3531;
  t3913 = -1.*t3551;
  t4252 = t4249 + t3554;
  t4332 = t4249 + t3588;
  t4631 = 3.e-6*t3484;
  t4634 = t4631 + t3554;
  t4624 = -3.e-6*t3484;
  t4627 = t4624 + t3554;
  t4711 = -9.e-12*t3551;
  t4782 = t4631 + t3588;
  t4846 = t4624 + t3588;
  t4811 = 9.e-12*t3551;
  t4628 = 0.2*t4627;
  t4690 = 0.1*t4634;
  t4691 = -1.62e-17*t3551;
  t4703 = 3.e-7 + t4628 + t4690 + t4691;
  t4704 = t4703*t3905;
  t4707 = -9.e-7*t4634;
  t4732 = t3519 + t4711;
  t4733 = 0.1*t4732;
  t4737 = 0.2000000000018*t3551;
  t4740 = 9.e-13 + t4707 + t4733 + t4737;
  t4741 = t4740*t3940;
  t4744 = -9.e-7*t4627;
  t4745 = t3484 + t4711;
  t4770 = 0.2*t4745;
  t4776 = 0.1000000000009*t3551;
  t4780 = 9.e-13 + t4744 + t4770 + t4776;
  t4781 = t4780*t4247;
  t4806 = t4782*t3905;
  t4810 = -1.000000000009*t3551*t3940;
  t4812 = t3519 + t4811;
  t4815 = t4812*t4247;
  t4820 = t4806 + t4810 + t4815;
  t4821 = 0.2*t4820;
  t4822 = -1.8e-11*t3551*t3905;
  t4850 = t4846*t3940;
  t4851 = t4782*t4247;
  t4852 = t4822 + t4850 + t4851;
  t4855 = -0.099999*t4852;
  t4876 = t4846*t3905;
  t4877 = t3484 + t4811;
  t4878 = t4877*t3940;
  t4879 = -1.000000000009*t3551*t4247;
  t4881 = t4876 + t4878 + t4879;
  t4882 = -0.3*t4881;
  t4886 = t4704 + t4741 + t4781 + t4821 + t4855 + t4882;
  t4002 = 0.1000000000009*t3531;
  t4003 = -9.e-7*t3569;
  t4010 = t3911 + t3551;
  t4012 = 0.2*t4010;
  t4013 = t3909 + t4002 + t4003 + t4012;
  t3910 = 0.2000000000018*t3531;
  t3916 = t3911 + t3913;
  t3919 = 0.1*t3916;
  t3920 = -9.e-7*t3631;
  t3921 = t3909 + t3910 + t3919 + t3920;
  t3410 = 3.e-7*var1[17];
  t3540 = -1.62e-17*t3531;
  t3577 = 0.2*t3569;
  t3633 = 0.1*t3631;
  t3695 = t3410 + t3540 + t3577 + t3633;
  t4897 = -1.*t2634*t3211*t3215;
  t4900 = -1.000000000009*t3224*t3227;
  t4903 = -3.e-6*t2634*t3211*t3318;
  t4905 = t4897 + t4900 + t4903;
  t4932 = t2634*t3227;
  t4935 = t4015 + t4932 + t4074;
  t4466 = -1.8e-11*t3531;
  t4524 = 1. + t4466;
  t4939 = 3.e-6*t3211*t3215*t3224;
  t6184 = -3.e-6*t2634*t3227;
  t6185 = 9.e-12*t3211*t3224*t3318;
  t6516 = t4939 + t6184 + t6185;
  t4257 = t4254 + t3551;
  t4459 = t4254 + t3913;
  t4893 = 0.2000000000018*t3211*t3215*t3224;
  t4894 = -0.2000000000018*t2634*t3227;
  t4896 = 6.000000000054e-7*t3211*t3224*t3318;
  t4930 = t4013*t4905;
  t4936 = t3921*t4935;
  t6633 = t3695*t6516;
  t6634 = t4332*t4905;
  t6652 = t4252*t4935;
  t6666 = t4524*t6516;
  t6674 = t6634 + t6652 + t6666;
  t6675 = -0.099999*t6674;
  t6676 = t4302*t4905;
  t6678 = t4257*t4935;
  t6680 = t4252*t6516;
  t6681 = t6676 + t6678 + t6680;
  t6696 = -0.3*t6681;
  t6709 = t4459*t4905;
  t6711 = t4302*t4935;
  t6712 = t4332*t6516;
  t6713 = t6709 + t6711 + t6712;
  t6720 = 0.2*t6713;
  t6722 = t4893 + t4894 + t4896 + t4930 + t4936 + t6633 + t6675 + t6696 + t6720;
  t6738 = -1.*t3850*t3211*t3215;
  t6935 = t6738 + t3934;
  t6990 = -3.e-6*t3139*t3211*t3215;
  t6991 = -1.*t2634*t3211*t3318;
  t7031 = t6990 + t6991;
  t7033 = -3.e-6*t3211*t3215*t3224;
  t7047 = t3211*t3224*t3318;
  t7053 = t7033 + t7047;
  t6731 = 6.000000000054e-7*t3139*t3211*t3215;
  t6737 = -0.2000000000018*t3139*t3211*t3318;
  t6989 = t3695*t6935;
  t7032 = t3921*t7031;
  t7073 = t4013*t7053;
  t7074 = t4252*t6935;
  t7078 = t4257*t7031;
  t7079 = t4302*t7053;
  t7083 = t7074 + t7078 + t7079;
  t7084 = -0.3*t7083;
  t7085 = t4332*t6935;
  t7086 = t4302*t7031;
  t7088 = t4459*t7053;
  t7095 = t7085 + t7086 + t7088;
  t7096 = 0.2*t7095;
  t7097 = t4524*t6935;
  t7100 = t4252*t7031;
  t7101 = t4332*t7053;
  t7103 = t7097 + t7100 + t7101;
  t7104 = -0.099999*t7103;
  t7105 = t6731 + t6737 + t6989 + t7032 + t7073 + t7084 + t7096 + t7104;
  t7162 = -3.e-6*t3211*t3224;
  t7277 = -3.e-6*t3139*t3215*t3227;
  t7288 = t3850*t3227*t3318;
  t7292 = t7162 + t7277 + t7288;
  t7294 = t3211*t3224;
  t7295 = -1.*t2634*t3215*t3227;
  t7296 = 3.e-6*t3139*t3227*t3318;
  t7297 = t7294 + t7295 + t7296;
  t7299 = t4062*t3211;
  t7300 = t3215*t3224*t3227;
  t7301 = 3.e-6*t3224*t3227*t3318;
  t7304 = t7299 + t7300 + t7301;
  t7125 = -0.2000000000018*t3211*t3224;
  t7131 = -0.2000000000018*t3139*t3215*t3227;
  t7144 = -6.000000000054e-7*t3139*t3227*t3318;
  t7293 = t3695*t7292;
  t7298 = t3921*t7297;
  t7305 = t4013*t7304;
  t7306 = t4252*t7292;
  t7307 = t4257*t7297;
  t7342 = t4302*t7304;
  t7374 = t7306 + t7307 + t7342;
  t7375 = -0.3*t7374;
  t7376 = t4332*t7292;
  t7378 = t4302*t7297;
  t7380 = t4459*t7304;
  t7381 = t7376 + t7378 + t7380;
  t7384 = 0.2*t7381;
  t7385 = t4524*t7292;
  t7387 = t4252*t7297;
  t7389 = t4332*t7304;
  t7392 = t7385 + t7387 + t7389;
  t7393 = -0.099999*t7392;
  t7395 = t7125 + t7131 + t7144 + t7293 + t7298 + t7305 + t7375 + t7384 + t7393;
  t7492 = t3850*t3211*t3318;
  t7493 = t6990 + t7492;
  t7496 = 3.e-6*t3139*t3211*t3318;
  t7497 = t4897 + t7496;
  t7499 = t3211*t3215*t3224;
  t7503 = 3.e-6*t3211*t3224*t3318;
  t7508 = t7499 + t7503;
  t7801 = -3.e-6*t2634*t3211*t3215;
  t7802 = t2634*t3211*t3318;
  t7805 = t7801 + t7802;
  t7807 = 9.e-12*t3211*t3215*t3224;
  t7808 = t7807 + t4074;
  t8186 = t3850*t3215*t3227;
  t8187 = t8186 + t7296;
  t8190 = 3.e-6*t3139*t3215*t3227;
  t8191 = t2634*t3227*t3318;
  t8192 = t8190 + t8191;
  t8194 = 3.e-6*t3215*t3224*t3227;
  t8195 = -1.*t3224*t3227*t3318;
  t8196 = t8194 + t8195;
  t8404 = -9.e-12*t3484;
  t8420 = 9.e-12*t3484;
  t7672 = t4703*t6935;
  t7701 = t4740*t7031;
  t7702 = t4780*t7053;
  t7703 = t4782*t6935;
  t7707 = -1.000000000009*t3551*t7031;
  t7712 = t4812*t7053;
  t7716 = t7703 + t7707 + t7712;
  t7718 = 0.2*t7716;
  t7719 = -1.8e-11*t3551*t6935;
  t7720 = t4846*t7031;
  t7721 = t4782*t7053;
  t7722 = t7719 + t7720 + t7721;
  t7723 = -0.099999*t7722;
  t7724 = t4846*t6935;
  t7725 = t4877*t7031;
  t7726 = -1.000000000009*t3551*t7053;
  t7727 = t7724 + t7725 + t7726;
  t7728 = -0.3*t7727;
  t7733 = t7672 + t7701 + t7702 + t7718 + t7723 + t7728;
  t7464 = -0.2000000000018*t3139*t3211*t3215;
  t7470 = -6.000000000054e-7*t3139*t3211*t3318;
  t8782 = 3.e-6*t3224*t3227;
  t8783 = t6990 + t8782 + t7492;
  t8787 = -1.*t3224*t3227;
  t8788 = t4897 + t8787 + t7496;
  t8791 = -1.*t4062*t3227;
  t8792 = t7499 + t8791 + t7503;
  t8172 = -6.000000000054e-7*t3139*t3215*t3227;
  t8178 = 0.2000000000018*t3139*t3227*t3318;
  t8189 = t3695*t8187;
  t8193 = t3921*t8192;
  t8197 = t4013*t8196;
  t8198 = t4252*t8187;
  t8199 = t4257*t8192;
  t8200 = t4302*t8196;
  t8201 = t8198 + t8199 + t8200;
  t8202 = -0.3*t8201;
  t8204 = t4332*t8187;
  t8205 = t4302*t8192;
  t8206 = t4459*t8196;
  t8207 = t8204 + t8205 + t8206;
  t8248 = 0.2*t8207;
  t8299 = t4524*t8187;
  t8371 = t4252*t8192;
  t8372 = t4332*t8196;
  t8376 = t8299 + t8371 + t8372;
  t8382 = -0.099999*t8376;
  t8388 = t8172 + t8178 + t8189 + t8193 + t8197 + t8202 + t8248 + t8382;
  t8617 = t4703*t7292;
  t8618 = t4740*t7297;
  t8620 = t4780*t7304;
  t8623 = t4782*t7292;
  t8624 = -1.000000000009*t3551*t7297;
  t8626 = t4812*t7304;
  t8627 = t8623 + t8624 + t8626;
  t8628 = 0.2*t8627;
  t8629 = -1.8e-11*t3551*t7292;
  t8741 = t4846*t7297;
  t8743 = t4782*t7304;
  t8744 = t8629 + t8741 + t8743;
  t8746 = -0.099999*t8744;
  t8747 = t4846*t7292;
  t8753 = t4877*t7297;
  t8759 = -1.000000000009*t3551*t7304;
  t8762 = t8747 + t8753 + t8759;
  t8769 = -0.3*t8762;
  t8774 = t8617 + t8618 + t8620 + t8628 + t8746 + t8769;
  t12113 = -1.000000000009*t3211*t3224;
  t12116 = t2634*t3215*t3227;
  t12121 = 3.e-6*t2634*t3227*t3318;
  t12130 = t12113 + t12116 + t12121;
  t12136 = -3.e-6*t2634*t3211;
  t12137 = -3.e-6*t3215*t3224*t3227;
  t12145 = -9.e-12*t3224*t3227*t3318;
  t12148 = t12136 + t12137 + t12145;
  t12155 = t2634*t3211;
  t12157 = t12155 + t7300 + t7301;
  t8550 = t4780*t4905;
  t8553 = t4740*t4935;
  t8555 = t4703*t6516;
  t8556 = -1.000000000009*t3551*t4905;
  t8557 = t4877*t4935;
  t8560 = t4846*t6516;
  t8561 = t8556 + t8557 + t8560;
  t8584 = -0.3*t8561;
  t8585 = t4812*t4905;
  t8589 = -1.000000000009*t3551*t4935;
  t8594 = t4782*t6516;
  t8599 = t8585 + t8589 + t8594;
  t8600 = 0.2*t8599;
  t8601 = t4782*t4905;
  t8602 = t4846*t4935;
  t8603 = -1.8e-11*t3551*t6516;
  t8604 = t8601 + t8602 + t8603;
  t8606 = -0.099999*t8604;
  t8607 = t8550 + t8553 + t8555 + t8584 + t8600 + t8606;
  t8781 = 0.2000000000018*t3224*t3227;
  t12668 = t4897 + t8787 + t4903;
  t13039 = 3.e-6*t2634*t3211*t3215;
  t13040 = 9.e-12*t2634*t3211*t3318;
  t13042 = t13039 + t8782 + t13040;
  t13045 = -1.000000000009*t2634*t3227;
  t13133 = t7499 + t13045 + t7503;
  t7796 = 6.000000000054e-7*t3211*t3215*t3224;
  t7799 = -0.2000000000018*t3211*t3224*t3318;
  t7806 = t4013*t7805;
  t7809 = t3695*t7808;
  t7811 = t3921*t7053;
  t7812 = t4459*t7805;
  t7813 = t4332*t7808;
  t7817 = t7812 + t7813 + t7079;
  t7819 = 0.2*t7817;
  t7821 = t4332*t7805;
  t7849 = t4524*t7808;
  t7880 = t4252*t7053;
  t7884 = t7821 + t7849 + t7880;
  t7888 = -0.099999*t7884;
  t7911 = t4302*t7805;
  t7912 = t4252*t7808;
  t7913 = t4257*t7053;
  t8006 = t7911 + t7912 + t7913;
  t8078 = -0.3*t8006;
  t8118 = t7796 + t7799 + t7806 + t7809 + t7811 + t7819 + t7888 + t8078;
  t12081 = -0.2000000000018*t2634*t3211;
  t12108 = -0.2000000000018*t3215*t3224*t3227;
  t12112 = -6.000000000054e-7*t3224*t3227*t3318;
  t12135 = t4013*t12130;
  t12152 = t3695*t12148;
  t12167 = t3921*t12157;
  t12182 = t4459*t12130;
  t12189 = t4332*t12148;
  t12255 = t4302*t12157;
  t12276 = t12182 + t12189 + t12255;
  t12312 = 0.2*t12276;
  t12319 = t4332*t12130;
  t12358 = t4524*t12148;
  t12374 = t4252*t12157;
  t12379 = t12319 + t12358 + t12374;
  t12380 = -0.099999*t12379;
  t12385 = t4302*t12130;
  t12386 = t4252*t12148;
  t12388 = t4257*t12157;
  t12393 = t12385 + t12386 + t12388;
  t12398 = -0.3*t12393;
  t12399 = t12081 + t12108 + t12112 + t12135 + t12152 + t12167 + t12312 + t12380 + t12398;
  t13841 = Sin(var1[3]);
  t13898 = Cos(var1[3]);
  t13887 = t3215*t13841*t3227;
  t13903 = t13898*t3318;
  t13905 = t13887 + t13903;
  t13910 = t13898*t3215;
  t13913 = -1.*t13841*t3227*t3318;
  t13915 = t13910 + t13913;
  t13959 = 3.e-6*t3139*t3211*t3215*t13841;
  t13960 = -3.e-6*t3224*t13841*t3227;
  t13963 = -1.*t3850*t3211*t13841*t3318;
  t13964 = t13959 + t13960 + t13963;
  t13968 = t2634*t3211*t3215*t13841;
  t13976 = t3224*t13841*t3227;
  t13979 = -3.e-6*t3139*t3211*t13841*t3318;
  t13980 = t13968 + t13976 + t13979;
  t13984 = -1.*t3211*t3215*t3224*t13841;
  t13999 = t4062*t13841*t3227;
  t14000 = -3.e-6*t3211*t3224*t13841*t3318;
  t14001 = t13984 + t13999 + t14000;
  t13952 = 0.2000000000018*t3139*t3211*t3215*t13841;
  t13955 = -0.2000000000018*t3224*t13841*t3227;
  t13956 = 6.000000000054e-7*t3139*t3211*t13841*t3318;
  t13967 = t3695*t13964;
  t13983 = t3921*t13980;
  t14002 = t4013*t14001;
  t14006 = t4252*t13964;
  t14010 = t4257*t13980;
  t14014 = t4302*t14001;
  t14015 = t14006 + t14010 + t14014;
  t14016 = -0.3*t14015;
  t14017 = t4332*t13964;
  t14018 = t4302*t13980;
  t14019 = t4459*t14001;
  t14021 = t14017 + t14018 + t14019;
  t14022 = 0.2*t14021;
  t14023 = t4524*t13964;
  t14025 = t4252*t13980;
  t14026 = t4332*t14001;
  t14027 = t14023 + t14025 + t14026;
  t14029 = -0.099999*t14027;
  t14030 = t13952 + t13955 + t13956 + t13967 + t13983 + t14002 + t14016 + t14022 + t14029;
  t13920 = 3.e-6*t3211*t3224*t13841;
  t13923 = 3.e-6*t3139*t13905;
  t13925 = t3850*t13915;
  t13928 = t13920 + t13923 + t13925;
  t13933 = -1.*t3211*t3224*t13841;
  t13937 = t2634*t13905;
  t13938 = 3.e-6*t3139*t13915;
  t13939 = t13933 + t13937 + t13938;
  t13943 = -1.*t4062*t3211*t13841;
  t13944 = -1.*t3224*t13905;
  t13948 = 3.e-6*t3224*t13915;
  t13949 = t13943 + t13944 + t13948;
  t14126 = t13898*t3215*t3227;
  t14127 = -1.*t13841*t3318;
  t14128 = t14126 + t14127;
  t14130 = -1.*t3215*t13841;
  t14131 = -1.*t13898*t3227*t3318;
  t14132 = t14130 + t14131;
  t14134 = 3.e-6*t13898*t3211*t3224;
  t14135 = 3.e-6*t3139*t14128;
  t14136 = t3850*t14132;
  t14149 = t14134 + t14135 + t14136;
  t14153 = -1.*t13898*t3211*t3224;
  t14165 = t2634*t14128;
  t14180 = 3.e-6*t3139*t14132;
  t14185 = t14153 + t14165 + t14180;
  t14190 = -1.*t4062*t13898*t3211;
  t14192 = -1.*t3224*t14128;
  t14197 = 3.e-6*t3224*t14132;
  t14198 = t14190 + t14192 + t14197;
  t14125 = 0.2000000000018*t13898*t3211*t3224;
  t14129 = 0.2000000000018*t3139*t14128;
  t14133 = -6.000000000054e-7*t3139*t14132;
  t14150 = t3695*t14149;
  t14186 = t3921*t14185;
  t14199 = t4013*t14198;
  t14200 = t4252*t14149;
  t14201 = t4257*t14185;
  t14202 = t4302*t14198;
  t14203 = t14200 + t14201 + t14202;
  t14204 = -0.3*t14203;
  t14205 = t4332*t14149;
  t14206 = t4302*t14185;
  t14207 = t4459*t14198;
  t14208 = t14205 + t14206 + t14207;
  t14209 = 0.2*t14208;
  t14210 = t4524*t14149;
  t14211 = t4252*t14185;
  t14212 = t4332*t14198;
  t14216 = t14210 + t14211 + t14212;
  t14218 = -0.099999*t14216;
  t14223 = t14125 + t14129 + t14133 + t14150 + t14186 + t14199 + t14204 + t14209 + t14218;
  t14226 = -1.*t3215*t13841*t3227;
  t14228 = -1.*t13898*t3318;
  t14229 = t14226 + t14228;
  t14232 = t3850*t14229;
  t14233 = t14232 + t13938;
  t14235 = 3.e-6*t3139*t14229;
  t14236 = t2634*t13915;
  t14237 = t14235 + t14236;
  t14239 = 3.e-6*t3224*t14229;
  t14240 = -1.*t3224*t13915;
  t14241 = t14239 + t14240;
  t14230 = -6.000000000054e-7*t3139*t14229;
  t14231 = 0.2000000000018*t3139*t13915;
  t14234 = t3695*t14233;
  t14238 = t3921*t14237;
  t14242 = t4013*t14241;
  t14344 = t4252*t14233;
  t14345 = t4257*t14237;
  t14346 = t4302*t14241;
  t14347 = t14344 + t14345 + t14346;
  t14348 = -0.3*t14347;
  t14351 = t4332*t14233;
  t14352 = t4302*t14237;
  t14353 = t4459*t14241;
  t14354 = t14351 + t14352 + t14353;
  t14355 = 0.2*t14354;
  t14357 = t4524*t14233;
  t14358 = t4252*t14237;
  t14359 = t4332*t14241;
  t14361 = t14357 + t14358 + t14359;
  t14377 = -0.099999*t14361;
  t14383 = t14230 + t14231 + t14234 + t14238 + t14242 + t14348 + t14355 + t14377;
  t14388 = t4703*t13928;
  t14389 = t4740*t13939;
  t14390 = t4780*t13949;
  t14392 = t4782*t13928;
  t14393 = -1.000000000009*t3551*t13939;
  t14394 = t4812*t13949;
  t14396 = t14392 + t14393 + t14394;
  t14397 = 0.2*t14396;
  t14398 = -1.8e-11*t3551*t13928;
  t14399 = t4846*t13939;
  t14419 = t4782*t13949;
  t14420 = t14398 + t14399 + t14419;
  t14421 = -0.099999*t14420;
  t14422 = t4846*t13928;
  t14423 = t4877*t13939;
  t14424 = -1.000000000009*t3551*t13949;
  t14425 = t14422 + t14423 + t14424;
  t14426 = -0.3*t14425;
  t14427 = t14388 + t14389 + t14390 + t14397 + t14421 + t14426;
  t14433 = 1.000000000009*t3211*t3224*t13841;
  t14434 = -1.*t2634*t13905;
  t14435 = 3.e-6*t2634*t13915;
  t14444 = t14433 + t14434 + t14435;
  t14470 = 3.e-6*t2634*t3211*t13841;
  t14473 = 3.e-6*t3224*t13905;
  t14485 = -9.e-12*t3224*t13915;
  t14486 = t14470 + t14473 + t14485;
  t14492 = -1.*t2634*t3211*t13841;
  t14493 = t14492 + t13944 + t13948;
  t14430 = 0.2000000000018*t2634*t3211*t13841;
  t14431 = 0.2000000000018*t3224*t13905;
  t14432 = -6.000000000054e-7*t3224*t13915;
  t14459 = t4013*t14444;
  t14491 = t3695*t14486;
  t14494 = t3921*t14493;
  t14495 = t4459*t14444;
  t14496 = t4332*t14486;
  t14497 = t4302*t14493;
  t14498 = t14495 + t14496 + t14497;
  t14499 = 0.2*t14498;
  t14500 = t4332*t14444;
  t14501 = t4524*t14486;
  t14503 = t4252*t14493;
  t14504 = t14500 + t14501 + t14503;
  t14505 = -0.099999*t14504;
  t14506 = t4302*t14444;
  t14507 = t4252*t14486;
  t14511 = t4257*t14493;
  t14515 = t14506 + t14507 + t14511;
  t14522 = -0.3*t14515;
  t14523 = t14430 + t14431 + t14432 + t14459 + t14491 + t14494 + t14499 + t14505 + t14522;
  t14529 = 3.e-6*t3139*t13898*t3211*t3215;
  t14530 = -3.e-6*t13898*t3224*t3227;
  t14531 = -1.*t3850*t13898*t3211*t3318;
  t14532 = t14529 + t14530 + t14531;
  t14534 = t2634*t13898*t3211*t3215;
  t14535 = t13898*t3224*t3227;
  t14536 = -3.e-6*t3139*t13898*t3211*t3318;
  t14537 = t14534 + t14535 + t14536;
  t14539 = -1.*t13898*t3211*t3215*t3224;
  t14540 = t4062*t13898*t3227;
  t14541 = -3.e-6*t13898*t3211*t3224*t3318;
  t14542 = t14539 + t14540 + t14541;
  t14586 = -1.*t2634*t3211*t3215*t13841;
  t14593 = -1.000000000009*t3224*t13841*t3227;
  t14594 = -3.e-6*t2634*t3211*t13841*t3318;
  t14595 = t14586 + t14593 + t14594;
  t14597 = t2634*t13841*t3227;
  t14598 = t13984 + t14597 + t14000;
  t14600 = 3.e-6*t3211*t3215*t3224*t13841;
  t14601 = -3.e-6*t2634*t13841*t3227;
  t14602 = 9.e-12*t3211*t3224*t13841*t3318;
  t14603 = t14600 + t14601 + t14602;
  t14630 = -1.*t3850*t3211*t3215*t13841;
  t14631 = t14630 + t13979;
  t14633 = -3.e-6*t3139*t3211*t3215*t13841;
  t14634 = -1.*t2634*t3211*t13841*t3318;
  t14635 = t14633 + t14634;
  t14637 = -3.e-6*t3211*t3215*t3224*t13841;
  t14638 = t3211*t3224*t13841*t3318;
  t14639 = t14637 + t14638;
  t14664 = -3.e-6*t3211*t3224*t13841;
  t14665 = -3.e-6*t3139*t3215*t13841*t3227;
  t14666 = t3850*t13841*t3227*t3318;
  t14667 = t14664 + t14665 + t14666;
  t14669 = t3211*t3224*t13841;
  t14670 = -1.*t2634*t3215*t13841*t3227;
  t14671 = 3.e-6*t3139*t13841*t3227*t3318;
  t14672 = t14669 + t14670 + t14671;
  t14674 = t4062*t3211*t13841;
  t14675 = t3215*t3224*t13841*t3227;
  t14676 = 3.e-6*t3224*t13841*t3227*t3318;
  t14677 = t14674 + t14675 + t14676;
  t14561 = t4703*t13964;
  t14562 = t4740*t13980;
  t14563 = t4780*t14001;
  t14564 = t4782*t13964;
  t14565 = -1.000000000009*t3551*t13980;
  t14566 = t4812*t14001;
  t14567 = t14564 + t14565 + t14566;
  t14568 = 0.2*t14567;
  t14569 = -1.8e-11*t3551*t13964;
  t14570 = t4846*t13980;
  t14571 = t4782*t14001;
  t14572 = t14569 + t14570 + t14571;
  t14573 = -0.099999*t14572;
  t14574 = t4846*t13964;
  t14575 = t4877*t13980;
  t14576 = -1.000000000009*t3551*t14001;
  t14577 = t14574 + t14575 + t14576;
  t14578 = -0.3*t14577;
  t14579 = t14561 + t14562 + t14563 + t14568 + t14573 + t14578;
  t8398 = -1.62e-17*t3484;
  t8399 = 0.1*t4627;
  t8400 = 0.2*t4846;
  t8401 = t8398 + t8399 + t8400;
  t8403 = 0.2000000000018*t3484;
  t8405 = t8404 + t3551;
  t8409 = 0.1*t8405;
  t8410 = t8403 + t4744 + t8409;
  t8413 = 0.1000000000009*t3484;
  t8414 = t8404 + t3913;
  t8415 = 0.2*t8414;
  t8416 = -9.e-7*t4846;
  t8417 = t8413 + t8415 + t8416;
  t8467 = t8420 + t3913;
  t8541 = t8420 + t3551;
  t14581 = 0.2000000000018*t3211*t3215*t3224*t13841;
  t14582 = -0.2000000000018*t2634*t13841*t3227;
  t14585 = 6.000000000054e-7*t3211*t3224*t13841*t3318;
  t14596 = t4013*t14595;
  t14599 = t3921*t14598;
  t14604 = t3695*t14603;
  t14605 = t4332*t14595;
  t14606 = t4252*t14598;
  t14607 = t4524*t14603;
  t14608 = t14605 + t14606 + t14607;
  t14609 = -0.099999*t14608;
  t14610 = t4302*t14595;
  t14611 = t4257*t14598;
  t14617 = t4252*t14603;
  t14618 = t14610 + t14611 + t14617;
  t14619 = -0.3*t14618;
  t14620 = t4459*t14595;
  t14621 = t4302*t14598;
  t14623 = t4332*t14603;
  t14624 = t14620 + t14621 + t14623;
  t14625 = 0.2*t14624;
  t14626 = t14581 + t14582 + t14585 + t14596 + t14599 + t14604 + t14609 + t14619 + t14625;
  t14835 = 1.000000000009*t13898*t3211*t3224;
  t14836 = -1.*t2634*t14128;
  t14837 = 3.e-6*t2634*t14132;
  t14838 = t14835 + t14836 + t14837;
  t14840 = 3.e-6*t2634*t13898*t3211;
  t14841 = 3.e-6*t3224*t14128;
  t14842 = -9.e-12*t3224*t14132;
  t14843 = t14840 + t14841 + t14842;
  t14845 = -1.*t2634*t13898*t3211;
  t14846 = t14845 + t14192 + t14197;
  t14661 = -0.2000000000018*t3211*t3224*t13841;
  t14877 = 3.e-6*t2634*t13905;
  t14879 = -9.e-12*t2634*t13915;
  t14880 = t14664 + t14877 + t14879;
  t14884 = t14669 + t14434 + t14435;
  t14887 = 1.000000000009*t2634*t3211*t13841;
  t14888 = t3224*t13905;
  t14900 = -3.e-6*t3224*t13915;
  t14907 = t14887 + t14888 + t14900;
  t14954 = 3.e-6*t2634*t14229;
  t14957 = -1.*t2634*t13915;
  t14958 = t14954 + t14957;
  t14961 = -9.e-12*t3224*t14229;
  t14962 = t14961 + t13948;
  t14803 = t4780*t14444;
  t14805 = t4703*t14486;
  t14806 = t4740*t14493;
  t14807 = -1.000000000009*t3551*t14444;
  t14808 = t4846*t14486;
  t14810 = t4877*t14493;
  t14811 = t14807 + t14808 + t14810;
  t14812 = -0.3*t14811;
  t14814 = t4782*t14444;
  t14817 = -1.8e-11*t3551*t14486;
  t14818 = t4846*t14493;
  t14819 = t14814 + t14817 + t14818;
  t14820 = -0.099999*t14819;
  t14821 = t4812*t14444;
  t14822 = t4782*t14486;
  t14824 = -1.000000000009*t3551*t14493;
  t14825 = t14821 + t14822 + t14824;
  t14826 = 0.2*t14825;
  t14827 = t14803 + t14805 + t14806 + t14812 + t14820 + t14826;
  t14628 = 6.000000000054e-7*t3139*t3211*t3215*t13841;
  t14629 = -0.2000000000018*t3139*t3211*t13841*t3318;
  t14632 = t3695*t14631;
  t14636 = t3921*t14635;
  t14640 = t4013*t14639;
  t14641 = t4252*t14631;
  t14642 = t4257*t14635;
  t14645 = t4302*t14639;
  t14646 = t14641 + t14642 + t14645;
  t14647 = -0.3*t14646;
  t14648 = t4332*t14631;
  t14649 = t4302*t14635;
  t14650 = t4459*t14639;
  t14651 = t14648 + t14649 + t14650;
  t14652 = 0.2*t14651;
  t14654 = t4524*t14631;
  t14655 = t4252*t14635;
  t14656 = t4332*t14639;
  t14657 = t14654 + t14655 + t14656;
  t14658 = -0.099999*t14657;
  t14659 = t14628 + t14629 + t14632 + t14636 + t14640 + t14647 + t14652 + t14658;
  t14989 = -1.*t13898*t3215*t3227;
  t14990 = t13841*t3318;
  t14991 = t14989 + t14990;
  t14994 = t3850*t14991;
  t14995 = t14994 + t14180;
  t14997 = 3.e-6*t3139*t14991;
  t14998 = t2634*t14132;
  t14999 = t14997 + t14998;
  t15001 = 3.e-6*t3224*t14991;
  t15002 = -1.*t3224*t14132;
  t15003 = t15001 + t15002;
  t14749 = t4703*t14233;
  t14750 = t4740*t14237;
  t14751 = t4780*t14241;
  t14752 = t4782*t14233;
  t14753 = -1.000000000009*t3551*t14237;
  t14761 = t4812*t14241;
  t14762 = t14752 + t14753 + t14761;
  t14763 = 0.2*t14762;
  t14764 = -1.8e-11*t3551*t14233;
  t14765 = t4846*t14237;
  t14766 = t4782*t14241;
  t14767 = t14764 + t14765 + t14766;
  t14768 = -0.099999*t14767;
  t14769 = t4846*t14233;
  t14770 = t4877*t14237;
  t14771 = -1.000000000009*t3551*t14241;
  t14773 = t14769 + t14770 + t14771;
  t14774 = -0.3*t14773;
  t14775 = t14749 + t14750 + t14751 + t14763 + t14768 + t14774;
  t14952 = -6.000000000054e-7*t3224*t14229;
  t14953 = 0.2000000000018*t3224*t13915;
  t14959 = t4013*t14958;
  t14960 = t3921*t14241;
  t14964 = t3695*t14962;
  t14965 = t4332*t14958;
  t14966 = t4252*t14241;
  t14970 = t4524*t14962;
  t14971 = t14965 + t14966 + t14970;
  t14972 = -0.099999*t14971;
  t14973 = t4302*t14958;
  t14974 = t4257*t14241;
  t14975 = t4252*t14962;
  t14977 = t14973 + t14974 + t14975;
  t14978 = -0.3*t14977;
  t14979 = t4459*t14958;
  t14980 = t4332*t14962;
  t14981 = t14979 + t14346 + t14980;
  t14982 = 0.2*t14981;
  t14983 = t14952 + t14953 + t14959 + t14960 + t14964 + t14972 + t14978 + t14982;
  t15025 = -1.*t13898*t3215;
  t15026 = t13841*t3227*t3318;
  t15027 = t15025 + t15026;
  t15029 = t3850*t15027;
  t15030 = t14235 + t15029;
  t15032 = t2634*t14229;
  t15033 = 3.e-6*t3139*t15027;
  t15034 = t15032 + t15033;
  t15036 = -1.*t3224*t14229;
  t15037 = 3.e-6*t3224*t15027;
  t15038 = t15036 + t15037;
  t14526 = 0.2000000000018*t3139*t13898*t3211*t3215;
  t14527 = -0.2000000000018*t13898*t3224*t3227;
  t14528 = 6.000000000054e-7*t3139*t13898*t3211*t3318;
  t14533 = t3695*t14532;
  t14538 = t3921*t14537;
  t14543 = t4013*t14542;
  t14544 = t4252*t14532;
  t14545 = t4257*t14537;
  t14546 = t4302*t14542;
  t14547 = t14544 + t14545 + t14546;
  t14548 = -0.3*t14547;
  t14549 = t4332*t14532;
  t14550 = t4302*t14537;
  t14551 = t4459*t14542;
  t14552 = t14549 + t14550 + t14551;
  t14553 = 0.2*t14552;
  t14554 = t4524*t14532;
  t14555 = t4252*t14537;
  t14556 = t4332*t14542;
  t14557 = t14554 + t14555 + t14556;
  t14558 = -0.099999*t14557;
  t14559 = t14526 + t14527 + t14528 + t14533 + t14538 + t14543 + t14548 + t14553 + t14558;
  t14992 = -6.000000000054e-7*t3139*t14991;
  t14993 = 0.2000000000018*t3139*t14132;
  t14996 = t3695*t14995;
  t15000 = t3921*t14999;
  t15004 = t4013*t15003;
  t15005 = t4252*t14995;
  t15006 = t4257*t14999;
  t15007 = t4302*t15003;
  t15008 = t15005 + t15006 + t15007;
  t15009 = -0.3*t15008;
  t15010 = t4332*t14995;
  t15011 = t4302*t14999;
  t15012 = t4459*t15003;
  t15013 = t15010 + t15011 + t15012;
  t15014 = 0.2*t15013;
  t15015 = t4524*t14995;
  t15016 = t4252*t14999;
  t15017 = t4332*t15003;
  t15018 = t15015 + t15016 + t15017;
  t15019 = -0.099999*t15018;
  t15020 = t14992 + t14993 + t14996 + t15000 + t15004 + t15009 + t15014 + t15019;
  t14722 = t4703*t14149;
  t14723 = t4740*t14185;
  t14724 = t4780*t14198;
  t14728 = t4782*t14149;
  t14729 = -1.000000000009*t3551*t14185;
  t14730 = t4812*t14198;
  t14731 = t14728 + t14729 + t14730;
  t14732 = 0.2*t14731;
  t14734 = -1.8e-11*t3551*t14149;
  t14736 = t4846*t14185;
  t14737 = t4782*t14198;
  t14738 = t14734 + t14736 + t14737;
  t14741 = -0.099999*t14738;
  t14742 = t4846*t14149;
  t14743 = t4877*t14185;
  t14744 = -1.000000000009*t3551*t14198;
  t14745 = t14742 + t14743 + t14744;
  t14746 = -0.3*t14745;
  t14747 = t14722 + t14723 + t14724 + t14732 + t14741 + t14746;
  t14832 = 0.2000000000018*t2634*t13898*t3211;
  t14833 = 0.2000000000018*t3224*t14128;
  t14834 = -6.000000000054e-7*t3224*t14132;
  t14839 = t4013*t14838;
  t14844 = t3695*t14843;
  t14847 = t3921*t14846;
  t14848 = t4459*t14838;
  t14849 = t4332*t14843;
  t14850 = t4302*t14846;
  t14851 = t14848 + t14849 + t14850;
  t14852 = 0.2*t14851;
  t14853 = t4332*t14838;
  t14854 = t4524*t14843;
  t14855 = t4252*t14846;
  t14856 = t14853 + t14854 + t14855;
  t14857 = -0.099999*t14856;
  t14858 = t4302*t14838;
  t14859 = t4252*t14843;
  t14860 = t4257*t14846;
  t14861 = t14858 + t14859 + t14860;
  t14862 = -0.3*t14861;
  t14863 = t14832 + t14833 + t14834 + t14839 + t14844 + t14847 + t14852 + t14857 + t14862;
  t15024 = 0.2000000000018*t3139*t14229;
  t15028 = -6.000000000054e-7*t3139*t15027;
  t15071 = t14664 + t14235 + t15029;
  t15073 = t14669 + t15032 + t15033;
  t15075 = t14674 + t15036 + t15037;
  t15108 = t3215*t13841;
  t15109 = t13898*t3227*t3318;
  t15110 = t15108 + t15109;
  t15142 = -3.e-6*t3139*t13898*t3211*t3215;
  t15148 = 3.e-6*t13898*t3224*t3227;
  t15151 = t3850*t13898*t3211*t3318;
  t15152 = t15142 + t15148 + t15151;
  t15158 = -1.*t2634*t13898*t3211*t3215;
  t15163 = -1.*t13898*t3224*t3227;
  t15166 = 3.e-6*t3139*t13898*t3211*t3318;
  t15167 = t15158 + t15163 + t15166;
  t15173 = t13898*t3211*t3215*t3224;
  t15174 = -1.*t4062*t13898*t3227;
  t15175 = 3.e-6*t13898*t3211*t3224*t3318;
  t15176 = t15173 + t15174 + t15175;
  t15135 = -0.2000000000018*t3139*t13898*t3211*t3215;
  t15136 = 0.2000000000018*t13898*t3224*t3227;
  t15141 = -6.000000000054e-7*t3139*t13898*t3211*t3318;
  t15157 = t3695*t15152;
  t15168 = t3921*t15167;
  t15177 = t4013*t15176;
  t15178 = t4252*t15152;
  t15179 = t4257*t15167;
  t15180 = t4302*t15176;
  t15181 = t15178 + t15179 + t15180;
  t15182 = -0.3*t15181;
  t15183 = t4332*t15152;
  t15184 = t4302*t15167;
  t15185 = t4459*t15176;
  t15186 = t15183 + t15184 + t15185;
  t15192 = 0.2*t15186;
  t15193 = t4524*t15152;
  t15194 = t4252*t15167;
  t15199 = t4332*t15176;
  t15200 = t15193 + t15194 + t15199;
  t15202 = -0.099999*t15200;
  t15203 = t15135 + t15136 + t15141 + t15157 + t15168 + t15177 + t15182 + t15192 + t15202;
  t15112 = -3.e-6*t13898*t3211*t3224;
  t15113 = t3850*t15110;
  t15115 = t15112 + t14997 + t15113;
  t15118 = t13898*t3211*t3224;
  t15119 = t2634*t14991;
  t15121 = 3.e-6*t3139*t15110;
  t15122 = t15118 + t15119 + t15121;
  t15125 = t4062*t13898*t3211;
  t15127 = -1.*t3224*t14991;
  t15128 = 3.e-6*t3224*t15110;
  t15133 = t15125 + t15127 + t15128;
  t15241 = t3850*t14128;
  t15242 = t15241 + t15121;
  t15247 = t2634*t15110;
  t15255 = t14135 + t15247;
  t15257 = -1.*t3224*t15110;
  t15258 = t14841 + t15257;
  t15239 = -6.000000000054e-7*t3139*t14128;
  t15240 = 0.2000000000018*t3139*t15110;
  t15246 = t3695*t15242;
  t15256 = t3921*t15255;
  t15260 = t4013*t15258;
  t15262 = t4252*t15242;
  t15263 = t4257*t15255;
  t15266 = t4302*t15258;
  t15267 = t15262 + t15263 + t15266;
  t15268 = -0.3*t15267;
  t15269 = t4332*t15242;
  t15271 = t4302*t15255;
  t15274 = t4459*t15258;
  t15276 = t15269 + t15271 + t15274;
  t15279 = 0.2*t15276;
  t15281 = t4524*t15242;
  t15282 = t4252*t15255;
  t15283 = t4332*t15258;
  t15284 = t15281 + t15282 + t15283;
  t15290 = -0.099999*t15284;
  t15291 = t15239 + t15240 + t15246 + t15256 + t15260 + t15268 + t15279 + t15290;
  t15294 = t4703*t15115;
  t15295 = t4740*t15122;
  t15296 = t4780*t15133;
  t15297 = t4782*t15115;
  t15298 = -1.000000000009*t3551*t15122;
  t15300 = t4812*t15133;
  t15301 = t15297 + t15298 + t15300;
  t15302 = 0.2*t15301;
  t15303 = -1.8e-11*t3551*t15115;
  t15304 = t4846*t15122;
  t15305 = t4782*t15133;
  t15306 = t15303 + t15304 + t15305;
  t15307 = -0.099999*t15306;
  t15308 = t4846*t15115;
  t15309 = t4877*t15122;
  t15313 = -1.000000000009*t3551*t15133;
  t15317 = t15308 + t15309 + t15313;
  t15318 = -0.3*t15317;
  t15321 = t15294 + t15295 + t15296 + t15302 + t15307 + t15318;
  t15327 = -1.000000000009*t13898*t3211*t3224;
  t15328 = -1.*t2634*t14991;
  t15329 = 3.e-6*t2634*t15110;
  t15330 = t15327 + t15328 + t15329;
  t15332 = -3.e-6*t2634*t13898*t3211;
  t15334 = -9.e-12*t3224*t15110;
  t15335 = t15332 + t15001 + t15334;
  t15337 = t2634*t13898*t3211;
  t15339 = t15337 + t15127 + t15128;
  t15324 = -0.2000000000018*t2634*t13898*t3211;
  t15325 = 0.2000000000018*t3224*t14991;
  t15326 = -6.000000000054e-7*t3224*t15110;
  t15331 = t4013*t15330;
  t15336 = t3695*t15335;
  t15340 = t3921*t15339;
  t15341 = t4459*t15330;
  t15342 = t4332*t15335;
  t15343 = t4302*t15339;
  t15348 = t15341 + t15342 + t15343;
  t15349 = 0.2*t15348;
  t15354 = t4332*t15330;
  t15355 = t4524*t15335;
  t15356 = t4252*t15339;
  t15357 = t15354 + t15355 + t15356;
  t15358 = -0.099999*t15357;
  t15359 = t4302*t15330;
  t15360 = t4252*t15335;
  t15361 = t4257*t15339;
  t15362 = t15359 + t15360 + t15361;
  t15363 = -0.3*t15362;
  t15364 = t15324 + t15325 + t15326 + t15331 + t15336 + t15340 + t15349 + t15358 + t15363;
  t15370 = t3850*t13898*t3211*t3215;
  t15371 = t15370 + t15166;
  t15373 = t2634*t13898*t3211*t3318;
  t15374 = t14529 + t15373;
  t15376 = 3.e-6*t13898*t3211*t3215*t3224;
  t15377 = -1.*t13898*t3211*t3224*t3318;
  t15378 = t15376 + t15377;
  t15433 = 1.000000000009*t13898*t3224*t3227;
  t15434 = 3.e-6*t2634*t13898*t3211*t3318;
  t15435 = t14534 + t15433 + t15434;
  t15437 = -3.e-6*t13898*t3211*t3215*t3224;
  t15438 = 3.e-6*t2634*t13898*t3227;
  t15439 = -9.e-12*t13898*t3211*t3224*t3318;
  t15440 = t15437 + t15438 + t15439;
  t15442 = -1.*t2634*t13898*t3227;
  t15443 = t15173 + t15442 + t15175;
  t15466 = 3.e-6*t3139*t13898*t3215*t3227;
  t15468 = -1.*t3850*t13898*t3227*t3318;
  t15469 = t14134 + t15466 + t15468;
  t15473 = t2634*t13898*t3215*t3227;
  t15474 = -3.e-6*t3139*t13898*t3227*t3318;
  t15476 = t14153 + t15473 + t15474;
  t15478 = -1.*t13898*t3215*t3224*t3227;
  t15479 = -3.e-6*t13898*t3224*t3227*t3318;
  t15482 = t14190 + t15478 + t15479;
  t13852 = 0.2000000000018*t3211*t3224*t13841;
  t13908 = 0.2000000000018*t3139*t13905;
  t13918 = -6.000000000054e-7*t3139*t13915;
  t13930 = t3695*t13928;
  t13940 = t3921*t13939;
  t13951 = t4013*t13949;
  t14057 = t4252*t13928;
  t14059 = t4257*t13939;
  t14060 = t4302*t13949;
  t14061 = t14057 + t14059 + t14060;
  t14062 = -0.3*t14061;
  t14092 = t4332*t13928;
  t14111 = t4302*t13939;
  t14115 = t4459*t13949;
  t14118 = t14092 + t14111 + t14115;
  t14119 = 0.2*t14118;
  t14120 = t4524*t13928;
  t14121 = t4252*t13939;
  t14122 = t4332*t13949;
  t14123 = t14120 + t14121 + t14122;
  t14124 = -0.099999*t14123;
  t15514 = t13852 + t13908 + t13918 + t13930 + t13940 + t13951 + t14062 + t14119 + t14124;
  t15368 = -6.000000000054e-7*t3139*t13898*t3211*t3215;
  t15369 = 0.2000000000018*t3139*t13898*t3211*t3318;
  t15372 = t3695*t15371;
  t15375 = t3921*t15374;
  t15379 = t4013*t15378;
  t15380 = t4252*t15371;
  t15381 = t4257*t15374;
  t15382 = t4302*t15378;
  t15383 = t15380 + t15381 + t15382;
  t15384 = -0.3*t15383;
  t15385 = t4332*t15371;
  t15390 = t4302*t15374;
  t15394 = t4459*t15378;
  t15395 = t15385 + t15390 + t15394;
  t15396 = 0.2*t15395;
  t15398 = t4524*t15371;
  t15399 = t4252*t15374;
  t15400 = t4332*t15378;
  t15401 = t15398 + t15399 + t15400;
  t15402 = -0.099999*t15401;
  t15403 = t15368 + t15369 + t15372 + t15375 + t15379 + t15384 + t15396 + t15402;
  t15518 = t14135 + t14136;
  t15520 = t14165 + t14180;
  t15522 = t14192 + t14197;
  t15580 = 3.e-6*t2634*t14128;
  t15582 = -1.*t2634*t15110;
  t15583 = t15580 + t15582;
  t15586 = -9.e-12*t3224*t14128;
  t15587 = t15586 + t15128;
  t15405 = t4703*t15152;
  t15406 = t4740*t15167;
  t15407 = t4780*t15176;
  t15408 = t4782*t15152;
  t15409 = -1.000000000009*t3551*t15167;
  t15410 = t4812*t15176;
  t15411 = t15408 + t15409 + t15410;
  t15414 = 0.2*t15411;
  t15415 = -1.8e-11*t3551*t15152;
  t15416 = t4846*t15167;
  t15417 = t4782*t15176;
  t15420 = t15415 + t15416 + t15417;
  t15421 = -0.099999*t15420;
  t15422 = t4846*t15152;
  t15423 = t4877*t15167;
  t15424 = -1.000000000009*t3551*t15176;
  t15425 = t15422 + t15423 + t15424;
  t15426 = -0.3*t15425;
  t15427 = t15405 + t15406 + t15407 + t15414 + t15421 + t15426;
  t15552 = t4703*t15242;
  t15553 = t4740*t15255;
  t15554 = t4780*t15258;
  t15559 = t4782*t15242;
  t15561 = -1.000000000009*t3551*t15255;
  t15562 = t4812*t15258;
  t15563 = t15559 + t15561 + t15562;
  t15564 = 0.2*t15563;
  t15565 = -1.8e-11*t3551*t15242;
  t15566 = t4846*t15255;
  t15567 = t4782*t15258;
  t15568 = t15565 + t15566 + t15567;
  t15570 = -0.099999*t15568;
  t15571 = t4846*t15242;
  t15572 = t4877*t15255;
  t15573 = -1.000000000009*t3551*t15258;
  t15574 = t15571 + t15572 + t15573;
  t15575 = -0.3*t15574;
  t15576 = t15552 + t15553 + t15554 + t15564 + t15570 + t15575;
  t14032 = var2[4]*t14030;
  t14225 = var2[3]*t14223;
  t14385 = var2[5]*t14383;
  t14429 = var2[17]*t14427;
  t14525 = var2[15]*t14523;
  t15429 = -0.2000000000018*t13898*t3211*t3215*t3224;
  t15430 = 0.2000000000018*t2634*t13898*t3227;
  t15432 = -6.000000000054e-7*t13898*t3211*t3224*t3318;
  t15436 = t4013*t15435;
  t15441 = t3695*t15440;
  t15444 = t3921*t15443;
  t15445 = t4459*t15435;
  t15446 = t4332*t15440;
  t15447 = t4302*t15443;
  t15448 = t15445 + t15446 + t15447;
  t15449 = 0.2*t15448;
  t15450 = t4332*t15435;
  t15451 = t4524*t15440;
  t15452 = t4252*t15443;
  t15453 = t15450 + t15451 + t15452;
  t15454 = -0.099999*t15453;
  t15455 = t4302*t15435;
  t15456 = t4252*t15440;
  t15457 = t4257*t15443;
  t15458 = t15455 + t15456 + t15457;
  t15459 = -0.3*t15458;
  t15461 = t15429 + t15430 + t15432 + t15436 + t15441 + t15444 + t15449 + t15454 + t15459;
  t15699 = 3.e-6*t2634*t14991;
  t15700 = -9.e-12*t2634*t15110;
  t15701 = t14134 + t15699 + t15700;
  t15704 = t14153 + t15328 + t15329;
  t15707 = -1.000000000009*t2634*t13898*t3211;
  t15708 = t3224*t14991;
  t15710 = -3.e-6*t3224*t15110;
  t15711 = t15707 + t15708 + t15710;
  t15578 = -6.000000000054e-7*t3224*t14128;
  t15579 = 0.2000000000018*t3224*t15110;
  t15584 = t4013*t15583;
  t15585 = t3921*t15258;
  t15588 = t3695*t15587;
  t15589 = t4332*t15583;
  t15590 = t4252*t15258;
  t15591 = t4524*t15587;
  t15592 = t15589 + t15590 + t15591;
  t15593 = -0.099999*t15592;
  t15594 = t4302*t15583;
  t15595 = t4257*t15258;
  t15596 = t4252*t15587;
  t15598 = t15594 + t15595 + t15596;
  t15599 = -0.3*t15598;
  t15600 = t4459*t15583;
  t15601 = t4332*t15587;
  t15602 = t15600 + t15266 + t15601;
  t15603 = 0.2*t15602;
  t15604 = t15578 + t15579 + t15584 + t15585 + t15588 + t15593 + t15599 + t15603;
  t15641 = t4780*t15330;
  t15642 = t4703*t15335;
  t15643 = t4740*t15339;
  t15644 = -1.000000000009*t3551*t15330;
  t15645 = t4846*t15335;
  t15646 = t4877*t15339;
  t15647 = t15644 + t15645 + t15646;
  t15649 = -0.3*t15647;
  t15650 = t4782*t15330;
  t15651 = -1.8e-11*t3551*t15335;
  t15652 = t4846*t15339;
  t15653 = t15650 + t15651 + t15652;
  t15654 = -0.099999*t15653;
  t15658 = t4812*t15330;
  t15661 = t4782*t15335;
  t15664 = -1.000000000009*t3551*t15339;
  t15665 = t15658 + t15661 + t15664;
  t15669 = 0.2*t15665;
  t15670 = t15641 + t15642 + t15643 + t15649 + t15654 + t15669;
  p_output1[0]=0.2000000000018*t3139*t3211*t3215 - 0.2000000000018*t3224*t3227 + 6.000000000054e-7*t3139*t3211*t3318 + t3695*t3905 + t3921*t3940 + t4013*t4247 - 0.3*(t3905*t4252 + t3940*t4257 + t4247*t4302) + 0.2*(t3940*t4302 + t3905*t4332 + t4247*t4459) - 0.099999*(t3940*t4252 + t4247*t4332 + t3905*t4524) + var1[0] + var2[0] + t7395*var2[4] + t7105*var2[5] + t6722*var2[15] + t4886*var2[17] + var2[5]*(t8388*var2[4] + (t7464 + t7470 + t3695*t7493 + t3921*t7497 + t4013*t7508 - 0.3*(t4252*t7493 + t4257*t7497 + t4302*t7508) - 0.099999*(t4524*t7493 + t4252*t7497 + t4332*t7508) + 0.2*(t4332*t7493 + t4302*t7497 + t4459*t7508))*var2[5] + t8118*var2[15] + t7733*var2[17]) + var2[17]*(t8774*var2[4] + t7733*var2[5] + t8607*var2[15] + (-0.099999*(-1.8e-11*t3484*t3905 + t4247*t4634 + t3940*t4782) + t3905*t8401 + t3940*t8410 + t4247*t8417 - 0.3*(-1.000000000009*t3484*t4247 + t4806 + t3940*t8467) + 0.2*(-1.000000000009*t3484*t3940 + t3905*t4634 + t4247*t8541))*var2[17]) + var2[15]*(t12399*var2[4] + t8118*var2[5] + (0.2000000000018*t2634*t3211*t3215 + 6.000000000054e-7*t2634*t3211*t3318 + t13042*t3695 + t12668*t3921 + t13133*t4013 - 0.3*(t13042*t4252 + t12668*t4257 + t13133*t4302) + 0.2*(t12668*t4302 + t13042*t4332 + t13133*t4459) - 0.099999*(t12668*t4252 + t13133*t4332 + t13042*t4524) + t8781)*var2[15] + t8607*var2[17]) + var2[4]*((t7464 + t7470 + t8781 + t3695*t8783 + t3921*t8788 + t4013*t8792 - 0.3*(t4252*t8783 + t4257*t8788 + t4302*t8792) - 0.099999*(t4524*t8783 + t4252*t8788 + t4332*t8792) + 0.2*(t4332*t8783 + t4302*t8788 + t4459*t8792))*var2[4] + t8388*var2[5] + t12399*var2[15] + t8774*var2[17]) + var3[0] + t7395*var3[4] + t7105*var3[5] + t6722*var3[15] + t4886*var3[17] - 1.*var4[0];
  p_output1[1]=t13852 + t13908 + t13918 + t13930 + t13940 + t13951 + t14032 + t14062 + t14119 + t14124 + t14225 + t14385 + t14429 + t14525 + var1[1] + var2[1] + var2[4]*(t14559*var2[3] + (t14661 - 0.2000000000018*t13841*t3139*t3215*t3227 - 6.000000000054e-7*t13841*t3139*t3227*t3318 + t14667*t3695 + t14672*t3921 + t14677*t4013 - 0.3*(t14667*t4252 + t14672*t4257 + t14677*t4302) + 0.2*(t14672*t4302 + t14667*t4332 + t14677*t4459) - 0.099999*(t14672*t4252 + t14677*t4332 + t14667*t4524))*var2[4] + t14659*var2[5] + t14626*var2[15] + t14579*var2[17]) + var2[3]*((t14661 + t15024 + t15028 + t15071*t3695 + t15073*t3921 + t15075*t4013 - 0.3*(t15071*t4252 + t15073*t4257 + t15075*t4302) + 0.2*(t15073*t4302 + t15071*t4332 + t15075*t4459) - 0.099999*(t15073*t4252 + t15075*t4332 + t15071*t4524))*var2[3] + t14559*var2[4] + t15020*var2[5] + t14863*var2[15] + t14747*var2[17]) + var2[5]*(t15020*var2[3] + t14659*var2[4] + (t15024 + t15028 + t15030*t3695 + t15034*t3921 + t15038*t4013 - 0.3*(t15030*t4252 + t15034*t4257 + t15038*t4302) + 0.2*(t15034*t4302 + t15030*t4332 + t15038*t4459) - 0.099999*(t15034*t4252 + t15038*t4332 + t15030*t4524))*var2[5] + t14983*var2[15] + t14775*var2[17]) + var2[15]*(t14863*var2[3] + t14626*var2[4] + t14983*var2[5] + (t14661 + 0.2000000000018*t13905*t2634 - 6.000000000054e-7*t13915*t2634 + t14880*t3695 + t14884*t3921 + t14907*t4013 - 0.3*(t14880*t4252 + t14884*t4257 + t14907*t4302) + 0.2*(t14884*t4302 + t14880*t4332 + t14907*t4459) - 0.099999*(t14884*t4252 + t14907*t4332 + t14880*t4524))*var2[15] + t14827*var2[17]) + var2[17]*(t14747*var2[3] + t14579*var2[4] + t14775*var2[5] + t14827*var2[15] + (-0.099999*(-1.8e-11*t13928*t3484 + t13949*t4634 + t13939*t4782) + t13928*t8401 + t13939*t8410 + t13949*t8417 - 0.3*(t14392 - 1.000000000009*t13949*t3484 + t13939*t8467) + 0.2*(-1.000000000009*t13939*t3484 + t13928*t4634 + t13949*t8541))*var2[17]) + var3[1] + t14223*var3[3] + t14030*var3[4] + t14383*var3[5] + t14523*var3[15] + t14427*var3[17] - 1.*var4[1];
  p_output1[2]=0.2000000000018*t14991*t3139 - 6.000000000054e-7*t15110*t3139 - 0.2000000000018*t13898*t3211*t3224 + t15115*t3695 + t15122*t3921 + t15133*t4013 - 0.3*(t15115*t4252 + t15122*t4257 + t15133*t4302) + 0.2*(t15122*t4302 + t15115*t4332 + t15133*t4459) - 0.099999*(t15122*t4252 + t15133*t4332 + t15115*t4524) + var1[2] + var2[2] + (t14032 + t14225 + t14385 + t14429 + t14525)*var2[3] + t15514*var2[3] + t15203*var2[4] + t15291*var2[5] + t15364*var2[15] + t15321*var2[17] + var2[4]*(t14030*var2[3] + (t14125 + 0.2000000000018*t13898*t3139*t3215*t3227 + 6.000000000054e-7*t13898*t3139*t3227*t3318 + t15469*t3695 + t15476*t3921 + t15482*t4013 - 0.3*(t15469*t4252 + t15476*t4257 + t15482*t4302) + 0.2*(t15476*t4302 + t15469*t4332 + t15482*t4459) - 0.099999*(t15476*t4252 + t15482*t4332 + t15469*t4524))*var2[4] + t15403*var2[5] + t15461*var2[15] + t15427*var2[17]) + var2[5]*(t14383*var2[3] + t15403*var2[4] + (t14129 + t14133 + t15518*t3695 + t15520*t3921 + t15522*t4013 - 0.3*(t15518*t4252 + t15520*t4257 + t15522*t4302) + 0.2*(t15520*t4302 + t15518*t4332 + t15522*t4459) - 0.099999*(t15520*t4252 + t15522*t4332 + t15518*t4524))*var2[5] + t15604*var2[15] + t15576*var2[17]) + var2[15]*(t14523*var2[3] + t15461*var2[4] + t15604*var2[5] + (t14125 + 0.2000000000018*t14991*t2634 - 6.000000000054e-7*t15110*t2634 + t15701*t3695 + t15704*t3921 + t15711*t4013 - 0.3*(t15701*t4252 + t15704*t4257 + t15711*t4302) + 0.2*(t15704*t4302 + t15701*t4332 + t15711*t4459) - 0.099999*(t15704*t4252 + t15711*t4332 + t15701*t4524))*var2[15] + t15670*var2[17]) + var2[17]*(t14427*var2[3] + t15427*var2[4] + t15576*var2[5] + t15670*var2[15] + (-0.099999*(-1.8e-11*t15115*t3484 + t15133*t4634 + t15122*t4782) + t15115*t8401 + t15122*t8410 + t15133*t8417 - 0.3*(t15297 - 1.000000000009*t15133*t3484 + t15122*t8467) + 0.2*(-1.000000000009*t15122*t3484 + t15115*t4634 + t15133*t8541))*var2[17]) + var3[2] + t15514*var3[3] + t15203*var3[4] + t15291*var3[5] + t15364*var3[15] + t15321*var3[17] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RightFrontFoot_FrontStance.hh"

namespace FrontStance
{

void ddh_RightFrontFoot_FrontStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
