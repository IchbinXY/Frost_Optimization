/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:05:40 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t585;
  double t645;
  double t684;
  double t776;
  double t15957;
  double t17000;
  double t17001;
  double t14407;
  double t341;
  double t14991;
  double t13082;
  double t16773;
  double t17005;
  double t17187;
  double t17471;
  double t25228;
  double t25375;
  double t25378;
  double t25385;
  double t25469;
  double t21250;
  double t23814;
  double t24171;
  double t24255;
  double t24406;
  double t25139;
  double t26408;
  double t833;
  double t859;
  double t910;
  double t14206;
  double t15296;
  double t15946;
  double t25571;
  double t27556;
  double t28833;
  double t26470;
  double t29198;
  double t29210;
  double t29211;
  double t29135;
  double t29157;
  double t29196;
  double t29207;
  double t29215;
  double t29216;
  double t29328;
  double t29321;
  double t29323;
  double t29324;
  double t29329;
  double t29197;
  double t29219;
  double t29205;
  double t29318;
  double t29319;
  double t29346;
  double t29325;
  double t29204;
  double t29208;
  double t29209;
  double t29212;
  double t29213;
  double t29217;
  double t29218;
  double t29245;
  double t29246;
  double t29296;
  double t29399;
  double t29404;
  double t29415;
  double t29419;
  double t29326;
  double t29429;
  double t29430;
  double t29435;
  double t29436;
  double t29333;
  double t29339;
  double t29439;
  double t29453;
  double t29454;
  double t29456;
  double t29362;
  double t29366;
  double t29367;
  double t29372;
  double t29373;
  double t29385;
  double t29492;
  double t29493;
  double t29494;
  double t29495;
  double t29489;
  double t29490;
  double t29499;
  double t29500;
  double t29501;
  double t29502;
  double t17176;
  double t17475;
  double t17558;
  double t17820;
  double t25173;
  double t25260;
  double t25261;
  double t25270;
  double t25315;
  double t25561;
  double t25592;
  double t25616;
  double t25866;
  double t25870;
  double t29558;
  double t29559;
  double t29536;
  double t29547;
  double t29552;
  double t29532;
  double t29533;
  double t29534;
  double t28837;
  double t29068;
  double t29395;
  double t29396;
  double t29582;
  double t29587;
  double t29590;
  double t29090;
  double t29134;
  double t29214;
  double t29305;
  double t29320;
  double t29327;
  double t29330;
  double t29331;
  double t29332;
  double t29342;
  double t29353;
  double t29354;
  double t29358;
  double t29361;
  double t29378;
  double t29383;
  double t29384;
  double t29390;
  double t29391;
  double t29392;
  double t29393;
  double t29612;
  double t29613;
  double t29614;
  double t29618;
  double t29619;
  double t29620;
  double t29660;
  double t29661;
  double t29662;
  double t29651;
  double t29652;
  double t29653;
  double t29654;
  double t29656;
  double t29657;
  double t29658;
  double t29397;
  double t29693;
  double t29695;
  double t29696;
  double t29697;
  double t29700;
  double t29701;
  double t29609;
  double t29610;
  double t29611;
  double t29615;
  double t29616;
  double t29617;
  double t29621;
  double t29622;
  double t29623;
  double t29624;
  double t29625;
  double t29626;
  double t29627;
  double t29628;
  double t29629;
  double t29635;
  double t29640;
  double t29641;
  double t29646;
  double t29647;
  double t29648;
  double t29486;
  double t29487;
  double t29488;
  double t29491;
  double t29496;
  double t29497;
  double t29498;
  double t29503;
  double t29506;
  double t29511;
  double t29513;
  double t29514;
  double t29520;
  double t29521;
  double t29522;
  double t29523;
  double t29524;
  double t29525;
  double t29526;
  double t29527;
  double t29528;
  double t29529;
  double t29655;
  double t29659;
  double t29663;
  double t29664;
  double t29665;
  double t29668;
  double t29673;
  double t29674;
  double t29675;
  double t29680;
  double t29681;
  double t29682;
  double t29683;
  double t29684;
  double t29685;
  double t29686;
  double t29687;
  double t29688;
  double t29689;
  double t29535;
  double t29557;
  double t29560;
  double t29561;
  double t29562;
  double t29563;
  double t29564;
  double t29565;
  double t29566;
  double t29567;
  double t29568;
  double t29569;
  double t29570;
  double t29571;
  double t29572;
  double t29573;
  double t29574;
  double t29575;
  double t29576;
  double t20675;
  double t25336;
  double t26257;
  double t26602;
  double t27779;
  double t27782;
  double t28831;
  double t28832;
  double t28838;
  double t28911;
  double t28942;
  double t28943;
  double t28944;
  double t29069;
  double t29070;
  double t29071;
  double t29072;
  double t29073;
  double t29074;
  double t29725;
  double t29726;
  double t29735;
  double t29736;
  double t29737;
  double t29738;
  double t29745;
  double t29746;
  double t29747;
  double t29728;
  double t29748;
  double t29751;
  double t29862;
  double t29860;
  double t29861;
  double t29863;
  double t29864;
  double t29869;
  double t29870;
  double t29871;
  double t29877;
  double t29878;
  double t29879;
  double t29880;
  double t29866;
  double t29872;
  double t29874;
  double t29875;
  double t29882;
  double t29883;
  double t29884;
  double t29885;
  double t29904;
  double t29906;
  double t29907;
  double t29910;
  double t29911;
  double t29913;
  double t29915;
  double t29916;
  double t29920;
  double t29923;
  double t29925;
  double t29962;
  double t29963;
  double t29964;
  double t29966;
  double t29967;
  double t29968;
  double t29974;
  double t29975;
  double t29976;
  double t29977;
  double t29980;
  double t29982;
  double t29985;
  double t29986;
  double t29990;
  double t29991;
  double t29992;
  double t29993;
  double t30055;
  double t30056;
  double t30057;
  double t30058;
  double t30060;
  double t30061;
  double t30062;
  double t30063;
  double t30066;
  double t30067;
  double t30069;
  double t30070;
  double t30110;
  double t30113;
  double t30114;
  double t30115;
  double t30106;
  double t30107;
  double t30119;
  double t30120;
  double t30121;
  double t30122;
  double t30151;
  double t30152;
  double t30153;
  double t30154;
  double t30146;
  double t30147;
  double t30148;
  double t30149;
  double t30140;
  double t30141;
  double t30142;
  double t30144;
  double t30178;
  double t30179;
  double t30180;
  double t30183;
  double t30185;
  double t30188;
  double t30189;
  double t30190;
  double t29972;
  double t30211;
  double t30212;
  double t30213;
  double t30215;
  double t30216;
  double t30217;
  double t30222;
  double t30223;
  double t30224;
  double t30052;
  double t30053;
  double t30054;
  double t30059;
  double t30064;
  double t30065;
  double t30071;
  double t30076;
  double t30081;
  double t30086;
  double t30087;
  double t30088;
  double t30089;
  double t30090;
  double t30091;
  double t30092;
  double t30094;
  double t30096;
  double t30097;
  double t30098;
  double t30099;
  double t30100;
  double t30254;
  double t30255;
  double t30256;
  double t30257;
  double t30251;
  double t30252;
  double t30261;
  double t30263;
  double t30267;
  double t30270;
  double t30297;
  double t30298;
  double t30299;
  double t30311;
  double t30313;
  double t30306;
  double t30307;
  double t30308;
  double t30296;
  double t30300;
  double t30303;
  double t30176;
  double t30177;
  double t30181;
  double t30186;
  double t30187;
  double t30191;
  double t30192;
  double t30193;
  double t30194;
  double t30195;
  double t30196;
  double t30197;
  double t30198;
  double t30199;
  double t30200;
  double t30201;
  double t30202;
  double t30203;
  double t30204;
  double t30205;
  double t30207;
  double t29908;
  double t29909;
  double t29914;
  double t29917;
  double t29918;
  double t29926;
  double t29927;
  double t29929;
  double t29930;
  double t29934;
  double t29944;
  double t29947;
  double t29949;
  double t29953;
  double t29954;
  double t29955;
  double t29956;
  double t29957;
  double t29958;
  double t29959;
  double t29960;
  double t29965;
  double t29970;
  double t30339;
  double t30341;
  double t30346;
  double t30377;
  double t30382;
  double t30387;
  double t30391;
  double t30392;
  double t30393;
  double t30414;
  double t30417;
  double t30418;
  double t30429;
  double t30430;
  double t30431;
  double t30412;
  double t30419;
  double t30420;
  double t30421;
  double t30423;
  double t30425;
  double t30426;
  double t30427;
  double t30457;
  double t30459;
  double t30460;
  double t30461;
  double t30464;
  double t30468;
  double t30472;
  double t30476;
  double t30248;
  double t30249;
  double t30250;
  double t30253;
  double t30258;
  double t30259;
  double t30260;
  double t30271;
  double t30272;
  double t30274;
  double t30276;
  double t30277;
  double t30278;
  double t30280;
  double t30282;
  double t30283;
  double t30286;
  double t30287;
  double t30288;
  double t30290;
  double t30291;
  double t30293;
  double t30103;
  double t30104;
  double t30105;
  double t30108;
  double t30116;
  double t30117;
  double t30118;
  double t30123;
  double t30124;
  double t30125;
  double t30126;
  double t30127;
  double t30128;
  double t30129;
  double t30130;
  double t30131;
  double t30132;
  double t30133;
  double t30134;
  double t30135;
  double t30136;
  double t30137;
  double t30374;
  double t30375;
  double t30376;
  double t30388;
  double t30389;
  double t30390;
  double t30394;
  double t30395;
  double t30396;
  double t30397;
  double t30398;
  double t30399;
  double t30400;
  double t30401;
  double t30402;
  double t30403;
  double t30404;
  double t30405;
  double t30406;
  double t30407;
  double t30409;
  double t30145;
  double t30150;
  double t30155;
  double t30157;
  double t30159;
  double t30160;
  double t30161;
  double t30162;
  double t30163;
  double t30164;
  double t30165;
  double t30166;
  double t30167;
  double t30168;
  double t30170;
  double t30171;
  double t30172;
  double t30173;
  double t30174;
  double t29876;
  double t29881;
  double t29886;
  double t29887;
  double t29888;
  double t29889;
  double t29890;
  double t29891;
  double t29892;
  double t29893;
  double t29894;
  double t29895;
  double t29896;
  double t29897;
  double t29898;
  double t29899;
  double t29900;
  double t29901;
  double t29902;
  double t30305;
  double t30309;
  double t30314;
  double t30315;
  double t30316;
  double t30318;
  double t30319;
  double t30320;
  double t30321;
  double t30322;
  double t30324;
  double t30326;
  double t30328;
  double t30329;
  double t30330;
  double t30331;
  double t30332;
  double t30334;
  double t30335;
  double t30422;
  double t30428;
  double t30432;
  double t30433;
  double t30434;
  double t30435;
  double t30436;
  double t30437;
  double t30439;
  double t30441;
  double t30442;
  double t30443;
  double t30444;
  double t30445;
  double t30446;
  double t30448;
  double t30449;
  double t30450;
  double t30451;
  double t29727;
  double t29729;
  double t29730;
  double t29731;
  double t29733;
  double t29739;
  double t29740;
  double t29741;
  double t29742;
  double t30513;
  double t30514;
  double t30520;
  double t30521;
  double t30509;
  double t30510;
  double t30526;
  double t30527;
  double t30529;
  double t29749;
  double t29759;
  double t29760;
  double t29762;
  double t29763;
  double t29768;
  double t30536;
  double t30664;
  double t30665;
  double t30667;
  double t30668;
  double t30670;
  double t30671;
  double t30672;
  double t30673;
  double t30674;
  double t30676;
  double t30677;
  double t30678;
  double t30679;
  double t30681;
  double t30682;
  double t30683;
  double t30684;
  double t30685;
  double t30609;
  double t30610;
  double t30611;
  double t30612;
  double t30613;
  double t30615;
  double t30616;
  double t30617;
  double t30619;
  double t30620;
  double t30621;
  double t30622;
  double t30624;
  double t30626;
  double t30627;
  double t30628;
  double t30630;
  double t30632;
  double t30633;
  double t30634;
  double t30555;
  double t30556;
  double t30558;
  double t30559;
  double t30560;
  double t30561;
  double t30562;
  double t30563;
  double t30568;
  double t30569;
  double t30570;
  double t30571;
  double t30572;
  double t30573;
  double t30574;
  double t30575;
  double t30576;
  double t30577;
  double t30578;
  double t30579;
  double t30580;
  double t30581;
  double t30582;
  double t30583;
  double t30584;
  double t30585;
  double t30587;
  double t30588;
  double t30589;
  double t30590;
  double t30591;
  double t30592;
  double t30594;
  double t30595;
  double t30596;
  double t30598;
  double t30599;
  double t30601;
  double t30602;
  double t30603;
  double t30604;
  double t30605;
  double t30606;
  double t30608;
  double t30636;
  double t30637;
  double t30638;
  double t30640;
  double t30641;
  double t30642;
  double t30644;
  double t30646;
  double t30647;
  double t30648;
  double t30650;
  double t30651;
  double t30652;
  double t30653;
  double t30654;
  double t30656;
  double t30657;
  double t30658;
  double t30659;
  double t30661;
  double t30662;
  double t30663;
  double t30700;
  double t30701;
  double t30702;
  double t30704;
  double t30693;
  double t30694;
  double t30696;
  double t30698;
  double t30706;
  double t30708;
  double t30709;
  double t30710;
  double t30737;
  double t30738;
  double t30741;
  double t30742;
  double t30746;
  double t30747;
  double t30748;
  double t30774;
  double t30775;
  double t30776;
  double t30778;
  double t30779;
  double t30780;
  double t30784;
  double t30785;
  double t30787;
  double t30849;
  double t30850;
  double t30851;
  double t30853;
  double t30846;
  double t30847;
  double t30857;
  double t30859;
  double t30860;
  double t30883;
  double t30885;
  double t30886;
  double t30895;
  double t30896;
  double t30891;
  double t30892;
  double t30882;
  double t30887;
  double t30888;
  double t30734;
  double t30736;
  double t30740;
  double t30743;
  double t30744;
  double t30750;
  double t30751;
  double t30752;
  double t30753;
  double t30754;
  double t30757;
  double t30758;
  double t30759;
  double t30760;
  double t30762;
  double t30763;
  double t30764;
  double t30765;
  double t30766;
  double t30767;
  double t30769;
  double t30922;
  double t30924;
  double t30927;
  double t30960;
  double t30962;
  double t30963;
  double t30971;
  double t30972;
  double t30973;
  double t31016;
  double t31017;
  double t31018;
  double t30993;
  double t30994;
  double t30995;
  double t31004;
  double t31008;
  double t31013;
  double t31014;
  double t31052;
  double t31054;
  double t31055;
  double t31056;
  double t31059;
  double t31060;
  double t31061;
  double t31062;
  double t30823;
  double t30827;
  double t30835;
  double t30848;
  double t30854;
  double t30855;
  double t30856;
  double t30861;
  double t30862;
  double t30863;
  double t30864;
  double t30866;
  double t30867;
  double t30868;
  double t30869;
  double t30871;
  double t30872;
  double t30873;
  double t30874;
  double t30876;
  double t30877;
  double t30878;
  double t30957;
  double t30958;
  double t30959;
  double t30964;
  double t30966;
  double t30967;
  double t30974;
  double t30975;
  double t30976;
  double t30977;
  double t30978;
  double t30979;
  double t30981;
  double t30982;
  double t30983;
  double t30984;
  double t30985;
  double t30986;
  double t30987;
  double t30988;
  double t30989;
  double t30699;
  double t30705;
  double t30711;
  double t30712;
  double t30714;
  double t30715;
  double t30716;
  double t30718;
  double t30719;
  double t30720;
  double t30721;
  double t30722;
  double t30724;
  double t30726;
  double t30727;
  double t30729;
  double t30730;
  double t30731;
  double t30732;
  double t30889;
  double t30893;
  double t30897;
  double t30898;
  double t30899;
  double t30901;
  double t30902;
  double t30903;
  double t30907;
  double t30908;
  double t30909;
  double t30911;
  double t30912;
  double t30913;
  double t30914;
  double t30915;
  double t30916;
  double t30917;
  double t30919;
  double t30996;
  double t31015;
  double t31019;
  double t31020;
  double t31021;
  double t31022;
  double t31023;
  double t31024;
  double t31025;
  double t31026;
  double t31027;
  double t31028;
  double t31029;
  double t31030;
  double t31031;
  double t31043;
  double t31046;
  double t31047;
  double t31048;
  double t31113;
  double t31115;
  double t31117;
  double t31118;
  double t31119;
  double t31122;
  double t31124;
  double t31125;
  double t31127;
  t585 = Cos(var1[6]);
  t645 = -1.*t585;
  t684 = 1. + t645;
  t776 = Sin(var1[4]);
  t15957 = Cos(var1[8]);
  t17000 = Sin(var1[8]);
  t17001 = -3.e-6*t17000;
  t14407 = Cos(var1[4]);
  t341 = Cos(var1[5]);
  t14991 = Sin(var1[6]);
  t13082 = Sin(var1[5]);
  t16773 = -3.e-6*t15957;
  t17005 = t16773 + t17001;
  t17187 = 3.e-6*t15957;
  t17471 = t17187 + t17001;
  t25228 = -9.e-12*t17000;
  t25375 = -1.*t341*t585*t776;
  t25378 = 3.e-6*t684*t776*t13082;
  t25385 = t14407*t14991;
  t25469 = t25375 + t25378 + t25385;
  t21250 = -1.000000000009*t684;
  t23814 = 1. + t21250;
  t24171 = t14407*t23814;
  t24255 = t341*t776*t14991;
  t24406 = 3.e-6*t776*t13082*t14991;
  t25139 = t24171 + t24255 + t24406;
  t26408 = 3.e-6*t17000;
  t833 = -3.e-6*t341*t684*t776;
  t859 = -9.e-12*t684;
  t910 = 1. + t859;
  t14206 = t910*t776*t13082;
  t15296 = -3.e-6*t14407*t14991;
  t15946 = t833 + t14206 + t15296;
  t25571 = -1.*t15957;
  t27556 = t17187 + t26408;
  t28833 = 9.e-12*t17000;
  t26470 = t16773 + t26408;
  t29198 = 1. + t25571;
  t29210 = -3.e-6*t29198;
  t29211 = t29210 + t26408;
  t29135 = 3.e-6*t341*t684*t776;
  t29157 = t585*t776*t13082;
  t29196 = t29135 + t29157;
  t29207 = -1.*t17000;
  t29215 = t341*t910*t776;
  t29216 = t29215 + t25378;
  t29328 = 3.e-6*t29198;
  t29321 = 3.e-6*t341*t776*t14991;
  t29323 = -1.*t776*t13082*t14991;
  t29324 = t29321 + t29323;
  t29329 = t29328 + t26408;
  t29197 = 9.e-13*var1[8];
  t29219 = t29210 + t17001;
  t29205 = -9.e-12*t29198;
  t29318 = -1.000000000009*t29198;
  t29319 = 1. + t29318;
  t29346 = t29328 + t17001;
  t29325 = 9.e-12*t29198;
  t29204 = 0.2000000000018*t29198;
  t29208 = t29205 + t29207;
  t29209 = 0.1*t29208;
  t29212 = -9.e-7*t29211;
  t29213 = t29197 + t29204 + t29209 + t29212;
  t29217 = 3.e-7*var1[8];
  t29218 = -1.62e-17*t29198;
  t29245 = 0.2*t29219;
  t29246 = 0.1*t29211;
  t29296 = t29217 + t29218 + t29245 + t29246;
  t29399 = -1.*t14407*t341*t585;
  t29404 = 3.e-6*t14407*t684*t13082;
  t29415 = -1.*t776*t14991;
  t29419 = t29399 + t29404 + t29415;
  t29326 = t29325 + t29207;
  t29429 = -3.e-6*t14407*t341*t684;
  t29430 = t14407*t910*t13082;
  t29435 = 3.e-6*t776*t14991;
  t29436 = t29429 + t29430 + t29435;
  t29333 = -1.8e-11*t29198;
  t29339 = 1. + t29333;
  t29439 = -1.*t23814*t776;
  t29453 = t14407*t341*t14991;
  t29454 = 3.e-6*t14407*t13082*t14991;
  t29456 = t29439 + t29453 + t29454;
  t29362 = 0.1000000000009*t29198;
  t29366 = -9.e-7*t29219;
  t29367 = t29205 + t17000;
  t29372 = 0.2*t29367;
  t29373 = t29197 + t29362 + t29366 + t29372;
  t29385 = t29325 + t17000;
  t29492 = -3.e-6*t14407*t585;
  t29493 = -3.e-6*t341*t776*t14991;
  t29494 = -9.e-12*t776*t13082*t14991;
  t29495 = t29492 + t29493 + t29494;
  t29489 = t14407*t585;
  t29490 = t29489 + t24255 + t24406;
  t29499 = t341*t585*t776;
  t29500 = 3.e-6*t585*t776*t13082;
  t29501 = -1.000000000009*t14407*t14991;
  t29502 = t29499 + t29500 + t29501;
  t17176 = 0.2*t17005;
  t17475 = 0.1*t17471;
  t17558 = -1.62e-17*t17000;
  t17820 = 3.e-7 + t17176 + t17475 + t17558;
  t25173 = -9.e-7*t17005;
  t25260 = t15957 + t25228;
  t25261 = 0.2*t25260;
  t25270 = 0.1000000000009*t17000;
  t25315 = 9.e-13 + t25173 + t25261 + t25270;
  t25561 = -9.e-7*t17471;
  t25592 = t25571 + t25228;
  t25616 = 0.1*t25592;
  t25866 = 0.2000000000018*t17000;
  t25870 = 9.e-13 + t25561 + t25616 + t25866;
  t29558 = -1.*t14407*t585*t13082;
  t29559 = t29429 + t29558;
  t29536 = -3.e-6*t14407*t341*t14991;
  t29547 = t14407*t13082*t14991;
  t29552 = t29536 + t29547;
  t29532 = -1.*t14407*t341*t910;
  t29533 = -3.e-6*t14407*t684*t13082;
  t29534 = t29532 + t29533;
  t28837 = t25571 + t28833;
  t29068 = t15957 + t28833;
  t29395 = -0.2000000000018*t14407*t341*t684;
  t29396 = -6.000000000054e-7*t14407*t684*t13082;
  t29582 = t29399 + t29404;
  t29587 = t29429 + t29430;
  t29590 = t29453 + t29454;
  t29090 = -6.000000000054e-7*t341*t684*t776;
  t29134 = 0.2000000000018*t684*t776*t13082;
  t29214 = t29196*t29213;
  t29305 = t29216*t29296;
  t29320 = t29319*t29196;
  t29327 = t29324*t29326;
  t29330 = t29216*t29329;
  t29331 = t29320 + t29327 + t29330;
  t29332 = 0.2*t29331;
  t29342 = t29339*t29216;
  t29353 = t29196*t29346;
  t29354 = t29324*t29329;
  t29358 = t29342 + t29353 + t29354;
  t29361 = 0.100001*t29358;
  t29378 = t29324*t29373;
  t29383 = t29319*t29324;
  t29384 = t29216*t29346;
  t29390 = t29196*t29385;
  t29391 = t29383 + t29384 + t29390;
  t29392 = -0.3*t29391;
  t29393 = t29090 + t29134 + t29214 + t29305 + t29332 + t29361 + t29378 + t29392;
  t29612 = 9.e-12*t14407*t341*t14991;
  t29613 = -3.e-6*t14407*t13082*t14991;
  t29614 = t29612 + t29613;
  t29618 = -3.e-6*t14407*t341*t585;
  t29619 = t14407*t585*t13082;
  t29620 = t29618 + t29619;
  t29660 = t585*t776;
  t29661 = -1.*t14407*t341*t14991;
  t29662 = t29660 + t29661 + t29613;
  t29651 = -3.e-6*t585*t776;
  t29652 = 3.e-6*t14407*t341*t14991;
  t29653 = 9.e-12*t14407*t13082*t14991;
  t29654 = t29651 + t29652 + t29653;
  t29656 = -3.e-6*t14407*t585*t13082;
  t29657 = -1.000000000009*t776*t14991;
  t29658 = t29399 + t29656 + t29657;
  t29397 = 0.2000000000018*t776*t14991;
  t29693 = t29399 + t29656 + t29415;
  t29695 = 3.e-6*t14407*t341*t585;
  t29696 = 9.e-12*t14407*t585*t13082;
  t29697 = t29695 + t29696 + t29435;
  t29700 = -1.000000000009*t585*t776;
  t29701 = t29700 + t29453 + t29454;
  t29609 = 6.000000000054e-7*t14407*t341*t14991;
  t29610 = -0.2000000000018*t14407*t13082*t14991;
  t29611 = t29552*t29213;
  t29615 = t29614*t29296;
  t29616 = t29339*t29614;
  t29617 = t29552*t29346;
  t29621 = t29620*t29329;
  t29622 = t29616 + t29617 + t29621;
  t29623 = 0.100001*t29622;
  t29624 = t29319*t29552;
  t29625 = t29620*t29326;
  t29626 = t29614*t29329;
  t29627 = t29624 + t29625 + t29626;
  t29628 = 0.2*t29627;
  t29629 = t29620*t29373;
  t29635 = t29319*t29620;
  t29640 = t29614*t29346;
  t29641 = t29552*t29385;
  t29646 = t29635 + t29640 + t29641;
  t29647 = -0.3*t29646;
  t29648 = t29609 + t29610 + t29611 + t29615 + t29623 + t29628 + t29629 + t29647;
  t29486 = -0.2000000000018*t14407*t585;
  t29487 = -0.2000000000018*t341*t776*t14991;
  t29488 = -6.000000000054e-7*t776*t13082*t14991;
  t29491 = t29490*t29213;
  t29496 = t29495*t29296;
  t29497 = t29339*t29495;
  t29498 = t29490*t29346;
  t29503 = t29502*t29329;
  t29506 = t29497 + t29498 + t29503;
  t29511 = 0.100001*t29506;
  t29513 = t29319*t29490;
  t29514 = t29502*t29326;
  t29520 = t29495*t29329;
  t29521 = t29513 + t29514 + t29520;
  t29522 = 0.2*t29521;
  t29523 = t29502*t29373;
  t29524 = t29319*t29502;
  t29525 = t29495*t29346;
  t29526 = t29490*t29385;
  t29527 = t29524 + t29525 + t29526;
  t29528 = -0.3*t29527;
  t29529 = t29486 + t29487 + t29488 + t29491 + t29496 + t29511 + t29522 + t29523 + t29528;
  t29655 = t29654*t17820;
  t29659 = t29658*t25315;
  t29663 = t29662*t25870;
  t29664 = t29662*t29068;
  t29665 = t29654*t26470;
  t29668 = -1.000000000009*t29658*t17000;
  t29673 = t29664 + t29665 + t29668;
  t29674 = -0.3*t29673;
  t29675 = t29658*t28837;
  t29680 = t29654*t27556;
  t29681 = -1.000000000009*t29662*t17000;
  t29682 = t29675 + t29680 + t29681;
  t29683 = 0.2*t29682;
  t29684 = t29662*t26470;
  t29685 = t29658*t27556;
  t29686 = -1.8e-11*t29654*t17000;
  t29687 = t29684 + t29685 + t29686;
  t29688 = 0.100001*t29687;
  t29689 = t29655 + t29659 + t29663 + t29674 + t29683 + t29688;
  t29535 = t29534*t17820;
  t29557 = t29552*t25315;
  t29560 = t29559*t25870;
  t29561 = t29559*t26470;
  t29562 = t29552*t27556;
  t29563 = -1.8e-11*t29534*t17000;
  t29564 = t29561 + t29562 + t29563;
  t29565 = 0.100001*t29564;
  t29566 = t29552*t28837;
  t29567 = t29534*t27556;
  t29568 = -1.000000000009*t29559*t17000;
  t29569 = t29566 + t29567 + t29568;
  t29570 = 0.2*t29569;
  t29571 = t29559*t29068;
  t29572 = t29534*t26470;
  t29573 = -1.000000000009*t29552*t17000;
  t29574 = t29571 + t29572 + t29573;
  t29575 = -0.3*t29574;
  t29576 = t29535 + t29557 + t29560 + t29565 + t29570 + t29575;
  t20675 = t15946*t17820;
  t25336 = t25139*t25315;
  t26257 = t25469*t25870;
  t26602 = t25469*t26470;
  t27779 = t25139*t27556;
  t27782 = -1.8e-11*t15946*t17000;
  t28831 = t26602 + t27779 + t27782;
  t28832 = 0.100001*t28831;
  t28838 = t25139*t28837;
  t28911 = t15946*t27556;
  t28942 = -1.000000000009*t25469*t17000;
  t28943 = t28838 + t28911 + t28942;
  t28944 = 0.2*t28943;
  t29069 = t25469*t29068;
  t29070 = t15946*t26470;
  t29071 = -1.000000000009*t25139*t17000;
  t29072 = t29069 + t29070 + t29071;
  t29073 = -0.3*t29072;
  t29074 = t20675 + t25336 + t26257 + t28832 + t28944 + t29073;
  t29725 = t23814*t776;
  t29726 = t29725 + t29661 + t29613;
  t29735 = 3.e-6*t14407*t341*t684;
  t29736 = -1.*t14407*t910*t13082;
  t29737 = -3.e-6*t776*t14991;
  t29738 = t29735 + t29736 + t29737;
  t29745 = t14407*t341*t585;
  t29746 = t776*t14991;
  t29747 = t29745 + t29533 + t29746;
  t29728 = -9.e-12*t15957;
  t29748 = 9.e-12*t15957;
  t29751 = t29738*t27556;
  t29862 = Sin(var1[3]);
  t29860 = Cos(var1[3]);
  t29861 = t29860*t341*t776;
  t29863 = -1.*t29862*t13082;
  t29864 = t29861 + t29863;
  t29869 = -1.*t341*t29862;
  t29870 = -1.*t29860*t776*t13082;
  t29871 = t29869 + t29870;
  t29877 = -1.*t29860*t14407*t23814;
  t29878 = -1.*t29864*t14991;
  t29879 = 3.e-6*t29871*t14991;
  t29880 = t29877 + t29878 + t29879;
  t29866 = 3.e-6*t684*t29864;
  t29872 = t910*t29871;
  t29874 = 3.e-6*t29860*t14407*t14991;
  t29875 = t29866 + t29872 + t29874;
  t29882 = t585*t29864;
  t29883 = 3.e-6*t684*t29871;
  t29884 = -1.*t29860*t14407*t14991;
  t29885 = t29882 + t29883 + t29884;
  t29904 = -1.*t29860*t341*t776;
  t29906 = t29862*t13082;
  t29907 = t29904 + t29906;
  t29910 = 3.e-6*t684*t29907;
  t29911 = t585*t29871;
  t29913 = t29910 + t29911;
  t29915 = t910*t29907;
  t29916 = t29915 + t29883;
  t29920 = 3.e-6*t29907*t14991;
  t29923 = -1.*t29871*t14991;
  t29925 = t29920 + t29923;
  t29962 = -1.*t341*t29862*t776;
  t29963 = -1.*t29860*t13082;
  t29964 = t29962 + t29963;
  t29966 = -1.*t29860*t341;
  t29967 = t29862*t776*t13082;
  t29968 = t29966 + t29967;
  t29974 = t585*t29964;
  t29975 = 3.e-6*t684*t29968;
  t29976 = t14407*t29862*t14991;
  t29977 = t29974 + t29975 + t29976;
  t29980 = 3.e-6*t684*t29964;
  t29982 = t910*t29968;
  t29985 = -3.e-6*t14407*t29862*t14991;
  t29986 = t29980 + t29982 + t29985;
  t29990 = t14407*t23814*t29862;
  t29991 = -1.*t29964*t14991;
  t29992 = 3.e-6*t29968*t14991;
  t29993 = t29990 + t29991 + t29992;
  t30055 = t29860*t14407*t341*t585;
  t30056 = -3.e-6*t29860*t14407*t684*t13082;
  t30057 = t29860*t776*t14991;
  t30058 = t30055 + t30056 + t30057;
  t30060 = 3.e-6*t29860*t14407*t341*t684;
  t30061 = -1.*t29860*t14407*t910*t13082;
  t30062 = -3.e-6*t29860*t776*t14991;
  t30063 = t30060 + t30061 + t30062;
  t30066 = t29860*t23814*t776;
  t30067 = -1.*t29860*t14407*t341*t14991;
  t30069 = -3.e-6*t29860*t14407*t13082*t14991;
  t30070 = t30066 + t30067 + t30069;
  t30110 = 3.e-6*t29860*t14407*t585;
  t30113 = 3.e-6*t29864*t14991;
  t30114 = -9.e-12*t29871*t14991;
  t30115 = t30110 + t30113 + t30114;
  t30106 = -1.*t29860*t14407*t585;
  t30107 = t30106 + t29878 + t29879;
  t30119 = -1.*t585*t29864;
  t30120 = 3.e-6*t585*t29871;
  t30121 = 1.000000000009*t29860*t14407*t14991;
  t30122 = t30119 + t30120 + t30121;
  t30151 = t14407*t341*t585*t29862;
  t30152 = -3.e-6*t14407*t684*t29862*t13082;
  t30153 = t29862*t776*t14991;
  t30154 = t30151 + t30152 + t30153;
  t30146 = t23814*t29862*t776;
  t30147 = -1.*t14407*t341*t29862*t14991;
  t30148 = -3.e-6*t14407*t29862*t13082*t14991;
  t30149 = t30146 + t30147 + t30148;
  t30140 = 3.e-6*t14407*t341*t684*t29862;
  t30141 = -1.*t14407*t910*t29862*t13082;
  t30142 = -3.e-6*t29862*t776*t14991;
  t30144 = t30140 + t30141 + t30142;
  t30178 = -3.e-6*t14407*t341*t684*t29862;
  t30179 = -1.*t14407*t585*t29862*t13082;
  t30180 = t30178 + t30179;
  t30183 = -1.*t14407*t341*t910*t29862;
  t30185 = t30183 + t30152;
  t30188 = -3.e-6*t14407*t341*t29862*t14991;
  t30189 = t14407*t29862*t13082*t14991;
  t30190 = t30188 + t30189;
  t29972 = -0.2000000000018*t14407*t29862*t14991;
  t30211 = -1.*t341*t585*t29862*t776;
  t30212 = 3.e-6*t684*t29862*t776*t13082;
  t30213 = t30211 + t30212 + t29976;
  t30215 = -3.e-6*t341*t684*t29862*t776;
  t30216 = t910*t29862*t776*t13082;
  t30217 = t30215 + t30216 + t29985;
  t30222 = t341*t29862*t776*t14991;
  t30223 = 3.e-6*t29862*t776*t13082*t14991;
  t30224 = t29990 + t30222 + t30223;
  t30052 = 0.2000000000018*t29860*t14407*t341*t684;
  t30053 = 6.000000000054e-7*t29860*t14407*t684*t13082;
  t30054 = -0.2000000000018*t29860*t776*t14991;
  t30059 = t30058*t29213;
  t30064 = t30063*t29296;
  t30065 = t29319*t30058;
  t30071 = t30070*t29326;
  t30076 = t30063*t29329;
  t30081 = t30065 + t30071 + t30076;
  t30086 = 0.2*t30081;
  t30087 = t29339*t30063;
  t30088 = t30058*t29346;
  t30089 = t30070*t29329;
  t30090 = t30087 + t30088 + t30089;
  t30091 = 0.100001*t30090;
  t30092 = t30070*t29373;
  t30094 = t29319*t30070;
  t30096 = t30063*t29346;
  t30097 = t30058*t29385;
  t30098 = t30094 + t30096 + t30097;
  t30099 = -0.3*t30098;
  t30100 = t30052 + t30053 + t30054 + t30059 + t30064 + t30086 + t30091 + t30092 + t30099;
  t30254 = -3.e-6*t585*t29862*t776;
  t30255 = 3.e-6*t14407*t341*t29862*t14991;
  t30256 = 9.e-12*t14407*t29862*t13082*t14991;
  t30257 = t30254 + t30255 + t30256;
  t30251 = t585*t29862*t776;
  t30252 = t30251 + t30147 + t30148;
  t30261 = -1.*t14407*t341*t585*t29862;
  t30263 = -3.e-6*t14407*t585*t29862*t13082;
  t30267 = -1.000000000009*t29862*t776*t14991;
  t30270 = t30261 + t30263 + t30267;
  t30297 = t29860*t341;
  t30298 = -1.*t29862*t776*t13082;
  t30299 = t30297 + t30298;
  t30311 = t585*t30299;
  t30313 = t29980 + t30311;
  t30306 = 3.e-6*t29964*t14991;
  t30307 = -1.*t30299*t14991;
  t30308 = t30306 + t30307;
  t30296 = t910*t29964;
  t30300 = 3.e-6*t684*t30299;
  t30303 = t30296 + t30300;
  t30176 = 6.000000000054e-7*t14407*t341*t684*t29862;
  t30177 = -0.2000000000018*t14407*t684*t29862*t13082;
  t30181 = t30180*t29213;
  t30186 = t30185*t29296;
  t30187 = t29319*t30180;
  t30191 = t30190*t29326;
  t30192 = t30185*t29329;
  t30193 = t30187 + t30191 + t30192;
  t30194 = 0.2*t30193;
  t30195 = t29339*t30185;
  t30196 = t30180*t29346;
  t30197 = t30190*t29329;
  t30198 = t30195 + t30196 + t30197;
  t30199 = 0.100001*t30198;
  t30200 = t30190*t29373;
  t30201 = t29319*t30190;
  t30202 = t30185*t29346;
  t30203 = t30180*t29385;
  t30204 = t30201 + t30202 + t30203;
  t30205 = -0.3*t30204;
  t30207 = t30176 + t30177 + t30181 + t30186 + t30194 + t30199 + t30200 + t30205;
  t29908 = -6.000000000054e-7*t684*t29907;
  t29909 = 0.2000000000018*t684*t29871;
  t29914 = t29913*t29213;
  t29917 = t29916*t29296;
  t29918 = t29319*t29913;
  t29926 = t29925*t29326;
  t29927 = t29916*t29329;
  t29929 = t29918 + t29926 + t29927;
  t29930 = 0.2*t29929;
  t29934 = t29339*t29916;
  t29944 = t29913*t29346;
  t29947 = t29925*t29329;
  t29949 = t29934 + t29944 + t29947;
  t29953 = 0.100001*t29949;
  t29954 = t29925*t29373;
  t29955 = t29319*t29925;
  t29956 = t29916*t29346;
  t29957 = t29913*t29385;
  t29958 = t29955 + t29956 + t29957;
  t29959 = -0.3*t29958;
  t29960 = t29908 + t29909 + t29914 + t29917 + t29930 + t29953 + t29954 + t29959;
  t29965 = 0.2000000000018*t684*t29964;
  t29970 = -6.000000000054e-7*t684*t29968;
  t30339 = t29974 + t29975;
  t30341 = t29980 + t29982;
  t30346 = t29991 + t29992;
  t30377 = -9.e-12*t29964*t14991;
  t30382 = 3.e-6*t30299*t14991;
  t30387 = t30377 + t30382;
  t30391 = 3.e-6*t585*t29964;
  t30392 = -1.*t585*t30299;
  t30393 = t30391 + t30392;
  t30414 = t341*t29862*t776;
  t30417 = t29860*t13082;
  t30418 = t30414 + t30417;
  t30429 = -1.*t14407*t585*t29862;
  t30430 = -1.*t30418*t14991;
  t30431 = t30429 + t30430 + t30382;
  t30412 = 3.e-6*t14407*t585*t29862;
  t30419 = 3.e-6*t30418*t14991;
  t30420 = -9.e-12*t30299*t14991;
  t30421 = t30412 + t30419 + t30420;
  t30423 = -1.*t585*t30418;
  t30425 = 3.e-6*t585*t30299;
  t30426 = 1.000000000009*t14407*t29862*t14991;
  t30427 = t30423 + t30425 + t30426;
  t30457 = t30423 + t30425 + t29976;
  t30459 = 3.e-6*t585*t30418;
  t30460 = -9.e-12*t585*t30299;
  t30461 = t30459 + t30460 + t29985;
  t30464 = 1.000000000009*t14407*t585*t29862;
  t30468 = t30418*t14991;
  t30472 = -3.e-6*t30299*t14991;
  t30476 = t30464 + t30468 + t30472;
  t30248 = -0.2000000000018*t585*t29862*t776;
  t30249 = 0.2000000000018*t14407*t341*t29862*t14991;
  t30250 = 6.000000000054e-7*t14407*t29862*t13082*t14991;
  t30253 = t30252*t29213;
  t30258 = t30257*t29296;
  t30259 = t29339*t30257;
  t30260 = t30252*t29346;
  t30271 = t30270*t29329;
  t30272 = t30259 + t30260 + t30271;
  t30274 = 0.100001*t30272;
  t30276 = t29319*t30252;
  t30277 = t30270*t29326;
  t30278 = t30257*t29329;
  t30280 = t30276 + t30277 + t30278;
  t30282 = 0.2*t30280;
  t30283 = t30270*t29373;
  t30286 = t29319*t30270;
  t30287 = t30257*t29346;
  t30288 = t30252*t29385;
  t30290 = t30286 + t30287 + t30288;
  t30291 = -0.3*t30290;
  t30293 = t30248 + t30249 + t30250 + t30253 + t30258 + t30274 + t30282 + t30283 + t30291;
  t30103 = 0.2000000000018*t29860*t14407*t585;
  t30104 = 0.2000000000018*t29864*t14991;
  t30105 = -6.000000000054e-7*t29871*t14991;
  t30108 = t30107*t29213;
  t30116 = t30115*t29296;
  t30117 = t29339*t30115;
  t30118 = t30107*t29346;
  t30123 = t30122*t29329;
  t30124 = t30117 + t30118 + t30123;
  t30125 = 0.100001*t30124;
  t30126 = t29319*t30107;
  t30127 = t30122*t29326;
  t30128 = t30115*t29329;
  t30129 = t30126 + t30127 + t30128;
  t30130 = 0.2*t30129;
  t30131 = t30122*t29373;
  t30132 = t29319*t30122;
  t30133 = t30115*t29346;
  t30134 = t30107*t29385;
  t30135 = t30132 + t30133 + t30134;
  t30136 = -0.3*t30135;
  t30137 = t30103 + t30104 + t30105 + t30108 + t30116 + t30125 + t30130 + t30131 + t30136;
  t30374 = -6.000000000054e-7*t29964*t14991;
  t30375 = 0.2000000000018*t30299*t14991;
  t30376 = t30308*t29213;
  t30388 = t30387*t29296;
  t30389 = t29339*t30387;
  t30390 = t30308*t29346;
  t30394 = t30393*t29329;
  t30395 = t30389 + t30390 + t30394;
  t30396 = 0.100001*t30395;
  t30397 = t29319*t30308;
  t30398 = t30393*t29326;
  t30399 = t30387*t29329;
  t30400 = t30397 + t30398 + t30399;
  t30401 = 0.2*t30400;
  t30402 = t30393*t29373;
  t30403 = t29319*t30393;
  t30404 = t30387*t29346;
  t30405 = t30308*t29385;
  t30406 = t30403 + t30404 + t30405;
  t30407 = -0.3*t30406;
  t30409 = t30374 + t30375 + t30376 + t30388 + t30396 + t30401 + t30402 + t30407;
  t30145 = t30144*t17820;
  t30150 = t30149*t25315;
  t30155 = t30154*t25870;
  t30157 = t30154*t26470;
  t30159 = t30149*t27556;
  t30160 = -1.8e-11*t30144*t17000;
  t30161 = t30157 + t30159 + t30160;
  t30162 = 0.100001*t30161;
  t30163 = t30149*t28837;
  t30164 = t30144*t27556;
  t30165 = -1.000000000009*t30154*t17000;
  t30166 = t30163 + t30164 + t30165;
  t30167 = 0.2*t30166;
  t30168 = t30154*t29068;
  t30170 = t30144*t26470;
  t30171 = -1.000000000009*t30149*t17000;
  t30172 = t30168 + t30170 + t30171;
  t30173 = -0.3*t30172;
  t30174 = t30145 + t30150 + t30155 + t30162 + t30167 + t30173;
  t29876 = t29875*t17820;
  t29881 = t29880*t25315;
  t29886 = t29885*t25870;
  t29887 = t29880*t28837;
  t29888 = t29875*t27556;
  t29889 = -1.000000000009*t29885*t17000;
  t29890 = t29887 + t29888 + t29889;
  t29891 = 0.2*t29890;
  t29892 = t29885*t26470;
  t29893 = t29880*t27556;
  t29894 = -1.8e-11*t29875*t17000;
  t29895 = t29892 + t29893 + t29894;
  t29896 = 0.100001*t29895;
  t29897 = t29885*t29068;
  t29898 = t29875*t26470;
  t29899 = -1.000000000009*t29880*t17000;
  t29900 = t29897 + t29898 + t29899;
  t29901 = -0.3*t29900;
  t29902 = t29876 + t29881 + t29886 + t29891 + t29896 + t29901;
  t30305 = t30303*t17820;
  t30309 = t30308*t25315;
  t30314 = t30313*t25870;
  t30315 = t30313*t26470;
  t30316 = t30308*t27556;
  t30318 = -1.8e-11*t30303*t17000;
  t30319 = t30315 + t30316 + t30318;
  t30320 = 0.100001*t30319;
  t30321 = t30308*t28837;
  t30322 = t30303*t27556;
  t30324 = -1.000000000009*t30313*t17000;
  t30326 = t30321 + t30322 + t30324;
  t30328 = 0.2*t30326;
  t30329 = t30313*t29068;
  t30330 = t30303*t26470;
  t30331 = -1.000000000009*t30308*t17000;
  t30332 = t30329 + t30330 + t30331;
  t30334 = -0.3*t30332;
  t30335 = t30305 + t30309 + t30314 + t30320 + t30328 + t30334;
  t30422 = t30421*t17820;
  t30428 = t30427*t25315;
  t30432 = t30431*t25870;
  t30433 = t30431*t29068;
  t30434 = t30421*t26470;
  t30435 = -1.000000000009*t30427*t17000;
  t30436 = t30433 + t30434 + t30435;
  t30437 = -0.3*t30436;
  t30439 = t30431*t26470;
  t30441 = t30427*t27556;
  t30442 = -1.8e-11*t30421*t17000;
  t30443 = t30439 + t30441 + t30442;
  t30444 = 0.100001*t30443;
  t30445 = t30427*t28837;
  t30446 = t30421*t27556;
  t30448 = -1.000000000009*t30431*t17000;
  t30449 = t30445 + t30446 + t30448;
  t30450 = 0.2*t30449;
  t30451 = t30422 + t30428 + t30432 + t30437 + t30444 + t30450;
  t29727 = 0.1000000000009*t15957;
  t29729 = t29728 + t29207;
  t29730 = 0.2*t29729;
  t29731 = -9.e-7*t26470;
  t29733 = t29727 + t29730 + t29731;
  t29739 = -1.62e-17*t15957;
  t29740 = 0.1*t17005;
  t29741 = 0.2*t26470;
  t29742 = t29739 + t29740 + t29741;
  t30513 = 3.e-6*t684*t30418;
  t30514 = t910*t30299;
  t30520 = 3.e-6*t14407*t29862*t14991;
  t30521 = t30513 + t30514 + t30520;
  t30509 = -1.*t14407*t23814*t29862;
  t30510 = t30509 + t30430 + t30382;
  t30526 = t585*t30418;
  t30527 = -1.*t14407*t29862*t14991;
  t30529 = t30526 + t30300 + t30527;
  t29749 = t29748 + t29207;
  t29759 = 0.2000000000018*t15957;
  t29760 = t29728 + t17000;
  t29762 = 0.1*t29760;
  t29763 = t29759 + t25173 + t29762;
  t29768 = t29748 + t17000;
  t30536 = t30521*t27556;
  t30664 = t30521*t17820;
  t30665 = t30510*t25315;
  t30667 = t30529*t25870;
  t30668 = t30510*t28837;
  t30670 = -1.000000000009*t30529*t17000;
  t30671 = t30668 + t30536 + t30670;
  t30672 = 0.2*t30671;
  t30673 = t30529*t26470;
  t30674 = t30510*t27556;
  t30676 = -1.8e-11*t30521*t17000;
  t30677 = t30673 + t30674 + t30676;
  t30678 = 0.100001*t30677;
  t30679 = t30529*t29068;
  t30681 = t30521*t26470;
  t30682 = -1.000000000009*t30510*t17000;
  t30683 = t30679 + t30681 + t30682;
  t30684 = -0.3*t30683;
  t30685 = t30664 + t30665 + t30667 + t30672 + t30678 + t30684;
  t30609 = -6.000000000054e-7*t684*t29964;
  t30610 = 0.2000000000018*t684*t30299;
  t30611 = t30313*t29213;
  t30612 = t30303*t29296;
  t30613 = t29319*t30313;
  t30615 = t30308*t29326;
  t30616 = t30303*t29329;
  t30617 = t30613 + t30615 + t30616;
  t30619 = 0.2*t30617;
  t30620 = t29339*t30303;
  t30621 = t30313*t29346;
  t30622 = t30308*t29329;
  t30624 = t30620 + t30621 + t30622;
  t30626 = 0.100001*t30624;
  t30627 = t30308*t29373;
  t30628 = t30303*t29346;
  t30630 = t30313*t29385;
  t30632 = t30397 + t30628 + t30630;
  t30633 = -0.3*t30632;
  t30634 = t30609 + t30610 + t30611 + t30612 + t30619 + t30626 + t30627 + t30633;
  t30555 = 0.2000000000018*t684*t29864;
  t30556 = -6.000000000054e-7*t684*t29871;
  t30558 = 0.2000000000018*t29860*t14407*t14991;
  t30559 = t29885*t29213;
  t30560 = t29875*t29296;
  t30561 = t29319*t29885;
  t30562 = t29880*t29326;
  t30563 = t29875*t29329;
  t30568 = t30561 + t30562 + t30563;
  t30569 = 0.2*t30568;
  t30570 = t29339*t29875;
  t30571 = t29885*t29346;
  t30572 = t29880*t29329;
  t30573 = t30570 + t30571 + t30572;
  t30574 = 0.100001*t30573;
  t30575 = t29880*t29373;
  t30576 = t29319*t29880;
  t30577 = t29875*t29346;
  t30578 = t29885*t29385;
  t30579 = t30576 + t30577 + t30578;
  t30580 = -0.3*t30579;
  t30581 = t30555 + t30556 + t30558 + t30559 + t30560 + t30569 + t30574 + t30575 + t30580;
  t30582 = 0.2000000000018*t14407*t341*t684*t29862;
  t30583 = 6.000000000054e-7*t14407*t684*t29862*t13082;
  t30584 = -0.2000000000018*t29862*t776*t14991;
  t30585 = t30154*t29213;
  t30587 = t30144*t29296;
  t30588 = t29319*t30154;
  t30589 = t30149*t29326;
  t30590 = t30144*t29329;
  t30591 = t30588 + t30589 + t30590;
  t30592 = 0.2*t30591;
  t30594 = t29339*t30144;
  t30595 = t30154*t29346;
  t30596 = t30149*t29329;
  t30598 = t30594 + t30595 + t30596;
  t30599 = 0.100001*t30598;
  t30601 = t30149*t29373;
  t30602 = t29319*t30149;
  t30603 = t30144*t29346;
  t30604 = t30154*t29385;
  t30605 = t30602 + t30603 + t30604;
  t30606 = -0.3*t30605;
  t30608 = t30582 + t30583 + t30584 + t30585 + t30587 + t30592 + t30599 + t30601 + t30606;
  t30636 = 0.2000000000018*t14407*t585*t29862;
  t30637 = 0.2000000000018*t30418*t14991;
  t30638 = -6.000000000054e-7*t30299*t14991;
  t30640 = t30431*t29213;
  t30641 = t30421*t29296;
  t30642 = t29339*t30421;
  t30644 = t30431*t29346;
  t30646 = t30427*t29329;
  t30647 = t30642 + t30644 + t30646;
  t30648 = 0.100001*t30647;
  t30650 = t29319*t30431;
  t30651 = t30427*t29326;
  t30652 = t30421*t29329;
  t30653 = t30650 + t30651 + t30652;
  t30654 = 0.2*t30653;
  t30656 = t30427*t29373;
  t30657 = t29319*t30427;
  t30658 = t30421*t29346;
  t30659 = t30431*t29385;
  t30661 = t30657 + t30658 + t30659;
  t30662 = -0.3*t30661;
  t30663 = t30636 + t30637 + t30638 + t30640 + t30641 + t30648 + t30654 + t30656 + t30662;
  t30700 = -1.*t29860*t23814*t776;
  t30701 = t29860*t14407*t341*t14991;
  t30702 = 3.e-6*t29860*t14407*t13082*t14991;
  t30704 = t30700 + t30701 + t30702;
  t30693 = -3.e-6*t29860*t14407*t341*t684;
  t30694 = t29860*t14407*t910*t13082;
  t30696 = 3.e-6*t29860*t776*t14991;
  t30698 = t30693 + t30694 + t30696;
  t30706 = -1.*t29860*t14407*t341*t585;
  t30708 = 3.e-6*t29860*t14407*t684*t13082;
  t30709 = -1.*t29860*t776*t14991;
  t30710 = t30706 + t30708 + t30709;
  t30737 = t29860*t14407*t585*t13082;
  t30738 = t30060 + t30737;
  t30741 = t29860*t14407*t341*t910;
  t30742 = t30741 + t30708;
  t30746 = 3.e-6*t29860*t14407*t341*t14991;
  t30747 = -1.*t29860*t14407*t13082*t14991;
  t30748 = t30746 + t30747;
  t30774 = t29860*t341*t585*t776;
  t30775 = -3.e-6*t29860*t684*t776*t13082;
  t30776 = t30774 + t30775 + t29884;
  t30778 = 3.e-6*t29860*t341*t684*t776;
  t30779 = -1.*t29860*t910*t776*t13082;
  t30780 = t30778 + t30779 + t29874;
  t30784 = -1.*t29860*t341*t776*t14991;
  t30785 = -3.e-6*t29860*t776*t13082*t14991;
  t30787 = t29877 + t30784 + t30785;
  t30849 = 3.e-6*t29860*t585*t776;
  t30850 = -3.e-6*t29860*t14407*t341*t14991;
  t30851 = -9.e-12*t29860*t14407*t13082*t14991;
  t30853 = t30849 + t30850 + t30851;
  t30846 = -1.*t29860*t585*t776;
  t30847 = t30846 + t30701 + t30702;
  t30857 = 3.e-6*t29860*t14407*t585*t13082;
  t30859 = 1.000000000009*t29860*t776*t14991;
  t30860 = t30055 + t30857 + t30859;
  t30883 = t341*t29862;
  t30885 = t29860*t776*t13082;
  t30886 = t30883 + t30885;
  t30895 = t585*t30886;
  t30896 = t29866 + t30895;
  t30891 = -1.*t30886*t14991;
  t30892 = t30113 + t30891;
  t30882 = t910*t29864;
  t30887 = 3.e-6*t684*t30886;
  t30888 = t30882 + t30887;
  t30734 = -6.000000000054e-7*t29860*t14407*t341*t684;
  t30736 = 0.2000000000018*t29860*t14407*t684*t13082;
  t30740 = t30738*t29213;
  t30743 = t30742*t29296;
  t30744 = t29319*t30738;
  t30750 = t30748*t29326;
  t30751 = t30742*t29329;
  t30752 = t30744 + t30750 + t30751;
  t30753 = 0.2*t30752;
  t30754 = t29339*t30742;
  t30757 = t30738*t29346;
  t30758 = t30748*t29329;
  t30759 = t30754 + t30757 + t30758;
  t30760 = 0.100001*t30759;
  t30762 = t30748*t29373;
  t30763 = t29319*t30748;
  t30764 = t30742*t29346;
  t30765 = t30738*t29385;
  t30766 = t30763 + t30764 + t30765;
  t30767 = -0.3*t30766;
  t30769 = t30734 + t30736 + t30740 + t30743 + t30753 + t30760 + t30762 + t30767;
  t30922 = t29882 + t29883;
  t30924 = t29866 + t29872;
  t30927 = t29878 + t29879;
  t30960 = -9.e-12*t29864*t14991;
  t30962 = 3.e-6*t30886*t14991;
  t30963 = t30960 + t30962;
  t30971 = 3.e-6*t585*t29864;
  t30972 = -1.*t585*t30886;
  t30973 = t30971 + t30972;
  t31016 = t29860*t14407*t585;
  t31017 = -1.*t29907*t14991;
  t31018 = t31016 + t31017 + t30962;
  t30993 = -3.e-6*t29860*t14407*t585;
  t30994 = -9.e-12*t30886*t14991;
  t30995 = t30993 + t29920 + t30994;
  t31004 = -1.*t585*t29907;
  t31008 = 3.e-6*t585*t30886;
  t31013 = -1.000000000009*t29860*t14407*t14991;
  t31014 = t31004 + t31008 + t31013;
  t31052 = t31004 + t31008 + t29884;
  t31054 = 3.e-6*t585*t29907;
  t31055 = -9.e-12*t585*t30886;
  t31056 = t31054 + t31055 + t29874;
  t31059 = -1.000000000009*t29860*t14407*t585;
  t31060 = t29907*t14991;
  t31061 = -3.e-6*t30886*t14991;
  t31062 = t31059 + t31060 + t31061;
  t30823 = 0.2000000000018*t29860*t585*t776;
  t30827 = -0.2000000000018*t29860*t14407*t341*t14991;
  t30835 = -6.000000000054e-7*t29860*t14407*t13082*t14991;
  t30848 = t30847*t29213;
  t30854 = t30853*t29296;
  t30855 = t29339*t30853;
  t30856 = t30847*t29346;
  t30861 = t30860*t29329;
  t30862 = t30855 + t30856 + t30861;
  t30863 = 0.100001*t30862;
  t30864 = t29319*t30847;
  t30866 = t30860*t29326;
  t30867 = t30853*t29329;
  t30868 = t30864 + t30866 + t30867;
  t30869 = 0.2*t30868;
  t30871 = t30860*t29373;
  t30872 = t29319*t30860;
  t30873 = t30853*t29346;
  t30874 = t30847*t29385;
  t30876 = t30872 + t30873 + t30874;
  t30877 = -0.3*t30876;
  t30878 = t30823 + t30827 + t30835 + t30848 + t30854 + t30863 + t30869 + t30871 + t30877;
  t30957 = -6.000000000054e-7*t29864*t14991;
  t30958 = 0.2000000000018*t30886*t14991;
  t30959 = t30892*t29213;
  t30964 = t30963*t29296;
  t30966 = t29339*t30963;
  t30967 = t30892*t29346;
  t30974 = t30973*t29329;
  t30975 = t30966 + t30967 + t30974;
  t30976 = 0.100001*t30975;
  t30977 = t29319*t30892;
  t30978 = t30973*t29326;
  t30979 = t30963*t29329;
  t30981 = t30977 + t30978 + t30979;
  t30982 = 0.2*t30981;
  t30983 = t30973*t29373;
  t30984 = t29319*t30973;
  t30985 = t30963*t29346;
  t30986 = t30892*t29385;
  t30987 = t30984 + t30985 + t30986;
  t30988 = -0.3*t30987;
  t30989 = t30957 + t30958 + t30959 + t30964 + t30976 + t30982 + t30983 + t30988;
  t30699 = t30698*t17820;
  t30705 = t30704*t25315;
  t30711 = t30710*t25870;
  t30712 = t30704*t28837;
  t30714 = t30698*t27556;
  t30715 = -1.000000000009*t30710*t17000;
  t30716 = t30712 + t30714 + t30715;
  t30718 = 0.2*t30716;
  t30719 = t30710*t26470;
  t30720 = t30704*t27556;
  t30721 = -1.8e-11*t30698*t17000;
  t30722 = t30719 + t30720 + t30721;
  t30724 = 0.100001*t30722;
  t30726 = t30710*t29068;
  t30727 = t30698*t26470;
  t30729 = -1.000000000009*t30704*t17000;
  t30730 = t30726 + t30727 + t30729;
  t30731 = -0.3*t30730;
  t30732 = t30699 + t30705 + t30711 + t30718 + t30724 + t30731;
  t30889 = t30888*t17820;
  t30893 = t30892*t25315;
  t30897 = t30896*t25870;
  t30898 = t30896*t26470;
  t30899 = t30892*t27556;
  t30901 = -1.8e-11*t30888*t17000;
  t30902 = t30898 + t30899 + t30901;
  t30903 = 0.100001*t30902;
  t30907 = t30892*t28837;
  t30908 = t30888*t27556;
  t30909 = -1.000000000009*t30896*t17000;
  t30911 = t30907 + t30908 + t30909;
  t30912 = 0.2*t30911;
  t30913 = t30896*t29068;
  t30914 = t30888*t26470;
  t30915 = -1.000000000009*t30892*t17000;
  t30916 = t30913 + t30914 + t30915;
  t30917 = -0.3*t30916;
  t30919 = t30889 + t30893 + t30897 + t30903 + t30912 + t30917;
  t30996 = t30995*t17820;
  t31015 = t31014*t25315;
  t31019 = t31018*t25870;
  t31020 = t31018*t29068;
  t31021 = t30995*t26470;
  t31022 = -1.000000000009*t31014*t17000;
  t31023 = t31020 + t31021 + t31022;
  t31024 = -0.3*t31023;
  t31025 = t31018*t26470;
  t31026 = t31014*t27556;
  t31027 = -1.8e-11*t30995*t17000;
  t31028 = t31025 + t31026 + t31027;
  t31029 = 0.100001*t31028;
  t31030 = t31014*t28837;
  t31031 = t30995*t27556;
  t31043 = -1.000000000009*t31018*t17000;
  t31046 = t31030 + t31031 + t31043;
  t31047 = 0.2*t31046;
  t31048 = t30996 + t31015 + t31019 + t31024 + t31029 + t31047;
  t31113 = t29860*t14407*t23814;
  t31115 = t31113 + t31017 + t30962;
  t31117 = t910*t30886;
  t31118 = -3.e-6*t29860*t14407*t14991;
  t31119 = t29910 + t31117 + t31118;
  t31122 = t585*t29907;
  t31124 = t29860*t14407*t14991;
  t31125 = t31122 + t30887 + t31124;
  t31127 = t31119*t27556;
  p_output1[0]=(t29395 + t29396 + t29397 + t29213*t29419 + t29296*t29436 + t29373*t29456 - 0.3*(t29385*t29419 + t29346*t29436 + t29319*t29456) + 0.2*(t29319*t29419 + t29329*t29436 + t29326*t29456) + 0.100001*(t29346*t29419 + t29339*t29436 + t29329*t29456))*var2[4] + t29393*var2[5] + t29529*var2[6] + t29074*var2[8];
  p_output1[1]=t29393*var2[4] + (t29395 + t29396 + t29213*t29582 + t29296*t29587 + t29373*t29590 - 0.3*(t29385*t29582 + t29346*t29587 + t29319*t29590) + 0.2*(t29319*t29582 + t29329*t29587 + t29326*t29590) + 0.100001*(t29346*t29582 + t29339*t29587 + t29329*t29590))*var2[5] + t29648*var2[6] + t29576*var2[8];
  p_output1[2]=t29529*var2[4] + t29648*var2[5] + (t29397 + t29213*t29693 + t29296*t29697 + t29373*t29701 - 0.3*(t29385*t29693 + t29346*t29697 + t29319*t29701) + 0.2*(t29319*t29693 + t29329*t29697 + t29326*t29701) + 0.100001*(t29346*t29693 + t29339*t29697 + t29329*t29701) + 6.000000000054e-7*t13082*t14407*t585 + 0.2000000000018*t14407*t341*t585)*var2[6] + t29689*var2[8];
  p_output1[3]=t29074*var2[4] + t29576*var2[5] + t29689*var2[6] + (t29726*t29733 + t29738*t29742 + 0.100001*(t17471*t29726 - 1.8e-11*t15957*t29738 + t27556*t29747) - 0.3*(-1.000000000009*t15957*t29726 + t29747*t29749 + t29751) + t29747*t29763 + 0.2*(t17471*t29738 - 1.000000000009*t15957*t29747 + t29726*t29768))*var2[8];
  p_output1[4]=1.;
  p_output1[5]=-0.2000000000018*t14407*t14991 + t25469*t29213 + t15946*t29296 + 0.2*(t25469*t29319 + t25139*t29326 + t15946*t29329) + 0.100001*(t25139*t29329 + t15946*t29339 + t25469*t29346) + t25139*t29373 - 0.3*(t25139*t29319 + t15946*t29346 + t25469*t29385) - 6.000000000054e-7*t13082*t684*t776 - 0.2000000000018*t341*t684*t776;
  p_output1[6]=t29296*t29534 + t29373*t29552 + t29213*t29559 + 0.2*(t29329*t29534 + t29326*t29552 + t29319*t29559) + 0.100001*(t29339*t29534 + t29329*t29552 + t29346*t29559) - 0.3*(t29346*t29534 + t29385*t29559 + t29624) - 0.2000000000018*t13082*t14407*t684 + 6.000000000054e-7*t14407*t341*t684;
  p_output1[7]=6.000000000054e-7*t13082*t14407*t14991 + t29296*t29654 + t29373*t29658 + t29213*t29662 + 0.2*(t29329*t29654 + t29326*t29658 + t29319*t29662) + 0.100001*(t29339*t29654 + t29329*t29658 + t29346*t29662) - 0.3*(t29346*t29654 + t29319*t29658 + t29385*t29662) + 0.2000000000018*t14407*t14991*t341 - 0.2000000000018*t585*t776;
  p_output1[8]=t25315*t29726 + t17820*t29738 + t25870*t29747 + 0.100001*(t27556*t29726 - 1.8e-11*t17000*t29738 + t26470*t29747) - 0.3*(-1.000000000009*t17000*t29726 + t26470*t29738 + t29068*t29747) + 0.2*(t28837*t29726 - 1.000000000009*t17000*t29747 + t29751);
  p_output1[9]=(t29965 + t29970 + t29972 + t29213*t29977 + t29296*t29986 + t29373*t29993 - 0.3*(t29385*t29977 + t29346*t29986 + t29319*t29993) + 0.2*(t29319*t29977 + t29329*t29986 + t29326*t29993) + 0.100001*(t29346*t29977 + t29339*t29986 + t29329*t29993))*var2[3] + t30100*var2[4] + t29960*var2[5] + t30137*var2[6] + t29902*var2[8];
  p_output1[10]=t30100*var2[3] + (t29972 + t29213*t30213 + t29296*t30217 + t29373*t30224 - 0.3*(t29385*t30213 + t29346*t30217 + t29319*t30224) + 0.2*(t29319*t30213 + t29329*t30217 + t29326*t30224) + 0.100001*(t29346*t30213 + t29339*t30217 + t29329*t30224) - 6.000000000054e-7*t13082*t29862*t684*t776 - 0.2000000000018*t29862*t341*t684*t776)*var2[4] + t30207*var2[5] + t30293*var2[6] + t30174*var2[8];
  p_output1[11]=t29960*var2[3] + t30207*var2[4] + (t29965 + t29970 + t29213*t30339 + t29296*t30341 + t29373*t30346 - 0.3*(t29385*t30339 + t29346*t30341 + t29319*t30346) + 0.2*(t29319*t30339 + t29329*t30341 + t29326*t30346) + 0.100001*(t29346*t30339 + t29339*t30341 + t29329*t30346))*var2[5] + t30409*var2[6] + t30335*var2[8];
  p_output1[12]=t30137*var2[3] + t30293*var2[4] + t30409*var2[5] + (t29972 + t29213*t30457 + t29296*t30461 + t29373*t30476 - 0.3*(t29385*t30457 + t29346*t30461 + t29319*t30476) + 0.2*(t29319*t30457 + t29329*t30461 + t29326*t30476) + 0.100001*(t29346*t30457 + t29339*t30461 + t29329*t30476) - 6.000000000054e-7*t30299*t585 + 0.2000000000018*t30418*t585)*var2[6] + t30451*var2[8];
  p_output1[13]=t29902*var2[3] + t30174*var2[4] + t30335*var2[5] + t30451*var2[6] + (t29733*t30510 + t29742*t30521 + t29763*t30529 + 0.2*(t29768*t30510 + t17471*t30521 - 1.000000000009*t15957*t30529) + 0.100001*(t17471*t30510 - 1.8e-11*t15957*t30521 + t27556*t30529) - 0.3*(-1.000000000009*t15957*t30510 + t29749*t30529 + t30536))*var2[8];
  p_output1[14]=1.;
  p_output1[15]=t30581;
  p_output1[16]=t30608;
  p_output1[17]=t30634;
  p_output1[18]=t30663;
  p_output1[19]=t30685;
  p_output1[20]=t30581*var2[3] + t30608*var2[4] + t30634*var2[5] + t30663*var2[6] + t30685*var2[8];
  p_output1[21]=t30608*var2[3] + (t30558 + t29213*t30776 + t29296*t30780 + t29373*t30787 - 0.3*(t29385*t30776 + t29346*t30780 + t29319*t30787) + 0.2*(t29319*t30776 + t29329*t30780 + t29326*t30787) + 0.100001*(t29346*t30776 + t29339*t30780 + t29329*t30787) + 6.000000000054e-7*t13082*t29860*t684*t776 + 0.2000000000018*t29860*t341*t684*t776)*var2[4] + t30769*var2[5] + t30878*var2[6] + t30732*var2[8];
  p_output1[22]=t30634*var2[3] + t30769*var2[4] + (t30555 + t30556 + t29213*t30922 + t29296*t30924 + t29373*t30927 - 0.3*(t29385*t30922 + t29346*t30924 + t29319*t30927) + 0.2*(t29319*t30922 + t29329*t30924 + t29326*t30927) + 0.100001*(t29346*t30922 + t29339*t30924 + t29329*t30927))*var2[5] + t30989*var2[6] + t30919*var2[8];
  p_output1[23]=t30663*var2[3] + t30878*var2[4] + t30989*var2[5] + (t30558 + t29213*t31052 + t29296*t31056 + t29373*t31062 - 0.3*(t29385*t31052 + t29346*t31056 + t29319*t31062) + 0.2*(t29319*t31052 + t29329*t31056 + t29326*t31062) + 0.100001*(t29346*t31052 + t29339*t31056 + t29329*t31062) + 0.2000000000018*t29907*t585 - 6.000000000054e-7*t30886*t585)*var2[6] + t31048*var2[8];
  p_output1[24]=t30685*var2[3] + t30732*var2[4] + t30919*var2[5] + t31048*var2[6] + (t29733*t31115 + t29742*t31119 + t29763*t31125 + 0.2*(t29768*t31115 + t17471*t31119 - 1.000000000009*t15957*t31125) + 0.100001*(t17471*t31115 - 1.8e-11*t15957*t31119 + t27556*t31125) - 0.3*(-1.000000000009*t15957*t31115 + t29749*t31125 + t31127))*var2[8];
  p_output1[25]=1.;
  p_output1[26]=0.2000000000018*t14407*t14991*t29862 + t29373*t30510 + t29296*t30521 + t29213*t30529 + 0.2*(t29326*t30510 + t29329*t30521 + t29319*t30529) + 0.100001*(t29329*t30510 + t29339*t30521 + t29346*t30529) - 0.3*(t29319*t30510 + t29346*t30521 + t29385*t30529) - 6.000000000054e-7*t30299*t684 + 0.2000000000018*t30418*t684;
  p_output1[27]=t29296*t30698 + t29373*t30704 + t29213*t30710 + 0.2*(t29329*t30698 + t29326*t30704 + t29319*t30710) + 0.100001*(t29339*t30698 + t29329*t30704 + t29346*t30710) - 0.3*(t29346*t30698 + t29319*t30704 + t29385*t30710) - 6.000000000054e-7*t13082*t14407*t29860*t684 - 0.2000000000018*t14407*t29860*t341*t684 + 0.2000000000018*t14991*t29860*t776;
  p_output1[28]=t29296*t30888 + t29373*t30892 + t29213*t30896 + 0.2*(t29329*t30888 + t29326*t30892 + t29319*t30896) + 0.100001*(t29339*t30888 + t29329*t30892 + t29346*t30896) - 0.3*(t29346*t30888 + t29385*t30896 + t30977) - 6.000000000054e-7*t29864*t684 + 0.2000000000018*t30886*t684;
  p_output1[29]=0.2000000000018*t14991*t29907 - 6.000000000054e-7*t14991*t30886 + t29296*t30995 + t29373*t31014 + t29213*t31018 + 0.2*(t29329*t30995 + t29326*t31014 + t29319*t31018) + 0.100001*(t29339*t30995 + t29329*t31014 + t29346*t31018) - 0.3*(t29346*t30995 + t29319*t31014 + t29385*t31018) - 0.2000000000018*t14407*t29860*t585;
  p_output1[30]=t25315*t31115 + t17820*t31119 + t25870*t31125 + 0.100001*(t27556*t31115 - 1.8e-11*t17000*t31119 + t26470*t31125) - 0.3*(-1.000000000009*t17000*t31115 + t26470*t31119 + t29068*t31125) + 0.2*(t28837*t31115 - 1.000000000009*t17000*t31125 + t31127);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_LeftFrontFoot_FrontStance.hh"

namespace FrontStance
{

void J_dh_LeftFrontFoot_FrontStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
