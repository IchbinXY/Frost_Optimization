/*
 * Automatically Generated from Mathematica.
 * Wed 29 May 2019 15:17:01 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t16623;
  double t16757;
  double t16795;
  double t16811;
  double t18030;
  double t18066;
  double t18187;
  double t17664;
  double t16429;
  double t17871;
  double t17368;
  double t18031;
  double t18197;
  double t21085;
  double t21091;
  double t24228;
  double t24365;
  double t24526;
  double t25173;
  double t25191;
  double t24032;
  double t24036;
  double t24084;
  double t24204;
  double t24208;
  double t24226;
  double t26177;
  double t16830;
  double t16833;
  double t16834;
  double t17389;
  double t17968;
  double t18001;
  double t25228;
  double t26216;
  double t26257;
  double t26187;
  double t26829;
  double t27438;
  double t27441;
  double t26790;
  double t26791;
  double t26797;
  double t27379;
  double t27542;
  double t27592;
  double t27614;
  double t27604;
  double t27605;
  double t27609;
  double t27619;
  double t26826;
  double t27595;
  double t27378;
  double t27600;
  double t27602;
  double t27665;
  double t27610;
  double t26831;
  double t27424;
  double t27431;
  double t27442;
  double t27445;
  double t27593;
  double t27594;
  double t27596;
  double t27597;
  double t27598;
  double t27779;
  double t27782;
  double t27786;
  double t27791;
  double t27611;
  double t27794;
  double t27797;
  double t27800;
  double t27803;
  double t27635;
  double t27644;
  double t27825;
  double t27828;
  double t27829;
  double t27830;
  double t27701;
  double t27702;
  double t27703;
  double t27704;
  double t27705;
  double t27710;
  double t27868;
  double t27869;
  double t27870;
  double t27871;
  double t27864;
  double t27865;
  double t27881;
  double t27886;
  double t27887;
  double t27888;
  double t18248;
  double t21166;
  double t23216;
  double t23428;
  double t24227;
  double t24284;
  double t24313;
  double t24323;
  double t24353;
  double t25212;
  double t25972;
  double t26129;
  double t26149;
  double t26175;
  double t27950;
  double t27951;
  double t27946;
  double t27947;
  double t27948;
  double t27934;
  double t27942;
  double t27943;
  double t26259;
  double t26329;
  double t27760;
  double t27767;
  double t27979;
  double t27981;
  double t27984;
  double t26783;
  double t26784;
  double t27533;
  double t27599;
  double t27603;
  double t27613;
  double t27620;
  double t27625;
  double t27628;
  double t27645;
  double t27680;
  double t27683;
  double t27699;
  double t27700;
  double t27706;
  double t27708;
  double t27709;
  double t27711;
  double t27715;
  double t27721;
  double t27722;
  double t28007;
  double t28008;
  double t28011;
  double t28015;
  double t28016;
  double t28017;
  double t28065;
  double t28066;
  double t28071;
  double t28049;
  double t28050;
  double t28051;
  double t28052;
  double t28054;
  double t28055;
  double t28058;
  double t27775;
  double t28112;
  double t28115;
  double t28116;
  double t28117;
  double t28120;
  double t28121;
  double t28004;
  double t28005;
  double t28006;
  double t28012;
  double t28013;
  double t28014;
  double t28018;
  double t28023;
  double t28028;
  double t28029;
  double t28034;
  double t28035;
  double t28036;
  double t28037;
  double t28038;
  double t28040;
  double t28041;
  double t28043;
  double t28044;
  double t28045;
  double t28046;
  double t27861;
  double t27862;
  double t27863;
  double t27866;
  double t27874;
  double t27879;
  double t27880;
  double t27889;
  double t27890;
  double t27891;
  double t27892;
  double t27893;
  double t27894;
  double t27896;
  double t27897;
  double t27898;
  double t27899;
  double t27901;
  double t27902;
  double t27903;
  double t27904;
  double t27915;
  double t28053;
  double t28064;
  double t28075;
  double t28076;
  double t28077;
  double t28079;
  double t28080;
  double t28081;
  double t28084;
  double t28085;
  double t28086;
  double t28089;
  double t28094;
  double t28097;
  double t28102;
  double t28105;
  double t28106;
  double t28107;
  double t28108;
  double t27944;
  double t27949;
  double t27952;
  double t27953;
  double t27954;
  double t27955;
  double t27956;
  double t27957;
  double t27958;
  double t27959;
  double t27960;
  double t27963;
  double t27967;
  double t27968;
  double t27972;
  double t27973;
  double t27974;
  double t27975;
  double t27977;
  double t23575;
  double t24359;
  double t26176;
  double t26188;
  double t26217;
  double t26239;
  double t26249;
  double t26255;
  double t26265;
  double t26302;
  double t26325;
  double t26326;
  double t26328;
  double t26367;
  double t26374;
  double t26404;
  double t26717;
  double t26725;
  double t26765;
  double t28150;
  double t28151;
  double t28161;
  double t28162;
  double t28206;
  double t28207;
  double t28214;
  double t28215;
  double t28216;
  double t28154;
  double t28217;
  double t28220;
  double t28427;
  double t28425;
  double t28426;
  double t28428;
  double t28429;
  double t28442;
  double t28443;
  double t28444;
  double t28449;
  double t28450;
  double t28451;
  double t28452;
  double t28441;
  double t28445;
  double t28446;
  double t28447;
  double t28454;
  double t28455;
  double t28456;
  double t28457;
  double t28480;
  double t28481;
  double t28482;
  double t28486;
  double t28487;
  double t28489;
  double t28491;
  double t28534;
  double t28564;
  double t28565;
  double t28566;
  double t28588;
  double t28589;
  double t28590;
  double t28593;
  double t28595;
  double t28598;
  double t28613;
  double t28614;
  double t28616;
  double t28617;
  double t28619;
  double t28620;
  double t28621;
  double t28622;
  double t28625;
  double t28626;
  double t28627;
  double t28628;
  double t28667;
  double t28668;
  double t28669;
  double t28670;
  double t28672;
  double t28673;
  double t28674;
  double t28675;
  double t28683;
  double t28684;
  double t28685;
  double t28686;
  double t28744;
  double t28748;
  double t28751;
  double t28756;
  double t28736;
  double t28737;
  double t28762;
  double t28763;
  double t28766;
  double t28768;
  double t28895;
  double t28901;
  double t28904;
  double t28905;
  double t28885;
  double t28886;
  double t28888;
  double t28893;
  double t28872;
  double t28875;
  double t28876;
  double t28879;
  double t28960;
  double t28966;
  double t28967;
  double t28971;
  double t28978;
  double t28988;
  double t28989;
  double t28992;
  double t28600;
  double t29077;
  double t29090;
  double t29095;
  double t29099;
  double t29134;
  double t29135;
  double t29204;
  double t29205;
  double t29207;
  double t28664;
  double t28665;
  double t28666;
  double t28671;
  double t28678;
  double t28680;
  double t28687;
  double t28688;
  double t28689;
  double t28691;
  double t28692;
  double t28694;
  double t28697;
  double t28708;
  double t28714;
  double t28715;
  double t28717;
  double t28718;
  double t28719;
  double t28722;
  double t28723;
  double t28726;
  double t29439;
  double t29453;
  double t29454;
  double t29456;
  double t29430;
  double t29435;
  double t29490;
  double t29491;
  double t29492;
  double t29493;
  double t29524;
  double t29525;
  double t29526;
  double t29590;
  double t29609;
  double t29575;
  double t29576;
  double t29582;
  double t29523;
  double t29572;
  double t29573;
  double t28956;
  double t28959;
  double t28968;
  double t28979;
  double t28981;
  double t28997;
  double t28999;
  double t29000;
  double t29001;
  double t29033;
  double t29035;
  double t29041;
  double t29042;
  double t29046;
  double t29047;
  double t29048;
  double t29062;
  double t29068;
  double t29069;
  double t29070;
  double t29071;
  double t28483;
  double t28485;
  double t28490;
  double t28536;
  double t28538;
  double t28568;
  double t28569;
  double t28570;
  double t28572;
  double t28573;
  double t28574;
  double t28575;
  double t28577;
  double t28578;
  double t28579;
  double t28580;
  double t28582;
  double t28583;
  double t28584;
  double t28585;
  double t28586;
  double t28591;
  double t28599;
  double t33938;
  double t36513;
  double t36700;
  double t36805;
  double t36897;
  double t36901;
  double t36924;
  double t36925;
  double t36926;
  double t37025;
  double t37026;
  double t37027;
  double t37048;
  double t37049;
  double t37050;
  double t37024;
  double t37029;
  double t37035;
  double t37039;
  double t37043;
  double t37044;
  double t37045;
  double t37046;
  double t37851;
  double t38002;
  double t38006;
  double t38018;
  double t38086;
  double t38115;
  double t38121;
  double t38122;
  double t29415;
  double t29419;
  double t29429;
  double t29436;
  double t29486;
  double t29487;
  double t29489;
  double t29494;
  double t29495;
  double t29496;
  double t29497;
  double t29498;
  double t29499;
  double t29500;
  double t29501;
  double t29502;
  double t29503;
  double t29506;
  double t29511;
  double t29513;
  double t29514;
  double t29520;
  double t28731;
  double t28733;
  double t28735;
  double t28739;
  double t28757;
  double t28758;
  double t28760;
  double t28772;
  double t28780;
  double t28790;
  double t28796;
  double t28798;
  double t28801;
  double t28804;
  double t28831;
  double t28832;
  double t28833;
  double t28837;
  double t28838;
  double t28858;
  double t28859;
  double t28864;
  double t36749;
  double t36750;
  double t36802;
  double t36902;
  double t36908;
  double t36916;
  double t36929;
  double t36934;
  double t36935;
  double t36936;
  double t36937;
  double t36938;
  double t36940;
  double t36941;
  double t36942;
  double t36943;
  double t36944;
  double t36946;
  double t36947;
  double t36948;
  double t36951;
  double t28881;
  double t28894;
  double t28906;
  double t28907;
  double t28911;
  double t28917;
  double t28921;
  double t28922;
  double t28924;
  double t28930;
  double t28932;
  double t28936;
  double t28939;
  double t28942;
  double t28943;
  double t28944;
  double t28946;
  double t28947;
  double t28948;
  double t28448;
  double t28453;
  double t28458;
  double t28459;
  double t28460;
  double t28461;
  double t28462;
  double t28463;
  double t28464;
  double t28465;
  double t28466;
  double t28468;
  double t28469;
  double t28470;
  double t28471;
  double t28472;
  double t28473;
  double t28477;
  double t28478;
  double t29574;
  double t29587;
  double t29610;
  double t29611;
  double t29612;
  double t29613;
  double t29614;
  double t29615;
  double t29616;
  double t29617;
  double t29618;
  double t29619;
  double t29629;
  double t29635;
  double t29639;
  double t29641;
  double t29647;
  double t29648;
  double t29650;
  double t37042;
  double t37047;
  double t37051;
  double t37057;
  double t37058;
  double t37144;
  double t37388;
  double t37751;
  double t37753;
  double t37755;
  double t37758;
  double t37781;
  double t37794;
  double t37798;
  double t37799;
  double t37801;
  double t37804;
  double t37805;
  double t37806;
  double t28152;
  double t28155;
  double t28156;
  double t28157;
  double t28159;
  double t28208;
  double t28209;
  double t28210;
  double t28211;
  double t38334;
  double t38339;
  double t38342;
  double t38343;
  double t38331;
  double t38332;
  double t38350;
  double t38351;
  double t38352;
  double t28218;
  double t28231;
  double t28232;
  double t28233;
  double t28234;
  double t28238;
  double t38361;
  double t38566;
  double t38568;
  double t38570;
  double t38571;
  double t38572;
  double t38573;
  double t38574;
  double t38575;
  double t38576;
  double t38577;
  double t38579;
  double t38580;
  double t38581;
  double t38583;
  double t38584;
  double t38585;
  double t38588;
  double t38589;
  double t38485;
  double t38488;
  double t38489;
  double t38490;
  double t38492;
  double t38495;
  double t38499;
  double t38503;
  double t38504;
  double t38506;
  double t38507;
  double t38509;
  double t38511;
  double t38515;
  double t38516;
  double t38517;
  double t38518;
  double t38524;
  double t38525;
  double t38526;
  double t38395;
  double t38399;
  double t38401;
  double t38413;
  double t38414;
  double t38415;
  double t38420;
  double t38422;
  double t38423;
  double t38425;
  double t38426;
  double t38427;
  double t38428;
  double t38429;
  double t38430;
  double t38431;
  double t38433;
  double t38434;
  double t38435;
  double t38436;
  double t38438;
  double t38439;
  double t38441;
  double t38442;
  double t38446;
  double t38451;
  double t38452;
  double t38456;
  double t38457;
  double t38459;
  double t38460;
  double t38462;
  double t38463;
  double t38466;
  double t38468;
  double t38472;
  double t38473;
  double t38474;
  double t38475;
  double t38476;
  double t38479;
  double t38481;
  double t38482;
  double t38484;
  double t38527;
  double t38529;
  double t38531;
  double t38532;
  double t38535;
  double t38536;
  double t38537;
  double t38538;
  double t38539;
  double t38541;
  double t38542;
  double t38545;
  double t38546;
  double t38548;
  double t38553;
  double t38555;
  double t38559;
  double t38560;
  double t38561;
  double t38562;
  double t38563;
  double t38564;
  double t38616;
  double t38617;
  double t38619;
  double t38622;
  double t38603;
  double t38606;
  double t38611;
  double t38612;
  double t38633;
  double t38634;
  double t38636;
  double t38637;
  double t38685;
  double t38686;
  double t38688;
  double t38689;
  double t38693;
  double t38694;
  double t38695;
  double t38727;
  double t38728;
  double t38729;
  double t38733;
  double t38737;
  double t38738;
  double t38742;
  double t38744;
  double t38745;
  double t38781;
  double t38782;
  double t38784;
  double t38785;
  double t38778;
  double t38779;
  double t38792;
  double t38793;
  double t38794;
  double t38829;
  double t38830;
  double t38834;
  double t38847;
  double t38850;
  double t38841;
  double t38843;
  double t38826;
  double t38836;
  double t38837;
  double t38674;
  double t38676;
  double t38687;
  double t38691;
  double t38692;
  double t38698;
  double t38700;
  double t38703;
  double t38704;
  double t38705;
  double t38706;
  double t38708;
  double t38709;
  double t38710;
  double t38711;
  double t38712;
  double t38716;
  double t38718;
  double t38719;
  double t38721;
  double t38722;
  double t38892;
  double t38895;
  double t38898;
  double t38928;
  double t38929;
  double t38930;
  double t38936;
  double t38937;
  double t38938;
  double t38986;
  double t38987;
  double t38989;
  double t38964;
  double t38966;
  double t38967;
  double t38972;
  double t38978;
  double t38980;
  double t38982;
  double t39021;
  double t39023;
  double t39025;
  double t39026;
  double t39029;
  double t39030;
  double t39031;
  double t39032;
  double t38773;
  double t38774;
  double t38775;
  double t38780;
  double t38786;
  double t38787;
  double t38791;
  double t38796;
  double t38799;
  double t38802;
  double t38803;
  double t38805;
  double t38807;
  double t38810;
  double t38811;
  double t38812;
  double t38815;
  double t38816;
  double t38817;
  double t38818;
  double t38820;
  double t38822;
  double t38925;
  double t38926;
  double t38927;
  double t38932;
  double t38934;
  double t38935;
  double t38939;
  double t38940;
  double t38941;
  double t38942;
  double t38943;
  double t38944;
  double t38948;
  double t38949;
  double t38950;
  double t38952;
  double t38953;
  double t38954;
  double t38955;
  double t38958;
  double t38959;
  double t38614;
  double t38631;
  double t38638;
  double t38642;
  double t38643;
  double t38644;
  double t38647;
  double t38648;
  double t38649;
  double t38650;
  double t38652;
  double t38653;
  double t38654;
  double t38655;
  double t38656;
  double t38658;
  double t38664;
  double t38665;
  double t38667;
  double t38840;
  double t38846;
  double t38854;
  double t38855;
  double t38857;
  double t38858;
  double t38861;
  double t38865;
  double t38868;
  double t38870;
  double t38871;
  double t38874;
  double t38875;
  double t38877;
  double t38878;
  double t38879;
  double t38882;
  double t38883;
  double t38888;
  double t38970;
  double t38984;
  double t38990;
  double t38991;
  double t38992;
  double t38993;
  double t38995;
  double t38997;
  double t38998;
  double t38999;
  double t39001;
  double t39002;
  double t39003;
  double t39004;
  double t39006;
  double t39007;
  double t39008;
  double t39009;
  double t39011;
  double t39078;
  double t39079;
  double t39081;
  double t39082;
  double t39083;
  double t39088;
  double t39090;
  double t39092;
  double t39096;
  t16623 = Cos(var1[6]);
  t16757 = -1.*t16623;
  t16795 = 1. + t16757;
  t16811 = Sin(var1[4]);
  t18030 = Cos(var1[8]);
  t18066 = Sin(var1[8]);
  t18187 = -3.e-6*t18066;
  t17664 = Cos(var1[4]);
  t16429 = Cos(var1[5]);
  t17871 = Sin(var1[6]);
  t17368 = Sin(var1[5]);
  t18031 = -3.e-6*t18030;
  t18197 = t18031 + t18187;
  t21085 = 3.e-6*t18030;
  t21091 = t21085 + t18187;
  t24228 = -9.e-12*t18066;
  t24365 = -1.*t16429*t16623*t16811;
  t24526 = 3.e-6*t16795*t16811*t17368;
  t25173 = t17664*t17871;
  t25191 = t24365 + t24526 + t25173;
  t24032 = -1.000000000009*t16795;
  t24036 = 1. + t24032;
  t24084 = t17664*t24036;
  t24204 = t16429*t16811*t17871;
  t24208 = 3.e-6*t16811*t17368*t17871;
  t24226 = t24084 + t24204 + t24208;
  t26177 = 3.e-6*t18066;
  t16830 = -3.e-6*t16429*t16795*t16811;
  t16833 = -9.e-12*t16795;
  t16834 = 1. + t16833;
  t17389 = t16834*t16811*t17368;
  t17968 = -3.e-6*t17664*t17871;
  t18001 = t16830 + t17389 + t17968;
  t25228 = -1.*t18030;
  t26216 = t21085 + t26177;
  t26257 = 9.e-12*t18066;
  t26187 = t18031 + t26177;
  t26829 = 1. + t25228;
  t27438 = -3.e-6*t26829;
  t27441 = t27438 + t26177;
  t26790 = 3.e-6*t16429*t16795*t16811;
  t26791 = t16623*t16811*t17368;
  t26797 = t26790 + t26791;
  t27379 = -1.*t18066;
  t27542 = t16429*t16834*t16811;
  t27592 = t27542 + t24526;
  t27614 = 3.e-6*t26829;
  t27604 = 3.e-6*t16429*t16811*t17871;
  t27605 = -1.*t16811*t17368*t17871;
  t27609 = t27604 + t27605;
  t27619 = t27614 + t26177;
  t26826 = 9.e-13*var1[8];
  t27595 = t27438 + t18187;
  t27378 = -9.e-12*t26829;
  t27600 = -1.000000000009*t26829;
  t27602 = 1. + t27600;
  t27665 = t27614 + t18187;
  t27610 = 9.e-12*t26829;
  t26831 = 0.2000000000018*t26829;
  t27424 = t27378 + t27379;
  t27431 = 0.1*t27424;
  t27442 = -9.e-7*t27441;
  t27445 = t26826 + t26831 + t27431 + t27442;
  t27593 = 3.e-7*var1[8];
  t27594 = -1.62e-17*t26829;
  t27596 = 0.2*t27595;
  t27597 = 0.1*t27441;
  t27598 = t27593 + t27594 + t27596 + t27597;
  t27779 = -1.*t17664*t16429*t16623;
  t27782 = 3.e-6*t17664*t16795*t17368;
  t27786 = -1.*t16811*t17871;
  t27791 = t27779 + t27782 + t27786;
  t27611 = t27610 + t27379;
  t27794 = -3.e-6*t17664*t16429*t16795;
  t27797 = t17664*t16834*t17368;
  t27800 = 3.e-6*t16811*t17871;
  t27803 = t27794 + t27797 + t27800;
  t27635 = -1.8e-11*t26829;
  t27644 = 1. + t27635;
  t27825 = -1.*t24036*t16811;
  t27828 = t17664*t16429*t17871;
  t27829 = 3.e-6*t17664*t17368*t17871;
  t27830 = t27825 + t27828 + t27829;
  t27701 = 0.1000000000009*t26829;
  t27702 = -9.e-7*t27595;
  t27703 = t27378 + t18066;
  t27704 = 0.2*t27703;
  t27705 = t26826 + t27701 + t27702 + t27704;
  t27710 = t27610 + t18066;
  t27868 = -3.e-6*t17664*t16623;
  t27869 = -3.e-6*t16429*t16811*t17871;
  t27870 = -9.e-12*t16811*t17368*t17871;
  t27871 = t27868 + t27869 + t27870;
  t27864 = t17664*t16623;
  t27865 = t27864 + t24204 + t24208;
  t27881 = t16429*t16623*t16811;
  t27886 = 3.e-6*t16623*t16811*t17368;
  t27887 = -1.000000000009*t17664*t17871;
  t27888 = t27881 + t27886 + t27887;
  t18248 = 0.2*t18197;
  t21166 = 0.1*t21091;
  t23216 = -1.62e-17*t18066;
  t23428 = 3.e-7 + t18248 + t21166 + t23216;
  t24227 = -9.e-7*t18197;
  t24284 = t18030 + t24228;
  t24313 = 0.2*t24284;
  t24323 = 0.1000000000009*t18066;
  t24353 = 9.e-13 + t24227 + t24313 + t24323;
  t25212 = -9.e-7*t21091;
  t25972 = t25228 + t24228;
  t26129 = 0.1*t25972;
  t26149 = 0.2000000000018*t18066;
  t26175 = 9.e-13 + t25212 + t26129 + t26149;
  t27950 = -1.*t17664*t16623*t17368;
  t27951 = t27794 + t27950;
  t27946 = -3.e-6*t17664*t16429*t17871;
  t27947 = t17664*t17368*t17871;
  t27948 = t27946 + t27947;
  t27934 = -1.*t17664*t16429*t16834;
  t27942 = -3.e-6*t17664*t16795*t17368;
  t27943 = t27934 + t27942;
  t26259 = t25228 + t26257;
  t26329 = t18030 + t26257;
  t27760 = -0.2000000000018*t17664*t16429*t16795;
  t27767 = -6.000000000054e-7*t17664*t16795*t17368;
  t27979 = t27779 + t27782;
  t27981 = t27794 + t27797;
  t27984 = t27828 + t27829;
  t26783 = -6.000000000054e-7*t16429*t16795*t16811;
  t26784 = 0.2000000000018*t16795*t16811*t17368;
  t27533 = t26797*t27445;
  t27599 = t27592*t27598;
  t27603 = t27602*t26797;
  t27613 = t27609*t27611;
  t27620 = t27592*t27619;
  t27625 = t27603 + t27613 + t27620;
  t27628 = 0.2*t27625;
  t27645 = t27644*t27592;
  t27680 = t26797*t27665;
  t27683 = t27609*t27619;
  t27699 = t27645 + t27680 + t27683;
  t27700 = 0.100001*t27699;
  t27706 = t27609*t27705;
  t27708 = t27602*t27609;
  t27709 = t27592*t27665;
  t27711 = t26797*t27710;
  t27715 = t27708 + t27709 + t27711;
  t27721 = -0.3*t27715;
  t27722 = t26783 + t26784 + t27533 + t27599 + t27628 + t27700 + t27706 + t27721;
  t28007 = 9.e-12*t17664*t16429*t17871;
  t28008 = -3.e-6*t17664*t17368*t17871;
  t28011 = t28007 + t28008;
  t28015 = -3.e-6*t17664*t16429*t16623;
  t28016 = t17664*t16623*t17368;
  t28017 = t28015 + t28016;
  t28065 = t16623*t16811;
  t28066 = -1.*t17664*t16429*t17871;
  t28071 = t28065 + t28066 + t28008;
  t28049 = -3.e-6*t16623*t16811;
  t28050 = 3.e-6*t17664*t16429*t17871;
  t28051 = 9.e-12*t17664*t17368*t17871;
  t28052 = t28049 + t28050 + t28051;
  t28054 = -3.e-6*t17664*t16623*t17368;
  t28055 = -1.000000000009*t16811*t17871;
  t28058 = t27779 + t28054 + t28055;
  t27775 = 0.2000000000018*t16811*t17871;
  t28112 = t27779 + t28054 + t27786;
  t28115 = 3.e-6*t17664*t16429*t16623;
  t28116 = 9.e-12*t17664*t16623*t17368;
  t28117 = t28115 + t28116 + t27800;
  t28120 = -1.000000000009*t16623*t16811;
  t28121 = t28120 + t27828 + t27829;
  t28004 = 6.000000000054e-7*t17664*t16429*t17871;
  t28005 = -0.2000000000018*t17664*t17368*t17871;
  t28006 = t27948*t27445;
  t28012 = t28011*t27598;
  t28013 = t27644*t28011;
  t28014 = t27948*t27665;
  t28018 = t28017*t27619;
  t28023 = t28013 + t28014 + t28018;
  t28028 = 0.100001*t28023;
  t28029 = t27602*t27948;
  t28034 = t28017*t27611;
  t28035 = t28011*t27619;
  t28036 = t28029 + t28034 + t28035;
  t28037 = 0.2*t28036;
  t28038 = t28017*t27705;
  t28040 = t27602*t28017;
  t28041 = t28011*t27665;
  t28043 = t27948*t27710;
  t28044 = t28040 + t28041 + t28043;
  t28045 = -0.3*t28044;
  t28046 = t28004 + t28005 + t28006 + t28012 + t28028 + t28037 + t28038 + t28045;
  t27861 = -0.2000000000018*t17664*t16623;
  t27862 = -0.2000000000018*t16429*t16811*t17871;
  t27863 = -6.000000000054e-7*t16811*t17368*t17871;
  t27866 = t27865*t27445;
  t27874 = t27871*t27598;
  t27879 = t27644*t27871;
  t27880 = t27865*t27665;
  t27889 = t27888*t27619;
  t27890 = t27879 + t27880 + t27889;
  t27891 = 0.100001*t27890;
  t27892 = t27602*t27865;
  t27893 = t27888*t27611;
  t27894 = t27871*t27619;
  t27896 = t27892 + t27893 + t27894;
  t27897 = 0.2*t27896;
  t27898 = t27888*t27705;
  t27899 = t27602*t27888;
  t27901 = t27871*t27665;
  t27902 = t27865*t27710;
  t27903 = t27899 + t27901 + t27902;
  t27904 = -0.3*t27903;
  t27915 = t27861 + t27862 + t27863 + t27866 + t27874 + t27891 + t27897 + t27898 + t27904;
  t28053 = t28052*t23428;
  t28064 = t28058*t24353;
  t28075 = t28071*t26175;
  t28076 = t28071*t26329;
  t28077 = t28052*t26187;
  t28079 = -1.000000000009*t28058*t18066;
  t28080 = t28076 + t28077 + t28079;
  t28081 = -0.3*t28080;
  t28084 = t28058*t26259;
  t28085 = t28052*t26216;
  t28086 = -1.000000000009*t28071*t18066;
  t28089 = t28084 + t28085 + t28086;
  t28094 = 0.2*t28089;
  t28097 = t28071*t26187;
  t28102 = t28058*t26216;
  t28105 = -1.8e-11*t28052*t18066;
  t28106 = t28097 + t28102 + t28105;
  t28107 = 0.100001*t28106;
  t28108 = t28053 + t28064 + t28075 + t28081 + t28094 + t28107;
  t27944 = t27943*t23428;
  t27949 = t27948*t24353;
  t27952 = t27951*t26175;
  t27953 = t27951*t26187;
  t27954 = t27948*t26216;
  t27955 = -1.8e-11*t27943*t18066;
  t27956 = t27953 + t27954 + t27955;
  t27957 = 0.100001*t27956;
  t27958 = t27948*t26259;
  t27959 = t27943*t26216;
  t27960 = -1.000000000009*t27951*t18066;
  t27963 = t27958 + t27959 + t27960;
  t27967 = 0.2*t27963;
  t27968 = t27951*t26329;
  t27972 = t27943*t26187;
  t27973 = -1.000000000009*t27948*t18066;
  t27974 = t27968 + t27972 + t27973;
  t27975 = -0.3*t27974;
  t27977 = t27944 + t27949 + t27952 + t27957 + t27967 + t27975;
  t23575 = t18001*t23428;
  t24359 = t24226*t24353;
  t26176 = t25191*t26175;
  t26188 = t25191*t26187;
  t26217 = t24226*t26216;
  t26239 = -1.8e-11*t18001*t18066;
  t26249 = t26188 + t26217 + t26239;
  t26255 = 0.100001*t26249;
  t26265 = t24226*t26259;
  t26302 = t18001*t26216;
  t26325 = -1.000000000009*t25191*t18066;
  t26326 = t26265 + t26302 + t26325;
  t26328 = 0.2*t26326;
  t26367 = t25191*t26329;
  t26374 = t18001*t26187;
  t26404 = -1.000000000009*t24226*t18066;
  t26717 = t26367 + t26374 + t26404;
  t26725 = -0.3*t26717;
  t26765 = t23575 + t24359 + t26176 + t26255 + t26328 + t26725;
  t28150 = t24036*t16811;
  t28151 = t28150 + t28066 + t28008;
  t28161 = 3.e-6*t17664*t16429*t16795;
  t28162 = -1.*t17664*t16834*t17368;
  t28206 = -3.e-6*t16811*t17871;
  t28207 = t28161 + t28162 + t28206;
  t28214 = t17664*t16429*t16623;
  t28215 = t16811*t17871;
  t28216 = t28214 + t27942 + t28215;
  t28154 = -9.e-12*t18030;
  t28217 = 9.e-12*t18030;
  t28220 = t28207*t26216;
  t28427 = Sin(var1[3]);
  t28425 = Cos(var1[3]);
  t28426 = t28425*t16429*t16811;
  t28428 = -1.*t28427*t17368;
  t28429 = t28426 + t28428;
  t28442 = -1.*t16429*t28427;
  t28443 = -1.*t28425*t16811*t17368;
  t28444 = t28442 + t28443;
  t28449 = -1.*t28425*t17664*t24036;
  t28450 = -1.*t28429*t17871;
  t28451 = 3.e-6*t28444*t17871;
  t28452 = t28449 + t28450 + t28451;
  t28441 = 3.e-6*t16795*t28429;
  t28445 = t16834*t28444;
  t28446 = 3.e-6*t28425*t17664*t17871;
  t28447 = t28441 + t28445 + t28446;
  t28454 = t16623*t28429;
  t28455 = 3.e-6*t16795*t28444;
  t28456 = -1.*t28425*t17664*t17871;
  t28457 = t28454 + t28455 + t28456;
  t28480 = -1.*t28425*t16429*t16811;
  t28481 = t28427*t17368;
  t28482 = t28480 + t28481;
  t28486 = 3.e-6*t16795*t28482;
  t28487 = t16623*t28444;
  t28489 = t28486 + t28487;
  t28491 = t16834*t28482;
  t28534 = t28491 + t28455;
  t28564 = 3.e-6*t28482*t17871;
  t28565 = -1.*t28444*t17871;
  t28566 = t28564 + t28565;
  t28588 = -1.*t16429*t28427*t16811;
  t28589 = -1.*t28425*t17368;
  t28590 = t28588 + t28589;
  t28593 = -1.*t28425*t16429;
  t28595 = t28427*t16811*t17368;
  t28598 = t28593 + t28595;
  t28613 = t16623*t28590;
  t28614 = 3.e-6*t16795*t28598;
  t28616 = t17664*t28427*t17871;
  t28617 = t28613 + t28614 + t28616;
  t28619 = 3.e-6*t16795*t28590;
  t28620 = t16834*t28598;
  t28621 = -3.e-6*t17664*t28427*t17871;
  t28622 = t28619 + t28620 + t28621;
  t28625 = t17664*t24036*t28427;
  t28626 = -1.*t28590*t17871;
  t28627 = 3.e-6*t28598*t17871;
  t28628 = t28625 + t28626 + t28627;
  t28667 = t28425*t17664*t16429*t16623;
  t28668 = -3.e-6*t28425*t17664*t16795*t17368;
  t28669 = t28425*t16811*t17871;
  t28670 = t28667 + t28668 + t28669;
  t28672 = 3.e-6*t28425*t17664*t16429*t16795;
  t28673 = -1.*t28425*t17664*t16834*t17368;
  t28674 = -3.e-6*t28425*t16811*t17871;
  t28675 = t28672 + t28673 + t28674;
  t28683 = t28425*t24036*t16811;
  t28684 = -1.*t28425*t17664*t16429*t17871;
  t28685 = -3.e-6*t28425*t17664*t17368*t17871;
  t28686 = t28683 + t28684 + t28685;
  t28744 = 3.e-6*t28425*t17664*t16623;
  t28748 = 3.e-6*t28429*t17871;
  t28751 = -9.e-12*t28444*t17871;
  t28756 = t28744 + t28748 + t28751;
  t28736 = -1.*t28425*t17664*t16623;
  t28737 = t28736 + t28450 + t28451;
  t28762 = -1.*t16623*t28429;
  t28763 = 3.e-6*t16623*t28444;
  t28766 = 1.000000000009*t28425*t17664*t17871;
  t28768 = t28762 + t28763 + t28766;
  t28895 = t17664*t16429*t16623*t28427;
  t28901 = -3.e-6*t17664*t16795*t28427*t17368;
  t28904 = t28427*t16811*t17871;
  t28905 = t28895 + t28901 + t28904;
  t28885 = t24036*t28427*t16811;
  t28886 = -1.*t17664*t16429*t28427*t17871;
  t28888 = -3.e-6*t17664*t28427*t17368*t17871;
  t28893 = t28885 + t28886 + t28888;
  t28872 = 3.e-6*t17664*t16429*t16795*t28427;
  t28875 = -1.*t17664*t16834*t28427*t17368;
  t28876 = -3.e-6*t28427*t16811*t17871;
  t28879 = t28872 + t28875 + t28876;
  t28960 = -3.e-6*t17664*t16429*t16795*t28427;
  t28966 = -1.*t17664*t16623*t28427*t17368;
  t28967 = t28960 + t28966;
  t28971 = -1.*t17664*t16429*t16834*t28427;
  t28978 = t28971 + t28901;
  t28988 = -3.e-6*t17664*t16429*t28427*t17871;
  t28989 = t17664*t28427*t17368*t17871;
  t28992 = t28988 + t28989;
  t28600 = -0.2000000000018*t17664*t28427*t17871;
  t29077 = -1.*t16429*t16623*t28427*t16811;
  t29090 = 3.e-6*t16795*t28427*t16811*t17368;
  t29095 = t29077 + t29090 + t28616;
  t29099 = -3.e-6*t16429*t16795*t28427*t16811;
  t29134 = t16834*t28427*t16811*t17368;
  t29135 = t29099 + t29134 + t28621;
  t29204 = t16429*t28427*t16811*t17871;
  t29205 = 3.e-6*t28427*t16811*t17368*t17871;
  t29207 = t28625 + t29204 + t29205;
  t28664 = 0.2000000000018*t28425*t17664*t16429*t16795;
  t28665 = 6.000000000054e-7*t28425*t17664*t16795*t17368;
  t28666 = -0.2000000000018*t28425*t16811*t17871;
  t28671 = t28670*t27445;
  t28678 = t28675*t27598;
  t28680 = t27602*t28670;
  t28687 = t28686*t27611;
  t28688 = t28675*t27619;
  t28689 = t28680 + t28687 + t28688;
  t28691 = 0.2*t28689;
  t28692 = t27644*t28675;
  t28694 = t28670*t27665;
  t28697 = t28686*t27619;
  t28708 = t28692 + t28694 + t28697;
  t28714 = 0.100001*t28708;
  t28715 = t28686*t27705;
  t28717 = t27602*t28686;
  t28718 = t28675*t27665;
  t28719 = t28670*t27710;
  t28722 = t28717 + t28718 + t28719;
  t28723 = -0.3*t28722;
  t28726 = t28664 + t28665 + t28666 + t28671 + t28678 + t28691 + t28714 + t28715 + t28723;
  t29439 = -3.e-6*t16623*t28427*t16811;
  t29453 = 3.e-6*t17664*t16429*t28427*t17871;
  t29454 = 9.e-12*t17664*t28427*t17368*t17871;
  t29456 = t29439 + t29453 + t29454;
  t29430 = t16623*t28427*t16811;
  t29435 = t29430 + t28886 + t28888;
  t29490 = -1.*t17664*t16429*t16623*t28427;
  t29491 = -3.e-6*t17664*t16623*t28427*t17368;
  t29492 = -1.000000000009*t28427*t16811*t17871;
  t29493 = t29490 + t29491 + t29492;
  t29524 = t28425*t16429;
  t29525 = -1.*t28427*t16811*t17368;
  t29526 = t29524 + t29525;
  t29590 = t16623*t29526;
  t29609 = t28619 + t29590;
  t29575 = 3.e-6*t28590*t17871;
  t29576 = -1.*t29526*t17871;
  t29582 = t29575 + t29576;
  t29523 = t16834*t28590;
  t29572 = 3.e-6*t16795*t29526;
  t29573 = t29523 + t29572;
  t28956 = 6.000000000054e-7*t17664*t16429*t16795*t28427;
  t28959 = -0.2000000000018*t17664*t16795*t28427*t17368;
  t28968 = t28967*t27445;
  t28979 = t28978*t27598;
  t28981 = t27602*t28967;
  t28997 = t28992*t27611;
  t28999 = t28978*t27619;
  t29000 = t28981 + t28997 + t28999;
  t29001 = 0.2*t29000;
  t29033 = t27644*t28978;
  t29035 = t28967*t27665;
  t29041 = t28992*t27619;
  t29042 = t29033 + t29035 + t29041;
  t29046 = 0.100001*t29042;
  t29047 = t28992*t27705;
  t29048 = t27602*t28992;
  t29062 = t28978*t27665;
  t29068 = t28967*t27710;
  t29069 = t29048 + t29062 + t29068;
  t29070 = -0.3*t29069;
  t29071 = t28956 + t28959 + t28968 + t28979 + t29001 + t29046 + t29047 + t29070;
  t28483 = -6.000000000054e-7*t16795*t28482;
  t28485 = 0.2000000000018*t16795*t28444;
  t28490 = t28489*t27445;
  t28536 = t28534*t27598;
  t28538 = t27602*t28489;
  t28568 = t28566*t27611;
  t28569 = t28534*t27619;
  t28570 = t28538 + t28568 + t28569;
  t28572 = 0.2*t28570;
  t28573 = t27644*t28534;
  t28574 = t28489*t27665;
  t28575 = t28566*t27619;
  t28577 = t28573 + t28574 + t28575;
  t28578 = 0.100001*t28577;
  t28579 = t28566*t27705;
  t28580 = t27602*t28566;
  t28582 = t28534*t27665;
  t28583 = t28489*t27710;
  t28584 = t28580 + t28582 + t28583;
  t28585 = -0.3*t28584;
  t28586 = t28483 + t28485 + t28490 + t28536 + t28572 + t28578 + t28579 + t28585;
  t28591 = 0.2000000000018*t16795*t28590;
  t28599 = -6.000000000054e-7*t16795*t28598;
  t33938 = t28613 + t28614;
  t36513 = t28619 + t28620;
  t36700 = t28626 + t28627;
  t36805 = -9.e-12*t28590*t17871;
  t36897 = 3.e-6*t29526*t17871;
  t36901 = t36805 + t36897;
  t36924 = 3.e-6*t16623*t28590;
  t36925 = -1.*t16623*t29526;
  t36926 = t36924 + t36925;
  t37025 = t16429*t28427*t16811;
  t37026 = t28425*t17368;
  t37027 = t37025 + t37026;
  t37048 = -1.*t17664*t16623*t28427;
  t37049 = -1.*t37027*t17871;
  t37050 = t37048 + t37049 + t36897;
  t37024 = 3.e-6*t17664*t16623*t28427;
  t37029 = 3.e-6*t37027*t17871;
  t37035 = -9.e-12*t29526*t17871;
  t37039 = t37024 + t37029 + t37035;
  t37043 = -1.*t16623*t37027;
  t37044 = 3.e-6*t16623*t29526;
  t37045 = 1.000000000009*t17664*t28427*t17871;
  t37046 = t37043 + t37044 + t37045;
  t37851 = t37043 + t37044 + t28616;
  t38002 = 3.e-6*t16623*t37027;
  t38006 = -9.e-12*t16623*t29526;
  t38018 = t38002 + t38006 + t28621;
  t38086 = 1.000000000009*t17664*t16623*t28427;
  t38115 = t37027*t17871;
  t38121 = -3.e-6*t29526*t17871;
  t38122 = t38086 + t38115 + t38121;
  t29415 = -0.2000000000018*t16623*t28427*t16811;
  t29419 = 0.2000000000018*t17664*t16429*t28427*t17871;
  t29429 = 6.000000000054e-7*t17664*t28427*t17368*t17871;
  t29436 = t29435*t27445;
  t29486 = t29456*t27598;
  t29487 = t27644*t29456;
  t29489 = t29435*t27665;
  t29494 = t29493*t27619;
  t29495 = t29487 + t29489 + t29494;
  t29496 = 0.100001*t29495;
  t29497 = t27602*t29435;
  t29498 = t29493*t27611;
  t29499 = t29456*t27619;
  t29500 = t29497 + t29498 + t29499;
  t29501 = 0.2*t29500;
  t29502 = t29493*t27705;
  t29503 = t27602*t29493;
  t29506 = t29456*t27665;
  t29511 = t29435*t27710;
  t29513 = t29503 + t29506 + t29511;
  t29514 = -0.3*t29513;
  t29520 = t29415 + t29419 + t29429 + t29436 + t29486 + t29496 + t29501 + t29502 + t29514;
  t28731 = 0.2000000000018*t28425*t17664*t16623;
  t28733 = 0.2000000000018*t28429*t17871;
  t28735 = -6.000000000054e-7*t28444*t17871;
  t28739 = t28737*t27445;
  t28757 = t28756*t27598;
  t28758 = t27644*t28756;
  t28760 = t28737*t27665;
  t28772 = t28768*t27619;
  t28780 = t28758 + t28760 + t28772;
  t28790 = 0.100001*t28780;
  t28796 = t27602*t28737;
  t28798 = t28768*t27611;
  t28801 = t28756*t27619;
  t28804 = t28796 + t28798 + t28801;
  t28831 = 0.2*t28804;
  t28832 = t28768*t27705;
  t28833 = t27602*t28768;
  t28837 = t28756*t27665;
  t28838 = t28737*t27710;
  t28858 = t28833 + t28837 + t28838;
  t28859 = -0.3*t28858;
  t28864 = t28731 + t28733 + t28735 + t28739 + t28757 + t28790 + t28831 + t28832 + t28859;
  t36749 = -6.000000000054e-7*t28590*t17871;
  t36750 = 0.2000000000018*t29526*t17871;
  t36802 = t29582*t27445;
  t36902 = t36901*t27598;
  t36908 = t27644*t36901;
  t36916 = t29582*t27665;
  t36929 = t36926*t27619;
  t36934 = t36908 + t36916 + t36929;
  t36935 = 0.100001*t36934;
  t36936 = t27602*t29582;
  t36937 = t36926*t27611;
  t36938 = t36901*t27619;
  t36940 = t36936 + t36937 + t36938;
  t36941 = 0.2*t36940;
  t36942 = t36926*t27705;
  t36943 = t27602*t36926;
  t36944 = t36901*t27665;
  t36946 = t29582*t27710;
  t36947 = t36943 + t36944 + t36946;
  t36948 = -0.3*t36947;
  t36951 = t36749 + t36750 + t36802 + t36902 + t36935 + t36941 + t36942 + t36948;
  t28881 = t28879*t23428;
  t28894 = t28893*t24353;
  t28906 = t28905*t26175;
  t28907 = t28905*t26187;
  t28911 = t28893*t26216;
  t28917 = -1.8e-11*t28879*t18066;
  t28921 = t28907 + t28911 + t28917;
  t28922 = 0.100001*t28921;
  t28924 = t28893*t26259;
  t28930 = t28879*t26216;
  t28932 = -1.000000000009*t28905*t18066;
  t28936 = t28924 + t28930 + t28932;
  t28939 = 0.2*t28936;
  t28942 = t28905*t26329;
  t28943 = t28879*t26187;
  t28944 = -1.000000000009*t28893*t18066;
  t28946 = t28942 + t28943 + t28944;
  t28947 = -0.3*t28946;
  t28948 = t28881 + t28894 + t28906 + t28922 + t28939 + t28947;
  t28448 = t28447*t23428;
  t28453 = t28452*t24353;
  t28458 = t28457*t26175;
  t28459 = t28452*t26259;
  t28460 = t28447*t26216;
  t28461 = -1.000000000009*t28457*t18066;
  t28462 = t28459 + t28460 + t28461;
  t28463 = 0.2*t28462;
  t28464 = t28457*t26187;
  t28465 = t28452*t26216;
  t28466 = -1.8e-11*t28447*t18066;
  t28468 = t28464 + t28465 + t28466;
  t28469 = 0.100001*t28468;
  t28470 = t28457*t26329;
  t28471 = t28447*t26187;
  t28472 = -1.000000000009*t28452*t18066;
  t28473 = t28470 + t28471 + t28472;
  t28477 = -0.3*t28473;
  t28478 = t28448 + t28453 + t28458 + t28463 + t28469 + t28477;
  t29574 = t29573*t23428;
  t29587 = t29582*t24353;
  t29610 = t29609*t26175;
  t29611 = t29609*t26187;
  t29612 = t29582*t26216;
  t29613 = -1.8e-11*t29573*t18066;
  t29614 = t29611 + t29612 + t29613;
  t29615 = 0.100001*t29614;
  t29616 = t29582*t26259;
  t29617 = t29573*t26216;
  t29618 = -1.000000000009*t29609*t18066;
  t29619 = t29616 + t29617 + t29618;
  t29629 = 0.2*t29619;
  t29635 = t29609*t26329;
  t29639 = t29573*t26187;
  t29641 = -1.000000000009*t29582*t18066;
  t29647 = t29635 + t29639 + t29641;
  t29648 = -0.3*t29647;
  t29650 = t29574 + t29587 + t29610 + t29615 + t29629 + t29648;
  t37042 = t37039*t23428;
  t37047 = t37046*t24353;
  t37051 = t37050*t26175;
  t37057 = t37050*t26329;
  t37058 = t37039*t26187;
  t37144 = -1.000000000009*t37046*t18066;
  t37388 = t37057 + t37058 + t37144;
  t37751 = -0.3*t37388;
  t37753 = t37050*t26187;
  t37755 = t37046*t26216;
  t37758 = -1.8e-11*t37039*t18066;
  t37781 = t37753 + t37755 + t37758;
  t37794 = 0.100001*t37781;
  t37798 = t37046*t26259;
  t37799 = t37039*t26216;
  t37801 = -1.000000000009*t37050*t18066;
  t37804 = t37798 + t37799 + t37801;
  t37805 = 0.2*t37804;
  t37806 = t37042 + t37047 + t37051 + t37751 + t37794 + t37805;
  t28152 = 0.1000000000009*t18030;
  t28155 = t28154 + t27379;
  t28156 = 0.2*t28155;
  t28157 = -9.e-7*t26187;
  t28159 = t28152 + t28156 + t28157;
  t28208 = -1.62e-17*t18030;
  t28209 = 0.1*t18197;
  t28210 = 0.2*t26187;
  t28211 = t28208 + t28209 + t28210;
  t38334 = 3.e-6*t16795*t37027;
  t38339 = t16834*t29526;
  t38342 = 3.e-6*t17664*t28427*t17871;
  t38343 = t38334 + t38339 + t38342;
  t38331 = -1.*t17664*t24036*t28427;
  t38332 = t38331 + t37049 + t36897;
  t38350 = t16623*t37027;
  t38351 = -1.*t17664*t28427*t17871;
  t38352 = t38350 + t29572 + t38351;
  t28218 = t28217 + t27379;
  t28231 = 0.2000000000018*t18030;
  t28232 = t28154 + t18066;
  t28233 = 0.1*t28232;
  t28234 = t28231 + t24227 + t28233;
  t28238 = t28217 + t18066;
  t38361 = t38343*t26216;
  t38566 = t38343*t23428;
  t38568 = t38332*t24353;
  t38570 = t38352*t26175;
  t38571 = t38332*t26259;
  t38572 = -1.000000000009*t38352*t18066;
  t38573 = t38571 + t38361 + t38572;
  t38574 = 0.2*t38573;
  t38575 = t38352*t26187;
  t38576 = t38332*t26216;
  t38577 = -1.8e-11*t38343*t18066;
  t38579 = t38575 + t38576 + t38577;
  t38580 = 0.100001*t38579;
  t38581 = t38352*t26329;
  t38583 = t38343*t26187;
  t38584 = -1.000000000009*t38332*t18066;
  t38585 = t38581 + t38583 + t38584;
  t38588 = -0.3*t38585;
  t38589 = t38566 + t38568 + t38570 + t38574 + t38580 + t38588;
  t38485 = -6.000000000054e-7*t16795*t28590;
  t38488 = 0.2000000000018*t16795*t29526;
  t38489 = t29609*t27445;
  t38490 = t29573*t27598;
  t38492 = t27602*t29609;
  t38495 = t29582*t27611;
  t38499 = t29573*t27619;
  t38503 = t38492 + t38495 + t38499;
  t38504 = 0.2*t38503;
  t38506 = t27644*t29573;
  t38507 = t29609*t27665;
  t38509 = t29582*t27619;
  t38511 = t38506 + t38507 + t38509;
  t38515 = 0.100001*t38511;
  t38516 = t29582*t27705;
  t38517 = t29573*t27665;
  t38518 = t29609*t27710;
  t38524 = t36936 + t38517 + t38518;
  t38525 = -0.3*t38524;
  t38526 = t38485 + t38488 + t38489 + t38490 + t38504 + t38515 + t38516 + t38525;
  t38395 = 0.2000000000018*t16795*t28429;
  t38399 = -6.000000000054e-7*t16795*t28444;
  t38401 = 0.2000000000018*t28425*t17664*t17871;
  t38413 = t28457*t27445;
  t38414 = t28447*t27598;
  t38415 = t27602*t28457;
  t38420 = t28452*t27611;
  t38422 = t28447*t27619;
  t38423 = t38415 + t38420 + t38422;
  t38425 = 0.2*t38423;
  t38426 = t27644*t28447;
  t38427 = t28457*t27665;
  t38428 = t28452*t27619;
  t38429 = t38426 + t38427 + t38428;
  t38430 = 0.100001*t38429;
  t38431 = t28452*t27705;
  t38433 = t27602*t28452;
  t38434 = t28447*t27665;
  t38435 = t28457*t27710;
  t38436 = t38433 + t38434 + t38435;
  t38438 = -0.3*t38436;
  t38439 = t38395 + t38399 + t38401 + t38413 + t38414 + t38425 + t38430 + t38431 + t38438;
  t38441 = 0.2000000000018*t17664*t16429*t16795*t28427;
  t38442 = 6.000000000054e-7*t17664*t16795*t28427*t17368;
  t38446 = -0.2000000000018*t28427*t16811*t17871;
  t38451 = t28905*t27445;
  t38452 = t28879*t27598;
  t38456 = t27602*t28905;
  t38457 = t28893*t27611;
  t38459 = t28879*t27619;
  t38460 = t38456 + t38457 + t38459;
  t38462 = 0.2*t38460;
  t38463 = t27644*t28879;
  t38466 = t28905*t27665;
  t38468 = t28893*t27619;
  t38472 = t38463 + t38466 + t38468;
  t38473 = 0.100001*t38472;
  t38474 = t28893*t27705;
  t38475 = t27602*t28893;
  t38476 = t28879*t27665;
  t38479 = t28905*t27710;
  t38481 = t38475 + t38476 + t38479;
  t38482 = -0.3*t38481;
  t38484 = t38441 + t38442 + t38446 + t38451 + t38452 + t38462 + t38473 + t38474 + t38482;
  t38527 = 0.2000000000018*t17664*t16623*t28427;
  t38529 = 0.2000000000018*t37027*t17871;
  t38531 = -6.000000000054e-7*t29526*t17871;
  t38532 = t37050*t27445;
  t38535 = t37039*t27598;
  t38536 = t27644*t37039;
  t38537 = t37050*t27665;
  t38538 = t37046*t27619;
  t38539 = t38536 + t38537 + t38538;
  t38541 = 0.100001*t38539;
  t38542 = t27602*t37050;
  t38545 = t37046*t27611;
  t38546 = t37039*t27619;
  t38548 = t38542 + t38545 + t38546;
  t38553 = 0.2*t38548;
  t38555 = t37046*t27705;
  t38559 = t27602*t37046;
  t38560 = t37039*t27665;
  t38561 = t37050*t27710;
  t38562 = t38559 + t38560 + t38561;
  t38563 = -0.3*t38562;
  t38564 = t38527 + t38529 + t38531 + t38532 + t38535 + t38541 + t38553 + t38555 + t38563;
  t38616 = -1.*t28425*t24036*t16811;
  t38617 = t28425*t17664*t16429*t17871;
  t38619 = 3.e-6*t28425*t17664*t17368*t17871;
  t38622 = t38616 + t38617 + t38619;
  t38603 = -3.e-6*t28425*t17664*t16429*t16795;
  t38606 = t28425*t17664*t16834*t17368;
  t38611 = 3.e-6*t28425*t16811*t17871;
  t38612 = t38603 + t38606 + t38611;
  t38633 = -1.*t28425*t17664*t16429*t16623;
  t38634 = 3.e-6*t28425*t17664*t16795*t17368;
  t38636 = -1.*t28425*t16811*t17871;
  t38637 = t38633 + t38634 + t38636;
  t38685 = t28425*t17664*t16623*t17368;
  t38686 = t28672 + t38685;
  t38688 = t28425*t17664*t16429*t16834;
  t38689 = t38688 + t38634;
  t38693 = 3.e-6*t28425*t17664*t16429*t17871;
  t38694 = -1.*t28425*t17664*t17368*t17871;
  t38695 = t38693 + t38694;
  t38727 = t28425*t16429*t16623*t16811;
  t38728 = -3.e-6*t28425*t16795*t16811*t17368;
  t38729 = t38727 + t38728 + t28456;
  t38733 = 3.e-6*t28425*t16429*t16795*t16811;
  t38737 = -1.*t28425*t16834*t16811*t17368;
  t38738 = t38733 + t38737 + t28446;
  t38742 = -1.*t28425*t16429*t16811*t17871;
  t38744 = -3.e-6*t28425*t16811*t17368*t17871;
  t38745 = t28449 + t38742 + t38744;
  t38781 = 3.e-6*t28425*t16623*t16811;
  t38782 = -3.e-6*t28425*t17664*t16429*t17871;
  t38784 = -9.e-12*t28425*t17664*t17368*t17871;
  t38785 = t38781 + t38782 + t38784;
  t38778 = -1.*t28425*t16623*t16811;
  t38779 = t38778 + t38617 + t38619;
  t38792 = 3.e-6*t28425*t17664*t16623*t17368;
  t38793 = 1.000000000009*t28425*t16811*t17871;
  t38794 = t28667 + t38792 + t38793;
  t38829 = t16429*t28427;
  t38830 = t28425*t16811*t17368;
  t38834 = t38829 + t38830;
  t38847 = t16623*t38834;
  t38850 = t28441 + t38847;
  t38841 = -1.*t38834*t17871;
  t38843 = t28748 + t38841;
  t38826 = t16834*t28429;
  t38836 = 3.e-6*t16795*t38834;
  t38837 = t38826 + t38836;
  t38674 = -6.000000000054e-7*t28425*t17664*t16429*t16795;
  t38676 = 0.2000000000018*t28425*t17664*t16795*t17368;
  t38687 = t38686*t27445;
  t38691 = t38689*t27598;
  t38692 = t27602*t38686;
  t38698 = t38695*t27611;
  t38700 = t38689*t27619;
  t38703 = t38692 + t38698 + t38700;
  t38704 = 0.2*t38703;
  t38705 = t27644*t38689;
  t38706 = t38686*t27665;
  t38708 = t38695*t27619;
  t38709 = t38705 + t38706 + t38708;
  t38710 = 0.100001*t38709;
  t38711 = t38695*t27705;
  t38712 = t27602*t38695;
  t38716 = t38689*t27665;
  t38718 = t38686*t27710;
  t38719 = t38712 + t38716 + t38718;
  t38721 = -0.3*t38719;
  t38722 = t38674 + t38676 + t38687 + t38691 + t38704 + t38710 + t38711 + t38721;
  t38892 = t28454 + t28455;
  t38895 = t28441 + t28445;
  t38898 = t28450 + t28451;
  t38928 = -9.e-12*t28429*t17871;
  t38929 = 3.e-6*t38834*t17871;
  t38930 = t38928 + t38929;
  t38936 = 3.e-6*t16623*t28429;
  t38937 = -1.*t16623*t38834;
  t38938 = t38936 + t38937;
  t38986 = t28425*t17664*t16623;
  t38987 = -1.*t28482*t17871;
  t38989 = t38986 + t38987 + t38929;
  t38964 = -3.e-6*t28425*t17664*t16623;
  t38966 = -9.e-12*t38834*t17871;
  t38967 = t38964 + t28564 + t38966;
  t38972 = -1.*t16623*t28482;
  t38978 = 3.e-6*t16623*t38834;
  t38980 = -1.000000000009*t28425*t17664*t17871;
  t38982 = t38972 + t38978 + t38980;
  t39021 = t38972 + t38978 + t28456;
  t39023 = 3.e-6*t16623*t28482;
  t39025 = -9.e-12*t16623*t38834;
  t39026 = t39023 + t39025 + t28446;
  t39029 = -1.000000000009*t28425*t17664*t16623;
  t39030 = t28482*t17871;
  t39031 = -3.e-6*t38834*t17871;
  t39032 = t39029 + t39030 + t39031;
  t38773 = 0.2000000000018*t28425*t16623*t16811;
  t38774 = -0.2000000000018*t28425*t17664*t16429*t17871;
  t38775 = -6.000000000054e-7*t28425*t17664*t17368*t17871;
  t38780 = t38779*t27445;
  t38786 = t38785*t27598;
  t38787 = t27644*t38785;
  t38791 = t38779*t27665;
  t38796 = t38794*t27619;
  t38799 = t38787 + t38791 + t38796;
  t38802 = 0.100001*t38799;
  t38803 = t27602*t38779;
  t38805 = t38794*t27611;
  t38807 = t38785*t27619;
  t38810 = t38803 + t38805 + t38807;
  t38811 = 0.2*t38810;
  t38812 = t38794*t27705;
  t38815 = t27602*t38794;
  t38816 = t38785*t27665;
  t38817 = t38779*t27710;
  t38818 = t38815 + t38816 + t38817;
  t38820 = -0.3*t38818;
  t38822 = t38773 + t38774 + t38775 + t38780 + t38786 + t38802 + t38811 + t38812 + t38820;
  t38925 = -6.000000000054e-7*t28429*t17871;
  t38926 = 0.2000000000018*t38834*t17871;
  t38927 = t38843*t27445;
  t38932 = t38930*t27598;
  t38934 = t27644*t38930;
  t38935 = t38843*t27665;
  t38939 = t38938*t27619;
  t38940 = t38934 + t38935 + t38939;
  t38941 = 0.100001*t38940;
  t38942 = t27602*t38843;
  t38943 = t38938*t27611;
  t38944 = t38930*t27619;
  t38948 = t38942 + t38943 + t38944;
  t38949 = 0.2*t38948;
  t38950 = t38938*t27705;
  t38952 = t27602*t38938;
  t38953 = t38930*t27665;
  t38954 = t38843*t27710;
  t38955 = t38952 + t38953 + t38954;
  t38958 = -0.3*t38955;
  t38959 = t38925 + t38926 + t38927 + t38932 + t38941 + t38949 + t38950 + t38958;
  t38614 = t38612*t23428;
  t38631 = t38622*t24353;
  t38638 = t38637*t26175;
  t38642 = t38622*t26259;
  t38643 = t38612*t26216;
  t38644 = -1.000000000009*t38637*t18066;
  t38647 = t38642 + t38643 + t38644;
  t38648 = 0.2*t38647;
  t38649 = t38637*t26187;
  t38650 = t38622*t26216;
  t38652 = -1.8e-11*t38612*t18066;
  t38653 = t38649 + t38650 + t38652;
  t38654 = 0.100001*t38653;
  t38655 = t38637*t26329;
  t38656 = t38612*t26187;
  t38658 = -1.000000000009*t38622*t18066;
  t38664 = t38655 + t38656 + t38658;
  t38665 = -0.3*t38664;
  t38667 = t38614 + t38631 + t38638 + t38648 + t38654 + t38665;
  t38840 = t38837*t23428;
  t38846 = t38843*t24353;
  t38854 = t38850*t26175;
  t38855 = t38850*t26187;
  t38857 = t38843*t26216;
  t38858 = -1.8e-11*t38837*t18066;
  t38861 = t38855 + t38857 + t38858;
  t38865 = 0.100001*t38861;
  t38868 = t38843*t26259;
  t38870 = t38837*t26216;
  t38871 = -1.000000000009*t38850*t18066;
  t38874 = t38868 + t38870 + t38871;
  t38875 = 0.2*t38874;
  t38877 = t38850*t26329;
  t38878 = t38837*t26187;
  t38879 = -1.000000000009*t38843*t18066;
  t38882 = t38877 + t38878 + t38879;
  t38883 = -0.3*t38882;
  t38888 = t38840 + t38846 + t38854 + t38865 + t38875 + t38883;
  t38970 = t38967*t23428;
  t38984 = t38982*t24353;
  t38990 = t38989*t26175;
  t38991 = t38989*t26329;
  t38992 = t38967*t26187;
  t38993 = -1.000000000009*t38982*t18066;
  t38995 = t38991 + t38992 + t38993;
  t38997 = -0.3*t38995;
  t38998 = t38989*t26187;
  t38999 = t38982*t26216;
  t39001 = -1.8e-11*t38967*t18066;
  t39002 = t38998 + t38999 + t39001;
  t39003 = 0.100001*t39002;
  t39004 = t38982*t26259;
  t39006 = t38967*t26216;
  t39007 = -1.000000000009*t38989*t18066;
  t39008 = t39004 + t39006 + t39007;
  t39009 = 0.2*t39008;
  t39011 = t38970 + t38984 + t38990 + t38997 + t39003 + t39009;
  t39078 = t28425*t17664*t24036;
  t39079 = t39078 + t38987 + t38929;
  t39081 = t16834*t38834;
  t39082 = -3.e-6*t28425*t17664*t17871;
  t39083 = t28486 + t39081 + t39082;
  t39088 = t16623*t28482;
  t39090 = t28425*t17664*t17871;
  t39092 = t39088 + t38836 + t39090;
  t39096 = t39083*t26216;
  p_output1[0]=(t27760 + t27767 + t27775 + t27445*t27791 + t27598*t27803 + t27705*t27830 - 0.3*(t27710*t27791 + t27665*t27803 + t27602*t27830) + 0.2*(t27602*t27791 + t27619*t27803 + t27611*t27830) + 0.100001*(t27665*t27791 + t27644*t27803 + t27619*t27830))*var2[4] + t27722*var2[5] + t27915*var2[6] + t26765*var2[8];
  p_output1[1]=t27722*var2[4] + (t27760 + t27767 + t27445*t27979 + t27598*t27981 + t27705*t27984 - 0.3*(t27710*t27979 + t27665*t27981 + t27602*t27984) + 0.2*(t27602*t27979 + t27619*t27981 + t27611*t27984) + 0.100001*(t27665*t27979 + t27644*t27981 + t27619*t27984))*var2[5] + t28046*var2[6] + t27977*var2[8];
  p_output1[2]=t27915*var2[4] + t28046*var2[5] + (0.2000000000018*t16429*t16623*t17664 + 6.000000000054e-7*t16623*t17368*t17664 + t27775 + t27445*t28112 + t27598*t28117 + t27705*t28121 - 0.3*(t27710*t28112 + t27665*t28117 + t27602*t28121) + 0.2*(t27602*t28112 + t27619*t28117 + t27611*t28121) + 0.100001*(t27665*t28112 + t27644*t28117 + t27619*t28121))*var2[6] + t28108*var2[8];
  p_output1[3]=t26765*var2[4] + t27977*var2[5] + t28108*var2[6] + (t28151*t28159 + t28207*t28211 + 0.100001*(t21091*t28151 - 1.8e-11*t18030*t28207 + t26216*t28216) - 0.3*(-1.000000000009*t18030*t28151 + t28216*t28218 + t28220) + t28216*t28234 + 0.2*(t21091*t28207 - 1.000000000009*t18030*t28216 + t28151*t28238))*var2[8];
  p_output1[4]=1.;
  p_output1[5]=-0.2000000000018*t16429*t16795*t16811 - 6.000000000054e-7*t16795*t16811*t17368 - 0.2000000000018*t17664*t17871 + t25191*t27445 + t18001*t27598 + 0.2*(t25191*t27602 + t24226*t27611 + t18001*t27619) + 0.100001*(t24226*t27619 + t18001*t27644 + t25191*t27665) + t24226*t27705 - 0.3*(t24226*t27602 + t18001*t27665 + t25191*t27710);
  p_output1[6]=6.000000000054e-7*t16429*t16795*t17664 - 0.2000000000018*t16795*t17368*t17664 + t27598*t27943 + t27705*t27948 + t27445*t27951 + 0.2*(t27619*t27943 + t27611*t27948 + t27602*t27951) + 0.100001*(t27644*t27943 + t27619*t27948 + t27665*t27951) - 0.3*(t27665*t27943 + t27710*t27951 + t28029);
  p_output1[7]=-0.2000000000018*t16623*t16811 + 0.2000000000018*t16429*t17664*t17871 + 6.000000000054e-7*t17368*t17664*t17871 + t27598*t28052 + t27705*t28058 + t27445*t28071 + 0.2*(t27619*t28052 + t27611*t28058 + t27602*t28071) + 0.100001*(t27644*t28052 + t27619*t28058 + t27665*t28071) - 0.3*(t27665*t28052 + t27602*t28058 + t27710*t28071);
  p_output1[8]=t24353*t28151 + t23428*t28207 + t26175*t28216 + 0.100001*(t26216*t28151 - 1.8e-11*t18066*t28207 + t26187*t28216) - 0.3*(-1.000000000009*t18066*t28151 + t26187*t28207 + t26329*t28216) + 0.2*(t26259*t28151 - 1.000000000009*t18066*t28216 + t28220);
  p_output1[9]=(t28591 + t28599 + t28600 + t27445*t28617 + t27598*t28622 + t27705*t28628 - 0.3*(t27710*t28617 + t27665*t28622 + t27602*t28628) + 0.2*(t27602*t28617 + t27619*t28622 + t27611*t28628) + 0.100001*(t27665*t28617 + t27644*t28622 + t27619*t28628))*var2[3] + t28726*var2[4] + t28586*var2[5] + t28864*var2[6] + t28478*var2[8];
  p_output1[10]=t28726*var2[3] + (-0.2000000000018*t16429*t16795*t16811*t28427 - 6.000000000054e-7*t16795*t16811*t17368*t28427 + t28600 + t27445*t29095 + t27598*t29135 + t27705*t29207 - 0.3*(t27710*t29095 + t27665*t29135 + t27602*t29207) + 0.2*(t27602*t29095 + t27619*t29135 + t27611*t29207) + 0.100001*(t27665*t29095 + t27644*t29135 + t27619*t29207))*var2[4] + t29071*var2[5] + t29520*var2[6] + t28948*var2[8];
  p_output1[11]=t28586*var2[3] + t29071*var2[4] + (t28591 + t28599 + t27445*t33938 + t27598*t36513 + t27705*t36700 - 0.3*(t27710*t33938 + t27665*t36513 + t27602*t36700) + 0.2*(t27602*t33938 + t27619*t36513 + t27611*t36700) + 0.100001*(t27665*t33938 + t27644*t36513 + t27619*t36700))*var2[5] + t36951*var2[6] + t29650*var2[8];
  p_output1[12]=t28864*var2[3] + t29520*var2[4] + t36951*var2[5] + (t28600 - 6.000000000054e-7*t16623*t29526 + 0.2000000000018*t16623*t37027 + t27445*t37851 + t27598*t38018 + t27705*t38122 - 0.3*(t27710*t37851 + t27665*t38018 + t27602*t38122) + 0.2*(t27602*t37851 + t27619*t38018 + t27611*t38122) + 0.100001*(t27665*t37851 + t27644*t38018 + t27619*t38122))*var2[6] + t37806*var2[8];
  p_output1[13]=t28478*var2[3] + t28948*var2[4] + t29650*var2[5] + t37806*var2[6] + (t28159*t38332 + t28211*t38343 + t28234*t38352 + 0.2*(t28238*t38332 + t21091*t38343 - 1.000000000009*t18030*t38352) + 0.100001*(t21091*t38332 - 1.8e-11*t18030*t38343 + t26216*t38352) - 0.3*(-1.000000000009*t18030*t38332 + t28218*t38352 + t38361))*var2[8];
  p_output1[14]=1.;
  p_output1[15]=t38439;
  p_output1[16]=t38484;
  p_output1[17]=t38526;
  p_output1[18]=t38564;
  p_output1[19]=t38589;
  p_output1[20]=t38439*var2[3] + t38484*var2[4] + t38526*var2[5] + t38564*var2[6] + t38589*var2[8];
  p_output1[21]=t38484*var2[3] + (0.2000000000018*t16429*t16795*t16811*t28425 + 6.000000000054e-7*t16795*t16811*t17368*t28425 + t38401 + t27445*t38729 + t27598*t38738 + t27705*t38745 - 0.3*(t27710*t38729 + t27665*t38738 + t27602*t38745) + 0.2*(t27602*t38729 + t27619*t38738 + t27611*t38745) + 0.100001*(t27665*t38729 + t27644*t38738 + t27619*t38745))*var2[4] + t38722*var2[5] + t38822*var2[6] + t38667*var2[8];
  p_output1[22]=t38526*var2[3] + t38722*var2[4] + (t38395 + t38399 + t27445*t38892 + t27598*t38895 + t27705*t38898 - 0.3*(t27710*t38892 + t27665*t38895 + t27602*t38898) + 0.2*(t27602*t38892 + t27619*t38895 + t27611*t38898) + 0.100001*(t27665*t38892 + t27644*t38895 + t27619*t38898))*var2[5] + t38959*var2[6] + t38888*var2[8];
  p_output1[23]=t38564*var2[3] + t38822*var2[4] + t38959*var2[5] + (0.2000000000018*t16623*t28482 + t38401 - 6.000000000054e-7*t16623*t38834 + t27445*t39021 + t27598*t39026 + t27705*t39032 - 0.3*(t27710*t39021 + t27665*t39026 + t27602*t39032) + 0.2*(t27602*t39021 + t27619*t39026 + t27611*t39032) + 0.100001*(t27665*t39021 + t27644*t39026 + t27619*t39032))*var2[6] + t39011*var2[8];
  p_output1[24]=t38589*var2[3] + t38667*var2[4] + t38888*var2[5] + t39011*var2[6] + (t28159*t39079 + t28211*t39083 + t28234*t39092 + 0.2*(t28238*t39079 + t21091*t39083 - 1.000000000009*t18030*t39092) + 0.100001*(t21091*t39079 - 1.8e-11*t18030*t39083 + t26216*t39092) - 0.3*(-1.000000000009*t18030*t39079 + t28218*t39092 + t39096))*var2[8];
  p_output1[25]=1.;
  p_output1[26]=0.2000000000018*t17664*t17871*t28427 - 6.000000000054e-7*t16795*t29526 + 0.2000000000018*t16795*t37027 + t27705*t38332 + t27598*t38343 + t27445*t38352 + 0.2*(t27611*t38332 + t27619*t38343 + t27602*t38352) + 0.100001*(t27619*t38332 + t27644*t38343 + t27665*t38352) - 0.3*(t27602*t38332 + t27665*t38343 + t27710*t38352);
  p_output1[27]=-0.2000000000018*t16429*t16795*t17664*t28425 - 6.000000000054e-7*t16795*t17368*t17664*t28425 + 0.2000000000018*t16811*t17871*t28425 + t27598*t38612 + t27705*t38622 + t27445*t38637 + 0.2*(t27619*t38612 + t27611*t38622 + t27602*t38637) + 0.100001*(t27644*t38612 + t27619*t38622 + t27665*t38637) - 0.3*(t27665*t38612 + t27602*t38622 + t27710*t38637);
  p_output1[28]=-6.000000000054e-7*t16795*t28429 + 0.2000000000018*t16795*t38834 + t27598*t38837 + t27705*t38843 + t27445*t38850 + 0.2*(t27619*t38837 + t27611*t38843 + t27602*t38850) + 0.100001*(t27644*t38837 + t27619*t38843 + t27665*t38850) - 0.3*(t27665*t38837 + t27710*t38850 + t38942);
  p_output1[29]=-0.2000000000018*t16623*t17664*t28425 + 0.2000000000018*t17871*t28482 - 6.000000000054e-7*t17871*t38834 + t27598*t38967 + t27705*t38982 + t27445*t38989 + 0.2*(t27619*t38967 + t27611*t38982 + t27602*t38989) + 0.100001*(t27644*t38967 + t27619*t38982 + t27665*t38989) - 0.3*(t27665*t38967 + t27602*t38982 + t27710*t38989);
  p_output1[30]=t24353*t39079 + t23428*t39083 + t26175*t39092 + 0.100001*(t26216*t39079 - 1.8e-11*t18066*t39083 + t26187*t39092) - 0.3*(-1.000000000009*t18066*t39079 + t26187*t39083 + t26329*t39092) + 0.2*(t26259*t39079 - 1.000000000009*t18066*t39092 + t39096);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_LeftFrontFoot.hh"

namespace Flight2
{

void J_impact_velocity_LeftFrontFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
