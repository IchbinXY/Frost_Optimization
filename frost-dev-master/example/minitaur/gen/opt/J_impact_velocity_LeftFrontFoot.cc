/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 22:49:27 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3524;
  double t3570;
  double t4015;
  double t4259;
  double t4760;
  double t4772;
  double t4780;
  double t4615;
  double t3408;
  double t4725;
  double t4498;
  double t4771;
  double t4781;
  double t4784;
  double t4788;
  double t4977;
  double t5148;
  double t5178;
  double t5190;
  double t5195;
  double t4821;
  double t4827;
  double t4846;
  double t4851;
  double t4861;
  double t4919;
  double t5295;
  double t4396;
  double t4429;
  double t4492;
  double t4507;
  double t4734;
  double t4745;
  double t5222;
  double t5302;
  double t5446;
  double t5296;
  double t6034;
  double t6215;
  double t6218;
  double t5674;
  double t5681;
  double t5736;
  double t6206;
  double t6279;
  double t6303;
  double t6550;
  double t6477;
  double t6497;
  double t6515;
  double t6556;
  double t5769;
  double t6336;
  double t6205;
  double t6346;
  double t6389;
  double t6633;
  double t6516;
  double t6202;
  double t6212;
  double t6214;
  double t6253;
  double t6254;
  double t6328;
  double t6329;
  double t6338;
  double t6340;
  double t6342;
  double t6829;
  double t6893;
  double t6898;
  double t6900;
  double t6522;
  double t6960;
  double t6962;
  double t6963;
  double t6968;
  double t6572;
  double t6574;
  double t7084;
  double t7085;
  double t7095;
  double t7105;
  double t6657;
  double t6665;
  double t6667;
  double t6678;
  double t6709;
  double t6740;
  double t7305;
  double t7321;
  double t7322;
  double t7327;
  double t7240;
  double t7296;
  double t7334;
  double t7336;
  double t7342;
  double t7374;
  double t4782;
  double t4803;
  double t4806;
  double t4810;
  double t4930;
  double t5104;
  double t5133;
  double t5138;
  double t5143;
  double t5212;
  double t5256;
  double t5258;
  double t5259;
  double t5290;
  double t8194;
  double t8195;
  double t8190;
  double t8191;
  double t8192;
  double t8172;
  double t8178;
  double t8186;
  double t5458;
  double t5470;
  double t6771;
  double t6772;
  double t8623;
  double t8627;
  double t8743;
  double t5613;
  double t5672;
  double t6255;
  double t6344;
  double t6437;
  double t6549;
  double t6565;
  double t6566;
  double t6567;
  double t6578;
  double t6634;
  double t6644;
  double t6652;
  double t6654;
  double t6711;
  double t6737;
  double t6738;
  double t6751;
  double t6755;
  double t6761;
  double t6764;
  double t13121;
  double t13126;
  double t13133;
  double t13757;
  double t13841;
  double t13849;
  double t14015;
  double t14021;
  double t14027;
  double t13960;
  double t13961;
  double t13964;
  double t13967;
  double t13980;
  double t14006;
  double t14010;
  double t6819;
  double t14130;
  double t14182;
  double t14183;
  double t14185;
  double t14201;
  double t14202;
  double t12623;
  double t13053;
  double t13089;
  double t13255;
  double t13557;
  double t13567;
  double t13852;
  double t13886;
  double t13887;
  double t13898;
  double t13901;
  double t13902;
  double t13903;
  double t13905;
  double t13910;
  double t13913;
  double t13915;
  double t13930;
  double t13933;
  double t13936;
  double t13940;
  double t7234;
  double t7235;
  double t7239;
  double t7304;
  double t7330;
  double t7332;
  double t7333;
  double t7375;
  double t7376;
  double t7378;
  double t7380;
  double t7381;
  double t7389;
  double t7392;
  double t7470;
  double t7496;
  double t7497;
  double t7702;
  double t7707;
  double t7821;
  double t7883;
  double t7884;
  double t13979;
  double t14014;
  double t14029;
  double t14059;
  double t14060;
  double t14061;
  double t14062;
  double t14092;
  double t14111;
  double t14115;
  double t14116;
  double t14118;
  double t14119;
  double t14120;
  double t14121;
  double t14122;
  double t14123;
  double t14124;
  double t14126;
  double t8187;
  double t8193;
  double t8196;
  double t8197;
  double t8198;
  double t8200;
  double t8201;
  double t8205;
  double t8382;
  double t8402;
  double t8410;
  double t8413;
  double t8415;
  double t8417;
  double t8420;
  double t8603;
  double t8604;
  double t8606;
  double t8618;
  double t4811;
  double t5146;
  double t5291;
  double t5299;
  double t5303;
  double t5345;
  double t5400;
  double t5445;
  double t5459;
  double t5462;
  double t5463;
  double t5465;
  double t5469;
  double t5474;
  double t5496;
  double t5505;
  double t5543;
  double t5595;
  double t5599;
  double t14237;
  double t14238;
  double t14290;
  double t14295;
  double t14297;
  double t14321;
  double t14348;
  double t14351;
  double t14352;
  double t14240;
  double t14353;
  double t14356;
  double t15261;
  double t15258;
  double t15260;
  double t15262;
  double t15263;
  double t15301;
  double t15303;
  double t15305;
  double t15409;
  double t15410;
  double t15411;
  double t15414;
  double t15293;
  double t15306;
  double t15404;
  double t15406;
  double t15423;
  double t15427;
  double t15428;
  double t15434;
  double t15522;
  double t15552;
  double t15553;
  double t15978;
  double t16115;
  double t16116;
  double t16136;
  double t16142;
  double t16156;
  double t16158;
  double t16159;
  double t16457;
  double t16468;
  double t16473;
  double t16487;
  double t16513;
  double t16865;
  double t17076;
  double t17078;
  double t17080;
  double t17081;
  double t17170;
  double t17195;
  double t17196;
  double t17202;
  double t17937;
  double t17941;
  double t17943;
  double t17946;
  double t19930;
  double t19933;
  double t19934;
  double t19936;
  double t19940;
  double t19941;
  double t20089;
  double t20090;
  double t20099;
  double t20103;
  double t20112;
  double t20118;
  double t20279;
  double t20345;
  double t20346;
  double t20347;
  double t20263;
  double t20265;
  double t20639;
  double t20783;
  double t20800;
  double t20809;
  double t21440;
  double t21744;
  double t21755;
  double t21757;
  double t21430;
  double t21431;
  double t21433;
  double t21434;
  double t21423;
  double t21424;
  double t21425;
  double t21428;
  double t22146;
  double t22147;
  double t22148;
  double t22150;
  double t22151;
  double t22156;
  double t22157;
  double t22158;
  double t17075;
  double t22244;
  double t22245;
  double t22263;
  double t22384;
  double t22554;
  double t22557;
  double t22562;
  double t22563;
  double t22570;
  double t19918;
  double t19928;
  double t19929;
  double t19939;
  double t20092;
  double t20094;
  double t20119;
  double t20120;
  double t20121;
  double t20139;
  double t20141;
  double t20142;
  double t20148;
  double t20149;
  double t20150;
  double t20151;
  double t20156;
  double t20157;
  double t20215;
  double t20230;
  double t20249;
  double t20251;
  double t22759;
  double t22769;
  double t22775;
  double t22778;
  double t22755;
  double t22757;
  double t22785;
  double t22786;
  double t22787;
  double t22789;
  double t22821;
  double t22822;
  double t22824;
  double t22843;
  double t22845;
  double t22836;
  double t22840;
  double t22841;
  double t22817;
  double t22831;
  double t22833;
  double t22137;
  double t22139;
  double t22149;
  double t22153;
  double t22154;
  double t22164;
  double t22166;
  double t22173;
  double t22216;
  double t22217;
  double t22218;
  double t22219;
  double t22221;
  double t22222;
  double t22223;
  double t22225;
  double t22226;
  double t22227;
  double t22229;
  double t22231;
  double t22234;
  double t15847;
  double t15921;
  double t16124;
  double t16147;
  double t16151;
  double t16163;
  double t16167;
  double t16173;
  double t16176;
  double t16181;
  double t16183;
  double t16196;
  double t16204;
  double t16205;
  double t16211;
  double t16270;
  double t16307;
  double t16335;
  double t16336;
  double t16353;
  double t16377;
  double t16482;
  double t17068;
  double t22908;
  double t22913;
  double t22932;
  double t22976;
  double t22978;
  double t22981;
  double t22985;
  double t22987;
  double t22991;
  double t23029;
  double t23030;
  double t23032;
  double t23070;
  double t23075;
  double t23076;
  double t23024;
  double t23033;
  double t23040;
  double t23044;
  double t23056;
  double t23059;
  double t23061;
  double t23064;
  double t23153;
  double t23167;
  double t23168;
  double t23178;
  double t23205;
  double t23206;
  double t23211;
  double t23215;
  double t22651;
  double t22701;
  double t22754;
  double t22758;
  double t22779;
  double t22780;
  double t22782;
  double t22791;
  double t22794;
  double t22795;
  double t22797;
  double t22799;
  double t22800;
  double t22801;
  double t22803;
  double t22804;
  double t22805;
  double t22807;
  double t22808;
  double t22809;
  double t22812;
  double t22813;
  double t20257;
  double t20258;
  double t20262;
  double t20273;
  double t20348;
  double t20401;
  double t20403;
  double t20819;
  double t21169;
  double t21170;
  double t21171;
  double t21183;
  double t21191;
  double t21327;
  double t21399;
  double t21402;
  double t21404;
  double t21405;
  double t21406;
  double t21409;
  double t21410;
  double t21415;
  double t22968;
  double t22973;
  double t22975;
  double t22982;
  double t22983;
  double t22984;
  double t22992;
  double t22993;
  double t22994;
  double t22995;
  double t22996;
  double t22997;
  double t22998;
  double t22999;
  double t23000;
  double t23001;
  double t23002;
  double t23003;
  double t23008;
  double t23010;
  double t23015;
  double t21429;
  double t21436;
  double t21758;
  double t21760;
  double t21767;
  double t21892;
  double t21995;
  double t22097;
  double t22098;
  double t22099;
  double t22100;
  double t22104;
  double t22112;
  double t22119;
  double t22124;
  double t22125;
  double t22127;
  double t22129;
  double t22130;
  double t15407;
  double t15416;
  double t15436;
  double t15437;
  double t15438;
  double t15439;
  double t15441;
  double t15444;
  double t15445;
  double t15448;
  double t15449;
  double t15456;
  double t15458;
  double t15461;
  double t15464;
  double t15473;
  double t15474;
  double t15476;
  double t15479;
  double t22835;
  double t22842;
  double t22847;
  double t22848;
  double t22850;
  double t22854;
  double t22860;
  double t22864;
  double t22869;
  double t22871;
  double t22873;
  double t22878;
  double t22884;
  double t22889;
  double t22891;
  double t22893;
  double t22899;
  double t22902;
  double t22903;
  double t23052;
  double t23067;
  double t23077;
  double t23078;
  double t23079;
  double t23084;
  double t23088;
  double t23089;
  double t23090;
  double t23091;
  double t23092;
  double t23105;
  double t23109;
  double t23111;
  double t23112;
  double t23113;
  double t23115;
  double t23116;
  double t23128;
  double t14239;
  double t14241;
  double t14242;
  double t14277;
  double t14280;
  double t14324;
  double t14343;
  double t14344;
  double t14345;
  double t23542;
  double t23554;
  double t23556;
  double t23558;
  double t23520;
  double t23523;
  double t23569;
  double t23570;
  double t23592;
  double t14354;
  double t14372;
  double t14373;
  double t14377;
  double t14388;
  double t14394;
  double t23615;
  double t27062;
  double t27063;
  double t27064;
  double t27066;
  double t27334;
  double t27355;
  double t27400;
  double t27431;
  double t27436;
  double t27582;
  double t27590;
  double t27612;
  double t27621;
  double t27630;
  double t27636;
  double t27638;
  double t27640;
  double t27645;
  double t24060;
  double t24062;
  double t24066;
  double t24067;
  double t24069;
  double t24100;
  double t24101;
  double t24135;
  double t24160;
  double t24167;
  double t24176;
  double t24195;
  double t24198;
  double t24590;
  double t24596;
  double t24603;
  double t24627;
  double t24631;
  double t24632;
  double t24637;
  double t23653;
  double t23660;
  double t23662;
  double t23664;
  double t23665;
  double t23668;
  double t23681;
  double t23683;
  double t23685;
  double t23687;
  double t23694;
  double t23695;
  double t23785;
  double t23795;
  double t23797;
  double t23799;
  double t23800;
  double t23802;
  double t23833;
  double t23852;
  double t23865;
  double t23867;
  double t23954;
  double t23959;
  double t23964;
  double t23972;
  double t23975;
  double t23982;
  double t23986;
  double t23988;
  double t23991;
  double t23994;
  double t23998;
  double t24010;
  double t24014;
  double t24018;
  double t24022;
  double t24028;
  double t24030;
  double t24031;
  double t24035;
  double t24053;
  double t24054;
  double t24056;
  double t24638;
  double t24639;
  double t24642;
  double t24646;
  double t24647;
  double t24834;
  double t24849;
  double t25019;
  double t26147;
  double t26423;
  double t26429;
  double t26430;
  double t26490;
  double t26526;
  double t26531;
  double t26534;
  double t26573;
  double t26577;
  double t26597;
  double t26720;
  double t27060;
  double t27061;
  double t28012;
  double t28024;
  double t28051;
  double t28590;
  double t27671;
  double t27672;
  double t27673;
  double t27971;
  double t28617;
  double t28646;
  double t28650;
  double t29078;
  double t29409;
  double t29411;
  double t29414;
  double t29415;
  double t29423;
  double t29425;
  double t29426;
  double t29669;
  double t29670;
  double t29672;
  double t29694;
  double t29701;
  double t29707;
  double t29725;
  double t29729;
  double t29732;
  double t29986;
  double t29990;
  double t29992;
  double t29995;
  double t29960;
  double t29962;
  double t30014;
  double t30016;
  double t30019;
  double t30119;
  double t30121;
  double t30128;
  double t30186;
  double t30206;
  double t30153;
  double t30154;
  double t30117;
  double t30145;
  double t30147;
  double t29404;
  double t29408;
  double t29413;
  double t29419;
  double t29422;
  double t29427;
  double t29428;
  double t29435;
  double t29456;
  double t29458;
  double t29472;
  double t29547;
  double t29550;
  double t29557;
  double t29559;
  double t29575;
  double t29577;
  double t29580;
  double t29581;
  double t29592;
  double t29606;
  double t30377;
  double t30384;
  double t30405;
  double t30492;
  double t30499;
  double t30507;
  double t30725;
  double t30744;
  double t30746;
  double t31071;
  double t31077;
  double t31079;
  double t30810;
  double t30813;
  double t30814;
  double t30878;
  double t30958;
  double t31012;
  double t31052;
  double t31335;
  double t31340;
  double t31350;
  double t31351;
  double t31363;
  double t31366;
  double t31367;
  double t31372;
  double t29937;
  double t29943;
  double t29959;
  double t29981;
  double t29997;
  double t30007;
  double t30012;
  double t30025;
  double t30029;
  double t30037;
  double t30038;
  double t30045;
  double t30049;
  double t30052;
  double t30053;
  double t30057;
  double t30058;
  double t30060;
  double t30065;
  double t30085;
  double t30088;
  double t30100;
  double t30479;
  double t30489;
  double t30491;
  double t30688;
  double t30691;
  double t30719;
  double t30757;
  double t30759;
  double t30764;
  double t30774;
  double t30775;
  double t30776;
  double t30778;
  double t30780;
  double t30781;
  double t30782;
  double t30786;
  double t30787;
  double t30789;
  double t30793;
  double t30799;
  double t27976;
  double t28596;
  double t29087;
  double t29178;
  double t29179;
  double t29181;
  double t29183;
  double t29271;
  double t29329;
  double t29334;
  double t29336;
  double t29339;
  double t29340;
  double t29347;
  double t29354;
  double t29377;
  double t29381;
  double t29382;
  double t29399;
  double t30149;
  double t30167;
  double t30207;
  double t30213;
  double t30218;
  double t30241;
  double t30253;
  double t30261;
  double t30269;
  double t30299;
  double t30310;
  double t30316;
  double t30318;
  double t30319;
  double t30320;
  double t30327;
  double t30348;
  double t30350;
  double t30356;
  double t30822;
  double t31067;
  double t31083;
  double t31092;
  double t31093;
  double t31097;
  double t31115;
  double t31117;
  double t31119;
  double t31128;
  double t31130;
  double t31134;
  double t31143;
  double t31145;
  double t31147;
  double t31150;
  double t31224;
  double t31325;
  double t31326;
  double t31506;
  double t31512;
  double t31518;
  double t31529;
  double t31541;
  double t31560;
  double t31566;
  double t31574;
  double t31576;
  t3524 = Cos(var1[6]);
  t3570 = -1.*t3524;
  t4015 = 1. + t3570;
  t4259 = Sin(var1[4]);
  t4760 = Cos(var1[8]);
  t4772 = Sin(var1[8]);
  t4780 = -3.e-6*t4772;
  t4615 = Cos(var1[4]);
  t3408 = Cos(var1[5]);
  t4725 = Sin(var1[6]);
  t4498 = Sin(var1[5]);
  t4771 = -3.e-6*t4760;
  t4781 = t4771 + t4780;
  t4784 = 3.e-6*t4760;
  t4788 = t4784 + t4780;
  t4977 = -9.e-12*t4772;
  t5148 = -1.*t3408*t3524*t4259;
  t5178 = 3.e-6*t4015*t4259*t4498;
  t5190 = t4615*t4725;
  t5195 = t5148 + t5178 + t5190;
  t4821 = -1.000000000009*t4015;
  t4827 = 1. + t4821;
  t4846 = t4615*t4827;
  t4851 = t3408*t4259*t4725;
  t4861 = 3.e-6*t4259*t4498*t4725;
  t4919 = t4846 + t4851 + t4861;
  t5295 = 3.e-6*t4772;
  t4396 = -3.e-6*t3408*t4015*t4259;
  t4429 = -9.e-12*t4015;
  t4492 = 1. + t4429;
  t4507 = t4492*t4259*t4498;
  t4734 = -3.e-6*t4615*t4725;
  t4745 = t4396 + t4507 + t4734;
  t5222 = -1.*t4760;
  t5302 = t4784 + t5295;
  t5446 = 9.e-12*t4772;
  t5296 = t4771 + t5295;
  t6034 = 1. + t5222;
  t6215 = -3.e-6*t6034;
  t6218 = t6215 + t5295;
  t5674 = 3.e-6*t3408*t4015*t4259;
  t5681 = t3524*t4259*t4498;
  t5736 = t5674 + t5681;
  t6206 = -1.*t4772;
  t6279 = t3408*t4492*t4259;
  t6303 = t6279 + t5178;
  t6550 = 3.e-6*t6034;
  t6477 = 3.e-6*t3408*t4259*t4725;
  t6497 = -1.*t4259*t4498*t4725;
  t6515 = t6477 + t6497;
  t6556 = t6550 + t5295;
  t5769 = 9.e-13*var1[8];
  t6336 = t6215 + t4780;
  t6205 = -9.e-12*t6034;
  t6346 = -1.000000000009*t6034;
  t6389 = 1. + t6346;
  t6633 = t6550 + t4780;
  t6516 = 9.e-12*t6034;
  t6202 = 0.2000000000018*t6034;
  t6212 = t6205 + t6206;
  t6214 = 0.1*t6212;
  t6253 = -9.e-7*t6218;
  t6254 = t5769 + t6202 + t6214 + t6253;
  t6328 = 3.e-7*var1[8];
  t6329 = -1.62e-17*t6034;
  t6338 = 0.2*t6336;
  t6340 = 0.1*t6218;
  t6342 = t6328 + t6329 + t6338 + t6340;
  t6829 = -1.*t4615*t3408*t3524;
  t6893 = 3.e-6*t4615*t4015*t4498;
  t6898 = -1.*t4259*t4725;
  t6900 = t6829 + t6893 + t6898;
  t6522 = t6516 + t6206;
  t6960 = -3.e-6*t4615*t3408*t4015;
  t6962 = t4615*t4492*t4498;
  t6963 = 3.e-6*t4259*t4725;
  t6968 = t6960 + t6962 + t6963;
  t6572 = -1.8e-11*t6034;
  t6574 = 1. + t6572;
  t7084 = -1.*t4827*t4259;
  t7085 = t4615*t3408*t4725;
  t7095 = 3.e-6*t4615*t4498*t4725;
  t7105 = t7084 + t7085 + t7095;
  t6657 = 0.1000000000009*t6034;
  t6665 = -9.e-7*t6336;
  t6667 = t6205 + t4772;
  t6678 = 0.2*t6667;
  t6709 = t5769 + t6657 + t6665 + t6678;
  t6740 = t6516 + t4772;
  t7305 = -3.e-6*t4615*t3524;
  t7321 = -3.e-6*t3408*t4259*t4725;
  t7322 = -9.e-12*t4259*t4498*t4725;
  t7327 = t7305 + t7321 + t7322;
  t7240 = t4615*t3524;
  t7296 = t7240 + t4851 + t4861;
  t7334 = t3408*t3524*t4259;
  t7336 = 3.e-6*t3524*t4259*t4498;
  t7342 = -1.000000000009*t4615*t4725;
  t7374 = t7334 + t7336 + t7342;
  t4782 = 0.2*t4781;
  t4803 = 0.1*t4788;
  t4806 = -1.62e-17*t4772;
  t4810 = 3.e-7 + t4782 + t4803 + t4806;
  t4930 = -9.e-7*t4781;
  t5104 = t4760 + t4977;
  t5133 = 0.2*t5104;
  t5138 = 0.1000000000009*t4772;
  t5143 = 9.e-13 + t4930 + t5133 + t5138;
  t5212 = -9.e-7*t4788;
  t5256 = t5222 + t4977;
  t5258 = 0.1*t5256;
  t5259 = 0.2000000000018*t4772;
  t5290 = 9.e-13 + t5212 + t5258 + t5259;
  t8194 = -1.*t4615*t3524*t4498;
  t8195 = t6960 + t8194;
  t8190 = -3.e-6*t4615*t3408*t4725;
  t8191 = t4615*t4498*t4725;
  t8192 = t8190 + t8191;
  t8172 = -1.*t4615*t3408*t4492;
  t8178 = -3.e-6*t4615*t4015*t4498;
  t8186 = t8172 + t8178;
  t5458 = t5222 + t5446;
  t5470 = t4760 + t5446;
  t6771 = -0.2000000000018*t4615*t3408*t4015;
  t6772 = -6.000000000054e-7*t4615*t4015*t4498;
  t8623 = t6829 + t6893;
  t8627 = t6960 + t6962;
  t8743 = t7085 + t7095;
  t5613 = -6.000000000054e-7*t3408*t4015*t4259;
  t5672 = 0.2000000000018*t4015*t4259*t4498;
  t6255 = t5736*t6254;
  t6344 = t6303*t6342;
  t6437 = t6389*t5736;
  t6549 = t6515*t6522;
  t6565 = t6303*t6556;
  t6566 = t6437 + t6549 + t6565;
  t6567 = 0.2*t6566;
  t6578 = t6574*t6303;
  t6634 = t5736*t6633;
  t6644 = t6515*t6556;
  t6652 = t6578 + t6634 + t6644;
  t6654 = 0.100001*t6652;
  t6711 = t6515*t6709;
  t6737 = t6389*t6515;
  t6738 = t6303*t6633;
  t6751 = t5736*t6740;
  t6755 = t6737 + t6738 + t6751;
  t6761 = -0.3*t6755;
  t6764 = t5613 + t5672 + t6255 + t6344 + t6567 + t6654 + t6711 + t6761;
  t13121 = 9.e-12*t4615*t3408*t4725;
  t13126 = -3.e-6*t4615*t4498*t4725;
  t13133 = t13121 + t13126;
  t13757 = -3.e-6*t4615*t3408*t3524;
  t13841 = t4615*t3524*t4498;
  t13849 = t13757 + t13841;
  t14015 = t3524*t4259;
  t14021 = -1.*t4615*t3408*t4725;
  t14027 = t14015 + t14021 + t13126;
  t13960 = -3.e-6*t3524*t4259;
  t13961 = 3.e-6*t4615*t3408*t4725;
  t13964 = 9.e-12*t4615*t4498*t4725;
  t13967 = t13960 + t13961 + t13964;
  t13980 = -3.e-6*t4615*t3524*t4498;
  t14006 = -1.000000000009*t4259*t4725;
  t14010 = t6829 + t13980 + t14006;
  t6819 = 0.2000000000018*t4259*t4725;
  t14130 = t6829 + t13980 + t6898;
  t14182 = 3.e-6*t4615*t3408*t3524;
  t14183 = 9.e-12*t4615*t3524*t4498;
  t14185 = t14182 + t14183 + t6963;
  t14201 = -1.000000000009*t3524*t4259;
  t14202 = t14201 + t7085 + t7095;
  t12623 = 6.000000000054e-7*t4615*t3408*t4725;
  t13053 = -0.2000000000018*t4615*t4498*t4725;
  t13089 = t8192*t6254;
  t13255 = t13133*t6342;
  t13557 = t6574*t13133;
  t13567 = t8192*t6633;
  t13852 = t13849*t6556;
  t13886 = t13557 + t13567 + t13852;
  t13887 = 0.100001*t13886;
  t13898 = t6389*t8192;
  t13901 = t13849*t6522;
  t13902 = t13133*t6556;
  t13903 = t13898 + t13901 + t13902;
  t13905 = 0.2*t13903;
  t13910 = t13849*t6709;
  t13913 = t6389*t13849;
  t13915 = t13133*t6633;
  t13930 = t8192*t6740;
  t13933 = t13913 + t13915 + t13930;
  t13936 = -0.3*t13933;
  t13940 = t12623 + t13053 + t13089 + t13255 + t13887 + t13905 + t13910 + t13936;
  t7234 = -0.2000000000018*t4615*t3524;
  t7235 = -0.2000000000018*t3408*t4259*t4725;
  t7239 = -6.000000000054e-7*t4259*t4498*t4725;
  t7304 = t7296*t6254;
  t7330 = t7327*t6342;
  t7332 = t6574*t7327;
  t7333 = t7296*t6633;
  t7375 = t7374*t6556;
  t7376 = t7332 + t7333 + t7375;
  t7378 = 0.100001*t7376;
  t7380 = t6389*t7296;
  t7381 = t7374*t6522;
  t7389 = t7327*t6556;
  t7392 = t7380 + t7381 + t7389;
  t7470 = 0.2*t7392;
  t7496 = t7374*t6709;
  t7497 = t6389*t7374;
  t7702 = t7327*t6633;
  t7707 = t7296*t6740;
  t7821 = t7497 + t7702 + t7707;
  t7883 = -0.3*t7821;
  t7884 = t7234 + t7235 + t7239 + t7304 + t7330 + t7378 + t7470 + t7496 + t7883;
  t13979 = t13967*t4810;
  t14014 = t14010*t5143;
  t14029 = t14027*t5290;
  t14059 = t14027*t5470;
  t14060 = t13967*t5296;
  t14061 = -1.000000000009*t14010*t4772;
  t14062 = t14059 + t14060 + t14061;
  t14092 = -0.3*t14062;
  t14111 = t14010*t5458;
  t14115 = t13967*t5302;
  t14116 = -1.000000000009*t14027*t4772;
  t14118 = t14111 + t14115 + t14116;
  t14119 = 0.2*t14118;
  t14120 = t14027*t5296;
  t14121 = t14010*t5302;
  t14122 = -1.8e-11*t13967*t4772;
  t14123 = t14120 + t14121 + t14122;
  t14124 = 0.100001*t14123;
  t14126 = t13979 + t14014 + t14029 + t14092 + t14119 + t14124;
  t8187 = t8186*t4810;
  t8193 = t8192*t5143;
  t8196 = t8195*t5290;
  t8197 = t8195*t5296;
  t8198 = t8192*t5302;
  t8200 = -1.8e-11*t8186*t4772;
  t8201 = t8197 + t8198 + t8200;
  t8205 = 0.100001*t8201;
  t8382 = t8192*t5458;
  t8402 = t8186*t5302;
  t8410 = -1.000000000009*t8195*t4772;
  t8413 = t8382 + t8402 + t8410;
  t8415 = 0.2*t8413;
  t8417 = t8195*t5470;
  t8420 = t8186*t5296;
  t8603 = -1.000000000009*t8192*t4772;
  t8604 = t8417 + t8420 + t8603;
  t8606 = -0.3*t8604;
  t8618 = t8187 + t8193 + t8196 + t8205 + t8415 + t8606;
  t4811 = t4745*t4810;
  t5146 = t4919*t5143;
  t5291 = t5195*t5290;
  t5299 = t5195*t5296;
  t5303 = t4919*t5302;
  t5345 = -1.8e-11*t4745*t4772;
  t5400 = t5299 + t5303 + t5345;
  t5445 = 0.100001*t5400;
  t5459 = t4919*t5458;
  t5462 = t4745*t5302;
  t5463 = -1.000000000009*t5195*t4772;
  t5465 = t5459 + t5462 + t5463;
  t5469 = 0.2*t5465;
  t5474 = t5195*t5470;
  t5496 = t4745*t5296;
  t5505 = -1.000000000009*t4919*t4772;
  t5543 = t5474 + t5496 + t5505;
  t5595 = -0.3*t5543;
  t5599 = t4811 + t5146 + t5291 + t5445 + t5469 + t5595;
  t14237 = t4827*t4259;
  t14238 = t14237 + t14021 + t13126;
  t14290 = 3.e-6*t4615*t3408*t4015;
  t14295 = -1.*t4615*t4492*t4498;
  t14297 = -3.e-6*t4259*t4725;
  t14321 = t14290 + t14295 + t14297;
  t14348 = t4615*t3408*t3524;
  t14351 = t4259*t4725;
  t14352 = t14348 + t8178 + t14351;
  t14240 = -9.e-12*t4760;
  t14353 = 9.e-12*t4760;
  t14356 = t14321*t5302;
  t15261 = Sin(var1[3]);
  t15258 = Cos(var1[3]);
  t15260 = t15258*t3408*t4259;
  t15262 = -1.*t15261*t4498;
  t15263 = t15260 + t15262;
  t15301 = -1.*t3408*t15261;
  t15303 = -1.*t15258*t4259*t4498;
  t15305 = t15301 + t15303;
  t15409 = -1.*t15258*t4615*t4827;
  t15410 = -1.*t15263*t4725;
  t15411 = 3.e-6*t15305*t4725;
  t15414 = t15409 + t15410 + t15411;
  t15293 = 3.e-6*t4015*t15263;
  t15306 = t4492*t15305;
  t15404 = 3.e-6*t15258*t4615*t4725;
  t15406 = t15293 + t15306 + t15404;
  t15423 = t3524*t15263;
  t15427 = 3.e-6*t4015*t15305;
  t15428 = -1.*t15258*t4615*t4725;
  t15434 = t15423 + t15427 + t15428;
  t15522 = -1.*t15258*t3408*t4259;
  t15552 = t15261*t4498;
  t15553 = t15522 + t15552;
  t15978 = 3.e-6*t4015*t15553;
  t16115 = t3524*t15305;
  t16116 = t15978 + t16115;
  t16136 = t4492*t15553;
  t16142 = t16136 + t15427;
  t16156 = 3.e-6*t15553*t4725;
  t16158 = -1.*t15305*t4725;
  t16159 = t16156 + t16158;
  t16457 = -1.*t3408*t15261*t4259;
  t16468 = -1.*t15258*t4498;
  t16473 = t16457 + t16468;
  t16487 = -1.*t15258*t3408;
  t16513 = t15261*t4259*t4498;
  t16865 = t16487 + t16513;
  t17076 = t3524*t16473;
  t17078 = 3.e-6*t4015*t16865;
  t17080 = t4615*t15261*t4725;
  t17081 = t17076 + t17078 + t17080;
  t17170 = 3.e-6*t4015*t16473;
  t17195 = t4492*t16865;
  t17196 = -3.e-6*t4615*t15261*t4725;
  t17202 = t17170 + t17195 + t17196;
  t17937 = t4615*t4827*t15261;
  t17941 = -1.*t16473*t4725;
  t17943 = 3.e-6*t16865*t4725;
  t17946 = t17937 + t17941 + t17943;
  t19930 = t15258*t4615*t3408*t3524;
  t19933 = -3.e-6*t15258*t4615*t4015*t4498;
  t19934 = t15258*t4259*t4725;
  t19936 = t19930 + t19933 + t19934;
  t19940 = 3.e-6*t15258*t4615*t3408*t4015;
  t19941 = -1.*t15258*t4615*t4492*t4498;
  t20089 = -3.e-6*t15258*t4259*t4725;
  t20090 = t19940 + t19941 + t20089;
  t20099 = t15258*t4827*t4259;
  t20103 = -1.*t15258*t4615*t3408*t4725;
  t20112 = -3.e-6*t15258*t4615*t4498*t4725;
  t20118 = t20099 + t20103 + t20112;
  t20279 = 3.e-6*t15258*t4615*t3524;
  t20345 = 3.e-6*t15263*t4725;
  t20346 = -9.e-12*t15305*t4725;
  t20347 = t20279 + t20345 + t20346;
  t20263 = -1.*t15258*t4615*t3524;
  t20265 = t20263 + t15410 + t15411;
  t20639 = -1.*t3524*t15263;
  t20783 = 3.e-6*t3524*t15305;
  t20800 = 1.000000000009*t15258*t4615*t4725;
  t20809 = t20639 + t20783 + t20800;
  t21440 = t4615*t3408*t3524*t15261;
  t21744 = -3.e-6*t4615*t4015*t15261*t4498;
  t21755 = t15261*t4259*t4725;
  t21757 = t21440 + t21744 + t21755;
  t21430 = t4827*t15261*t4259;
  t21431 = -1.*t4615*t3408*t15261*t4725;
  t21433 = -3.e-6*t4615*t15261*t4498*t4725;
  t21434 = t21430 + t21431 + t21433;
  t21423 = 3.e-6*t4615*t3408*t4015*t15261;
  t21424 = -1.*t4615*t4492*t15261*t4498;
  t21425 = -3.e-6*t15261*t4259*t4725;
  t21428 = t21423 + t21424 + t21425;
  t22146 = -3.e-6*t4615*t3408*t4015*t15261;
  t22147 = -1.*t4615*t3524*t15261*t4498;
  t22148 = t22146 + t22147;
  t22150 = -1.*t4615*t3408*t4492*t15261;
  t22151 = t22150 + t21744;
  t22156 = -3.e-6*t4615*t3408*t15261*t4725;
  t22157 = t4615*t15261*t4498*t4725;
  t22158 = t22156 + t22157;
  t17075 = -0.2000000000018*t4615*t15261*t4725;
  t22244 = -1.*t3408*t3524*t15261*t4259;
  t22245 = 3.e-6*t4015*t15261*t4259*t4498;
  t22263 = t22244 + t22245 + t17080;
  t22384 = -3.e-6*t3408*t4015*t15261*t4259;
  t22554 = t4492*t15261*t4259*t4498;
  t22557 = t22384 + t22554 + t17196;
  t22562 = t3408*t15261*t4259*t4725;
  t22563 = 3.e-6*t15261*t4259*t4498*t4725;
  t22570 = t17937 + t22562 + t22563;
  t19918 = 0.2000000000018*t15258*t4615*t3408*t4015;
  t19928 = 6.000000000054e-7*t15258*t4615*t4015*t4498;
  t19929 = -0.2000000000018*t15258*t4259*t4725;
  t19939 = t19936*t6254;
  t20092 = t20090*t6342;
  t20094 = t6389*t19936;
  t20119 = t20118*t6522;
  t20120 = t20090*t6556;
  t20121 = t20094 + t20119 + t20120;
  t20139 = 0.2*t20121;
  t20141 = t6574*t20090;
  t20142 = t19936*t6633;
  t20148 = t20118*t6556;
  t20149 = t20141 + t20142 + t20148;
  t20150 = 0.100001*t20149;
  t20151 = t20118*t6709;
  t20156 = t6389*t20118;
  t20157 = t20090*t6633;
  t20215 = t19936*t6740;
  t20230 = t20156 + t20157 + t20215;
  t20249 = -0.3*t20230;
  t20251 = t19918 + t19928 + t19929 + t19939 + t20092 + t20139 + t20150 + t20151 + t20249;
  t22759 = -3.e-6*t3524*t15261*t4259;
  t22769 = 3.e-6*t4615*t3408*t15261*t4725;
  t22775 = 9.e-12*t4615*t15261*t4498*t4725;
  t22778 = t22759 + t22769 + t22775;
  t22755 = t3524*t15261*t4259;
  t22757 = t22755 + t21431 + t21433;
  t22785 = -1.*t4615*t3408*t3524*t15261;
  t22786 = -3.e-6*t4615*t3524*t15261*t4498;
  t22787 = -1.000000000009*t15261*t4259*t4725;
  t22789 = t22785 + t22786 + t22787;
  t22821 = t15258*t3408;
  t22822 = -1.*t15261*t4259*t4498;
  t22824 = t22821 + t22822;
  t22843 = t3524*t22824;
  t22845 = t17170 + t22843;
  t22836 = 3.e-6*t16473*t4725;
  t22840 = -1.*t22824*t4725;
  t22841 = t22836 + t22840;
  t22817 = t4492*t16473;
  t22831 = 3.e-6*t4015*t22824;
  t22833 = t22817 + t22831;
  t22137 = 6.000000000054e-7*t4615*t3408*t4015*t15261;
  t22139 = -0.2000000000018*t4615*t4015*t15261*t4498;
  t22149 = t22148*t6254;
  t22153 = t22151*t6342;
  t22154 = t6389*t22148;
  t22164 = t22158*t6522;
  t22166 = t22151*t6556;
  t22173 = t22154 + t22164 + t22166;
  t22216 = 0.2*t22173;
  t22217 = t6574*t22151;
  t22218 = t22148*t6633;
  t22219 = t22158*t6556;
  t22221 = t22217 + t22218 + t22219;
  t22222 = 0.100001*t22221;
  t22223 = t22158*t6709;
  t22225 = t6389*t22158;
  t22226 = t22151*t6633;
  t22227 = t22148*t6740;
  t22229 = t22225 + t22226 + t22227;
  t22231 = -0.3*t22229;
  t22234 = t22137 + t22139 + t22149 + t22153 + t22216 + t22222 + t22223 + t22231;
  t15847 = -6.000000000054e-7*t4015*t15553;
  t15921 = 0.2000000000018*t4015*t15305;
  t16124 = t16116*t6254;
  t16147 = t16142*t6342;
  t16151 = t6389*t16116;
  t16163 = t16159*t6522;
  t16167 = t16142*t6556;
  t16173 = t16151 + t16163 + t16167;
  t16176 = 0.2*t16173;
  t16181 = t6574*t16142;
  t16183 = t16116*t6633;
  t16196 = t16159*t6556;
  t16204 = t16181 + t16183 + t16196;
  t16205 = 0.100001*t16204;
  t16211 = t16159*t6709;
  t16270 = t6389*t16159;
  t16307 = t16142*t6633;
  t16335 = t16116*t6740;
  t16336 = t16270 + t16307 + t16335;
  t16353 = -0.3*t16336;
  t16377 = t15847 + t15921 + t16124 + t16147 + t16176 + t16205 + t16211 + t16353;
  t16482 = 0.2000000000018*t4015*t16473;
  t17068 = -6.000000000054e-7*t4015*t16865;
  t22908 = t17076 + t17078;
  t22913 = t17170 + t17195;
  t22932 = t17941 + t17943;
  t22976 = -9.e-12*t16473*t4725;
  t22978 = 3.e-6*t22824*t4725;
  t22981 = t22976 + t22978;
  t22985 = 3.e-6*t3524*t16473;
  t22987 = -1.*t3524*t22824;
  t22991 = t22985 + t22987;
  t23029 = t3408*t15261*t4259;
  t23030 = t15258*t4498;
  t23032 = t23029 + t23030;
  t23070 = -1.*t4615*t3524*t15261;
  t23075 = -1.*t23032*t4725;
  t23076 = t23070 + t23075 + t22978;
  t23024 = 3.e-6*t4615*t3524*t15261;
  t23033 = 3.e-6*t23032*t4725;
  t23040 = -9.e-12*t22824*t4725;
  t23044 = t23024 + t23033 + t23040;
  t23056 = -1.*t3524*t23032;
  t23059 = 3.e-6*t3524*t22824;
  t23061 = 1.000000000009*t4615*t15261*t4725;
  t23064 = t23056 + t23059 + t23061;
  t23153 = t23056 + t23059 + t17080;
  t23167 = 3.e-6*t3524*t23032;
  t23168 = -9.e-12*t3524*t22824;
  t23178 = t23167 + t23168 + t17196;
  t23205 = 1.000000000009*t4615*t3524*t15261;
  t23206 = t23032*t4725;
  t23211 = -3.e-6*t22824*t4725;
  t23215 = t23205 + t23206 + t23211;
  t22651 = -0.2000000000018*t3524*t15261*t4259;
  t22701 = 0.2000000000018*t4615*t3408*t15261*t4725;
  t22754 = 6.000000000054e-7*t4615*t15261*t4498*t4725;
  t22758 = t22757*t6254;
  t22779 = t22778*t6342;
  t22780 = t6574*t22778;
  t22782 = t22757*t6633;
  t22791 = t22789*t6556;
  t22794 = t22780 + t22782 + t22791;
  t22795 = 0.100001*t22794;
  t22797 = t6389*t22757;
  t22799 = t22789*t6522;
  t22800 = t22778*t6556;
  t22801 = t22797 + t22799 + t22800;
  t22803 = 0.2*t22801;
  t22804 = t22789*t6709;
  t22805 = t6389*t22789;
  t22807 = t22778*t6633;
  t22808 = t22757*t6740;
  t22809 = t22805 + t22807 + t22808;
  t22812 = -0.3*t22809;
  t22813 = t22651 + t22701 + t22754 + t22758 + t22779 + t22795 + t22803 + t22804 + t22812;
  t20257 = 0.2000000000018*t15258*t4615*t3524;
  t20258 = 0.2000000000018*t15263*t4725;
  t20262 = -6.000000000054e-7*t15305*t4725;
  t20273 = t20265*t6254;
  t20348 = t20347*t6342;
  t20401 = t6574*t20347;
  t20403 = t20265*t6633;
  t20819 = t20809*t6556;
  t21169 = t20401 + t20403 + t20819;
  t21170 = 0.100001*t21169;
  t21171 = t6389*t20265;
  t21183 = t20809*t6522;
  t21191 = t20347*t6556;
  t21327 = t21171 + t21183 + t21191;
  t21399 = 0.2*t21327;
  t21402 = t20809*t6709;
  t21404 = t6389*t20809;
  t21405 = t20347*t6633;
  t21406 = t20265*t6740;
  t21409 = t21404 + t21405 + t21406;
  t21410 = -0.3*t21409;
  t21415 = t20257 + t20258 + t20262 + t20273 + t20348 + t21170 + t21399 + t21402 + t21410;
  t22968 = -6.000000000054e-7*t16473*t4725;
  t22973 = 0.2000000000018*t22824*t4725;
  t22975 = t22841*t6254;
  t22982 = t22981*t6342;
  t22983 = t6574*t22981;
  t22984 = t22841*t6633;
  t22992 = t22991*t6556;
  t22993 = t22983 + t22984 + t22992;
  t22994 = 0.100001*t22993;
  t22995 = t6389*t22841;
  t22996 = t22991*t6522;
  t22997 = t22981*t6556;
  t22998 = t22995 + t22996 + t22997;
  t22999 = 0.2*t22998;
  t23000 = t22991*t6709;
  t23001 = t6389*t22991;
  t23002 = t22981*t6633;
  t23003 = t22841*t6740;
  t23008 = t23001 + t23002 + t23003;
  t23010 = -0.3*t23008;
  t23015 = t22968 + t22973 + t22975 + t22982 + t22994 + t22999 + t23000 + t23010;
  t21429 = t21428*t4810;
  t21436 = t21434*t5143;
  t21758 = t21757*t5290;
  t21760 = t21757*t5296;
  t21767 = t21434*t5302;
  t21892 = -1.8e-11*t21428*t4772;
  t21995 = t21760 + t21767 + t21892;
  t22097 = 0.100001*t21995;
  t22098 = t21434*t5458;
  t22099 = t21428*t5302;
  t22100 = -1.000000000009*t21757*t4772;
  t22104 = t22098 + t22099 + t22100;
  t22112 = 0.2*t22104;
  t22119 = t21757*t5470;
  t22124 = t21428*t5296;
  t22125 = -1.000000000009*t21434*t4772;
  t22127 = t22119 + t22124 + t22125;
  t22129 = -0.3*t22127;
  t22130 = t21429 + t21436 + t21758 + t22097 + t22112 + t22129;
  t15407 = t15406*t4810;
  t15416 = t15414*t5143;
  t15436 = t15434*t5290;
  t15437 = t15414*t5458;
  t15438 = t15406*t5302;
  t15439 = -1.000000000009*t15434*t4772;
  t15441 = t15437 + t15438 + t15439;
  t15444 = 0.2*t15441;
  t15445 = t15434*t5296;
  t15448 = t15414*t5302;
  t15449 = -1.8e-11*t15406*t4772;
  t15456 = t15445 + t15448 + t15449;
  t15458 = 0.100001*t15456;
  t15461 = t15434*t5470;
  t15464 = t15406*t5296;
  t15473 = -1.000000000009*t15414*t4772;
  t15474 = t15461 + t15464 + t15473;
  t15476 = -0.3*t15474;
  t15479 = t15407 + t15416 + t15436 + t15444 + t15458 + t15476;
  t22835 = t22833*t4810;
  t22842 = t22841*t5143;
  t22847 = t22845*t5290;
  t22848 = t22845*t5296;
  t22850 = t22841*t5302;
  t22854 = -1.8e-11*t22833*t4772;
  t22860 = t22848 + t22850 + t22854;
  t22864 = 0.100001*t22860;
  t22869 = t22841*t5458;
  t22871 = t22833*t5302;
  t22873 = -1.000000000009*t22845*t4772;
  t22878 = t22869 + t22871 + t22873;
  t22884 = 0.2*t22878;
  t22889 = t22845*t5470;
  t22891 = t22833*t5296;
  t22893 = -1.000000000009*t22841*t4772;
  t22899 = t22889 + t22891 + t22893;
  t22902 = -0.3*t22899;
  t22903 = t22835 + t22842 + t22847 + t22864 + t22884 + t22902;
  t23052 = t23044*t4810;
  t23067 = t23064*t5143;
  t23077 = t23076*t5290;
  t23078 = t23076*t5470;
  t23079 = t23044*t5296;
  t23084 = -1.000000000009*t23064*t4772;
  t23088 = t23078 + t23079 + t23084;
  t23089 = -0.3*t23088;
  t23090 = t23076*t5296;
  t23091 = t23064*t5302;
  t23092 = -1.8e-11*t23044*t4772;
  t23105 = t23090 + t23091 + t23092;
  t23109 = 0.100001*t23105;
  t23111 = t23064*t5458;
  t23112 = t23044*t5302;
  t23113 = -1.000000000009*t23076*t4772;
  t23115 = t23111 + t23112 + t23113;
  t23116 = 0.2*t23115;
  t23128 = t23052 + t23067 + t23077 + t23089 + t23109 + t23116;
  t14239 = 0.1000000000009*t4760;
  t14241 = t14240 + t6206;
  t14242 = 0.2*t14241;
  t14277 = -9.e-7*t5296;
  t14280 = t14239 + t14242 + t14277;
  t14324 = -1.62e-17*t4760;
  t14343 = 0.1*t4781;
  t14344 = 0.2*t5296;
  t14345 = t14324 + t14343 + t14344;
  t23542 = 3.e-6*t4015*t23032;
  t23554 = t4492*t22824;
  t23556 = 3.e-6*t4615*t15261*t4725;
  t23558 = t23542 + t23554 + t23556;
  t23520 = -1.*t4615*t4827*t15261;
  t23523 = t23520 + t23075 + t22978;
  t23569 = t3524*t23032;
  t23570 = -1.*t4615*t15261*t4725;
  t23592 = t23569 + t22831 + t23570;
  t14354 = t14353 + t6206;
  t14372 = 0.2000000000018*t4760;
  t14373 = t14240 + t4772;
  t14377 = 0.1*t14373;
  t14388 = t14372 + t4930 + t14377;
  t14394 = t14353 + t4772;
  t23615 = t23558*t5302;
  t27062 = t23558*t4810;
  t27063 = t23523*t5143;
  t27064 = t23592*t5290;
  t27066 = t23523*t5458;
  t27334 = -1.000000000009*t23592*t4772;
  t27355 = t27066 + t23615 + t27334;
  t27400 = 0.2*t27355;
  t27431 = t23592*t5296;
  t27436 = t23523*t5302;
  t27582 = -1.8e-11*t23558*t4772;
  t27590 = t27431 + t27436 + t27582;
  t27612 = 0.100001*t27590;
  t27621 = t23592*t5470;
  t27630 = t23558*t5296;
  t27636 = -1.000000000009*t23523*t4772;
  t27638 = t27621 + t27630 + t27636;
  t27640 = -0.3*t27638;
  t27645 = t27062 + t27063 + t27064 + t27400 + t27612 + t27640;
  t24060 = -6.000000000054e-7*t4015*t16473;
  t24062 = 0.2000000000018*t4015*t22824;
  t24066 = t22845*t6254;
  t24067 = t22833*t6342;
  t24069 = t6389*t22845;
  t24100 = t22841*t6522;
  t24101 = t22833*t6556;
  t24135 = t24069 + t24100 + t24101;
  t24160 = 0.2*t24135;
  t24167 = t6574*t22833;
  t24176 = t22845*t6633;
  t24195 = t22841*t6556;
  t24198 = t24167 + t24176 + t24195;
  t24590 = 0.100001*t24198;
  t24596 = t22841*t6709;
  t24603 = t22833*t6633;
  t24627 = t22845*t6740;
  t24631 = t22995 + t24603 + t24627;
  t24632 = -0.3*t24631;
  t24637 = t24060 + t24062 + t24066 + t24067 + t24160 + t24590 + t24596 + t24632;
  t23653 = 0.2000000000018*t4015*t15263;
  t23660 = -6.000000000054e-7*t4015*t15305;
  t23662 = 0.2000000000018*t15258*t4615*t4725;
  t23664 = t15434*t6254;
  t23665 = t15406*t6342;
  t23668 = t6389*t15434;
  t23681 = t15414*t6522;
  t23683 = t15406*t6556;
  t23685 = t23668 + t23681 + t23683;
  t23687 = 0.2*t23685;
  t23694 = t6574*t15406;
  t23695 = t15434*t6633;
  t23785 = t15414*t6556;
  t23795 = t23694 + t23695 + t23785;
  t23797 = 0.100001*t23795;
  t23799 = t15414*t6709;
  t23800 = t6389*t15414;
  t23802 = t15406*t6633;
  t23833 = t15434*t6740;
  t23852 = t23800 + t23802 + t23833;
  t23865 = -0.3*t23852;
  t23867 = t23653 + t23660 + t23662 + t23664 + t23665 + t23687 + t23797 + t23799 + t23865;
  t23954 = 0.2000000000018*t4615*t3408*t4015*t15261;
  t23959 = 6.000000000054e-7*t4615*t4015*t15261*t4498;
  t23964 = -0.2000000000018*t15261*t4259*t4725;
  t23972 = t21757*t6254;
  t23975 = t21428*t6342;
  t23982 = t6389*t21757;
  t23986 = t21434*t6522;
  t23988 = t21428*t6556;
  t23991 = t23982 + t23986 + t23988;
  t23994 = 0.2*t23991;
  t23998 = t6574*t21428;
  t24010 = t21757*t6633;
  t24014 = t21434*t6556;
  t24018 = t23998 + t24010 + t24014;
  t24022 = 0.100001*t24018;
  t24028 = t21434*t6709;
  t24030 = t6389*t21434;
  t24031 = t21428*t6633;
  t24035 = t21757*t6740;
  t24053 = t24030 + t24031 + t24035;
  t24054 = -0.3*t24053;
  t24056 = t23954 + t23959 + t23964 + t23972 + t23975 + t23994 + t24022 + t24028 + t24054;
  t24638 = 0.2000000000018*t4615*t3524*t15261;
  t24639 = 0.2000000000018*t23032*t4725;
  t24642 = -6.000000000054e-7*t22824*t4725;
  t24646 = t23076*t6254;
  t24647 = t23044*t6342;
  t24834 = t6574*t23044;
  t24849 = t23076*t6633;
  t25019 = t23064*t6556;
  t26147 = t24834 + t24849 + t25019;
  t26423 = 0.100001*t26147;
  t26429 = t6389*t23076;
  t26430 = t23064*t6522;
  t26490 = t23044*t6556;
  t26526 = t26429 + t26430 + t26490;
  t26531 = 0.2*t26526;
  t26534 = t23064*t6709;
  t26573 = t6389*t23064;
  t26577 = t23044*t6633;
  t26597 = t23076*t6740;
  t26720 = t26573 + t26577 + t26597;
  t27060 = -0.3*t26720;
  t27061 = t24638 + t24639 + t24642 + t24646 + t24647 + t26423 + t26531 + t26534 + t27060;
  t28012 = -1.*t15258*t4827*t4259;
  t28024 = t15258*t4615*t3408*t4725;
  t28051 = 3.e-6*t15258*t4615*t4498*t4725;
  t28590 = t28012 + t28024 + t28051;
  t27671 = -3.e-6*t15258*t4615*t3408*t4015;
  t27672 = t15258*t4615*t4492*t4498;
  t27673 = 3.e-6*t15258*t4259*t4725;
  t27971 = t27671 + t27672 + t27673;
  t28617 = -1.*t15258*t4615*t3408*t3524;
  t28646 = 3.e-6*t15258*t4615*t4015*t4498;
  t28650 = -1.*t15258*t4259*t4725;
  t29078 = t28617 + t28646 + t28650;
  t29409 = t15258*t4615*t3524*t4498;
  t29411 = t19940 + t29409;
  t29414 = t15258*t4615*t3408*t4492;
  t29415 = t29414 + t28646;
  t29423 = 3.e-6*t15258*t4615*t3408*t4725;
  t29425 = -1.*t15258*t4615*t4498*t4725;
  t29426 = t29423 + t29425;
  t29669 = t15258*t3408*t3524*t4259;
  t29670 = -3.e-6*t15258*t4015*t4259*t4498;
  t29672 = t29669 + t29670 + t15428;
  t29694 = 3.e-6*t15258*t3408*t4015*t4259;
  t29701 = -1.*t15258*t4492*t4259*t4498;
  t29707 = t29694 + t29701 + t15404;
  t29725 = -1.*t15258*t3408*t4259*t4725;
  t29729 = -3.e-6*t15258*t4259*t4498*t4725;
  t29732 = t15409 + t29725 + t29729;
  t29986 = 3.e-6*t15258*t3524*t4259;
  t29990 = -3.e-6*t15258*t4615*t3408*t4725;
  t29992 = -9.e-12*t15258*t4615*t4498*t4725;
  t29995 = t29986 + t29990 + t29992;
  t29960 = -1.*t15258*t3524*t4259;
  t29962 = t29960 + t28024 + t28051;
  t30014 = 3.e-6*t15258*t4615*t3524*t4498;
  t30016 = 1.000000000009*t15258*t4259*t4725;
  t30019 = t19930 + t30014 + t30016;
  t30119 = t3408*t15261;
  t30121 = t15258*t4259*t4498;
  t30128 = t30119 + t30121;
  t30186 = t3524*t30128;
  t30206 = t15293 + t30186;
  t30153 = -1.*t30128*t4725;
  t30154 = t20345 + t30153;
  t30117 = t4492*t15263;
  t30145 = 3.e-6*t4015*t30128;
  t30147 = t30117 + t30145;
  t29404 = -6.000000000054e-7*t15258*t4615*t3408*t4015;
  t29408 = 0.2000000000018*t15258*t4615*t4015*t4498;
  t29413 = t29411*t6254;
  t29419 = t29415*t6342;
  t29422 = t6389*t29411;
  t29427 = t29426*t6522;
  t29428 = t29415*t6556;
  t29435 = t29422 + t29427 + t29428;
  t29456 = 0.2*t29435;
  t29458 = t6574*t29415;
  t29472 = t29411*t6633;
  t29547 = t29426*t6556;
  t29550 = t29458 + t29472 + t29547;
  t29557 = 0.100001*t29550;
  t29559 = t29426*t6709;
  t29575 = t6389*t29426;
  t29577 = t29415*t6633;
  t29580 = t29411*t6740;
  t29581 = t29575 + t29577 + t29580;
  t29592 = -0.3*t29581;
  t29606 = t29404 + t29408 + t29413 + t29419 + t29456 + t29557 + t29559 + t29592;
  t30377 = t15423 + t15427;
  t30384 = t15293 + t15306;
  t30405 = t15410 + t15411;
  t30492 = -9.e-12*t15263*t4725;
  t30499 = 3.e-6*t30128*t4725;
  t30507 = t30492 + t30499;
  t30725 = 3.e-6*t3524*t15263;
  t30744 = -1.*t3524*t30128;
  t30746 = t30725 + t30744;
  t31071 = t15258*t4615*t3524;
  t31077 = -1.*t15553*t4725;
  t31079 = t31071 + t31077 + t30499;
  t30810 = -3.e-6*t15258*t4615*t3524;
  t30813 = -9.e-12*t30128*t4725;
  t30814 = t30810 + t16156 + t30813;
  t30878 = -1.*t3524*t15553;
  t30958 = 3.e-6*t3524*t30128;
  t31012 = -1.000000000009*t15258*t4615*t4725;
  t31052 = t30878 + t30958 + t31012;
  t31335 = t30878 + t30958 + t15428;
  t31340 = 3.e-6*t3524*t15553;
  t31350 = -9.e-12*t3524*t30128;
  t31351 = t31340 + t31350 + t15404;
  t31363 = -1.000000000009*t15258*t4615*t3524;
  t31366 = t15553*t4725;
  t31367 = -3.e-6*t30128*t4725;
  t31372 = t31363 + t31366 + t31367;
  t29937 = 0.2000000000018*t15258*t3524*t4259;
  t29943 = -0.2000000000018*t15258*t4615*t3408*t4725;
  t29959 = -6.000000000054e-7*t15258*t4615*t4498*t4725;
  t29981 = t29962*t6254;
  t29997 = t29995*t6342;
  t30007 = t6574*t29995;
  t30012 = t29962*t6633;
  t30025 = t30019*t6556;
  t30029 = t30007 + t30012 + t30025;
  t30037 = 0.100001*t30029;
  t30038 = t6389*t29962;
  t30045 = t30019*t6522;
  t30049 = t29995*t6556;
  t30052 = t30038 + t30045 + t30049;
  t30053 = 0.2*t30052;
  t30057 = t30019*t6709;
  t30058 = t6389*t30019;
  t30060 = t29995*t6633;
  t30065 = t29962*t6740;
  t30085 = t30058 + t30060 + t30065;
  t30088 = -0.3*t30085;
  t30100 = t29937 + t29943 + t29959 + t29981 + t29997 + t30037 + t30053 + t30057 + t30088;
  t30479 = -6.000000000054e-7*t15263*t4725;
  t30489 = 0.2000000000018*t30128*t4725;
  t30491 = t30154*t6254;
  t30688 = t30507*t6342;
  t30691 = t6574*t30507;
  t30719 = t30154*t6633;
  t30757 = t30746*t6556;
  t30759 = t30691 + t30719 + t30757;
  t30764 = 0.100001*t30759;
  t30774 = t6389*t30154;
  t30775 = t30746*t6522;
  t30776 = t30507*t6556;
  t30778 = t30774 + t30775 + t30776;
  t30780 = 0.2*t30778;
  t30781 = t30746*t6709;
  t30782 = t6389*t30746;
  t30786 = t30507*t6633;
  t30787 = t30154*t6740;
  t30789 = t30782 + t30786 + t30787;
  t30793 = -0.3*t30789;
  t30799 = t30479 + t30489 + t30491 + t30688 + t30764 + t30780 + t30781 + t30793;
  t27976 = t27971*t4810;
  t28596 = t28590*t5143;
  t29087 = t29078*t5290;
  t29178 = t28590*t5458;
  t29179 = t27971*t5302;
  t29181 = -1.000000000009*t29078*t4772;
  t29183 = t29178 + t29179 + t29181;
  t29271 = 0.2*t29183;
  t29329 = t29078*t5296;
  t29334 = t28590*t5302;
  t29336 = -1.8e-11*t27971*t4772;
  t29339 = t29329 + t29334 + t29336;
  t29340 = 0.100001*t29339;
  t29347 = t29078*t5470;
  t29354 = t27971*t5296;
  t29377 = -1.000000000009*t28590*t4772;
  t29381 = t29347 + t29354 + t29377;
  t29382 = -0.3*t29381;
  t29399 = t27976 + t28596 + t29087 + t29271 + t29340 + t29382;
  t30149 = t30147*t4810;
  t30167 = t30154*t5143;
  t30207 = t30206*t5290;
  t30213 = t30206*t5296;
  t30218 = t30154*t5302;
  t30241 = -1.8e-11*t30147*t4772;
  t30253 = t30213 + t30218 + t30241;
  t30261 = 0.100001*t30253;
  t30269 = t30154*t5458;
  t30299 = t30147*t5302;
  t30310 = -1.000000000009*t30206*t4772;
  t30316 = t30269 + t30299 + t30310;
  t30318 = 0.2*t30316;
  t30319 = t30206*t5470;
  t30320 = t30147*t5296;
  t30327 = -1.000000000009*t30154*t4772;
  t30348 = t30319 + t30320 + t30327;
  t30350 = -0.3*t30348;
  t30356 = t30149 + t30167 + t30207 + t30261 + t30318 + t30350;
  t30822 = t30814*t4810;
  t31067 = t31052*t5143;
  t31083 = t31079*t5290;
  t31092 = t31079*t5470;
  t31093 = t30814*t5296;
  t31097 = -1.000000000009*t31052*t4772;
  t31115 = t31092 + t31093 + t31097;
  t31117 = -0.3*t31115;
  t31119 = t31079*t5296;
  t31128 = t31052*t5302;
  t31130 = -1.8e-11*t30814*t4772;
  t31134 = t31119 + t31128 + t31130;
  t31143 = 0.100001*t31134;
  t31145 = t31052*t5458;
  t31147 = t30814*t5302;
  t31150 = -1.000000000009*t31079*t4772;
  t31224 = t31145 + t31147 + t31150;
  t31325 = 0.2*t31224;
  t31326 = t30822 + t31067 + t31083 + t31117 + t31143 + t31325;
  t31506 = t15258*t4615*t4827;
  t31512 = t31506 + t31077 + t30499;
  t31518 = t4492*t30128;
  t31529 = -3.e-6*t15258*t4615*t4725;
  t31541 = t15978 + t31518 + t31529;
  t31560 = t3524*t15553;
  t31566 = t15258*t4615*t4725;
  t31574 = t31560 + t30145 + t31566;
  t31576 = t31541*t5302;
  p_output1[0]=(t6771 + t6772 + t6819 + t6254*t6900 + t6342*t6968 + t6709*t7105 - 0.3*(t6740*t6900 + t6633*t6968 + t6389*t7105) + 0.2*(t6389*t6900 + t6556*t6968 + t6522*t7105) + 0.100001*(t6633*t6900 + t6574*t6968 + t6556*t7105))*var2[4] + t6764*var2[5] + t7884*var2[6] + t5599*var2[8];
  p_output1[1]=t6764*var2[4] + (t6771 + t6772 + t6254*t8623 + t6342*t8627 + t6709*t8743 - 0.3*(t6740*t8623 + t6633*t8627 + t6389*t8743) + 0.2*(t6389*t8623 + t6556*t8627 + t6522*t8743) + 0.100001*(t6633*t8623 + t6574*t8627 + t6556*t8743))*var2[5] + t13940*var2[6] + t8618*var2[8];
  p_output1[2]=t7884*var2[4] + t13940*var2[5] + (0.2000000000018*t3408*t3524*t4615 + 6.000000000054e-7*t3524*t4498*t4615 + t14130*t6254 + t14185*t6342 + 0.2*(t14130*t6389 + t14202*t6522 + t14185*t6556) + 0.100001*(t14202*t6556 + t14185*t6574 + t14130*t6633) + t14202*t6709 - 0.3*(t14202*t6389 + t14185*t6633 + t14130*t6740) + t6819)*var2[6] + t14126*var2[8];
  p_output1[3]=t5599*var2[4] + t8618*var2[5] + t14126*var2[6] + (t14238*t14280 + t14321*t14345 + t14352*t14388 - 0.3*(t14352*t14354 + t14356 - 1.000000000009*t14238*t4760) + 0.2*(t14238*t14394 - 1.000000000009*t14352*t4760 + t14321*t4788) + 0.100001*(-1.8e-11*t14321*t4760 + t14238*t4788 + t14352*t5302))*var2[8];
  p_output1[4]=1.;
  p_output1[5]=-0.2000000000018*t3408*t4015*t4259 - 6.000000000054e-7*t4015*t4259*t4498 - 0.2000000000018*t4615*t4725 + t5195*t6254 + t4745*t6342 + 0.2*(t5195*t6389 + t4919*t6522 + t4745*t6556) + 0.100001*(t4919*t6556 + t4745*t6574 + t5195*t6633) + t4919*t6709 - 0.3*(t4919*t6389 + t4745*t6633 + t5195*t6740);
  p_output1[6]=6.000000000054e-7*t3408*t4015*t4615 - 0.2000000000018*t4015*t4498*t4615 + t6342*t8186 + t6709*t8192 + t6254*t8195 + 0.2*(t6556*t8186 + t6522*t8192 + t6389*t8195) + 0.100001*(t6574*t8186 + t6556*t8192 + t6633*t8195) - 0.3*(t13898 + t6633*t8186 + t6740*t8195);
  p_output1[7]=-0.2000000000018*t3524*t4259 + 0.2000000000018*t3408*t4615*t4725 + 6.000000000054e-7*t4498*t4615*t4725 + t14027*t6254 + t13967*t6342 + 0.2*(t14027*t6389 + t14010*t6522 + t13967*t6556) + 0.100001*(t14010*t6556 + t13967*t6574 + t14027*t6633) + t14010*t6709 - 0.3*(t14010*t6389 + t13967*t6633 + t14027*t6740);
  p_output1[8]=t14321*t4810 + t14238*t5143 + t14352*t5290 + 0.100001*(-1.8e-11*t14321*t4772 + t14352*t5296 + t14238*t5302) + 0.2*(t14356 - 1.000000000009*t14352*t4772 + t14238*t5458) - 0.3*(-1.000000000009*t14238*t4772 + t14321*t5296 + t14352*t5470);
  p_output1[9]=(t16482 + t17068 + t17075 + t17081*t6254 + t17202*t6342 + 0.2*(t17081*t6389 + t17946*t6522 + t17202*t6556) + 0.100001*(t17946*t6556 + t17202*t6574 + t17081*t6633) + t17946*t6709 - 0.3*(t17946*t6389 + t17202*t6633 + t17081*t6740))*var2[3] + t20251*var2[4] + t16377*var2[5] + t21415*var2[6] + t15479*var2[8];
  p_output1[10]=t20251*var2[3] + (t17075 - 0.2000000000018*t15261*t3408*t4015*t4259 - 6.000000000054e-7*t15261*t4015*t4259*t4498 + t22263*t6254 + t22557*t6342 + 0.2*(t22263*t6389 + t22570*t6522 + t22557*t6556) + 0.100001*(t22570*t6556 + t22557*t6574 + t22263*t6633) + t22570*t6709 - 0.3*(t22570*t6389 + t22557*t6633 + t22263*t6740))*var2[4] + t22234*var2[5] + t22813*var2[6] + t22130*var2[8];
  p_output1[11]=t16377*var2[3] + t22234*var2[4] + (t16482 + t17068 + t22908*t6254 + t22913*t6342 + 0.2*(t22908*t6389 + t22932*t6522 + t22913*t6556) + 0.100001*(t22932*t6556 + t22913*t6574 + t22908*t6633) + t22932*t6709 - 0.3*(t22932*t6389 + t22913*t6633 + t22908*t6740))*var2[5] + t23015*var2[6] + t22903*var2[8];
  p_output1[12]=t21415*var2[3] + t22813*var2[4] + t23015*var2[5] + (t17075 - 6.000000000054e-7*t22824*t3524 + 0.2000000000018*t23032*t3524 + t23153*t6254 + t23178*t6342 + 0.2*(t23153*t6389 + t23215*t6522 + t23178*t6556) + 0.100001*(t23215*t6556 + t23178*t6574 + t23153*t6633) + t23215*t6709 - 0.3*(t23215*t6389 + t23178*t6633 + t23153*t6740))*var2[6] + t23128*var2[8];
  p_output1[13]=t15479*var2[3] + t22130*var2[4] + t22903*var2[5] + t23128*var2[6] + (t14280*t23523 + t14345*t23558 + t14388*t23592 - 0.3*(t14354*t23592 + t23615 - 1.000000000009*t23523*t4760) + 0.2*(t14394*t23523 - 1.000000000009*t23592*t4760 + t23558*t4788) + 0.100001*(-1.8e-11*t23558*t4760 + t23523*t4788 + t23592*t5302))*var2[8];
  p_output1[14]=1.;
  p_output1[15]=t23867;
  p_output1[16]=t24056;
  p_output1[17]=t24637;
  p_output1[18]=t27061;
  p_output1[19]=t27645;
  p_output1[20]=t23867*var2[3] + t24056*var2[4] + t24637*var2[5] + t27061*var2[6] + t27645*var2[8];
  p_output1[21]=t24056*var2[3] + (t23662 + 0.2000000000018*t15258*t3408*t4015*t4259 + 6.000000000054e-7*t15258*t4015*t4259*t4498 + t29672*t6254 + t29707*t6342 + 0.2*(t29672*t6389 + t29732*t6522 + t29707*t6556) + 0.100001*(t29732*t6556 + t29707*t6574 + t29672*t6633) + t29732*t6709 - 0.3*(t29732*t6389 + t29707*t6633 + t29672*t6740))*var2[4] + t29606*var2[5] + t30100*var2[6] + t29399*var2[8];
  p_output1[22]=t24637*var2[3] + t29606*var2[4] + (t23653 + t23660 + t30377*t6254 + t30384*t6342 + 0.2*(t30377*t6389 + t30405*t6522 + t30384*t6556) + 0.100001*(t30405*t6556 + t30384*t6574 + t30377*t6633) + t30405*t6709 - 0.3*(t30405*t6389 + t30384*t6633 + t30377*t6740))*var2[5] + t30799*var2[6] + t30356*var2[8];
  p_output1[23]=t27061*var2[3] + t30100*var2[4] + t30799*var2[5] + (t23662 + 0.2000000000018*t15553*t3524 - 6.000000000054e-7*t30128*t3524 + t31335*t6254 + t31351*t6342 + 0.2*(t31335*t6389 + t31372*t6522 + t31351*t6556) + 0.100001*(t31372*t6556 + t31351*t6574 + t31335*t6633) + t31372*t6709 - 0.3*(t31372*t6389 + t31351*t6633 + t31335*t6740))*var2[6] + t31326*var2[8];
  p_output1[24]=t27645*var2[3] + t29399*var2[4] + t30356*var2[5] + t31326*var2[6] + (t14280*t31512 + t14345*t31541 + t14388*t31574 - 0.3*(t14354*t31574 + t31576 - 1.000000000009*t31512*t4760) + 0.2*(t14394*t31512 - 1.000000000009*t31574*t4760 + t31541*t4788) + 0.100001*(-1.8e-11*t31541*t4760 + t31512*t4788 + t31574*t5302))*var2[8];
  p_output1[25]=1.;
  p_output1[26]=-6.000000000054e-7*t22824*t4015 + 0.2000000000018*t23032*t4015 + 0.2000000000018*t15261*t4615*t4725 + t23592*t6254 + t23558*t6342 + 0.2*(t23592*t6389 + t23523*t6522 + t23558*t6556) + 0.100001*(t23523*t6556 + t23558*t6574 + t23592*t6633) + t23523*t6709 - 0.3*(t23523*t6389 + t23558*t6633 + t23592*t6740);
  p_output1[27]=-0.2000000000018*t15258*t3408*t4015*t4615 - 6.000000000054e-7*t15258*t4015*t4498*t4615 + 0.2000000000018*t15258*t4259*t4725 + t29078*t6254 + t27971*t6342 + 0.2*(t29078*t6389 + t28590*t6522 + t27971*t6556) + 0.100001*(t28590*t6556 + t27971*t6574 + t29078*t6633) + t28590*t6709 - 0.3*(t28590*t6389 + t27971*t6633 + t29078*t6740);
  p_output1[28]=-6.000000000054e-7*t15263*t4015 + 0.2000000000018*t30128*t4015 + t30206*t6254 + t30147*t6342 + 0.2*(t30206*t6389 + t30154*t6522 + t30147*t6556) + 0.100001*(t30154*t6556 + t30147*t6574 + t30206*t6633) + t30154*t6709 - 0.3*(t30774 + t30147*t6633 + t30206*t6740);
  p_output1[29]=-0.2000000000018*t15258*t3524*t4615 + 0.2000000000018*t15553*t4725 - 6.000000000054e-7*t30128*t4725 + t31079*t6254 + t30814*t6342 + 0.2*(t31079*t6389 + t31052*t6522 + t30814*t6556) + 0.100001*(t31052*t6556 + t30814*t6574 + t31079*t6633) + t31052*t6709 - 0.3*(t31052*t6389 + t30814*t6633 + t31079*t6740);
  p_output1[30]=t31541*t4810 + t31512*t5143 + t31574*t5290 + 0.100001*(-1.8e-11*t31541*t4772 + t31574*t5296 + t31512*t5302) + 0.2*(t31576 - 1.000000000009*t31574*t4772 + t31512*t5458) - 0.3*(-1.000000000009*t31512*t4772 + t31541*t5296 + t31574*t5470);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_LeftFrontFoot.hh"

namespace Flight2
{

void J_impact_velocity_LeftFrontFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
