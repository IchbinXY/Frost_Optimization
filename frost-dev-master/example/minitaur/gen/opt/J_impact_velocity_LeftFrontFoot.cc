/*
 * Automatically Generated from Mathematica.
 * Thu 30 May 2019 00:02:39 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4729;
  double t29580;
  double t30854;
  double t30900;
  double t31632;
  double t31663;
  double t31773;
  double t31602;
  double t4332;
  double t31609;
  double t31563;
  double t31655;
  double t31794;
  double t31882;
  double t31884;
  double t33130;
  double t33816;
  double t34544;
  double t34631;
  double t34656;
  double t32132;
  double t32274;
  double t32278;
  double t32364;
  double t32378;
  double t32380;
  double t35995;
  double t31257;
  double t31542;
  double t31560;
  double t31564;
  double t31630;
  double t31631;
  double t34662;
  double t36027;
  double t36861;
  double t36001;
  double t42717;
  double t42959;
  double t42964;
  double t37599;
  double t37614;
  double t42709;
  double t42924;
  double t43087;
  double t43138;
  double t43366;
  double t43257;
  double t43265;
  double t43271;
  double t43367;
  double t42716;
  double t43201;
  double t42923;
  double t43254;
  double t43255;
  double t43445;
  double t43361;
  double t42719;
  double t42925;
  double t42930;
  double t42976;
  double t42986;
  double t43140;
  double t43180;
  double t43243;
  double t43244;
  double t43248;
  double t43773;
  double t43778;
  double t43779;
  double t43785;
  double t43363;
  double t43787;
  double t43788;
  double t43791;
  double t43792;
  double t43423;
  double t43424;
  double t43796;
  double t43797;
  double t43799;
  double t43801;
  double t43536;
  double t43539;
  double t43542;
  double t43545;
  double t43546;
  double t43695;
  double t43880;
  double t43881;
  double t43883;
  double t43885;
  double t43874;
  double t43876;
  double t43890;
  double t43895;
  double t43902;
  double t43904;
  double t31824;
  double t31888;
  double t31892;
  double t31894;
  double t32393;
  double t33148;
  double t33151;
  double t33157;
  double t33158;
  double t34661;
  double t34666;
  double t34667;
  double t35336;
  double t35363;
  double t44025;
  double t44026;
  double t44016;
  double t44017;
  double t44019;
  double t43952;
  double t43984;
  double t43989;
  double t36867;
  double t37015;
  double t43742;
  double t43757;
  double t44130;
  double t44135;
  double t44142;
  double t37400;
  double t37595;
  double t43018;
  double t43252;
  double t43256;
  double t43364;
  double t43390;
  double t43399;
  double t43401;
  double t43437;
  double t43469;
  double t43515;
  double t43517;
  double t43523;
  double t43552;
  double t43572;
  double t43627;
  double t43699;
  double t43707;
  double t43709;
  double t43714;
  double t44192;
  double t44194;
  double t44217;
  double t44229;
  double t44230;
  double t44242;
  double t44384;
  double t44385;
  double t44402;
  double t44339;
  double t44366;
  double t44369;
  double t44370;
  double t44379;
  double t44380;
  double t44381;
  double t43758;
  double t44499;
  double t44502;
  double t44503;
  double t44504;
  double t44508;
  double t44510;
  double t44184;
  double t44185;
  double t44188;
  double t44221;
  double t44226;
  double t44227;
  double t44248;
  double t44254;
  double t44257;
  double t44260;
  double t44261;
  double t44269;
  double t44294;
  double t44303;
  double t44312;
  double t44313;
  double t44315;
  double t44316;
  double t44318;
  double t44319;
  double t44326;
  double t43868;
  double t43870;
  double t43872;
  double t43877;
  double t43886;
  double t43887;
  double t43888;
  double t43905;
  double t43912;
  double t43913;
  double t43914;
  double t43916;
  double t43918;
  double t43926;
  double t43935;
  double t43936;
  double t43937;
  double t43938;
  double t43942;
  double t43943;
  double t43945;
  double t43946;
  double t44377;
  double t44383;
  double t44409;
  double t44410;
  double t44411;
  double t44435;
  double t44436;
  double t44437;
  double t44441;
  double t44466;
  double t44467;
  double t44469;
  double t44470;
  double t44475;
  double t44476;
  double t44477;
  double t44478;
  double t44479;
  double t44483;
  double t44014;
  double t44023;
  double t44028;
  double t44033;
  double t44043;
  double t44047;
  double t44053;
  double t44054;
  double t44055;
  double t44057;
  double t44059;
  double t44060;
  double t44062;
  double t44063;
  double t44064;
  double t44070;
  double t44078;
  double t44098;
  double t44112;
  double t31898;
  double t33815;
  double t35419;
  double t36020;
  double t36029;
  double t36758;
  double t36843;
  double t36851;
  double t36889;
  double t36893;
  double t36897;
  double t36978;
  double t36988;
  double t37019;
  double t37036;
  double t37051;
  double t37057;
  double t37316;
  double t37337;
  double t44569;
  double t44572;
  double t44589;
  double t44590;
  double t44592;
  double t44593;
  double t44603;
  double t44604;
  double t44605;
  double t44575;
  double t44607;
  double t44616;
  double t44874;
  double t44872;
  double t44873;
  double t44875;
  double t44876;
  double t44879;
  double t44880;
  double t44881;
  double t44897;
  double t44900;
  double t44901;
  double t44902;
  double t44878;
  double t44888;
  double t44890;
  double t44892;
  double t44906;
  double t44907;
  double t44911;
  double t44912;
  double t44983;
  double t44984;
  double t44985;
  double t44988;
  double t44989;
  double t44990;
  double t44993;
  double t44994;
  double t45004;
  double t45005;
  double t45011;
  double t45046;
  double t45047;
  double t45049;
  double t45051;
  double t45052;
  double t45053;
  double t45059;
  double t45061;
  double t45063;
  double t45065;
  double t45067;
  double t45072;
  double t45089;
  double t45090;
  double t45100;
  double t45103;
  double t45104;
  double t45106;
  double t45137;
  double t45138;
  double t45139;
  double t45141;
  double t45146;
  double t45148;
  double t45174;
  double t45175;
  double t45180;
  double t45181;
  double t45182;
  double t45187;
  double t45250;
  double t45252;
  double t45253;
  double t45270;
  double t45243;
  double t45244;
  double t45291;
  double t45298;
  double t45300;
  double t45303;
  double t45374;
  double t45376;
  double t45389;
  double t45390;
  double t45357;
  double t45358;
  double t45360;
  double t45362;
  double t45346;
  double t45349;
  double t45351;
  double t45352;
  double t45434;
  double t45438;
  double t45439;
  double t45443;
  double t45449;
  double t45454;
  double t45459;
  double t45460;
  double t45058;
  double t45537;
  double t45538;
  double t45539;
  double t45541;
  double t45542;
  double t45543;
  double t45552;
  double t45554;
  double t45559;
  double t45133;
  double t45134;
  double t45136;
  double t45142;
  double t45176;
  double t45179;
  double t45188;
  double t45189;
  double t45192;
  double t45195;
  double t45198;
  double t45210;
  double t45211;
  double t45215;
  double t45216;
  double t45218;
  double t45220;
  double t45221;
  double t45223;
  double t45224;
  double t45225;
  double t45229;
  double t45648;
  double t45649;
  double t45650;
  double t45651;
  double t45645;
  double t45646;
  double t45666;
  double t45668;
  double t45671;
  double t45715;
  double t45809;
  double t45810;
  double t45814;
  double t45851;
  double t45853;
  double t45834;
  double t45836;
  double t45843;
  double t45807;
  double t45816;
  double t45826;
  double t45432;
  double t45433;
  double t45441;
  double t45451;
  double t45453;
  double t45462;
  double t45463;
  double t45464;
  double t45465;
  double t45467;
  double t45469;
  double t45470;
  double t45471;
  double t45473;
  double t45476;
  double t45477;
  double t45482;
  double t45483;
  double t45487;
  double t45488;
  double t45509;
  double t44986;
  double t44987;
  double t44992;
  double t44995;
  double t44996;
  double t45016;
  double t45018;
  double t45019;
  double t45020;
  double t45023;
  double t45025;
  double t45026;
  double t45027;
  double t45028;
  double t45029;
  double t45030;
  double t45031;
  double t45041;
  double t45042;
  double t45043;
  double t45044;
  double t45050;
  double t45057;
  double t45931;
  double t45937;
  double t45950;
  double t46315;
  double t46329;
  double t46330;
  double t46338;
  double t46340;
  double t46348;
  double t46516;
  double t46517;
  double t46524;
  double t46559;
  double t46561;
  double t46576;
  double t46512;
  double t46525;
  double t46531;
  double t46540;
  double t46546;
  double t46547;
  double t46551;
  double t46555;
  double t46755;
  double t46767;
  double t46768;
  double t46769;
  double t46790;
  double t46798;
  double t46808;
  double t46809;
  double t45640;
  double t45641;
  double t45644;
  double t45647;
  double t45653;
  double t45659;
  double t45662;
  double t45719;
  double t45720;
  double t45723;
  double t45726;
  double t45727;
  double t45754;
  double t45766;
  double t45786;
  double t45787;
  double t45793;
  double t45796;
  double t45798;
  double t45799;
  double t45801;
  double t45802;
  double t45231;
  double t45234;
  double t45235;
  double t45248;
  double t45274;
  double t45275;
  double t45279;
  double t45305;
  double t45315;
  double t45316;
  double t45319;
  double t45320;
  double t45325;
  double t45329;
  double t45331;
  double t45332;
  double t45333;
  double t45336;
  double t45338;
  double t45340;
  double t45341;
  double t45342;
  double t46283;
  double t46284;
  double t46299;
  double t46332;
  double t46333;
  double t46337;
  double t46352;
  double t46370;
  double t46371;
  double t46376;
  double t46400;
  double t46403;
  double t46405;
  double t46407;
  double t46408;
  double t46440;
  double t46442;
  double t46492;
  double t46498;
  double t46504;
  double t46505;
  double t45356;
  double t45370;
  double t45392;
  double t45394;
  double t45399;
  double t45400;
  double t45402;
  double t45403;
  double t45405;
  double t45406;
  double t45407;
  double t45409;
  double t45411;
  double t45414;
  double t45417;
  double t45419;
  double t45422;
  double t45423;
  double t45426;
  double t44893;
  double t44904;
  double t44913;
  double t44914;
  double t44919;
  double t44922;
  double t44927;
  double t44933;
  double t44967;
  double t44969;
  double t44970;
  double t44971;
  double t44972;
  double t44974;
  double t44975;
  double t44976;
  double t44977;
  double t44978;
  double t44979;
  double t45832;
  double t45849;
  double t45864;
  double t45866;
  double t45867;
  double t45871;
  double t45872;
  double t45875;
  double t45878;
  double t45881;
  double t45884;
  double t45894;
  double t45896;
  double t45900;
  double t45911;
  double t45914;
  double t45915;
  double t45920;
  double t45922;
  double t46542;
  double t46556;
  double t46581;
  double t46582;
  double t46583;
  double t46584;
  double t46586;
  double t46588;
  double t46589;
  double t46590;
  double t46592;
  double t46594;
  double t46595;
  double t46617;
  double t46622;
  double t46624;
  double t46627;
  double t46685;
  double t46688;
  double t44574;
  double t44576;
  double t44579;
  double t44582;
  double t44587;
  double t44594;
  double t44595;
  double t44596;
  double t44599;
  double t47221;
  double t47225;
  double t47272;
  double t47283;
  double t47165;
  double t47198;
  double t47339;
  double t47342;
  double t47347;
  double t44614;
  double t44638;
  double t44640;
  double t44642;
  double t44643;
  double t44654;
  double t47363;
  double t48009;
  double t48013;
  double t48015;
  double t48020;
  double t48021;
  double t48022;
  double t48025;
  double t48027;
  double t48028;
  double t48029;
  double t48030;
  double t48033;
  double t48037;
  double t48039;
  double t48041;
  double t48043;
  double t48055;
  double t48068;
  double t47756;
  double t47760;
  double t47781;
  double t47791;
  double t47792;
  double t47794;
  double t47799;
  double t47800;
  double t47805;
  double t47808;
  double t47809;
  double t47815;
  double t47822;
  double t47827;
  double t47836;
  double t47854;
  double t47856;
  double t47862;
  double t47869;
  double t47875;
  double t47472;
  double t47481;
  double t47490;
  double t47510;
  double t47525;
  double t47535;
  double t47555;
  double t47564;
  double t47574;
  double t47599;
  double t47600;
  double t47604;
  double t47607;
  double t47609;
  double t47616;
  double t47617;
  double t47618;
  double t47619;
  double t47631;
  double t47632;
  double t47633;
  double t47640;
  double t47652;
  double t47653;
  double t47657;
  double t47658;
  double t47677;
  double t47680;
  double t47681;
  double t47684;
  double t47686;
  double t47687;
  double t47692;
  double t47694;
  double t47707;
  double t47708;
  double t47720;
  double t47721;
  double t47731;
  double t47735;
  double t47738;
  double t47740;
  double t47742;
  double t47752;
  double t47894;
  double t47945;
  double t47951;
  double t47957;
  double t47962;
  double t47963;
  double t47964;
  double t47965;
  double t47967;
  double t47969;
  double t47976;
  double t47978;
  double t47980;
  double t47988;
  double t47991;
  double t47993;
  double t47996;
  double t47997;
  double t47999;
  double t48001;
  double t48003;
  double t48005;
  double t48101;
  double t48102;
  double t48104;
  double t48112;
  double t48082;
  double t48088;
  double t48090;
  double t48094;
  double t48114;
  double t48115;
  double t48116;
  double t48119;
  double t48244;
  double t48247;
  double t48256;
  double t48258;
  double t48262;
  double t48263;
  double t48265;
  double t48306;
  double t48307;
  double t48308;
  double t48313;
  double t48315;
  double t48325;
  double t48331;
  double t48336;
  double t48337;
  double t48485;
  double t48487;
  double t48498;
  double t48499;
  double t48477;
  double t48479;
  double t48509;
  double t48512;
  double t48515;
  double t48651;
  double t48654;
  double t48659;
  double t48735;
  double t48747;
  double t48676;
  double t48683;
  double t48650;
  double t48661;
  double t48665;
  double t48218;
  double t48232;
  double t48251;
  double t48260;
  double t48261;
  double t48266;
  double t48268;
  double t48269;
  double t48271;
  double t48272;
  double t48273;
  double t48274;
  double t48275;
  double t48277;
  double t48280;
  double t48282;
  double t48284;
  double t48285;
  double t48286;
  double t48288;
  double t48290;
  double t48882;
  double t48899;
  double t48950;
  double t49198;
  double t49201;
  double t49202;
  double t49229;
  double t49231;
  double t49232;
  double t49332;
  double t49338;
  double t49353;
  double t49290;
  double t49292;
  double t49297;
  double t49315;
  double t49316;
  double t49317;
  double t49321;
  double t49825;
  double t49842;
  double t49843;
  double t49847;
  double t49866;
  double t49870;
  double t49886;
  double t49893;
  double t48474;
  double t48475;
  double t48476;
  double t48482;
  double t48503;
  double t48505;
  double t48506;
  double t48516;
  double t48550;
  double t48560;
  double t48563;
  double t48584;
  double t48589;
  double t48591;
  double t48597;
  double t48598;
  double t48614;
  double t48616;
  double t48623;
  double t48639;
  double t48642;
  double t48643;
  double t49105;
  double t49122;
  double t49173;
  double t49210;
  double t49216;
  double t49223;
  double t49233;
  double t49234;
  double t49235;
  double t49240;
  double t49242;
  double t49243;
  double t49246;
  double t49253;
  double t49256;
  double t49263;
  double t49265;
  double t49266;
  double t49272;
  double t49274;
  double t49277;
  double t48097;
  double t48113;
  double t48120;
  double t48127;
  double t48128;
  double t48129;
  double t48131;
  double t48132;
  double t48133;
  double t48138;
  double t48139;
  double t48149;
  double t48152;
  double t48155;
  double t48158;
  double t48161;
  double t48178;
  double t48181;
  double t48212;
  double t48671;
  double t48724;
  double t48755;
  double t48770;
  double t48771;
  double t48797;
  double t48798;
  double t48799;
  double t48807;
  double t48810;
  double t48812;
  double t48819;
  double t48823;
  double t48831;
  double t48834;
  double t48839;
  double t48841;
  double t48842;
  double t48849;
  double t49311;
  double t49324;
  double t49356;
  double t49357;
  double t49362;
  double t49369;
  double t49385;
  double t49389;
  double t49393;
  double t49394;
  double t49402;
  double t49468;
  double t49469;
  double t49482;
  double t49616;
  double t49760;
  double t49770;
  double t49795;
  double t49810;
  double t50021;
  double t50022;
  double t50031;
  double t50033;
  double t50035;
  double t50039;
  double t50045;
  double t50047;
  double t50063;
  t4729 = Cos(var1[6]);
  t29580 = -1.*t4729;
  t30854 = 1. + t29580;
  t30900 = Sin(var1[4]);
  t31632 = Cos(var1[8]);
  t31663 = Sin(var1[8]);
  t31773 = -3.e-6*t31663;
  t31602 = Cos(var1[4]);
  t4332 = Cos(var1[5]);
  t31609 = Sin(var1[6]);
  t31563 = Sin(var1[5]);
  t31655 = -3.e-6*t31632;
  t31794 = t31655 + t31773;
  t31882 = 3.e-6*t31632;
  t31884 = t31882 + t31773;
  t33130 = -9.e-12*t31663;
  t33816 = -1.*t4332*t4729*t30900;
  t34544 = 3.e-6*t30854*t30900*t31563;
  t34631 = t31602*t31609;
  t34656 = t33816 + t34544 + t34631;
  t32132 = -1.000000000009*t30854;
  t32274 = 1. + t32132;
  t32278 = t31602*t32274;
  t32364 = t4332*t30900*t31609;
  t32378 = 3.e-6*t30900*t31563*t31609;
  t32380 = t32278 + t32364 + t32378;
  t35995 = 3.e-6*t31663;
  t31257 = -3.e-6*t4332*t30854*t30900;
  t31542 = -9.e-12*t30854;
  t31560 = 1. + t31542;
  t31564 = t31560*t30900*t31563;
  t31630 = -3.e-6*t31602*t31609;
  t31631 = t31257 + t31564 + t31630;
  t34662 = -1.*t31632;
  t36027 = t31882 + t35995;
  t36861 = 9.e-12*t31663;
  t36001 = t31655 + t35995;
  t42717 = 1. + t34662;
  t42959 = -3.e-6*t42717;
  t42964 = t42959 + t35995;
  t37599 = 3.e-6*t4332*t30854*t30900;
  t37614 = t4729*t30900*t31563;
  t42709 = t37599 + t37614;
  t42924 = -1.*t31663;
  t43087 = t4332*t31560*t30900;
  t43138 = t43087 + t34544;
  t43366 = 3.e-6*t42717;
  t43257 = 3.e-6*t4332*t30900*t31609;
  t43265 = -1.*t30900*t31563*t31609;
  t43271 = t43257 + t43265;
  t43367 = t43366 + t35995;
  t42716 = 9.e-13*var1[8];
  t43201 = t42959 + t31773;
  t42923 = -9.e-12*t42717;
  t43254 = -1.000000000009*t42717;
  t43255 = 1. + t43254;
  t43445 = t43366 + t31773;
  t43361 = 9.e-12*t42717;
  t42719 = 0.2000000000018*t42717;
  t42925 = t42923 + t42924;
  t42930 = 0.1*t42925;
  t42976 = -9.e-7*t42964;
  t42986 = t42716 + t42719 + t42930 + t42976;
  t43140 = 3.e-7*var1[8];
  t43180 = -1.62e-17*t42717;
  t43243 = 0.2*t43201;
  t43244 = 0.1*t42964;
  t43248 = t43140 + t43180 + t43243 + t43244;
  t43773 = -1.*t31602*t4332*t4729;
  t43778 = 3.e-6*t31602*t30854*t31563;
  t43779 = -1.*t30900*t31609;
  t43785 = t43773 + t43778 + t43779;
  t43363 = t43361 + t42924;
  t43787 = -3.e-6*t31602*t4332*t30854;
  t43788 = t31602*t31560*t31563;
  t43791 = 3.e-6*t30900*t31609;
  t43792 = t43787 + t43788 + t43791;
  t43423 = -1.8e-11*t42717;
  t43424 = 1. + t43423;
  t43796 = -1.*t32274*t30900;
  t43797 = t31602*t4332*t31609;
  t43799 = 3.e-6*t31602*t31563*t31609;
  t43801 = t43796 + t43797 + t43799;
  t43536 = 0.1000000000009*t42717;
  t43539 = -9.e-7*t43201;
  t43542 = t42923 + t31663;
  t43545 = 0.2*t43542;
  t43546 = t42716 + t43536 + t43539 + t43545;
  t43695 = t43361 + t31663;
  t43880 = -3.e-6*t31602*t4729;
  t43881 = -3.e-6*t4332*t30900*t31609;
  t43883 = -9.e-12*t30900*t31563*t31609;
  t43885 = t43880 + t43881 + t43883;
  t43874 = t31602*t4729;
  t43876 = t43874 + t32364 + t32378;
  t43890 = t4332*t4729*t30900;
  t43895 = 3.e-6*t4729*t30900*t31563;
  t43902 = -1.000000000009*t31602*t31609;
  t43904 = t43890 + t43895 + t43902;
  t31824 = 0.2*t31794;
  t31888 = 0.1*t31884;
  t31892 = -1.62e-17*t31663;
  t31894 = 3.e-7 + t31824 + t31888 + t31892;
  t32393 = -9.e-7*t31794;
  t33148 = t31632 + t33130;
  t33151 = 0.2*t33148;
  t33157 = 0.1000000000009*t31663;
  t33158 = 9.e-13 + t32393 + t33151 + t33157;
  t34661 = -9.e-7*t31884;
  t34666 = t34662 + t33130;
  t34667 = 0.1*t34666;
  t35336 = 0.2000000000018*t31663;
  t35363 = 9.e-13 + t34661 + t34667 + t35336;
  t44025 = -1.*t31602*t4729*t31563;
  t44026 = t43787 + t44025;
  t44016 = -3.e-6*t31602*t4332*t31609;
  t44017 = t31602*t31563*t31609;
  t44019 = t44016 + t44017;
  t43952 = -1.*t31602*t4332*t31560;
  t43984 = -3.e-6*t31602*t30854*t31563;
  t43989 = t43952 + t43984;
  t36867 = t34662 + t36861;
  t37015 = t31632 + t36861;
  t43742 = -0.2000000000018*t31602*t4332*t30854;
  t43757 = -6.000000000054e-7*t31602*t30854*t31563;
  t44130 = t43773 + t43778;
  t44135 = t43787 + t43788;
  t44142 = t43797 + t43799;
  t37400 = -6.000000000054e-7*t4332*t30854*t30900;
  t37595 = 0.2000000000018*t30854*t30900*t31563;
  t43018 = t42709*t42986;
  t43252 = t43138*t43248;
  t43256 = t43255*t42709;
  t43364 = t43271*t43363;
  t43390 = t43138*t43367;
  t43399 = t43256 + t43364 + t43390;
  t43401 = 0.2*t43399;
  t43437 = t43424*t43138;
  t43469 = t42709*t43445;
  t43515 = t43271*t43367;
  t43517 = t43437 + t43469 + t43515;
  t43523 = 0.100001*t43517;
  t43552 = t43271*t43546;
  t43572 = t43255*t43271;
  t43627 = t43138*t43445;
  t43699 = t42709*t43695;
  t43707 = t43572 + t43627 + t43699;
  t43709 = -0.3*t43707;
  t43714 = t37400 + t37595 + t43018 + t43252 + t43401 + t43523 + t43552 + t43709;
  t44192 = 9.e-12*t31602*t4332*t31609;
  t44194 = -3.e-6*t31602*t31563*t31609;
  t44217 = t44192 + t44194;
  t44229 = -3.e-6*t31602*t4332*t4729;
  t44230 = t31602*t4729*t31563;
  t44242 = t44229 + t44230;
  t44384 = t4729*t30900;
  t44385 = -1.*t31602*t4332*t31609;
  t44402 = t44384 + t44385 + t44194;
  t44339 = -3.e-6*t4729*t30900;
  t44366 = 3.e-6*t31602*t4332*t31609;
  t44369 = 9.e-12*t31602*t31563*t31609;
  t44370 = t44339 + t44366 + t44369;
  t44379 = -3.e-6*t31602*t4729*t31563;
  t44380 = -1.000000000009*t30900*t31609;
  t44381 = t43773 + t44379 + t44380;
  t43758 = 0.2000000000018*t30900*t31609;
  t44499 = t43773 + t44379 + t43779;
  t44502 = 3.e-6*t31602*t4332*t4729;
  t44503 = 9.e-12*t31602*t4729*t31563;
  t44504 = t44502 + t44503 + t43791;
  t44508 = -1.000000000009*t4729*t30900;
  t44510 = t44508 + t43797 + t43799;
  t44184 = 6.000000000054e-7*t31602*t4332*t31609;
  t44185 = -0.2000000000018*t31602*t31563*t31609;
  t44188 = t44019*t42986;
  t44221 = t44217*t43248;
  t44226 = t43424*t44217;
  t44227 = t44019*t43445;
  t44248 = t44242*t43367;
  t44254 = t44226 + t44227 + t44248;
  t44257 = 0.100001*t44254;
  t44260 = t43255*t44019;
  t44261 = t44242*t43363;
  t44269 = t44217*t43367;
  t44294 = t44260 + t44261 + t44269;
  t44303 = 0.2*t44294;
  t44312 = t44242*t43546;
  t44313 = t43255*t44242;
  t44315 = t44217*t43445;
  t44316 = t44019*t43695;
  t44318 = t44313 + t44315 + t44316;
  t44319 = -0.3*t44318;
  t44326 = t44184 + t44185 + t44188 + t44221 + t44257 + t44303 + t44312 + t44319;
  t43868 = -0.2000000000018*t31602*t4729;
  t43870 = -0.2000000000018*t4332*t30900*t31609;
  t43872 = -6.000000000054e-7*t30900*t31563*t31609;
  t43877 = t43876*t42986;
  t43886 = t43885*t43248;
  t43887 = t43424*t43885;
  t43888 = t43876*t43445;
  t43905 = t43904*t43367;
  t43912 = t43887 + t43888 + t43905;
  t43913 = 0.100001*t43912;
  t43914 = t43255*t43876;
  t43916 = t43904*t43363;
  t43918 = t43885*t43367;
  t43926 = t43914 + t43916 + t43918;
  t43935 = 0.2*t43926;
  t43936 = t43904*t43546;
  t43937 = t43255*t43904;
  t43938 = t43885*t43445;
  t43942 = t43876*t43695;
  t43943 = t43937 + t43938 + t43942;
  t43945 = -0.3*t43943;
  t43946 = t43868 + t43870 + t43872 + t43877 + t43886 + t43913 + t43935 + t43936 + t43945;
  t44377 = t44370*t31894;
  t44383 = t44381*t33158;
  t44409 = t44402*t35363;
  t44410 = t44402*t37015;
  t44411 = t44370*t36001;
  t44435 = -1.000000000009*t44381*t31663;
  t44436 = t44410 + t44411 + t44435;
  t44437 = -0.3*t44436;
  t44441 = t44381*t36867;
  t44466 = t44370*t36027;
  t44467 = -1.000000000009*t44402*t31663;
  t44469 = t44441 + t44466 + t44467;
  t44470 = 0.2*t44469;
  t44475 = t44402*t36001;
  t44476 = t44381*t36027;
  t44477 = -1.8e-11*t44370*t31663;
  t44478 = t44475 + t44476 + t44477;
  t44479 = 0.100001*t44478;
  t44483 = t44377 + t44383 + t44409 + t44437 + t44470 + t44479;
  t44014 = t43989*t31894;
  t44023 = t44019*t33158;
  t44028 = t44026*t35363;
  t44033 = t44026*t36001;
  t44043 = t44019*t36027;
  t44047 = -1.8e-11*t43989*t31663;
  t44053 = t44033 + t44043 + t44047;
  t44054 = 0.100001*t44053;
  t44055 = t44019*t36867;
  t44057 = t43989*t36027;
  t44059 = -1.000000000009*t44026*t31663;
  t44060 = t44055 + t44057 + t44059;
  t44062 = 0.2*t44060;
  t44063 = t44026*t37015;
  t44064 = t43989*t36001;
  t44070 = -1.000000000009*t44019*t31663;
  t44078 = t44063 + t44064 + t44070;
  t44098 = -0.3*t44078;
  t44112 = t44014 + t44023 + t44028 + t44054 + t44062 + t44098;
  t31898 = t31631*t31894;
  t33815 = t32380*t33158;
  t35419 = t34656*t35363;
  t36020 = t34656*t36001;
  t36029 = t32380*t36027;
  t36758 = -1.8e-11*t31631*t31663;
  t36843 = t36020 + t36029 + t36758;
  t36851 = 0.100001*t36843;
  t36889 = t32380*t36867;
  t36893 = t31631*t36027;
  t36897 = -1.000000000009*t34656*t31663;
  t36978 = t36889 + t36893 + t36897;
  t36988 = 0.2*t36978;
  t37019 = t34656*t37015;
  t37036 = t31631*t36001;
  t37051 = -1.000000000009*t32380*t31663;
  t37057 = t37019 + t37036 + t37051;
  t37316 = -0.3*t37057;
  t37337 = t31898 + t33815 + t35419 + t36851 + t36988 + t37316;
  t44569 = t32274*t30900;
  t44572 = t44569 + t44385 + t44194;
  t44589 = 3.e-6*t31602*t4332*t30854;
  t44590 = -1.*t31602*t31560*t31563;
  t44592 = -3.e-6*t30900*t31609;
  t44593 = t44589 + t44590 + t44592;
  t44603 = t31602*t4332*t4729;
  t44604 = t30900*t31609;
  t44605 = t44603 + t43984 + t44604;
  t44575 = -9.e-12*t31632;
  t44607 = 9.e-12*t31632;
  t44616 = t44593*t36027;
  t44874 = Sin(var1[3]);
  t44872 = Cos(var1[3]);
  t44873 = t44872*t4332*t30900;
  t44875 = -1.*t44874*t31563;
  t44876 = t44873 + t44875;
  t44879 = -1.*t4332*t44874;
  t44880 = -1.*t44872*t30900*t31563;
  t44881 = t44879 + t44880;
  t44897 = -1.*t44872*t31602*t32274;
  t44900 = -1.*t44876*t31609;
  t44901 = 3.e-6*t44881*t31609;
  t44902 = t44897 + t44900 + t44901;
  t44878 = 3.e-6*t30854*t44876;
  t44888 = t31560*t44881;
  t44890 = 3.e-6*t44872*t31602*t31609;
  t44892 = t44878 + t44888 + t44890;
  t44906 = t4729*t44876;
  t44907 = 3.e-6*t30854*t44881;
  t44911 = -1.*t44872*t31602*t31609;
  t44912 = t44906 + t44907 + t44911;
  t44983 = -1.*t44872*t4332*t30900;
  t44984 = t44874*t31563;
  t44985 = t44983 + t44984;
  t44988 = 3.e-6*t30854*t44985;
  t44989 = t4729*t44881;
  t44990 = t44988 + t44989;
  t44993 = t31560*t44985;
  t44994 = t44993 + t44907;
  t45004 = 3.e-6*t44985*t31609;
  t45005 = -1.*t44881*t31609;
  t45011 = t45004 + t45005;
  t45046 = -1.*t4332*t44874*t30900;
  t45047 = -1.*t44872*t31563;
  t45049 = t45046 + t45047;
  t45051 = -1.*t44872*t4332;
  t45052 = t44874*t30900*t31563;
  t45053 = t45051 + t45052;
  t45059 = t4729*t45049;
  t45061 = 3.e-6*t30854*t45053;
  t45063 = t31602*t44874*t31609;
  t45065 = t45059 + t45061 + t45063;
  t45067 = 3.e-6*t30854*t45049;
  t45072 = t31560*t45053;
  t45089 = -3.e-6*t31602*t44874*t31609;
  t45090 = t45067 + t45072 + t45089;
  t45100 = t31602*t32274*t44874;
  t45103 = -1.*t45049*t31609;
  t45104 = 3.e-6*t45053*t31609;
  t45106 = t45100 + t45103 + t45104;
  t45137 = t44872*t31602*t4332*t4729;
  t45138 = -3.e-6*t44872*t31602*t30854*t31563;
  t45139 = t44872*t30900*t31609;
  t45141 = t45137 + t45138 + t45139;
  t45146 = 3.e-6*t44872*t31602*t4332*t30854;
  t45148 = -1.*t44872*t31602*t31560*t31563;
  t45174 = -3.e-6*t44872*t30900*t31609;
  t45175 = t45146 + t45148 + t45174;
  t45180 = t44872*t32274*t30900;
  t45181 = -1.*t44872*t31602*t4332*t31609;
  t45182 = -3.e-6*t44872*t31602*t31563*t31609;
  t45187 = t45180 + t45181 + t45182;
  t45250 = 3.e-6*t44872*t31602*t4729;
  t45252 = 3.e-6*t44876*t31609;
  t45253 = -9.e-12*t44881*t31609;
  t45270 = t45250 + t45252 + t45253;
  t45243 = -1.*t44872*t31602*t4729;
  t45244 = t45243 + t44900 + t44901;
  t45291 = -1.*t4729*t44876;
  t45298 = 3.e-6*t4729*t44881;
  t45300 = 1.000000000009*t44872*t31602*t31609;
  t45303 = t45291 + t45298 + t45300;
  t45374 = t31602*t4332*t4729*t44874;
  t45376 = -3.e-6*t31602*t30854*t44874*t31563;
  t45389 = t44874*t30900*t31609;
  t45390 = t45374 + t45376 + t45389;
  t45357 = t32274*t44874*t30900;
  t45358 = -1.*t31602*t4332*t44874*t31609;
  t45360 = -3.e-6*t31602*t44874*t31563*t31609;
  t45362 = t45357 + t45358 + t45360;
  t45346 = 3.e-6*t31602*t4332*t30854*t44874;
  t45349 = -1.*t31602*t31560*t44874*t31563;
  t45351 = -3.e-6*t44874*t30900*t31609;
  t45352 = t45346 + t45349 + t45351;
  t45434 = -3.e-6*t31602*t4332*t30854*t44874;
  t45438 = -1.*t31602*t4729*t44874*t31563;
  t45439 = t45434 + t45438;
  t45443 = -1.*t31602*t4332*t31560*t44874;
  t45449 = t45443 + t45376;
  t45454 = -3.e-6*t31602*t4332*t44874*t31609;
  t45459 = t31602*t44874*t31563*t31609;
  t45460 = t45454 + t45459;
  t45058 = -0.2000000000018*t31602*t44874*t31609;
  t45537 = -1.*t4332*t4729*t44874*t30900;
  t45538 = 3.e-6*t30854*t44874*t30900*t31563;
  t45539 = t45537 + t45538 + t45063;
  t45541 = -3.e-6*t4332*t30854*t44874*t30900;
  t45542 = t31560*t44874*t30900*t31563;
  t45543 = t45541 + t45542 + t45089;
  t45552 = t4332*t44874*t30900*t31609;
  t45554 = 3.e-6*t44874*t30900*t31563*t31609;
  t45559 = t45100 + t45552 + t45554;
  t45133 = 0.2000000000018*t44872*t31602*t4332*t30854;
  t45134 = 6.000000000054e-7*t44872*t31602*t30854*t31563;
  t45136 = -0.2000000000018*t44872*t30900*t31609;
  t45142 = t45141*t42986;
  t45176 = t45175*t43248;
  t45179 = t43255*t45141;
  t45188 = t45187*t43363;
  t45189 = t45175*t43367;
  t45192 = t45179 + t45188 + t45189;
  t45195 = 0.2*t45192;
  t45198 = t43424*t45175;
  t45210 = t45141*t43445;
  t45211 = t45187*t43367;
  t45215 = t45198 + t45210 + t45211;
  t45216 = 0.100001*t45215;
  t45218 = t45187*t43546;
  t45220 = t43255*t45187;
  t45221 = t45175*t43445;
  t45223 = t45141*t43695;
  t45224 = t45220 + t45221 + t45223;
  t45225 = -0.3*t45224;
  t45229 = t45133 + t45134 + t45136 + t45142 + t45176 + t45195 + t45216 + t45218 + t45225;
  t45648 = -3.e-6*t4729*t44874*t30900;
  t45649 = 3.e-6*t31602*t4332*t44874*t31609;
  t45650 = 9.e-12*t31602*t44874*t31563*t31609;
  t45651 = t45648 + t45649 + t45650;
  t45645 = t4729*t44874*t30900;
  t45646 = t45645 + t45358 + t45360;
  t45666 = -1.*t31602*t4332*t4729*t44874;
  t45668 = -3.e-6*t31602*t4729*t44874*t31563;
  t45671 = -1.000000000009*t44874*t30900*t31609;
  t45715 = t45666 + t45668 + t45671;
  t45809 = t44872*t4332;
  t45810 = -1.*t44874*t30900*t31563;
  t45814 = t45809 + t45810;
  t45851 = t4729*t45814;
  t45853 = t45067 + t45851;
  t45834 = 3.e-6*t45049*t31609;
  t45836 = -1.*t45814*t31609;
  t45843 = t45834 + t45836;
  t45807 = t31560*t45049;
  t45816 = 3.e-6*t30854*t45814;
  t45826 = t45807 + t45816;
  t45432 = 6.000000000054e-7*t31602*t4332*t30854*t44874;
  t45433 = -0.2000000000018*t31602*t30854*t44874*t31563;
  t45441 = t45439*t42986;
  t45451 = t45449*t43248;
  t45453 = t43255*t45439;
  t45462 = t45460*t43363;
  t45463 = t45449*t43367;
  t45464 = t45453 + t45462 + t45463;
  t45465 = 0.2*t45464;
  t45467 = t43424*t45449;
  t45469 = t45439*t43445;
  t45470 = t45460*t43367;
  t45471 = t45467 + t45469 + t45470;
  t45473 = 0.100001*t45471;
  t45476 = t45460*t43546;
  t45477 = t43255*t45460;
  t45482 = t45449*t43445;
  t45483 = t45439*t43695;
  t45487 = t45477 + t45482 + t45483;
  t45488 = -0.3*t45487;
  t45509 = t45432 + t45433 + t45441 + t45451 + t45465 + t45473 + t45476 + t45488;
  t44986 = -6.000000000054e-7*t30854*t44985;
  t44987 = 0.2000000000018*t30854*t44881;
  t44992 = t44990*t42986;
  t44995 = t44994*t43248;
  t44996 = t43255*t44990;
  t45016 = t45011*t43363;
  t45018 = t44994*t43367;
  t45019 = t44996 + t45016 + t45018;
  t45020 = 0.2*t45019;
  t45023 = t43424*t44994;
  t45025 = t44990*t43445;
  t45026 = t45011*t43367;
  t45027 = t45023 + t45025 + t45026;
  t45028 = 0.100001*t45027;
  t45029 = t45011*t43546;
  t45030 = t43255*t45011;
  t45031 = t44994*t43445;
  t45041 = t44990*t43695;
  t45042 = t45030 + t45031 + t45041;
  t45043 = -0.3*t45042;
  t45044 = t44986 + t44987 + t44992 + t44995 + t45020 + t45028 + t45029 + t45043;
  t45050 = 0.2000000000018*t30854*t45049;
  t45057 = -6.000000000054e-7*t30854*t45053;
  t45931 = t45059 + t45061;
  t45937 = t45067 + t45072;
  t45950 = t45103 + t45104;
  t46315 = -9.e-12*t45049*t31609;
  t46329 = 3.e-6*t45814*t31609;
  t46330 = t46315 + t46329;
  t46338 = 3.e-6*t4729*t45049;
  t46340 = -1.*t4729*t45814;
  t46348 = t46338 + t46340;
  t46516 = t4332*t44874*t30900;
  t46517 = t44872*t31563;
  t46524 = t46516 + t46517;
  t46559 = -1.*t31602*t4729*t44874;
  t46561 = -1.*t46524*t31609;
  t46576 = t46559 + t46561 + t46329;
  t46512 = 3.e-6*t31602*t4729*t44874;
  t46525 = 3.e-6*t46524*t31609;
  t46531 = -9.e-12*t45814*t31609;
  t46540 = t46512 + t46525 + t46531;
  t46546 = -1.*t4729*t46524;
  t46547 = 3.e-6*t4729*t45814;
  t46551 = 1.000000000009*t31602*t44874*t31609;
  t46555 = t46546 + t46547 + t46551;
  t46755 = t46546 + t46547 + t45063;
  t46767 = 3.e-6*t4729*t46524;
  t46768 = -9.e-12*t4729*t45814;
  t46769 = t46767 + t46768 + t45089;
  t46790 = 1.000000000009*t31602*t4729*t44874;
  t46798 = t46524*t31609;
  t46808 = -3.e-6*t45814*t31609;
  t46809 = t46790 + t46798 + t46808;
  t45640 = -0.2000000000018*t4729*t44874*t30900;
  t45641 = 0.2000000000018*t31602*t4332*t44874*t31609;
  t45644 = 6.000000000054e-7*t31602*t44874*t31563*t31609;
  t45647 = t45646*t42986;
  t45653 = t45651*t43248;
  t45659 = t43424*t45651;
  t45662 = t45646*t43445;
  t45719 = t45715*t43367;
  t45720 = t45659 + t45662 + t45719;
  t45723 = 0.100001*t45720;
  t45726 = t43255*t45646;
  t45727 = t45715*t43363;
  t45754 = t45651*t43367;
  t45766 = t45726 + t45727 + t45754;
  t45786 = 0.2*t45766;
  t45787 = t45715*t43546;
  t45793 = t43255*t45715;
  t45796 = t45651*t43445;
  t45798 = t45646*t43695;
  t45799 = t45793 + t45796 + t45798;
  t45801 = -0.3*t45799;
  t45802 = t45640 + t45641 + t45644 + t45647 + t45653 + t45723 + t45786 + t45787 + t45801;
  t45231 = 0.2000000000018*t44872*t31602*t4729;
  t45234 = 0.2000000000018*t44876*t31609;
  t45235 = -6.000000000054e-7*t44881*t31609;
  t45248 = t45244*t42986;
  t45274 = t45270*t43248;
  t45275 = t43424*t45270;
  t45279 = t45244*t43445;
  t45305 = t45303*t43367;
  t45315 = t45275 + t45279 + t45305;
  t45316 = 0.100001*t45315;
  t45319 = t43255*t45244;
  t45320 = t45303*t43363;
  t45325 = t45270*t43367;
  t45329 = t45319 + t45320 + t45325;
  t45331 = 0.2*t45329;
  t45332 = t45303*t43546;
  t45333 = t43255*t45303;
  t45336 = t45270*t43445;
  t45338 = t45244*t43695;
  t45340 = t45333 + t45336 + t45338;
  t45341 = -0.3*t45340;
  t45342 = t45231 + t45234 + t45235 + t45248 + t45274 + t45316 + t45331 + t45332 + t45341;
  t46283 = -6.000000000054e-7*t45049*t31609;
  t46284 = 0.2000000000018*t45814*t31609;
  t46299 = t45843*t42986;
  t46332 = t46330*t43248;
  t46333 = t43424*t46330;
  t46337 = t45843*t43445;
  t46352 = t46348*t43367;
  t46370 = t46333 + t46337 + t46352;
  t46371 = 0.100001*t46370;
  t46376 = t43255*t45843;
  t46400 = t46348*t43363;
  t46403 = t46330*t43367;
  t46405 = t46376 + t46400 + t46403;
  t46407 = 0.2*t46405;
  t46408 = t46348*t43546;
  t46440 = t43255*t46348;
  t46442 = t46330*t43445;
  t46492 = t45843*t43695;
  t46498 = t46440 + t46442 + t46492;
  t46504 = -0.3*t46498;
  t46505 = t46283 + t46284 + t46299 + t46332 + t46371 + t46407 + t46408 + t46504;
  t45356 = t45352*t31894;
  t45370 = t45362*t33158;
  t45392 = t45390*t35363;
  t45394 = t45390*t36001;
  t45399 = t45362*t36027;
  t45400 = -1.8e-11*t45352*t31663;
  t45402 = t45394 + t45399 + t45400;
  t45403 = 0.100001*t45402;
  t45405 = t45362*t36867;
  t45406 = t45352*t36027;
  t45407 = -1.000000000009*t45390*t31663;
  t45409 = t45405 + t45406 + t45407;
  t45411 = 0.2*t45409;
  t45414 = t45390*t37015;
  t45417 = t45352*t36001;
  t45419 = -1.000000000009*t45362*t31663;
  t45422 = t45414 + t45417 + t45419;
  t45423 = -0.3*t45422;
  t45426 = t45356 + t45370 + t45392 + t45403 + t45411 + t45423;
  t44893 = t44892*t31894;
  t44904 = t44902*t33158;
  t44913 = t44912*t35363;
  t44914 = t44902*t36867;
  t44919 = t44892*t36027;
  t44922 = -1.000000000009*t44912*t31663;
  t44927 = t44914 + t44919 + t44922;
  t44933 = 0.2*t44927;
  t44967 = t44912*t36001;
  t44969 = t44902*t36027;
  t44970 = -1.8e-11*t44892*t31663;
  t44971 = t44967 + t44969 + t44970;
  t44972 = 0.100001*t44971;
  t44974 = t44912*t37015;
  t44975 = t44892*t36001;
  t44976 = -1.000000000009*t44902*t31663;
  t44977 = t44974 + t44975 + t44976;
  t44978 = -0.3*t44977;
  t44979 = t44893 + t44904 + t44913 + t44933 + t44972 + t44978;
  t45832 = t45826*t31894;
  t45849 = t45843*t33158;
  t45864 = t45853*t35363;
  t45866 = t45853*t36001;
  t45867 = t45843*t36027;
  t45871 = -1.8e-11*t45826*t31663;
  t45872 = t45866 + t45867 + t45871;
  t45875 = 0.100001*t45872;
  t45878 = t45843*t36867;
  t45881 = t45826*t36027;
  t45884 = -1.000000000009*t45853*t31663;
  t45894 = t45878 + t45881 + t45884;
  t45896 = 0.2*t45894;
  t45900 = t45853*t37015;
  t45911 = t45826*t36001;
  t45914 = -1.000000000009*t45843*t31663;
  t45915 = t45900 + t45911 + t45914;
  t45920 = -0.3*t45915;
  t45922 = t45832 + t45849 + t45864 + t45875 + t45896 + t45920;
  t46542 = t46540*t31894;
  t46556 = t46555*t33158;
  t46581 = t46576*t35363;
  t46582 = t46576*t37015;
  t46583 = t46540*t36001;
  t46584 = -1.000000000009*t46555*t31663;
  t46586 = t46582 + t46583 + t46584;
  t46588 = -0.3*t46586;
  t46589 = t46576*t36001;
  t46590 = t46555*t36027;
  t46592 = -1.8e-11*t46540*t31663;
  t46594 = t46589 + t46590 + t46592;
  t46595 = 0.100001*t46594;
  t46617 = t46555*t36867;
  t46622 = t46540*t36027;
  t46624 = -1.000000000009*t46576*t31663;
  t46627 = t46617 + t46622 + t46624;
  t46685 = 0.2*t46627;
  t46688 = t46542 + t46556 + t46581 + t46588 + t46595 + t46685;
  t44574 = 0.1000000000009*t31632;
  t44576 = t44575 + t42924;
  t44579 = 0.2*t44576;
  t44582 = -9.e-7*t36001;
  t44587 = t44574 + t44579 + t44582;
  t44594 = -1.62e-17*t31632;
  t44595 = 0.1*t31794;
  t44596 = 0.2*t36001;
  t44599 = t44594 + t44595 + t44596;
  t47221 = 3.e-6*t30854*t46524;
  t47225 = t31560*t45814;
  t47272 = 3.e-6*t31602*t44874*t31609;
  t47283 = t47221 + t47225 + t47272;
  t47165 = -1.*t31602*t32274*t44874;
  t47198 = t47165 + t46561 + t46329;
  t47339 = t4729*t46524;
  t47342 = -1.*t31602*t44874*t31609;
  t47347 = t47339 + t45816 + t47342;
  t44614 = t44607 + t42924;
  t44638 = 0.2000000000018*t31632;
  t44640 = t44575 + t31663;
  t44642 = 0.1*t44640;
  t44643 = t44638 + t32393 + t44642;
  t44654 = t44607 + t31663;
  t47363 = t47283*t36027;
  t48009 = t47283*t31894;
  t48013 = t47198*t33158;
  t48015 = t47347*t35363;
  t48020 = t47198*t36867;
  t48021 = -1.000000000009*t47347*t31663;
  t48022 = t48020 + t47363 + t48021;
  t48025 = 0.2*t48022;
  t48027 = t47347*t36001;
  t48028 = t47198*t36027;
  t48029 = -1.8e-11*t47283*t31663;
  t48030 = t48027 + t48028 + t48029;
  t48033 = 0.100001*t48030;
  t48037 = t47347*t37015;
  t48039 = t47283*t36001;
  t48041 = -1.000000000009*t47198*t31663;
  t48043 = t48037 + t48039 + t48041;
  t48055 = -0.3*t48043;
  t48068 = t48009 + t48013 + t48015 + t48025 + t48033 + t48055;
  t47756 = -6.000000000054e-7*t30854*t45049;
  t47760 = 0.2000000000018*t30854*t45814;
  t47781 = t45853*t42986;
  t47791 = t45826*t43248;
  t47792 = t43255*t45853;
  t47794 = t45843*t43363;
  t47799 = t45826*t43367;
  t47800 = t47792 + t47794 + t47799;
  t47805 = 0.2*t47800;
  t47808 = t43424*t45826;
  t47809 = t45853*t43445;
  t47815 = t45843*t43367;
  t47822 = t47808 + t47809 + t47815;
  t47827 = 0.100001*t47822;
  t47836 = t45843*t43546;
  t47854 = t45826*t43445;
  t47856 = t45853*t43695;
  t47862 = t46376 + t47854 + t47856;
  t47869 = -0.3*t47862;
  t47875 = t47756 + t47760 + t47781 + t47791 + t47805 + t47827 + t47836 + t47869;
  t47472 = 0.2000000000018*t30854*t44876;
  t47481 = -6.000000000054e-7*t30854*t44881;
  t47490 = 0.2000000000018*t44872*t31602*t31609;
  t47510 = t44912*t42986;
  t47525 = t44892*t43248;
  t47535 = t43255*t44912;
  t47555 = t44902*t43363;
  t47564 = t44892*t43367;
  t47574 = t47535 + t47555 + t47564;
  t47599 = 0.2*t47574;
  t47600 = t43424*t44892;
  t47604 = t44912*t43445;
  t47607 = t44902*t43367;
  t47609 = t47600 + t47604 + t47607;
  t47616 = 0.100001*t47609;
  t47617 = t44902*t43546;
  t47618 = t43255*t44902;
  t47619 = t44892*t43445;
  t47631 = t44912*t43695;
  t47632 = t47618 + t47619 + t47631;
  t47633 = -0.3*t47632;
  t47640 = t47472 + t47481 + t47490 + t47510 + t47525 + t47599 + t47616 + t47617 + t47633;
  t47652 = 0.2000000000018*t31602*t4332*t30854*t44874;
  t47653 = 6.000000000054e-7*t31602*t30854*t44874*t31563;
  t47657 = -0.2000000000018*t44874*t30900*t31609;
  t47658 = t45390*t42986;
  t47677 = t45352*t43248;
  t47680 = t43255*t45390;
  t47681 = t45362*t43363;
  t47684 = t45352*t43367;
  t47686 = t47680 + t47681 + t47684;
  t47687 = 0.2*t47686;
  t47692 = t43424*t45352;
  t47694 = t45390*t43445;
  t47707 = t45362*t43367;
  t47708 = t47692 + t47694 + t47707;
  t47720 = 0.100001*t47708;
  t47721 = t45362*t43546;
  t47731 = t43255*t45362;
  t47735 = t45352*t43445;
  t47738 = t45390*t43695;
  t47740 = t47731 + t47735 + t47738;
  t47742 = -0.3*t47740;
  t47752 = t47652 + t47653 + t47657 + t47658 + t47677 + t47687 + t47720 + t47721 + t47742;
  t47894 = 0.2000000000018*t31602*t4729*t44874;
  t47945 = 0.2000000000018*t46524*t31609;
  t47951 = -6.000000000054e-7*t45814*t31609;
  t47957 = t46576*t42986;
  t47962 = t46540*t43248;
  t47963 = t43424*t46540;
  t47964 = t46576*t43445;
  t47965 = t46555*t43367;
  t47967 = t47963 + t47964 + t47965;
  t47969 = 0.100001*t47967;
  t47976 = t43255*t46576;
  t47978 = t46555*t43363;
  t47980 = t46540*t43367;
  t47988 = t47976 + t47978 + t47980;
  t47991 = 0.2*t47988;
  t47993 = t46555*t43546;
  t47996 = t43255*t46555;
  t47997 = t46540*t43445;
  t47999 = t46576*t43695;
  t48001 = t47996 + t47997 + t47999;
  t48003 = -0.3*t48001;
  t48005 = t47894 + t47945 + t47951 + t47957 + t47962 + t47969 + t47991 + t47993 + t48003;
  t48101 = -1.*t44872*t32274*t30900;
  t48102 = t44872*t31602*t4332*t31609;
  t48104 = 3.e-6*t44872*t31602*t31563*t31609;
  t48112 = t48101 + t48102 + t48104;
  t48082 = -3.e-6*t44872*t31602*t4332*t30854;
  t48088 = t44872*t31602*t31560*t31563;
  t48090 = 3.e-6*t44872*t30900*t31609;
  t48094 = t48082 + t48088 + t48090;
  t48114 = -1.*t44872*t31602*t4332*t4729;
  t48115 = 3.e-6*t44872*t31602*t30854*t31563;
  t48116 = -1.*t44872*t30900*t31609;
  t48119 = t48114 + t48115 + t48116;
  t48244 = t44872*t31602*t4729*t31563;
  t48247 = t45146 + t48244;
  t48256 = t44872*t31602*t4332*t31560;
  t48258 = t48256 + t48115;
  t48262 = 3.e-6*t44872*t31602*t4332*t31609;
  t48263 = -1.*t44872*t31602*t31563*t31609;
  t48265 = t48262 + t48263;
  t48306 = t44872*t4332*t4729*t30900;
  t48307 = -3.e-6*t44872*t30854*t30900*t31563;
  t48308 = t48306 + t48307 + t44911;
  t48313 = 3.e-6*t44872*t4332*t30854*t30900;
  t48315 = -1.*t44872*t31560*t30900*t31563;
  t48325 = t48313 + t48315 + t44890;
  t48331 = -1.*t44872*t4332*t30900*t31609;
  t48336 = -3.e-6*t44872*t30900*t31563*t31609;
  t48337 = t44897 + t48331 + t48336;
  t48485 = 3.e-6*t44872*t4729*t30900;
  t48487 = -3.e-6*t44872*t31602*t4332*t31609;
  t48498 = -9.e-12*t44872*t31602*t31563*t31609;
  t48499 = t48485 + t48487 + t48498;
  t48477 = -1.*t44872*t4729*t30900;
  t48479 = t48477 + t48102 + t48104;
  t48509 = 3.e-6*t44872*t31602*t4729*t31563;
  t48512 = 1.000000000009*t44872*t30900*t31609;
  t48515 = t45137 + t48509 + t48512;
  t48651 = t4332*t44874;
  t48654 = t44872*t30900*t31563;
  t48659 = t48651 + t48654;
  t48735 = t4729*t48659;
  t48747 = t44878 + t48735;
  t48676 = -1.*t48659*t31609;
  t48683 = t45252 + t48676;
  t48650 = t31560*t44876;
  t48661 = 3.e-6*t30854*t48659;
  t48665 = t48650 + t48661;
  t48218 = -6.000000000054e-7*t44872*t31602*t4332*t30854;
  t48232 = 0.2000000000018*t44872*t31602*t30854*t31563;
  t48251 = t48247*t42986;
  t48260 = t48258*t43248;
  t48261 = t43255*t48247;
  t48266 = t48265*t43363;
  t48268 = t48258*t43367;
  t48269 = t48261 + t48266 + t48268;
  t48271 = 0.2*t48269;
  t48272 = t43424*t48258;
  t48273 = t48247*t43445;
  t48274 = t48265*t43367;
  t48275 = t48272 + t48273 + t48274;
  t48277 = 0.100001*t48275;
  t48280 = t48265*t43546;
  t48282 = t43255*t48265;
  t48284 = t48258*t43445;
  t48285 = t48247*t43695;
  t48286 = t48282 + t48284 + t48285;
  t48288 = -0.3*t48286;
  t48290 = t48218 + t48232 + t48251 + t48260 + t48271 + t48277 + t48280 + t48288;
  t48882 = t44906 + t44907;
  t48899 = t44878 + t44888;
  t48950 = t44900 + t44901;
  t49198 = -9.e-12*t44876*t31609;
  t49201 = 3.e-6*t48659*t31609;
  t49202 = t49198 + t49201;
  t49229 = 3.e-6*t4729*t44876;
  t49231 = -1.*t4729*t48659;
  t49232 = t49229 + t49231;
  t49332 = t44872*t31602*t4729;
  t49338 = -1.*t44985*t31609;
  t49353 = t49332 + t49338 + t49201;
  t49290 = -3.e-6*t44872*t31602*t4729;
  t49292 = -9.e-12*t48659*t31609;
  t49297 = t49290 + t45004 + t49292;
  t49315 = -1.*t4729*t44985;
  t49316 = 3.e-6*t4729*t48659;
  t49317 = -1.000000000009*t44872*t31602*t31609;
  t49321 = t49315 + t49316 + t49317;
  t49825 = t49315 + t49316 + t44911;
  t49842 = 3.e-6*t4729*t44985;
  t49843 = -9.e-12*t4729*t48659;
  t49847 = t49842 + t49843 + t44890;
  t49866 = -1.000000000009*t44872*t31602*t4729;
  t49870 = t44985*t31609;
  t49886 = -3.e-6*t48659*t31609;
  t49893 = t49866 + t49870 + t49886;
  t48474 = 0.2000000000018*t44872*t4729*t30900;
  t48475 = -0.2000000000018*t44872*t31602*t4332*t31609;
  t48476 = -6.000000000054e-7*t44872*t31602*t31563*t31609;
  t48482 = t48479*t42986;
  t48503 = t48499*t43248;
  t48505 = t43424*t48499;
  t48506 = t48479*t43445;
  t48516 = t48515*t43367;
  t48550 = t48505 + t48506 + t48516;
  t48560 = 0.100001*t48550;
  t48563 = t43255*t48479;
  t48584 = t48515*t43363;
  t48589 = t48499*t43367;
  t48591 = t48563 + t48584 + t48589;
  t48597 = 0.2*t48591;
  t48598 = t48515*t43546;
  t48614 = t43255*t48515;
  t48616 = t48499*t43445;
  t48623 = t48479*t43695;
  t48639 = t48614 + t48616 + t48623;
  t48642 = -0.3*t48639;
  t48643 = t48474 + t48475 + t48476 + t48482 + t48503 + t48560 + t48597 + t48598 + t48642;
  t49105 = -6.000000000054e-7*t44876*t31609;
  t49122 = 0.2000000000018*t48659*t31609;
  t49173 = t48683*t42986;
  t49210 = t49202*t43248;
  t49216 = t43424*t49202;
  t49223 = t48683*t43445;
  t49233 = t49232*t43367;
  t49234 = t49216 + t49223 + t49233;
  t49235 = 0.100001*t49234;
  t49240 = t43255*t48683;
  t49242 = t49232*t43363;
  t49243 = t49202*t43367;
  t49246 = t49240 + t49242 + t49243;
  t49253 = 0.2*t49246;
  t49256 = t49232*t43546;
  t49263 = t43255*t49232;
  t49265 = t49202*t43445;
  t49266 = t48683*t43695;
  t49272 = t49263 + t49265 + t49266;
  t49274 = -0.3*t49272;
  t49277 = t49105 + t49122 + t49173 + t49210 + t49235 + t49253 + t49256 + t49274;
  t48097 = t48094*t31894;
  t48113 = t48112*t33158;
  t48120 = t48119*t35363;
  t48127 = t48112*t36867;
  t48128 = t48094*t36027;
  t48129 = -1.000000000009*t48119*t31663;
  t48131 = t48127 + t48128 + t48129;
  t48132 = 0.2*t48131;
  t48133 = t48119*t36001;
  t48138 = t48112*t36027;
  t48139 = -1.8e-11*t48094*t31663;
  t48149 = t48133 + t48138 + t48139;
  t48152 = 0.100001*t48149;
  t48155 = t48119*t37015;
  t48158 = t48094*t36001;
  t48161 = -1.000000000009*t48112*t31663;
  t48178 = t48155 + t48158 + t48161;
  t48181 = -0.3*t48178;
  t48212 = t48097 + t48113 + t48120 + t48132 + t48152 + t48181;
  t48671 = t48665*t31894;
  t48724 = t48683*t33158;
  t48755 = t48747*t35363;
  t48770 = t48747*t36001;
  t48771 = t48683*t36027;
  t48797 = -1.8e-11*t48665*t31663;
  t48798 = t48770 + t48771 + t48797;
  t48799 = 0.100001*t48798;
  t48807 = t48683*t36867;
  t48810 = t48665*t36027;
  t48812 = -1.000000000009*t48747*t31663;
  t48819 = t48807 + t48810 + t48812;
  t48823 = 0.2*t48819;
  t48831 = t48747*t37015;
  t48834 = t48665*t36001;
  t48839 = -1.000000000009*t48683*t31663;
  t48841 = t48831 + t48834 + t48839;
  t48842 = -0.3*t48841;
  t48849 = t48671 + t48724 + t48755 + t48799 + t48823 + t48842;
  t49311 = t49297*t31894;
  t49324 = t49321*t33158;
  t49356 = t49353*t35363;
  t49357 = t49353*t37015;
  t49362 = t49297*t36001;
  t49369 = -1.000000000009*t49321*t31663;
  t49385 = t49357 + t49362 + t49369;
  t49389 = -0.3*t49385;
  t49393 = t49353*t36001;
  t49394 = t49321*t36027;
  t49402 = -1.8e-11*t49297*t31663;
  t49468 = t49393 + t49394 + t49402;
  t49469 = 0.100001*t49468;
  t49482 = t49321*t36867;
  t49616 = t49297*t36027;
  t49760 = -1.000000000009*t49353*t31663;
  t49770 = t49482 + t49616 + t49760;
  t49795 = 0.2*t49770;
  t49810 = t49311 + t49324 + t49356 + t49389 + t49469 + t49795;
  t50021 = t44872*t31602*t32274;
  t50022 = t50021 + t49338 + t49201;
  t50031 = t31560*t48659;
  t50033 = -3.e-6*t44872*t31602*t31609;
  t50035 = t44988 + t50031 + t50033;
  t50039 = t4729*t44985;
  t50045 = t44872*t31602*t31609;
  t50047 = t50039 + t48661 + t50045;
  t50063 = t50035*t36027;
  p_output1[0]=(t43742 + t43757 + t43758 + t42986*t43785 + t43248*t43792 + t43546*t43801 - 0.3*(t43695*t43785 + t43445*t43792 + t43255*t43801) + 0.2*(t43255*t43785 + t43367*t43792 + t43363*t43801) + 0.100001*(t43445*t43785 + t43424*t43792 + t43367*t43801))*var2[4] + t43714*var2[5] + t43946*var2[6] + t37337*var2[8];
  p_output1[1]=t43714*var2[4] + (t43742 + t43757 + t42986*t44130 + t43248*t44135 + t43546*t44142 - 0.3*(t43695*t44130 + t43445*t44135 + t43255*t44142) + 0.2*(t43255*t44130 + t43367*t44135 + t43363*t44142) + 0.100001*(t43445*t44130 + t43424*t44135 + t43367*t44142))*var2[5] + t44326*var2[6] + t44112*var2[8];
  p_output1[2]=t43946*var2[4] + t44326*var2[5] + (t43758 + t42986*t44499 + t43248*t44504 + t43546*t44510 - 0.3*(t43695*t44499 + t43445*t44504 + t43255*t44510) + 0.2*(t43255*t44499 + t43367*t44504 + t43363*t44510) + 0.100001*(t43445*t44499 + t43424*t44504 + t43367*t44510) + 6.000000000054e-7*t31563*t31602*t4729 + 0.2000000000018*t31602*t4332*t4729)*var2[6] + t44483*var2[8];
  p_output1[3]=t37337*var2[4] + t44112*var2[5] + t44483*var2[6] + (t44572*t44587 + t44593*t44599 + 0.100001*(t31884*t44572 - 1.8e-11*t31632*t44593 + t36027*t44605) - 0.3*(-1.000000000009*t31632*t44572 + t44605*t44614 + t44616) + t44605*t44643 + 0.2*(t31884*t44593 - 1.000000000009*t31632*t44605 + t44572*t44654))*var2[8];
  p_output1[4]=1.;
  p_output1[5]=-6.000000000054e-7*t30854*t30900*t31563 - 0.2000000000018*t31602*t31609 + t34656*t42986 + t31631*t43248 - 0.2000000000018*t30854*t30900*t4332 + 0.2*(t34656*t43255 + t32380*t43363 + t31631*t43367) + 0.100001*(t32380*t43367 + t31631*t43424 + t34656*t43445) + t32380*t43546 - 0.3*(t32380*t43255 + t31631*t43445 + t34656*t43695);
  p_output1[6]=-0.2000000000018*t30854*t31563*t31602 + 6.000000000054e-7*t30854*t31602*t4332 + t43248*t43989 + t43546*t44019 + t42986*t44026 + 0.2*(t43367*t43989 + t43363*t44019 + t43255*t44026) + 0.100001*(t43424*t43989 + t43367*t44019 + t43445*t44026) - 0.3*(t43445*t43989 + t43695*t44026 + t44260);
  p_output1[7]=6.000000000054e-7*t31563*t31602*t31609 + 0.2000000000018*t31602*t31609*t4332 + t43248*t44370 + t43546*t44381 + t42986*t44402 + 0.2*(t43367*t44370 + t43363*t44381 + t43255*t44402) + 0.100001*(t43424*t44370 + t43367*t44381 + t43445*t44402) - 0.3*(t43445*t44370 + t43255*t44381 + t43695*t44402) - 0.2000000000018*t30900*t4729;
  p_output1[8]=t33158*t44572 + t31894*t44593 + t35363*t44605 + 0.100001*(t36027*t44572 - 1.8e-11*t31663*t44593 + t36001*t44605) - 0.3*(-1.000000000009*t31663*t44572 + t36001*t44593 + t37015*t44605) + 0.2*(t36867*t44572 - 1.000000000009*t31663*t44605 + t44616);
  p_output1[9]=(t45050 + t45057 + t45058 + t42986*t45065 + t43248*t45090 + t43546*t45106 - 0.3*(t43695*t45065 + t43445*t45090 + t43255*t45106) + 0.2*(t43255*t45065 + t43367*t45090 + t43363*t45106) + 0.100001*(t43445*t45065 + t43424*t45090 + t43367*t45106))*var2[3] + t45229*var2[4] + t45044*var2[5] + t45342*var2[6] + t44979*var2[8];
  p_output1[10]=t45229*var2[3] + (-6.000000000054e-7*t30854*t30900*t31563*t44874 - 0.2000000000018*t30854*t30900*t4332*t44874 + t45058 + t42986*t45539 + t43248*t45543 + t43546*t45559 - 0.3*(t43695*t45539 + t43445*t45543 + t43255*t45559) + 0.2*(t43255*t45539 + t43367*t45543 + t43363*t45559) + 0.100001*(t43445*t45539 + t43424*t45543 + t43367*t45559))*var2[4] + t45509*var2[5] + t45802*var2[6] + t45426*var2[8];
  p_output1[11]=t45044*var2[3] + t45509*var2[4] + (t45050 + t45057 + t42986*t45931 + t43248*t45937 + t43546*t45950 - 0.3*(t43695*t45931 + t43445*t45937 + t43255*t45950) + 0.2*(t43255*t45931 + t43367*t45937 + t43363*t45950) + 0.100001*(t43445*t45931 + t43424*t45937 + t43367*t45950))*var2[5] + t46505*var2[6] + t45922*var2[8];
  p_output1[12]=t45342*var2[3] + t45802*var2[4] + t46505*var2[5] + (t45058 + t42986*t46755 + t43248*t46769 + t43546*t46809 - 0.3*(t43695*t46755 + t43445*t46769 + t43255*t46809) + 0.2*(t43255*t46755 + t43367*t46769 + t43363*t46809) + 0.100001*(t43445*t46755 + t43424*t46769 + t43367*t46809) - 6.000000000054e-7*t45814*t4729 + 0.2000000000018*t46524*t4729)*var2[6] + t46688*var2[8];
  p_output1[13]=t44979*var2[3] + t45426*var2[4] + t45922*var2[5] + t46688*var2[6] + (t44587*t47198 + t44599*t47283 + t44643*t47347 + 0.2*(t44654*t47198 + t31884*t47283 - 1.000000000009*t31632*t47347) + 0.100001*(t31884*t47198 - 1.8e-11*t31632*t47283 + t36027*t47347) - 0.3*(-1.000000000009*t31632*t47198 + t44614*t47347 + t47363))*var2[8];
  p_output1[14]=1.;
  p_output1[15]=t47640;
  p_output1[16]=t47752;
  p_output1[17]=t47875;
  p_output1[18]=t48005;
  p_output1[19]=t48068;
  p_output1[20]=t47640*var2[3] + t47752*var2[4] + t47875*var2[5] + t48005*var2[6] + t48068*var2[8];
  p_output1[21]=t47752*var2[3] + (6.000000000054e-7*t30854*t30900*t31563*t44872 + 0.2000000000018*t30854*t30900*t4332*t44872 + t47490 + t42986*t48308 + t43248*t48325 + t43546*t48337 - 0.3*(t43695*t48308 + t43445*t48325 + t43255*t48337) + 0.2*(t43255*t48308 + t43367*t48325 + t43363*t48337) + 0.100001*(t43445*t48308 + t43424*t48325 + t43367*t48337))*var2[4] + t48290*var2[5] + t48643*var2[6] + t48212*var2[8];
  p_output1[22]=t47875*var2[3] + t48290*var2[4] + (t47472 + t47481 + t42986*t48882 + t43248*t48899 + t43546*t48950 - 0.3*(t43695*t48882 + t43445*t48899 + t43255*t48950) + 0.2*(t43255*t48882 + t43367*t48899 + t43363*t48950) + 0.100001*(t43445*t48882 + t43424*t48899 + t43367*t48950))*var2[5] + t49277*var2[6] + t48849*var2[8];
  p_output1[23]=t48005*var2[3] + t48643*var2[4] + t49277*var2[5] + (0.2000000000018*t44985*t4729 + t47490 - 6.000000000054e-7*t4729*t48659 + t42986*t49825 + t43248*t49847 + t43546*t49893 - 0.3*(t43695*t49825 + t43445*t49847 + t43255*t49893) + 0.2*(t43255*t49825 + t43367*t49847 + t43363*t49893) + 0.100001*(t43445*t49825 + t43424*t49847 + t43367*t49893))*var2[6] + t49810*var2[8];
  p_output1[24]=t48068*var2[3] + t48212*var2[4] + t48849*var2[5] + t49810*var2[6] + (t44587*t50022 + t44599*t50035 + t44643*t50047 + 0.2*(t44654*t50022 + t31884*t50035 - 1.000000000009*t31632*t50047) + 0.100001*(t31884*t50022 - 1.8e-11*t31632*t50035 + t36027*t50047) - 0.3*(-1.000000000009*t31632*t50022 + t44614*t50047 + t50063))*var2[8];
  p_output1[25]=1.;
  p_output1[26]=0.2000000000018*t31602*t31609*t44874 - 6.000000000054e-7*t30854*t45814 + 0.2000000000018*t30854*t46524 + t43546*t47198 + t43248*t47283 + t42986*t47347 + 0.2*(t43363*t47198 + t43367*t47283 + t43255*t47347) + 0.100001*(t43367*t47198 + t43424*t47283 + t43445*t47347) - 0.3*(t43255*t47198 + t43445*t47283 + t43695*t47347);
  p_output1[27]=-6.000000000054e-7*t30854*t31563*t31602*t44872 + 0.2000000000018*t30900*t31609*t44872 - 0.2000000000018*t30854*t31602*t4332*t44872 + t43248*t48094 + t43546*t48112 + t42986*t48119 + 0.2*(t43367*t48094 + t43363*t48112 + t43255*t48119) + 0.100001*(t43424*t48094 + t43367*t48112 + t43445*t48119) - 0.3*(t43445*t48094 + t43255*t48112 + t43695*t48119);
  p_output1[28]=-6.000000000054e-7*t30854*t44876 + 0.2000000000018*t30854*t48659 + t43248*t48665 + t43546*t48683 + t42986*t48747 + 0.2*(t43367*t48665 + t43363*t48683 + t43255*t48747) + 0.100001*(t43424*t48665 + t43367*t48683 + t43445*t48747) - 0.3*(t43445*t48665 + t43695*t48747 + t49240);
  p_output1[29]=0.2000000000018*t31609*t44985 - 0.2000000000018*t31602*t44872*t4729 - 6.000000000054e-7*t31609*t48659 + t43248*t49297 + t43546*t49321 + t42986*t49353 + 0.2*(t43367*t49297 + t43363*t49321 + t43255*t49353) + 0.100001*(t43424*t49297 + t43367*t49321 + t43445*t49353) - 0.3*(t43445*t49297 + t43255*t49321 + t43695*t49353);
  p_output1[30]=t33158*t50022 + t31894*t50035 + t35363*t50047 + 0.100001*(t36027*t50022 - 1.8e-11*t31663*t50035 + t36001*t50047) - 0.3*(-1.000000000009*t31663*t50022 + t36001*t50035 + t37015*t50047) + 0.2*(t36867*t50022 - 1.000000000009*t31663*t50047 + t50063);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 31, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_LeftFrontFoot.hh"

namespace Flight2
{

void J_impact_velocity_LeftFrontFoot_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
