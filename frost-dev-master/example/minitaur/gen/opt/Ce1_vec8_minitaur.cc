/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:08:19 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4546;
  double t4588;
  double t4675;
  double t4716;
  double t5137;
  double t5176;
  double t5289;
  double t4916;
  double t5097;
  double t6378;
  double t6967;
  double t7157;
  double t7170;
  double t5103;
  double t5106;
  double t8292;
  double t11074;
  double t12225;
  double t12226;
  double t12227;
  double t5177;
  double t5235;
  double t5340;
  double t5362;
  double t4800;
  double t4862;
  double t3105;
  double t3569;
  double t344;
  double t558;
  double t3901;
  double t12234;
  double t12236;
  double t5391;
  double t7306;
  double t12228;
  double t12237;
  double t12239;
  double t12241;
  double t4910;
  double t12229;
  double t12231;
  double t12242;
  double t12243;
  double t12248;
  double t12554;
  double t12269;
  double t12270;
  double t12271;
  double t12292;
  double t12294;
  double t12296;
  double t12298;
  double t12299;
  double t12300;
  double t12305;
  double t12418;
  double t12438;
  double t12442;
  double t12444;
  double t12450;
  double t12364;
  double t12367;
  double t12376;
  double t12597;
  double t12604;
  double t12610;
  double t12480;
  double t12481;
  double t12482;
  double t12664;
  double t12665;
  double t12669;
  double t12917;
  double t12918;
  double t12919;
  double t12899;
  double t12900;
  double t12901;
  double t12908;
  double t12912;
  double t12801;
  double t12806;
  double t12932;
  double t12935;
  double t12936;
  double t12938;
  double t12942;
  double t12838;
  double t12839;
  double t12840;
  double t12323;
  double t12904;
  double t12907;
  double t12913;
  double t12914;
  double t12916;
  double t12922;
  double t12864;
  double t12867;
  double t12868;
  double t13000;
  double t13108;
  double t13114;
  double t12336;
  double t12343;
  double t12493;
  double t12494;
  double t12505;
  double t12568;
  double t12580;
  double t12587;
  double t12621;
  double t12622;
  double t12656;
  double t12673;
  double t12684;
  double t12785;
  double t12786;
  double t12794;
  double t12800;
  double t12816;
  double t12817;
  double t12826;
  double t12850;
  double t12858;
  double t12862;
  double t12869;
  double t12875;
  double t12898;
  double t12926;
  double t12929;
  double t12930;
  double t12943;
  double t12944;
  double t12948;
  double t17239;
  double t17273;
  double t17304;
  double t12959;
  double t12964;
  double t12967;
  double t12969;
  double t12976;
  double t12978;
  double t12984;
  double t12985;
  double t17643;
  double t17645;
  double t17936;
  double t13010;
  double t13011;
  double t12998;
  double t13003;
  double t13005;
  double t13012;
  double t13013;
  double t13028;
  double t13031;
  double t13037;
  double t13054;
  double t13056;
  double t13060;
  double t18102;
  double t18103;
  double t18156;
  double t13080;
  double t13084;
  double t13070;
  double t13071;
  double t13077;
  double t13085;
  double t13086;
  double t13127;
  double t13153;
  double t13159;
  double t13178;
  double t13180;
  double t13198;
  double t14218;
  double t14233;
  double t14235;
  double t14395;
  double t14399;
  double t14438;
  double t14509;
  double t14515;
  double t14523;
  double t14532;
  double t14537;
  double t14543;
  double t14555;
  double t14567;
  double t14569;
  double t14571;
  double t14575;
  double t14605;
  double t18197;
  double t18200;
  double t18201;
  double t18235;
  double t18418;
  double t18419;
  double t18617;
  double t18619;
  double t18621;
  double t18455;
  double t18518;
  double t18520;
  double t18536;
  double t18541;
  double t18542;
  double t18631;
  double t18633;
  double t18634;
  double t18668;
  double t18670;
  double t18672;
  double t19788;
  double t19789;
  double t19793;
  double t19795;
  double t19806;
  double t19989;
  double t20017;
  double t20018;
  double t20020;
  double t19787;
  double t20027;
  double t20031;
  double t20039;
  double t20071;
  double t20072;
  double t20457;
  double t20491;
  double t20618;
  double t20078;
  double t20152;
  double t20153;
  double t20845;
  double t20846;
  double t20867;
  double t20929;
  double t21153;
  double t21155;
  double t12987;
  double t12992;
  double t12994;
  double t12950;
  double t12954;
  double t12957;
  double t21807;
  double t21808;
  double t21811;
  double t22094;
  double t22242;
  double t22438;
  double t21798;
  double t21905;
  double t21925;
  double t22594;
  double t22597;
  double t22610;
  double t22614;
  double t22510;
  double t22525;
  double t22585;
  double t22615;
  double t22635;
  double t22641;
  double t22713;
  double t22739;
  double t22747;
  double t13061;
  double t13067;
  double t13068;
  double t12249;
  double t12256;
  double t12264;
  double t12363;
  double t12378;
  double t12404;
  double t12484;
  double t12506;
  double t12536;
  double t20034;
  double t20075;
  double t20159;
  double t20172;
  double t28838;
  double t28963;
  double t29025;
  double t29848;
  double t29882;
  double t29890;
  double t29654;
  double t29713;
  double t29720;
  double t30768;
  double t30804;
  double t31328;
  double t23479;
  double t23488;
  double t23489;
  double t23492;
  double t31332;
  double t31337;
  double t31359;
  double t31381;
  double t31383;
  double t31406;
  double t23507;
  double t23513;
  double t23562;
  double t23596;
  double t24209;
  double t24220;
  double t24252;
  double t24256;
  double t24568;
  double t24570;
  double t24678;
  double t24696;
  double t25081;
  double t25086;
  double t25257;
  double t25481;
  double t26762;
  double t26779;
  double t26930;
  double t27625;
  double t626;
  double t4088;
  double t4383;
  double t32408;
  double t32413;
  double t32421;
  double t20892;
  double t20895;
  double t21193;
  double t21287;
  double t32555;
  double t32562;
  double t32565;
  double t13004;
  double t13020;
  double t13022;
  double t13075;
  double t13087;
  double t13093;
  double t33269;
  double t33273;
  double t33274;
  double t33309;
  double t33322;
  double t33348;
  double t33359;
  double t33363;
  double t33365;
  double t33262;
  double t33283;
  double t33290;
  double t33353;
  double t33375;
  double t33453;
  double t33530;
  double t33532;
  double t33567;
  double t29922;
  double t29945;
  double t30050;
  double t30660;
  double t30661;
  double t31440;
  double t31444;
  double t31698;
  double t31727;
  double t31804;
  double t31813;
  double t32273;
  double t32275;
  double t32316;
  double t32318;
  double t35867;
  double t35872;
  double t20839;
  double t21416;
  double t22029;
  double t22591;
  double t36275;
  double t36278;
  double t36286;
  double t22766;
  double t22912;
  double t36310;
  double t36313;
  double t36314;
  double t23616;
  double t23633;
  double t36338;
  double t36344;
  double t36346;
  double t24263;
  double t24268;
  double t36396;
  double t36410;
  double t36411;
  double t24763;
  double t24798;
  double t36476;
  double t36482;
  double t36548;
  double t25843;
  double t25913;
  double t37244;
  double t37323;
  double t37445;
  double t33308;
  double t33603;
  double t33604;
  double t34100;
  double t34120;
  double t34171;
  double t34175;
  double t34438;
  double t34463;
  double t34546;
  double t36174;
  double t36227;
  double t36231;
  double t36324;
  double t36351;
  double t36353;
  double t36433;
  double t36434;
  double t36557;
  double t36595;
  double t43603;
  double t43689;
  double t43842;
  double t43844;
  double t43852;
  double t43935;
  double t43938;
  double t43943;
  double t43951;
  double t43961;
  double t44556;
  double t44582;
  double t44892;
  double t44894;
  double t40502;
  double t41468;
  double t41470;
  double t41994;
  double t41995;
  double t42458;
  double t42467;
  double t42540;
  double t42571;
  double t42576;
  t4546 = Cos(var1[9]);
  t4588 = -1.*t4546;
  t4675 = 1. + t4588;
  t4716 = 3.e-6*t4675;
  t5137 = -1.000000000009*t4675;
  t5176 = 1. + t5137;
  t5289 = Sin(var1[9]);
  t4916 = -9.e-12*t4675;
  t5097 = 1. + t4916;
  t6378 = 1.2e-12*var1[9];
  t6967 = 0.0999997000009*t4675;
  t7157 = -3.e-12*t5289;
  t7170 = t6378 + t6967 + t7157;
  t5103 = -3.e-6*t5097;
  t5106 = t5103 + t4716;
  t8292 = -4.e-7*var1[9];
  t11074 = 0.1*t5097;
  t12225 = 3.000000000027e-7*t4675;
  t12226 = -9.e-18*t5289;
  t12227 = t8292 + t11074 + t12225 + t12226;
  t5177 = 0.2*t5176;
  t5235 = 0.2000000000048*t4675;
  t5340 = 0.0999997000009*t5289;
  t5362 = t5177 + t5235 + t5340;
  t4800 = 3.e-6*t4546;
  t4862 = t4716 + t4800;
  t3105 = Cos(var1[4]);
  t3569 = Cos(var1[5]);
  t344 = Cos(var1[7]);
  t558 = Sin(var1[4]);
  t3901 = Sin(var1[7]);
  t12234 = 9.e-12*t4675;
  t12236 = t12234 + t4588;
  t5391 = t5176*t5362;
  t7306 = t7170*t5289;
  t12228 = 3.e-6*t12227*t5289;
  t12237 = -1.*t12236*t7170;
  t12239 = -1.*t5106*t12227;
  t12241 = -1.000000000009*t5362*t5289;
  t4910 = 0.2*t4862;
  t12229 = t5391 + t7306 + t12228;
  t12231 = t5106*t12229;
  t12242 = t12237 + t12239 + t12241;
  t12243 = 3.e-6*t5289*t12242;
  t12248 = t4910 + t12231 + t12243;
  t12554 = Sin(var1[5]);
  t12269 = 0.2*t12236;
  t12270 = 4.e-7*var1[9];
  t12271 = -1. + t12234;
  t12292 = 0.1*t12271;
  t12294 = -3.000000000027e-7*t4675;
  t12296 = t4862*t7170;
  t12298 = 9.e-18*t5289;
  t12299 = t12270 + t12292 + t12294 + t12296 + t12298;
  t12300 = 3.e-6*t12299*t5289;
  t12305 = t12269 + t5391 + t7306 + t12228 + t12300;
  t12418 = -1.*t4862*t7170;
  t12438 = t8292 + t11074 + t12225 + t12418 + t12226;
  t12442 = t5106*t12438;
  t12444 = 0.2*t5289;
  t12450 = t12237 + t12239 + t12442 + t12444 + t12241;
  t12364 = t12236*t344;
  t12367 = -1.000000000009*t5289*t3901;
  t12376 = t12364 + t12367;
  t12597 = 1.000000000009*t344*t5289;
  t12604 = t12236*t3901;
  t12610 = t12597 + t12604;
  t12480 = t344*t5289;
  t12481 = -1.*t5176*t3901;
  t12482 = t12480 + t12481;
  t12664 = t5176*t344;
  t12665 = t5289*t3901;
  t12669 = t12664 + t12665;
  t12917 = 0.0999997000009*t4546;
  t12918 = 3.000000000027e-12*t5289;
  t12919 = t12917 + t12918;
  t12899 = -9.e-18*t4546;
  t12900 = 2.999991000027e-7*t5289;
  t12901 = -4.e-7 + t12899 + t12900;
  t12908 = -3.e-12*t4546;
  t12912 = 1.2e-12 + t12908 + t5340;
  t12801 = t4862*t3569*t3901;
  t12806 = t12554 + t12801;
  t12932 = t4546*t7170;
  t12935 = 3.e-6*t4546*t12227;
  t12936 = t5176*t12919;
  t12938 = 3.e-6*t12901*t5289;
  t12942 = t12912*t5289;
  t12838 = -1.*t5106*t12554;
  t12839 = t3569*t12610;
  t12840 = t12838 + t12839;
  t12323 = -1.000000000009*t344*t5289;
  t12904 = -1.*t5106*t12901;
  t12907 = -1.000000000009*t4546*t5362;
  t12913 = -1.*t12236*t12912;
  t12914 = -1.000000000009*t7170*t5289;
  t12916 = -3.000000000027e-6*t12227*t5289;
  t12922 = -1.000000000009*t12919*t5289;
  t12864 = -3.e-6*t5289*t12554;
  t12867 = t3569*t12669;
  t12868 = t12864 + t12867;
  t13000 = 1.000000000009*t5289*t3901;
  t13108 = Cos(var1[3]);
  t13114 = Sin(var1[3]);
  t12336 = -1.*t12236*t3901;
  t12343 = t12323 + t12336;
  t12493 = -1.*t5176*t344;
  t12494 = -1.*t5289*t3901;
  t12505 = t12493 + t12494;
  t12568 = -1.*t4862*t12554*t3901;
  t12580 = t3569 + t12568;
  t12587 = -1.*t5106*t3569;
  t12621 = -1.*t12554*t12610;
  t12622 = t12587 + t12621;
  t12656 = -3.e-6*t3569*t5289;
  t12673 = -1.*t12554*t12669;
  t12684 = t12656 + t12673;
  t12785 = -1.*t3569*t344*t558;
  t12786 = -1.*t3105*t3901;
  t12794 = t12785 + t12786;
  t12800 = t4862*t3105*t344;
  t12816 = -1.*t558*t12806;
  t12817 = t12800 + t12816;
  t12826 = t3105*t12376;
  t12850 = -1.*t558*t12840;
  t12858 = t12826 + t12850;
  t12862 = t3105*t12482;
  t12869 = -1.*t558*t12868;
  t12875 = t12862 + t12869;
  t12898 = 3.000000000027e-6*t5289*t12229;
  t12926 = t12904 + t12907 + t12913 + t12914 + t12916 + t12922;
  t12929 = 3.e-6*t5289*t12926;
  t12930 = 3.e-6*t4546*t12242;
  t12943 = t12932 + t12935 + t12936 + t12938 + t12241 + t12942;
  t12944 = t5106*t12943;
  t12948 = t12898 + t12929 + t12930 + t12944;
  t17239 = -1.*t3569;
  t17273 = t4862*t12554*t3901;
  t17304 = t17239 + t17273;
  t12959 = 3.e-6*t4546*t12299;
  t12964 = 0.2000000000018*t5289;
  t12967 = 9.e-18*t4546;
  t12969 = t4862*t12912;
  t12976 = -2.999991000027e-7*t5289;
  t12978 = 4.e-7 + t12967 + t12969 + t12976;
  t12984 = 3.e-6*t12978*t5289;
  t12985 = t12932 + t12935 + t12959 + t12936 + t12964 + t12984 + t12938 + t12241 + t12942;
  t17643 = t5106*t3569;
  t17645 = t12554*t12610;
  t17936 = t17643 + t17645;
  t13010 = t4546*t3901;
  t13011 = t12323 + t13010;
  t12998 = t4546*t344;
  t13003 = t12998 + t13000;
  t13005 = -3.e-6*t4546*t12554;
  t13012 = t3569*t13011;
  t13013 = t13005 + t13012;
  t13028 = 0.2*t4546;
  t13031 = -1.*t4862*t12912;
  t13037 = -4.e-7 + t12899 + t13031 + t12900;
  t13054 = t5106*t13037;
  t13056 = 3.000000000027e-6*t12438*t5289;
  t13060 = t13028 + t12904 + t13054 + t12907 + t12913 + t12914 + t12916 + t13056 + t12922;
  t18102 = 3.e-6*t3569*t5289;
  t18103 = t12554*t12669;
  t18156 = t18102 + t18103;
  t13080 = 1.000000000009*t4546*t344;
  t13084 = t13080 + t13000;
  t13070 = -1.000000000009*t4546*t3901;
  t13071 = t12597 + t13070;
  t13077 = -3.000000000027e-6*t5289*t12554;
  t13085 = t3569*t13084;
  t13086 = t13077 + t13085;
  t13127 = -1.*t4862*t3569*t344*t558;
  t13153 = -1.*t4862*t3105*t3901;
  t13159 = t13127 + t13153;
  t13178 = -1.*t3105*t344;
  t13180 = t3569*t558*t3901;
  t13198 = t13178 + t13180;
  t14218 = t3105*t12343;
  t14233 = -1.*t3569*t558*t12376;
  t14235 = t14218 + t14233;
  t14395 = -1.*t3569*t558*t12482;
  t14399 = t3105*t12505;
  t14438 = t14395 + t14399;
  t14509 = -1.*t3105*t3569*t344;
  t14515 = t558*t3901;
  t14523 = t14509 + t14515;
  t14532 = -1.*t4862*t344*t558;
  t14537 = -1.*t3105*t12806;
  t14543 = t14532 + t14537;
  t14555 = -1.*t558*t12376;
  t14567 = -1.*t3105*t12840;
  t14569 = t14555 + t14567;
  t14571 = -1.*t558*t12482;
  t14575 = -1.*t3105*t12868;
  t14605 = t14571 + t14575;
  t18197 = t13108*t17304;
  t18200 = -1.*t13114*t12817;
  t18201 = t18197 + t18200;
  t18235 = t13108*t17936;
  t18418 = -1.*t13114*t12858;
  t18419 = t18235 + t18418;
  t18617 = t13108*t18156;
  t18619 = -1.*t13114*t12875;
  t18621 = t18617 + t18619;
  t18455 = 3.e-6*t4546*t3569;
  t18518 = t12554*t13011;
  t18520 = t18455 + t18518;
  t18536 = t3105*t13003;
  t18541 = -1.*t558*t13013;
  t18542 = t18536 + t18541;
  t18631 = 3.000000000027e-6*t3569*t5289;
  t18633 = t12554*t13084;
  t18634 = t18631 + t18633;
  t18668 = t3105*t13071;
  t18670 = -1.*t558*t13086;
  t18672 = t18668 + t18670;
  t19788 = -0.1*t12554;
  t19789 = -1.*t344;
  t19793 = 1. + t19789;
  t19795 = 0.2*t19793;
  t19806 = 0.2*t344;
  t19989 = 0.05*t3901;
  t20017 = t19795 + t19806 + t19989;
  t20018 = t3569*t20017;
  t20020 = t19788 + t20018;
  t19787 = 0.05*t344*t558;
  t20027 = t3105*t20020;
  t20031 = t19787 + t20027;
  t20039 = 0.05*t3105*t344;
  t20071 = -1.*t558*t20020;
  t20072 = t20039 + t20071;
  t20457 = -0.1*t3569;
  t20491 = -1.*t12554*t20017;
  t20618 = t20457 + t20491;
  t20078 = 0.1*t3569;
  t20152 = t12554*t20017;
  t20153 = t20078 + t20152;
  t20845 = t344*t558;
  t20846 = t3105*t3569*t3901;
  t20867 = t20845 + t20846;
  t20929 = t3105*t344;
  t21153 = -1.*t3569*t558*t3901;
  t21155 = t20929 + t21153;
  t12987 = t558*t12376;
  t12992 = t3105*t12840;
  t12994 = t12987 + t12992;
  t12950 = t4862*t344*t558;
  t12954 = t3105*t12806;
  t12957 = t12950 + t12954;
  t21807 = t344*t5362;
  t21808 = t7170*t3901;
  t21811 = t19795 + t21807 + t21808;
  t22094 = -1.*t3569*t12227;
  t22242 = -1.*t12554*t21811;
  t22438 = t22094 + t22242;
  t21798 = -1.*t12227*t12554;
  t21905 = t3569*t21811;
  t21925 = t21798 + t21905;
  t22594 = t344*t7170;
  t22597 = 0.2*t3901;
  t22610 = -1.*t5362*t3901;
  t22614 = t22594 + t22597 + t22610;
  t22510 = t3569*t12227;
  t22525 = t12554*t21811;
  t22585 = t22510 + t22525;
  t22615 = t558*t22614;
  t22635 = t3105*t21925;
  t22641 = t22615 + t22635;
  t22713 = t3105*t22614;
  t22739 = -1.*t558*t21925;
  t22747 = t22713 + t22739;
  t13061 = t558*t12482;
  t13067 = t3105*t12868;
  t13068 = t13061 + t13067;
  t12249 = t4862*t3105*t3569*t344;
  t12256 = -1.*t4862*t558*t3901;
  t12264 = t12249 + t12256;
  t12363 = t558*t12343;
  t12378 = t3105*t3569*t12376;
  t12404 = t12363 + t12378;
  t12484 = t3105*t3569*t12482;
  t12506 = t558*t12505;
  t12536 = t12484 + t12506;
  t20034 = t3105*t12554*t20031;
  t20075 = -1.*t558*t12554*t20072;
  t20159 = -1.*t3569*t20153;
  t20172 = t20034 + t20075 + t20159;
  t28838 = t3105*t3569*t344;
  t28963 = -1.*t558*t3901;
  t29025 = t28838 + t28963;
  t29848 = 0.05*t3105*t3569*t344;
  t29882 = -0.05*t558*t3901;
  t29890 = t29848 + t29882;
  t29654 = -0.05*t3569*t344*t558;
  t29713 = -0.05*t3105*t3901;
  t29720 = t29654 + t29713;
  t30768 = -1.*t344*t5362;
  t30804 = -1.*t7170*t3901;
  t31328 = t19806 + t30768 + t30804;
  t23479 = -1.*t17304*t22585;
  t23488 = -1.*t12957*t22641;
  t23489 = -1.*t12817*t22747;
  t23492 = t23479 + t23488 + t23489;
  t31332 = t558*t31328;
  t31337 = t3105*t3569*t22614;
  t31359 = t31332 + t31337;
  t31381 = t3105*t31328;
  t31383 = -1.*t3569*t558*t22614;
  t31406 = t31381 + t31383;
  t23507 = t17936*t22585;
  t23513 = t12994*t22641;
  t23562 = t12858*t22747;
  t23596 = t23507 + t23513 + t23562;
  t24209 = t17304*t22585;
  t24220 = t12957*t22641;
  t24252 = t12817*t22747;
  t24256 = t24209 + t24220 + t24252;
  t24568 = -1.*t22585*t18156;
  t24570 = -1.*t22641*t13068;
  t24678 = -1.*t22747*t12875;
  t24696 = t24568 + t24570 + t24678;
  t25081 = -1.*t17936*t22585;
  t25086 = -1.*t12994*t22641;
  t25257 = -1.*t12858*t22747;
  t25481 = t25081 + t25086 + t25257;
  t26762 = t22585*t18156;
  t26779 = t22641*t13068;
  t26930 = t22747*t12875;
  t27625 = t26762 + t26779 + t26930;
  t626 = -1.*t344*t558;
  t4088 = -1.*t3105*t3569*t3901;
  t4383 = t626 + t4088;
  t32408 = -0.05*t344*t558;
  t32413 = -1.*t3105*t20020;
  t32421 = t32408 + t32413;
  t20892 = t12554*t20153*t3901;
  t20895 = t20031*t20867;
  t21193 = t20072*t21155;
  t21287 = t20892 + t20895 + t21193;
  t32555 = -1.*t558*t22614;
  t32562 = -1.*t3105*t21925;
  t32565 = t32555 + t32562;
  t13004 = t558*t13003;
  t13020 = t3105*t13013;
  t13022 = t13004 + t13020;
  t13075 = t558*t13071;
  t13087 = t3105*t13086;
  t13093 = t13075 + t13087;
  t33269 = t344*t12919;
  t33273 = t12912*t3901;
  t33274 = t33269 + t33273;
  t33309 = t344*t12912;
  t33322 = -1.*t12919*t3901;
  t33348 = t33309 + t33322;
  t33359 = -1.*t12901*t12554;
  t33363 = t3569*t33274;
  t33365 = t33359 + t33363;
  t33262 = t3569*t12901;
  t33283 = t12554*t33274;
  t33290 = t33262 + t33283;
  t33353 = t558*t33348;
  t33375 = t3105*t33365;
  t33453 = t33353 + t33375;
  t33530 = t3105*t33348;
  t33532 = -1.*t558*t33365;
  t33567 = t33530 + t33532;
  t29922 = t344*t12554*t20153;
  t29945 = Power(t12554,2);
  t30050 = 0.05*t344*t29945*t3901;
  t30660 = -1.*t12554*t22614*t17304;
  t30661 = -1.*t4862*t344*t12554*t22585;
  t31440 = t12554*t22614*t17936;
  t31444 = t12554*t12376*t22585;
  t31698 = t12554*t22614*t17304;
  t31727 = t4862*t344*t12554*t22585;
  t31804 = -1.*t12554*t12482*t22585;
  t31813 = -1.*t12554*t22614*t18156;
  t32273 = -1.*t12554*t22614*t17936;
  t32275 = -1.*t12554*t12376*t22585;
  t32316 = t12554*t12482*t22585;
  t32318 = t12554*t22614*t18156;
  t35867 = t12554*t20020;
  t35872 = t35867 + t20159;
  t20839 = t12554*t20153;
  t21416 = t3569*t20153*t3901;
  t22029 = -1.*t17304*t21925;
  t22591 = -1.*t12806*t22585;
  t36275 = -1.*t4862*t344*t22614;
  t36278 = -1.*t12806*t21925;
  t36286 = t36275 + t36278 + t23479;
  t22766 = t17936*t21925;
  t22912 = t12840*t22585;
  t36310 = t22614*t12376;
  t36313 = t12840*t21925;
  t36314 = t36310 + t36313 + t23507;
  t23616 = t17304*t21925;
  t23633 = t12806*t22585;
  t36338 = t4862*t344*t22614;
  t36344 = t12806*t21925;
  t36346 = t36338 + t36344 + t24209;
  t24263 = -1.*t22585*t12868;
  t24268 = -1.*t21925*t18156;
  t36396 = -1.*t12482*t22614;
  t36410 = -1.*t21925*t12868;
  t36411 = t36396 + t36410 + t24568;
  t24763 = -1.*t17936*t21925;
  t24798 = -1.*t12840*t22585;
  t36476 = -1.*t22614*t12376;
  t36482 = -1.*t12840*t21925;
  t36548 = t36476 + t36482 + t25081;
  t25843 = t22585*t12868;
  t25913 = t21925*t18156;
  t37244 = t12482*t22614;
  t37323 = t21925*t12868;
  t37445 = t37244 + t37323 + t26762;
  t33308 = t17304*t33290;
  t33603 = -1.*t18520*t22585;
  t33604 = -1.*t33290*t18156;
  t34100 = t18520*t22585;
  t34120 = t33290*t18156;
  t34171 = -1.*t17936*t33290;
  t34175 = -1.*t22585*t18634;
  t34438 = -1.*t17304*t33290;
  t34463 = t17936*t33290;
  t34546 = t22585*t18634;
  t36174 = -1.*t4862*t344*t31328;
  t36227 = t12343*t22614;
  t36231 = t31328*t12376;
  t36324 = t4862*t344*t31328;
  t36351 = -1.*t12482*t31328;
  t36353 = -1.*t22614*t12505;
  t36433 = -1.*t12343*t22614;
  t36434 = -1.*t31328*t12376;
  t36557 = t12482*t31328;
  t36595 = t22614*t12505;
  t43603 = -1.*t4862*t3901*t21811;
  t43689 = t8292 + t11074 + t12225 + t12226 + t43603 + t36275;
  t43842 = t5106*t12227;
  t43844 = t12610*t21811;
  t43852 = t43842 + t43844 + t36310;
  t43935 = t4862*t3901*t21811;
  t43938 = t12270 + t12292 + t12294 + t12298 + t43935 + t36338;
  t43943 = -3.e-6*t12227*t5289;
  t43951 = -1.*t21811*t12669;
  t43961 = t43943 + t36396 + t43951;
  t44556 = -1.*t12610*t21811;
  t44582 = t12239 + t44556 + t36476;
  t44892 = t21811*t12669;
  t44894 = t12228 + t37244 + t44892;
  t40502 = t4862*t344*t33348;
  t41468 = -1.*t12482*t33348;
  t41470 = -1.*t22614*t13003;
  t41994 = t12482*t33348;
  t41995 = t22614*t13003;
  t42458 = -1.*t13071*t22614;
  t42467 = -1.*t33348*t12376;
  t42540 = -1.*t4862*t344*t33348;
  t42571 = t13071*t22614;
  t42576 = t33348*t12376;
  p_output1[0]=var2[7]*(-0.5*(0.0013*t12794 + 0.043*t12248*t12817 + 0.043*t12305*t12858 + 0.043*t12450*t12875)*var2[4] - 0.5*(0.043*t12248*t12580*t3105 + 0.043*t12305*t12622*t3105 + 0.043*t12450*t12684*t3105 - 0.0013*t12554*t3105*t344)*var2[5] - 0.5*(0.043*t12248*t12264 + 0.043*t12305*t12404 + 0.043*t12450*t12536 + 0.0013*t4383)*var2[7] - 0.5*(0.043*t12948*t12957 + 0.043*t12985*t12994 + 0.043*t12450*t13022 + 0.043*t13060*t13068 + 0.043*t12305*t13093)*var2[9]);
  p_output1[1]=var2[7]*(-0.5*(0.043*t12248*(-1.*t12817*t13108 - 1.*t13114*t17304) + 0.043*t12305*(-1.*t12858*t13108 - 1.*t13114*t17936) + 0.043*t12450*(-1.*t12875*t13108 - 1.*t13114*t18156) + 0.0013*(-1.*t12794*t13108 - 1.*t12554*t13114*t344))*var2[3] - 0.5*(-0.0013*t13114*t14523 - 0.043*t12248*t13114*t14543 - 0.043*t12305*t13114*t14569 - 0.043*t12450*t13114*t14605)*var2[4] - 0.5*(0.043*t12248*(t12806*t13108 + t12580*t13114*t558) + 0.043*t12305*(t12840*t13108 + t12622*t13114*t558) + 0.043*t12450*(t12868*t13108 + t12684*t13114*t558) + 0.0013*(t13108*t344*t3569 - 1.*t12554*t13114*t344*t558))*var2[5] - 0.5*(0.043*t12305*(t12376*t12554*t13108 - 1.*t13114*t14235) + 0.043*t12450*(t12482*t12554*t13108 - 1.*t13114*t14438) + 0.0013*(-1.*t13114*t13198 - 1.*t12554*t13108*t3901) + 0.043*t12248*(-1.*t13114*t13159 + t12554*t13108*t344*t4862))*var2[7] - 0.5*(0.043*t12948*t18201 + 0.043*t12985*t18419 + 0.043*t12450*(t13108*t18520 - 1.*t13114*t18542) + 0.043*t13060*t18621 + 0.043*t12305*(t13108*t18634 - 1.*t13114*t18672))*var2[9]);
  p_output1[2]=var2[7]*(-0.5*(0.043*t12248*t18201 + 0.043*t12305*t18419 + 0.043*t12450*t18621 + 0.0013*(-1.*t12794*t13114 + t12554*t13108*t344))*var2[3] - 0.5*(0.0013*t13108*t14523 + 0.043*t12248*t13108*t14543 + 0.043*t12305*t13108*t14569 + 0.043*t12450*t13108*t14605)*var2[4] - 0.5*(0.043*t12248*(t12806*t13114 - 1.*t12580*t13108*t558) + 0.043*t12305*(t12840*t13114 - 1.*t12622*t13108*t558) + 0.043*t12450*(t12868*t13114 - 1.*t12684*t13108*t558) + 0.0013*(t13114*t344*t3569 + t12554*t13108*t344*t558))*var2[5] - 0.5*(0.043*t12305*(t12376*t12554*t13114 + t13108*t14235) + 0.043*t12450*(t12482*t12554*t13114 + t13108*t14438) + 0.0013*(t13108*t13198 - 1.*t12554*t13114*t3901) + 0.043*t12248*(t13108*t13159 + t12554*t13114*t344*t4862))*var2[7] - 0.5*(0.043*t12948*(t12817*t13108 + t13114*t17304) + 0.043*t12985*(t12858*t13108 + t13114*t17936) + 0.043*t13060*(t12875*t13108 + t13114*t18156) + 0.043*t12450*(t13114*t18520 + t13108*t18542) + 0.043*t12305*(t13114*t18634 + t13108*t18672))*var2[9]);
  p_output1[3]=var2[7]*(-0.5*(-0.000271*t12817 + 0.043*t12450*(t12858*t23492 + t12817*t23596 + t12994*(-1.*t12817*t22641 - 1.*t12957*t22747 - 1.*t14543*t22747 - 1.*t12817*t32565) + t12957*(t12858*t22641 + t12994*t22747 + t14569*t22747 + t12858*t32565)) + 0.043*t12305*(t12875*t24256 + t12817*t24696 + t13068*(t12817*t22641 + t12957*t22747 + t14543*t22747 + t12817*t32565) + t12957*(-1.*t12875*t22641 - 1.*t13068*t22747 - 1.*t14605*t22747 - 1.*t12875*t32565)) + 0.043*t12248*(t12875*t25481 + t12858*t27625 + t13068*(-1.*t12858*t22641 - 1.*t12994*t22747 - 1.*t14569*t22747 - 1.*t12858*t32565) + t12994*(t12875*t22641 + t13068*t22747 + t14605*t22747 + t12875*t32565)) + 0.000271*t12858*t5106 + 6.e-12*t12875*t5289 + 0.000046*t12554*t558 + 0.0013*(t20172*t21155 - 1.*t12554*t3105*(t20072*t20867 + t20031*t21155 + t21155*t32421 + t20072*t4383) + t12554*t21287*t558 + t20867*(-1.*t12554*t20031*t558 - 1.*t12554*t32421*t558)))*var2[4] - 0.5*(-0.000271*t12580*t3105 - 0.000046*t3105*t3569 + 0.000271*t12622*t3105*t5106 + 6.e-12*t12684*t3105*t5289 + 0.043*t12450*(t12622*t23492*t3105 + t12580*t23596*t3105 + t12994*(t22029 + t22591 - 1.*t12957*t22438*t3105 - 1.*t12580*t22641*t3105 + t12817*t22438*t558 + t12580*t22747*t558) + t12957*(t22766 + t22912 + t12994*t22438*t3105 + t12622*t22641*t3105 - 1.*t12858*t22438*t558 - 1.*t12622*t22747*t558)) + 0.043*t12248*(t12684*t25481*t3105 + t12622*t27625*t3105 + t13068*(t24763 + t24798 - 1.*t12994*t22438*t3105 - 1.*t12622*t22641*t3105 + t12858*t22438*t558 + t12622*t22747*t558) + t12994*(t25843 + t25913 + t13068*t22438*t3105 + t12684*t22641*t3105 - 1.*t12875*t22438*t558 - 1.*t12684*t22747*t558)) + 0.043*t12305*(t12684*t24256*t3105 + t12580*t24696*t3105 + t13068*(t23616 + t23633 + t12957*t22438*t3105 + t12580*t22641*t3105 - 1.*t12817*t22438*t558 - 1.*t12580*t22747*t558) + t12957*(t24263 + t24268 - 1.*t13068*t22438*t3105 - 1.*t12684*t22641*t3105 + t12875*t22438*t558 + t12684*t22747*t558)) + 0.0013*(-1.*t21287*t3105*t3569 - 1.*t12554*t20172*t3105*t3901 - 1.*t12554*t3105*(t21416 + t20618*t20867*t3105 + t12554*t20020*t3901 - 1.*t12554*t20031*t3105*t3901 - 1.*t20618*t21155*t558 + t12554*t20072*t3901*t558) + t20867*(t20839 + t12554*t20618*Power(t3105,2) - 1.*t20020*t3569 + t20031*t3105*t3569 - 1.*t20072*t3569*t558 + t12554*t20618*Power(t558,2))))*var2[5] - 0.5*(-0.000271*t12264 + 0.043*t12450*(t12404*t23492 + t12264*t23596 + t12994*(-1.*t12264*t22641 - 1.*t13159*t22747 + t30660 + t30661 - 1.*t12957*t31359 - 1.*t12817*t31406) + t12957*(t12404*t22641 + t14235*t22747 + t12994*t31359 + t12858*t31406 + t31440 + t31444)) + 0.043*t12305*(t12536*t24256 + t12264*t24696 + t13068*(t12264*t22641 + t13159*t22747 + t12957*t31359 + t12817*t31406 + t31698 + t31727) + t12957*(-1.*t12536*t22641 - 1.*t14438*t22747 - 1.*t13068*t31359 - 1.*t12875*t31406 + t31804 + t31813)) + 0.043*t12248*(t12536*t25481 + t12404*t27625 + t13068*(-1.*t12404*t22641 - 1.*t14235*t22747 - 1.*t12994*t31359 - 1.*t12858*t31406 + t32273 + t32275) + t12994*(t12536*t22641 + t14438*t22747 + t13068*t31359 + t12875*t31406 + t32316 + t32318)) + 0.000271*t12404*t5106 + 6.e-12*t12536*t5289 + 0.0013*(t20172*t29025 - 1.*t12554*(t12794*t20072 + t20031*t29025 + t21155*t29720 + t20867*t29890 + t29922 + t30050)*t3105 + t20867*(t12554*t29890*t3105 - 0.05*t12554*t344*t3569 - 1.*t12554*t29720*t558)))*var2[7] - 0.5*(0.043*t13060*(t12994*t23492 + t12957*t23596) + 0.043*t12985*(t13068*t24256 + t12957*t24696) + 0.043*t12948*(t13068*t25481 + t12994*t27625) + 0.043*t12305*(t13022*t24256 + t13068*(t33308 + t12957*t33453 + t12817*t33567) + t12957*(-1.*t13022*t22641 - 1.*t18542*t22747 - 1.*t13068*t33453 - 1.*t12875*t33567 + t33603 + t33604)) + 0.043*t12248*(t13022*t25481 + t13093*t27625 + t12994*(t13022*t22641 + t18542*t22747 + t13068*t33453 + t12875*t33567 + t34100 + t34120) + t13068*(-1.*t13093*t22641 - 1.*t18672*t22747 - 1.*t12994*t33453 - 1.*t12858*t33567 + t34171 + t34175)) + 0.043*t12450*(t13093*t23492 + t12994*(-1.*t12957*t33453 - 1.*t12817*t33567 + t34438) + t12957*(t13093*t22641 + t18672*t22747 + t12994*t33453 + t12858*t33567 + t34463 + t34546)) + 6.e-12*t13068*t4546 + 0.000271*t13093*t5106 + 8.13000000007317e-10*t12994*t5289 + 6.e-12*t13022*t5289)*var2[9]);
  p_output1[4]=var2[7]*(-0.5*(-0.000046*t12554 - 0.000271*t12806 + 0.043*t12450*(t17936*(-1.*t12580*t21925 + t22029 - 1.*t12806*t22438 + t22591) + t17304*(t12622*t21925 + t12840*t22438 + t22766 + t22912) + t12840*t36286 + t12806*t36314) + 0.043*t12305*(t18156*(t12580*t21925 + t12806*t22438 + t23616 + t23633) + t17304*(-1.*t12684*t21925 - 1.*t12868*t22438 + t24263 + t24268) + t12868*t36346 + t12806*t36411) + 0.043*t12248*(t18156*(-1.*t12622*t21925 - 1.*t12840*t22438 + t24763 + t24798) + t17936*(t12684*t21925 + t12868*t22438 + t25843 + t25913) + t12868*t36548 + t12840*t37445) + 0.0013*(t12554*(t12554*t20618 + t20839)*t3901 + t3569*t35872*t3901 - 1.*t12554*(t20892 + 0.05*Power(t344,2) + t20020*t3569*t3901) + t3569*(t21416 + t20618*t3569*t3901)) + 0.000271*t12840*t5106 + 6.e-12*t12868*t5289)*var2[5] - 0.5*(0.043*t12248*(t18156*(t32273 + t32275 - 1.*t12376*t21925*t3569 - 1.*t12840*t22614*t3569 + t36433 + t36434) + t12482*t12554*t36548 + t17936*(t32316 + t32318 + t12482*t21925*t3569 + t12868*t22614*t3569 + t36557 + t36595) + t12376*t12554*t37445) + 0.0013*(t12554*t344*t35872 + t3569*(t29922 + t30050 + t20020*t344*t3569 - 0.1*t344*t3901 + 0.05*t344*Power(t3569,2)*t3901)) - 0.000271*t12554*t344*t4862 + 0.043*t12305*(t12482*t12554*t36346 + t17304*(t31804 + t31813 - 1.*t12482*t21925*t3569 - 1.*t12868*t22614*t3569 + t36351 + t36353) + t12554*t344*t36411*t4862 + t18156*(t31698 + t31727 + t12806*t22614*t3569 + t36324 + t21925*t344*t3569*t4862 - 1.*t22614*t3901*t4862)) + 0.043*t12450*(t17304*(t31440 + t31444 + t12376*t21925*t3569 + t12840*t22614*t3569 + t36227 + t36231) + t12376*t12554*t36286 + t12554*t344*t36314*t4862 + t17936*(t30660 + t30661 - 1.*t12806*t22614*t3569 + t36174 - 1.*t21925*t344*t3569*t4862 + t22614*t3901*t4862)) + 0.000271*t12376*t12554*t5106 + 6.e-12*t12482*t12554*t5289)*var2[7] - 0.5*(0.043*t13060*(t17936*t36286 + t17304*t36314) + 0.043*t12985*(t18156*t36346 + t17304*t36411) + 0.043*t12948*(t18156*t36548 + t17936*t37445) + 0.043*t12305*(t18520*t36346 + t18156*(t33308 + t12806*t33365 + t40502) + t17304*(-1.*t13013*t21925 - 1.*t12868*t33365 + t33603 + t33604 + t41468 + t41470)) + 0.043*t12248*(t18520*t36548 + t18634*t37445 + t17936*(t13013*t21925 + t12868*t33365 + t34100 + t34120 + t41994 + t41995) + t18156*(-1.*t13086*t21925 - 1.*t12840*t33365 + t34171 + t34175 + t42458 + t42467)) + 0.043*t12450*(t18634*t36286 + t17936*(-1.*t12806*t33365 + t34438 + t42540) + t17304*(t13086*t21925 + t12840*t33365 + t34463 + t34546 + t42571 + t42576)) + 6.e-12*t18156*t4546 + 0.000271*t18634*t5106 + 8.13000000007317e-10*t17936*t5289 + 6.e-12*t18520*t5289)*var2[9]);
  p_output1[5]=var2[7]*(-0.5*(0.00013*t3901 + 0.043*t12248*(t12482*(-1.*t12376*t21811 - 1.*t12610*t22614 + t36433 + t36434) + t12376*(t12482*t21811 + t12669*t22614 + t36557 + t36595) + t12505*t44582 + t12343*t44894) + 0.000271*t3901*t4862 + 0.043*t12450*(t12343*t43689 + t344*(t12376*t21811 + t12610*t22614 + t36227 + t36231)*t4862 - 1.*t3901*t43852*t4862 + t12376*(t36174 - 1.*t21811*t344*t4862)) + 0.043*t12305*(t12505*t43938 + t344*(-1.*t12482*t21811 - 1.*t12669*t22614 + t36351 + t36353)*t4862 - 1.*t3901*t43961*t4862 + t12482*(t36324 + t21811*t344*t4862)) + 0.000271*t12343*t5106 + 6.e-12*t12505*t5289)*var2[7] - 0.5*(0.043*t12948*(t12482*t44582 + t12376*t44894) + 0.043*t12248*(t12376*(t12935 + t12938 + t13011*t21811 + t12669*t33274 + t41994 + t41995) + t12482*(t12904 + t12916 - 1.*t13084*t21811 - 1.*t12610*t33274 + t42458 + t42467) + t13003*t44582 + t13071*t44894) + 6.e-12*t12482*t4546 + 0.043*t13060*(t12376*t43689 + t344*t43852*t4862) + 0.043*t12985*(t12482*t43938 + t344*t43961*t4862) + 0.000271*t13071*t5106 + 8.13000000007317e-10*t12376*t5289 + 6.e-12*t13003*t5289 + 0.043*t12450*(t13071*t43689 + t12376*(-4.e-7 + t12899 + t12900 + t42540 - 1.*t33274*t3901*t4862) + t344*t4862*(t13084*t21811 + t12610*t33274 + t42571 + t42576 + t12901*t5106 + 3.000000000027e-6*t12227*t5289)) + 0.043*t12305*(t13003*t43938 + t12482*(4.e-7 + t12967 + t12976 + t40502 + t33274*t3901*t4862) + t344*t4862*(-1.*t13011*t21811 - 1.*t12669*t33274 + t41468 + t41470 - 3.e-6*t12227*t4546 - 3.e-6*t12901*t5289)))*var2[9]);
  p_output1[6]=0;
  p_output1[7]=-0.5*(0.086*t12248*t12948 + 0.086*t12305*t12985 + 0.086*t12450*t13060 + 3.6e-17*t4546*t5289 + 1.62600000001463e-9*t5106*t5289)*var2[7]*var2[9];
  p_output1[8]=0;
  p_output1[9]=-0.5*(1.72e-8*t12948 + 5.16e-14*t12985 + 0.0042999871*t13060)*var2[7]*var2[9];
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec8_minitaur.hh"

namespace FrontStance
{

void Ce1_vec8_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
