/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:08:40 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t793;
  double t832;
  double t916;
  double t2340;
  double t2356;
  double t3067;
  double t2366;
  double t2628;
  double t2815;
  double t3425;
  double t3444;
  double t3452;
  double t3459;
  double t3463;
  double t3561;
  double t3612;
  double t3626;
  double t3631;
  double t2988;
  double t3007;
  double t3016;
  double t3045;
  double t3088;
  double t3367;
  double t309;
  double t288;
  double t301;
  double t3899;
  double t3916;
  double t302;
  double t315;
  double t2965;
  double t2978;
  double t3395;
  double t3710;
  double t3518;
  double t3651;
  double t3712;
  double t3700;
  double t3723;
  double t3725;
  double t1584;
  double t1616;
  double t2290;
  double t2319;
  double t3659;
  double t3692;
  double t3780;
  double t3850;
  double t3894;
  double t4466;
  double t4044;
  double t4053;
  double t4089;
  double t4092;
  double t4096;
  double t4118;
  double t4190;
  double t4191;
  double t4208;
  double t4323;
  double t4324;
  double t4388;
  double t4391;
  double t4394;
  double t4395;
  double t4398;
  double t4905;
  double t4908;
  double t4913;
  double t4865;
  double t4871;
  double t4874;
  double t4896;
  double t4897;
  double t4936;
  double t4946;
  double t4948;
  double t5005;
  double t5111;
  double t4328;
  double t4331;
  double t4333;
  double t4686;
  double t4688;
  double t4703;
  double t4356;
  double t5329;
  double t4875;
  double t4889;
  double t4900;
  double t4915;
  double t4918;
  double t4924;
  double t4399;
  double t4410;
  double t4411;
  double t4737;
  double t4741;
  double t4755;
  double t5145;
  double t5153;
  double t5284;
  double t5292;
  double t5294;
  double t6402;
  double t6431;
  double t6439;
  double t6990;
  double t7096;
  double t4426;
  double t4427;
  double t4428;
  double t4348;
  double t4358;
  double t4592;
  double t4593;
  double t4634;
  double t4718;
  double t4720;
  double t4731;
  double t4764;
  double t4765;
  double t6660;
  double t6662;
  double t6668;
  double t6674;
  double t6676;
  double t6680;
  double t6698;
  double t6720;
  double t6722;
  double t6754;
  double t6763;
  double t6769;
  double t4925;
  double t4927;
  double t4928;
  double t4932;
  double t5115;
  double t5118;
  double t5132;
  double t12176;
  double t12177;
  double t12180;
  double t5188;
  double t5201;
  double t5211;
  double t5218;
  double t5228;
  double t5242;
  double t5257;
  double t5265;
  double t12203;
  double t12204;
  double t12205;
  double t5452;
  double t5455;
  double t5309;
  double t5426;
  double t5468;
  double t5611;
  double t5671;
  double t6209;
  double t6210;
  double t6159;
  double t6164;
  double t6274;
  double t6330;
  double t6337;
  double t6355;
  double t6372;
  double t6379;
  double t6381;
  double t6384;
  double t6387;
  double t12328;
  double t12337;
  double t12339;
  double t7079;
  double t7086;
  double t7093;
  double t7109;
  double t7180;
  double t7186;
  double t7223;
  double t7230;
  double t7232;
  double t7328;
  double t7335;
  double t7464;
  double t7911;
  double t8207;
  double t8293;
  double t8371;
  double t8388;
  double t8398;
  double t8401;
  double t8403;
  double t8404;
  double t8626;
  double t8741;
  double t8853;
  double t12570;
  double t12572;
  double t12590;
  double t12599;
  double t12602;
  double t12605;
  double t12654;
  double t12659;
  double t12670;
  double t12781;
  double t12795;
  double t12802;
  double t12452;
  double t12454;
  double t12488;
  double t12508;
  double t12511;
  double t12563;
  double t12821;
  double t12822;
  double t12827;
  double t3925;
  double t3936;
  double t3962;
  double t4346;
  double t4366;
  double t4376;
  double t4415;
  double t4431;
  double t4432;
  double t21952;
  double t21997;
  double t22008;
  double t22032;
  double t22057;
  double t22079;
  double t22082;
  double t22123;
  double t19779;
  double t19782;
  double t19783;
  double t19906;
  double t19910;
  double t19920;
  double t19866;
  double t19900;
  double t19901;
  double t19978;
  double t19982;
  double t19990;
  double t19991;
  double t22159;
  double t22300;
  double t22410;
  double t22583;
  double t22948;
  double t22956;
  double t22957;
  double t22964;
  double t5272;
  double t5301;
  double t5306;
  double t26621;
  double t29371;
  double t29384;
  double t29451;
  double t5139;
  double t5169;
  double t5185;
  double t33389;
  double t33415;
  double t33649;
  double t30434;
  double t30435;
  double t31428;
  double t42543;
  double t43859;
  double t49063;
  double t30382;
  double t31749;
  double t32332;
  double t33379;
  double t33657;
  double t33678;
  double t33778;
  double t34145;
  double t34358;
  double t34423;
  double t49125;
  double t49201;
  double t49608;
  double t49748;
  double t49817;
  double t6388;
  double t6463;
  double t6465;
  double t22403;
  double t22955;
  double t22966;
  double t23020;
  double t23232;
  double t23235;
  double t23297;
  double t51629;
  double t51630;
  double t51643;
  double t51820;
  double t51823;
  double t51825;
  double t50884;
  double t50899;
  double t50908;
  double t50923;
  double t50932;
  double t50950;
  double t50976;
  double t51033;
  double t51274;
  double t51275;
  double t51277;
  double t51280;
  double t51326;
  double t51327;
  double t51337;
  double t51338;
  double t51396;
  double t51399;
  double t51400;
  double t51402;
  double t51481;
  double t51488;
  double t51489;
  double t51492;
  double t304;
  double t340;
  double t354;
  double t52069;
  double t52072;
  double t52078;
  double t51758;
  double t51763;
  double t51765;
  double t51779;
  double t52190;
  double t52193;
  double t52204;
  double t5447;
  double t5941;
  double t5944;
  double t6184;
  double t6350;
  double t6352;
  double t53229;
  double t53232;
  double t53243;
  double t53277;
  double t53278;
  double t53281;
  double t53288;
  double t53289;
  double t53302;
  double t53227;
  double t53246;
  double t53250;
  double t53285;
  double t53305;
  double t53308;
  double t53333;
  double t53354;
  double t53356;
  double t23372;
  double t23460;
  double t23471;
  double t30365;
  double t32653;
  double t50353;
  double t50442;
  double t51174;
  double t51175;
  double t51293;
  double t51298;
  double t51351;
  double t51356;
  double t51431;
  double t51433;
  double t53794;
  double t53805;
  double t51654;
  double t51735;
  double t53914;
  double t53922;
  double t53924;
  double t51812;
  double t51818;
  double t54025;
  double t54030;
  double t54041;
  double t51844;
  double t51846;
  double t54222;
  double t54225;
  double t54246;
  double t51881;
  double t51882;
  double t54643;
  double t54652;
  double t54654;
  double t51920;
  double t51921;
  double t54754;
  double t54765;
  double t54774;
  double t51947;
  double t51948;
  double t54816;
  double t54862;
  double t54868;
  double t51973;
  double t51974;
  double t53565;
  double t53603;
  double t53616;
  double t53680;
  double t53701;
  double t53641;
  double t53643;
  double t53262;
  double t53426;
  double t53431;
  double t53885;
  double t53958;
  double t53968;
  double t54065;
  double t54251;
  double t54255;
  double t54687;
  double t54690;
  double t54789;
  double t54798;
  double t56295;
  double t56297;
  double t56412;
  double t56413;
  double t56415;
  double t56513;
  double t56523;
  double t56538;
  double t56547;
  double t56593;
  double t56881;
  double t56885;
  double t56983;
  double t56994;
  double t55798;
  double t55826;
  double t55827;
  double t55887;
  double t55900;
  double t55933;
  double t55935;
  double t55972;
  double t56024;
  double t56051;
  t793 = Cos(var1[13]);
  t832 = -1.*t793;
  t916 = 1. + t832;
  t2340 = -9.e-12*t916;
  t2356 = 1. + t2340;
  t3067 = Sin(var1[13]);
  t2366 = -3.e-6*t2356;
  t2628 = 3.e-6*t916;
  t2815 = t2366 + t2628;
  t3425 = 4.e-7*var1[13];
  t3444 = 0.1*t2356;
  t3452 = 3.000000000027e-7*t916;
  t3459 = 9.e-18*t3067;
  t3463 = t3425 + t3444 + t3452 + t3459;
  t3561 = -1.2e-12*var1[13];
  t3612 = 0.0999997000009*t916;
  t3626 = 3.e-12*t3067;
  t3631 = t3561 + t3612 + t3626;
  t2988 = 1.000000000009*t916;
  t3007 = -1. + t2988;
  t3016 = 0.2*t3007;
  t3045 = -0.2000000000048*t916;
  t3088 = 0.0999997000009*t3067;
  t3367 = t3016 + t3045 + t3088;
  t309 = Cos(var1[11]);
  t288 = Cos(var1[4]);
  t301 = Cos(var1[5]);
  t3899 = 3.e-6*t793;
  t3916 = t2628 + t3899;
  t302 = Sin(var1[11]);
  t315 = Sin(var1[4]);
  t2965 = -1.000000000009*t916;
  t2978 = 1. + t2965;
  t3395 = t2978*t3367;
  t3710 = 9.e-12*t916;
  t3518 = 3.e-6*t3463*t3067;
  t3651 = t3631*t3067;
  t3712 = t3710 + t832;
  t3700 = -1.*t2815*t3463;
  t3723 = -1.*t3712*t3631;
  t3725 = -1.000000000009*t3367*t3067;
  t1584 = -3.e-6*t916;
  t1616 = -3.e-6*t793;
  t2290 = t1584 + t1616;
  t2319 = 0.2*t2290;
  t3659 = t3395 + t3518 + t3651;
  t3692 = t2815*t3659;
  t3780 = t3700 + t3723 + t3725;
  t3850 = 3.e-6*t3067*t3780;
  t3894 = t2319 + t3692 + t3850;
  t4466 = Sin(var1[5]);
  t4044 = t2340 + t793;
  t4053 = 0.2*t4044;
  t4089 = -4.e-7*var1[13];
  t4092 = -1. + t3710;
  t4096 = 0.1*t4092;
  t4118 = -3.000000000027e-7*t916;
  t4190 = t3916*t3631;
  t4191 = -9.e-18*t3067;
  t4208 = t4089 + t4096 + t4118 + t4190 + t4191;
  t4323 = 3.e-6*t4208*t3067;
  t4324 = t4053 + t3395 + t4323 + t3518 + t3651;
  t4388 = -1.*t3916*t3631;
  t4391 = t3425 + t3444 + t3452 + t4388 + t3459;
  t4394 = t2815*t4391;
  t4395 = -0.2*t3067;
  t4398 = t3700 + t4394 + t3723 + t4395 + t3725;
  t4905 = 0.0999997000009*t793;
  t4908 = -3.000000000027e-12*t3067;
  t4913 = t4905 + t4908;
  t4865 = 9.e-18*t793;
  t4871 = 2.999991000027e-7*t3067;
  t4874 = 4.e-7 + t4865 + t4871;
  t4896 = 3.e-12*t793;
  t4897 = -1.2e-12 + t4896 + t3088;
  t4936 = t2978*t4913;
  t4946 = 3.e-6*t793*t3463;
  t4948 = t793*t3631;
  t5005 = 3.e-6*t4874*t3067;
  t5111 = t4897*t3067;
  t4328 = t309*t3712;
  t4331 = -1.000000000009*t302*t3067;
  t4333 = t4328 + t4331;
  t4686 = t3712*t302;
  t4688 = 1.000000000009*t309*t3067;
  t4703 = t4686 + t4688;
  t4356 = -1.000000000009*t309*t3067;
  t5329 = 1.000000000009*t302*t3067;
  t4875 = -1.*t2815*t4874;
  t4889 = -1.000000000009*t793*t3367;
  t4900 = -1.*t3712*t4897;
  t4915 = -1.000000000009*t4913*t3067;
  t4918 = -3.000000000027e-6*t3463*t3067;
  t4924 = -1.000000000009*t3631*t3067;
  t4399 = -1.*t2978*t302;
  t4410 = t309*t3067;
  t4411 = t4399 + t4410;
  t4737 = t309*t2978;
  t4741 = t302*t3067;
  t4755 = t4737 + t4741;
  t5145 = t3916*t301*t302;
  t5153 = t5145 + t4466;
  t5284 = t301*t4703;
  t5292 = -1.*t2815*t4466;
  t5294 = t5284 + t5292;
  t6402 = t301*t4755;
  t6431 = -3.e-6*t3067*t4466;
  t6439 = t6402 + t6431;
  t6990 = Sin(var1[3]);
  t7096 = Cos(var1[3]);
  t4426 = -1.*t309*t2978;
  t4427 = -1.*t302*t3067;
  t4428 = t4426 + t4427;
  t4348 = -1.*t3712*t302;
  t4358 = t4348 + t4356;
  t4592 = -1.*t3916*t302*t4466;
  t4593 = t301 + t4592;
  t4634 = -1.*t2815*t301;
  t4718 = -1.*t4703*t4466;
  t4720 = t4634 + t4718;
  t4731 = -3.e-6*t301*t3067;
  t4764 = -1.*t4755*t4466;
  t4765 = t4731 + t4764;
  t6660 = -1.*t288*t302;
  t6662 = -1.*t309*t301*t315;
  t6668 = t6660 + t6662;
  t6674 = t309*t3916*t288;
  t6676 = -1.*t315*t5153;
  t6680 = t6674 + t6676;
  t6698 = t288*t4333;
  t6720 = -1.*t315*t5294;
  t6722 = t6698 + t6720;
  t6754 = t288*t4411;
  t6763 = -1.*t315*t6439;
  t6769 = t6754 + t6763;
  t4925 = t4875 + t4889 + t4900 + t4915 + t4918 + t4924;
  t4927 = 3.e-6*t3067*t4925;
  t4928 = 3.000000000027e-6*t3067*t3659;
  t4932 = 3.e-6*t793*t3780;
  t5115 = t4936 + t4946 + t4948 + t5005 + t3725 + t5111;
  t5118 = t2815*t5115;
  t5132 = t4927 + t4928 + t4932 + t5118;
  t12176 = -1.*t301;
  t12177 = t3916*t302*t4466;
  t12180 = t12176 + t12177;
  t5188 = 3.e-6*t793*t4208;
  t5201 = -0.2000000000018*t3067;
  t5211 = -9.e-18*t793;
  t5218 = t3916*t4897;
  t5228 = -2.999991000027e-7*t3067;
  t5242 = -4.e-7 + t5211 + t5218 + t5228;
  t5257 = 3.e-6*t5242*t3067;
  t5265 = t4936 + t5188 + t4946 + t4948 + t5201 + t5257 + t5005 + t3725 + t5111;
  t12203 = t2815*t301;
  t12204 = t4703*t4466;
  t12205 = t12203 + t12204;
  t5452 = t793*t302;
  t5455 = t5452 + t4356;
  t5309 = t309*t793;
  t5426 = t5309 + t5329;
  t5468 = t301*t5455;
  t5611 = -3.e-6*t793*t4466;
  t5671 = t5468 + t5611;
  t6209 = 1.000000000009*t309*t793;
  t6210 = t6209 + t5329;
  t6159 = -1.000000000009*t793*t302;
  t6164 = t6159 + t4688;
  t6274 = t301*t6210;
  t6330 = -3.000000000027e-6*t3067*t4466;
  t6337 = t6274 + t6330;
  t6355 = -0.2*t793;
  t6372 = -1.*t3916*t4897;
  t6379 = 4.e-7 + t4865 + t6372 + t4871;
  t6381 = t2815*t6379;
  t6384 = 3.000000000027e-6*t4391*t3067;
  t6387 = t6355 + t4875 + t6381 + t4889 + t4900 + t4915 + t4918 + t6384 + t4924;
  t12328 = 3.e-6*t301*t3067;
  t12337 = t4755*t4466;
  t12339 = t12328 + t12337;
  t7079 = -1.*t3916*t288*t302;
  t7086 = -1.*t309*t3916*t301*t315;
  t7093 = t7079 + t7086;
  t7109 = -1.*t309*t288;
  t7180 = t301*t302*t315;
  t7186 = t7109 + t7180;
  t7223 = t288*t4428;
  t7230 = -1.*t301*t4411*t315;
  t7232 = t7223 + t7230;
  t7328 = t288*t4358;
  t7335 = -1.*t301*t4333*t315;
  t7464 = t7328 + t7335;
  t7911 = -1.*t309*t288*t301;
  t8207 = t302*t315;
  t8293 = t7911 + t8207;
  t8371 = -1.*t309*t3916*t315;
  t8388 = -1.*t288*t5153;
  t8398 = t8371 + t8388;
  t8401 = -1.*t4333*t315;
  t8403 = -1.*t288*t5294;
  t8404 = t8401 + t8403;
  t8626 = -1.*t4411*t315;
  t8741 = -1.*t288*t6439;
  t8853 = t8626 + t8741;
  t12570 = 3.e-6*t793*t301;
  t12572 = t5455*t4466;
  t12590 = t12570 + t12572;
  t12599 = t288*t5426;
  t12602 = -1.*t315*t5671;
  t12605 = t12599 + t12602;
  t12654 = 3.000000000027e-6*t301*t3067;
  t12659 = t6210*t4466;
  t12670 = t12654 + t12659;
  t12781 = t288*t6164;
  t12795 = -1.*t315*t6337;
  t12802 = t12781 + t12795;
  t12452 = t7096*t12180;
  t12454 = -1.*t6990*t6680;
  t12488 = t12452 + t12454;
  t12508 = t7096*t12205;
  t12511 = -1.*t6990*t6722;
  t12563 = t12508 + t12511;
  t12821 = t7096*t12339;
  t12822 = -1.*t6990*t6769;
  t12827 = t12821 + t12822;
  t3925 = t309*t3916*t288*t301;
  t3936 = -1.*t3916*t302*t315;
  t3962 = t3925 + t3936;
  t4346 = t288*t301*t4333;
  t4366 = t4358*t315;
  t4376 = t4346 + t4366;
  t4415 = t288*t301*t4411;
  t4431 = t4428*t315;
  t4432 = t4415 + t4431;
  t21952 = -1. + t309;
  t21997 = 0.2*t21952;
  t22008 = -0.2*t309;
  t22032 = 0.05*t302;
  t22057 = t21997 + t22008 + t22032;
  t22079 = t301*t22057;
  t22082 = -0.1*t4466;
  t22123 = t22079 + t22082;
  t19779 = t288*t301*t302;
  t19782 = t309*t315;
  t19783 = t19779 + t19782;
  t19906 = 0.05*t309*t288*t301;
  t19910 = -0.05*t302*t315;
  t19920 = t19906 + t19910;
  t19866 = -0.05*t288*t302;
  t19900 = -0.05*t309*t301*t315;
  t19901 = t19866 + t19900;
  t19978 = t309*t288*t301;
  t19982 = -1.*t302*t315;
  t19990 = t19978 + t19982;
  t19991 = 0.05*t309*t315;
  t22159 = t288*t22123;
  t22300 = t19991 + t22159;
  t22410 = 0.05*t309*t288;
  t22583 = -1.*t315*t22123;
  t22948 = t22410 + t22583;
  t22956 = 0.1*t301;
  t22957 = t22057*t4466;
  t22964 = t22956 + t22957;
  t5272 = t4333*t315;
  t5301 = t288*t5294;
  t5306 = t5272 + t5301;
  t26621 = -0.2*t302;
  t29371 = t309*t3631;
  t29384 = -1.*t302*t3367;
  t29451 = t26621 + t29371 + t29384;
  t5139 = t309*t3916*t315;
  t5169 = t288*t5153;
  t5185 = t5139 + t5169;
  t33389 = -1.*t302*t3631;
  t33415 = -1.*t309*t3367;
  t33649 = t22008 + t33389 + t33415;
  t30434 = t302*t3631;
  t30435 = t309*t3367;
  t31428 = t21997 + t30434 + t30435;
  t42543 = t301*t31428;
  t43859 = -1.*t3463*t4466;
  t49063 = t42543 + t43859;
  t30382 = t301*t3463;
  t31749 = t31428*t4466;
  t32332 = t30382 + t31749;
  t33379 = t288*t301*t29451;
  t33657 = t33649*t315;
  t33678 = t33379 + t33657;
  t33778 = t288*t33649;
  t34145 = -1.*t301*t29451*t315;
  t34358 = t33778 + t34145;
  t34423 = t29451*t315;
  t49125 = t288*t49063;
  t49201 = t34423 + t49125;
  t49608 = t288*t29451;
  t49748 = -1.*t315*t49063;
  t49817 = t49608 + t49748;
  t6388 = t4411*t315;
  t6463 = t288*t6439;
  t6465 = t6388 + t6463;
  t22403 = t288*t22300*t4466;
  t22955 = -1.*t315*t22948*t4466;
  t22966 = -1.*t301*t22964;
  t23020 = t22403 + t22955 + t22966;
  t23232 = t309*t288;
  t23235 = -1.*t301*t302*t315;
  t23297 = t23232 + t23235;
  t51629 = -0.1*t301;
  t51630 = -1.*t22057*t4466;
  t51643 = t51629 + t51630;
  t51820 = -1.*t301*t3463;
  t51823 = -1.*t31428*t4466;
  t51825 = t51820 + t51823;
  t50884 = -1.*t12180*t32332;
  t50899 = -1.*t5185*t49201;
  t50908 = -1.*t6680*t49817;
  t50923 = t50884 + t50899 + t50908;
  t50932 = t32332*t12205;
  t50950 = t5306*t49201;
  t50976 = t6722*t49817;
  t51033 = t50932 + t50950 + t50976;
  t51274 = t12180*t32332;
  t51275 = t5185*t49201;
  t51277 = t6680*t49817;
  t51280 = t51274 + t51275 + t51277;
  t51326 = -1.*t32332*t12339;
  t51327 = -1.*t49201*t6465;
  t51337 = -1.*t49817*t6769;
  t51338 = t51326 + t51327 + t51337;
  t51396 = -1.*t32332*t12205;
  t51399 = -1.*t5306*t49201;
  t51400 = -1.*t6722*t49817;
  t51402 = t51396 + t51399 + t51400;
  t51481 = t32332*t12339;
  t51488 = t49201*t6465;
  t51489 = t49817*t6769;
  t51492 = t51481 + t51488 + t51489;
  t304 = -1.*t288*t301*t302;
  t340 = -1.*t309*t315;
  t354 = t304 + t340;
  t52069 = -0.05*t309*t315;
  t52072 = -1.*t288*t22123;
  t52078 = t52069 + t52072;
  t51758 = t19783*t22300;
  t51763 = t23297*t22948;
  t51765 = t302*t4466*t22964;
  t51779 = t51758 + t51763 + t51765;
  t52190 = -1.*t29451*t315;
  t52193 = -1.*t288*t49063;
  t52204 = t52190 + t52193;
  t5447 = t5426*t315;
  t5941 = t288*t5671;
  t5944 = t5447 + t5941;
  t6184 = t6164*t315;
  t6350 = t288*t6337;
  t6352 = t6184 + t6350;
  t53229 = t309*t4913;
  t53232 = t302*t4897;
  t53243 = t53229 + t53232;
  t53277 = -1.*t302*t4913;
  t53278 = t309*t4897;
  t53281 = t53277 + t53278;
  t53288 = t301*t53243;
  t53289 = -1.*t4874*t4466;
  t53302 = t53288 + t53289;
  t53227 = t301*t4874;
  t53246 = t53243*t4466;
  t53250 = t53227 + t53246;
  t53285 = t53281*t315;
  t53305 = t288*t53302;
  t53308 = t53285 + t53305;
  t53333 = t288*t53281;
  t53354 = -1.*t315*t53302;
  t53356 = t53333 + t53354;
  t23372 = Power(t4466,2);
  t23460 = 0.05*t309*t302*t23372;
  t23471 = t309*t4466*t22964;
  t30365 = -1.*t29451*t4466*t12180;
  t32653 = -1.*t309*t3916*t4466*t32332;
  t50353 = t4333*t4466*t32332;
  t50442 = t29451*t4466*t12205;
  t51174 = t29451*t4466*t12180;
  t51175 = t309*t3916*t4466*t32332;
  t51293 = -1.*t4411*t4466*t32332;
  t51298 = -1.*t29451*t4466*t12339;
  t51351 = -1.*t4333*t4466*t32332;
  t51356 = -1.*t29451*t4466*t12205;
  t51431 = t4411*t4466*t32332;
  t51433 = t29451*t4466*t12339;
  t53794 = t22123*t4466;
  t53805 = t53794 + t22966;
  t51654 = t301*t302*t22964;
  t51735 = t4466*t22964;
  t53914 = -1.*t309*t3916*t29451;
  t53922 = -1.*t5153*t49063;
  t53924 = t53914 + t50884 + t53922;
  t51812 = -1.*t5153*t32332;
  t51818 = -1.*t12180*t49063;
  t54025 = t29451*t4333;
  t54030 = t5294*t49063;
  t54041 = t54025 + t54030 + t50932;
  t51844 = t5294*t32332;
  t51846 = t49063*t12205;
  t54222 = t309*t3916*t29451;
  t54225 = t5153*t49063;
  t54246 = t54222 + t51274 + t54225;
  t51881 = t5153*t32332;
  t51882 = t12180*t49063;
  t54643 = -1.*t29451*t4411;
  t54652 = -1.*t49063*t6439;
  t54654 = t54643 + t54652 + t51326;
  t51920 = -1.*t32332*t6439;
  t51921 = -1.*t49063*t12339;
  t54754 = -1.*t29451*t4333;
  t54765 = -1.*t5294*t49063;
  t54774 = t54754 + t54765 + t51396;
  t51947 = -1.*t5294*t32332;
  t51948 = -1.*t49063*t12205;
  t54816 = t29451*t4411;
  t54862 = t49063*t6439;
  t54868 = t54816 + t54862 + t51481;
  t51973 = t32332*t6439;
  t51974 = t49063*t12339;
  t53565 = t12180*t53250;
  t53603 = -1.*t32332*t12590;
  t53616 = -1.*t53250*t12339;
  t53680 = t32332*t12590;
  t53701 = t53250*t12339;
  t53641 = -1.*t53250*t12205;
  t53643 = -1.*t32332*t12670;
  t53262 = -1.*t12180*t53250;
  t53426 = t53250*t12205;
  t53431 = t32332*t12670;
  t53885 = -1.*t309*t3916*t33649;
  t53958 = t29451*t4358;
  t53968 = t33649*t4333;
  t54065 = t309*t3916*t33649;
  t54251 = -1.*t33649*t4411;
  t54255 = -1.*t29451*t4428;
  t54687 = -1.*t29451*t4358;
  t54690 = -1.*t33649*t4333;
  t54789 = t33649*t4411;
  t54798 = t29451*t4428;
  t56295 = -1.*t3916*t302*t31428;
  t56297 = t3425 + t3444 + t3452 + t56295 + t53914 + t3459;
  t56412 = t2815*t3463;
  t56413 = t31428*t4703;
  t56415 = t56412 + t56413 + t54025;
  t56513 = t3916*t302*t31428;
  t56523 = t4089 + t4096 + t4118 + t56513 + t54222 + t4191;
  t56538 = -3.e-6*t3463*t3067;
  t56547 = -1.*t31428*t4755;
  t56593 = t56538 + t54643 + t56547;
  t56881 = -1.*t31428*t4703;
  t56885 = t3700 + t56881 + t54754;
  t56983 = t31428*t4755;
  t56994 = t3518 + t54816 + t56983;
  t55798 = t309*t3916*t53281;
  t55826 = -1.*t53281*t4411;
  t55827 = -1.*t29451*t5426;
  t55887 = t53281*t4411;
  t55900 = t29451*t5426;
  t55933 = -1.*t29451*t6164;
  t55935 = -1.*t53281*t4333;
  t55972 = -1.*t309*t3916*t53281;
  t56024 = t29451*t6164;
  t56051 = t53281*t4333;
  p_output1[0]=var2[11]*(-0.5*(0.0013*t6668 + 0.043*t3894*t6680 + 0.043*t4324*t6722 + 0.043*t4398*t6769)*var2[4] - 0.5*(-0.0013*t288*t309*t4466 + 0.043*t288*t3894*t4593 + 0.043*t288*t4324*t4720 + 0.043*t288*t4398*t4765)*var2[5] - 0.5*(0.0013*t354 + 0.043*t3894*t3962 + 0.043*t4324*t4376 + 0.043*t4398*t4432)*var2[11] - 0.5*(0.043*t5132*t5185 + 0.043*t5265*t5306 + 0.043*t4398*t5944 + 0.043*t4324*t6352 + 0.043*t6387*t6465)*var2[13]);
  p_output1[1]=var2[11]*(-0.5*(0.0013*(-1.*t309*t4466*t6990 - 1.*t6668*t7096) + 0.043*t3894*(-1.*t12180*t6990 - 1.*t6680*t7096) + 0.043*t4324*(-1.*t12205*t6990 - 1.*t6722*t7096) + 0.043*t4398*(-1.*t12339*t6990 - 1.*t6769*t7096))*var2[3] - 0.5*(-0.0013*t6990*t8293 - 0.043*t3894*t6990*t8398 - 0.043*t4324*t6990*t8404 - 0.043*t4398*t6990*t8853)*var2[4] - 0.5*(0.0013*(-1.*t309*t315*t4466*t6990 + t301*t309*t7096) + 0.043*t3894*(t315*t4593*t6990 + t5153*t7096) + 0.043*t4324*(t315*t4720*t6990 + t5294*t7096) + 0.043*t4398*(t315*t4765*t6990 + t6439*t7096))*var2[5] - 0.5*(0.043*t3894*(-1.*t6990*t7093 + t309*t3916*t4466*t7096) + 0.0013*(-1.*t302*t4466*t7096 - 1.*t6990*t7186) + 0.043*t4398*(t4411*t4466*t7096 - 1.*t6990*t7232) + 0.043*t4324*(t4333*t4466*t7096 - 1.*t6990*t7464))*var2[11] - 0.5*(0.043*t12488*t5132 + 0.043*t12563*t5265 + 0.043*t12827*t6387 + 0.043*t4398*(-1.*t12605*t6990 + t12590*t7096) + 0.043*t4324*(-1.*t12802*t6990 + t12670*t7096))*var2[13]);
  p_output1[2]=var2[11]*(-0.5*(0.043*t12488*t3894 + 0.043*t12563*t4324 + 0.043*t12827*t4398 + 0.0013*(-1.*t6668*t6990 + t309*t4466*t7096))*var2[3] - 0.5*(0.0013*t7096*t8293 + 0.043*t3894*t7096*t8398 + 0.043*t4324*t7096*t8404 + 0.043*t4398*t7096*t8853)*var2[4] - 0.5*(0.0013*(t301*t309*t6990 + t309*t315*t4466*t7096) + 0.043*t3894*(t5153*t6990 - 1.*t315*t4593*t7096) + 0.043*t4324*(t5294*t6990 - 1.*t315*t4720*t7096) + 0.043*t4398*(t6439*t6990 - 1.*t315*t4765*t7096))*var2[5] - 0.5*(0.043*t3894*(t309*t3916*t4466*t6990 + t7093*t7096) + 0.0013*(-1.*t302*t4466*t6990 + t7096*t7186) + 0.043*t4398*(t4411*t4466*t6990 + t7096*t7232) + 0.043*t4324*(t4333*t4466*t6990 + t7096*t7464))*var2[11] - 0.5*(0.043*t4398*(t12590*t6990 + t12605*t7096) + 0.043*t4324*(t12670*t6990 + t12802*t7096) + 0.043*t5132*(t12180*t6990 + t6680*t7096) + 0.043*t5265*(t12205*t6990 + t6722*t7096) + 0.043*t6387*(t12339*t6990 + t6769*t7096))*var2[13]);
  p_output1[3]=var2[11]*(-0.5*(0.000046*t315*t4466 + 0.0013*(t23020*t23297 + t315*t4466*t51779 - 1.*t288*t4466*(t19783*t22948 + t22300*t23297 + t22948*t354 + t23297*t52078) + t19783*(-1.*t22300*t315*t4466 - 1.*t315*t4466*t52078)) - 0.000271*t6680 + 0.000271*t2815*t6722 + 6.e-12*t3067*t6769 + 0.043*t4398*(t51033*t6680 + t50923*t6722 + t5306*(-1.*t49817*t5185 - 1.*t49201*t6680 - 1.*t52204*t6680 - 1.*t49817*t8398) + t5185*(t49817*t5306 + t49201*t6722 + t52204*t6722 + t49817*t8404)) + 0.043*t4324*(t51338*t6680 + t51280*t6769 + t6465*(t49817*t5185 + t49201*t6680 + t52204*t6680 + t49817*t8398) + t5185*(-1.*t49817*t6465 - 1.*t49201*t6769 - 1.*t52204*t6769 - 1.*t49817*t8853)) + 0.043*t3894*(t51492*t6722 + t51402*t6769 + t6465*(-1.*t49817*t5306 - 1.*t49201*t6722 - 1.*t52204*t6722 - 1.*t49817*t8404) + t5306*(t49817*t6465 + t49201*t6769 + t52204*t6769 + t49817*t8853)))*var2[4] - 0.5*(-0.000046*t288*t301 - 0.000271*t288*t4593 + 0.000271*t2815*t288*t4720 + 6.e-12*t288*t3067*t4765 + 0.0013*(-1.*t23020*t288*t302*t4466 - 1.*t288*t4466*(t22123*t302*t4466 - 1.*t22300*t288*t302*t4466 + t22948*t302*t315*t4466 + t19783*t288*t51643 - 1.*t23297*t315*t51643 + t51654) + t19783*(-1.*t22123*t301 + t22300*t288*t301 - 1.*t22948*t301*t315 + Power(t288,2)*t4466*t51643 + Power(t315,2)*t4466*t51643 + t51735) - 1.*t288*t301*t51779) + 0.043*t4398*(t288*t4720*t50923 + t288*t4593*t51033 + t5306*(-1.*t288*t4593*t49201 + t315*t4593*t49817 + t51812 + t51818 - 1.*t288*t51825*t5185 + t315*t51825*t6680) + t5185*(t288*t4720*t49201 - 1.*t315*t4720*t49817 + t51844 + t51846 + t288*t51825*t5306 - 1.*t315*t51825*t6722)) + 0.043*t3894*(t288*t4765*t51402 + t288*t4720*t51492 + t6465*(-1.*t288*t4720*t49201 + t315*t4720*t49817 + t51947 + t51948 - 1.*t288*t51825*t5306 + t315*t51825*t6722) + t5306*(t288*t4765*t49201 - 1.*t315*t4765*t49817 + t51973 + t51974 + t288*t51825*t6465 - 1.*t315*t51825*t6769)) + 0.043*t4324*(t288*t4765*t51280 + t288*t4593*t51338 + t6465*(t288*t4593*t49201 - 1.*t315*t4593*t49817 + t288*t51825*t5185 + t51881 + t51882 - 1.*t315*t51825*t6680) + t5185*(-1.*t288*t4765*t49201 + t315*t4765*t49817 + t51920 + t51921 - 1.*t288*t51825*t6465 + t315*t51825*t6769)))*var2[5] - 0.5*(-0.000271*t3962 + 0.000271*t2815*t4376 + 6.e-12*t3067*t4432 + 0.0013*(t19990*t23020 + t19783*(t19920*t288*t4466 - 0.05*t301*t309*t4466 - 1.*t19901*t315*t4466) - 1.*t288*t4466*(t19783*t19920 + t19990*t22300 + t19901*t23297 + t23460 + t23471 + t22948*t6668)) + 0.043*t4324*(t4432*t51280 + t3962*t51338 + t6465*(t3962*t49201 + t51174 + t51175 + t33678*t5185 + t34358*t6680 + t49817*t7093) + t5185*(-1.*t4432*t49201 + t51293 + t51298 - 1.*t33678*t6465 - 1.*t34358*t6769 - 1.*t49817*t7232)) + 0.043*t3894*(t4432*t51402 + t4376*t51492 + t5306*(t4432*t49201 + t51431 + t51433 + t33678*t6465 + t34358*t6769 + t49817*t7232) + t6465*(-1.*t4376*t49201 + t51351 + t51356 - 1.*t33678*t5306 - 1.*t34358*t6722 - 1.*t49817*t7464)) + 0.043*t4398*(t4376*t50923 + t3962*t51033 + t5306*(t30365 + t32653 - 1.*t3962*t49201 - 1.*t33678*t5185 - 1.*t34358*t6680 - 1.*t49817*t7093) + t5185*(t4376*t49201 + t50353 + t50442 + t33678*t5306 + t34358*t6722 + t49817*t7464)))*var2[11] - 0.5*(8.13000000007317e-10*t3067*t5306 + 6.e-12*t3067*t5944 + 0.000271*t2815*t6352 + 0.043*(t51033*t5185 + t50923*t5306)*t6387 + 0.043*t5265*(t51338*t5185 + t51280*t6465) + 0.043*t5132*(t51492*t5306 + t51402*t6465) + 0.043*t4398*(t50923*t6352 + t5306*(t53262 - 1.*t5185*t53308 - 1.*t53356*t6680) + t5185*(t12802*t49817 + t5306*t53308 + t53426 + t53431 + t49201*t6352 + t53356*t6722)) + 0.043*t4324*(t51280*t5944 + t6465*(t5185*t53308 + t53565 + t53356*t6680) + t5185*(-1.*t12605*t49817 + t53603 + t53616 - 1.*t49201*t5944 - 1.*t53308*t6465 - 1.*t53356*t6769)) + 0.043*t3894*(t51402*t5944 + t51492*t6352 + t6465*(-1.*t12802*t49817 - 1.*t5306*t53308 + t53641 + t53643 - 1.*t49201*t6352 - 1.*t53356*t6722) + t5306*(t12605*t49817 + t53680 + t53701 + t49201*t5944 + t53308*t6465 + t53356*t6769)) + 6.e-12*t6465*t793)*var2[13]);
  p_output1[4]=var2[11]*(-0.5*(-0.000046*t4466 - 0.000271*t5153 + 0.000271*t2815*t5294 + 0.0013*(t301*(t301*t302*t51643 + t51654) + t302*t4466*(t4466*t51643 + t51735) - 1.*t4466*(t22123*t301*t302 + 0.05*Power(t309,2) + t51765) + t301*t302*t53805) + 0.043*t4398*(t12205*(-1.*t4593*t49063 + t51812 + t51818 - 1.*t5153*t51825) + t12180*(t4720*t49063 + t51844 + t51846 + t51825*t5294) + t5294*t53924 + t5153*t54041) + 6.e-12*t3067*t6439 + 0.043*t4324*(t12339*(t4593*t49063 + t5153*t51825 + t51881 + t51882) + t5153*t54654 + t54246*t6439 + t12180*(-1.*t4765*t49063 + t51920 + t51921 - 1.*t51825*t6439)) + 0.043*t3894*(t12339*(-1.*t4720*t49063 + t51947 + t51948 - 1.*t51825*t5294) + t5294*t54868 + t54774*t6439 + t12205*(t4765*t49063 + t51973 + t51974 + t51825*t6439)))*var2[5] - 0.5*(-0.000271*t309*t3916*t4466 + 0.000271*t2815*t4333*t4466 + 6.e-12*t3067*t4411*t4466 + 0.0013*(t301*(t23460 + t23471 + t22123*t301*t309 - 0.1*t302*t309 + 0.05*Power(t301,2)*t302*t309) + t309*t4466*t53805) + 0.043*t4398*(t12205*(t30365 + t32653 + t29451*t302*t3916 - 1.*t301*t309*t3916*t49063 - 1.*t29451*t301*t5153 + t53885) + t4333*t4466*t53924 + t12180*(t301*t4333*t49063 + t50353 + t50442 + t29451*t301*t5294 + t53958 + t53968) + t309*t3916*t4466*t54041) + 0.043*t4324*(t12339*(-1.*t29451*t302*t3916 + t301*t309*t3916*t49063 + t51174 + t51175 + t29451*t301*t5153 + t54065) + t4411*t4466*t54246 + t309*t3916*t4466*t54654 + t12180*(-1.*t301*t4411*t49063 + t51293 + t51298 + t54251 + t54255 - 1.*t29451*t301*t6439)) + 0.043*t3894*(t12339*(-1.*t301*t4333*t49063 + t51351 + t51356 - 1.*t29451*t301*t5294 + t54687 + t54690) + t4411*t4466*t54774 + t4333*t4466*t54868 + t12205*(t301*t4411*t49063 + t51431 + t51433 + t54789 + t54798 + t29451*t301*t6439)))*var2[11] - 0.5*(0.000271*t12670*t2815 + 8.13000000007317e-10*t12205*t3067 + 6.e-12*t12590*t3067 + 0.043*t5265*(t12339*t54246 + t12180*t54654) + 0.043*t5132*(t12339*t54774 + t12205*t54868) + 0.043*t4398*(t12670*t53924 + t12205*(t53262 - 1.*t5153*t53302 + t55972) + t12180*(t5294*t53302 + t53426 + t53431 + t56024 + t56051 + t49063*t6337)) + 0.043*(t12205*t53924 + t12180*t54041)*t6387 + 0.043*t4324*(t12590*t54246 + t12339*(t5153*t53302 + t53565 + t55798) + t12180*(t53603 + t53616 + t55826 + t55827 - 1.*t49063*t5671 - 1.*t53302*t6439)) + 0.043*t3894*(t12590*t54774 + t12670*t54868 + t12339*(-1.*t5294*t53302 + t53641 + t53643 + t55933 + t55935 - 1.*t49063*t6337) + t12205*(t53680 + t53701 + t55887 + t55900 + t49063*t5671 + t53302*t6439)) + 6.e-12*t12339*t793)*var2[13]);
  p_output1[5]=var2[11]*(-0.5*(0.00013*t302 + 0.000271*t302*t3916 + 0.000271*t2815*t4358 + 6.e-12*t3067*t4428 + 0.043*t4398*(t4333*(-1.*t309*t31428*t3916 + t53885) + t309*t3916*(t31428*t4333 + t29451*t4703 + t53958 + t53968) + t4358*t56297 - 1.*t302*t3916*t56415) + 0.043*t4324*(t4411*(t309*t31428*t3916 + t54065) + t309*t3916*(-1.*t31428*t4411 - 1.*t29451*t4755 + t54251 + t54255) + t4428*t56523 - 1.*t302*t3916*t56593) + 0.043*t3894*(t4411*(-1.*t31428*t4333 - 1.*t29451*t4703 + t54687 + t54690) + t4333*(t31428*t4411 + t29451*t4755 + t54789 + t54798) + t4428*t56885 + t4358*t56994))*var2[11] - 0.5*(8.13000000007317e-10*t3067*t4333 + 6.e-12*t3067*t5426 + 0.043*t5265*(t4411*t56523 + t309*t3916*t56593) + 0.043*t5132*(t4411*t56885 + t4333*t56994) + 0.000271*t2815*t6164 + 0.043*t3894*(t4333*(t4946 + t5005 + t4755*t53243 + t31428*t5455 + t55887 + t55900) + t5426*t56885 + t56994*t6164 + t4411*(t4875 + t4918 - 1.*t4703*t53243 + t55933 + t55935 - 1.*t31428*t6210)) + 0.043*t4398*(t4333*(4.e-7 + t4865 + t4871 - 1.*t302*t3916*t53243 + t55972) + t56297*t6164 + t309*t3916*(3.000000000027e-6*t3067*t3463 + t2815*t4874 + t4703*t53243 + t56024 + t56051 + t31428*t6210)) + 0.043*(t4333*t56297 + t309*t3916*t56415)*t6387 + 6.e-12*t4411*t793 + 0.043*t4324*(t4411*(-4.e-7 + t5211 + t5228 + t302*t3916*t53243 + t55798) + t5426*t56523 + t309*t3916*(-3.e-6*t3067*t4874 - 1.*t4755*t53243 - 1.*t31428*t5455 + t55826 + t55827 - 3.e-6*t3463*t793)))*var2[13]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=-0.5*(1.62600000001463e-9*t2815*t3067 + 0.086*t3894*t5132 + 0.086*t4324*t5265 + 0.086*t4398*t6387 + 3.6e-17*t3067*t793)*var2[11]*var2[13];
  p_output1[12]=0;
  p_output1[13]=-0.5*(-1.72e-8*t5132 - 5.16e-14*t5265 + 0.0042999871*t6387)*var2[11]*var2[13];
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec12_minitaur.hh"

namespace FrontStance
{

void Ce1_vec12_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
