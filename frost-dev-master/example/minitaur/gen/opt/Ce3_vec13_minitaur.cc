/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:13:15 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t19464;
  double t22021;
  double t22280;
  double t41686;
  double t41720;
  double t48677;
  double t48794;
  double t49201;
  double t45282;
  double t13179;
  double t41653;
  double t47146;
  double t47444;
  double t47460;
  double t50449;
  double t50938;
  double t51194;
  double t51350;
  double t51472;
  double t51972;
  double t52976;
  double t53073;
  double t53242;
  double t53273;
  double t53448;
  double t12809;
  double t53822;
  double t54060;
  double t54790;
  double t54802;
  double t48569;
  double t52226;
  double t52247;
  double t52351;
  double t53633;
  double t53637;
  double t54829;
  double t8312;
  double t56507;
  double t56927;
  double t57065;
  double t55852;
  double t55862;
  double t55879;
  double t55914;
  double t56212;
  double t57236;
  double t57243;
  double t57244;
  double t57248;
  double t56759;
  double t56995;
  double t57144;
  double t57161;
  double t58413;
  double t58882;
  double t59462;
  double t59663;
  double t58352;
  double t59670;
  double t59697;
  double t60777;
  double t60954;
  double t61019;
  double t61029;
  double t61133;
  double t61322;
  double t61455;
  double t61725;
  double t58366;
  double t60928;
  double t61041;
  double t61060;
  double t53732;
  double t55552;
  double t55712;
  double t55931;
  double t55992;
  double t56000;
  double t56010;
  double t56025;
  double t56289;
  double t56301;
  double t56321;
  double t56373;
  double t56375;
  double t57193;
  double t57249;
  double t57250;
  double t57258;
  double t57260;
  double t57265;
  double t57335;
  double t57358;
  double t57368;
  double t57381;
  double t57423;
  double t57431;
  double t57435;
  double t61107;
  double t61814;
  double t61907;
  double t62009;
  double t62066;
  double t62067;
  double t62073;
  double t62080;
  double t62087;
  double t62089;
  double t62091;
  double t62111;
  double t62112;
  double t62299;
  double t62312;
  double t62364;
  double t62373;
  double t62375;
  double t62377;
  double t62411;
  double t62427;
  double t62428;
  double t62536;
  double t62523;
  double t62548;
  double t62524;
  double t62525;
  double t62529;
  double t62531;
  double t62532;
  double t62535;
  double t62537;
  double t62538;
  double t62541;
  double t62545;
  double t62547;
  double t62550;
  double t62552;
  double t62553;
  double t62568;
  double t62571;
  double t62573;
  double t62574;
  double t62584;
  double t62586;
  double t62522;
  double t62539;
  double t62561;
  double t62589;
  double t62591;
  double t62598;
  double t62601;
  double t62605;
  double t62607;
  double t62609;
  double t62611;
  double t62614;
  double t62625;
  double t62628;
  double t62630;
  double t62639;
  double t62655;
  double t62664;
  double t62666;
  double t62667;
  double t62747;
  double t62749;
  double t62753;
  double t62777;
  double t62792;
  double t62803;
  double t62696;
  double t62698;
  double t62724;
  double t62592;
  double t62677;
  double t62681;
  double t62514;
  double t62517;
  double t62518;
  double t62829;
  double t62832;
  double t62839;
  double t62954;
  double t62955;
  double t62959;
  double t63102;
  double t63114;
  double t63117;
  double t63125;
  double t63130;
  double t63133;
  double t63137;
  double t63138;
  double t63141;
  double t62843;
  double t63753;
  double t63803;
  double t63822;
  double t62898;
  double t62997;
  double t63024;
  double t63055;
  double t63077;
  double t63828;
  double t63847;
  double t63908;
  double t63938;
  double t62848;
  double t62859;
  double t62863;
  double t62904;
  double t62908;
  double t62923;
  double t64017;
  double t64038;
  double t62998;
  double t63004;
  double t63007;
  double t64118;
  double t64205;
  double t63027;
  double t63031;
  double t63032;
  double t64233;
  double t64244;
  double t63058;
  double t63059;
  double t63062;
  double t64321;
  double t64337;
  double t63078;
  double t63080;
  double t63082;
  double t63654;
  double t67132;
  double t67133;
  double t67135;
  double t67506;
  double t67620;
  double t67621;
  double t67626;
  double t67631;
  double t67635;
  double t67636;
  double t67637;
  double t67640;
  double t67641;
  double t67651;
  double t67652;
  double t67659;
  double t67660;
  double t67181;
  double t67211;
  double t67496;
  double t63960;
  double t66998;
  double t67000;
  double t67019;
  double t63977;
  double t67835;
  double t67918;
  double t67922;
  double t67925;
  double t67927;
  double t67930;
  double t67931;
  double t67932;
  double t64052;
  double t68235;
  double t68276;
  double t68388;
  double t68548;
  double t68604;
  double t68643;
  double t68687;
  double t68688;
  double t64249;
  double t64271;
  double t69124;
  double t69125;
  double t69126;
  double t69128;
  double t69131;
  double t69133;
  double t69147;
  double t69153;
  double t69541;
  double t69542;
  double t69544;
  double t69564;
  double t69589;
  double t69718;
  double t69765;
  double t69772;
  double t69775;
  double t69861;
  double t69893;
  double t69966;
  double t69990;
  double t70021;
  double t70042;
  double t70069;
  double t70070;
  double t70071;
  double t70073;
  double t70074;
  double t70076;
  double t70108;
  double t70110;
  double t70112;
  double t70118;
  double t70120;
  double t70121;
  double t63661;
  double t63681;
  double t67504;
  double t67703;
  double t68165;
  double t68208;
  double t70206;
  double t70228;
  double t70238;
  double t70240;
  double t70241;
  double t70242;
  double t63966;
  double t63968;
  double t63985;
  double t63998;
  double t69096;
  double t69099;
  double t64054;
  double t64060;
  double t69121;
  double t69188;
  double t69311;
  double t69331;
  double t64258;
  double t64262;
  double t64274;
  double t64279;
  double t69509;
  double t69516;
  double t69763;
  double t69776;
  double t69785;
  double t69563;
  double t69759;
  double t69760;
  double t70239;
  double t70244;
  double t69540;
  double t69546;
  double t69555;
  double t70273;
  double t70977;
  double t72834;
  double t72922;
  double t72927;
  double t72929;
  double t72930;
  double t72931;
  double t71856;
  double t71938;
  double t72233;
  double t72264;
  double t72283;
  double t72317;
  double t72396;
  double t72397;
  double t73315;
  double t73312;
  double t73552;
  double t73563;
  double t73435;
  double t73458;
  double t73313;
  double t73314;
  double t67138;
  double t67139;
  double t67140;
  double t73606;
  double t73614;
  double t73618;
  double t68768;
  double t68783;
  double t68784;
  double t73668;
  double t73676;
  double t73669;
  double t73670;
  double t73671;
  double t73672;
  double t73673;
  double t73674;
  double t73679;
  double t73698;
  double t73700;
  double t73720;
  double t73820;
  double t73824;
  double t73825;
  double t73827;
  double t73828;
  double t73857;
  double t73612;
  double t73613;
  double t73615;
  double t73616;
  double t73620;
  double t73629;
  double t73630;
  double t73675;
  double t73724;
  double t73858;
  double t73859;
  double t73871;
  double t73875;
  double t73876;
  double t73881;
  double t73883;
  double t73884;
  double t73888;
  double t73891;
  double t73643;
  double t73644;
  double t73655;
  double t73659;
  double t73660;
  double t73661;
  double t73663;
  double t73470;
  double t73517;
  double t73550;
  double t73556;
  double t73562;
  double t73565;
  double t73567;
  double t73587;
  double t73596;
  double t73600;
  double t73602;
  double t73604;
  double t68888;
  double t68934;
  double t69047;
  double t73941;
  double t73942;
  double t73943;
  double t73944;
  double t73947;
  double t73948;
  double t73949;
  double t73950;
  double t69106;
  double t69107;
  double t69109;
  double t69471;
  double t69472;
  double t69480;
  double t73900;
  double t73901;
  double t73902;
  double t73903;
  double t73905;
  double t73909;
  double t73910;
  double t73911;
  double t74027;
  double t74028;
  double t74029;
  double t74030;
  double t74032;
  double t74033;
  double t74034;
  double t74037;
  double t69490;
  double t69498;
  double t69500;
  double t74312;
  double t74313;
  double t74314;
  double t74315;
  double t74318;
  double t74322;
  double t74323;
  double t74324;
  double t74325;
  double t74326;
  double t74330;
  double t74334;
  double t74335;
  double t74336;
  double t74337;
  double t74342;
  double t74343;
  double t74345;
  double t74346;
  double t74347;
  double t74351;
  double t74352;
  double t74368;
  double t74369;
  double t74373;
  double t74374;
  double t74376;
  double t74377;
  double t74378;
  double t74379;
  double t74380;
  double t74381;
  double t74470;
  double t74475;
  double t74476;
  double t74477;
  double t74478;
  double t74483;
  double t74484;
  double t74485;
  double t74486;
  double t74487;
  double t74491;
  double t74492;
  double t74506;
  double t74507;
  double t74508;
  double t74509;
  double t74513;
  double t74514;
  double t74515;
  double t74517;
  double t74518;
  double t74519;
  double t74520;
  double t74522;
  double t74527;
  double t74528;
  double t74529;
  double t74531;
  double t74535;
  double t74536;
  double t74537;
  double t74538;
  double t74539;
  double t74540;
  double t74594;
  double t74595;
  double t74596;
  double t74601;
  double t74602;
  double t74603;
  double t74610;
  double t74611;
  double t74612;
  double t74634;
  double t74635;
  double t74637;
  double t74639;
  double t74641;
  double t74642;
  double t74648;
  double t74649;
  double t74650;
  double t74661;
  double t74663;
  double t74664;
  double t74674;
  double t74676;
  double t74677;
  double t74679;
  double t74680;
  double t74686;
  double t73860;
  double t73899;
  double t73921;
  double t73940;
  double t74728;
  double t74845;
  double t74846;
  double t74849;
  double t74850;
  double t74852;
  double t74018;
  double t74021;
  double t74026;
  double t74051;
  double t74080;
  double t74083;
  double t74094;
  double t74106;
  double t74593;
  double t74597;
  double t74598;
  double t74600;
  double t74605;
  double t74606;
  double t74609;
  double t74616;
  double t74622;
  double t74848;
  double t74854;
  double t74858;
  double t74860;
  double t74915;
  double t74918;
  double t74919;
  double t74942;
  double t74943;
  double t74944;
  double t74869;
  double t74875;
  double t74880;
  double t74884;
  double t74892;
  double t74896;
  double t74901;
  double t74904;
  t19464 = Cos(var1[12]);
  t22021 = -1.*t19464;
  t22280 = 1. + t22021;
  t41686 = 3.e-6*t22280;
  t41720 = Sin(var1[12]);
  t48677 = Cos(var1[10]);
  t48794 = -1.*t48677;
  t49201 = 1. + t48794;
  t45282 = 3.e-6*t41720;
  t13179 = Sin(var1[10]);
  t41653 = 1.000000000009*t22280;
  t47146 = t41686 + t45282;
  t47444 = 3.e-6*t47146;
  t47460 = -1. + t41653 + t47444;
  t50449 = -9.e-12*t22280;
  t50938 = -3.e-6*t41720;
  t51194 = t41686 + t50938;
  t51350 = 3.e-6*t51194;
  t51472 = -1.*t41720;
  t51972 = t50449 + t51350 + t51472;
  t52976 = -1.8e-11*t22280;
  t53073 = 1. + t52976;
  t53242 = 3.e-6*t53073;
  t53273 = -3.e-6*t22280;
  t53448 = t53242 + t53273 + t45282;
  t12809 = Cos(var1[5]);
  t53822 = -1.*t13179*t47460;
  t54060 = t48677*t51972;
  t54790 = 3.e-6*t49201*t53448;
  t54802 = t53822 + t54060 + t54790;
  t48569 = 3.e-6*t13179*t47460;
  t52226 = 3.e-6*t49201*t51972;
  t52247 = -9.e-12*t49201;
  t52351 = 1. + t52247;
  t53633 = t52351*t53448;
  t53637 = t48569 + t52226 + t53633;
  t54829 = Sin(var1[5]);
  t8312 = Sin(var1[3]);
  t56507 = -1. + t41653 + t51350;
  t56927 = t53242 + t53273 + t50938;
  t57065 = t50449 + t47444 + t41720;
  t55852 = Cos(var1[3]);
  t55862 = Cos(var1[4]);
  t55879 = -1.000000000009*t49201;
  t55914 = 1. + t55879;
  t56212 = Sin(var1[4]);
  t57236 = t48677*t56507;
  t57243 = 3.e-6*t49201*t56927;
  t57244 = -1.*t13179*t57065;
  t57248 = t57236 + t57243 + t57244;
  t56759 = 3.e-6*t49201*t56507;
  t56995 = t52351*t56927;
  t57144 = 3.e-6*t13179*t57065;
  t57161 = t56759 + t56995 + t57144;
  t58413 = -1.000000000009*t22280;
  t58882 = 1. + t58413;
  t59462 = 3.e-6*t58882;
  t59663 = 9.e-12*t22280;
  t58352 = 1. + t52976 + t51350 + t47444;
  t59670 = t59663 + t51472;
  t59697 = 3.e-6*t59670;
  t60777 = t59462 + t41686 + t59697 + t45282;
  t60954 = t59663 + t41720;
  t61019 = 3.e-6*t60954;
  t61029 = t59462 + t41686 + t50938 + t61019;
  t61133 = 3.e-6*t49201*t58352;
  t61322 = -1.*t13179*t60777;
  t61455 = t48677*t61029;
  t61725 = t61133 + t61322 + t61455;
  t58366 = t52351*t58352;
  t60928 = 3.e-6*t13179*t60777;
  t61041 = 3.e-6*t49201*t61029;
  t61060 = t58366 + t60928 + t61041;
  t53732 = t12809*t53637;
  t55552 = t54802*t54829;
  t55712 = t53732 + t55552;
  t55931 = t55914*t47460;
  t55992 = t13179*t51972;
  t56000 = -3.e-6*t13179*t53448;
  t56010 = t55931 + t55992 + t56000;
  t56025 = t55862*t56010;
  t56289 = t12809*t54802;
  t56301 = -1.*t53637*t54829;
  t56321 = t56289 + t56301;
  t56373 = -1.*t56212*t56321;
  t56375 = t56025 + t56373;
  t57193 = t12809*t57161;
  t57249 = t57248*t54829;
  t57250 = t57193 + t57249;
  t57258 = t13179*t56507;
  t57260 = -3.e-6*t13179*t56927;
  t57265 = t55914*t57065;
  t57335 = t57258 + t57260 + t57265;
  t57358 = t55862*t57335;
  t57368 = t12809*t57248;
  t57381 = -1.*t57161*t54829;
  t57423 = t57368 + t57381;
  t57431 = -1.*t56212*t57423;
  t57435 = t57358 + t57431;
  t61107 = t12809*t61060;
  t61814 = t61725*t54829;
  t61907 = t61107 + t61814;
  t62009 = -3.e-6*t13179*t58352;
  t62066 = t55914*t60777;
  t62067 = t13179*t61029;
  t62073 = t62009 + t62066 + t62067;
  t62080 = t55862*t62073;
  t62087 = t12809*t61725;
  t62089 = -1.*t61060*t54829;
  t62091 = t62087 + t62089;
  t62111 = -1.*t56212*t62091;
  t62112 = t62080 + t62111;
  t62299 = -1.*t56010*t56212;
  t62312 = -1.*t55862*t56321;
  t62364 = t62299 + t62312;
  t62373 = -1.*t57335*t56212;
  t62375 = -1.*t55862*t57423;
  t62377 = t62373 + t62375;
  t62411 = -1.*t62073*t56212;
  t62427 = -1.*t55862*t62091;
  t62428 = t62411 + t62427;
  t62536 = t53273 + t45282;
  t62523 = 3.e-13*var1[12];
  t62548 = t53273 + t50938;
  t62524 = -1. + t41653;
  t62525 = 0.2*t62524;
  t62529 = -0.2000000000048*t22280;
  t62531 = t50449 + t51472;
  t62532 = 0.100000000003*t62531;
  t62535 = 0.1*t51194;
  t62537 = 3.e-7*t62536;
  t62538 = t62523 + t62525 + t62529 + t62532 + t62535 + t62537;
  t62541 = 1.e-7*var1[12];
  t62545 = 0.1*t53073;
  t62547 = 5.4e-18*t22280;
  t62550 = -3.e-12*t62548;
  t62552 = 0.100000000003*t62536;
  t62553 = t62541 + t62545 + t62547 + t62550 + t62552;
  t62568 = 0.1000000000039*t22280;
  t62571 = 3.e-7*t62548;
  t62573 = 0.1*t47146;
  t62574 = t50449 + t41720;
  t62584 = -3.e-12*t62574;
  t62586 = t62523 + t62568 + t62571 + t62573 + t62584;
  t62522 = 0.2000000000018*t13179;
  t62539 = t13179*t62538;
  t62561 = -3.e-6*t13179*t62553;
  t62589 = t55914*t62586;
  t62591 = t62522 + t62539 + t62561 + t62589;
  t62598 = -1.8e-12*t49201;
  t62601 = -1. + t48677;
  t62605 = 0.2*t62601;
  t62607 = t48677*t62538;
  t62609 = 3.e-6*t49201*t62553;
  t62611 = -1.*t13179*t62586;
  t62614 = t62598 + t62605 + t62607 + t62609 + t62611;
  t62625 = t12809*t62614;
  t62628 = 6.000000000054e-7*t49201;
  t62630 = 3.e-6*t49201*t62538;
  t62639 = t52351*t62553;
  t62655 = 3.e-6*t13179*t62586;
  t62664 = t62628 + t62630 + t62639 + t62655;
  t62666 = -1.*t62664*t54829;
  t62667 = t62625 + t62666;
  t62747 = t55862*t62591;
  t62749 = -1.*t56212*t62667;
  t62753 = t62747 + t62749;
  t62777 = t56010*t56212;
  t62792 = t55862*t56321;
  t62803 = t62777 + t62792;
  t62696 = t62591*t56212;
  t62698 = t55862*t62667;
  t62724 = t62696 + t62698;
  t62592 = -1.*t62591*t56212;
  t62677 = -1.*t55862*t62667;
  t62681 = t62592 + t62677;
  t62514 = t57335*t56212;
  t62517 = t55862*t57423;
  t62518 = t62514 + t62517;
  t62829 = t12809*t62664;
  t62832 = t62614*t54829;
  t62839 = t62829 + t62832;
  t62954 = t62073*t56212;
  t62955 = t55862*t62091;
  t62959 = t62954 + t62955;
  t63102 = -1.*t12809*t53637;
  t63114 = -1.*t54802*t54829;
  t63117 = t63102 + t63114;
  t63125 = -1.*t12809*t57161;
  t63130 = -1.*t57248*t54829;
  t63133 = t63125 + t63130;
  t63137 = -1.*t12809*t61060;
  t63138 = -1.*t61725*t54829;
  t63141 = t63137 + t63138;
  t62843 = -1.*t55712*t62839;
  t63753 = -1.*t12809*t62664;
  t63803 = -1.*t62614*t54829;
  t63822 = t63753 + t63803;
  t62898 = t57250*t62839;
  t62997 = t55712*t62839;
  t63024 = -1.*t62839*t61907;
  t63055 = -1.*t57250*t62839;
  t63077 = t62839*t61907;
  t63828 = -1.*t56321*t62839;
  t63847 = -1.*t55712*t62667;
  t63908 = t57423*t62839;
  t63938 = t57250*t62667;
  t62848 = -1.*t62803*t62724;
  t62859 = -1.*t56375*t62753;
  t62863 = t62843 + t62848 + t62859;
  t62904 = t62518*t62724;
  t62908 = t57435*t62753;
  t62923 = t62898 + t62904 + t62908;
  t64017 = t56321*t62839;
  t64038 = t55712*t62667;
  t62998 = t62803*t62724;
  t63004 = t56375*t62753;
  t63007 = t62997 + t62998 + t63004;
  t64118 = -1.*t62839*t62091;
  t64205 = -1.*t62667*t61907;
  t63027 = -1.*t62724*t62959;
  t63031 = -1.*t62753*t62112;
  t63032 = t63024 + t63027 + t63031;
  t64233 = -1.*t57423*t62839;
  t64244 = -1.*t57250*t62667;
  t63058 = -1.*t62518*t62724;
  t63059 = -1.*t57435*t62753;
  t63062 = t63055 + t63058 + t63059;
  t64321 = t62839*t62091;
  t64337 = t62667*t61907;
  t63078 = t62724*t62959;
  t63080 = t62753*t62112;
  t63082 = t63077 + t63078 + t63080;
  t63654 = -1.*t56010*t62591;
  t67132 = -3.e-6*t48677*t56927;
  t67133 = -1.000000000009*t13179*t57065;
  t67135 = t57236 + t67132 + t67133;
  t67506 = -0.2000000000018*t13179;
  t67620 = -1.*t13179*t62538;
  t67621 = 3.e-6*t13179*t62553;
  t67626 = -1.*t48677*t62586;
  t67631 = t67506 + t67620 + t67621 + t67626;
  t67635 = 6.000000000054e-7*t13179;
  t67636 = 3.e-6*t13179*t62538;
  t67637 = -9.e-12*t13179*t62553;
  t67640 = 3.e-6*t48677*t62586;
  t67641 = t67635 + t67636 + t67637 + t67640;
  t67651 = 0.2000000000018*t48677;
  t67652 = -3.e-6*t48677*t62553;
  t67659 = -1.000000000009*t13179*t62586;
  t67660 = t67651 + t62607 + t67652 + t67659;
  t67181 = -1.000000000009*t13179*t47460;
  t67211 = -3.e-6*t48677*t53448;
  t67496 = t67181 + t54060 + t67211;
  t63960 = t57335*t62591;
  t66998 = -3.e-6*t48677*t58352;
  t67000 = -1.000000000009*t13179*t60777;
  t67019 = t66998 + t67000 + t61455;
  t63977 = t56010*t62591;
  t67835 = -1.*t48677*t47460;
  t67918 = -1.*t13179*t51972;
  t67922 = 3.e-6*t13179*t53448;
  t67925 = t67835 + t67918 + t67922;
  t67927 = 3.e-6*t48677*t47460;
  t67930 = 3.e-6*t13179*t51972;
  t67931 = -9.e-12*t13179*t53448;
  t67932 = t67927 + t67930 + t67931;
  t64052 = -1.*t62591*t62073;
  t68235 = -1.*t13179*t56507;
  t68276 = 3.e-6*t13179*t56927;
  t68388 = -1.*t48677*t57065;
  t68548 = t68235 + t68276 + t68388;
  t68604 = 3.e-6*t13179*t56507;
  t68643 = -9.e-12*t13179*t56927;
  t68687 = 3.e-6*t48677*t57065;
  t68688 = t68604 + t68643 + t68687;
  t64249 = -1.*t57335*t62591;
  t64271 = t62591*t62073;
  t69124 = 3.e-6*t13179*t58352;
  t69125 = -1.*t48677*t60777;
  t69126 = -1.*t13179*t61029;
  t69128 = t69124 + t69125 + t69126;
  t69131 = -9.e-12*t13179*t58352;
  t69133 = 3.e-6*t48677*t60777;
  t69147 = 3.e-6*t13179*t61029;
  t69153 = t69131 + t69133 + t69147;
  t69541 = t12809*t67925;
  t69542 = -1.*t67932*t54829;
  t69544 = t69541 + t69542;
  t69564 = t12809*t68548;
  t69589 = -1.*t68688*t54829;
  t69718 = t69564 + t69589;
  t69765 = t12809*t69128;
  t69772 = -1.*t69153*t54829;
  t69775 = t69765 + t69772;
  t69861 = t12809*t67932;
  t69893 = t67925*t54829;
  t69966 = t69861 + t69893;
  t69990 = t55862*t67496;
  t70021 = -1.*t56212*t69544;
  t70042 = t69990 + t70021;
  t70069 = t12809*t68688;
  t70070 = t68548*t54829;
  t70071 = t70069 + t70070;
  t70073 = t55862*t67135;
  t70074 = -1.*t56212*t69718;
  t70076 = t70073 + t70074;
  t70108 = t12809*t69153;
  t70110 = t69128*t54829;
  t70112 = t70108 + t70110;
  t70118 = t55862*t67019;
  t70120 = -1.*t56212*t69775;
  t70121 = t70118 + t70120;
  t63661 = -1.*t56321*t62667;
  t63681 = t63654 + t62843 + t63661;
  t67504 = -1.*t67496*t62591;
  t67703 = -1.*t56010*t67660;
  t68165 = t67135*t62591;
  t68208 = t57335*t67660;
  t70206 = t12809*t67641;
  t70228 = t67631*t54829;
  t70238 = t70206 + t70228;
  t70240 = t12809*t67631;
  t70241 = -1.*t67641*t54829;
  t70242 = t70240 + t70241;
  t63966 = t57423*t62667;
  t63968 = t63960 + t62898 + t63966;
  t63985 = t56321*t62667;
  t63998 = t63977 + t62997 + t63985;
  t69096 = t67496*t62591;
  t69099 = t56010*t67660;
  t64054 = -1.*t62667*t62091;
  t64060 = t64052 + t64054 + t63024;
  t69121 = -1.*t62591*t67019;
  t69188 = -1.*t67660*t62073;
  t69311 = -1.*t67135*t62591;
  t69331 = -1.*t57335*t67660;
  t64258 = -1.*t57423*t62667;
  t64262 = t64249 + t63055 + t64258;
  t64274 = t62667*t62091;
  t64279 = t64271 + t64274 + t63077;
  t69509 = t62591*t67019;
  t69516 = t67660*t62073;
  t69763 = t67019*t56212;
  t69776 = t55862*t69775;
  t69785 = t69763 + t69776;
  t69563 = t67135*t56212;
  t69759 = t55862*t69718;
  t69760 = t69563 + t69759;
  t70239 = -1.*t55712*t70238;
  t70244 = -1.*t69966*t62839;
  t69540 = t67496*t56212;
  t69546 = t55862*t69544;
  t69555 = t69540 + t69546;
  t70273 = t57250*t70238;
  t70977 = t70071*t62839;
  t72834 = t67660*t56212;
  t72922 = t55862*t70242;
  t72927 = t72834 + t72922;
  t72929 = t55862*t67660;
  t72930 = -1.*t56212*t70242;
  t72931 = t72929 + t72930;
  t71856 = t55712*t70238;
  t71938 = t69966*t62839;
  t72233 = -1.*t70238*t61907;
  t72264 = -1.*t62839*t70112;
  t72283 = -1.*t57250*t70238;
  t72317 = -1.*t70071*t62839;
  t72396 = t70238*t61907;
  t72397 = t62839*t70112;
  t73315 = 3.e-6*t19464;
  t73312 = -3.e-6*t19464;
  t73552 = 9.e-12*t41720;
  t73563 = -2.7e-17*t41720;
  t73435 = t73315 + t45282;
  t73458 = 3.e-6*t73435;
  t73313 = t73312 + t45282;
  t73314 = 3.e-6*t73313;
  t67138 = -1.*t54802*t62614;
  t67139 = -1.*t53637*t62664;
  t67140 = t63654 + t67138 + t67139;
  t73606 = -3.000000000054e-6*t41720;
  t73614 = -9.e-12*t41720;
  t73618 = 1.000000000009*t41720;
  t68768 = t57248*t62614;
  t68783 = t57161*t62664;
  t68784 = t63960 + t68768 + t68783;
  t73668 = t73315 + t50938;
  t73676 = t73312 + t50938;
  t73669 = 3.e-7*t73668;
  t73670 = t22021 + t73614;
  t73671 = 0.100000000003*t73670;
  t73672 = 0.1*t73313;
  t73673 = -3.000000000027e-12*t41720;
  t73674 = 3.e-13 + t73669 + t73671 + t73672 + t73673;
  t73679 = -3.e-12*t73676;
  t73698 = 0.100000000003*t73668;
  t73700 = -1.7999946e-12*t41720;
  t73720 = 1.e-7 + t73679 + t73698 + t73700;
  t73820 = 3.e-7*t73676;
  t73824 = t19464 + t73614;
  t73825 = -3.e-12*t73824;
  t73827 = 0.1*t73435;
  t73828 = 0.1000000000039*t41720;
  t73857 = 3.e-13 + t73820 + t73825 + t73827 + t73828;
  t73612 = t73312 + t73606;
  t73613 = -3.e-6*t13179*t73612;
  t73615 = t19464 + t73458 + t73614;
  t73616 = t55914*t73615;
  t73620 = t73314 + t73618;
  t73629 = t13179*t73620;
  t73630 = t73613 + t73616 + t73629;
  t73675 = t13179*t73674;
  t73724 = -3.e-6*t13179*t73720;
  t73858 = t55914*t73857;
  t73859 = t73675 + t73724 + t73858;
  t73871 = t48677*t73674;
  t73875 = 3.e-6*t49201*t73720;
  t73876 = -1.*t13179*t73857;
  t73881 = t73871 + t73875 + t73876;
  t73883 = 3.e-6*t49201*t73674;
  t73884 = t52351*t73720;
  t73888 = 3.e-6*t13179*t73857;
  t73891 = t73883 + t73884 + t73888;
  t73643 = t73315 + t73606;
  t73644 = -3.e-6*t13179*t73643;
  t73655 = t22021 + t73314 + t73614;
  t73659 = t13179*t73655;
  t73660 = t73458 + t73618;
  t73661 = t55914*t73660;
  t73663 = t73644 + t73659 + t73661;
  t73470 = -1.8e-11*t41720;
  t73517 = t73314 + t73458 + t73470;
  t73550 = -3.e-6*t13179*t73517;
  t73556 = t22021 + t73552;
  t73562 = 3.e-6*t73556;
  t73565 = t73315 + t73562 + t73563;
  t73567 = t55914*t73565;
  t73587 = t19464 + t73552;
  t73596 = 3.e-6*t73587;
  t73600 = t73312 + t73596 + t73563;
  t73602 = t13179*t73600;
  t73604 = t73550 + t73567 + t73602;
  t68888 = t54802*t62614;
  t68934 = t53637*t62664;
  t69047 = t63977 + t68888 + t68934;
  t73941 = 3.e-6*t49201*t73643;
  t73942 = t48677*t73655;
  t73943 = -1.*t13179*t73660;
  t73944 = t73941 + t73942 + t73943;
  t73947 = t52351*t73643;
  t73948 = 3.e-6*t49201*t73655;
  t73949 = 3.e-6*t13179*t73660;
  t73950 = t73947 + t73948 + t73949;
  t69106 = -1.*t62664*t61060;
  t69107 = -1.*t62614*t61725;
  t69109 = t69106 + t69107 + t64052;
  t69471 = -1.*t57248*t62614;
  t69472 = -1.*t57161*t62664;
  t69480 = t64249 + t69471 + t69472;
  t73900 = 3.e-6*t49201*t73612;
  t73901 = -1.*t13179*t73615;
  t73902 = t48677*t73620;
  t73903 = t73900 + t73901 + t73902;
  t73905 = t52351*t73612;
  t73909 = 3.e-6*t13179*t73615;
  t73910 = 3.e-6*t49201*t73620;
  t73911 = t73905 + t73909 + t73910;
  t74027 = 3.e-6*t49201*t73517;
  t74028 = -1.*t13179*t73565;
  t74029 = t48677*t73600;
  t74030 = t74027 + t74028 + t74029;
  t74032 = t52351*t73517;
  t74033 = 3.e-6*t13179*t73565;
  t74034 = 3.e-6*t49201*t73600;
  t74037 = t74032 + t74033 + t74034;
  t69490 = t62664*t61060;
  t69498 = t62614*t61725;
  t69500 = t69490 + t69498 + t64271;
  t74312 = -1.*t62538*t51972;
  t74313 = -1.*t62553*t53448;
  t74314 = -1.*t47460*t62586;
  t74315 = t74312 + t74313 + t74314;
  t74318 = t62553*t73612;
  t74322 = t56507*t73674;
  t74323 = t56927*t73720;
  t74324 = t73857*t57065;
  t74325 = t62538*t73620;
  t74326 = t73615*t62586;
  t74330 = t74318 + t74322 + t74323 + t74324 + t74325 + t74326;
  t74334 = t56507*t62538;
  t74335 = t62553*t56927;
  t74336 = t57065*t62586;
  t74337 = t74334 + t74335 + t74336;
  t74342 = -1.*t62553*t73643;
  t74343 = -1.*t62538*t73655;
  t74345 = -1.*t51972*t73674;
  t74346 = -1.*t73720*t53448;
  t74347 = -1.*t47460*t73857;
  t74351 = -1.*t73660*t62586;
  t74352 = t74342 + t74343 + t74345 + t74346 + t74347 + t74351;
  t74368 = t62538*t51972;
  t74369 = t62553*t53448;
  t74373 = t47460*t62586;
  t74374 = t74368 + t74369 + t74373;
  t74376 = t62553*t73643;
  t74377 = t62538*t73655;
  t74378 = t51972*t73674;
  t74379 = t73720*t53448;
  t74380 = t47460*t73857;
  t74381 = t73660*t62586;
  t74470 = t74376 + t74377 + t74378 + t74379 + t74380 + t74381;
  t74475 = -1.*t62553*t58352;
  t74476 = -1.*t60777*t62586;
  t74477 = -1.*t62538*t61029;
  t74478 = t74475 + t74476 + t74477;
  t74483 = -1.*t62553*t73517;
  t74484 = -1.*t58352*t73720;
  t74485 = -1.*t62538*t73600;
  t74486 = -1.*t60777*t73857;
  t74487 = -1.*t73565*t62586;
  t74491 = -1.*t73674*t61029;
  t74492 = t74483 + t74484 + t74485 + t74486 + t74487 + t74491;
  t74506 = -1.*t62553*t73612;
  t74507 = -1.*t56507*t73674;
  t74508 = -1.*t56927*t73720;
  t74509 = -1.*t73857*t57065;
  t74513 = -1.*t62538*t73620;
  t74514 = -1.*t73615*t62586;
  t74515 = t74506 + t74507 + t74508 + t74509 + t74513 + t74514;
  t74517 = -1.*t56507*t62538;
  t74518 = -1.*t62553*t56927;
  t74519 = -1.*t57065*t62586;
  t74520 = t74517 + t74518 + t74519;
  t74522 = t62553*t58352;
  t74527 = t60777*t62586;
  t74528 = t62538*t61029;
  t74529 = t74522 + t74527 + t74528;
  t74531 = t62553*t73517;
  t74535 = t58352*t73720;
  t74536 = t62538*t73600;
  t74537 = t60777*t73857;
  t74538 = t73565*t62586;
  t74539 = t73674*t61029;
  t74540 = t74531 + t74535 + t74536 + t74537 + t74538 + t74539;
  t74594 = t12809*t74030;
  t74595 = -1.*t74037*t54829;
  t74596 = t74594 + t74595;
  t74601 = t12809*t73903;
  t74602 = -1.*t73911*t54829;
  t74603 = t74601 + t74602;
  t74610 = t12809*t73944;
  t74611 = -1.*t73950*t54829;
  t74612 = t74610 + t74611;
  t74634 = t12809*t74037;
  t74635 = t74030*t54829;
  t74637 = t74634 + t74635;
  t74639 = t55862*t73604;
  t74641 = -1.*t56212*t74596;
  t74642 = t74639 + t74641;
  t74648 = t12809*t73911;
  t74649 = t73903*t54829;
  t74650 = t74648 + t74649;
  t74661 = t55862*t73630;
  t74663 = -1.*t56212*t74603;
  t74664 = t74661 + t74663;
  t74674 = t12809*t73950;
  t74676 = t73944*t54829;
  t74677 = t74674 + t74676;
  t74679 = t55862*t73663;
  t74680 = -1.*t56212*t74612;
  t74686 = t74679 + t74680;
  t73860 = t73859*t57335;
  t73899 = t73630*t62591;
  t73921 = -1.*t56010*t73859;
  t73940 = -1.*t73663*t62591;
  t74728 = t12809*t73891;
  t74845 = t73881*t54829;
  t74846 = t74728 + t74845;
  t74849 = t12809*t73881;
  t74850 = -1.*t73891*t54829;
  t74852 = t74849 + t74850;
  t74018 = t56010*t73859;
  t74021 = t73663*t62591;
  t74026 = -1.*t73604*t62591;
  t74051 = -1.*t73859*t62073;
  t74080 = -1.*t73859*t57335;
  t74083 = -1.*t73630*t62591;
  t74094 = t73604*t62591;
  t74106 = t73859*t62073;
  t74593 = t73604*t56212;
  t74597 = t55862*t74596;
  t74598 = t74593 + t74597;
  t74600 = t73630*t56212;
  t74605 = t55862*t74603;
  t74606 = t74600 + t74605;
  t74609 = t73663*t56212;
  t74616 = t55862*t74612;
  t74622 = t74609 + t74616;
  t74848 = t74846*t57250;
  t74854 = t74650*t62839;
  t74858 = -1.*t55712*t74846;
  t74860 = -1.*t74677*t62839;
  t74915 = t73859*t56212;
  t74918 = t55862*t74852;
  t74919 = t74915 + t74918;
  t74942 = t55862*t73859;
  t74943 = -1.*t56212*t74852;
  t74944 = t74942 + t74943;
  t74869 = t55712*t74846;
  t74875 = t74677*t62839;
  t74880 = -1.*t74637*t62839;
  t74884 = -1.*t74846*t61907;
  t74892 = -1.*t74846*t57250;
  t74896 = -1.*t74650*t62839;
  t74901 = t74637*t62839;
  t74904 = t74846*t61907;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(1.555803111628e-8*(-1.*t55852*t56375 - 1.*t55712*t8312) - 0.00518601555815558*(-1.*t55852*t57435 - 1.*t57250*t8312) - 5.186e-9*(-1.*t55852*t62112 - 1.*t61907*t8312))*var2[1] - 0.5*(1.555803111628e-8*(t55712*t55852 - 1.*t56375*t8312) - 0.00518601555815558*(t55852*t57250 - 1.*t57435*t8312) - 5.186e-9*(t55852*t61907 - 1.*t62112*t8312))*var2[2])*var2[12];
  p_output1[4]=(-0.5*(1.555803111628e-8*t56375 - 0.00518601555815558*t57435 - 5.186e-9*t62112)*var2[0] - 0.5*(-1.555803111628e-8*t62364*t8312 + 0.00518601555815558*t62377*t8312 + 5.186e-9*t62428*t8312)*var2[1] - 0.5*(1.555803111628e-8*t55852*t62364 - 0.00518601555815558*t55852*t62377 - 5.186e-9*t55852*t62428)*var2[2] - 0.5*(-0.00024500000000441*t62112 - 5.186e-9*((t57435*t62681 + t57435*t62724 + t62377*t62753 + t62518*t62753)*t62803 + t62518*(-1.*t56375*t62681 - 1.*t56375*t62724 - 1.*t62364*t62753 - 1.*t62753*t62803) + t57435*t62863 + t56375*t62923) - 0.00518601555815558*((t56375*t62681 + t56375*t62724 + t62364*t62753 + t62753*t62803)*t62959 + t62803*(-1.*t62112*t62681 - 1.*t62112*t62724 - 1.*t62428*t62753 - 1.*t62753*t62959) + t62112*t63007 + t56375*t63032) + 1.555803111628e-8*((-1.*t57435*t62681 - 1.*t57435*t62724 - 1.*t62377*t62753 - 1.*t62518*t62753)*t62959 + t62518*(t62112*t62681 + t62112*t62724 + t62428*t62753 + t62753*t62959) + t62112*t63062 + t57435*t63082))*var2[3])*var2[12];
  p_output1[5]=(-0.5*(1.555803111628e-8*t55862*t63117 - 0.00518601555815558*t55862*t63133 - 5.186e-9*t55862*t63141)*var2[0] - 0.5*(1.555803111628e-8*(t55852*t56321 + t56212*t63117*t8312) - 0.00518601555815558*(t55852*t57423 + t56212*t63133*t8312) - 5.186e-9*(t55852*t62091 + t56212*t63141*t8312))*var2[1] - 0.5*(1.555803111628e-8*(-1.*t55852*t56212*t63117 + t56321*t8312) - 0.00518601555815558*(-1.*t55852*t56212*t63133 + t57423*t8312) - 5.186e-9*(-1.*t55852*t56212*t63141 + t62091*t8312))*var2[2] - 0.5*(-0.00024500000000441*t55862*t63141 - 5.186e-9*(t55862*t62923*t63117 + t55862*t62863*t63133 + t62518*(-1.*t55862*t62724*t63117 + t56212*t62753*t63117 + t56212*t56375*t63822 - 1.*t55862*t62803*t63822 + t63828 + t63847) + t62803*(t55862*t62724*t63133 - 1.*t56212*t62753*t63133 - 1.*t56212*t57435*t63822 + t55862*t62518*t63822 + t63908 + t63938)) - 0.00518601555815558*(t55862*t63032*t63117 + t55862*t63007*t63141 + t62959*(t55862*t62724*t63117 - 1.*t56212*t62753*t63117 - 1.*t56212*t56375*t63822 + t55862*t62803*t63822 + t64017 + t64038) + t62803*(-1.*t55862*t62724*t63141 + t56212*t62753*t63141 + t56212*t62112*t63822 - 1.*t55862*t62959*t63822 + t64118 + t64205)) + 1.555803111628e-8*(t55862*t63082*t63133 + t55862*t63062*t63141 + t62959*(-1.*t55862*t62724*t63133 + t56212*t62753*t63133 + t56212*t57435*t63822 - 1.*t55862*t62518*t63822 + t64233 + t64244) + t62518*(t55862*t62724*t63141 - 1.*t56212*t62753*t63141 - 1.*t56212*t62112*t63822 + t55862*t62959*t63822 + t64321 + t64337)))*var2[3] - 0.5*(-0.00024500000000441*t62091 - 5.186e-9*(t57423*t63681 + t57250*(-1.*t62667*t63117 - 1.*t56321*t63822 + t63828 + t63847) + t55712*(t62667*t63133 + t57423*t63822 + t63908 + t63938) + t56321*t63968) - 0.00518601555815558*(t62091*t63998 + t61907*(t62667*t63117 + t56321*t63822 + t64017 + t64038) + t56321*t64060 + t55712*(-1.*t62667*t63141 - 1.*t62091*t63822 + t64118 + t64205)) + 1.555803111628e-8*(t61907*(-1.*t62667*t63133 - 1.*t57423*t63822 + t64233 + t64244) + t62091*t64262 + t57423*t64279 + t57250*(t62667*t63141 + t62091*t63822 + t64321 + t64337)))*var2[4])*var2[12];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=(-0.5*(1.555803111628e-8*t69555 - 0.00518601555815558*t69760 - 5.186e-9*t69785)*var2[0] - 0.5*(1.555803111628e-8*(t55852*t69966 - 1.*t70042*t8312) - 0.00518601555815558*(t55852*t70071 - 1.*t70076*t8312) - 5.186e-9*(t55852*t70112 - 1.*t70121*t8312))*var2[1] - 0.5*(1.555803111628e-8*(t55852*t70042 + t69966*t8312) - 0.00518601555815558*(t55852*t70076 + t70071*t8312) - 5.186e-9*(t55852*t70121 + t70112*t8312))*var2[2] - 0.5*(-0.00024500000000441*t69785 - 5.186e-9*(t62923*t69555 + t62863*t69760 + t62518*(-1.*t62724*t69555 - 1.*t62753*t70042 + t70239 + t70244 - 1.*t62803*t72927 - 1.*t56375*t72931) + t62803*(t62724*t69760 + t62753*t70076 + t70273 + t70977 + t62518*t72927 + t57435*t72931)) - 0.00518601555815558*(t63032*t69555 + t63007*t69785 + t62959*(t62724*t69555 + t62753*t70042 + t71856 + t71938 + t62803*t72927 + t56375*t72931) + t62803*(-1.*t62724*t69785 - 1.*t62753*t70121 + t72233 + t72264 - 1.*t62959*t72927 - 1.*t62112*t72931)) + 1.555803111628e-8*(t63082*t69760 + t63062*t69785 + t62959*(-1.*t62724*t69760 - 1.*t62753*t70076 + t72283 + t72317 - 1.*t62518*t72927 - 1.*t57435*t72931) + t62518*(t62724*t69785 + t62753*t70121 + t72396 + t72397 + t62959*t72927 + t62112*t72931)))*var2[3] - 0.5*(-0.00024500000000441*t70112 - 5.186e-9*(t63968*t69966 + t63681*t70071 + t57250*(t67504 + t67703 - 1.*t62667*t69544 + t70239 - 1.*t56321*t70242 + t70244) + t55712*(t68165 + t68208 + t62667*t69718 + t57423*t70242 + t70273 + t70977)) - 0.00518601555815558*(t64060*t69966 + t63998*t70112 + t61907*(t69096 + t69099 + t62667*t69544 + t56321*t70242 + t71856 + t71938) + t55712*(t69121 + t69188 - 1.*t62667*t69775 - 1.*t62091*t70242 + t72233 + t72264)) + 1.555803111628e-8*(t64279*t70071 + t64262*t70112 + t61907*(t69311 + t69331 - 1.*t62667*t69718 - 1.*t57423*t70242 + t72283 + t72317) + t57250*(t69509 + t69516 + t62667*t69775 + t62091*t70242 + t72396 + t72397)))*var2[4] - 0.5*(-0.00024500000000441*t67019 - 5.186e-9*(t67135*t67140 + t57335*(t67504 - 1.*t54802*t67631 - 1.*t53637*t67641 + t67703 - 1.*t62614*t67925 - 1.*t62664*t67932) + t56010*(t57248*t67631 + t57161*t67641 + t68165 + t68208 + t62614*t68548 + t62664*t68688) + t67496*t68784) - 0.00518601555815558*(t67019*t69047 + t62073*(t54802*t67631 + t53637*t67641 + t62614*t67925 + t62664*t67932 + t69096 + t69099) + t67496*t69109 + t56010*(-1.*t61725*t67631 - 1.*t61060*t67641 + t69121 - 1.*t62614*t69128 - 1.*t62664*t69153 + t69188)) + 1.555803111628e-8*(t62073*(-1.*t57248*t67631 - 1.*t57161*t67641 - 1.*t62614*t68548 - 1.*t62664*t68688 + t69311 + t69331) + t67019*t69480 + t67135*t69500 + t57335*(t61725*t67631 + t61060*t67641 + t62614*t69128 + t62664*t69153 + t69509 + t69516)))*var2[5])*var2[12];
  p_output1[11]=0;
  p_output1[12]=(-0.5*(-5.186e-9*t74598 - 0.00518601555815558*t74606 + 1.555803111628e-8*t74622)*var2[0] - 0.5*(-5.186e-9*(t55852*t74637 - 1.*t74642*t8312) - 0.00518601555815558*(t55852*t74650 - 1.*t74664*t8312) + 1.555803111628e-8*(t55852*t74677 - 1.*t74686*t8312))*var2[1] - 0.5*(-5.186e-9*(t55852*t74642 + t74637*t8312) - 0.00518601555815558*(t55852*t74664 + t74650*t8312) + 1.555803111628e-8*(t55852*t74686 + t74677*t8312))*var2[2] - 0.5*(-0.00024500000000441*t74598 - 5.186e-9*(t62863*t74606 + t62923*t74622 + t62518*(-1.*t62724*t74622 - 1.*t62753*t74686 + t74858 + t74860 - 1.*t62803*t74919 - 1.*t56375*t74944) + t62803*(t62724*t74606 + t62753*t74664 + t74848 + t74854 + t62518*t74919 + t57435*t74944)) - 0.00518601555815558*(t63007*t74598 + t63032*t74622 + t62959*(t62724*t74622 + t62753*t74686 + t74869 + t74875 + t62803*t74919 + t56375*t74944) + t62803*(-1.*t62724*t74598 - 1.*t62753*t74642 + t74880 + t74884 - 1.*t62959*t74919 - 1.*t62112*t74944)) + 1.555803111628e-8*(t63062*t74598 + t63082*t74606 + t62959*(-1.*t62724*t74606 - 1.*t62753*t74664 + t74892 + t74896 - 1.*t62518*t74919 - 1.*t57435*t74944) + t62518*(t62724*t74598 + t62753*t74642 + t74901 + t74904 + t62959*t74919 + t62112*t74944)))*var2[3] - 0.5*(-0.00024500000000441*t74637 - 5.186e-9*(t63681*t74650 + t63968*t74677 + t55712*(t73860 + t73899 + t62667*t74603 + t74848 + t57423*t74852 + t74854) + t57250*(t73921 + t73940 - 1.*t62667*t74612 - 1.*t56321*t74852 + t74858 + t74860)) - 0.00518601555815558*(t63998*t74637 + t64060*t74677 + t61907*(t74018 + t74021 + t62667*t74612 + t56321*t74852 + t74869 + t74875) + t55712*(t74026 + t74051 - 1.*t62667*t74596 - 1.*t62091*t74852 + t74880 + t74884)) + 1.555803111628e-8*(t64262*t74637 + t64279*t74650 + t61907*(t74080 + t74083 - 1.*t62667*t74603 - 1.*t57423*t74852 + t74892 + t74896) + t57250*(t74094 + t74106 + t62667*t74596 + t62091*t74852 + t74901 + t74904)))*var2[4] - 0.5*(-0.00024500000000441*t73604 - 5.186e-9*(t67140*t73630 + t68784*t73663 + t56010*(t73860 + t57248*t73881 + t57161*t73891 + t73899 + t62614*t73903 + t62664*t73911) + t57335*(-1.*t54802*t73881 - 1.*t53637*t73891 + t73921 + t73940 - 1.*t62614*t73944 - 1.*t62664*t73950)) - 0.00518601555815558*(t69047*t73604 + t69109*t73663 + t62073*(t54802*t73881 + t53637*t73891 + t62614*t73944 + t62664*t73950 + t74018 + t74021) + t56010*(-1.*t61725*t73881 - 1.*t61060*t73891 + t74026 - 1.*t62614*t74030 - 1.*t62664*t74037 + t74051)) + 1.555803111628e-8*(t69480*t73604 + t69500*t73630 + t62073*(-1.*t57248*t73881 - 1.*t57161*t73891 - 1.*t62614*t73903 - 1.*t62664*t73911 + t74080 + t74083) + t57335*(t61725*t73881 + t61060*t73891 + t62614*t74030 + t62664*t74037 + t74094 + t74106)))*var2[5] - 0.5*(-0.00024500000000441*(1.8e-11*t41720 - 3.e-6*t73313 - 3.e-6*t73435 - 3.e-6*t73600) - 5.186e-9*(0.2*t73565 - 1.*t73612*t74315 - 1.*t53448*t74330 - 1.*t73643*t74337 - 1.*t56927*t74352 - 3.e-6*(t73620*t74315 + t51972*t74330 + t73655*t74337 + t56507*t74352)) - 0.00518601555815558*(0.2*t73615 - 1.*t73517*t74374 - 1.*t58352*t74470 - 1.*t73643*t74478 - 1.*t53448*t74492 - 3.e-6*(t73600*t74374 + t61029*t74470 + t73655*t74478 + t51972*t74492)) + 1.555803111628e-8*(0.2*t73660 - 1.*t58352*t74515 - 1.*t73517*t74520 - 1.*t73612*t74529 - 1.*t56927*t74540 - 3.e-6*(t61029*t74515 + t73600*t74520 + t73620*t74529 + t56507*t74540)))*var2[10])*var2[12];
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec13_minitaur.hh"

namespace FrontStance
{

void Ce3_vec13_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
