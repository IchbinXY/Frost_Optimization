/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:08:29 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1274;
  double t2786;
  double t6670;
  double t7301;
  double t12735;
  double t14322;
  double t18991;
  double t17204;
  double t19300;
  double t14623;
  double t17203;
  double t21391;
  double t21400;
  double t19549;
  double t28490;
  double t29827;
  double t31432;
  double t23080;
  double t23466;
  double t24739;
  double t31524;
  double t31656;
  double t31657;
  double t31676;
  double t31683;
  double t31734;
  double t31785;
  double t28231;
  double t30116;
  double t30418;
  double t31901;
  double t32136;
  double t32233;
  double t20214;
  double t32696;
  double t33031;
  double t33035;
  double t21473;
  double t22358;
  double t30445;
  double t30447;
  double t30455;
  double t32334;
  double t32340;
  double t32386;
  double t32426;
  double t32428;
  double t32479;
  double t32495;
  double t32496;
  double t31434;
  double t31438;
  double t31677;
  double t31794;
  double t31797;
  double t31895;
  double t32283;
  double t32300;
  double t32333;
  double t32341;
  double t32368;
  double t32380;
  double t32432;
  double t32439;
  double t32474;
  double t32501;
  double t32517;
  double t32776;
  double t32851;
  double t32656;
  double t32712;
  double t32724;
  double t32854;
  double t32861;
  double t32935;
  double t32941;
  double t32910;
  double t32912;
  double t32922;
  double t32955;
  double t32969;
  double t33051;
  double t33061;
  double t33193;
  double t33204;
  double t33206;
  double t33211;
  double t33239;
  double t33241;
  double t33242;
  double t33506;
  double t33509;
  double t33574;
  double t33592;
  double t33598;
  double t33624;
  double t33648;
  double t33690;
  double t33691;
  double t34316;
  double t34337;
  double t34354;
  double t36758;
  double t37752;
  double t37826;
  double t38262;
  double t38264;
  double t38277;
  double t38515;
  double t38520;
  double t38524;
  double t38575;
  double t38767;
  double t38772;
  double t39078;
  double t39116;
  double t39120;
  double t39125;
  double t39126;
  double t39130;
  double t45318;
  double t45536;
  double t45556;
  double t45601;
  double t45609;
  double t45614;
  double t45617;
  double t45623;
  double t45624;
  double t45630;
  double t45634;
  double t46853;
  double t46857;
  double t47530;
  double t47649;
  double t47847;
  double t47865;
  double t48083;
  double t48210;
  double t48569;
  double t48576;
  double t48579;
  double t45613;
  double t48486;
  double t48511;
  double t48629;
  double t48634;
  double t48637;
  double t48652;
  double t48554;
  double t48556;
  double t48568;
  double t48588;
  double t48602;
  double t48608;
  double t44266;
  double t44271;
  double t44306;
  double t48658;
  double t48660;
  double t48661;
  double t48666;
  double t48670;
  double t48683;
  double t49064;
  double t49070;
  double t49073;
  double t17364;
  double t19501;
  double t19502;
  double t49516;
  double t49528;
  double t49529;
  double t49532;
  double t22776;
  double t27875;
  double t27996;
  double t49007;
  double t49008;
  double t49009;
  double t49010;
  double t49549;
  double t49550;
  double t49554;
  double t49565;
  double t49569;
  double t49574;
  double t49018;
  double t49019;
  double t49023;
  double t49034;
  double t30429;
  double t30582;
  double t31378;
  double t49219;
  double t49222;
  double t49234;
  double t49237;
  double t49285;
  double t49287;
  double t49289;
  double t49291;
  double t49354;
  double t49358;
  double t49364;
  double t49371;
  double t49445;
  double t49446;
  double t49448;
  double t49449;
  double t49935;
  double t49943;
  double t49955;
  double t32718;
  double t32864;
  double t32865;
  double t50226;
  double t50230;
  double t50220;
  double t50222;
  double t50223;
  double t50214;
  double t50216;
  double t50217;
  double t50225;
  double t50238;
  double t50240;
  double t50250;
  double t50253;
  double t50254;
  double t50258;
  double t50259;
  double t50261;
  double t50219;
  double t50242;
  double t50245;
  double t50257;
  double t50262;
  double t50268;
  double t50279;
  double t50286;
  double t50289;
  double t32913;
  double t32974;
  double t32980;
  double t49504;
  double t49507;
  double t49615;
  double t49620;
  double t49664;
  double t49667;
  double t49741;
  double t49744;
  double t49785;
  double t49786;
  double t49875;
  double t49880;
  double t48548;
  double t48615;
  double t50599;
  double t50617;
  double t50618;
  double t48813;
  double t48969;
  double t50624;
  double t50627;
  double t50629;
  double t49098;
  double t49208;
  double t50728;
  double t50729;
  double t50731;
  double t49246;
  double t49251;
  double t50751;
  double t50752;
  double t50753;
  double t49301;
  double t49302;
  double t50787;
  double t50797;
  double t50802;
  double t49376;
  double t49391;
  double t50845;
  double t50847;
  double t50850;
  double t50246;
  double t50302;
  double t50306;
  double t50335;
  double t50339;
  double t50354;
  double t50355;
  double t50416;
  double t50425;
  double t50429;
  double t50523;
  double t50542;
  double t50544;
  double t50638;
  double t50734;
  double t50735;
  double t50772;
  double t50774;
  double t50805;
  double t50815;
  double t51183;
  double t51184;
  double t51185;
  double t51189;
  double t51190;
  double t51191;
  double t51192;
  double t50993;
  double t50997;
  double t51000;
  double t51230;
  double t51232;
  double t51234;
  double t51238;
  double t51240;
  double t51252;
  double t51027;
  double t51030;
  double t51047;
  double t51049;
  double t51125;
  double t51128;
  double t51074;
  double t51081;
  double t51088;
  double t51357;
  double t51358;
  double t51340;
  double t51282;
  double t51285;
  double t51344;
  double t51452;
  double t51456;
  double t51458;
  double t51471;
  double t51496;
  double t51477;
  double t51487;
  double t51501;
  t1274 = Cos(var1[9]);
  t2786 = -1.*t1274;
  t6670 = 1. + t2786;
  t7301 = 3.e-6*t6670;
  t12735 = 3.e-6*t1274;
  t14322 = t7301 + t12735;
  t18991 = Sin(var1[4]);
  t17204 = Cos(var1[7]);
  t19300 = Sin(var1[7]);
  t14623 = Cos(var1[4]);
  t17203 = Cos(var1[5]);
  t21391 = 9.e-12*t6670;
  t21400 = t21391 + t2786;
  t19549 = Sin(var1[9]);
  t28490 = -1.000000000009*t6670;
  t29827 = 1. + t28490;
  t31432 = Sin(var1[5]);
  t23080 = t21400*t17204;
  t23466 = -1.000000000009*t19549*t19300;
  t24739 = t23080 + t23466;
  t31524 = -9.e-12*t6670;
  t31656 = 1. + t31524;
  t31657 = -3.e-6*t31656;
  t31676 = t31657 + t7301;
  t31683 = 1.000000000009*t17204*t19549;
  t31734 = t21400*t19300;
  t31785 = t31683 + t31734;
  t28231 = t17204*t19549;
  t30116 = -1.*t29827*t19300;
  t30418 = t28231 + t30116;
  t31901 = t29827*t17204;
  t32136 = t19549*t19300;
  t32233 = t31901 + t32136;
  t20214 = -1.000000000009*t17204*t19549;
  t32696 = 1.000000000009*t19549*t19300;
  t33031 = Cos(var1[3]);
  t33035 = Sin(var1[3]);
  t21473 = -1.*t21400*t19300;
  t22358 = t20214 + t21473;
  t30445 = -1.*t29827*t17204;
  t30447 = -1.*t19549*t19300;
  t30455 = t30445 + t30447;
  t32334 = t14322*t17203*t19300;
  t32340 = t31432 + t32334;
  t32386 = -1.*t31676*t31432;
  t32426 = t17203*t31785;
  t32428 = t32386 + t32426;
  t32479 = -3.e-6*t19549*t31432;
  t32495 = t17203*t32233;
  t32496 = t32479 + t32495;
  t31434 = -1.*t14322*t31432*t19300;
  t31438 = t17203 + t31434;
  t31677 = -1.*t31676*t17203;
  t31794 = -1.*t31432*t31785;
  t31797 = t31677 + t31794;
  t31895 = -3.e-6*t17203*t19549;
  t32283 = -1.*t31432*t32233;
  t32300 = t31895 + t32283;
  t32333 = t14322*t14623*t17204;
  t32341 = -1.*t18991*t32340;
  t32368 = t32333 + t32341;
  t32380 = t14623*t24739;
  t32432 = -1.*t18991*t32428;
  t32439 = t32380 + t32432;
  t32474 = t14623*t30418;
  t32501 = -1.*t18991*t32496;
  t32517 = t32474 + t32501;
  t32776 = t1274*t19300;
  t32851 = t20214 + t32776;
  t32656 = t1274*t17204;
  t32712 = t32656 + t32696;
  t32724 = -3.e-6*t1274*t31432;
  t32854 = t17203*t32851;
  t32861 = t32724 + t32854;
  t32935 = 1.000000000009*t1274*t17204;
  t32941 = t32935 + t32696;
  t32910 = -1.000000000009*t1274*t19300;
  t32912 = t31683 + t32910;
  t32922 = -3.000000000027e-6*t19549*t31432;
  t32955 = t17203*t32941;
  t32969 = t32922 + t32955;
  t33051 = -1.*t14322*t17203*t17204*t18991;
  t33061 = -1.*t14322*t14623*t19300;
  t33193 = t33051 + t33061;
  t33204 = t14623*t22358;
  t33206 = -1.*t17203*t18991*t24739;
  t33211 = t33204 + t33206;
  t33239 = -1.*t17203*t18991*t30418;
  t33241 = t14623*t30455;
  t33242 = t33239 + t33241;
  t33506 = -1.*t14322*t17204*t18991;
  t33509 = -1.*t14623*t32340;
  t33574 = t33506 + t33509;
  t33592 = -1.*t18991*t24739;
  t33598 = -1.*t14623*t32428;
  t33624 = t33592 + t33598;
  t33648 = -1.*t18991*t30418;
  t33690 = -1.*t14623*t32496;
  t33691 = t33648 + t33690;
  t34316 = -1.*t17203;
  t34337 = t14322*t31432*t19300;
  t34354 = t34316 + t34337;
  t36758 = t31676*t17203;
  t37752 = t31432*t31785;
  t37826 = t36758 + t37752;
  t38262 = 3.e-6*t17203*t19549;
  t38264 = t31432*t32233;
  t38277 = t38262 + t38264;
  t38515 = 3.e-6*t1274*t17203;
  t38520 = t31432*t32851;
  t38524 = t38515 + t38520;
  t38575 = t14623*t32712;
  t38767 = -1.*t18991*t32861;
  t38772 = t38575 + t38767;
  t39078 = 3.000000000027e-6*t17203*t19549;
  t39116 = t31432*t32941;
  t39120 = t39078 + t39116;
  t39125 = t14623*t32912;
  t39126 = -1.*t18991*t32969;
  t39130 = t39125 + t39126;
  t45318 = -4.e-7*var1[9];
  t45536 = 0.1*t31656;
  t45556 = 3.000000000027e-7*t6670;
  t45601 = -9.e-18*t19549;
  t45609 = t45318 + t45536 + t45556 + t45601;
  t45614 = -1.*t17204;
  t45617 = 1. + t45614;
  t45623 = 0.2*t45617;
  t45624 = 0.2*t29827;
  t45630 = 0.2000000000048*t6670;
  t45634 = 0.0999997000009*t19549;
  t46853 = t45624 + t45630 + t45634;
  t46857 = t17204*t46853;
  t47530 = 1.2e-12*var1[9];
  t47649 = 0.0999997000009*t6670;
  t47847 = -3.e-12*t19549;
  t47865 = t47530 + t47649 + t47847;
  t48083 = t47865*t19300;
  t48210 = t45623 + t46857 + t48083;
  t48569 = -1.*t17203*t45609;
  t48576 = -1.*t31432*t48210;
  t48579 = t48569 + t48576;
  t45613 = -1.*t45609*t31432;
  t48486 = t17203*t48210;
  t48511 = t45613 + t48486;
  t48629 = t17204*t47865;
  t48634 = 0.2*t19300;
  t48637 = -1.*t46853*t19300;
  t48652 = t48629 + t48634 + t48637;
  t48554 = t14322*t17204*t18991;
  t48556 = t14623*t32340;
  t48568 = t48554 + t48556;
  t48588 = t17203*t45609;
  t48602 = t31432*t48210;
  t48608 = t48588 + t48602;
  t44266 = t18991*t24739;
  t44271 = t14623*t32428;
  t44306 = t44266 + t44271;
  t48658 = t18991*t48652;
  t48660 = t14623*t48511;
  t48661 = t48658 + t48660;
  t48666 = t14623*t48652;
  t48670 = -1.*t18991*t48511;
  t48683 = t48666 + t48670;
  t49064 = t18991*t30418;
  t49070 = t14623*t32496;
  t49073 = t49064 + t49070;
  t17364 = t14322*t14623*t17203*t17204;
  t19501 = -1.*t14322*t18991*t19300;
  t19502 = t17364 + t19501;
  t49516 = 0.2*t17204;
  t49528 = -1.*t17204*t46853;
  t49529 = -1.*t47865*t19300;
  t49532 = t49516 + t49528 + t49529;
  t22776 = t18991*t22358;
  t27875 = t14623*t17203*t24739;
  t27996 = t22776 + t27875;
  t49007 = -1.*t34354*t48608;
  t49008 = -1.*t48568*t48661;
  t49009 = -1.*t32368*t48683;
  t49010 = t49007 + t49008 + t49009;
  t49549 = t18991*t49532;
  t49550 = t14623*t17203*t48652;
  t49554 = t49549 + t49550;
  t49565 = t14623*t49532;
  t49569 = -1.*t17203*t18991*t48652;
  t49574 = t49565 + t49569;
  t49018 = t37826*t48608;
  t49019 = t44306*t48661;
  t49023 = t32439*t48683;
  t49034 = t49018 + t49019 + t49023;
  t30429 = t14623*t17203*t30418;
  t30582 = t18991*t30455;
  t31378 = t30429 + t30582;
  t49219 = t34354*t48608;
  t49222 = t48568*t48661;
  t49234 = t32368*t48683;
  t49237 = t49219 + t49222 + t49234;
  t49285 = -1.*t48608*t38277;
  t49287 = -1.*t48661*t49073;
  t49289 = -1.*t48683*t32517;
  t49291 = t49285 + t49287 + t49289;
  t49354 = -1.*t37826*t48608;
  t49358 = -1.*t44306*t48661;
  t49364 = -1.*t32439*t48683;
  t49371 = t49354 + t49358 + t49364;
  t49445 = t48608*t38277;
  t49446 = t48661*t49073;
  t49448 = t48683*t32517;
  t49449 = t49445 + t49446 + t49448;
  t49935 = -1.*t18991*t48652;
  t49943 = -1.*t14623*t48511;
  t49955 = t49935 + t49943;
  t32718 = t18991*t32712;
  t32864 = t14623*t32861;
  t32865 = t32718 + t32864;
  t50226 = -3.e-12*t1274;
  t50230 = 1.2e-12 + t50226 + t45634;
  t50220 = 0.0999997000009*t1274;
  t50222 = 3.000000000027e-12*t19549;
  t50223 = t50220 + t50222;
  t50214 = -9.e-18*t1274;
  t50216 = 2.999991000027e-7*t19549;
  t50217 = -4.e-7 + t50214 + t50216;
  t50225 = t17204*t50223;
  t50238 = t50230*t19300;
  t50240 = t50225 + t50238;
  t50250 = t17204*t50230;
  t50253 = -1.*t50223*t19300;
  t50254 = t50250 + t50253;
  t50258 = -1.*t50217*t31432;
  t50259 = t17203*t50240;
  t50261 = t50258 + t50259;
  t50219 = t17203*t50217;
  t50242 = t31432*t50240;
  t50245 = t50219 + t50242;
  t50257 = t18991*t50254;
  t50262 = t14623*t50261;
  t50268 = t50257 + t50262;
  t50279 = t14623*t50254;
  t50286 = -1.*t18991*t50261;
  t50289 = t50279 + t50286;
  t32913 = t18991*t32912;
  t32974 = t14623*t32969;
  t32980 = t32913 + t32974;
  t49504 = -1.*t31432*t48652*t34354;
  t49507 = -1.*t14322*t17204*t31432*t48608;
  t49615 = t31432*t48652*t37826;
  t49620 = t31432*t24739*t48608;
  t49664 = t31432*t48652*t34354;
  t49667 = t14322*t17204*t31432*t48608;
  t49741 = -1.*t31432*t30418*t48608;
  t49744 = -1.*t31432*t48652*t38277;
  t49785 = -1.*t31432*t48652*t37826;
  t49786 = -1.*t31432*t24739*t48608;
  t49875 = t31432*t30418*t48608;
  t49880 = t31432*t48652*t38277;
  t48548 = -1.*t34354*t48511;
  t48615 = -1.*t32340*t48608;
  t50599 = -1.*t14322*t17204*t48652;
  t50617 = -1.*t32340*t48511;
  t50618 = t50599 + t50617 + t49007;
  t48813 = t37826*t48511;
  t48969 = t32428*t48608;
  t50624 = t48652*t24739;
  t50627 = t32428*t48511;
  t50629 = t50624 + t50627 + t49018;
  t49098 = t34354*t48511;
  t49208 = t32340*t48608;
  t50728 = t14322*t17204*t48652;
  t50729 = t32340*t48511;
  t50731 = t50728 + t50729 + t49219;
  t49246 = -1.*t48608*t32496;
  t49251 = -1.*t48511*t38277;
  t50751 = -1.*t30418*t48652;
  t50752 = -1.*t48511*t32496;
  t50753 = t50751 + t50752 + t49285;
  t49301 = -1.*t37826*t48511;
  t49302 = -1.*t32428*t48608;
  t50787 = -1.*t48652*t24739;
  t50797 = -1.*t32428*t48511;
  t50802 = t50787 + t50797 + t49354;
  t49376 = t48608*t32496;
  t49391 = t48511*t38277;
  t50845 = t30418*t48652;
  t50847 = t48511*t32496;
  t50850 = t50845 + t50847 + t49445;
  t50246 = t34354*t50245;
  t50302 = -1.*t38524*t48608;
  t50306 = -1.*t50245*t38277;
  t50335 = t38524*t48608;
  t50339 = t50245*t38277;
  t50354 = -1.*t37826*t50245;
  t50355 = -1.*t48608*t39120;
  t50416 = -1.*t34354*t50245;
  t50425 = t37826*t50245;
  t50429 = t48608*t39120;
  t50523 = -1.*t14322*t17204*t49532;
  t50542 = t22358*t48652;
  t50544 = t49532*t24739;
  t50638 = t14322*t17204*t49532;
  t50734 = -1.*t30418*t49532;
  t50735 = -1.*t48652*t30455;
  t50772 = -1.*t22358*t48652;
  t50774 = -1.*t49532*t24739;
  t50805 = t30418*t49532;
  t50815 = t48652*t30455;
  t51183 = 4.e-7*var1[9];
  t51184 = -1. + t21391;
  t51185 = 0.1*t51184;
  t51189 = -3.000000000027e-7*t6670;
  t51190 = 9.e-18*t19549;
  t51191 = t14322*t19300*t48210;
  t51192 = t51183 + t51185 + t51189 + t51190 + t51191 + t50728;
  t50993 = t14322*t17204*t50254;
  t50997 = -1.*t30418*t50254;
  t51000 = -1.*t48652*t32712;
  t51230 = -1.*t31676*t45609;
  t51232 = -1.*t31785*t48210;
  t51234 = t51230 + t51232 + t50787;
  t51238 = 3.e-6*t45609*t19549;
  t51240 = t48210*t32233;
  t51252 = t51238 + t50845 + t51240;
  t51027 = t30418*t50254;
  t51030 = t48652*t32712;
  t51047 = -1.*t32912*t48652;
  t51049 = -1.*t50254*t24739;
  t51125 = -1.*t14322*t19300*t48210;
  t51128 = t45318 + t45536 + t45556 + t45601 + t51125 + t50599;
  t51074 = -1.*t14322*t17204*t50254;
  t51081 = t32912*t48652;
  t51088 = t50254*t24739;
  t51357 = -1.*t31676*t50217;
  t51358 = -3.000000000027e-6*t45609*t19549;
  t51340 = 3.e-6*t1274*t45609;
  t51282 = 9.e-18*t1274;
  t51285 = -2.999991000027e-7*t19549;
  t51344 = 3.e-6*t50217*t19549;
  t51452 = -1.000000000009*t1274*t46853;
  t51456 = -1.*t21400*t50230;
  t51458 = -1.000000000009*t47865*t19549;
  t51471 = -1.000000000009*t50223*t19549;
  t51496 = -1.000000000009*t46853*t19549;
  t51477 = t1274*t47865;
  t51487 = t29827*t50223;
  t51501 = t50230*t19549;
  p_output1[0]=var2[9]*(-0.5*(1.72e-8*t32368 + 5.16e-14*t32439 + 0.0042999871*t32517)*var2[4] - 0.5*(1.72e-8*t14623*t31438 + 5.16e-14*t14623*t31797 + 0.0042999871*t14623*t32300)*var2[5] - 0.5*(1.72e-8*t19502 + 5.16e-14*t27996 + 0.0042999871*t31378)*var2[7] - 0.5*(0.0042999871*t32865 + 5.16e-14*t32980)*var2[9]);
  p_output1[1]=var2[9]*(-0.5*(1.72e-8*(-1.*t32368*t33031 - 1.*t33035*t34354) + 5.16e-14*(-1.*t32439*t33031 - 1.*t33035*t37826) + 0.0042999871*(-1.*t32517*t33031 - 1.*t33035*t38277))*var2[3] - 0.5*(-1.72e-8*t33035*t33574 - 5.16e-14*t33035*t33624 - 0.0042999871*t33035*t33691)*var2[4] - 0.5*(1.72e-8*(t32340*t33031 + t18991*t31438*t33035) + 5.16e-14*(t32428*t33031 + t18991*t31797*t33035) + 0.0042999871*(t32496*t33031 + t18991*t32300*t33035))*var2[5] - 0.5*(1.72e-8*(t14322*t17204*t31432*t33031 - 1.*t33035*t33193) + 5.16e-14*(t24739*t31432*t33031 - 1.*t33035*t33211) + 0.0042999871*(t30418*t31432*t33031 - 1.*t33035*t33242))*var2[7] - 0.5*(0.0042999871*(t33031*t38524 - 1.*t33035*t38772) + 5.16e-14*(t33031*t39120 - 1.*t33035*t39130))*var2[9]);
  p_output1[2]=var2[9]*(-0.5*(1.72e-8*(-1.*t32368*t33035 + t33031*t34354) + 5.16e-14*(-1.*t32439*t33035 + t33031*t37826) + 0.0042999871*(-1.*t32517*t33035 + t33031*t38277))*var2[3] - 0.5*(1.72e-8*t33031*t33574 + 5.16e-14*t33031*t33624 + 0.0042999871*t33031*t33691)*var2[4] - 0.5*(1.72e-8*(-1.*t18991*t31438*t33031 + t32340*t33035) + 5.16e-14*(-1.*t18991*t31797*t33031 + t32428*t33035) + 0.0042999871*(-1.*t18991*t32300*t33031 + t32496*t33035))*var2[5] - 0.5*(1.72e-8*(t14322*t17204*t31432*t33035 + t33031*t33193) + 5.16e-14*(t24739*t31432*t33035 + t33031*t33211) + 0.0042999871*(t30418*t31432*t33035 + t33031*t33242))*var2[7] - 0.5*(0.0042999871*(t33035*t38524 + t33031*t38772) + 5.16e-14*(t33035*t39120 + t33031*t39130))*var2[9]);
  p_output1[3]=var2[9]*(-0.5*(0.000271000000002439*t32368 + 0.0042999871*(t32439*t49010 + t32368*t49034 + t44306*(-1.*t32368*t48661 - 1.*t33574*t48683 - 1.*t48568*t48683 - 1.*t32368*t49955) + t48568*(t32439*t48661 + t33624*t48683 + t44306*t48683 + t32439*t49955)) + 5.16e-14*(t32517*t49237 + t32368*t49291 + t49073*(t32368*t48661 + t33574*t48683 + t48568*t48683 + t32368*t49955) + t48568*(-1.*t32517*t48661 - 1.*t33691*t48683 - 1.*t48683*t49073 - 1.*t32517*t49955)) + 1.72e-8*(t32517*t49371 + t32439*t49449 + t49073*(-1.*t32439*t48661 - 1.*t33624*t48683 - 1.*t44306*t48683 - 1.*t32439*t49955) + t44306*(t32517*t48661 + t33691*t48683 + t48683*t49073 + t32517*t49955)))*var2[4] - 0.5*(0.000271000000002439*t14623*t31438 + 0.0042999871*(t44306*(t48548 + t18991*t32368*t48579 - 1.*t14623*t48568*t48579 + t48615 - 1.*t14623*t31438*t48661 + t18991*t31438*t48683) + t48568*(-1.*t18991*t32439*t48579 + t14623*t44306*t48579 + t14623*t31797*t48661 - 1.*t18991*t31797*t48683 + t48813 + t48969) + t14623*t31797*t49010 + t14623*t31438*t49034) + 5.16e-14*(t49073*(-1.*t18991*t32368*t48579 + t14623*t48568*t48579 + t14623*t31438*t48661 - 1.*t18991*t31438*t48683 + t49098 + t49208) + t14623*t32300*t49237 + t48568*(t18991*t32517*t48579 - 1.*t14623*t32300*t48661 + t18991*t32300*t48683 - 1.*t14623*t48579*t49073 + t49246 + t49251) + t14623*t31438*t49291) + 1.72e-8*(t49073*(t18991*t32439*t48579 - 1.*t14623*t44306*t48579 - 1.*t14623*t31797*t48661 + t18991*t31797*t48683 + t49301 + t49302) + t14623*t32300*t49371 + t44306*(-1.*t18991*t32517*t48579 + t14623*t32300*t48661 - 1.*t18991*t32300*t48683 + t14623*t48579*t49073 + t49376 + t49391) + t14623*t31797*t49449))*var2[5] - 0.5*(0.000271000000002439*t19502 + 0.0042999871*(t27996*t49010 + t19502*t49034 + t44306*(-1.*t19502*t48661 - 1.*t33193*t48683 + t49504 + t49507 - 1.*t48568*t49554 - 1.*t32368*t49574) + t48568*(t27996*t48661 + t33211*t48683 + t44306*t49554 + t32439*t49574 + t49615 + t49620)) + 5.16e-14*(t31378*t49237 + t19502*t49291 + t49073*(t19502*t48661 + t33193*t48683 + t48568*t49554 + t32368*t49574 + t49664 + t49667) + t48568*(-1.*t31378*t48661 - 1.*t33242*t48683 - 1.*t49073*t49554 - 1.*t32517*t49574 + t49741 + t49744)) + 1.72e-8*(t31378*t49371 + t27996*t49449 + t49073*(-1.*t27996*t48661 - 1.*t33211*t48683 - 1.*t44306*t49554 - 1.*t32439*t49574 + t49785 + t49786) + t44306*(t31378*t48661 + t33242*t48683 + t49073*t49554 + t32517*t49574 + t49875 + t49880)))*var2[7] - 0.5*(5.16e-14*(t32865*t49237 + t49073*(t50246 + t48568*t50268 + t32368*t50289) + t48568*(-1.*t32865*t48661 - 1.*t38772*t48683 - 1.*t49073*t50268 - 1.*t32517*t50289 + t50302 + t50306)) + 1.72e-8*(t32865*t49371 + t32980*t49449 + t44306*(t32865*t48661 + t38772*t48683 + t49073*t50268 + t32517*t50289 + t50335 + t50339) + t49073*(-1.*t32980*t48661 - 1.*t39130*t48683 - 1.*t44306*t50268 - 1.*t32439*t50289 + t50354 + t50355)) + 0.0042999871*(t32980*t49010 + t44306*(-1.*t48568*t50268 - 1.*t32368*t50289 + t50416) + t48568*(t32980*t48661 + t39130*t48683 + t44306*t50268 + t32439*t50289 + t50425 + t50429)))*var2[9]);
  p_output1[4]=var2[9]*(-0.5*(0.000271000000002439*t32340 + 0.0042999871*(t37826*(-1.*t31438*t48511 + t48548 - 1.*t32340*t48579 + t48615) + t34354*(t31797*t48511 + t32428*t48579 + t48813 + t48969) + t32428*t50618 + t32340*t50629) + 5.16e-14*(t38277*(t31438*t48511 + t32340*t48579 + t49098 + t49208) + t34354*(-1.*t32300*t48511 - 1.*t32496*t48579 + t49246 + t49251) + t32496*t50731 + t32340*t50753) + 1.72e-8*(t38277*(-1.*t31797*t48511 - 1.*t32428*t48579 + t49301 + t49302) + t37826*(t32300*t48511 + t32496*t48579 + t49376 + t49391) + t32496*t50802 + t32428*t50850))*var2[5] - 0.5*(0.000271000000002439*t14322*t17204*t31432 + 0.0042999871*(t37826*(-1.*t14322*t17203*t17204*t48511 + t14322*t19300*t48652 - 1.*t17203*t32340*t48652 + t49504 + t49507 + t50523) + t34354*(t17203*t24739*t48511 + t17203*t32428*t48652 + t49615 + t49620 + t50542 + t50544) + t24739*t31432*t50618 + t14322*t17204*t31432*t50629) + 5.16e-14*(t38277*(t14322*t17203*t17204*t48511 - 1.*t14322*t19300*t48652 + t17203*t32340*t48652 + t49664 + t49667 + t50638) + t30418*t31432*t50731 + t34354*(-1.*t17203*t30418*t48511 - 1.*t17203*t32496*t48652 + t49741 + t49744 + t50734 + t50735) + t14322*t17204*t31432*t50753) + 1.72e-8*(t38277*(-1.*t17203*t24739*t48511 - 1.*t17203*t32428*t48652 + t49785 + t49786 + t50772 + t50774) + t30418*t31432*t50802 + t37826*(t17203*t30418*t48511 + t17203*t32496*t48652 + t49875 + t49880 + t50805 + t50815) + t24739*t31432*t50850))*var2[7] - 0.5*(5.16e-14*(t38524*t50731 + t38277*(t50246 + t32340*t50261 + t50993) + t34354*(-1.*t32861*t48511 - 1.*t32496*t50261 + t50302 + t50306 + t50997 + t51000)) + 1.72e-8*(t38524*t50802 + t39120*t50850 + t37826*(t32861*t48511 + t32496*t50261 + t50335 + t50339 + t51027 + t51030) + t38277*(-1.*t32969*t48511 - 1.*t32428*t50261 + t50354 + t50355 + t51047 + t51049)) + 0.0042999871*(t39120*t50618 + t37826*(-1.*t32340*t50261 + t50416 + t51074) + t34354*(t32969*t48511 + t32428*t50261 + t50425 + t50429 + t51081 + t51088)))*var2[9]);
  p_output1[5]=var2[9]*(-0.5*(-0.000271000000002439*t14322*t19300 + 0.0042999871*(t24739*(-1.*t14322*t17204*t48210 + t50523) + t14322*t17204*(t24739*t48210 + t31785*t48652 + t50542 + t50544) - 1.*t14322*t19300*(t31676*t45609 + t31785*t48210 + t50624) + t22358*t51128) + 5.16e-14*(t30418*(t14322*t17204*t48210 + t50638) + t14322*t17204*(-1.*t30418*t48210 - 1.*t32233*t48652 + t50734 + t50735) - 1.*t14322*t19300*(-3.e-6*t19549*t45609 - 1.*t32233*t48210 + t50751) + t30455*t51192) + 1.72e-8*(t30418*(-1.*t24739*t48210 - 1.*t31785*t48652 + t50772 + t50774) + t24739*(t30418*t48210 + t32233*t48652 + t50805 + t50815) + t30455*t51234 + t22358*t51252))*var2[7] - 0.5*(0.0042999871*(t24739*(-4.e-7 + t50214 + t50216 - 1.*t14322*t19300*t50240 + t51074) + t14322*t17204*(3.000000000027e-6*t19549*t45609 + t32941*t48210 + t31676*t50217 + t31785*t50240 + t51081 + t51088) + t32912*t51128) + 5.16e-14*(t14322*t17204*(-3.e-6*t1274*t45609 - 1.*t32851*t48210 - 3.e-6*t19549*t50217 - 1.*t32233*t50240 + t50997 + t51000) + t32712*t51192 + t30418*(4.e-7 + t14322*t19300*t50240 + t50993 + t51282 + t51285)) + 1.72e-8*(t32712*t51234 + t32912*t51252 + t24739*(t32851*t48210 + t32233*t50240 + t51027 + t51030 + t51340 + t51344) + t30418*(-1.*t32941*t48210 - 1.*t31785*t50240 + t51047 + t51049 + t51357 + t51358)))*var2[9]);
  p_output1[6]=0;
  p_output1[7]=-0.5*(0.0042999871*(0.2*t1274 + 3.000000000027e-6*t19549*(t45318 + t45536 + t45556 + t45601 - 1.*t14322*t47865) + t31676*(-4.e-7 + t50214 + t50216 - 1.*t14322*t50230) + t51357 + t51358 + t51452 + t51456 + t51458 + t51471) + 5.16e-14*(0.2000000000018*t19549 + 3.e-6*t1274*(t14322*t47865 + t51183 + t51185 + t51189 + t51190) + 3.e-6*t19549*(4.e-7 + t14322*t50230 + t51282 + t51285) + t51340 + t51344 + t51477 + t51487 + t51496 + t51501) + 1.72e-8*(3.000000000027e-6*t19549*(t29827*t46853 + t19549*t47865 + t51238) + 3.e-6*t19549*(t51357 + t51358 + t51452 + t51456 + t51458 + t51471) + 3.e-6*t1274*(-1.*t21400*t47865 + t51230 + t51496) + t31676*(t51340 + t51344 + t51477 + t51487 + t51496 + t51501)))*Power(var2[9],2);
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec10_minitaur.hh"

namespace FrontStance
{

void Ce1_vec10_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
