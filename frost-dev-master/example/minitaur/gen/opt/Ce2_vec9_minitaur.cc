/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:10:29 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t12563;
  double t12614;
  double t14001;
  double t14494;
  double t6207;
  double t9639;
  double t10672;
  double t12590;
  double t22201;
  double t22217;
  double t14439;
  double t14453;
  double t18540;
  double t19185;
  double t19545;
  double t19710;
  double t20779;
  double t21657;
  double t22203;
  double t22204;
  double t22223;
  double t22298;
  double t22351;
  double t22354;
  double t22529;
  double t22575;
  double t22582;
  double t3826;
  double t4707;
  double t11161;
  double t12155;
  double t22631;
  double t22675;
  double t22716;
  double t22717;
  double t22751;
  double t22754;
  double t22366;
  double t22932;
  double t22975;
  double t22990;
  double t23112;
  double t23206;
  double t23205;
  double t23178;
  double t23211;
  double t23215;
  double t23216;
  double t23240;
  double t23241;
  double t23251;
  double t23255;
  double t23259;
  double t23274;
  double t23277;
  double t23279;
  double t23284;
  double t22712;
  double t22724;
  double t22755;
  double t22756;
  double t22809;
  double t22871;
  double t22873;
  double t22878;
  double t22884;
  double t22889;
  double t22891;
  double t22893;
  double t22899;
  double t22902;
  double t22903;
  double t22908;
  double t22913;
  double t22914;
  double t23454;
  double t23520;
  double t23523;
  double t23554;
  double t22948;
  double t22988;
  double t22991;
  double t22992;
  double t23050;
  double t23056;
  double t23059;
  double t23061;
  double t23064;
  double t23067;
  double t23070;
  double t23075;
  double t23076;
  double t23077;
  double t23078;
  double t23079;
  double t23080;
  double t23084;
  double t19891;
  double t22225;
  double t22359;
  double t22364;
  double t22365;
  double t22369;
  double t22373;
  double t22396;
  double t22464;
  double t22466;
  double t22476;
  double t22495;
  double t22530;
  double t22586;
  double t22587;
  double t22590;
  double t22609;
  double t22621;
  double t23699;
  double t23701;
  double t23738;
  double t23744;
  double t23695;
  double t23768;
  double t23772;
  double t23775;
  double t23785;
  double t23795;
  double t23796;
  double t23226;
  double t23262;
  double t23287;
  double t23289;
  double t23665;
  double t23668;
  double t23681;
  double t23683;
  double t23972;
  double t23926;
  double t23991;
  double t23570;
  double t23592;
  double t23615;
  double t23653;
  double t23941;
  double t23949;
  double t23954;
  double t23959;
  double t23964;
  double t23975;
  double t23976;
  double t23982;
  double t23986;
  double t23988;
  double t23992;
  double t23994;
  double t23996;
  double t23998;
  double t24010;
  double t24014;
  double t24015;
  double t24017;
  double t24018;
  double t24022;
  double t24023;
  double t23458;
  double t23542;
  double t23556;
  double t23558;
  double t23920;
  double t23978;
  double t24000;
  double t24028;
  double t24030;
  double t23297;
  double t23298;
  double t23299;
  double t23300;
  double t24035;
  double t24044;
  double t24053;
  double t24054;
  double t24056;
  double t23350;
  double t23363;
  double t23375;
  double t23376;
  double t24060;
  double t24062;
  double t24063;
  double t24066;
  double t24067;
  double t24031;
  double t24059;
  double t24069;
  double t24070;
  double t24077;
  double t24080;
  double t24085;
  double t24092;
  double t24111;
  double t24195;
  double t24135;
  double t24144;
  double t24160;
  double t24167;
  double t24176;
  double t24198;
  double t24199;
  double t24201;
  double t24203;
  double t24205;
  double t24207;
  double t24219;
  double t24222;
  double t24226;
  double t24237;
  double t24241;
  double t24247;
  double t24177;
  double t24206;
  double t24269;
  double t24288;
  double t24290;
  double t24291;
  double t24295;
  double t24298;
  double t24301;
  double t24307;
  double t24308;
  double t24310;
  double t23698;
  double t23776;
  double t23797;
  double t23798;
  double t23799;
  double t23800;
  double t23802;
  double t23804;
  double t23833;
  double t23835;
  double t23841;
  double t23852;
  double t23865;
  double t23867;
  double t23870;
  double t23871;
  double t23874;
  double t23875;
  double t23290;
  double t23301;
  double t23391;
  double t23439;
  double t23444;
  double t23448;
  double t24351;
  double t24353;
  double t24396;
  double t24459;
  double t24512;
  double t24590;
  double t24596;
  double t24603;
  double t23569;
  double t23660;
  double t23662;
  double t23664;
  double t23685;
  double t23687;
  double t25060;
  double t25061;
  double t25064;
  double t25066;
  double t25069;
  double t25075;
  double t25076;
  double t25078;
  double t25390;
  double t25394;
  double t25416;
  double t25422;
  double t25462;
  double t25468;
  double t25484;
  double t25489;
  double t25533;
  double t25534;
  double t25547;
  double t25548;
  double t25555;
  double t25556;
  double t25557;
  double t25572;
  double t25584;
  double t25599;
  double t25614;
  double t25620;
  double t25626;
  double t25632;
  double t25791;
  double t25815;
  double t25837;
  double t25838;
  double t25851;
  double t25853;
  double t25855;
  double t25858;
  double t25720;
  double t25882;
  double t25884;
  double t25885;
  double t25886;
  double t25889;
  double t25895;
  double t25899;
  double t25900;
  double t25940;
  double t25942;
  double t25948;
  double t25952;
  double t25954;
  double t25956;
  double t25962;
  double t25979;
  double t25983;
  double t25987;
  double t25991;
  double t25994;
  double t26010;
  double t26013;
  double t25927;
  double t26072;
  double t26074;
  double t26076;
  double t26080;
  double t26090;
  double t26102;
  double t26104;
  double t26129;
  double t26147;
  double t26242;
  double t26243;
  double t26246;
  double t26251;
  double t26272;
  double t26365;
  double t26396;
  double t26366;
  double t26367;
  double t26372;
  double t26397;
  double t26398;
  double t26400;
  double t26406;
  double t26407;
  double t26408;
  double t26420;
  double t26422;
  double t26423;
  double t26428;
  double t26429;
  double t26430;
  double t26432;
  double t26434;
  double t26436;
  double t26440;
  double t26441;
  double t26444;
  double t26450;
  double t26451;
  double t26452;
  double t26461;
  double t26463;
  double t26464;
  double t26474;
  double t26475;
  double t26479;
  double t26490;
  double t26491;
  double t26493;
  double t26496;
  double t26501;
  double t26506;
  double t26600;
  double t26601;
  double t26610;
  double t26616;
  double t26671;
  double t26720;
  double t26611;
  double t26796;
  double t26800;
  double t26806;
  double t26809;
  double t26811;
  double t24289;
  double t24314;
  double t26864;
  double t26878;
  double t26880;
  double t26885;
  double t26887;
  double t26890;
  double t24326;
  double t24333;
  double t26923;
  double t26925;
  double t26931;
  double t24637;
  double t24642;
  double t24781;
  double t24903;
  double t26933;
  double t26935;
  double t26936;
  double t27012;
  double t27015;
  double t27016;
  double t25091;
  double t25097;
  double t25300;
  double t25312;
  double t27038;
  double t27046;
  double t27060;
  double t27400;
  double t27431;
  double t27436;
  double t27442;
  double t27446;
  double t27450;
  double t27441;
  double t27451;
  double t27452;
  double t27456;
  double t27458;
  double t27459;
  double t26882;
  double t26902;
  double t27513;
  double t27515;
  double t27531;
  double t27479;
  double t27483;
  double t27495;
  double t26908;
  double t26914;
  double t27600;
  double t27606;
  double t27611;
  double t26957;
  double t26964;
  double t26969;
  double t26974;
  double t27614;
  double t27618;
  double t27621;
  double t27685;
  double t27687;
  double t27688;
  double t27066;
  double t27084;
  double t27160;
  double t27223;
  double t27691;
  double t27692;
  double t27694;
  double t26519;
  double t26520;
  double t26523;
  double t26538;
  double t26539;
  double t26542;
  double t26553;
  double t26562;
  double t26563;
  double t26530;
  double t26531;
  double t26534;
  double t26448;
  double t26455;
  double t26456;
  double t26431;
  double t26437;
  double t26438;
  double t26514;
  double t26515;
  double t26516;
  double t26465;
  double t26480;
  double t26487;
  double t26373;
  double t26401;
  double t26402;
  double t26494;
  double t26507;
  double t26509;
  double t26416;
  double t26424;
  double t26426;
  double t26577;
  double t26578;
  double t26595;
  double t26517;
  double t26526;
  double t26535;
  double t26545;
  double t26573;
  double t26596;
  double t26597;
  double t24073;
  double t24094;
  double t24099;
  double t25090;
  double t25092;
  double t25095;
  double t25114;
  double t25294;
  double t25296;
  double t25297;
  double t25301;
  double t25304;
  double t25310;
  double t25311;
  double t25315;
  double t25317;
  double t25320;
  double t25325;
  double t24632;
  double t24638;
  double t24639;
  double t24646;
  double t24647;
  double t24708;
  double t24745;
  double t24823;
  double t24834;
  double t24837;
  double t24849;
  double t24913;
  double t24954;
  double t25019;
  double t25033;
  double t24497;
  double t24613;
  double t24627;
  double t25068;
  double t25080;
  double t25084;
  double t24101;
  double t24107;
  double t24300;
  double t24313;
  double t24315;
  double t24319;
  double t24321;
  double t24323;
  double t24327;
  double t24329;
  double t24337;
  double t24338;
  double t24339;
  double t24340;
  double t24343;
  double t25350;
  double t25355;
  double t25356;
  double t25357;
  double t25428;
  double t25493;
  double t25498;
  double t25499;
  double t25504;
  double t25508;
  double t25510;
  double t26058;
  double t26059;
  double t26068;
  double t26110;
  double t26120;
  double t26127;
  double t26279;
  double t26303;
  double t26304;
  double t26305;
  double t26307;
  double t26319;
  double t26326;
  double t26327;
  double t25928;
  double t25932;
  double t25937;
  double t25966;
  double t25976;
  double t26015;
  double t26017;
  double t26025;
  double t26027;
  double t26036;
  double t26037;
  double t26040;
  double t26041;
  double t25754;
  double t25773;
  double t25842;
  double t25862;
  double t25864;
  double t25865;
  double t25869;
  double t25870;
  double t25873;
  double t25878;
  double t25880;
  double t25887;
  double t25901;
  double t25907;
  double t25908;
  double t25909;
  double t25911;
  double t25919;
  double t25517;
  double t25521;
  double t25524;
  double t25525;
  double t25531;
  double t25562;
  double t25563;
  double t25643;
  double t25647;
  double t25648;
  double t25656;
  double t25663;
  double t25671;
  double t25673;
  double t25675;
  double t26801;
  double t26824;
  double t26832;
  double t26852;
  double t26862;
  double t26899;
  double t26904;
  double t26905;
  double t26907;
  double t26913;
  double t26915;
  double t26917;
  double t26918;
  double t26920;
  double t26932;
  double t26937;
  double t26938;
  double t26953;
  double t26961;
  double t26965;
  double t26966;
  double t26967;
  double t26970;
  double t26972;
  double t26975;
  double t26978;
  double t26979;
  double t26980;
  double t27029;
  double t27061;
  double t27062;
  double t27064;
  double t27082;
  double t27086;
  double t27141;
  double t27158;
  double t27198;
  double t27204;
  double t27253;
  double t27263;
  double t27264;
  double t27277;
  double t27453;
  double t27462;
  double t27466;
  double t27469;
  double t27470;
  double t27503;
  double t27535;
  double t27563;
  double t27565;
  double t27570;
  double t27571;
  double t27575;
  double t27576;
  double t27582;
  double t27584;
  double t27585;
  double t27587;
  double t27588;
  double t27612;
  double t27630;
  double t27636;
  double t27638;
  double t27639;
  double t27640;
  double t27645;
  double t27656;
  double t27671;
  double t27672;
  double t27673;
  double t27674;
  double t27676;
  double t27677;
  double t27678;
  double t27679;
  double t27680;
  double t27682;
  double t27689;
  double t27701;
  double t27707;
  double t27716;
  double t27719;
  double t27720;
  double t27725;
  double t27726;
  double t27727;
  double t27731;
  double t27732;
  double t27734;
  double t27737;
  double t27744;
  double t27748;
  double t27749;
  double t27750;
  double t27755;
  double t26403;
  double t26427;
  double t26439;
  double t26459;
  double t26488;
  double t26511;
  double t26512;
  double t27796;
  double t27797;
  double t27798;
  double t27801;
  double t27802;
  double t27804;
  double t27805;
  double t28163;
  double t28165;
  double t28167;
  double t28168;
  double t28169;
  double t28171;
  double t28174;
  double t27880;
  double t27884;
  double t27885;
  double t27886;
  double t27887;
  double t27892;
  double t27899;
  double t27468;
  double t27590;
  double t27637;
  double t27683;
  double t27715;
  double t27760;
  double t27762;
  double t28325;
  double t28366;
  double t28117;
  double t28121;
  double t28122;
  double t28130;
  double t28131;
  double t28136;
  double t28152;
  double t27852;
  double t27854;
  double t27855;
  double t27858;
  double t27859;
  double t27868;
  double t27870;
  double t26835;
  double t26921;
  double t26939;
  double t26981;
  double t27063;
  double t27334;
  double t27354;
  double t28324;
  double t28326;
  double t28333;
  double t28350;
  double t28352;
  double t28358;
  double t28361;
  double t28362;
  double t28368;
  double t28369;
  double t28390;
  double t28395;
  double t28398;
  double t28402;
  double t28403;
  double t28404;
  double t28420;
  double t28421;
  double t28423;
  double t28425;
  double t28426;
  double t28430;
  double t28438;
  double t28442;
  double t28443;
  double t28445;
  double t28447;
  double t28451;
  double t28454;
  double t24100;
  double t24346;
  double t24631;
  double t25057;
  double t25089;
  double t25345;
  double t25346;
  double t27962;
  double t27963;
  double t27964;
  double t27965;
  double t27967;
  double t27969;
  double t27971;
  double t27831;
  double t27832;
  double t27835;
  double t27836;
  double t27838;
  double t27839;
  double t27840;
  double t28595;
  double t28596;
  double t28597;
  double t28600;
  double t28612;
  double t28617;
  double t28646;
  double t28650;
  double t28696;
  double t28750;
  double t28783;
  double t28802;
  double t28815;
  double t28228;
  double t28231;
  double t28255;
  double t28263;
  double t28297;
  double t28302;
  double t28306;
  double t28308;
  double t28309;
  double t28312;
  double t28314;
  double t28315;
  double t28321;
  double t25516;
  double t25719;
  double t25875;
  double t25926;
  double t26043;
  double t26331;
  double t26344;
  double t29001;
  double t29003;
  double t29004;
  double t29005;
  double t29006;
  double t29009;
  double t29011;
  double t29014;
  double t29019;
  double t29020;
  double t29021;
  double t29030;
  double t29031;
  double t27976;
  double t28012;
  double t28024;
  double t28051;
  double t28053;
  double t28072;
  double t28076;
  double t27842;
  double t27844;
  double t27845;
  double t27846;
  double t27848;
  double t27849;
  double t27850;
  double t28828;
  double t28834;
  double t28835;
  double t28836;
  double t28837;
  double t28839;
  double t28841;
  double t28842;
  double t28844;
  double t28845;
  double t28848;
  double t28851;
  double t28854;
  double t28330;
  double t28360;
  double t28365;
  double t28371;
  double t28396;
  double t28406;
  double t28407;
  double t28409;
  double t28410;
  double t28411;
  double t28413;
  double t28414;
  double t28415;
  double t22626;
  double t22921;
  double t23088;
  double t23089;
  double t28967;
  double t28968;
  double t28971;
  double t28972;
  double t28974;
  double t29087;
  double t29095;
  double t29096;
  double t29100;
  double t29103;
  double t27910;
  double t27911;
  double t27912;
  double t27914;
  double t27772;
  double t27773;
  double t27792;
  double t27794;
  double t28489;
  double t28490;
  double t28492;
  double t28510;
  double t28530;
  double t28188;
  double t28191;
  double t28195;
  double t28196;
  double t28197;
  t12563 = Cos(var1[8]);
  t12614 = Sin(var1[8]);
  t14001 = 3.e-6*t12614;
  t14494 = 3.e-6*t12563;
  t6207 = Cos(var1[6]);
  t9639 = -1.*t6207;
  t10672 = 1. + t9639;
  t12590 = -3.e-6*t12563;
  t22201 = 9.e-12*t12614;
  t22217 = -2.7e-17*t12614;
  t14439 = t12590 + t14001;
  t14453 = 3.e-6*t14439;
  t18540 = t14494 + t14001;
  t19185 = 3.e-6*t18540;
  t19545 = -1.8e-11*t12614;
  t19710 = t14453 + t19185 + t19545;
  t20779 = Sin(var1[6]);
  t21657 = -1.*t12563;
  t22203 = t21657 + t22201;
  t22204 = 3.e-6*t22203;
  t22223 = t14494 + t22204 + t22217;
  t22298 = t12563 + t22201;
  t22351 = 3.e-6*t22298;
  t22354 = t12590 + t22351 + t22217;
  t22529 = Sin(var1[4]);
  t22575 = -1.000000000009*t10672;
  t22582 = 1. + t22575;
  t3826 = Cos(var1[4]);
  t4707 = Sin(var1[5]);
  t11161 = -9.e-12*t10672;
  t12155 = 1. + t11161;
  t22631 = -3.000000000054e-6*t12614;
  t22675 = t12590 + t22631;
  t22716 = -9.e-12*t12614;
  t22717 = t12563 + t19185 + t22716;
  t22751 = 1.000000000009*t12614;
  t22754 = t14453 + t22751;
  t22366 = Cos(var1[5]);
  t22932 = t14494 + t22631;
  t22975 = t21657 + t14453 + t22716;
  t22990 = t19185 + t22751;
  t23112 = 1. + t21657;
  t23206 = -3.e-6*t12614;
  t23205 = 3.e-6*t23112;
  t23178 = 1.000000000009*t23112;
  t23211 = t23205 + t23206;
  t23215 = 3.e-6*t23211;
  t23216 = -1. + t23178 + t23215;
  t23240 = -1.8e-11*t23112;
  t23241 = 1. + t23240;
  t23251 = 3.e-6*t23241;
  t23255 = -3.e-6*t23112;
  t23259 = t23251 + t23255 + t23206;
  t23274 = -9.e-12*t23112;
  t23277 = t23205 + t14001;
  t23279 = 3.e-6*t23277;
  t23284 = t23274 + t23279 + t12614;
  t22712 = -3.e-6*t20779*t22675;
  t22724 = t22582*t22717;
  t22755 = t20779*t22754;
  t22756 = t22712 + t22724 + t22755;
  t22809 = t22529*t22756;
  t22871 = t12155*t22675;
  t22873 = 3.e-6*t20779*t22717;
  t22878 = 3.e-6*t10672*t22754;
  t22884 = t22871 + t22873 + t22878;
  t22889 = -1.*t4707*t22884;
  t22891 = 3.e-6*t10672*t22675;
  t22893 = -1.*t20779*t22717;
  t22899 = t6207*t22754;
  t22902 = t22891 + t22893 + t22899;
  t22903 = t22366*t22902;
  t22908 = t22889 + t22903;
  t22913 = t3826*t22908;
  t22914 = t22809 + t22913;
  t23454 = -1. + t23178 + t23279;
  t23520 = -1.*t12614;
  t23523 = t23274 + t23215 + t23520;
  t23554 = t23251 + t23255 + t14001;
  t22948 = -3.e-6*t20779*t22932;
  t22988 = t20779*t22975;
  t22991 = t22582*t22990;
  t22992 = t22948 + t22988 + t22991;
  t23050 = t22529*t22992;
  t23056 = 3.e-6*t10672*t22932;
  t23059 = t6207*t22975;
  t23061 = -1.*t20779*t22990;
  t23064 = t23056 + t23059 + t23061;
  t23067 = t22366*t23064;
  t23070 = t12155*t22932;
  t23075 = 3.e-6*t10672*t22975;
  t23076 = 3.e-6*t20779*t22990;
  t23077 = t23070 + t23075 + t23076;
  t23078 = -1.*t4707*t23077;
  t23079 = t23067 + t23078;
  t23080 = t3826*t23079;
  t23084 = t23050 + t23080;
  t19891 = t12155*t19710;
  t22225 = 3.e-6*t20779*t22223;
  t22359 = 3.e-6*t10672*t22354;
  t22364 = t19891 + t22225 + t22359;
  t22365 = -1.*t4707*t22364;
  t22369 = 3.e-6*t10672*t19710;
  t22373 = -1.*t20779*t22223;
  t22396 = t6207*t22354;
  t22464 = t22369 + t22373 + t22396;
  t22466 = t22366*t22464;
  t22476 = t22365 + t22466;
  t22495 = t3826*t22476;
  t22530 = -3.e-6*t20779*t19710;
  t22586 = t22582*t22223;
  t22587 = t20779*t22354;
  t22590 = t22530 + t22586 + t22587;
  t22609 = t22529*t22590;
  t22621 = t22495 + t22609;
  t23699 = -1.000000000009*t23112;
  t23701 = 1. + t23699;
  t23738 = 3.e-6*t23701;
  t23744 = 9.e-12*t23112;
  t23695 = 1. + t23240 + t23215 + t23279;
  t23768 = t23744 + t23520;
  t23772 = 3.e-6*t23768;
  t23775 = t23738 + t23205 + t23772 + t14001;
  t23785 = t23744 + t12614;
  t23795 = 3.e-6*t23785;
  t23796 = t23738 + t23205 + t23206 + t23795;
  t23226 = t20779*t23216;
  t23262 = -3.e-6*t20779*t23259;
  t23287 = t22582*t23284;
  t23289 = t23226 + t23262 + t23287;
  t23665 = t22582*t23454;
  t23668 = t20779*t23523;
  t23681 = -3.e-6*t20779*t23554;
  t23683 = t23665 + t23668 + t23681;
  t23972 = t23255 + t14001;
  t23926 = 9.e-13*var1[8];
  t23991 = t23255 + t23206;
  t23570 = -1.*t20779*t23454;
  t23592 = t6207*t23523;
  t23615 = 3.e-6*t10672*t23554;
  t23653 = t23570 + t23592 + t23615;
  t23941 = 0.2*t23701;
  t23949 = 0.2000000000018*t23112;
  t23954 = t23274 + t23520;
  t23959 = 0.1*t23954;
  t23964 = 0.1*t23211;
  t23975 = -9.e-7*t23972;
  t23976 = t23926 + t23941 + t23949 + t23959 + t23964 + t23975;
  t23982 = 3.e-7*var1[8];
  t23986 = 0.1*t23241;
  t23988 = -1.62e-17*t23112;
  t23992 = 0.2*t23991;
  t23994 = 0.1*t23972;
  t23996 = 0.2*t23277;
  t23998 = t23982 + t23986 + t23988 + t23992 + t23994 + t23996;
  t24010 = 0.1000000000009*t23112;
  t24014 = 0.2*t23768;
  t24015 = -9.e-7*t23991;
  t24017 = 0.1*t23277;
  t24018 = t23274 + t12614;
  t24022 = 0.2*t24018;
  t24023 = t23926 + t24010 + t24014 + t24015 + t24017 + t24022;
  t23458 = 3.e-6*t20779*t23454;
  t23542 = 3.e-6*t10672*t23523;
  t23556 = t12155*t23554;
  t23558 = t23458 + t23542 + t23556;
  t23920 = -0.2000000000018*t20779;
  t23978 = t20779*t23976;
  t24000 = -3.e-6*t20779*t23998;
  t24028 = t22582*t24023;
  t24030 = t23920 + t23978 + t24000 + t24028;
  t23297 = t6207*t23216;
  t23298 = 3.e-6*t10672*t23259;
  t23299 = -1.*t20779*t23284;
  t23300 = t23297 + t23298 + t23299;
  t24035 = 0.2000000000018*t10672;
  t24044 = t6207*t23976;
  t24053 = 3.e-6*t10672*t23998;
  t24054 = -1.*t20779*t24023;
  t24056 = t24035 + t24044 + t24053 + t24054;
  t23350 = 3.e-6*t10672*t23216;
  t23363 = t12155*t23259;
  t23375 = 3.e-6*t20779*t23284;
  t23376 = t23350 + t23363 + t23375;
  t24060 = -6.000000000054e-7*t10672;
  t24062 = 3.e-6*t10672*t23976;
  t24063 = t12155*t23998;
  t24066 = 3.e-6*t20779*t24023;
  t24067 = t24060 + t24062 + t24063 + t24066;
  t24031 = -1.*t23683*t24030;
  t24059 = -1.*t23653*t24056;
  t24069 = -1.*t23558*t24067;
  t24070 = t24031 + t24059 + t24069;
  t24077 = t23289*t24030;
  t24080 = t23300*t24056;
  t24085 = t23376*t24067;
  t24092 = t24077 + t24080 + t24085;
  t24111 = t14494 + t23206;
  t24195 = t12590 + t23206;
  t24135 = -9.e-7*t24111;
  t24144 = t21657 + t22716;
  t24160 = 0.1*t24144;
  t24167 = 0.1*t14439;
  t24176 = 9.e-13 + t24135 + t24160 + t24167;
  t24198 = 0.2*t24195;
  t24199 = 0.1*t24111;
  t24201 = 0.2*t18540;
  t24203 = -1.8000162e-12*t12614;
  t24205 = 3.e-7 + t24198 + t24199 + t24201 + t24203;
  t24207 = -9.e-7*t24195;
  t24219 = t12563 + t22716;
  t24222 = 0.2*t24219;
  t24226 = 0.2*t22203;
  t24237 = 0.1*t18540;
  t24241 = 0.1000000000009*t12614;
  t24247 = 9.e-13 + t24207 + t24222 + t24226 + t24237 + t24241;
  t24177 = t20779*t24176;
  t24206 = -3.e-6*t20779*t24205;
  t24269 = t22582*t24247;
  t24288 = t24177 + t24206 + t24269;
  t24290 = t6207*t24176;
  t24291 = 3.e-6*t10672*t24205;
  t24295 = -1.*t20779*t24247;
  t24298 = t24290 + t24291 + t24295;
  t24301 = 3.e-6*t10672*t24176;
  t24307 = t12155*t24205;
  t24308 = 3.e-6*t20779*t24247;
  t24310 = t24301 + t24307 + t24308;
  t23698 = -3.e-6*t20779*t23695;
  t23776 = t22582*t23775;
  t23797 = t20779*t23796;
  t23798 = t23698 + t23776 + t23797;
  t23799 = t22529*t23798;
  t23800 = t12155*t23695;
  t23802 = 3.e-6*t20779*t23775;
  t23804 = 3.e-6*t10672*t23796;
  t23833 = t23800 + t23802 + t23804;
  t23835 = -1.*t4707*t23833;
  t23841 = 3.e-6*t10672*t23695;
  t23852 = -1.*t20779*t23775;
  t23865 = t6207*t23796;
  t23867 = t23841 + t23852 + t23865;
  t23870 = t22366*t23867;
  t23871 = t23835 + t23870;
  t23874 = t3826*t23871;
  t23875 = t23799 + t23874;
  t23290 = t22529*t23289;
  t23301 = t22366*t23300;
  t23391 = -1.*t4707*t23376;
  t23439 = t23301 + t23391;
  t23444 = t3826*t23439;
  t23448 = t23290 + t23444;
  t24351 = t23683*t24030;
  t24353 = t23653*t24056;
  t24396 = t23558*t24067;
  t24459 = t24351 + t24353 + t24396;
  t24512 = -1.*t24067*t23833;
  t24590 = -1.*t24056*t23867;
  t24596 = -1.*t24030*t23798;
  t24603 = t24512 + t24590 + t24596;
  t23569 = -1.*t4707*t23558;
  t23660 = t22366*t23653;
  t23662 = t23569 + t23660;
  t23664 = t3826*t23662;
  t23685 = t22529*t23683;
  t23687 = t23664 + t23685;
  t25060 = -1.*t23289*t24030;
  t25061 = -1.*t23300*t24056;
  t25064 = -1.*t23376*t24067;
  t25066 = t25060 + t25061 + t25064;
  t25069 = t24067*t23833;
  t25075 = t24056*t23867;
  t25076 = t24030*t23798;
  t25078 = t25069 + t25075 + t25076;
  t25390 = -1.*t23976*t23523;
  t25394 = -1.*t23998*t23554;
  t25416 = -1.*t23454*t24023;
  t25422 = t25390 + t25394 + t25416;
  t25462 = t23216*t23976;
  t25468 = t23998*t23259;
  t25484 = t23284*t24023;
  t25489 = t25462 + t25468 + t25484;
  t25533 = t23216*t24176;
  t25534 = t23998*t22675;
  t25547 = t23259*t24205;
  t25548 = t24247*t23284;
  t25555 = t23976*t22754;
  t25556 = t22717*t24023;
  t25557 = t25533 + t25534 + t25547 + t25548 + t25555 + t25556;
  t25572 = -1.*t24176*t23523;
  t25584 = -1.*t23998*t22932;
  t25599 = -1.*t23976*t22975;
  t25614 = -1.*t24205*t23554;
  t25620 = -1.*t23454*t24247;
  t25626 = -1.*t22990*t24023;
  t25632 = t25572 + t25584 + t25599 + t25614 + t25620 + t25626;
  t25791 = t23976*t23523;
  t25815 = t23998*t23554;
  t25837 = t23454*t24023;
  t25838 = t25791 + t25815 + t25837;
  t25851 = -1.*t23695*t23998;
  t25853 = -1.*t23775*t24023;
  t25855 = -1.*t23976*t23796;
  t25858 = t25851 + t25853 + t25855;
  t25720 = -3.e-6*t23277;
  t25882 = -1.*t23216*t23976;
  t25884 = -1.*t23998*t23259;
  t25885 = -1.*t23284*t24023;
  t25886 = t25882 + t25884 + t25885;
  t25889 = t23695*t23998;
  t25895 = t23775*t24023;
  t25899 = t23976*t23796;
  t25900 = t25889 + t25895 + t25899;
  t25940 = t24176*t23523;
  t25942 = t23998*t22932;
  t25948 = t23976*t22975;
  t25952 = t24205*t23554;
  t25954 = t23454*t24247;
  t25956 = t22990*t24023;
  t25962 = t25940 + t25942 + t25948 + t25952 + t25954 + t25956;
  t25979 = -1.*t23998*t19710;
  t25983 = -1.*t23695*t24205;
  t25987 = -1.*t23976*t22354;
  t25991 = -1.*t23775*t24247;
  t25994 = -1.*t22223*t24023;
  t26010 = -1.*t24176*t23796;
  t26013 = t25979 + t25983 + t25987 + t25991 + t25994 + t26010;
  t25927 = -3.e-6*t18540;
  t26072 = -1.*t23216*t24176;
  t26074 = -1.*t23998*t22675;
  t26076 = -1.*t23259*t24205;
  t26080 = -1.*t24247*t23284;
  t26090 = -1.*t23976*t22754;
  t26102 = -1.*t22717*t24023;
  t26104 = t26072 + t26074 + t26076 + t26080 + t26090 + t26102;
  t26129 = t23998*t19710;
  t26147 = t23695*t24205;
  t26242 = t23976*t22354;
  t26243 = t23775*t24247;
  t26246 = t22223*t24023;
  t26251 = t24176*t23796;
  t26272 = t26129 + t26147 + t26242 + t26243 + t26246 + t26251;
  t26365 = Sin(var1[3]);
  t26396 = Cos(var1[3]);
  t26366 = t22366*t23558;
  t26367 = t4707*t23653;
  t26372 = t26366 + t26367;
  t26397 = -1.*t22529*t23662;
  t26398 = t3826*t23683;
  t26400 = t26397 + t26398;
  t26406 = t22366*t22364;
  t26407 = t4707*t22464;
  t26408 = t26406 + t26407;
  t26420 = -1.*t22529*t22476;
  t26422 = t3826*t22590;
  t26423 = t26420 + t26422;
  t26428 = t4707*t23300;
  t26429 = t22366*t23376;
  t26430 = t26428 + t26429;
  t26432 = t3826*t23289;
  t26434 = -1.*t22529*t23439;
  t26436 = t26432 + t26434;
  t26440 = t22366*t22884;
  t26441 = t4707*t22902;
  t26444 = t26440 + t26441;
  t26450 = t3826*t22756;
  t26451 = -1.*t22529*t22908;
  t26452 = t26450 + t26451;
  t26461 = t4707*t23064;
  t26463 = t22366*t23077;
  t26464 = t26461 + t26463;
  t26474 = t3826*t22992;
  t26475 = -1.*t22529*t23079;
  t26479 = t26474 + t26475;
  t26490 = t22366*t23833;
  t26491 = t4707*t23867;
  t26493 = t26490 + t26491;
  t26496 = t3826*t23798;
  t26501 = -1.*t22529*t23871;
  t26506 = t26496 + t26501;
  t26600 = t4707*t24056;
  t26601 = t22366*t24067;
  t26610 = t26600 + t26601;
  t26616 = t22366*t24056;
  t26671 = -1.*t4707*t24067;
  t26720 = t26616 + t26671;
  t26611 = -1.*t26372*t26610;
  t26796 = -1.*t23662*t26720;
  t26800 = t24031 + t26611 + t26796;
  t26806 = t26430*t26610;
  t26809 = t23439*t26720;
  t26811 = t24077 + t26806 + t26809;
  t24289 = t24288*t23289;
  t24314 = t22756*t24030;
  t26864 = t4707*t24298;
  t26878 = t22366*t24310;
  t26880 = t26864 + t26878;
  t26885 = t22366*t24298;
  t26887 = -1.*t4707*t24310;
  t26890 = t26885 + t26887;
  t24326 = -1.*t23683*t24288;
  t24333 = -1.*t22992*t24030;
  t26923 = t26372*t26610;
  t26925 = t23662*t26720;
  t26931 = t24351 + t26923 + t26925;
  t24637 = t23683*t24288;
  t24642 = t22992*t24030;
  t24781 = -1.*t22590*t24030;
  t24903 = -1.*t24288*t23798;
  t26933 = -1.*t26720*t23871;
  t26935 = -1.*t26610*t26493;
  t26936 = t24596 + t26933 + t26935;
  t27012 = -1.*t26430*t26610;
  t27015 = -1.*t23439*t26720;
  t27016 = t25060 + t27012 + t27015;
  t25091 = -1.*t24288*t23289;
  t25097 = -1.*t22756*t24030;
  t25300 = t22590*t24030;
  t25312 = t24288*t23798;
  t27038 = t26720*t23871;
  t27046 = t26610*t26493;
  t27060 = t25076 + t27038 + t27046;
  t27400 = t22529*t24030;
  t27431 = t3826*t26720;
  t27436 = t27400 + t27431;
  t27442 = t3826*t24030;
  t27446 = -1.*t22529*t26720;
  t27450 = t27442 + t27446;
  t27441 = -1.*t23687*t27436;
  t27451 = -1.*t26400*t27450;
  t27452 = t26611 + t27441 + t27451;
  t27456 = t23448*t27436;
  t27458 = t26436*t27450;
  t27459 = t26806 + t27456 + t27458;
  t26882 = t26880*t26430;
  t26902 = t26444*t26610;
  t27513 = -1.*t22529*t26890;
  t27515 = t3826*t24288;
  t27531 = t27513 + t27515;
  t27479 = t3826*t26890;
  t27483 = t22529*t24288;
  t27495 = t27479 + t27483;
  t26908 = -1.*t26372*t26880;
  t26914 = -1.*t26464*t26610;
  t27600 = t23687*t27436;
  t27606 = t26400*t27450;
  t27611 = t26923 + t27600 + t27606;
  t26957 = t26372*t26880;
  t26964 = t26464*t26610;
  t26969 = -1.*t26408*t26610;
  t26974 = -1.*t26880*t26493;
  t27614 = -1.*t27436*t23875;
  t27618 = -1.*t27450*t26506;
  t27621 = t26935 + t27614 + t27618;
  t27685 = -1.*t23448*t27436;
  t27687 = -1.*t26436*t27450;
  t27688 = t27012 + t27685 + t27687;
  t27066 = -1.*t26880*t26430;
  t27084 = -1.*t26444*t26610;
  t27160 = t26408*t26610;
  t27223 = t26880*t26493;
  t27691 = t27436*t23875;
  t27692 = t27450*t26506;
  t27694 = t27046 + t27691 + t27692;
  t26519 = t26396*t26408;
  t26520 = -1.*t26365*t26423;
  t26523 = t26519 + t26520;
  t26538 = t26396*t26444;
  t26539 = -1.*t26365*t26452;
  t26542 = t26538 + t26539;
  t26553 = t26396*t26464;
  t26562 = -1.*t26365*t26479;
  t26563 = t26553 + t26562;
  t26530 = t26396*t26430;
  t26531 = -1.*t26365*t26436;
  t26534 = t26530 + t26531;
  t26448 = t26365*t26444;
  t26455 = t26396*t26452;
  t26456 = t26448 + t26455;
  t26431 = t26365*t26430;
  t26437 = t26396*t26436;
  t26438 = t26431 + t26437;
  t26514 = t26396*t26372;
  t26515 = -1.*t26365*t26400;
  t26516 = t26514 + t26515;
  t26465 = t26365*t26464;
  t26480 = t26396*t26479;
  t26487 = t26465 + t26480;
  t26373 = t26365*t26372;
  t26401 = t26396*t26400;
  t26402 = t26373 + t26401;
  t26494 = t26365*t26493;
  t26507 = t26396*t26506;
  t26509 = t26494 + t26507;
  t26416 = t26365*t26408;
  t26424 = t26396*t26423;
  t26426 = t26416 + t26424;
  t26577 = t26396*t26493;
  t26578 = -1.*t26365*t26506;
  t26595 = t26577 + t26578;
  t26517 = 0.05186*t26516*t23084;
  t26526 = 0.05186*t26523*t23875;
  t26535 = 0.05186*t22914*t26534;
  t26545 = 0.05186*t23448*t26542;
  t26573 = 0.05186*t23687*t26563;
  t26596 = 0.05186*t22621*t26595;
  t26597 = t26517 + t26526 + t26535 + t26545 + t26573 + t26596;
  t24073 = t23289*t24070;
  t24094 = t23683*t24092;
  t24099 = t24073 + t24094;
  t25090 = t22590*t25066;
  t25092 = -1.*t24298*t23300;
  t25095 = -1.*t24310*t23376;
  t25114 = -1.*t22902*t24056;
  t25294 = -1.*t22884*t24067;
  t25296 = t25091 + t25092 + t25095 + t25097 + t25114 + t25294;
  t25297 = t23798*t25296;
  t25301 = t22464*t24056;
  t25304 = t22364*t24067;
  t25310 = t24310*t23833;
  t25311 = t24298*t23867;
  t25315 = t25300 + t25301 + t25304 + t25310 + t25311 + t25312;
  t25317 = t23289*t25315;
  t25320 = t22756*t25078;
  t25325 = t25090 + t25297 + t25317 + t25320;
  t24632 = t22590*t24459;
  t24638 = t23653*t24298;
  t24639 = t23558*t24310;
  t24646 = t23064*t24056;
  t24647 = t23077*t24067;
  t24708 = t24637 + t24638 + t24639 + t24642 + t24646 + t24647;
  t24745 = t23798*t24708;
  t24823 = -1.*t22464*t24056;
  t24834 = -1.*t22364*t24067;
  t24837 = -1.*t24310*t23833;
  t24849 = -1.*t24298*t23867;
  t24913 = t24781 + t24823 + t24834 + t24837 + t24849 + t24903;
  t24954 = t23683*t24913;
  t25019 = t22992*t24603;
  t25033 = t24632 + t24745 + t24954 + t25019;
  t24497 = t23798*t24459;
  t24613 = t23683*t24603;
  t24627 = t24497 + t24613;
  t25068 = t23798*t25066;
  t25080 = t23289*t25078;
  t25084 = t25068 + t25080;
  t24101 = t22756*t24070;
  t24107 = t22992*t24092;
  t24300 = t24298*t23300;
  t24313 = t24310*t23376;
  t24315 = t22902*t24056;
  t24319 = t22884*t24067;
  t24321 = t24289 + t24300 + t24313 + t24314 + t24315 + t24319;
  t24323 = t23683*t24321;
  t24327 = -1.*t23653*t24298;
  t24329 = -1.*t23558*t24310;
  t24337 = -1.*t23064*t24056;
  t24338 = -1.*t23077*t24067;
  t24339 = t24326 + t24327 + t24329 + t24333 + t24337 + t24338;
  t24340 = t23289*t24339;
  t24343 = t24101 + t24107 + t24323 + t24340;
  t25350 = -3.e-6*t23701;
  t25355 = -3.e-6*t23768;
  t25356 = t25350 + t23255 + t25355 + t23206;
  t25357 = 0.2*t25356;
  t25428 = -1.*t23259*t25422;
  t25493 = -1.*t23554*t25489;
  t25498 = t23216*t25422;
  t25499 = t23523*t25489;
  t25504 = t25498 + t25499;
  t25508 = -3.e-6*t25504;
  t25510 = t25357 + t25428 + t25493 + t25508;
  t26058 = -1.000000000009*t12614;
  t26059 = t25927 + t26058;
  t26068 = 0.2*t26059;
  t26110 = -1.*t23695*t26104;
  t26120 = -1.*t19710*t25886;
  t26127 = -1.*t22675*t25900;
  t26279 = -1.*t23259*t26272;
  t26303 = t23796*t26104;
  t26304 = t22354*t25886;
  t26305 = t22754*t25900;
  t26307 = t23216*t26272;
  t26319 = t26303 + t26304 + t26305 + t26307;
  t26326 = -3.e-6*t26319;
  t26327 = t26068 + t26110 + t26120 + t26127 + t26279 + t26326;
  t25928 = t21657 + t25927 + t22201;
  t25932 = 0.2*t25928;
  t25937 = -1.*t19710*t25838;
  t25966 = -1.*t23695*t25962;
  t25976 = -1.*t22932*t25858;
  t26015 = -1.*t23554*t26013;
  t26017 = t22354*t25838;
  t26025 = t23796*t25962;
  t26027 = t22975*t25858;
  t26036 = t23523*t26013;
  t26037 = t26017 + t26025 + t26027 + t26036;
  t26040 = -3.e-6*t26037;
  t26041 = t25932 + t25937 + t25966 + t25976 + t26015 + t26040;
  t25754 = t23744 + t25720 + t23520;
  t25773 = 0.2*t25754;
  t25842 = -1.*t23695*t25838;
  t25862 = -1.*t23554*t25858;
  t25864 = t23796*t25838;
  t25865 = t23523*t25858;
  t25869 = t25864 + t25865;
  t25870 = -3.e-6*t25869;
  t25873 = t25773 + t25842 + t25862 + t25870;
  t25878 = 1. + t23699 + t25720;
  t25880 = 0.2*t25878;
  t25887 = -1.*t23695*t25886;
  t25901 = -1.*t23259*t25900;
  t25907 = t23796*t25886;
  t25908 = t23216*t25900;
  t25909 = t25907 + t25908;
  t25911 = -3.e-6*t25909;
  t25919 = t25880 + t25887 + t25901 + t25911;
  t25517 = -3.e-6*t22203;
  t25521 = 2.7e-17*t12614;
  t25524 = t12590 + t25517 + t25521;
  t25525 = 0.2*t25524;
  t25531 = -1.*t22675*t25422;
  t25562 = -1.*t23554*t25557;
  t25563 = -1.*t22932*t25489;
  t25643 = -1.*t23259*t25632;
  t25647 = t22754*t25422;
  t25648 = t23523*t25557;
  t25656 = t22975*t25489;
  t25663 = t23216*t25632;
  t25671 = t25647 + t25648 + t25656 + t25663;
  t25673 = -3.e-6*t25671;
  t25675 = t25525 + t25531 + t25562 + t25563 + t25643 + t25673;
  t26801 = t26430*t26800;
  t26824 = t26372*t26811;
  t26832 = t26801 + t26824;
  t26852 = t26444*t26800;
  t26862 = t26464*t26811;
  t26899 = t26890*t23439;
  t26904 = t22908*t26720;
  t26905 = t24289 + t24314 + t26882 + t26899 + t26902 + t26904;
  t26907 = t26372*t26905;
  t26913 = -1.*t23662*t26890;
  t26915 = -1.*t23079*t26720;
  t26917 = t26908 + t26913 + t24326 + t24333 + t26914 + t26915;
  t26918 = t26430*t26917;
  t26920 = t26852 + t26862 + t26907 + t26918;
  t26932 = t26493*t26931;
  t26937 = t26372*t26936;
  t26938 = t26932 + t26937;
  t26953 = t26408*t26931;
  t26961 = t23662*t26890;
  t26965 = t23079*t26720;
  t26966 = t26957 + t26961 + t24637 + t24642 + t26964 + t26965;
  t26967 = t26493*t26966;
  t26970 = -1.*t22476*t26720;
  t26972 = -1.*t26890*t23871;
  t26975 = t24781 + t24903 + t26969 + t26970 + t26972 + t26974;
  t26978 = t26372*t26975;
  t26979 = t26464*t26936;
  t26980 = t26953 + t26967 + t26978 + t26979;
  t27029 = t26493*t27016;
  t27061 = t26430*t27060;
  t27062 = t27029 + t27061;
  t27064 = t26408*t27016;
  t27082 = -1.*t26890*t23439;
  t27086 = -1.*t22908*t26720;
  t27141 = t25091 + t25097 + t27066 + t27082 + t27084 + t27086;
  t27158 = t26493*t27141;
  t27198 = t22476*t26720;
  t27204 = t26890*t23871;
  t27253 = t25300 + t25312 + t27160 + t27198 + t27204 + t27223;
  t27263 = t26430*t27253;
  t27264 = t26444*t27060;
  t27277 = t27064 + t27158 + t27263 + t27264;
  t27453 = t23448*t27452;
  t27462 = t23687*t27459;
  t27466 = t27453 + t27462;
  t27469 = t22914*t27452;
  t27470 = t23084*t27459;
  t27503 = t27495*t23448;
  t27535 = t27531*t26436;
  t27563 = t22914*t27436;
  t27565 = t26452*t27450;
  t27570 = t26882 + t26902 + t27503 + t27535 + t27563 + t27565;
  t27571 = t23687*t27570;
  t27575 = -1.*t26400*t27531;
  t27576 = -1.*t23687*t27495;
  t27582 = -1.*t23084*t27436;
  t27584 = -1.*t26479*t27450;
  t27585 = t27575 + t27576 + t26908 + t26914 + t27582 + t27584;
  t27587 = t23448*t27585;
  t27588 = t27469 + t27470 + t27571 + t27587;
  t27612 = t23875*t27611;
  t27630 = t23687*t27621;
  t27636 = t27612 + t27630;
  t27638 = t22621*t27611;
  t27639 = t26400*t27531;
  t27640 = t23687*t27495;
  t27645 = t23084*t27436;
  t27656 = t26479*t27450;
  t27671 = t27639 + t27640 + t26957 + t26964 + t27645 + t27656;
  t27672 = t23875*t27671;
  t27673 = -1.*t22621*t27436;
  t27674 = -1.*t26423*t27450;
  t27676 = -1.*t27495*t23875;
  t27677 = -1.*t27531*t26506;
  t27678 = t26969 + t26974 + t27673 + t27674 + t27676 + t27677;
  t27679 = t23687*t27678;
  t27680 = t23084*t27621;
  t27682 = t27638 + t27672 + t27679 + t27680;
  t27689 = t23875*t27688;
  t27701 = t23448*t27694;
  t27707 = t27689 + t27701;
  t27716 = t22621*t27688;
  t27719 = -1.*t27495*t23448;
  t27720 = -1.*t27531*t26436;
  t27725 = -1.*t22914*t27436;
  t27726 = -1.*t26452*t27450;
  t27727 = t27066 + t27084 + t27719 + t27720 + t27725 + t27726;
  t27731 = t23875*t27727;
  t27732 = t22621*t27436;
  t27734 = t26423*t27450;
  t27737 = t27495*t23875;
  t27744 = t27531*t26506;
  t27748 = t27160 + t27223 + t27732 + t27734 + t27737 + t27744;
  t27749 = t23448*t27748;
  t27750 = t22914*t27694;
  t27755 = t27716 + t27731 + t27749 + t27750;
  t26403 = 0.05186*t26402*t23084;
  t26427 = 0.05186*t26426*t23875;
  t26439 = 0.05186*t22914*t26438;
  t26459 = 0.05186*t23448*t26456;
  t26488 = 0.05186*t23687*t26487;
  t26511 = 0.05186*t22621*t26509;
  t26512 = t26403 + t26427 + t26439 + t26459 + t26488 + t26511;
  t27796 = 0.05186*t26534*t26456;
  t27797 = 0.05186*t26438*t26542;
  t27798 = 0.05186*t26516*t26487;
  t27801 = 0.05186*t26402*t26563;
  t27802 = 0.05186*t26523*t26509;
  t27804 = 0.05186*t26426*t26595;
  t27805 = t27796 + t27797 + t27798 + t27801 + t27802 + t27804;
  t28163 = 0.05186*t26426*t27466;
  t28165 = 0.05186*t26509*t27588;
  t28167 = 0.05186*t26456*t27636;
  t28168 = 0.05186*t26438*t27682;
  t28169 = 0.05186*t26487*t27707;
  t28171 = 0.05186*t26402*t27755;
  t28174 = t28163 + t28165 + t28167 + t28168 + t28169 + t28171;
  t27880 = 0.05186*t26523*t27466;
  t27884 = 0.05186*t26595*t27588;
  t27885 = 0.05186*t26542*t27636;
  t27886 = 0.05186*t26534*t27682;
  t27887 = 0.05186*t26563*t27707;
  t27892 = 0.05186*t26516*t27755;
  t27899 = t27880 + t27884 + t27885 + t27886 + t27887 + t27892;
  t27468 = 0.05186*t22621*t27466;
  t27590 = 0.05186*t23875*t27588;
  t27637 = 0.05186*t22914*t27636;
  t27683 = 0.05186*t23448*t27682;
  t27715 = 0.05186*t23084*t27707;
  t27760 = 0.05186*t23687*t27755;
  t27762 = t27468 + t27590 + t27637 + t27683 + t27715 + t27760;
  t28325 = 3.000000000054e-6*t12614;
  t28366 = -3.e-6*t23241;
  t28117 = 0.05186*t26426*t26832;
  t28121 = 0.05186*t26920*t26509;
  t28122 = 0.05186*t26456*t26938;
  t28130 = 0.05186*t26438*t26980;
  t28131 = 0.05186*t26487*t27062;
  t28136 = 0.05186*t26402*t27277;
  t28152 = t28117 + t28121 + t28122 + t28130 + t28131 + t28136;
  t27852 = 0.05186*t26523*t26832;
  t27854 = 0.05186*t26920*t26595;
  t27855 = 0.05186*t26542*t26938;
  t27858 = 0.05186*t26534*t26980;
  t27859 = 0.05186*t26563*t27062;
  t27868 = 0.05186*t26516*t27277;
  t27870 = t27852 + t27854 + t27855 + t27858 + t27859 + t27868;
  t26835 = 0.05186*t22621*t26832;
  t26921 = 0.05186*t23875*t26920;
  t26939 = 0.05186*t22914*t26938;
  t26981 = 0.05186*t23448*t26980;
  t27063 = 0.05186*t23084*t27062;
  t27334 = 0.05186*t23687*t27277;
  t27354 = t26835 + t26921 + t26939 + t26981 + t27063 + t27334;
  t28324 = -3.e-6*t22975;
  t28326 = t12590 + t28324 + t28325;
  t28333 = 1.8e-11*t23112;
  t28350 = -3.e-6*t23211;
  t28352 = -3.e-6*t23796;
  t28358 = -1. + t28333 + t28350 + t25720 + t28352;
  t28361 = -3.e-6*t22754;
  t28362 = t14494 + t28325 + t28361;
  t28368 = -3.e-6*t23216;
  t28369 = t28366 + t23205 + t28368 + t14001;
  t28390 = -3.e-6*t23523;
  t28395 = t28366 + t23205 + t28390 + t23206;
  t28398 = -3.e-6*t22354;
  t28402 = -3.e-6*t14439;
  t28403 = 1.8e-11*t12614;
  t28404 = t28398 + t28402 + t25927 + t28403;
  t28420 = 0.000245*t23687*t26464;
  t28421 = 0.000245*t22621*t26493;
  t28423 = 2.e-6*t26444*t23448;
  t28425 = 2.e-6*t26430*t22914;
  t28426 = 0.000245*t26372*t23084;
  t28430 = 0.000245*t26408*t23875;
  t28438 = 0.05186*t26920*t27466;
  t28442 = 0.05186*t26832*t27588;
  t28443 = 0.05186*t26980*t27636;
  t28445 = 0.05186*t26938*t27682;
  t28447 = 0.05186*t27277*t27707;
  t28451 = 0.05186*t27062*t27755;
  t28454 = t28420 + t28421 + t28423 + t28425 + t28426 + t28430 + t28438 + t28442 + t28443 + t28445 + t28447 + t28451;
  t24100 = 0.05186*t22621*t24099;
  t24346 = 0.05186*t24343*t23875;
  t24631 = 0.05186*t22914*t24627;
  t25057 = 0.05186*t23448*t25033;
  t25089 = 0.05186*t23084*t25084;
  t25345 = 0.05186*t23687*t25325;
  t25346 = t24100 + t24346 + t24631 + t25057 + t25089 + t25345;
  t27962 = 0.05186*t26426*t24099;
  t27963 = 0.05186*t26402*t25325;
  t27964 = 0.05186*t25033*t26438;
  t27965 = 0.05186*t24627*t26456;
  t27967 = 0.05186*t25084*t26487;
  t27969 = 0.05186*t24343*t26509;
  t27971 = t27962 + t27963 + t27964 + t27965 + t27967 + t27969;
  t27831 = 0.05186*t26523*t24099;
  t27832 = 0.05186*t26516*t25325;
  t27835 = 0.05186*t25033*t26534;
  t27836 = 0.05186*t24627*t26542;
  t27838 = 0.05186*t25084*t26563;
  t27839 = 0.05186*t24343*t26595;
  t27840 = t27831 + t27832 + t27835 + t27836 + t27838 + t27839;
  t28595 = 0.000245*t26372*t22992;
  t28596 = 0.000245*t26408*t23798;
  t28597 = 2.e-6*t22756*t26430;
  t28600 = 2.e-6*t23289*t26444;
  t28612 = 0.000245*t23683*t26464;
  t28617 = 0.000245*t22590*t26493;
  t28646 = 0.05186*t24343*t26832;
  t28650 = 0.05186*t24099*t26920;
  t28696 = 0.05186*t25033*t26938;
  t28750 = 0.05186*t24627*t26980;
  t28783 = 0.05186*t25325*t27062;
  t28802 = 0.05186*t25084*t27277;
  t28815 = t28595 + t28596 + t28597 + t28600 + t28612 + t28617 + t28646 + t28650 + t28696 + t28750 + t28783 + t28802;
  t28228 = 0.000245*t23687*t22992;
  t28231 = 0.000245*t22621*t23798;
  t28255 = 2.e-6*t22756*t23448;
  t28263 = 2.e-6*t23289*t22914;
  t28297 = 0.000245*t23683*t23084;
  t28302 = 0.000245*t22590*t23875;
  t28306 = 0.05186*t24343*t27466;
  t28308 = 0.05186*t24099*t27588;
  t28309 = 0.05186*t25033*t27636;
  t28312 = 0.05186*t24627*t27682;
  t28314 = 0.05186*t25325*t27707;
  t28315 = 0.05186*t25084*t27755;
  t28321 = t28228 + t28231 + t28255 + t28263 + t28297 + t28302 + t28306 + t28308 + t28309 + t28312 + t28314 + t28315;
  t25516 = 0.05186*t22621*t25510;
  t25719 = 0.05186*t25675*t23875;
  t25875 = 0.05186*t22914*t25873;
  t25926 = 0.05186*t23084*t25919;
  t26043 = 0.05186*t23448*t26041;
  t26331 = 0.05186*t23687*t26327;
  t26344 = t25516 + t25719 + t25875 + t25926 + t26043 + t26331;
  t29001 = 0.000245*t23683*t28326;
  t29003 = 2.e-6*t23289*t28362;
  t29004 = 2.e-6*t28369*t22756;
  t29005 = 0.000245*t28395*t22992;
  t29006 = 0.000245*t22590*t28358;
  t29009 = 0.000245*t28404*t23798;
  t29011 = 0.05186*t24343*t25510;
  t29014 = 0.05186*t24099*t25675;
  t29019 = 0.05186*t25033*t25873;
  t29020 = 0.05186*t25325*t25919;
  t29021 = 0.05186*t24627*t26041;
  t29030 = 0.05186*t25084*t26327;
  t29031 = t29001 + t29003 + t29004 + t29005 + t29006 + t29009 + t29011 + t29014 + t29019 + t29020 + t29021 + t29030;
  t27976 = 0.05186*t26426*t25510;
  t28012 = 0.05186*t26402*t26327;
  t28024 = 0.05186*t26041*t26438;
  t28051 = 0.05186*t25873*t26456;
  t28053 = 0.05186*t25919*t26487;
  t28072 = 0.05186*t25675*t26509;
  t28076 = t27976 + t28012 + t28024 + t28051 + t28053 + t28072;
  t27842 = 0.05186*t26523*t25510;
  t27844 = 0.05186*t26516*t26327;
  t27845 = 0.05186*t26041*t26534;
  t27846 = 0.05186*t25873*t26542;
  t27848 = 0.05186*t25919*t26563;
  t27849 = 0.05186*t25675*t26595;
  t27850 = t27842 + t27844 + t27845 + t27846 + t27848 + t27849;
  t28828 = 0.000245*t26372*t28326;
  t28834 = 0.000245*t26408*t28358;
  t28835 = 2.e-6*t28362*t26430;
  t28836 = 2.e-6*t28369*t26444;
  t28837 = 0.000245*t28395*t26464;
  t28839 = 0.000245*t28404*t26493;
  t28841 = 0.05186*t25675*t26832;
  t28842 = 0.05186*t25510*t26920;
  t28844 = 0.05186*t26041*t26938;
  t28845 = 0.05186*t25873*t26980;
  t28848 = 0.05186*t26327*t27062;
  t28851 = 0.05186*t25919*t27277;
  t28854 = t28828 + t28834 + t28835 + t28836 + t28837 + t28839 + t28841 + t28842 + t28844 + t28845 + t28848 + t28851;
  t28330 = 0.000245*t23687*t28326;
  t28360 = 0.000245*t22621*t28358;
  t28365 = 2.e-6*t28362*t23448;
  t28371 = 2.e-6*t28369*t22914;
  t28396 = 0.000245*t28395*t23084;
  t28406 = 0.000245*t28404*t23875;
  t28407 = 0.05186*t25675*t27466;
  t28409 = 0.05186*t25510*t27588;
  t28410 = 0.05186*t26041*t27636;
  t28411 = 0.05186*t25873*t27682;
  t28413 = 0.05186*t26327*t27707;
  t28414 = 0.05186*t25919*t27755;
  t28415 = t28330 + t28360 + t28365 + t28371 + t28396 + t28406 + t28407 + t28409 + t28410 + t28411 + t28413 + t28414;
  t22626 = 1.5558e-8*t22621;
  t22921 = 0.005186015558*t22914;
  t23088 = -1.555781330428e-8*t23084;
  t23089 = t22626 + t22921 + t23088;
  t28967 = 0.00024500000000441*t22590;
  t28968 = 1.5558e-8*t24343;
  t28971 = 0.005186015558*t25033;
  t28972 = -1.555781330428e-8*t25325;
  t28974 = t28967 + t28968 + t28971 + t28972;
  t29087 = 0.00024500000000441*t28404;
  t29095 = 1.5558e-8*t25675;
  t29096 = 0.005186015558*t26041;
  t29100 = -1.555781330428e-8*t26327;
  t29103 = t29087 + t29095 + t29096 + t29100;
  t27910 = 1.5558e-8*t26426;
  t27911 = 0.005186015558*t26456;
  t27912 = -1.555781330428e-8*t26487;
  t27914 = t27910 + t27911 + t27912;
  t27772 = 1.5558e-8*t26523;
  t27773 = 0.005186015558*t26542;
  t27792 = -1.555781330428e-8*t26563;
  t27794 = t27772 + t27773 + t27792;
  t28489 = 0.00024500000000441*t26408;
  t28490 = 1.5558e-8*t26920;
  t28492 = 0.005186015558*t26980;
  t28510 = -1.555781330428e-8*t27277;
  t28530 = t28489 + t28490 + t28492 + t28510;
  t28188 = 0.00024500000000441*t22621;
  t28191 = 1.5558e-8*t27588;
  t28195 = 0.005186015558*t27682;
  t28196 = -1.555781330428e-8*t27755;
  t28197 = t28188 + t28191 + t28195 + t28196;
  p_output1[0]=var2[8]*(-0.5*(0.10372*t22914*t23448 + 0.10372*t23084*t23687 + 0.10372*t22621*t23875)*var2[0] - 0.5*t26597*var2[1] - 0.5*t26512*var2[2] - 0.5*t27762*var2[3] - 0.5*t27354*var2[4] - 0.5*t25346*var2[5] - 0.5*t26344*var2[6] - 0.5*t23089*var2[8]);
  p_output1[1]=var2[8]*(-0.5*t26597*var2[0] - 0.5*(0.10372*t26534*t26542 + 0.10372*t26516*t26563 + 0.10372*t26523*t26595)*var2[1] - 0.5*t27805*var2[2] - 0.5*t27899*var2[3] - 0.5*t27870*var2[4] - 0.5*t27840*var2[5] - 0.5*t27850*var2[6] - 0.5*t27794*var2[8]);
  p_output1[2]=var2[8]*(-0.5*t26512*var2[0] - 0.5*t27805*var2[1] - 0.5*(0.10372*t26438*t26456 + 0.10372*t26402*t26487 + 0.10372*t26426*t26509)*var2[2] - 0.5*t28174*var2[3] - 0.5*t28152*var2[4] - 0.5*t27971*var2[5] - 0.5*t28076*var2[6] - 0.5*t27914*var2[8]);
  p_output1[3]=var2[8]*(-0.5*t27762*var2[0] - 0.5*t27899*var2[1] - 0.5*t28174*var2[2] - 0.5*(4.e-6*t22914*t23448 + 0.00049*t23084*t23687 + 0.00049*t22621*t23875 + 0.10372*t27466*t27588 + 0.10372*t27636*t27682 + 0.10372*t27707*t27755)*var2[3] - 0.5*t28454*var2[4] - 0.5*t28321*var2[5] - 0.5*t28415*var2[6] - 0.5*t28197*var2[8]);
  p_output1[4]=var2[8]*(-0.5*t27354*var2[0] - 0.5*t27870*var2[1] - 0.5*t28152*var2[2] - 0.5*t28454*var2[3] - 0.5*(4.e-6*t26430*t26444 + 0.00049*t26372*t26464 + 0.00049*t26408*t26493 + 0.10372*t26832*t26920 + 0.10372*t26938*t26980 + 0.10372*t27062*t27277)*var2[4] - 0.5*t28815*var2[5] - 0.5*t28854*var2[6] - 0.5*t28530*var2[8]);
  p_output1[5]=var2[8]*(-0.5*t25346*var2[0] - 0.5*t27840*var2[1] - 0.5*t27971*var2[2] - 0.5*t28321*var2[3] - 0.5*t28815*var2[4] - 0.5*(4.e-6*t22756*t23289 + 0.00049*t22992*t23683 + 0.00049*t22590*t23798 + 0.10372*t24099*t24343 + 0.10372*t24627*t25033 + 0.10372*t25084*t25325)*var2[5] - 0.5*t29031*var2[6] - 0.5*t28974*var2[8]);
  p_output1[6]=var2[8]*(-0.5*t26344*var2[0] - 0.5*t27850*var2[1] - 0.5*t28076*var2[2] - 0.5*t28415*var2[3] - 0.5*t28854*var2[4] - 0.5*t29031*var2[5] - 0.5*(0.10372*t25510*t25675 + 0.10372*t25873*t26041 + 0.10372*t25919*t26327 + 4.e-6*t28362*t28369 + 0.00049*t28326*t28395 + 0.00049*t28358*t28404)*var2[6] - 0.5*t29103*var2[8]);
  p_output1[7]=0;
  p_output1[8]=(-0.5*t23089*var2[0] - 0.5*t27794*var2[1] - 0.5*t27914*var2[2] - 0.5*t28197*var2[3] - 0.5*t28530*var2[4] - 0.5*t28974*var2[5] - 0.5*t29103*var2[6])*var2[8];
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec9_minitaur.hh"

namespace FrontStance
{

void Ce2_vec9_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
