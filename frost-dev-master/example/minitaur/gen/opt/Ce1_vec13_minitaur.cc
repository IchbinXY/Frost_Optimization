/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:08:44 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2374;
  double t2961;
  double t2964;
  double t4342;
  double t4345;
  double t4474;
  double t4479;
  double t4607;
  double t4378;
  double t379;
  double t4043;
  double t4434;
  double t4435;
  double t4440;
  double t4730;
  double t4776;
  double t4824;
  double t4864;
  double t5186;
  double t5307;
  double t6354;
  double t6468;
  double t6482;
  double t6517;
  double t6655;
  double t259;
  double t317;
  double t5454;
  double t6157;
  double t7083;
  double t7100;
  double t7108;
  double t6935;
  double t7712;
  double t7719;
  double t7829;
  double t7878;
  double t7503;
  double t8312;
  double t8399;
  double t8409;
  double t8931;
  double t9062;
  double t9558;
  double t12116;
  double t11993;
  double t12189;
  double t12198;
  double t12053;
  double t12098;
  double t12126;
  double t12136;
  double t12142;
  double t12160;
  double t12194;
  double t12195;
  double t12201;
  double t12222;
  double t12301;
  double t12303;
  double t12167;
  double t12173;
  double t12332;
  double t12803;
  double t12808;
  double t12841;
  double t12847;
  double t12854;
  double t13200;
  double t14198;
  double t14207;
  double t14221;
  double t6696;
  double t6727;
  double t6856;
  double t6885;
  double t4468;
  double t5396;
  double t6659;
  double t6669;
  double t7219;
  double t7222;
  double t7277;
  double t7293;
  double t7094;
  double t7101;
  double t7208;
  double t7215;
  double t10697;
  double t11018;
  double t11039;
  double t11040;
  double t7510;
  double t8893;
  double t9559;
  double t9587;
  double t14861;
  double t14882;
  double t14954;
  double t15028;
  double t15067;
  double t15105;
  double t15116;
  double t51383;
  double t15214;
  double t15304;
  double t15342;
  double t15664;
  double t16541;
  double t17026;
  double t17079;
  double t18105;
  double t18123;
  double t18138;
  double t18225;
  double t18231;
  double t18528;
  double t18532;
  double t6682;
  double t6975;
  double t6976;
  double t7216;
  double t7298;
  double t7319;
  double t51531;
  double t9629;
  double t11043;
  double t11049;
  double t12490;
  double t12564;
  double t12591;
  double t12606;
  double t12348;
  double t12371;
  double t12373;
  double t12420;
  double t12161;
  double t12216;
  double t12308;
  double t12310;
  double t12426;
  double t12612;
  double t12651;
  double t14016;
  double t14018;
  double t14025;
  double t14030;
  double t13948;
  double t13955;
  double t13959;
  double t13963;
  double t12809;
  double t12853;
  double t13205;
  double t13908;
  double t14000;
  double t14117;
  double t14159;
  double t14548;
  double t14549;
  double t14609;
  double t14618;
  double t14358;
  double t14504;
  double t14506;
  double t14538;
  double t14203;
  double t14212;
  double t14223;
  double t14337;
  double t14539;
  double t14690;
  double t14693;
  double t15066;
  double t15117;
  double t15190;
  double t15696;
  double t17697;
  double t17715;
  double t18228;
  double t18534;
  double t18624;
  double t19977;
  double t22021;
  double t23023;
  double t23072;
  double t19850;
  double t19905;
  double t19962;
  double t19971;
  double t19312;
  double t19573;
  double t19604;
  double t19973;
  double t23142;
  double t23185;
  double t50029;
  double t50290;
  double t50444;
  double t50452;
  double t33712;
  double t34380;
  double t45288;
  double t49551;
  double t23472;
  double t26199;
  double t26213;
  double t49969;
  double t50786;
  double t50804;
  double t51270;
  double t51281;
  double t51299;
  double t51300;
  double t51178;
  double t51198;
  double t51208;
  double t51219;
  double t51007;
  double t51095;
  double t51166;
  double t51237;
  double t51302;
  double t51311;
  double t51386;
  double t51387;
  double t51389;
  double t51438;
  double t51448;
  double t51459;
  double t51467;
  double t51479;
  double t51494;
  double t51693;
  double t51697;
  double t51698;
  double t51716;
  double t51732;
  double t51736;
  double t51806;
  double t51832;
  double t51833;
  double t51840;
  double t51841;
  double t51843;
  double t51851;
  double t51859;
  double t51860;
  double t51866;
  double t51871;
  double t51880;
  double t51910;
  double t51918;
  double t51922;
  double t51939;
  double t51942;
  double t51943;
  double t51960;
  double t51962;
  double t51970;
  double t52012;
  double t52016;
  double t52017;
  double t52030;
  double t52046;
  double t52048;
  double t52101;
  double t52116;
  double t52122;
  double t52136;
  double t52154;
  double t52155;
  double t52171;
  double t52173;
  double t52185;
  double t52211;
  double t52217;
  double t52221;
  double t53619;
  double t53551;
  double t53638;
  double t53564;
  double t53568;
  double t53581;
  double t53591;
  double t53596;
  double t53618;
  double t53620;
  double t53626;
  double t53633;
  double t53634;
  double t53637;
  double t53648;
  double t53653;
  double t53660;
  double t53664;
  double t53669;
  double t53679;
  double t53704;
  double t53726;
  double t53729;
  double t53747;
  double t53755;
  double t53756;
  double t53763;
  double t53767;
  double t53770;
  double t53783;
  double t53550;
  double t53630;
  double t53661;
  double t53735;
  double t53739;
  double t53853;
  double t53857;
  double t53871;
  double t53822;
  double t53847;
  double t53850;
  double t53911;
  double t53937;
  double t53970;
  double t53971;
  double t53991;
  double t53879;
  double t53889;
  double t53893;
  double t53746;
  double t53789;
  double t53793;
  double t53533;
  double t53534;
  double t53548;
  double t53999;
  double t54050;
  double t54056;
  double t54130;
  double t54137;
  double t54147;
  double t54894;
  double t54907;
  double t54911;
  double t54715;
  double t54720;
  double t54747;
  double t54780;
  double t55766;
  double t55771;
  double t55774;
  double t54802;
  double t54804;
  double t54810;
  double t54870;
  double t55000;
  double t55008;
  double t55022;
  double t55033;
  double t55129;
  double t55157;
  double t55158;
  double t55173;
  double t55517;
  double t55520;
  double t55525;
  double t55528;
  double t55591;
  double t55593;
  double t55599;
  double t55714;
  double t12347;
  double t12671;
  double t12772;
  double t13937;
  double t14178;
  double t14186;
  double t14357;
  double t14697;
  double t14733;
  double t56332;
  double t56508;
  double t56364;
  double t56407;
  double t56435;
  double t56440;
  double t56465;
  double t56469;
  double t56528;
  double t56642;
  double t56644;
  double t56654;
  double t56688;
  double t56739;
  double t56748;
  double t56756;
  double t56785;
  double t56866;
  double t57161;
  double t57197;
  double t57199;
  double t57231;
  double t56500;
  double t56664;
  double t56880;
  double t56895;
  double t57370;
  double t57381;
  double t57395;
  double t57428;
  double t57436;
  double t57438;
  double t57457;
  double t57032;
  double t57271;
  double t57335;
  double t57435;
  double t57469;
  double t57479;
  double t57587;
  double t57596;
  double t57640;
  double t51168;
  double t51316;
  double t51318;
  double t26564;
  double t50817;
  double t50857;
  double t58309;
  double t58319;
  double t58326;
  double t58329;
  double t58330;
  double t58282;
  double t58284;
  double t58287;
  double t58289;
  double t58299;
  double t58354;
  double t58355;
  double t58357;
  double t58358;
  double t58374;
  double t58392;
  double t58413;
  double t19729;
  double t23330;
  double t23340;
  double t58307;
  double t58339;
  double t58340;
  double t58367;
  double t58443;
  double t58449;
  double t58456;
  double t58459;
  double t58461;
  double t57345;
  double t57355;
  double t57710;
  double t57724;
  double t57880;
  double t57884;
  double t57958;
  double t57986;
  double t58078;
  double t58122;
  double t58217;
  double t58224;
  double t59207;
  double t59209;
  double t59272;
  double t53813;
  double t53852;
  double t54262;
  double t54460;
  double t59288;
  double t59362;
  double t59371;
  double t59532;
  double t59534;
  double t59544;
  double t54912;
  double t54914;
  double t59644;
  double t59646;
  double t59653;
  double t55041;
  double t55064;
  double t55457;
  double t55474;
  double t59668;
  double t59670;
  double t59676;
  double t59794;
  double t59795;
  double t59801;
  double t55538;
  double t55542;
  double t58344;
  double t58352;
  double t58490;
  double t58494;
  double t58816;
  double t58827;
  double t58881;
  double t58882;
  double t58924;
  double t58925;
  double t58945;
  double t58949;
  double t59376;
  double t59386;
  double t59462;
  double t59501;
  double t59547;
  double t59582;
  double t59616;
  double t59620;
  double t59691;
  double t59694;
  double t59770;
  double t59774;
  double t60473;
  double t60474;
  double t60475;
  double t60159;
  double t60193;
  double t60231;
  double t60232;
  double t60516;
  double t60517;
  double t60521;
  double t60594;
  double t60596;
  double t60598;
  double t60286;
  double t60295;
  double t60668;
  double t60685;
  double t60686;
  double t60337;
  double t60338;
  double t60410;
  double t60411;
  double t60693;
  double t60697;
  double t60698;
  double t60776;
  double t60777;
  double t60779;
  double t60422;
  double t60438;
  double t61002;
  double t61005;
  double t61015;
  double t61019;
  double t61023;
  double t61026;
  double t61027;
  double t61029;
  double t61030;
  double t61034;
  double t61036;
  double t61041;
  double t61049;
  double t61052;
  double t61053;
  double t61055;
  double t61056;
  double t61060;
  double t61066;
  double t61067;
  double t61069;
  double t61071;
  double t61101;
  double t61103;
  double t61105;
  double t61107;
  double t61115;
  double t61120;
  double t61121;
  double t61124;
  double t61125;
  double t61126;
  double t61128;
  double t61133;
  double t61137;
  double t61140;
  double t61141;
  double t61147;
  double t61149;
  double t61151;
  double t61152;
  double t61153;
  double t61154;
  double t61155;
  double t61178;
  double t61179;
  double t61181;
  double t61182;
  double t61185;
  double t61186;
  double t61187;
  double t61193;
  double t61194;
  double t61196;
  double t61197;
  double t61201;
  double t61204;
  double t61205;
  double t61206;
  double t61211;
  double t61213;
  double t61215;
  double t61217;
  double t61221;
  double t61224;
  double t61225;
  t2374 = Cos(var1[12]);
  t2961 = -1.*t2374;
  t2964 = 1. + t2961;
  t4342 = 3.e-6*t2964;
  t4345 = Sin(var1[12]);
  t4474 = Cos(var1[10]);
  t4479 = -1.*t4474;
  t4607 = 1. + t4479;
  t4378 = 3.e-6*t4345;
  t379 = Sin(var1[10]);
  t4043 = 1.000000000009*t2964;
  t4434 = t4342 + t4378;
  t4435 = 3.e-6*t4434;
  t4440 = -1. + t4043 + t4435;
  t4730 = -9.e-12*t2964;
  t4776 = -3.e-6*t4345;
  t4824 = t4342 + t4776;
  t4864 = 3.e-6*t4824;
  t5186 = -1.*t4345;
  t5307 = t4730 + t4864 + t5186;
  t6354 = -1.8e-11*t2964;
  t6468 = 1. + t6354;
  t6482 = 3.e-6*t6468;
  t6517 = -3.e-6*t2964;
  t6655 = t6482 + t6517 + t4378;
  t259 = Cos(var1[4]);
  t317 = Cos(var1[5]);
  t5454 = -9.e-12*t4607;
  t6157 = 1. + t5454;
  t7083 = -1. + t4043 + t4864;
  t7100 = t6482 + t6517 + t4776;
  t7108 = t4730 + t4435 + t4345;
  t6935 = Sin(var1[5]);
  t7712 = -1.000000000009*t2964;
  t7719 = 1. + t7712;
  t7829 = 3.e-6*t7719;
  t7878 = 9.e-12*t2964;
  t7503 = 1. + t6354 + t4864 + t4435;
  t8312 = t7878 + t5186;
  t8399 = 3.e-6*t8312;
  t8409 = t7829 + t4342 + t8399 + t4378;
  t8931 = t7878 + t4345;
  t9062 = 3.e-6*t8931;
  t9558 = t7829 + t4342 + t4776 + t9062;
  t12116 = 3.e-6*t2374;
  t11993 = -3.e-6*t2374;
  t12189 = 9.e-12*t4345;
  t12198 = -2.7e-17*t4345;
  t12053 = t11993 + t4378;
  t12098 = 3.e-6*t12053;
  t12126 = t12116 + t4378;
  t12136 = 3.e-6*t12126;
  t12142 = -1.8e-11*t4345;
  t12160 = t12098 + t12136 + t12142;
  t12194 = t2961 + t12189;
  t12195 = 3.e-6*t12194;
  t12201 = t12116 + t12195 + t12198;
  t12222 = t2374 + t12189;
  t12301 = 3.e-6*t12222;
  t12303 = t11993 + t12301 + t12198;
  t12167 = -1.000000000009*t4607;
  t12173 = 1. + t12167;
  t12332 = Sin(var1[4]);
  t12803 = -3.000000000054e-6*t4345;
  t12808 = t11993 + t12803;
  t12841 = -9.e-12*t4345;
  t12847 = t2374 + t12136 + t12841;
  t12854 = 1.000000000009*t4345;
  t13200 = t12098 + t12854;
  t14198 = t12116 + t12803;
  t14207 = t2961 + t12098 + t12841;
  t14221 = t12136 + t12854;
  t6696 = -1.*t379*t4440;
  t6727 = t4474*t5307;
  t6856 = 3.e-6*t4607*t6655;
  t6885 = t6696 + t6727 + t6856;
  t4468 = 3.e-6*t379*t4440;
  t5396 = 3.e-6*t4607*t5307;
  t6659 = t6157*t6655;
  t6669 = t4468 + t5396 + t6659;
  t7219 = t4474*t7083;
  t7222 = 3.e-6*t4607*t7100;
  t7277 = -1.*t379*t7108;
  t7293 = t7219 + t7222 + t7277;
  t7094 = 3.e-6*t4607*t7083;
  t7101 = t6157*t7100;
  t7208 = 3.e-6*t379*t7108;
  t7215 = t7094 + t7101 + t7208;
  t10697 = 3.e-6*t4607*t7503;
  t11018 = -1.*t379*t8409;
  t11039 = t4474*t9558;
  t11040 = t10697 + t11018 + t11039;
  t7510 = t6157*t7503;
  t8893 = 3.e-6*t379*t8409;
  t9559 = 3.e-6*t4607*t9558;
  t9587 = t7510 + t8893 + t9559;
  t14861 = t12173*t4440;
  t14882 = t379*t5307;
  t14954 = -3.e-6*t379*t6655;
  t15028 = t14861 + t14882 + t14954;
  t15067 = t317*t6885;
  t15105 = -1.*t6669*t6935;
  t15116 = t15067 + t15105;
  t51383 = Sin(var1[3]);
  t15214 = t379*t7083;
  t15304 = -3.e-6*t379*t7100;
  t15342 = t12173*t7108;
  t15664 = t15214 + t15304 + t15342;
  t16541 = t317*t7293;
  t17026 = -1.*t7215*t6935;
  t17079 = t16541 + t17026;
  t18105 = -3.e-6*t379*t7503;
  t18123 = t12173*t8409;
  t18138 = t379*t9558;
  t18225 = t18105 + t18123 + t18138;
  t18231 = t317*t11040;
  t18528 = -1.*t9587*t6935;
  t18532 = t18231 + t18528;
  t6682 = -1.*t317*t6669;
  t6975 = -1.*t6885*t6935;
  t6976 = t6682 + t6975;
  t7216 = -1.*t317*t7215;
  t7298 = -1.*t7293*t6935;
  t7319 = t7216 + t7298;
  t51531 = Cos(var1[3]);
  t9629 = -1.*t317*t9587;
  t11043 = -1.*t11040*t6935;
  t11049 = t9629 + t11043;
  t12490 = t6157*t12160;
  t12564 = 3.e-6*t379*t12201;
  t12591 = 3.e-6*t4607*t12303;
  t12606 = t12490 + t12564 + t12591;
  t12348 = 3.e-6*t4607*t12160;
  t12371 = -1.*t379*t12201;
  t12373 = t4474*t12303;
  t12420 = t12348 + t12371 + t12373;
  t12161 = -3.e-6*t379*t12160;
  t12216 = t12173*t12201;
  t12308 = t379*t12303;
  t12310 = t12161 + t12216 + t12308;
  t12426 = t317*t12420;
  t12612 = -1.*t12606*t6935;
  t12651 = t12426 + t12612;
  t14016 = t6157*t12808;
  t14018 = 3.e-6*t379*t12847;
  t14025 = 3.e-6*t4607*t13200;
  t14030 = t14016 + t14018 + t14025;
  t13948 = 3.e-6*t4607*t12808;
  t13955 = -1.*t379*t12847;
  t13959 = t4474*t13200;
  t13963 = t13948 + t13955 + t13959;
  t12809 = -3.e-6*t379*t12808;
  t12853 = t12173*t12847;
  t13205 = t379*t13200;
  t13908 = t12809 + t12853 + t13205;
  t14000 = t317*t13963;
  t14117 = -1.*t14030*t6935;
  t14159 = t14000 + t14117;
  t14548 = t6157*t14198;
  t14549 = 3.e-6*t4607*t14207;
  t14609 = 3.e-6*t379*t14221;
  t14618 = t14548 + t14549 + t14609;
  t14358 = 3.e-6*t4607*t14198;
  t14504 = t4474*t14207;
  t14506 = -1.*t379*t14221;
  t14538 = t14358 + t14504 + t14506;
  t14203 = -3.e-6*t379*t14198;
  t14212 = t379*t14207;
  t14223 = t12173*t14221;
  t14337 = t14203 + t14212 + t14223;
  t14539 = t317*t14538;
  t14690 = -1.*t14618*t6935;
  t14693 = t14539 + t14690;
  t15066 = t259*t15028;
  t15117 = -1.*t12332*t15116;
  t15190 = t15066 + t15117;
  t15696 = t259*t15664;
  t17697 = -1.*t12332*t17079;
  t17715 = t15696 + t17697;
  t18228 = t259*t18225;
  t18534 = -1.*t12332*t18532;
  t18624 = t18228 + t18534;
  t19977 = 3.e-6*t4474*t4440;
  t22021 = 3.e-6*t379*t5307;
  t23023 = -9.e-12*t379*t6655;
  t23072 = t19977 + t22021 + t23023;
  t19850 = -1.*t4474*t4440;
  t19905 = -1.*t379*t5307;
  t19962 = 3.e-6*t379*t6655;
  t19971 = t19850 + t19905 + t19962;
  t19312 = -1.000000000009*t379*t4440;
  t19573 = -3.e-6*t4474*t6655;
  t19604 = t19312 + t6727 + t19573;
  t19973 = t317*t19971;
  t23142 = -1.*t23072*t6935;
  t23185 = t19973 + t23142;
  t50029 = 3.e-6*t379*t7083;
  t50290 = -9.e-12*t379*t7100;
  t50444 = 3.e-6*t4474*t7108;
  t50452 = t50029 + t50290 + t50444;
  t33712 = -1.*t379*t7083;
  t34380 = 3.e-6*t379*t7100;
  t45288 = -1.*t4474*t7108;
  t49551 = t33712 + t34380 + t45288;
  t23472 = -3.e-6*t4474*t7100;
  t26199 = -1.000000000009*t379*t7108;
  t26213 = t7219 + t23472 + t26199;
  t49969 = t317*t49551;
  t50786 = -1.*t50452*t6935;
  t50804 = t49969 + t50786;
  t51270 = -9.e-12*t379*t7503;
  t51281 = 3.e-6*t4474*t8409;
  t51299 = 3.e-6*t379*t9558;
  t51300 = t51270 + t51281 + t51299;
  t51178 = 3.e-6*t379*t7503;
  t51198 = -1.*t4474*t8409;
  t51208 = -1.*t379*t9558;
  t51219 = t51178 + t51198 + t51208;
  t51007 = -3.e-6*t4474*t7503;
  t51095 = -1.000000000009*t379*t8409;
  t51166 = t51007 + t51095 + t11039;
  t51237 = t317*t51219;
  t51302 = -1.*t51300*t6935;
  t51311 = t51237 + t51302;
  t51386 = -1.*t15028*t12332;
  t51387 = -1.*t259*t15116;
  t51389 = t51386 + t51387;
  t51438 = -1.*t15664*t12332;
  t51448 = -1.*t259*t17079;
  t51459 = t51438 + t51448;
  t51467 = -1.*t18225*t12332;
  t51479 = -1.*t259*t18532;
  t51494 = t51467 + t51479;
  t51693 = t317*t12606;
  t51697 = t12420*t6935;
  t51698 = t51693 + t51697;
  t51716 = t259*t12310;
  t51732 = -1.*t12332*t12651;
  t51736 = t51716 + t51732;
  t51806 = t317*t14030;
  t51832 = t13963*t6935;
  t51833 = t51806 + t51832;
  t51840 = t259*t13908;
  t51841 = -1.*t12332*t14159;
  t51843 = t51840 + t51841;
  t51851 = t317*t14618;
  t51859 = t14538*t6935;
  t51860 = t51851 + t51859;
  t51866 = t259*t14337;
  t51871 = -1.*t12332*t14693;
  t51880 = t51866 + t51871;
  t51910 = t317*t6669;
  t51918 = t6885*t6935;
  t51922 = t51910 + t51918;
  t51939 = t317*t7215;
  t51942 = t7293*t6935;
  t51943 = t51939 + t51942;
  t51960 = t317*t9587;
  t51962 = t11040*t6935;
  t51970 = t51960 + t51962;
  t52012 = t317*t23072;
  t52016 = t19971*t6935;
  t52017 = t52012 + t52016;
  t52030 = t259*t19604;
  t52046 = -1.*t12332*t23185;
  t52048 = t52030 + t52046;
  t52101 = t317*t50452;
  t52116 = t49551*t6935;
  t52122 = t52101 + t52116;
  t52136 = t259*t26213;
  t52154 = -1.*t12332*t50804;
  t52155 = t52136 + t52154;
  t52171 = t317*t51300;
  t52173 = t51219*t6935;
  t52185 = t52171 + t52173;
  t52211 = t259*t51166;
  t52217 = -1.*t12332*t51311;
  t52221 = t52211 + t52217;
  t53619 = t6517 + t4378;
  t53551 = 3.e-13*var1[12];
  t53638 = t6517 + t4776;
  t53564 = -1. + t4043;
  t53568 = 0.2*t53564;
  t53581 = -0.2000000000048*t2964;
  t53591 = t4730 + t5186;
  t53596 = 0.100000000003*t53591;
  t53618 = 0.1*t4824;
  t53620 = 3.e-7*t53619;
  t53626 = t53551 + t53568 + t53581 + t53596 + t53618 + t53620;
  t53633 = 1.e-7*var1[12];
  t53634 = 0.1*t6468;
  t53637 = 5.4e-18*t2964;
  t53648 = -3.e-12*t53638;
  t53653 = 0.100000000003*t53619;
  t53660 = t53633 + t53634 + t53637 + t53648 + t53653;
  t53664 = 0.1000000000039*t2964;
  t53669 = 3.e-7*t53638;
  t53679 = 0.1*t4434;
  t53704 = t4730 + t4345;
  t53726 = -3.e-12*t53704;
  t53729 = t53551 + t53664 + t53669 + t53679 + t53726;
  t53747 = -1.8e-12*t4607;
  t53755 = -1. + t4474;
  t53756 = 0.2*t53755;
  t53763 = t4474*t53626;
  t53767 = 3.e-6*t4607*t53660;
  t53770 = -1.*t379*t53729;
  t53783 = t53747 + t53756 + t53763 + t53767 + t53770;
  t53550 = 6.000000000054e-7*t4607;
  t53630 = 3.e-6*t4607*t53626;
  t53661 = t6157*t53660;
  t53735 = 3.e-6*t379*t53729;
  t53739 = t53550 + t53630 + t53661 + t53735;
  t53853 = -1.*t317*t53739;
  t53857 = -1.*t53783*t6935;
  t53871 = t53853 + t53857;
  t53822 = t317*t53783;
  t53847 = -1.*t53739*t6935;
  t53850 = t53822 + t53847;
  t53911 = 0.2000000000018*t379;
  t53937 = t379*t53626;
  t53970 = -3.e-6*t379*t53660;
  t53971 = t12173*t53729;
  t53991 = t53911 + t53937 + t53970 + t53971;
  t53879 = t15028*t12332;
  t53889 = t259*t15116;
  t53893 = t53879 + t53889;
  t53746 = t317*t53739;
  t53789 = t53783*t6935;
  t53793 = t53746 + t53789;
  t53533 = t15664*t12332;
  t53534 = t259*t17079;
  t53548 = t53533 + t53534;
  t53999 = t53991*t12332;
  t54050 = t259*t53850;
  t54056 = t53999 + t54050;
  t54130 = t259*t53991;
  t54137 = -1.*t12332*t53850;
  t54147 = t54130 + t54137;
  t54894 = t18225*t12332;
  t54907 = t259*t18532;
  t54911 = t54894 + t54907;
  t54715 = -1.*t51922*t53793;
  t54720 = -1.*t53893*t54056;
  t54747 = -1.*t15190*t54147;
  t54780 = t54715 + t54720 + t54747;
  t55766 = -1.*t53991*t12332;
  t55771 = -1.*t259*t53850;
  t55774 = t55766 + t55771;
  t54802 = t51943*t53793;
  t54804 = t53548*t54056;
  t54810 = t17715*t54147;
  t54870 = t54802 + t54804 + t54810;
  t55000 = t51922*t53793;
  t55008 = t53893*t54056;
  t55022 = t15190*t54147;
  t55033 = t55000 + t55008 + t55022;
  t55129 = -1.*t53793*t51970;
  t55157 = -1.*t54056*t54911;
  t55158 = -1.*t54147*t18624;
  t55173 = t55129 + t55157 + t55158;
  t55517 = -1.*t51943*t53793;
  t55520 = -1.*t53548*t54056;
  t55525 = -1.*t17715*t54147;
  t55528 = t55517 + t55520 + t55525;
  t55591 = t53793*t51970;
  t55593 = t54056*t54911;
  t55599 = t54147*t18624;
  t55714 = t55591 + t55593 + t55599;
  t12347 = t12310*t12332;
  t12671 = t259*t12651;
  t12772 = t12347 + t12671;
  t13937 = t13908*t12332;
  t14178 = t259*t14159;
  t14186 = t13937 + t14178;
  t14357 = t14337*t12332;
  t14697 = t259*t14693;
  t14733 = t14357 + t14697;
  t56332 = t12116 + t4776;
  t56508 = t11993 + t4776;
  t56364 = 3.e-7*t56332;
  t56407 = t2961 + t12841;
  t56435 = 0.100000000003*t56407;
  t56440 = 0.1*t12053;
  t56465 = -3.000000000027e-12*t4345;
  t56469 = 3.e-13 + t56364 + t56435 + t56440 + t56465;
  t56528 = -3.e-12*t56508;
  t56642 = 0.100000000003*t56332;
  t56644 = -1.7999946e-12*t4345;
  t56654 = 1.e-7 + t56528 + t56642 + t56644;
  t56688 = 3.e-7*t56508;
  t56739 = t2374 + t12841;
  t56748 = -3.e-12*t56739;
  t56756 = 0.1*t12126;
  t56785 = 0.1000000000039*t4345;
  t56866 = 3.e-13 + t56688 + t56748 + t56756 + t56785;
  t57161 = t4474*t56469;
  t57197 = 3.e-6*t4607*t56654;
  t57199 = -1.*t379*t56866;
  t57231 = t57161 + t57197 + t57199;
  t56500 = 3.e-6*t4607*t56469;
  t56664 = t6157*t56654;
  t56880 = 3.e-6*t379*t56866;
  t56895 = t56500 + t56664 + t56880;
  t57370 = t379*t56469;
  t57381 = -3.e-6*t379*t56654;
  t57395 = t12173*t56866;
  t57428 = t57370 + t57381 + t57395;
  t57436 = t317*t57231;
  t57438 = -1.*t56895*t6935;
  t57457 = t57436 + t57438;
  t57032 = t317*t56895;
  t57271 = t57231*t6935;
  t57335 = t57032 + t57271;
  t57435 = t57428*t12332;
  t57469 = t259*t57457;
  t57479 = t57435 + t57469;
  t57587 = t259*t57428;
  t57596 = -1.*t12332*t57457;
  t57640 = t57587 + t57596;
  t51168 = t51166*t12332;
  t51316 = t259*t51311;
  t51318 = t51168 + t51316;
  t26564 = t26213*t12332;
  t50817 = t259*t50804;
  t50857 = t26564 + t50817;
  t58309 = -0.2000000000018*t379;
  t58319 = -1.*t379*t53626;
  t58326 = 3.e-6*t379*t53660;
  t58329 = -1.*t4474*t53729;
  t58330 = t58309 + t58319 + t58326 + t58329;
  t58282 = 6.000000000054e-7*t379;
  t58284 = 3.e-6*t379*t53626;
  t58287 = -9.e-12*t379*t53660;
  t58289 = 3.e-6*t4474*t53729;
  t58299 = t58282 + t58284 + t58287 + t58289;
  t58354 = 0.2000000000018*t4474;
  t58355 = -3.e-6*t4474*t53660;
  t58357 = -1.000000000009*t379*t53729;
  t58358 = t58354 + t53763 + t58355 + t58357;
  t58374 = t317*t58330;
  t58392 = -1.*t58299*t6935;
  t58413 = t58374 + t58392;
  t19729 = t19604*t12332;
  t23330 = t259*t23185;
  t23340 = t19729 + t23330;
  t58307 = t317*t58299;
  t58339 = t58330*t6935;
  t58340 = t58307 + t58339;
  t58367 = t58358*t12332;
  t58443 = t259*t58413;
  t58449 = t58367 + t58443;
  t58456 = t259*t58358;
  t58459 = -1.*t12332*t58413;
  t58461 = t58456 + t58459;
  t57345 = t57335*t51943;
  t57355 = t51833*t53793;
  t57710 = -1.*t51922*t57335;
  t57724 = -1.*t51860*t53793;
  t57880 = t51922*t57335;
  t57884 = t51860*t53793;
  t57958 = -1.*t51698*t53793;
  t57986 = -1.*t57335*t51970;
  t58078 = -1.*t57335*t51943;
  t58122 = -1.*t51833*t53793;
  t58217 = t51698*t53793;
  t58224 = t57335*t51970;
  t59207 = -1.*t15028*t53991;
  t59209 = -1.*t15116*t53850;
  t59272 = t59207 + t54715 + t59209;
  t53813 = -1.*t15116*t53793;
  t53852 = -1.*t51922*t53850;
  t54262 = t17079*t53793;
  t54460 = t51943*t53850;
  t59288 = t15664*t53991;
  t59362 = t17079*t53850;
  t59371 = t59288 + t54802 + t59362;
  t59532 = t15028*t53991;
  t59534 = t15116*t53850;
  t59544 = t59532 + t55000 + t59534;
  t54912 = t15116*t53793;
  t54914 = t51922*t53850;
  t59644 = -1.*t53991*t18225;
  t59646 = -1.*t53850*t18532;
  t59653 = t59644 + t59646 + t55129;
  t55041 = -1.*t53793*t18532;
  t55064 = -1.*t53850*t51970;
  t55457 = -1.*t17079*t53793;
  t55474 = -1.*t51943*t53850;
  t59668 = -1.*t15664*t53991;
  t59670 = -1.*t17079*t53850;
  t59676 = t59668 + t55517 + t59670;
  t59794 = t53991*t18225;
  t59795 = t53850*t18532;
  t59801 = t59794 + t59795 + t55591;
  t55538 = t53793*t18532;
  t55542 = t53850*t51970;
  t58344 = -1.*t51922*t58340;
  t58352 = -1.*t52017*t53793;
  t58490 = t51943*t58340;
  t58494 = t52122*t53793;
  t58816 = t51922*t58340;
  t58827 = t52017*t53793;
  t58881 = -1.*t58340*t51970;
  t58882 = -1.*t53793*t52185;
  t58924 = -1.*t51943*t58340;
  t58925 = -1.*t52122*t53793;
  t58945 = t58340*t51970;
  t58949 = t53793*t52185;
  t59376 = t57428*t15664;
  t59386 = t13908*t53991;
  t59462 = -1.*t15028*t57428;
  t59501 = -1.*t14337*t53991;
  t59547 = t15028*t57428;
  t59582 = t14337*t53991;
  t59616 = -1.*t12310*t53991;
  t59620 = -1.*t57428*t18225;
  t59691 = -1.*t57428*t15664;
  t59694 = -1.*t13908*t53991;
  t59770 = t12310*t53991;
  t59774 = t57428*t18225;
  t60473 = -1.*t6885*t53783;
  t60474 = -1.*t6669*t53739;
  t60475 = t59207 + t60473 + t60474;
  t60159 = -1.*t19604*t53991;
  t60193 = -1.*t15028*t58358;
  t60231 = t26213*t53991;
  t60232 = t15664*t58358;
  t60516 = t7293*t53783;
  t60517 = t7215*t53739;
  t60521 = t59288 + t60516 + t60517;
  t60594 = t6885*t53783;
  t60596 = t6669*t53739;
  t60598 = t59532 + t60594 + t60596;
  t60286 = t19604*t53991;
  t60295 = t15028*t58358;
  t60668 = -1.*t53739*t9587;
  t60685 = -1.*t53783*t11040;
  t60686 = t60668 + t60685 + t59644;
  t60337 = -1.*t53991*t51166;
  t60338 = -1.*t58358*t18225;
  t60410 = -1.*t26213*t53991;
  t60411 = -1.*t15664*t58358;
  t60693 = -1.*t7293*t53783;
  t60697 = -1.*t7215*t53739;
  t60698 = t59668 + t60693 + t60697;
  t60776 = t53739*t9587;
  t60777 = t53783*t11040;
  t60779 = t60776 + t60777 + t59794;
  t60422 = t53991*t51166;
  t60438 = t58358*t18225;
  t61002 = -1.*t53626*t5307;
  t61005 = -1.*t53660*t6655;
  t61015 = -1.*t4440*t53729;
  t61019 = t61002 + t61005 + t61015;
  t61023 = t53660*t12808;
  t61026 = t7083*t56469;
  t61027 = t7100*t56654;
  t61029 = t56866*t7108;
  t61030 = t53626*t13200;
  t61034 = t12847*t53729;
  t61036 = t61023 + t61026 + t61027 + t61029 + t61030 + t61034;
  t61041 = t7083*t53626;
  t61049 = t53660*t7100;
  t61052 = t7108*t53729;
  t61053 = t61041 + t61049 + t61052;
  t61055 = -1.*t53660*t14198;
  t61056 = -1.*t53626*t14207;
  t61060 = -1.*t5307*t56469;
  t61066 = -1.*t56654*t6655;
  t61067 = -1.*t4440*t56866;
  t61069 = -1.*t14221*t53729;
  t61071 = t61055 + t61056 + t61060 + t61066 + t61067 + t61069;
  t61101 = t53626*t5307;
  t61103 = t53660*t6655;
  t61105 = t4440*t53729;
  t61107 = t61101 + t61103 + t61105;
  t61115 = t53660*t14198;
  t61120 = t53626*t14207;
  t61121 = t5307*t56469;
  t61124 = t56654*t6655;
  t61125 = t4440*t56866;
  t61126 = t14221*t53729;
  t61128 = t61115 + t61120 + t61121 + t61124 + t61125 + t61126;
  t61133 = -1.*t53660*t7503;
  t61137 = -1.*t8409*t53729;
  t61140 = -1.*t53626*t9558;
  t61141 = t61133 + t61137 + t61140;
  t61147 = -1.*t53660*t12160;
  t61149 = -1.*t7503*t56654;
  t61151 = -1.*t53626*t12303;
  t61152 = -1.*t8409*t56866;
  t61153 = -1.*t12201*t53729;
  t61154 = -1.*t56469*t9558;
  t61155 = t61147 + t61149 + t61151 + t61152 + t61153 + t61154;
  t61178 = -1.*t53660*t12808;
  t61179 = -1.*t7083*t56469;
  t61181 = -1.*t7100*t56654;
  t61182 = -1.*t56866*t7108;
  t61185 = -1.*t53626*t13200;
  t61186 = -1.*t12847*t53729;
  t61187 = t61178 + t61179 + t61181 + t61182 + t61185 + t61186;
  t61193 = -1.*t7083*t53626;
  t61194 = -1.*t53660*t7100;
  t61196 = -1.*t7108*t53729;
  t61197 = t61193 + t61194 + t61196;
  t61201 = t53660*t7503;
  t61204 = t8409*t53729;
  t61205 = t53626*t9558;
  t61206 = t61201 + t61204 + t61205;
  t61211 = t53660*t12160;
  t61213 = t7503*t56654;
  t61215 = t53626*t12303;
  t61217 = t8409*t56866;
  t61221 = t12201*t53729;
  t61224 = t56469*t9558;
  t61225 = t61211 + t61213 + t61215 + t61217 + t61221 + t61224;
  p_output1[0]=var2[12]*(-0.5*(-1.555803111628e-8*t15190 + 0.00518601555815558*t17715 + 5.186e-9*t18624)*var2[4] - 0.5*(5.186e-9*t11049*t259 - 1.555803111628e-8*t259*t6976 + 0.00518601555815558*t259*t7319)*var2[5] - 0.5*(-1.555803111628e-8*t23340 + 0.00518601555815558*t50857 + 5.186e-9*t51318)*var2[10] - 0.5*(5.186e-9*t12772 + 0.00518601555815558*t14186 - 1.555803111628e-8*t14733)*var2[12]);
  p_output1[1]=var2[12]*(-0.5*(-1.555803111628e-8*(-1.*t15190*t51531 - 1.*t51383*t51922) + 0.00518601555815558*(-1.*t17715*t51531 - 1.*t51383*t51943) + 5.186e-9*(-1.*t18624*t51531 - 1.*t51383*t51970))*var2[3] - 0.5*(1.555803111628e-8*t51383*t51389 - 0.00518601555815558*t51383*t51459 - 5.186e-9*t51383*t51494)*var2[4] - 0.5*(5.186e-9*(t11049*t12332*t51383 + t18532*t51531) - 1.555803111628e-8*(t15116*t51531 + t12332*t51383*t6976) + 0.00518601555815558*(t17079*t51531 + t12332*t51383*t7319))*var2[5] - 0.5*(-1.555803111628e-8*(t51531*t52017 - 1.*t51383*t52048) + 0.00518601555815558*(t51531*t52122 - 1.*t51383*t52155) + 5.186e-9*(t51531*t52185 - 1.*t51383*t52221))*var2[10] - 0.5*(5.186e-9*(t51531*t51698 - 1.*t51383*t51736) + 0.00518601555815558*(t51531*t51833 - 1.*t51383*t51843) - 1.555803111628e-8*(t51531*t51860 - 1.*t51383*t51880))*var2[12]);
  p_output1[2]=var2[12]*(-0.5*(-1.555803111628e-8*(-1.*t15190*t51383 + t51531*t51922) + 0.00518601555815558*(-1.*t17715*t51383 + t51531*t51943) + 5.186e-9*(-1.*t18624*t51383 + t51531*t51970))*var2[3] - 0.5*(-1.555803111628e-8*t51389*t51531 + 0.00518601555815558*t51459*t51531 + 5.186e-9*t51494*t51531)*var2[4] - 0.5*(5.186e-9*(t18532*t51383 - 1.*t11049*t12332*t51531) - 1.555803111628e-8*(t15116*t51383 - 1.*t12332*t51531*t6976) + 0.00518601555815558*(t17079*t51383 - 1.*t12332*t51531*t7319))*var2[5] - 0.5*(-1.555803111628e-8*(t51383*t52017 + t51531*t52048) + 0.00518601555815558*(t51383*t52122 + t51531*t52155) + 5.186e-9*(t51383*t52185 + t51531*t52221))*var2[10] - 0.5*(5.186e-9*(t51383*t51698 + t51531*t51736) + 0.00518601555815558*(t51383*t51833 + t51531*t51843) - 1.555803111628e-8*(t51383*t51860 + t51531*t51880))*var2[12]);
  p_output1[3]=var2[12]*(-0.5*(0.00024500000000441*t18624 + 5.186e-9*(t17715*t54780 + t15190*t54870 + t53548*(-1.*t15190*t54056 - 1.*t51389*t54147 - 1.*t53893*t54147 - 1.*t15190*t55774) + t53893*(t17715*t54056 + t51459*t54147 + t53548*t54147 + t17715*t55774)) + 0.00518601555815558*(t18624*t55033 + t15190*t55173 + t54911*(t15190*t54056 + t51389*t54147 + t53893*t54147 + t15190*t55774) + t53893*(-1.*t18624*t54056 - 1.*t51494*t54147 - 1.*t54147*t54911 - 1.*t18624*t55774)) - 1.555803111628e-8*(t18624*t55528 + t17715*t55714 + t54911*(-1.*t17715*t54056 - 1.*t51459*t54147 - 1.*t53548*t54147 - 1.*t17715*t55774) + t53548*(t18624*t54056 + t51494*t54147 + t54147*t54911 + t18624*t55774)))*var2[4] - 0.5*(0.00024500000000441*t11049*t259 + 0.00518601555815558*(t11049*t259*t55033 + t53893*(t12332*t18624*t53871 - 1.*t11049*t259*t54056 + t11049*t12332*t54147 - 1.*t259*t53871*t54911 + t55041 + t55064) + t259*t55173*t6976 + t54911*(-1.*t12332*t15190*t53871 + t259*t53871*t53893 + t54912 + t54914 + t259*t54056*t6976 - 1.*t12332*t54147*t6976)) + 5.186e-9*(t259*t54870*t6976 + t53548*(t53813 + t53852 + t12332*t15190*t53871 - 1.*t259*t53871*t53893 - 1.*t259*t54056*t6976 + t12332*t54147*t6976) + t259*t54780*t7319 + t53893*(-1.*t12332*t17715*t53871 + t259*t53548*t53871 + t54262 + t54460 + t259*t54056*t7319 - 1.*t12332*t54147*t7319)) - 1.555803111628e-8*(t11049*t259*t55528 + t53548*(-1.*t12332*t18624*t53871 + t11049*t259*t54056 - 1.*t11049*t12332*t54147 + t259*t53871*t54911 + t55538 + t55542) + t259*t55714*t7319 + t54911*(t12332*t17715*t53871 - 1.*t259*t53548*t53871 + t55457 + t55474 - 1.*t259*t54056*t7319 + t12332*t54147*t7319)))*var2[5] - 0.5*(0.00024500000000441*t51318 + 5.186e-9*(t50857*t54780 + t23340*t54870 + t53548*(-1.*t23340*t54056 - 1.*t52048*t54147 + t58344 + t58352 - 1.*t53893*t58449 - 1.*t15190*t58461) + t53893*(t50857*t54056 + t52155*t54147 + t53548*t58449 + t17715*t58461 + t58490 + t58494)) + 0.00518601555815558*(t51318*t55033 + t23340*t55173 + t54911*(t23340*t54056 + t52048*t54147 + t53893*t58449 + t15190*t58461 + t58816 + t58827) + t53893*(-1.*t51318*t54056 - 1.*t52221*t54147 - 1.*t54911*t58449 - 1.*t18624*t58461 + t58881 + t58882)) - 1.555803111628e-8*(t51318*t55528 + t50857*t55714 + t54911*(-1.*t50857*t54056 - 1.*t52155*t54147 - 1.*t53548*t58449 - 1.*t17715*t58461 + t58924 + t58925) + t53548*(t51318*t54056 + t52221*t54147 + t54911*t58449 + t18624*t58461 + t58945 + t58949)))*var2[10] - 0.5*(0.00024500000000441*t12772 + 5.186e-9*(t14186*t54780 + t14733*t54870 + t53893*(t14186*t54056 + t51843*t54147 + t57345 + t57355 + t53548*t57479 + t17715*t57640) + t53548*(-1.*t14733*t54056 - 1.*t51880*t54147 - 1.*t53893*t57479 - 1.*t15190*t57640 + t57710 + t57724)) + 0.00518601555815558*(t12772*t55033 + t14733*t55173 + t54911*(t14733*t54056 + t51880*t54147 + t53893*t57479 + t15190*t57640 + t57880 + t57884) + t53893*(-1.*t12772*t54056 - 1.*t51736*t54147 - 1.*t54911*t57479 - 1.*t18624*t57640 + t57958 + t57986)) - 1.555803111628e-8*(t12772*t55528 + t14186*t55714 + t54911*(-1.*t14186*t54056 - 1.*t51843*t54147 - 1.*t53548*t57479 - 1.*t17715*t57640 + t58078 + t58122) + t53548*(t12772*t54056 + t51736*t54147 + t54911*t57479 + t18624*t57640 + t58217 + t58224)))*var2[12]);
  p_output1[4]=var2[12]*(-0.5*(0.00024500000000441*t18532 + 0.00518601555815558*(t51922*(-1.*t11049*t53850 - 1.*t18532*t53871 + t55041 + t55064) + t18532*t59544 + t15116*t59653 + t51970*(t15116*t53871 + t54912 + t54914 + t53850*t6976)) - 1.555803111628e-8*(t51943*(t11049*t53850 + t18532*t53871 + t55538 + t55542) + t18532*t59676 + t17079*t59801 + t51970*(-1.*t17079*t53871 + t55457 + t55474 - 1.*t53850*t7319)) + 5.186e-9*(t17079*t59272 + t15116*t59371 + t51943*(t53813 + t53852 - 1.*t15116*t53871 - 1.*t53850*t6976) + t51922*(t17079*t53871 + t54262 + t54460 + t53850*t7319)))*var2[5] - 0.5*(0.00024500000000441*t52185 + 5.186e-9*(t52122*t59272 + t52017*t59371 + t51943*(-1.*t23185*t53850 + t58344 + t58352 - 1.*t15116*t58413 + t60159 + t60193) + t51922*(t50804*t53850 + t17079*t58413 + t58490 + t58494 + t60231 + t60232)) + 0.00518601555815558*(t52185*t59544 + t52017*t59653 + t51970*(t23185*t53850 + t15116*t58413 + t58816 + t58827 + t60286 + t60295) + t51922*(-1.*t51311*t53850 - 1.*t18532*t58413 + t58881 + t58882 + t60337 + t60338)) - 1.555803111628e-8*(t52185*t59676 + t52122*t59801 + t51970*(-1.*t50804*t53850 - 1.*t17079*t58413 + t58924 + t58925 + t60410 + t60411) + t51943*(t51311*t53850 + t18532*t58413 + t58945 + t58949 + t60422 + t60438)))*var2[10] - 0.5*(0.00024500000000441*t51698 + 5.186e-9*(t51833*t59272 + t51860*t59371 + t51922*(t14159*t53850 + t57345 + t57355 + t17079*t57457 + t59376 + t59386) + t51943*(-1.*t14693*t53850 - 1.*t15116*t57457 + t57710 + t57724 + t59462 + t59501)) + 0.00518601555815558*(t51698*t59544 + t51970*(t14693*t53850 + t15116*t57457 + t57880 + t57884 + t59547 + t59582) + t51922*(-1.*t12651*t53850 - 1.*t18532*t57457 + t57958 + t57986 + t59616 + t59620) + t51860*t59653) - 1.555803111628e-8*(t51698*t59676 + t51970*(-1.*t14159*t53850 - 1.*t17079*t57457 + t58078 + t58122 + t59691 + t59694) + t51943*(t12651*t53850 + t18532*t57457 + t58217 + t58224 + t59770 + t59774) + t51833*t59801))*var2[12]);
  p_output1[5]=var2[12]*(-0.5*(0.00024500000000441*t51166 + 5.186e-9*(t26213*t60475 + t19604*t60521 + t15664*(-1.*t23072*t53739 - 1.*t19971*t53783 + t60159 + t60193 - 1.*t58299*t6669 - 1.*t58330*t6885) + t15028*(t50452*t53739 + t49551*t53783 + t60231 + t60232 + t58299*t7215 + t58330*t7293)) + 0.00518601555815558*(t51166*t60598 + t19604*t60686 + t18225*(t23072*t53739 + t19971*t53783 + t60286 + t60295 + t58299*t6669 + t58330*t6885) + t15028*(-1.*t51300*t53739 - 1.*t51219*t53783 - 1.*t11040*t58330 + t60337 + t60338 - 1.*t58299*t9587)) - 1.555803111628e-8*(t51166*t60698 + t26213*t60779 + t18225*(-1.*t50452*t53739 - 1.*t49551*t53783 + t60410 + t60411 - 1.*t58299*t7215 - 1.*t58330*t7293) + t15664*(t51300*t53739 + t51219*t53783 + t11040*t58330 + t60422 + t60438 + t58299*t9587)))*var2[10] - 0.5*(0.00024500000000441*t12310 + 5.186e-9*(t13908*t60475 + t14337*t60521 + t15664*(-1.*t14618*t53739 - 1.*t14538*t53783 + t59462 + t59501 - 1.*t56895*t6669 - 1.*t57231*t6885) + t15028*(t14030*t53739 + t13963*t53783 + t59376 + t59386 + t56895*t7215 + t57231*t7293)) + 0.00518601555815558*(t12310*t60598 + t14337*t60686 + t18225*(t14618*t53739 + t14538*t53783 + t59547 + t59582 + t56895*t6669 + t57231*t6885) + t15028*(-1.*t12606*t53739 - 1.*t12420*t53783 - 1.*t11040*t57231 + t59616 + t59620 - 1.*t56895*t9587)) - 1.555803111628e-8*(t12310*t60698 + t13908*t60779 + t18225*(-1.*t14030*t53739 - 1.*t13963*t53783 + t59691 + t59694 - 1.*t56895*t7215 - 1.*t57231*t7293) + t15664*(t12606*t53739 + t12420*t53783 + t11040*t57231 + t59770 + t59774 + t56895*t9587)))*var2[12]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=-0.5*(0.00024500000000441*(-3.e-6*t12053 - 3.e-6*t12126 - 3.e-6*t12303 + 1.8e-11*t4345) + 5.186e-9*(0.2*t12201 - 1.*t12808*t61019 - 1.*t14198*t61053 - 1.*t61036*t6655 - 3.e-6*(t13200*t61019 + t5307*t61036 + t14207*t61053 + t61071*t7083) - 1.*t61071*t7100) + 0.00518601555815558*(0.2*t12847 - 1.*t12160*t61107 - 1.*t14198*t61141 - 1.*t61155*t6655 - 1.*t61128*t7503 - 3.e-6*(t12303*t61107 + t14207*t61141 + t5307*t61155 + t61128*t9558)) - 1.555803111628e-8*(0.2*t14221 - 1.*t12160*t61197 - 1.*t12808*t61206 - 1.*t61225*t7100 - 1.*t61187*t7503 - 3.e-6*(t12303*t61197 + t13200*t61206 + t61225*t7083 + t61187*t9558)))*Power(var2[12],2);
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec13_minitaur.hh"

namespace FrontStance
{

void Ce1_vec13_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
