/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:08:49 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2357;
  double t2358;
  double t3061;
  double t3062;
  double t3120;
  double t3129;
  double t3644;
  double t3707;
  double t2333;
  double t4387;
  double t4935;
  double t4974;
  double t6207;
  double t4602;
  double t11130;
  double t12159;
  double t14017;
  double t8375;
  double t19161;
  double t32790;
  double t5255;
  double t6475;
  double t7081;
  double t19159;
  double t19915;
  double t14840;
  double t15205;
  double t15621;
  double t17811;
  double t12603;
  double t12613;
  double t12661;
  double t27639;
  double t27656;
  double t29450;
  double t51898;
  double t12779;
  double t12787;
  double t12789;
  double t51935;
  double t7913;
  double t8376;
  double t51562;
  double t51571;
  double t51645;
  double t51647;
  double t51666;
  double t51748;
  double t51803;
  double t51805;
  double t14192;
  double t14752;
  double t18628;
  double t22035;
  double t22080;
  double t23350;
  double t29796;
  double t29804;
  double t32904;
  double t32938;
  double t32752;
  double t32802;
  double t32940;
  double t34360;
  double t37717;
  double t51347;
  double t51350;
  double t50816;
  double t50931;
  double t51365;
  double t51371;
  double t51429;
  double t51553;
  double t51572;
  double t51573;
  double t51628;
  double t51670;
  double t51673;
  double t51700;
  double t51838;
  double t51848;
  double t51900;
  double t51902;
  double t51926;
  double t51958;
  double t51959;
  double t51972;
  double t51998;
  double t52029;
  double t52054;
  double t52189;
  double t52226;
  double t52227;
  double t52230;
  double t52260;
  double t52275;
  double t52315;
  double t52528;
  double t52572;
  double t52732;
  double t52747;
  double t52770;
  double t52834;
  double t52850;
  double t52853;
  double t52898;
  double t52900;
  double t52903;
  double t53037;
  double t53081;
  double t53113;
  double t53160;
  double t53163;
  double t53168;
  double t53330;
  double t53369;
  double t53374;
  double t53479;
  double t53493;
  double t53502;
  double t4347;
  double t4778;
  double t4921;
  double t55856;
  double t55862;
  double t55864;
  double t55880;
  double t55904;
  double t55911;
  double t55913;
  double t55920;
  double t55937;
  double t55938;
  double t55847;
  double t55886;
  double t55948;
  double t55950;
  double t56238;
  double t56250;
  double t56292;
  double t56293;
  double t56069;
  double t56093;
  double t56102;
  double t56124;
  double t56149;
  double t55953;
  double t55954;
  double t56004;
  double t56007;
  double t56015;
  double t57740;
  double t57741;
  double t57753;
  double t56318;
  double t56320;
  double t56330;
  double t56060;
  double t56174;
  double t56218;
  double t56224;
  double t56312;
  double t56315;
  double t55807;
  double t55838;
  double t55842;
  double t57660;
  double t57680;
  double t57685;
  double t7499;
  double t9627;
  double t11051;
  double t57709;
  double t57756;
  double t57777;
  double t57783;
  double t57785;
  double t57793;
  double t12672;
  double t12796;
  double t12810;
  double t58215;
  double t58225;
  double t58231;
  double t59204;
  double t59205;
  double t59285;
  double t58005;
  double t58045;
  double t58071;
  double t58072;
  double t58074;
  double t58077;
  double t58127;
  double t58129;
  double t58276;
  double t58277;
  double t58279;
  double t58451;
  double t58645;
  double t58650;
  double t58690;
  double t58802;
  double t58914;
  double t58915;
  double t58918;
  double t58919;
  double t58944;
  double t58964;
  double t58979;
  double t59020;
  double t60021;
  double t60028;
  double t60051;
  double t51339;
  double t51462;
  double t51512;
  double t60525;
  double t60526;
  double t60528;
  double t60558;
  double t60574;
  double t60556;
  double t60575;
  double t60576;
  double t60464;
  double t60469;
  double t60472;
  double t60584;
  double t60588;
  double t60592;
  double t60599;
  double t60605;
  double t60606;
  double t60494;
  double t60578;
  double t60581;
  double t60593;
  double t60611;
  double t60640;
  double t60644;
  double t60646;
  double t60649;
  double t32891;
  double t37733;
  double t37755;
  double t55951;
  double t56219;
  double t57896;
  double t57900;
  double t58234;
  double t58239;
  double t58468;
  double t58483;
  double t58847;
  double t58852;
  double t58922;
  double t58926;
  double t60924;
  double t60925;
  double t60931;
  double t59162;
  double t59168;
  double t60960;
  double t60963;
  double t60964;
  double t59511;
  double t59513;
  double t60997;
  double t60998;
  double t61000;
  double t59629;
  double t59643;
  double t61077;
  double t61079;
  double t61081;
  double t59735;
  double t59788;
  double t61163;
  double t61164;
  double t61167;
  double t59846;
  double t59851;
  double t61207;
  double t61226;
  double t61227;
  double t59899;
  double t59910;
  double t60733;
  double t60749;
  double t60780;
  double t60831;
  double t60835;
  double t60807;
  double t60813;
  double t60582;
  double t60667;
  double t60687;
  double t60911;
  double t60937;
  double t60941;
  double t60981;
  double t61022;
  double t61037;
  double t61100;
  double t61114;
  double t61171;
  double t61172;
  double t61328;
  double t61803;
  double t61804;
  double t61805;
  double t61808;
  double t61812;
  double t61814;
  double t61829;
  double t61344;
  double t61345;
  double t61880;
  double t61881;
  double t61884;
  double t61887;
  double t61898;
  double t61902;
  double t61397;
  double t61399;
  double t61437;
  double t61440;
  double t61637;
  double t61640;
  double t61509;
  double t61517;
  double t61520;
  double t62044;
  double t62067;
  double t62000;
  double t61943;
  double t61946;
  double t62009;
  double t62334;
  double t62337;
  double t62339;
  double t62346;
  double t62397;
  double t62359;
  double t62375;
  double t62400;
  t2357 = Cos(var1[13]);
  t2358 = -1.*t2357;
  t3061 = 1. + t2358;
  t3062 = 3.e-6*t3061;
  t3120 = 3.e-6*t2357;
  t3129 = t3062 + t3120;
  t3644 = Cos(var1[4]);
  t3707 = Cos(var1[5]);
  t2333 = Cos(var1[11]);
  t4387 = Sin(var1[11]);
  t4935 = 9.e-12*t3061;
  t4974 = t4935 + t2358;
  t6207 = Sin(var1[13]);
  t4602 = Sin(var1[4]);
  t11130 = -1.000000000009*t3061;
  t12159 = 1. + t11130;
  t14017 = Sin(var1[5]);
  t8375 = -1.000000000009*t2333*t6207;
  t19161 = 1.000000000009*t2333*t6207;
  t32790 = 1.000000000009*t4387*t6207;
  t5255 = t2333*t4974;
  t6475 = -1.000000000009*t4387*t6207;
  t7081 = t5255 + t6475;
  t19159 = t4974*t4387;
  t19915 = t19159 + t19161;
  t14840 = -9.e-12*t3061;
  t15205 = 1. + t14840;
  t15621 = -3.e-6*t15205;
  t17811 = t15621 + t3062;
  t12603 = -1.*t12159*t4387;
  t12613 = t2333*t6207;
  t12661 = t12603 + t12613;
  t27639 = t2333*t12159;
  t27656 = t4387*t6207;
  t29450 = t27639 + t27656;
  t51898 = Sin(var1[3]);
  t12779 = -1.*t2333*t12159;
  t12787 = -1.*t4387*t6207;
  t12789 = t12779 + t12787;
  t51935 = Cos(var1[3]);
  t7913 = -1.*t4974*t4387;
  t8376 = t7913 + t8375;
  t51562 = t3129*t3707*t4387;
  t51571 = t51562 + t14017;
  t51645 = t3707*t19915;
  t51647 = -1.*t17811*t14017;
  t51666 = t51645 + t51647;
  t51748 = t3707*t29450;
  t51803 = -3.e-6*t6207*t14017;
  t51805 = t51748 + t51803;
  t14192 = -1.*t3129*t4387*t14017;
  t14752 = t3707 + t14192;
  t18628 = -1.*t17811*t3707;
  t22035 = -1.*t19915*t14017;
  t22080 = t18628 + t22035;
  t23350 = -3.e-6*t3707*t6207;
  t29796 = -1.*t29450*t14017;
  t29804 = t23350 + t29796;
  t32904 = t2357*t4387;
  t32938 = t32904 + t8375;
  t32752 = t2333*t2357;
  t32802 = t32752 + t32790;
  t32940 = t3707*t32938;
  t34360 = -3.e-6*t2357*t14017;
  t37717 = t32940 + t34360;
  t51347 = 1.000000000009*t2333*t2357;
  t51350 = t51347 + t32790;
  t50816 = -1.000000000009*t2357*t4387;
  t50931 = t50816 + t19161;
  t51365 = t3707*t51350;
  t51371 = -3.000000000027e-6*t6207*t14017;
  t51429 = t51365 + t51371;
  t51553 = t2333*t3129*t3644;
  t51572 = -1.*t4602*t51571;
  t51573 = t51553 + t51572;
  t51628 = t3644*t7081;
  t51670 = -1.*t4602*t51666;
  t51673 = t51628 + t51670;
  t51700 = t3644*t12661;
  t51838 = -1.*t4602*t51805;
  t51848 = t51700 + t51838;
  t51900 = -1.*t3129*t3644*t4387;
  t51902 = -1.*t2333*t3129*t3707*t4602;
  t51926 = t51900 + t51902;
  t51958 = t3644*t12789;
  t51959 = -1.*t3707*t12661*t4602;
  t51972 = t51958 + t51959;
  t51998 = t3644*t8376;
  t52029 = -1.*t3707*t7081*t4602;
  t52054 = t51998 + t52029;
  t52189 = -1.*t2333*t3129*t4602;
  t52226 = -1.*t3644*t51571;
  t52227 = t52189 + t52226;
  t52230 = -1.*t7081*t4602;
  t52260 = -1.*t3644*t51666;
  t52275 = t52230 + t52260;
  t52315 = -1.*t12661*t4602;
  t52528 = -1.*t3644*t51805;
  t52572 = t52315 + t52528;
  t52732 = 3.e-6*t2357*t3707;
  t52747 = t32938*t14017;
  t52770 = t52732 + t52747;
  t52834 = t3644*t32802;
  t52850 = -1.*t4602*t37717;
  t52853 = t52834 + t52850;
  t52898 = 3.000000000027e-6*t3707*t6207;
  t52900 = t51350*t14017;
  t52903 = t52898 + t52900;
  t53037 = t3644*t50931;
  t53081 = -1.*t4602*t51429;
  t53113 = t53037 + t53081;
  t53160 = -1.*t3707;
  t53163 = t3129*t4387*t14017;
  t53168 = t53160 + t53163;
  t53330 = t17811*t3707;
  t53369 = t19915*t14017;
  t53374 = t53330 + t53369;
  t53479 = 3.e-6*t3707*t6207;
  t53493 = t29450*t14017;
  t53502 = t53479 + t53493;
  t4347 = t2333*t3129*t3644*t3707;
  t4778 = -1.*t3129*t4387*t4602;
  t4921 = t4347 + t4778;
  t55856 = -1.2e-12*var1[13];
  t55862 = 0.0999997000009*t3061;
  t55864 = 3.e-12*t6207;
  t55880 = t55856 + t55862 + t55864;
  t55904 = 1.000000000009*t3061;
  t55911 = -1. + t55904;
  t55913 = 0.2*t55911;
  t55920 = -0.2000000000048*t3061;
  t55937 = 0.0999997000009*t6207;
  t55938 = t55913 + t55920 + t55937;
  t55847 = -0.2*t4387;
  t55886 = t2333*t55880;
  t55948 = -1.*t4387*t55938;
  t55950 = t55847 + t55886 + t55948;
  t56238 = -0.2*t2333;
  t56250 = -1.*t4387*t55880;
  t56292 = -1.*t2333*t55938;
  t56293 = t56238 + t56250 + t56292;
  t56069 = -1. + t2333;
  t56093 = 0.2*t56069;
  t56102 = t4387*t55880;
  t56124 = t2333*t55938;
  t56149 = t56093 + t56102 + t56124;
  t55953 = 4.e-7*var1[13];
  t55954 = 0.1*t15205;
  t56004 = 3.000000000027e-7*t3061;
  t56007 = 9.e-18*t6207;
  t56015 = t55953 + t55954 + t56004 + t56007;
  t57740 = t3707*t56149;
  t57741 = -1.*t56015*t14017;
  t57753 = t57740 + t57741;
  t56318 = t2333*t3129*t4602;
  t56320 = t3644*t51571;
  t56330 = t56318 + t56320;
  t56060 = t3707*t56015;
  t56174 = t56149*t14017;
  t56218 = t56060 + t56174;
  t56224 = t3644*t3707*t55950;
  t56312 = t56293*t4602;
  t56315 = t56224 + t56312;
  t55807 = t7081*t4602;
  t55838 = t3644*t51666;
  t55842 = t55807 + t55838;
  t57660 = t3644*t56293;
  t57680 = -1.*t3707*t55950*t4602;
  t57685 = t57660 + t57680;
  t7499 = t3644*t3707*t7081;
  t9627 = t8376*t4602;
  t11051 = t7499 + t9627;
  t57709 = t55950*t4602;
  t57756 = t3644*t57753;
  t57777 = t57709 + t57756;
  t57783 = t3644*t55950;
  t57785 = -1.*t4602*t57753;
  t57793 = t57783 + t57785;
  t12672 = t3644*t3707*t12661;
  t12796 = t12789*t4602;
  t12810 = t12672 + t12796;
  t58215 = t12661*t4602;
  t58225 = t3644*t51805;
  t58231 = t58215 + t58225;
  t59204 = -1.*t3707*t56015;
  t59205 = -1.*t56149*t14017;
  t59285 = t59204 + t59205;
  t58005 = -1.*t53168*t56218;
  t58045 = -1.*t56330*t57777;
  t58071 = -1.*t51573*t57793;
  t58072 = t58005 + t58045 + t58071;
  t58074 = t56218*t53374;
  t58077 = t55842*t57777;
  t58127 = t51673*t57793;
  t58129 = t58074 + t58077 + t58127;
  t58276 = t53168*t56218;
  t58277 = t56330*t57777;
  t58279 = t51573*t57793;
  t58451 = t58276 + t58277 + t58279;
  t58645 = -1.*t56218*t53502;
  t58650 = -1.*t57777*t58231;
  t58690 = -1.*t57793*t51848;
  t58802 = t58645 + t58650 + t58690;
  t58914 = -1.*t56218*t53374;
  t58915 = -1.*t55842*t57777;
  t58918 = -1.*t51673*t57793;
  t58919 = t58914 + t58915 + t58918;
  t58944 = t56218*t53502;
  t58964 = t57777*t58231;
  t58979 = t57793*t51848;
  t59020 = t58944 + t58964 + t58979;
  t60021 = -1.*t55950*t4602;
  t60028 = -1.*t3644*t57753;
  t60051 = t60021 + t60028;
  t51339 = t50931*t4602;
  t51462 = t3644*t51429;
  t51512 = t51339 + t51462;
  t60525 = 0.0999997000009*t2357;
  t60526 = -3.000000000027e-12*t6207;
  t60528 = t60525 + t60526;
  t60558 = 3.e-12*t2357;
  t60574 = -1.2e-12 + t60558 + t55937;
  t60556 = t2333*t60528;
  t60575 = t4387*t60574;
  t60576 = t60556 + t60575;
  t60464 = 9.e-18*t2357;
  t60469 = 2.999991000027e-7*t6207;
  t60472 = 4.e-7 + t60464 + t60469;
  t60584 = -1.*t4387*t60528;
  t60588 = t2333*t60574;
  t60592 = t60584 + t60588;
  t60599 = t3707*t60576;
  t60605 = -1.*t60472*t14017;
  t60606 = t60599 + t60605;
  t60494 = t3707*t60472;
  t60578 = t60576*t14017;
  t60581 = t60494 + t60578;
  t60593 = t60592*t4602;
  t60611 = t3644*t60606;
  t60640 = t60593 + t60611;
  t60644 = t3644*t60592;
  t60646 = -1.*t4602*t60606;
  t60649 = t60644 + t60646;
  t32891 = t32802*t4602;
  t37733 = t3644*t37717;
  t37755 = t32891 + t37733;
  t55951 = -1.*t55950*t14017*t53168;
  t56219 = -1.*t2333*t3129*t14017*t56218;
  t57896 = t7081*t14017*t56218;
  t57900 = t55950*t14017*t53374;
  t58234 = t55950*t14017*t53168;
  t58239 = t2333*t3129*t14017*t56218;
  t58468 = -1.*t12661*t14017*t56218;
  t58483 = -1.*t55950*t14017*t53502;
  t58847 = -1.*t7081*t14017*t56218;
  t58852 = -1.*t55950*t14017*t53374;
  t58922 = t12661*t14017*t56218;
  t58926 = t55950*t14017*t53502;
  t60924 = -1.*t2333*t3129*t55950;
  t60925 = -1.*t51571*t57753;
  t60931 = t60924 + t58005 + t60925;
  t59162 = -1.*t51571*t56218;
  t59168 = -1.*t53168*t57753;
  t60960 = t55950*t7081;
  t60963 = t51666*t57753;
  t60964 = t60960 + t60963 + t58074;
  t59511 = t51666*t56218;
  t59513 = t57753*t53374;
  t60997 = t2333*t3129*t55950;
  t60998 = t51571*t57753;
  t61000 = t60997 + t58276 + t60998;
  t59629 = t51571*t56218;
  t59643 = t53168*t57753;
  t61077 = -1.*t55950*t12661;
  t61079 = -1.*t57753*t51805;
  t61081 = t61077 + t61079 + t58645;
  t59735 = -1.*t56218*t51805;
  t59788 = -1.*t57753*t53502;
  t61163 = -1.*t55950*t7081;
  t61164 = -1.*t51666*t57753;
  t61167 = t61163 + t61164 + t58914;
  t59846 = -1.*t51666*t56218;
  t59851 = -1.*t57753*t53374;
  t61207 = t55950*t12661;
  t61226 = t57753*t51805;
  t61227 = t61207 + t61226 + t58944;
  t59899 = t56218*t51805;
  t59910 = t57753*t53502;
  t60733 = t53168*t60581;
  t60749 = -1.*t56218*t52770;
  t60780 = -1.*t60581*t53502;
  t60831 = t56218*t52770;
  t60835 = t60581*t53502;
  t60807 = -1.*t60581*t53374;
  t60813 = -1.*t56218*t52903;
  t60582 = -1.*t53168*t60581;
  t60667 = t60581*t53374;
  t60687 = t56218*t52903;
  t60911 = -1.*t2333*t3129*t56293;
  t60937 = t55950*t8376;
  t60941 = t56293*t7081;
  t60981 = t2333*t3129*t56293;
  t61022 = -1.*t56293*t12661;
  t61037 = -1.*t55950*t12789;
  t61100 = -1.*t55950*t8376;
  t61114 = -1.*t56293*t7081;
  t61171 = t56293*t12661;
  t61172 = t55950*t12789;
  t61328 = t2333*t3129*t60592;
  t61803 = -4.e-7*var1[13];
  t61804 = -1. + t4935;
  t61805 = 0.1*t61804;
  t61808 = -3.000000000027e-7*t3061;
  t61812 = t3129*t4387*t56149;
  t61814 = -9.e-18*t6207;
  t61829 = t61803 + t61805 + t61808 + t61812 + t60997 + t61814;
  t61344 = -1.*t60592*t12661;
  t61345 = -1.*t55950*t32802;
  t61880 = -1.*t17811*t56015;
  t61881 = -1.*t56149*t19915;
  t61884 = t61880 + t61881 + t61163;
  t61887 = 3.e-6*t56015*t6207;
  t61898 = t56149*t29450;
  t61902 = t61887 + t61207 + t61898;
  t61397 = t60592*t12661;
  t61399 = t55950*t32802;
  t61437 = -1.*t55950*t50931;
  t61440 = -1.*t60592*t7081;
  t61637 = -1.*t3129*t4387*t56149;
  t61640 = t55953 + t55954 + t56004 + t61637 + t60924 + t56007;
  t61509 = -1.*t2333*t3129*t60592;
  t61517 = t55950*t50931;
  t61520 = t60592*t7081;
  t62044 = -1.*t17811*t60472;
  t62067 = -3.000000000027e-6*t56015*t6207;
  t62000 = 3.e-6*t2357*t56015;
  t61943 = -9.e-18*t2357;
  t61946 = -2.999991000027e-7*t6207;
  t62009 = 3.e-6*t60472*t6207;
  t62334 = -1.000000000009*t2357*t55938;
  t62337 = -1.*t4974*t60574;
  t62339 = -1.000000000009*t60528*t6207;
  t62346 = -1.000000000009*t55880*t6207;
  t62397 = -1.000000000009*t55938*t6207;
  t62359 = t12159*t60528;
  t62375 = t2357*t55880;
  t62400 = t60574*t6207;
  p_output1[0]=var2[13]*(-0.5*(-1.72e-8*t51573 - 5.16e-14*t51673 + 0.0042999871*t51848)*var2[4] - 0.5*(-1.72e-8*t14752*t3644 - 5.16e-14*t22080*t3644 + 0.0042999871*t29804*t3644)*var2[5] - 0.5*(-5.16e-14*t11051 + 0.0042999871*t12810 - 1.72e-8*t4921)*var2[11] - 0.5*(0.0042999871*t37755 - 5.16e-14*t51512)*var2[13]);
  p_output1[1]=var2[13]*(-0.5*(-1.72e-8*(-1.*t51573*t51935 - 1.*t51898*t53168) - 5.16e-14*(-1.*t51673*t51935 - 1.*t51898*t53374) + 0.0042999871*(-1.*t51848*t51935 - 1.*t51898*t53502))*var2[3] - 0.5*(1.72e-8*t51898*t52227 + 5.16e-14*t51898*t52275 - 0.0042999871*t51898*t52572)*var2[4] - 0.5*(-1.72e-8*(t14752*t4602*t51898 + t51571*t51935) - 5.16e-14*(t22080*t4602*t51898 + t51666*t51935) + 0.0042999871*(t29804*t4602*t51898 + t51805*t51935))*var2[5] - 0.5*(-1.72e-8*(-1.*t51898*t51926 + t14017*t2333*t3129*t51935) + 0.0042999871*(t12661*t14017*t51935 - 1.*t51898*t51972) - 5.16e-14*(-1.*t51898*t52054 + t14017*t51935*t7081))*var2[11] - 0.5*(0.0042999871*(t51935*t52770 - 1.*t51898*t52853) - 5.16e-14*(t51935*t52903 - 1.*t51898*t53113))*var2[13]);
  p_output1[2]=var2[13]*(-0.5*(-1.72e-8*(-1.*t51573*t51898 + t51935*t53168) - 5.16e-14*(-1.*t51673*t51898 + t51935*t53374) + 0.0042999871*(-1.*t51848*t51898 + t51935*t53502))*var2[3] - 0.5*(-1.72e-8*t51935*t52227 - 5.16e-14*t51935*t52275 + 0.0042999871*t51935*t52572)*var2[4] - 0.5*(-1.72e-8*(t51571*t51898 - 1.*t14752*t4602*t51935) - 5.16e-14*(t51666*t51898 - 1.*t22080*t4602*t51935) + 0.0042999871*(t51805*t51898 - 1.*t29804*t4602*t51935))*var2[5] - 0.5*(-1.72e-8*(t14017*t2333*t3129*t51898 + t51926*t51935) + 0.0042999871*(t12661*t14017*t51898 + t51935*t51972) - 5.16e-14*(t51935*t52054 + t14017*t51898*t7081))*var2[11] - 0.5*(0.0042999871*(t51898*t52770 + t51935*t52853) - 5.16e-14*(t51898*t52903 + t51935*t53113))*var2[13]);
  p_output1[3]=var2[13]*(-0.5*(0.000271000000002439*t51573 + 0.0042999871*(t51673*t58072 + t51573*t58129 + t55842*(-1.*t51573*t57777 - 1.*t52227*t57793 - 1.*t56330*t57793 - 1.*t51573*t60051) + t56330*(t51673*t57777 + t52275*t57793 + t55842*t57793 + t51673*t60051)) - 5.16e-14*(t51848*t58451 + t51573*t58802 + t58231*(t51573*t57777 + t52227*t57793 + t56330*t57793 + t51573*t60051) + t56330*(-1.*t51848*t57777 - 1.*t52572*t57793 - 1.*t57793*t58231 - 1.*t51848*t60051)) - 1.72e-8*(t51848*t58919 + t51673*t59020 + t58231*(-1.*t51673*t57777 - 1.*t52275*t57793 - 1.*t55842*t57793 - 1.*t51673*t60051) + t55842*(t51848*t57777 + t52572*t57793 + t57793*t58231 + t51848*t60051)))*var2[4] - 0.5*(0.000271000000002439*t14752*t3644 + 0.0042999871*(t22080*t3644*t58072 + t14752*t3644*t58129 + t55842*(-1.*t14752*t3644*t57777 + t14752*t4602*t57793 + t59162 + t59168 + t4602*t51573*t59285 - 1.*t3644*t56330*t59285) + t56330*(t22080*t3644*t57777 - 1.*t22080*t4602*t57793 - 1.*t4602*t51673*t59285 + t3644*t55842*t59285 + t59511 + t59513)) - 5.16e-14*(t29804*t3644*t58451 + t14752*t3644*t58802 + t58231*(t14752*t3644*t57777 - 1.*t14752*t4602*t57793 - 1.*t4602*t51573*t59285 + t3644*t56330*t59285 + t59629 + t59643) + t56330*(-1.*t29804*t3644*t57777 + t29804*t4602*t57793 + t4602*t51848*t59285 - 1.*t3644*t58231*t59285 + t59735 + t59788)) - 1.72e-8*(t29804*t3644*t58919 + t22080*t3644*t59020 + t58231*(-1.*t22080*t3644*t57777 + t22080*t4602*t57793 + t4602*t51673*t59285 - 1.*t3644*t55842*t59285 + t59846 + t59851) + t55842*(t29804*t3644*t57777 - 1.*t29804*t4602*t57793 - 1.*t4602*t51848*t59285 + t3644*t58231*t59285 + t59899 + t59910)))*var2[5] - 0.5*(0.000271000000002439*t4921 + 0.0042999871*(t55842*(t55951 + t56219 - 1.*t56315*t56330 - 1.*t51573*t57685 - 1.*t4921*t57777 - 1.*t51926*t57793) + t56330*(t55842*t56315 + t51673*t57685 + t11051*t57777 + t52054*t57793 + t57896 + t57900) + t11051*t58072 + t4921*t58129) - 5.16e-14*(t58231*(t56315*t56330 + t51573*t57685 + t4921*t57777 + t51926*t57793 + t58234 + t58239) + t12810*t58451 + t56330*(-1.*t51848*t57685 - 1.*t12810*t57777 - 1.*t51972*t57793 - 1.*t56315*t58231 + t58468 + t58483) + t4921*t58802) - 1.72e-8*(t58231*(-1.*t55842*t56315 - 1.*t51673*t57685 - 1.*t11051*t57777 - 1.*t52054*t57793 + t58847 + t58852) + t12810*t58919 + t55842*(t51848*t57685 + t12810*t57777 + t51972*t57793 + t56315*t58231 + t58922 + t58926) + t11051*t59020))*var2[11] - 0.5*(0.0042999871*(t51512*t58072 + t55842*(t60582 - 1.*t56330*t60640 - 1.*t51573*t60649) + t56330*(t51512*t57777 + t53113*t57793 + t55842*t60640 + t51673*t60649 + t60667 + t60687)) - 5.16e-14*(t37755*t58451 + t58231*(t56330*t60640 + t51573*t60649 + t60733) + t56330*(-1.*t37755*t57777 - 1.*t52853*t57793 - 1.*t58231*t60640 - 1.*t51848*t60649 + t60749 + t60780)) - 1.72e-8*(t37755*t58919 + t51512*t59020 + t58231*(-1.*t51512*t57777 - 1.*t53113*t57793 - 1.*t55842*t60640 - 1.*t51673*t60649 + t60807 + t60813) + t55842*(t37755*t57777 + t52853*t57793 + t58231*t60640 + t51848*t60649 + t60831 + t60835)))*var2[13]);
  p_output1[4]=var2[13]*(-0.5*(0.000271000000002439*t51571 + 0.0042999871*(t53374*(-1.*t14752*t57753 + t59162 + t59168 - 1.*t51571*t59285) + t53168*(t22080*t57753 + t51666*t59285 + t59511 + t59513) + t51666*t60931 + t51571*t60964) - 5.16e-14*(t53502*(t14752*t57753 + t51571*t59285 + t59629 + t59643) + t53168*(-1.*t29804*t57753 - 1.*t51805*t59285 + t59735 + t59788) + t51805*t61000 + t51571*t61081) - 1.72e-8*(t53502*(-1.*t22080*t57753 - 1.*t51666*t59285 + t59846 + t59851) + t53374*(t29804*t57753 + t51805*t59285 + t59899 + t59910) + t51805*t61167 + t51666*t61227))*var2[5] - 0.5*(0.000271000000002439*t14017*t2333*t3129 - 5.16e-14*(t53502*(-1.*t3129*t4387*t55950 + t3707*t51571*t55950 + t2333*t3129*t3707*t57753 + t58234 + t58239 + t60981) + t12661*t14017*t61000 + t53168*(-1.*t3707*t51805*t55950 - 1.*t12661*t3707*t57753 + t58468 + t58483 + t61022 + t61037) + t14017*t2333*t3129*t61081) - 1.72e-8*(t12661*t14017*t61167 + t53374*(t3707*t51805*t55950 + t12661*t3707*t57753 + t58922 + t58926 + t61171 + t61172) + t14017*t61227*t7081 + t53502*(-1.*t3707*t51666*t55950 + t58847 + t58852 + t61100 + t61114 - 1.*t3707*t57753*t7081)) + 0.0042999871*(t53374*(t3129*t4387*t55950 - 1.*t3707*t51571*t55950 + t55951 + t56219 - 1.*t2333*t3129*t3707*t57753 + t60911) + t14017*t2333*t3129*t60964 + t14017*t60931*t7081 + t53168*(t3707*t51666*t55950 + t57896 + t57900 + t60937 + t60941 + t3707*t57753*t7081)))*var2[11] - 0.5*(-5.16e-14*(t52770*t61000 + t53502*(t51571*t60606 + t60733 + t61328) + t53168*(-1.*t37717*t57753 - 1.*t51805*t60606 + t60749 + t60780 + t61344 + t61345)) - 1.72e-8*(t52770*t61167 + t52903*t61227 + t53374*(t37717*t57753 + t51805*t60606 + t60831 + t60835 + t61397 + t61399) + t53502*(-1.*t51429*t57753 - 1.*t51666*t60606 + t60807 + t60813 + t61437 + t61440)) + 0.0042999871*(t52903*t60931 + t53374*(t60582 - 1.*t51571*t60606 + t61509) + t53168*(t51429*t57753 + t51666*t60606 + t60667 + t60687 + t61517 + t61520)))*var2[13]);
  p_output1[5]=var2[13]*(-0.5*(-0.000271000000002439*t3129*t4387 - 5.16e-14*(t12661*(t2333*t3129*t56149 + t60981) + t2333*t3129*(-1.*t29450*t55950 - 1.*t12661*t56149 + t61022 + t61037) + t12789*t61829 - 1.*t3129*t4387*(-1.*t29450*t56149 + t61077 - 3.e-6*t56015*t6207)) + 0.0042999871*(-1.*t3129*t4387*(t17811*t56015 + t19915*t56149 + t60960) + (-1.*t2333*t3129*t56149 + t60911)*t7081 + t2333*t3129*(t19915*t55950 + t60937 + t60941 + t56149*t7081) + t61640*t8376) - 1.72e-8*(t12789*t61884 + (t29450*t55950 + t12661*t56149 + t61171 + t61172)*t7081 + t12661*(-1.*t19915*t55950 + t61100 + t61114 - 1.*t56149*t7081) + t61902*t8376))*var2[11] - 0.5*(-5.16e-14*(t32802*t61829 + t12661*(-4.e-7 + t3129*t4387*t60576 + t61328 + t61943 + t61946) + t2333*t3129*(-3.e-6*t2357*t56015 - 1.*t32938*t56149 - 1.*t29450*t60576 + t61344 + t61345 - 3.e-6*t60472*t6207)) + 0.0042999871*(t50931*t61640 + t2333*t3129*(t51350*t56149 + t17811*t60472 + t19915*t60576 + t61517 + t61520 + 3.000000000027e-6*t56015*t6207) + (4.e-7 + t60464 + t60469 - 1.*t3129*t4387*t60576 + t61509)*t7081) - 1.72e-8*(t32802*t61884 + t50931*t61902 + t12661*(-1.*t51350*t56149 - 1.*t19915*t60576 + t61437 + t61440 + t62044 + t62067) + (t32938*t56149 + t29450*t60576 + t61397 + t61399 + t62000 + t62009)*t7081))*var2[13]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=-0.5*(0.0042999871*(-0.2*t2357 + t17811*(4.e-7 + t60464 + t60469 - 1.*t3129*t60574) + t62044 + t62067 + 3.000000000027e-6*(-1.*t3129*t55880 + t55953 + t55954 + t56004 + t56007)*t6207 + t62334 + t62337 + t62339 + t62346) - 5.16e-14*(3.e-6*t2357*(t3129*t55880 + t61803 + t61805 + t61808 + t61814) + t62000 + t62009 - 0.2000000000018*t6207 + 3.e-6*(-4.e-7 + t3129*t60574 + t61943 + t61946)*t6207 + t62359 + t62375 + t62397 + t62400) - 1.72e-8*(3.000000000027e-6*t6207*(t12159*t55938 + t61887 + t55880*t6207) + 3.e-6*t6207*(t62044 + t62067 + t62334 + t62337 + t62339 + t62346) + 3.e-6*t2357*(-1.*t4974*t55880 + t61880 + t62397) + t17811*(t62000 + t62009 + t62359 + t62375 + t62397 + t62400)))*Power(var2[13],2);
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec14_minitaur.hh"

namespace FrontStance
{

void Ce1_vec14_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
