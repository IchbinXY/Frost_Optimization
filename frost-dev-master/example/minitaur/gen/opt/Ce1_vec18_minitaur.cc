/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:09:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3826;
  double t4100;
  double t4699;
  double t4736;
  double t5161;
  double t11055;
  double t12690;
  double t12735;
  double t5189;
  double t2455;
  double t4709;
  double t5311;
  double t5528;
  double t6724;
  double t13032;
  double t14128;
  double t14206;
  double t14220;
  double t14225;
  double t14389;
  double t14516;
  double t14528;
  double t14544;
  double t14547;
  double t14557;
  double t1948;
  double t2075;
  double t14502;
  double t14505;
  double t19515;
  double t21391;
  double t22090;
  double t18611;
  double t31901;
  double t32136;
  double t32283;
  double t32386;
  double t31794;
  double t32426;
  double t32432;
  double t32474;
  double t32656;
  double t32696;
  double t32718;
  double t34337;
  double t33782;
  double t38575;
  double t39116;
  double t34152;
  double t34316;
  double t36134;
  double t36758;
  double t37752;
  double t38262;
  double t38641;
  double t38767;
  double t39120;
  double t39126;
  double t39130;
  double t39584;
  double t38515;
  double t38520;
  double t42720;
  double t48669;
  double t48670;
  double t49008;
  double t49009;
  double t49070;
  double t49219;
  double t49528;
  double t49532;
  double t49549;
  double t14649;
  double t14651;
  double t14699;
  double t15187;
  double t11050;
  double t14457;
  double t14574;
  double t14620;
  double t23239;
  double t23647;
  double t24497;
  double t28490;
  double t19886;
  double t21400;
  double t22172;
  double t22631;
  double t32922;
  double t32935;
  double t32955;
  double t32969;
  double t31895;
  double t32501;
  double t32724;
  double t32910;
  double t50219;
  double t50220;
  double t50221;
  double t50222;
  double t50225;
  double t50226;
  double t50238;
  double t60947;
  double t50246;
  double t50250;
  double t50251;
  double t50253;
  double t50257;
  double t50258;
  double t50259;
  double t50320;
  double t50335;
  double t50339;
  double t50354;
  double t50542;
  double t50544;
  double t50624;
  double t14628;
  double t18959;
  double t19173;
  double t22958;
  double t30455;
  double t31434;
  double t61268;
  double t32913;
  double t33051;
  double t33206;
  double t48486;
  double t48548;
  double t48554;
  double t48556;
  double t45245;
  double t45614;
  double t45617;
  double t45623;
  double t38264;
  double t39125;
  double t42652;
  double t42691;
  double t46857;
  double t48569;
  double t48615;
  double t49391;
  double t49445;
  double t49446;
  double t49448;
  double t49287;
  double t49289;
  double t49354;
  double t49364;
  double t48913;
  double t49064;
  double t49222;
  double t49234;
  double t49376;
  double t49464;
  double t49475;
  double t49935;
  double t49943;
  double t50052;
  double t50055;
  double t49569;
  double t49596;
  double t49624;
  double t49638;
  double t49529;
  double t49540;
  double t49550;
  double t49565;
  double t49651;
  double t50057;
  double t50068;
  double t50223;
  double t50242;
  double t50243;
  double t50256;
  double t50262;
  double t50279;
  double t50521;
  double t50751;
  double t50772;
  double t54461;
  double t55004;
  double t55010;
  double t55803;
  double t51128;
  double t51184;
  double t51230;
  double t52848;
  double t50815;
  double t50850;
  double t51081;
  double t53158;
  double t55865;
  double t56316;
  double t59622;
  double t59637;
  double t59658;
  double t59661;
  double t59101;
  double t59434;
  double t59455;
  double t59461;
  double t58147;
  double t58391;
  double t58474;
  double t59496;
  double t59686;
  double t59698;
  double t60814;
  double t60819;
  double t60821;
  double t60823;
  double t60783;
  double t60784;
  double t60786;
  double t60798;
  double t60648;
  double t60650;
  double t60658;
  double t60802;
  double t60882;
  double t60886;
  double t60949;
  double t60958;
  double t60994;
  double t61089;
  double t61157;
  double t61168;
  double t61173;
  double t61238;
  double t61247;
  double t61463;
  double t61467;
  double t61472;
  double t61510;
  double t61563;
  double t61565;
  double t61656;
  double t61658;
  double t61717;
  double t61747;
  double t61785;
  double t61794;
  double t61839;
  double t61850;
  double t61851;
  double t61855;
  double t61862;
  double t61865;
  double t61927;
  double t61928;
  double t61931;
  double t61949;
  double t61950;
  double t61951;
  double t61965;
  double t61966;
  double t61979;
  double t62022;
  double t62073;
  double t62074;
  double t62087;
  double t62088;
  double t62108;
  double t62175;
  double t62178;
  double t62183;
  double t62185;
  double t62216;
  double t62231;
  double t62312;
  double t62330;
  double t62335;
  double t62344;
  double t62345;
  double t62441;
  double t63642;
  double t63612;
  double t63687;
  double t63624;
  double t63629;
  double t63631;
  double t63635;
  double t63652;
  double t63654;
  double t63660;
  double t63661;
  double t63669;
  double t63682;
  double t63686;
  double t63688;
  double t63696;
  double t63701;
  double t63704;
  double t63715;
  double t63721;
  double t63722;
  double t63727;
  double t63734;
  double t63736;
  double t63749;
  double t63750;
  double t63754;
  double t63779;
  double t63786;
  double t63596;
  double t63657;
  double t63711;
  double t63738;
  double t63743;
  double t63930;
  double t63935;
  double t63941;
  double t63876;
  double t63880;
  double t63890;
  double t64041;
  double t64055;
  double t64077;
  double t64079;
  double t64111;
  double t63965;
  double t63976;
  double t64026;
  double t63744;
  double t63787;
  double t63795;
  double t63584;
  double t63589;
  double t63595;
  double t64188;
  double t64243;
  double t64257;
  double t64305;
  double t64307;
  double t64309;
  double t64576;
  double t64577;
  double t64582;
  double t64479;
  double t64480;
  double t64482;
  double t64501;
  double t65037;
  double t65038;
  double t65047;
  double t64509;
  double t64560;
  double t64561;
  double t64569;
  double t64623;
  double t64628;
  double t64629;
  double t64631;
  double t64674;
  double t64688;
  double t64740;
  double t64773;
  double t64932;
  double t64933;
  double t64934;
  double t64935;
  double t65008;
  double t65009;
  double t65010;
  double t65012;
  double t42723;
  double t48629;
  double t48634;
  double t49285;
  double t49488;
  double t49516;
  double t49567;
  double t50069;
  double t50076;
  double t65449;
  double t65466;
  double t65450;
  double t65451;
  double t65452;
  double t65459;
  double t65467;
  double t65468;
  double t65471;
  double t65472;
  double t65473;
  double t65482;
  double t65484;
  double t65486;
  double t65487;
  double t65488;
  double t65489;
  double t65496;
  double t65497;
  double t65500;
  double t65503;
  double t65464;
  double t65474;
  double t65490;
  double t65493;
  double t65516;
  double t65518;
  double t65519;
  double t65522;
  double t65524;
  double t65525;
  double t65528;
  double t65495;
  double t65509;
  double t65512;
  double t65523;
  double t65530;
  double t65534;
  double t65541;
  double t65545;
  double t65549;
  double t60659;
  double t60888;
  double t60889;
  double t58497;
  double t59889;
  double t60240;
  double t65756;
  double t65758;
  double t65764;
  double t65766;
  double t65767;
  double t65735;
  double t65738;
  double t65744;
  double t65751;
  double t65754;
  double t65780;
  double t65781;
  double t65786;
  double t65787;
  double t65795;
  double t65796;
  double t65799;
  double t51088;
  double t56818;
  double t57844;
  double t65755;
  double t65774;
  double t65775;
  double t65794;
  double t65802;
  double t65804;
  double t65817;
  double t65818;
  double t65820;
  double t65513;
  double t65514;
  double t65570;
  double t65572;
  double t65601;
  double t65603;
  double t65625;
  double t65626;
  double t65664;
  double t65666;
  double t65698;
  double t65700;
  double t66085;
  double t66115;
  double t66116;
  double t63800;
  double t63915;
  double t64436;
  double t64453;
  double t66123;
  double t66124;
  double t66127;
  double t66161;
  double t66162;
  double t66163;
  double t64585;
  double t64586;
  double t66223;
  double t66224;
  double t66225;
  double t64635;
  double t64636;
  double t64836;
  double t64849;
  double t66232;
  double t66233;
  double t66236;
  double t66257;
  double t66260;
  double t66261;
  double t64945;
  double t64985;
  double t65777;
  double t65779;
  double t65834;
  double t65845;
  double t65888;
  double t65891;
  double t65933;
  double t65968;
  double t66002;
  double t66007;
  double t66034;
  double t66036;
  double t66130;
  double t66131;
  double t66148;
  double t66151;
  double t66167;
  double t66168;
  double t66212;
  double t66213;
  double t66240;
  double t66241;
  double t66248;
  double t66249;
  double t66457;
  double t66458;
  double t66460;
  double t66364;
  double t66366;
  double t66379;
  double t66380;
  double t66462;
  double t66465;
  double t66467;
  double t66533;
  double t66535;
  double t66537;
  double t66391;
  double t66392;
  double t66565;
  double t66566;
  double t66567;
  double t66406;
  double t66407;
  double t66417;
  double t66418;
  double t66574;
  double t66575;
  double t66576;
  double t66599;
  double t66600;
  double t66603;
  double t66431;
  double t66432;
  double t66789;
  double t66801;
  double t66802;
  double t66805;
  double t66814;
  double t66830;
  double t66836;
  double t66839;
  double t66840;
  double t66842;
  double t66845;
  double t66848;
  double t66851;
  double t66852;
  double t66856;
  double t66859;
  double t66863;
  double t66868;
  double t66874;
  double t66876;
  double t66878;
  double t66883;
  double t66760;
  double t66913;
  double t66915;
  double t66918;
  double t66919;
  double t66928;
  double t66930;
  double t66934;
  double t66939;
  double t66941;
  double t66942;
  double t66943;
  double t66948;
  double t66949;
  double t66951;
  double t66952;
  double t66953;
  double t66954;
  double t66955;
  double t66957;
  double t66958;
  double t66960;
  double t66961;
  double t66979;
  double t66980;
  double t66981;
  double t66982;
  double t66984;
  double t66986;
  double t66987;
  double t66994;
  double t66996;
  double t66998;
  double t67000;
  double t67002;
  double t67003;
  double t67004;
  double t67006;
  double t67007;
  double t67008;
  double t67009;
  double t67015;
  double t67016;
  double t67022;
  double t67024;
  t3826 = Cos(var1[17]);
  t4100 = -1.*t3826;
  t4699 = 1. + t4100;
  t4736 = 3.e-6*t4699;
  t5161 = Sin(var1[17]);
  t11055 = Cos(var1[15]);
  t12690 = -1.*t11055;
  t12735 = 1. + t12690;
  t5189 = 3.e-6*t5161;
  t2455 = Sin(var1[15]);
  t4709 = 1.000000000009*t4699;
  t5311 = t4736 + t5189;
  t5528 = 3.e-6*t5311;
  t6724 = -1. + t4709 + t5528;
  t13032 = -9.e-12*t4699;
  t14128 = -3.e-6*t5161;
  t14206 = t4736 + t14128;
  t14220 = 3.e-6*t14206;
  t14225 = -1.*t5161;
  t14389 = t13032 + t14220 + t14225;
  t14516 = -1.8e-11*t4699;
  t14528 = 1. + t14516;
  t14544 = 3.e-6*t14528;
  t14547 = -3.e-6*t4699;
  t14557 = t14544 + t14547 + t5189;
  t1948 = Cos(var1[4]);
  t2075 = Cos(var1[5]);
  t14502 = -9.e-12*t12735;
  t14505 = 1. + t14502;
  t19515 = -1. + t4709 + t14220;
  t21391 = t14544 + t14547 + t14128;
  t22090 = t13032 + t5528 + t5161;
  t18611 = Sin(var1[5]);
  t31901 = -1.000000000009*t4699;
  t32136 = 1. + t31901;
  t32283 = 3.e-6*t32136;
  t32386 = 9.e-12*t4699;
  t31794 = 1. + t14516 + t14220 + t5528;
  t32426 = t32386 + t14225;
  t32432 = 3.e-6*t32426;
  t32474 = t32283 + t4736 + t32432 + t5189;
  t32656 = t32386 + t5161;
  t32696 = 3.e-6*t32656;
  t32718 = t32283 + t4736 + t14128 + t32696;
  t34337 = 3.e-6*t3826;
  t33782 = -3.e-6*t3826;
  t38575 = 9.e-12*t5161;
  t39116 = -2.7e-17*t5161;
  t34152 = t33782 + t5189;
  t34316 = 3.e-6*t34152;
  t36134 = t34337 + t5189;
  t36758 = 3.e-6*t36134;
  t37752 = -1.8e-11*t5161;
  t38262 = t34316 + t36758 + t37752;
  t38641 = t4100 + t38575;
  t38767 = 3.e-6*t38641;
  t39120 = t34337 + t38767 + t39116;
  t39126 = t3826 + t38575;
  t39130 = 3.e-6*t39126;
  t39584 = t33782 + t39130 + t39116;
  t38515 = -1.000000000009*t12735;
  t38520 = 1. + t38515;
  t42720 = Sin(var1[4]);
  t48669 = -3.000000000054e-6*t5161;
  t48670 = t33782 + t48669;
  t49008 = -9.e-12*t5161;
  t49009 = t3826 + t36758 + t49008;
  t49070 = 1.000000000009*t5161;
  t49219 = t34316 + t49070;
  t49528 = t34337 + t48669;
  t49532 = t4100 + t34316 + t49008;
  t49549 = t36758 + t49070;
  t14649 = -1.*t2455*t6724;
  t14651 = t11055*t14389;
  t14699 = 3.e-6*t12735*t14557;
  t15187 = t14649 + t14651 + t14699;
  t11050 = 3.e-6*t2455*t6724;
  t14457 = 3.e-6*t12735*t14389;
  t14574 = t14505*t14557;
  t14620 = t11050 + t14457 + t14574;
  t23239 = t11055*t19515;
  t23647 = 3.e-6*t12735*t21391;
  t24497 = -1.*t2455*t22090;
  t28490 = t23239 + t23647 + t24497;
  t19886 = 3.e-6*t12735*t19515;
  t21400 = t14505*t21391;
  t22172 = 3.e-6*t2455*t22090;
  t22631 = t19886 + t21400 + t22172;
  t32922 = 3.e-6*t12735*t31794;
  t32935 = -1.*t2455*t32474;
  t32955 = t11055*t32718;
  t32969 = t32922 + t32935 + t32955;
  t31895 = t14505*t31794;
  t32501 = 3.e-6*t2455*t32474;
  t32724 = 3.e-6*t12735*t32718;
  t32910 = t31895 + t32501 + t32724;
  t50219 = t38520*t6724;
  t50220 = t2455*t14389;
  t50221 = -3.e-6*t2455*t14557;
  t50222 = t50219 + t50220 + t50221;
  t50225 = t2075*t15187;
  t50226 = -1.*t14620*t18611;
  t50238 = t50225 + t50226;
  t60947 = Sin(var1[3]);
  t50246 = t2455*t19515;
  t50250 = -3.e-6*t2455*t21391;
  t50251 = t38520*t22090;
  t50253 = t50246 + t50250 + t50251;
  t50257 = t2075*t28490;
  t50258 = -1.*t22631*t18611;
  t50259 = t50257 + t50258;
  t50320 = -3.e-6*t2455*t31794;
  t50335 = t38520*t32474;
  t50339 = t2455*t32718;
  t50354 = t50320 + t50335 + t50339;
  t50542 = t2075*t32969;
  t50544 = -1.*t32910*t18611;
  t50624 = t50542 + t50544;
  t14628 = -1.*t2075*t14620;
  t18959 = -1.*t15187*t18611;
  t19173 = t14628 + t18959;
  t22958 = -1.*t2075*t22631;
  t30455 = -1.*t28490*t18611;
  t31434 = t22958 + t30455;
  t61268 = Cos(var1[3]);
  t32913 = -1.*t2075*t32910;
  t33051 = -1.*t32969*t18611;
  t33206 = t32913 + t33051;
  t48486 = t14505*t38262;
  t48548 = 3.e-6*t2455*t39120;
  t48554 = 3.e-6*t12735*t39584;
  t48556 = t48486 + t48548 + t48554;
  t45245 = 3.e-6*t12735*t38262;
  t45614 = -1.*t2455*t39120;
  t45617 = t11055*t39584;
  t45623 = t45245 + t45614 + t45617;
  t38264 = -3.e-6*t2455*t38262;
  t39125 = t38520*t39120;
  t42652 = t2455*t39584;
  t42691 = t38264 + t39125 + t42652;
  t46857 = t2075*t45623;
  t48569 = -1.*t48556*t18611;
  t48615 = t46857 + t48569;
  t49391 = t14505*t48670;
  t49445 = 3.e-6*t2455*t49009;
  t49446 = 3.e-6*t12735*t49219;
  t49448 = t49391 + t49445 + t49446;
  t49287 = 3.e-6*t12735*t48670;
  t49289 = -1.*t2455*t49009;
  t49354 = t11055*t49219;
  t49364 = t49287 + t49289 + t49354;
  t48913 = -3.e-6*t2455*t48670;
  t49064 = t38520*t49009;
  t49222 = t2455*t49219;
  t49234 = t48913 + t49064 + t49222;
  t49376 = t2075*t49364;
  t49464 = -1.*t49448*t18611;
  t49475 = t49376 + t49464;
  t49935 = t14505*t49528;
  t49943 = 3.e-6*t12735*t49532;
  t50052 = 3.e-6*t2455*t49549;
  t50055 = t49935 + t49943 + t50052;
  t49569 = 3.e-6*t12735*t49528;
  t49596 = t11055*t49532;
  t49624 = -1.*t2455*t49549;
  t49638 = t49569 + t49596 + t49624;
  t49529 = -3.e-6*t2455*t49528;
  t49540 = t2455*t49532;
  t49550 = t38520*t49549;
  t49565 = t49529 + t49540 + t49550;
  t49651 = t2075*t49638;
  t50057 = -1.*t50055*t18611;
  t50068 = t49651 + t50057;
  t50223 = t1948*t50222;
  t50242 = -1.*t42720*t50238;
  t50243 = t50223 + t50242;
  t50256 = t1948*t50253;
  t50262 = -1.*t42720*t50259;
  t50279 = t50256 + t50262;
  t50521 = t1948*t50354;
  t50751 = -1.*t42720*t50624;
  t50772 = t50521 + t50751;
  t54461 = 3.e-6*t11055*t6724;
  t55004 = 3.e-6*t2455*t14389;
  t55010 = -9.e-12*t2455*t14557;
  t55803 = t54461 + t55004 + t55010;
  t51128 = -1.*t11055*t6724;
  t51184 = -1.*t2455*t14389;
  t51230 = 3.e-6*t2455*t14557;
  t52848 = t51128 + t51184 + t51230;
  t50815 = -1.000000000009*t2455*t6724;
  t50850 = -3.e-6*t11055*t14557;
  t51081 = t50815 + t14651 + t50850;
  t53158 = t2075*t52848;
  t55865 = -1.*t55803*t18611;
  t56316 = t53158 + t55865;
  t59622 = 3.e-6*t2455*t19515;
  t59637 = -9.e-12*t2455*t21391;
  t59658 = 3.e-6*t11055*t22090;
  t59661 = t59622 + t59637 + t59658;
  t59101 = -1.*t2455*t19515;
  t59434 = 3.e-6*t2455*t21391;
  t59455 = -1.*t11055*t22090;
  t59461 = t59101 + t59434 + t59455;
  t58147 = -3.e-6*t11055*t21391;
  t58391 = -1.000000000009*t2455*t22090;
  t58474 = t23239 + t58147 + t58391;
  t59496 = t2075*t59461;
  t59686 = -1.*t59661*t18611;
  t59698 = t59496 + t59686;
  t60814 = -9.e-12*t2455*t31794;
  t60819 = 3.e-6*t11055*t32474;
  t60821 = 3.e-6*t2455*t32718;
  t60823 = t60814 + t60819 + t60821;
  t60783 = 3.e-6*t2455*t31794;
  t60784 = -1.*t11055*t32474;
  t60786 = -1.*t2455*t32718;
  t60798 = t60783 + t60784 + t60786;
  t60648 = -3.e-6*t11055*t31794;
  t60650 = -1.000000000009*t2455*t32474;
  t60658 = t60648 + t60650 + t32955;
  t60802 = t2075*t60798;
  t60882 = -1.*t60823*t18611;
  t60886 = t60802 + t60882;
  t60949 = -1.*t50222*t42720;
  t60958 = -1.*t1948*t50238;
  t60994 = t60949 + t60958;
  t61089 = -1.*t50253*t42720;
  t61157 = -1.*t1948*t50259;
  t61168 = t61089 + t61157;
  t61173 = -1.*t50354*t42720;
  t61238 = -1.*t1948*t50624;
  t61247 = t61173 + t61238;
  t61463 = t2075*t48556;
  t61467 = t45623*t18611;
  t61472 = t61463 + t61467;
  t61510 = t1948*t42691;
  t61563 = -1.*t42720*t48615;
  t61565 = t61510 + t61563;
  t61656 = t2075*t49448;
  t61658 = t49364*t18611;
  t61717 = t61656 + t61658;
  t61747 = t1948*t49234;
  t61785 = -1.*t42720*t49475;
  t61794 = t61747 + t61785;
  t61839 = t2075*t50055;
  t61850 = t49638*t18611;
  t61851 = t61839 + t61850;
  t61855 = t1948*t49565;
  t61862 = -1.*t42720*t50068;
  t61865 = t61855 + t61862;
  t61927 = t2075*t14620;
  t61928 = t15187*t18611;
  t61931 = t61927 + t61928;
  t61949 = t2075*t22631;
  t61950 = t28490*t18611;
  t61951 = t61949 + t61950;
  t61965 = t2075*t32910;
  t61966 = t32969*t18611;
  t61979 = t61965 + t61966;
  t62022 = t2075*t55803;
  t62073 = t52848*t18611;
  t62074 = t62022 + t62073;
  t62087 = t1948*t51081;
  t62088 = -1.*t42720*t56316;
  t62108 = t62087 + t62088;
  t62175 = t2075*t59661;
  t62178 = t59461*t18611;
  t62183 = t62175 + t62178;
  t62185 = t1948*t58474;
  t62216 = -1.*t42720*t59698;
  t62231 = t62185 + t62216;
  t62312 = t2075*t60823;
  t62330 = t60798*t18611;
  t62335 = t62312 + t62330;
  t62344 = t1948*t60658;
  t62345 = -1.*t42720*t60886;
  t62441 = t62344 + t62345;
  t63642 = t14547 + t5189;
  t63612 = 9.e-13*var1[17];
  t63687 = t14547 + t14128;
  t63624 = 0.2*t32136;
  t63629 = 0.2000000000018*t4699;
  t63631 = t13032 + t14225;
  t63635 = 0.1*t63631;
  t63652 = 0.0999991*t63642;
  t63654 = t63612 + t63624 + t63629 + t63635 + t63652;
  t63660 = 3.e-7*var1[17];
  t63661 = 1.8e-11*t4699;
  t63669 = -1. + t63661;
  t63682 = 0.1*t63669;
  t63686 = -1.62e-17*t4699;
  t63688 = 0.2*t63687;
  t63696 = 0.1*t63642;
  t63701 = 0.2*t5311;
  t63704 = t63660 + t63682 + t63686 + t63688 + t63696 + t63701;
  t63715 = 0.1000000000009*t4699;
  t63721 = 0.2*t32426;
  t63722 = 0.0999991*t63687;
  t63727 = t13032 + t5161;
  t63734 = 0.2*t63727;
  t63736 = t63612 + t63715 + t63721 + t63722 + t63734;
  t63749 = 0.2000000000018*t12735;
  t63750 = t11055*t63654;
  t63754 = 3.e-6*t12735*t63704;
  t63779 = -1.*t2455*t63736;
  t63786 = t63749 + t63750 + t63754 + t63779;
  t63596 = -6.000000000054e-7*t12735;
  t63657 = 3.e-6*t12735*t63654;
  t63711 = t14505*t63704;
  t63738 = 3.e-6*t2455*t63736;
  t63743 = t63596 + t63657 + t63711 + t63738;
  t63930 = -1.*t2075*t63743;
  t63935 = -1.*t63786*t18611;
  t63941 = t63930 + t63935;
  t63876 = t2075*t63786;
  t63880 = -1.*t63743*t18611;
  t63890 = t63876 + t63880;
  t64041 = -0.2000000000018*t2455;
  t64055 = t2455*t63654;
  t64077 = -3.e-6*t2455*t63704;
  t64079 = t38520*t63736;
  t64111 = t64041 + t64055 + t64077 + t64079;
  t63965 = t50222*t42720;
  t63976 = t1948*t50238;
  t64026 = t63965 + t63976;
  t63744 = t2075*t63743;
  t63787 = t63786*t18611;
  t63795 = t63744 + t63787;
  t63584 = t50253*t42720;
  t63589 = t1948*t50259;
  t63595 = t63584 + t63589;
  t64188 = t64111*t42720;
  t64243 = t1948*t63890;
  t64257 = t64188 + t64243;
  t64305 = t1948*t64111;
  t64307 = -1.*t42720*t63890;
  t64309 = t64305 + t64307;
  t64576 = t50354*t42720;
  t64577 = t1948*t50624;
  t64582 = t64576 + t64577;
  t64479 = -1.*t61931*t63795;
  t64480 = -1.*t64026*t64257;
  t64482 = -1.*t50243*t64309;
  t64501 = t64479 + t64480 + t64482;
  t65037 = -1.*t64111*t42720;
  t65038 = -1.*t1948*t63890;
  t65047 = t65037 + t65038;
  t64509 = t61951*t63795;
  t64560 = t63595*t64257;
  t64561 = t50279*t64309;
  t64569 = t64509 + t64560 + t64561;
  t64623 = t61931*t63795;
  t64628 = t64026*t64257;
  t64629 = t50243*t64309;
  t64631 = t64623 + t64628 + t64629;
  t64674 = -1.*t63795*t61979;
  t64688 = -1.*t64257*t64582;
  t64740 = -1.*t64309*t50772;
  t64773 = t64674 + t64688 + t64740;
  t64932 = -1.*t61951*t63795;
  t64933 = -1.*t63595*t64257;
  t64934 = -1.*t50279*t64309;
  t64935 = t64932 + t64933 + t64934;
  t65008 = t63795*t61979;
  t65009 = t64257*t64582;
  t65010 = t64309*t50772;
  t65012 = t65008 + t65009 + t65010;
  t42723 = t42691*t42720;
  t48629 = t1948*t48615;
  t48634 = t42723 + t48629;
  t49285 = t49234*t42720;
  t49488 = t1948*t49475;
  t49516 = t49285 + t49488;
  t49567 = t49565*t42720;
  t50069 = t1948*t50068;
  t50076 = t49567 + t50069;
  t65449 = t34337 + t14128;
  t65466 = t33782 + t14128;
  t65450 = 0.0999991*t65449;
  t65451 = t4100 + t49008;
  t65452 = 0.1*t65451;
  t65459 = 9.e-13 + t65450 + t65452;
  t65467 = 0.2*t65466;
  t65468 = 0.1*t65449;
  t65471 = 0.2*t36134;
  t65472 = 1.7999838e-12*t5161;
  t65473 = 3.e-7 + t65467 + t65468 + t65471 + t65472;
  t65482 = 0.0999991*t65466;
  t65484 = t3826 + t49008;
  t65486 = 0.2*t65484;
  t65487 = 0.2*t38641;
  t65488 = 0.1000000000009*t5161;
  t65489 = 9.e-13 + t65482 + t65486 + t65487 + t65488;
  t65496 = t11055*t65459;
  t65497 = 3.e-6*t12735*t65473;
  t65500 = -1.*t2455*t65489;
  t65503 = t65496 + t65497 + t65500;
  t65464 = 3.e-6*t12735*t65459;
  t65474 = t14505*t65473;
  t65490 = 3.e-6*t2455*t65489;
  t65493 = t65464 + t65474 + t65490;
  t65516 = t2455*t65459;
  t65518 = -3.e-6*t2455*t65473;
  t65519 = t38520*t65489;
  t65522 = t65516 + t65518 + t65519;
  t65524 = t2075*t65503;
  t65525 = -1.*t65493*t18611;
  t65528 = t65524 + t65525;
  t65495 = t2075*t65493;
  t65509 = t65503*t18611;
  t65512 = t65495 + t65509;
  t65523 = t65522*t42720;
  t65530 = t1948*t65528;
  t65534 = t65523 + t65530;
  t65541 = t1948*t65522;
  t65545 = -1.*t42720*t65528;
  t65549 = t65541 + t65545;
  t60659 = t60658*t42720;
  t60888 = t1948*t60886;
  t60889 = t60659 + t60888;
  t58497 = t58474*t42720;
  t59889 = t1948*t59698;
  t60240 = t58497 + t59889;
  t65756 = 0.2000000000018*t2455;
  t65758 = -1.*t2455*t63654;
  t65764 = 3.e-6*t2455*t63704;
  t65766 = -1.*t11055*t63736;
  t65767 = t65756 + t65758 + t65764 + t65766;
  t65735 = -6.000000000054e-7*t2455;
  t65738 = 3.e-6*t2455*t63654;
  t65744 = -9.e-12*t2455*t63704;
  t65751 = 3.e-6*t11055*t63736;
  t65754 = t65735 + t65738 + t65744 + t65751;
  t65780 = -0.2000000000018*t11055;
  t65781 = -3.e-6*t11055*t63704;
  t65786 = -1.000000000009*t2455*t63736;
  t65787 = t65780 + t63750 + t65781 + t65786;
  t65795 = t2075*t65767;
  t65796 = -1.*t65754*t18611;
  t65799 = t65795 + t65796;
  t51088 = t51081*t42720;
  t56818 = t1948*t56316;
  t57844 = t51088 + t56818;
  t65755 = t2075*t65754;
  t65774 = t65767*t18611;
  t65775 = t65755 + t65774;
  t65794 = t65787*t42720;
  t65802 = t1948*t65799;
  t65804 = t65794 + t65802;
  t65817 = t1948*t65787;
  t65818 = -1.*t42720*t65799;
  t65820 = t65817 + t65818;
  t65513 = t65512*t61951;
  t65514 = t61717*t63795;
  t65570 = -1.*t61931*t65512;
  t65572 = -1.*t61851*t63795;
  t65601 = t61931*t65512;
  t65603 = t61851*t63795;
  t65625 = -1.*t61472*t63795;
  t65626 = -1.*t65512*t61979;
  t65664 = -1.*t65512*t61951;
  t65666 = -1.*t61717*t63795;
  t65698 = t61472*t63795;
  t65700 = t65512*t61979;
  t66085 = -1.*t50222*t64111;
  t66115 = -1.*t50238*t63890;
  t66116 = t66085 + t64479 + t66115;
  t63800 = -1.*t50238*t63795;
  t63915 = -1.*t61931*t63890;
  t64436 = t50259*t63795;
  t64453 = t61951*t63890;
  t66123 = t50253*t64111;
  t66124 = t50259*t63890;
  t66127 = t66123 + t64509 + t66124;
  t66161 = t50222*t64111;
  t66162 = t50238*t63890;
  t66163 = t66161 + t64623 + t66162;
  t64585 = t50238*t63795;
  t64586 = t61931*t63890;
  t66223 = -1.*t64111*t50354;
  t66224 = -1.*t63890*t50624;
  t66225 = t66223 + t66224 + t64674;
  t64635 = -1.*t63795*t50624;
  t64636 = -1.*t63890*t61979;
  t64836 = -1.*t50259*t63795;
  t64849 = -1.*t61951*t63890;
  t66232 = -1.*t50253*t64111;
  t66233 = -1.*t50259*t63890;
  t66236 = t66232 + t64932 + t66233;
  t66257 = t64111*t50354;
  t66260 = t63890*t50624;
  t66261 = t66257 + t66260 + t65008;
  t64945 = t63795*t50624;
  t64985 = t63890*t61979;
  t65777 = -1.*t61931*t65775;
  t65779 = -1.*t62074*t63795;
  t65834 = t61951*t65775;
  t65845 = t62183*t63795;
  t65888 = t61931*t65775;
  t65891 = t62074*t63795;
  t65933 = -1.*t65775*t61979;
  t65968 = -1.*t63795*t62335;
  t66002 = -1.*t61951*t65775;
  t66007 = -1.*t62183*t63795;
  t66034 = t65775*t61979;
  t66036 = t63795*t62335;
  t66130 = t65522*t50253;
  t66131 = t49234*t64111;
  t66148 = -1.*t50222*t65522;
  t66151 = -1.*t49565*t64111;
  t66167 = t50222*t65522;
  t66168 = t49565*t64111;
  t66212 = -1.*t42691*t64111;
  t66213 = -1.*t65522*t50354;
  t66240 = -1.*t65522*t50253;
  t66241 = -1.*t49234*t64111;
  t66248 = t42691*t64111;
  t66249 = t65522*t50354;
  t66457 = -1.*t15187*t63786;
  t66458 = -1.*t14620*t63743;
  t66460 = t66085 + t66457 + t66458;
  t66364 = -1.*t51081*t64111;
  t66366 = -1.*t50222*t65787;
  t66379 = t58474*t64111;
  t66380 = t50253*t65787;
  t66462 = t28490*t63786;
  t66465 = t22631*t63743;
  t66467 = t66123 + t66462 + t66465;
  t66533 = t15187*t63786;
  t66535 = t14620*t63743;
  t66537 = t66161 + t66533 + t66535;
  t66391 = t51081*t64111;
  t66392 = t50222*t65787;
  t66565 = -1.*t63743*t32910;
  t66566 = -1.*t63786*t32969;
  t66567 = t66565 + t66566 + t66223;
  t66406 = -1.*t64111*t60658;
  t66407 = -1.*t65787*t50354;
  t66417 = -1.*t58474*t64111;
  t66418 = -1.*t50253*t65787;
  t66574 = -1.*t28490*t63786;
  t66575 = -1.*t22631*t63743;
  t66576 = t66232 + t66574 + t66575;
  t66599 = t63743*t32910;
  t66600 = t63786*t32969;
  t66603 = t66599 + t66600 + t66257;
  t66431 = t64111*t60658;
  t66432 = t65787*t50354;
  t66789 = -1.*t63654*t14389;
  t66801 = -1.*t63704*t14557;
  t66802 = -1.*t6724*t63736;
  t66805 = t66789 + t66801 + t66802;
  t66814 = t19515*t65459;
  t66830 = t63704*t48670;
  t66836 = t21391*t65473;
  t66839 = t65489*t22090;
  t66840 = t63654*t49219;
  t66842 = t49009*t63736;
  t66845 = t66814 + t66830 + t66836 + t66839 + t66840 + t66842;
  t66848 = t19515*t63654;
  t66851 = t63704*t21391;
  t66852 = t22090*t63736;
  t66856 = t66848 + t66851 + t66852;
  t66859 = -1.*t65459*t14389;
  t66863 = -1.*t63704*t49528;
  t66868 = -1.*t63654*t49532;
  t66874 = -1.*t65473*t14557;
  t66876 = -1.*t6724*t65489;
  t66878 = -1.*t49549*t63736;
  t66883 = t66859 + t66863 + t66868 + t66874 + t66876 + t66878;
  t66760 = -3.e-6*t36134;
  t66913 = t63654*t14389;
  t66915 = t63704*t14557;
  t66918 = t6724*t63736;
  t66919 = t66913 + t66915 + t66918;
  t66928 = t65459*t14389;
  t66930 = t63704*t49528;
  t66934 = t63654*t49532;
  t66939 = t65473*t14557;
  t66941 = t6724*t65489;
  t66942 = t49549*t63736;
  t66943 = t66928 + t66930 + t66934 + t66939 + t66941 + t66942;
  t66948 = -1.*t63704*t38262;
  t66949 = -1.*t63654*t39584;
  t66951 = -1.*t31794*t65473;
  t66952 = -1.*t32474*t65489;
  t66953 = -1.*t39120*t63736;
  t66954 = -1.*t65459*t32718;
  t66955 = t66948 + t66949 + t66951 + t66952 + t66953 + t66954;
  t66957 = -1.*t31794*t63704;
  t66958 = -1.*t32474*t63736;
  t66960 = -1.*t63654*t32718;
  t66961 = t66957 + t66958 + t66960;
  t66979 = -1.*t19515*t65459;
  t66980 = -1.*t63704*t48670;
  t66981 = -1.*t21391*t65473;
  t66982 = -1.*t65489*t22090;
  t66984 = -1.*t63654*t49219;
  t66986 = -1.*t49009*t63736;
  t66987 = t66979 + t66980 + t66981 + t66982 + t66984 + t66986;
  t66994 = -1.*t19515*t63654;
  t66996 = -1.*t63704*t21391;
  t66998 = -1.*t22090*t63736;
  t67000 = t66994 + t66996 + t66998;
  t67002 = t63704*t38262;
  t67003 = t63654*t39584;
  t67004 = t31794*t65473;
  t67006 = t32474*t65489;
  t67007 = t39120*t63736;
  t67008 = t65459*t32718;
  t67009 = t67002 + t67003 + t67004 + t67006 + t67007 + t67008;
  t67015 = t31794*t63704;
  t67016 = t32474*t63736;
  t67022 = t63654*t32718;
  t67024 = t67015 + t67016 + t67022;
  p_output1[0]=var2[17]*(-0.5*(1.29001548002322e-8*t50243 + 0.0042999871*t50279 + 1.29e-8*t50772)*var2[4] - 0.5*(1.29001548002322e-8*t19173*t1948 + 0.0042999871*t1948*t31434 + 1.29e-8*t1948*t33206)*var2[5] - 0.5*(1.29001548002322e-8*t57844 + 0.0042999871*t60240 + 1.29e-8*t60889)*var2[15] - 0.5*(1.29e-8*t48634 + 0.0042999871*t49516 + 1.29001548002322e-8*t50076)*var2[17]);
  p_output1[1]=var2[17]*(-0.5*(1.29001548002322e-8*(-1.*t50243*t61268 - 1.*t60947*t61931) + 0.0042999871*(-1.*t50279*t61268 - 1.*t60947*t61951) + 1.29e-8*(-1.*t50772*t61268 - 1.*t60947*t61979))*var2[3] - 0.5*(-1.29001548002322e-8*t60947*t60994 - 0.0042999871*t60947*t61168 - 1.29e-8*t60947*t61247)*var2[4] - 0.5*(1.29001548002322e-8*(t19173*t42720*t60947 + t50238*t61268) + 0.0042999871*(t31434*t42720*t60947 + t50259*t61268) + 1.29e-8*(t33206*t42720*t60947 + t50624*t61268))*var2[5] - 0.5*(1.29001548002322e-8*(t61268*t62074 - 1.*t60947*t62108) + 0.0042999871*(t61268*t62183 - 1.*t60947*t62231) + 1.29e-8*(t61268*t62335 - 1.*t60947*t62441))*var2[15] - 0.5*(1.29e-8*(t61268*t61472 - 1.*t60947*t61565) + 0.0042999871*(t61268*t61717 - 1.*t60947*t61794) + 1.29001548002322e-8*(t61268*t61851 - 1.*t60947*t61865))*var2[17]);
  p_output1[2]=var2[17]*(-0.5*(1.29001548002322e-8*(-1.*t50243*t60947 + t61268*t61931) + 0.0042999871*(-1.*t50279*t60947 + t61268*t61951) + 1.29e-8*(-1.*t50772*t60947 + t61268*t61979))*var2[3] - 0.5*(1.29001548002322e-8*t60994*t61268 + 0.0042999871*t61168*t61268 + 1.29e-8*t61247*t61268)*var2[4] - 0.5*(1.29001548002322e-8*(t50238*t60947 - 1.*t19173*t42720*t61268) + 0.0042999871*(t50259*t60947 - 1.*t31434*t42720*t61268) + 1.29e-8*(t50624*t60947 - 1.*t33206*t42720*t61268))*var2[5] - 0.5*(1.29001548002322e-8*(t60947*t62074 + t61268*t62108) + 0.0042999871*(t60947*t62183 + t61268*t62231) + 1.29e-8*(t60947*t62335 + t61268*t62441))*var2[15] - 0.5*(1.29e-8*(t60947*t61472 + t61268*t61565) + 0.0042999871*(t60947*t61717 + t61268*t61794) + 1.29001548002322e-8*(t60947*t61851 + t61268*t61865))*var2[17]);
  p_output1[3]=var2[17]*(-0.5*(0.000271000000004878*t50772 + 1.29e-8*(t50279*t64501 + t50243*t64569 + t63595*(-1.*t50243*t64257 - 1.*t60994*t64309 - 1.*t64026*t64309 - 1.*t50243*t65047) + t64026*(t50279*t64257 + t61168*t64309 + t63595*t64309 + t50279*t65047)) + 0.0042999871*(t50772*t64631 + t50243*t64773 + t64582*(t50243*t64257 + t60994*t64309 + t64026*t64309 + t50243*t65047) + t64026*(-1.*t50772*t64257 - 1.*t61247*t64309 - 1.*t64309*t64582 - 1.*t50772*t65047)) + 1.29001548002322e-8*(t50772*t64935 + t50279*t65012 + t64582*(-1.*t50279*t64257 - 1.*t61168*t64309 - 1.*t63595*t64309 - 1.*t50279*t65047) + t63595*(t50772*t64257 + t61247*t64309 + t64309*t64582 + t50772*t65047)))*var2[4] - 0.5*(0.000271000000004878*t1948*t33206 + 1.29e-8*(t63595*(t63800 + t63915 + t42720*t50243*t63941 - 1.*t1948*t63941*t64026 - 1.*t19173*t1948*t64257 + t19173*t42720*t64309) + t64026*(-1.*t42720*t50279*t63941 + t1948*t63595*t63941 + t1948*t31434*t64257 - 1.*t31434*t42720*t64309 + t64436 + t64453) + t1948*t31434*t64501 + t19173*t1948*t64569) + 0.0042999871*(t64582*(-1.*t42720*t50243*t63941 + t1948*t63941*t64026 + t19173*t1948*t64257 - 1.*t19173*t42720*t64309 + t64585 + t64586) + t1948*t33206*t64631 + t64026*(t42720*t50772*t63941 - 1.*t1948*t33206*t64257 + t33206*t42720*t64309 - 1.*t1948*t63941*t64582 + t64635 + t64636) + t19173*t1948*t64773) + 1.29001548002322e-8*(t64582*(t42720*t50279*t63941 - 1.*t1948*t63595*t63941 - 1.*t1948*t31434*t64257 + t31434*t42720*t64309 + t64836 + t64849) + t1948*t33206*t64935 + t63595*(-1.*t42720*t50772*t63941 + t1948*t33206*t64257 - 1.*t33206*t42720*t64309 + t1948*t63941*t64582 + t64945 + t64985) + t1948*t31434*t65012))*var2[5] - 0.5*(0.000271000000004878*t60889 + 1.29e-8*(t60240*t64501 + t57844*t64569 + t63595*(-1.*t57844*t64257 - 1.*t62108*t64309 + t65777 + t65779 - 1.*t64026*t65804 - 1.*t50243*t65820) + t64026*(t60240*t64257 + t62231*t64309 + t63595*t65804 + t50279*t65820 + t65834 + t65845)) + 0.0042999871*(t60889*t64631 + t57844*t64773 + t64582*(t57844*t64257 + t62108*t64309 + t64026*t65804 + t50243*t65820 + t65888 + t65891) + t64026*(-1.*t60889*t64257 - 1.*t62441*t64309 - 1.*t64582*t65804 - 1.*t50772*t65820 + t65933 + t65968)) + 1.29001548002322e-8*(t60889*t64935 + t60240*t65012 + t64582*(-1.*t60240*t64257 - 1.*t62231*t64309 - 1.*t63595*t65804 - 1.*t50279*t65820 + t66002 + t66007) + t63595*(t60889*t64257 + t62441*t64309 + t64582*t65804 + t50772*t65820 + t66034 + t66036)))*var2[15] - 0.5*(0.000271000000004878*t48634 + 1.29e-8*(t49516*t64501 + t50076*t64569 + t64026*(t49516*t64257 + t61794*t64309 + t65513 + t65514 + t63595*t65534 + t50279*t65549) + t63595*(-1.*t50076*t64257 - 1.*t61865*t64309 - 1.*t64026*t65534 - 1.*t50243*t65549 + t65570 + t65572)) + 0.0042999871*(t48634*t64631 + t50076*t64773 + t64582*(t50076*t64257 + t61865*t64309 + t64026*t65534 + t50243*t65549 + t65601 + t65603) + t64026*(-1.*t48634*t64257 - 1.*t61565*t64309 - 1.*t64582*t65534 - 1.*t50772*t65549 + t65625 + t65626)) + 1.29001548002322e-8*(t48634*t64935 + t49516*t65012 + t64582*(-1.*t49516*t64257 - 1.*t61794*t64309 - 1.*t63595*t65534 - 1.*t50279*t65549 + t65664 + t65666) + t63595*(t48634*t64257 + t61565*t64309 + t64582*t65534 + t50772*t65549 + t65698 + t65700)))*var2[17]);
  p_output1[4]=var2[17]*(-0.5*(0.000271000000004878*t50624 + 1.29e-8*(t61951*(t63800 - 1.*t19173*t63890 + t63915 - 1.*t50238*t63941) + t61931*(t31434*t63890 + t50259*t63941 + t64436 + t64453) + t50259*t66116 + t50238*t66127) + 0.0042999871*(t61979*(t19173*t63890 + t50238*t63941 + t64585 + t64586) + t61931*(-1.*t33206*t63890 - 1.*t50624*t63941 + t64635 + t64636) + t50624*t66163 + t50238*t66225) + 1.29001548002322e-8*(t61979*(-1.*t31434*t63890 - 1.*t50259*t63941 + t64836 + t64849) + t61951*(t33206*t63890 + t50624*t63941 + t64945 + t64985) + t50624*t66236 + t50259*t66261))*var2[5] - 0.5*(0.000271000000004878*t62335 + 1.29e-8*(t62183*t66116 + t62074*t66127 + t61951*(-1.*t56316*t63890 + t65777 + t65779 - 1.*t50238*t65799 + t66364 + t66366) + t61931*(t59698*t63890 + t50259*t65799 + t65834 + t65845 + t66379 + t66380)) + 0.0042999871*(t62335*t66163 + t62074*t66225 + t61979*(t56316*t63890 + t50238*t65799 + t65888 + t65891 + t66391 + t66392) + t61931*(-1.*t60886*t63890 - 1.*t50624*t65799 + t65933 + t65968 + t66406 + t66407)) + 1.29001548002322e-8*(t62335*t66236 + t62183*t66261 + t61979*(-1.*t59698*t63890 - 1.*t50259*t65799 + t66002 + t66007 + t66417 + t66418) + t61951*(t60886*t63890 + t50624*t65799 + t66034 + t66036 + t66431 + t66432)))*var2[15] - 0.5*(0.000271000000004878*t61472 + 1.29e-8*(t61717*t66116 + t61851*t66127 + t61931*(t49475*t63890 + t65513 + t65514 + t50259*t65528 + t66130 + t66131) + t61951*(-1.*t50068*t63890 - 1.*t50238*t65528 + t65570 + t65572 + t66148 + t66151)) + 0.0042999871*(t61472*t66163 + t61979*(t50068*t63890 + t50238*t65528 + t65601 + t65603 + t66167 + t66168) + t61931*(-1.*t48615*t63890 - 1.*t50624*t65528 + t65625 + t65626 + t66212 + t66213) + t61851*t66225) + 1.29001548002322e-8*(t61472*t66236 + t61979*(-1.*t49475*t63890 - 1.*t50259*t65528 + t65664 + t65666 + t66240 + t66241) + t61951*(t48615*t63890 + t50624*t65528 + t65698 + t65700 + t66248 + t66249) + t61717*t66261))*var2[17]);
  p_output1[5]=var2[17]*(-0.5*(0.000271000000004878*t60658 + 1.29e-8*(t50253*(-1.*t55803*t63743 - 1.*t52848*t63786 - 1.*t14620*t65754 - 1.*t15187*t65767 + t66364 + t66366) + t50222*(t59661*t63743 + t59461*t63786 + t22631*t65754 + t28490*t65767 + t66379 + t66380) + t58474*t66460 + t51081*t66467) + 0.0042999871*(t50354*(t55803*t63743 + t52848*t63786 + t14620*t65754 + t15187*t65767 + t66391 + t66392) + t50222*(-1.*t60823*t63743 - 1.*t60798*t63786 - 1.*t32910*t65754 - 1.*t32969*t65767 + t66406 + t66407) + t60658*t66537 + t51081*t66567) + 1.29001548002322e-8*(t50354*(-1.*t59661*t63743 - 1.*t59461*t63786 - 1.*t22631*t65754 - 1.*t28490*t65767 + t66417 + t66418) + t50253*(t60823*t63743 + t60798*t63786 + t32910*t65754 + t32969*t65767 + t66431 + t66432) + t60658*t66576 + t58474*t66603))*var2[15] - 0.5*(0.000271000000004878*t42691 + 1.29e-8*(t50222*(t49448*t63743 + t49364*t63786 + t22631*t65493 + t28490*t65503 + t66130 + t66131) + t50253*(-1.*t50055*t63743 - 1.*t49638*t63786 - 1.*t14620*t65493 - 1.*t15187*t65503 + t66148 + t66151) + t49234*t66460 + t49565*t66467) + 0.0042999871*(t50354*(t50055*t63743 + t49638*t63786 + t14620*t65493 + t15187*t65503 + t66167 + t66168) + t50222*(-1.*t48556*t63743 - 1.*t45623*t63786 - 1.*t32910*t65493 - 1.*t32969*t65503 + t66212 + t66213) + t42691*t66537 + t49565*t66567) + 1.29001548002322e-8*(t50354*(-1.*t49448*t63743 - 1.*t49364*t63786 - 1.*t22631*t65493 - 1.*t28490*t65503 + t66240 + t66241) + t50253*(t48556*t63743 + t45623*t63786 + t32910*t65493 + t32969*t65503 + t66248 + t66249) + t42691*t66576 + t49234*t66603))*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=-0.5*(0.000271000000004878*(-3.e-6*t34152 - 3.e-6*t39584 + 1.8e-11*t5161 + t66760) + 1.29e-8*(0.2*(t33782 - 3.e-6*t38641 + 2.7e-17*t5161) - 1.*t48670*t66805 - 1.*t14557*t66845 - 1.*t49528*t66856 - 1.*t21391*t66883 - 3.e-6*(t49219*t66805 + t14389*t66845 + t49532*t66856 + t19515*t66883)) + 0.0042999871*(0.2*(t38575 + t4100 + t66760) - 1.*t38262*t66919 - 1.*t31794*t66943 - 1.*t14557*t66955 - 1.*t49528*t66961 - 3.e-6*(t39584*t66919 + t32718*t66943 + t14389*t66955 + t49532*t66961)) + 1.29001548002322e-8*(0.2*(-1.000000000009*t5161 + t66760) - 1.*t31794*t66987 - 1.*t38262*t67000 - 1.*t21391*t67009 - 1.*t48670*t67024 - 3.e-6*(t32718*t66987 + t39584*t67000 + t19515*t67009 + t49219*t67024)))*Power(var2[17],2);
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec18_minitaur.hh"

namespace FrontStance
{

void Ce1_vec18_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
