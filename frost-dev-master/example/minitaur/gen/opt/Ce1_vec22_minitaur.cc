/*
 * Automatically Generated from Mathematica.
 * Tue 28 May 2019 23:09:31 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3367;
  double t3631;
  double t3651;
  double t3723;
  double t4053;
  double t4432;
  double t4485;
  double t4592;
  double t4191;
  double t2356;
  double t3659;
  double t4208;
  double t4271;
  double t4323;
  double t4709;
  double t4731;
  double t4889;
  double t4918;
  double t4924;
  double t4925;
  double t5111;
  double t5115;
  double t5117;
  double t5134;
  double t5145;
  double t1072;
  double t1278;
  double t4928;
  double t4948;
  double t5329;
  double t5452;
  double t5475;
  double t5230;
  double t6350;
  double t6355;
  double t6372;
  double t6388;
  double t6330;
  double t6660;
  double t6662;
  double t6674;
  double t7109;
  double t7162;
  double t7180;
  double t12353;
  double t12232;
  double t12516;
  double t12599;
  double t12328;
  double t12337;
  double t12374;
  double t12432;
  double t12452;
  double t12454;
  double t12570;
  double t12572;
  double t12602;
  double t12659;
  double t12781;
  double t12790;
  double t12491;
  double t12508;
  double t12822;
  double t14289;
  double t14342;
  double t14368;
  double t14415;
  double t14457;
  double t14502;
  double t14699;
  double t14909;
  double t15068;
  double t5189;
  double t5218;
  double t5220;
  double t5228;
  double t4394;
  double t4927;
  double t5167;
  double t5169;
  double t6159;
  double t6164;
  double t6184;
  double t6209;
  double t5451;
  double t5468;
  double t5611;
  double t5941;
  double t8207;
  double t8371;
  double t8388;
  double t8741;
  double t6337;
  double t6754;
  double t7223;
  double t7230;
  double t19315;
  double t19339;
  double t19457;
  double t19502;
  double t21400;
  double t22172;
  double t23239;
  double t49125;
  double t29371;
  double t30382;
  double t30435;
  double t30444;
  double t30455;
  double t31378;
  double t31438;
  double t31731;
  double t31749;
  double t31797;
  double t31895;
  double t32386;
  double t32495;
  double t32724;
  double t5172;
  double t5242;
  double t5257;
  double t6158;
  double t6210;
  double t6274;
  double t49464;
  double t7911;
  double t11050;
  double t12176;
  double t14057;
  double t14199;
  double t14206;
  double t14210;
  double t13032;
  double t13066;
  double t13207;
  double t13927;
  double t12479;
  double t12654;
  double t12795;
  double t12821;
  double t14019;
  double t14219;
  double t14220;
  double t14622;
  double t14623;
  double t14626;
  double t14628;
  double t14536;
  double t14545;
  double t14565;
  double t14566;
  double t14347;
  double t14437;
  double t14505;
  double t14516;
  double t14574;
  double t14631;
  double t14642;
  double t17938;
  double t17939;
  double t18170;
  double t18173;
  double t16090;
  double t17362;
  double t17364;
  double t17432;
  double t14717;
  double t15052;
  double t15098;
  double t15192;
  double t17680;
  double t18234;
  double t18236;
  double t19886;
  double t23466;
  double t23647;
  double t30447;
  double t31656;
  double t31657;
  double t32341;
  double t32854;
  double t32865;
  double t33690;
  double t33778;
  double t34316;
  double t34337;
  double t33242;
  double t33415;
  double t33649;
  double t33657;
  double t32974;
  double t33051;
  double t33061;
  double t33678;
  double t37752;
  double t38264;
  double t42726;
  double t42732;
  double t43859;
  double t44266;
  double t39126;
  double t39130;
  double t42652;
  double t42663;
  double t38772;
  double t39078;
  double t39116;
  double t42723;
  double t45318;
  double t45601;
  double t48579;
  double t48588;
  double t48608;
  double t48629;
  double t47865;
  double t48210;
  double t48486;
  double t48548;
  double t45630;
  double t46857;
  double t47841;
  double t48568;
  double t48669;
  double t48813;
  double t49222;
  double t49237;
  double t49285;
  double t49291;
  double t49301;
  double t49302;
  double t49371;
  double t49376;
  double t49391;
  double t49741;
  double t49744;
  double t49786;
  double t49880;
  double t49935;
  double t49943;
  double t50219;
  double t50220;
  double t50221;
  double t50225;
  double t50226;
  double t50230;
  double t50257;
  double t50258;
  double t50262;
  double t50289;
  double t50302;
  double t50306;
  double t50543;
  double t50572;
  double t50589;
  double t50815;
  double t50845;
  double t50847;
  double t50950;
  double t50976;
  double t51033;
  double t51175;
  double t51184;
  double t51230;
  double t51240;
  double t51274;
  double t51275;
  double t51327;
  double t51337;
  double t51338;
  double t51356;
  double t51357;
  double t51358;
  double t51433;
  double t51452;
  double t51456;
  double t51471;
  double t51481;
  double t51492;
  double t56881;
  double t57400;
  double t56513;
  double t55790;
  double t55865;
  double t56295;
  double t56413;
  double t56415;
  double t56818;
  double t56885;
  double t56983;
  double t57669;
  double t57732;
  double t57813;
  double t57935;
  double t57944;
  double t57965;
  double t57979;
  double t58006;
  double t58009;
  double t58040;
  double t58049;
  double t58146;
  double t58263;
  double t58270;
  double t58290;
  double t58348;
  double t58365;
  double t58376;
  double t58382;
  double t55660;
  double t56994;
  double t57985;
  double t58147;
  double t58201;
  double t58519;
  double t58520;
  double t58528;
  double t58457;
  double t58497;
  double t58513;
  double t58590;
  double t58596;
  double t58672;
  double t58686;
  double t58696;
  double t58529;
  double t58530;
  double t58537;
  double t58261;
  double t58388;
  double t58389;
  double t54994;
  double t55010;
  double t55613;
  double t58706;
  double t58911;
  double t59101;
  double t59358;
  double t59440;
  double t59496;
  double t60814;
  double t60821;
  double t60825;
  double t60531;
  double t60580;
  double t60587;
  double t60610;
  double t62362;
  double t62388;
  double t62391;
  double t60659;
  double t60739;
  double t60783;
  double t60784;
  double t61073;
  double t61087;
  double t61089;
  double t61157;
  double t61467;
  double t61474;
  double t61510;
  double t61563;
  double t61934;
  double t61949;
  double t61950;
  double t61958;
  double t62175;
  double t62178;
  double t62184;
  double t62185;
  double t12848;
  double t14225;
  double t14228;
  double t14534;
  double t14648;
  double t14649;
  double t15786;
  double t18347;
  double t18959;
  double t63610;
  double t63652;
  double t63612;
  double t63624;
  double t63629;
  double t63631;
  double t63635;
  double t63657;
  double t63660;
  double t63686;
  double t63688;
  double t63701;
  double t63711;
  double t63715;
  double t63721;
  double t63727;
  double t63750;
  double t63754;
  double t63779;
  double t63787;
  double t63636;
  double t63696;
  double t63732;
  double t63734;
  double t63965;
  double t63976;
  double t63991;
  double t64030;
  double t64055;
  double t64077;
  double t64079;
  double t63744;
  double t63876;
  double t63880;
  double t64034;
  double t64188;
  double t64243;
  double t64287;
  double t64305;
  double t64467;
  double t47842;
  double t48913;
  double t48969;
  double t39125;
  double t45609;
  double t45614;
  double t65091;
  double t65092;
  double t65093;
  double t65094;
  double t65097;
  double t65029;
  double t65030;
  double t65032;
  double t65049;
  double t65055;
  double t65186;
  double t65250;
  double t65451;
  double t65464;
  double t65474;
  double t65482;
  double t65487;
  double t33193;
  double t38515;
  double t38520;
  double t65089;
  double t65099;
  double t65104;
  double t65466;
  double t65488;
  double t65495;
  double t65500;
  double t65509;
  double t65516;
  double t63911;
  double t63930;
  double t64509;
  double t64549;
  double t64590;
  double t64591;
  double t64634;
  double t64642;
  double t64772;
  double t64785;
  double t64931;
  double t64932;
  double t66144;
  double t66156;
  double t66161;
  double t58391;
  double t58518;
  double t59637;
  double t59658;
  double t66174;
  double t66215;
  double t66216;
  double t66290;
  double t66291;
  double t66293;
  double t60854;
  double t60859;
  double t66354;
  double t66356;
  double t66357;
  double t61173;
  double t61248;
  double t61747;
  double t61816;
  double t66372;
  double t66373;
  double t66374;
  double t66402;
  double t66408;
  double t66410;
  double t61963;
  double t61965;
  double t65105;
  double t65118;
  double t65541;
  double t65545;
  double t65681;
  double t65707;
  double t65766;
  double t65774;
  double t65828;
  double t65830;
  double t65910;
  double t66030;
  double t66223;
  double t66228;
  double t66256;
  double t66257;
  double t66324;
  double t66328;
  double t66336;
  double t66341;
  double t66381;
  double t66382;
  double t66389;
  double t66390;
  double t66759;
  double t66762;
  double t66763;
  double t66552;
  double t66553;
  double t66563;
  double t66568;
  double t66773;
  double t66774;
  double t66789;
  double t66858;
  double t66859;
  double t66863;
  double t66586;
  double t66588;
  double t66915;
  double t66918;
  double t66924;
  double t66605;
  double t66612;
  double t66672;
  double t66684;
  double t66939;
  double t66941;
  double t66942;
  double t66967;
  double t66968;
  double t66969;
  double t66732;
  double t66733;
  double t67352;
  double t67353;
  double t67356;
  double t67361;
  double t67363;
  double t67365;
  double t67367;
  double t67368;
  double t67374;
  double t67378;
  double t67380;
  double t67384;
  double t67386;
  double t67388;
  double t67389;
  double t67402;
  double t67403;
  double t67406;
  double t67411;
  double t67413;
  double t67414;
  double t67415;
  double t67490;
  double t67492;
  double t67493;
  double t67494;
  double t67498;
  double t67501;
  double t67502;
  double t67508;
  double t67515;
  double t67527;
  double t67537;
  double t67541;
  double t67546;
  double t67547;
  double t67549;
  double t67554;
  double t67555;
  double t67556;
  double t67559;
  double t67560;
  double t67561;
  double t67565;
  double t67643;
  double t67645;
  double t67646;
  double t67647;
  double t67648;
  double t67653;
  double t67662;
  double t67672;
  double t67673;
  double t67695;
  double t67697;
  double t67699;
  double t67704;
  double t67714;
  double t67728;
  double t67746;
  double t67747;
  double t67752;
  double t67753;
  double t67757;
  double t67758;
  double t67759;
  t3367 = Cos(var1[21]);
  t3631 = -1.*t3367;
  t3651 = 1. + t3631;
  t3723 = 3.e-6*t3651;
  t4053 = Sin(var1[21]);
  t4432 = Cos(var1[19]);
  t4485 = -1.*t4432;
  t4592 = 1. + t4485;
  t4191 = 3.e-6*t4053;
  t2356 = Sin(var1[19]);
  t3659 = 1.000000000009*t3651;
  t4208 = t3723 + t4191;
  t4271 = 3.e-6*t4208;
  t4323 = -1. + t3659 + t4271;
  t4709 = -9.e-12*t3651;
  t4731 = -3.e-6*t4053;
  t4889 = t3723 + t4731;
  t4918 = 3.e-6*t4889;
  t4924 = -1.*t4053;
  t4925 = t4709 + t4918 + t4924;
  t5111 = -1.8e-11*t3651;
  t5115 = 1. + t5111;
  t5117 = 3.e-6*t5115;
  t5134 = -3.e-6*t3651;
  t5145 = t5117 + t5134 + t4191;
  t1072 = Cos(var1[4]);
  t1278 = Cos(var1[5]);
  t4928 = -9.e-12*t4592;
  t4948 = 1. + t4928;
  t5329 = -1. + t3659 + t4918;
  t5452 = t5117 + t5134 + t4731;
  t5475 = t4709 + t4271 + t4053;
  t5230 = Sin(var1[5]);
  t6350 = -1.000000000009*t3651;
  t6355 = 1. + t6350;
  t6372 = 3.e-6*t6355;
  t6388 = 9.e-12*t3651;
  t6330 = 1. + t5111 + t4918 + t4271;
  t6660 = t6388 + t4924;
  t6662 = 3.e-6*t6660;
  t6674 = t6372 + t3723 + t6662 + t4191;
  t7109 = t6388 + t4053;
  t7162 = 3.e-6*t7109;
  t7180 = t6372 + t3723 + t4731 + t7162;
  t12353 = 3.e-6*t3367;
  t12232 = -3.e-6*t3367;
  t12516 = 9.e-12*t4053;
  t12599 = -2.7e-17*t4053;
  t12328 = t12232 + t4191;
  t12337 = 3.e-6*t12328;
  t12374 = t12353 + t4191;
  t12432 = 3.e-6*t12374;
  t12452 = -1.8e-11*t4053;
  t12454 = t12337 + t12432 + t12452;
  t12570 = t3631 + t12516;
  t12572 = 3.e-6*t12570;
  t12602 = t12353 + t12572 + t12599;
  t12659 = t3367 + t12516;
  t12781 = 3.e-6*t12659;
  t12790 = t12232 + t12781 + t12599;
  t12491 = -1.000000000009*t4592;
  t12508 = 1. + t12491;
  t12822 = Sin(var1[4]);
  t14289 = -3.000000000054e-6*t4053;
  t14342 = t12232 + t14289;
  t14368 = -9.e-12*t4053;
  t14415 = t3367 + t12432 + t14368;
  t14457 = 1.000000000009*t4053;
  t14502 = t12337 + t14457;
  t14699 = t12353 + t14289;
  t14909 = t3631 + t12337 + t14368;
  t15068 = t12432 + t14457;
  t5189 = -1.*t2356*t4323;
  t5218 = t4432*t4925;
  t5220 = 3.e-6*t4592*t5145;
  t5228 = t5189 + t5218 + t5220;
  t4394 = 3.e-6*t2356*t4323;
  t4927 = 3.e-6*t4592*t4925;
  t5167 = t4948*t5145;
  t5169 = t4394 + t4927 + t5167;
  t6159 = t4432*t5329;
  t6164 = 3.e-6*t4592*t5452;
  t6184 = -1.*t2356*t5475;
  t6209 = t6159 + t6164 + t6184;
  t5451 = 3.e-6*t4592*t5329;
  t5468 = t4948*t5452;
  t5611 = 3.e-6*t2356*t5475;
  t5941 = t5451 + t5468 + t5611;
  t8207 = 3.e-6*t4592*t6330;
  t8371 = -1.*t2356*t6674;
  t8388 = t4432*t7180;
  t8741 = t8207 + t8371 + t8388;
  t6337 = t4948*t6330;
  t6754 = 3.e-6*t2356*t6674;
  t7223 = 3.e-6*t4592*t7180;
  t7230 = t6337 + t6754 + t7223;
  t19315 = t12508*t4323;
  t19339 = t2356*t4925;
  t19457 = -3.e-6*t2356*t5145;
  t19502 = t19315 + t19339 + t19457;
  t21400 = t1278*t5228;
  t22172 = -1.*t5169*t5230;
  t23239 = t21400 + t22172;
  t49125 = Sin(var1[3]);
  t29371 = t2356*t5329;
  t30382 = -3.e-6*t2356*t5452;
  t30435 = t12508*t5475;
  t30444 = t29371 + t30382 + t30435;
  t30455 = t1278*t6209;
  t31378 = -1.*t5941*t5230;
  t31438 = t30455 + t31378;
  t31731 = -3.e-6*t2356*t6330;
  t31749 = t12508*t6674;
  t31797 = t2356*t7180;
  t31895 = t31731 + t31749 + t31797;
  t32386 = t1278*t8741;
  t32495 = -1.*t7230*t5230;
  t32724 = t32386 + t32495;
  t5172 = -1.*t1278*t5169;
  t5242 = -1.*t5228*t5230;
  t5257 = t5172 + t5242;
  t6158 = -1.*t1278*t5941;
  t6210 = -1.*t6209*t5230;
  t6274 = t6158 + t6210;
  t49464 = Cos(var1[3]);
  t7911 = -1.*t1278*t7230;
  t11050 = -1.*t8741*t5230;
  t12176 = t7911 + t11050;
  t14057 = t4948*t12454;
  t14199 = 3.e-6*t2356*t12602;
  t14206 = 3.e-6*t4592*t12790;
  t14210 = t14057 + t14199 + t14206;
  t13032 = 3.e-6*t4592*t12454;
  t13066 = -1.*t2356*t12602;
  t13207 = t4432*t12790;
  t13927 = t13032 + t13066 + t13207;
  t12479 = -3.e-6*t2356*t12454;
  t12654 = t12508*t12602;
  t12795 = t2356*t12790;
  t12821 = t12479 + t12654 + t12795;
  t14019 = t1278*t13927;
  t14219 = -1.*t14210*t5230;
  t14220 = t14019 + t14219;
  t14622 = t4948*t14342;
  t14623 = 3.e-6*t2356*t14415;
  t14626 = 3.e-6*t4592*t14502;
  t14628 = t14622 + t14623 + t14626;
  t14536 = 3.e-6*t4592*t14342;
  t14545 = -1.*t2356*t14415;
  t14565 = t4432*t14502;
  t14566 = t14536 + t14545 + t14565;
  t14347 = -3.e-6*t2356*t14342;
  t14437 = t12508*t14415;
  t14505 = t2356*t14502;
  t14516 = t14347 + t14437 + t14505;
  t14574 = t1278*t14566;
  t14631 = -1.*t14628*t5230;
  t14642 = t14574 + t14631;
  t17938 = t4948*t14699;
  t17939 = 3.e-6*t4592*t14909;
  t18170 = 3.e-6*t2356*t15068;
  t18173 = t17938 + t17939 + t18170;
  t16090 = 3.e-6*t4592*t14699;
  t17362 = t4432*t14909;
  t17364 = -1.*t2356*t15068;
  t17432 = t16090 + t17362 + t17364;
  t14717 = -3.e-6*t2356*t14699;
  t15052 = t2356*t14909;
  t15098 = t12508*t15068;
  t15192 = t14717 + t15052 + t15098;
  t17680 = t1278*t17432;
  t18234 = -1.*t18173*t5230;
  t18236 = t17680 + t18234;
  t19886 = t1072*t19502;
  t23466 = -1.*t12822*t23239;
  t23647 = t19886 + t23466;
  t30447 = t1072*t30444;
  t31656 = -1.*t12822*t31438;
  t31657 = t30447 + t31656;
  t32341 = t1072*t31895;
  t32854 = -1.*t12822*t32724;
  t32865 = t32341 + t32854;
  t33690 = 3.e-6*t4432*t4323;
  t33778 = 3.e-6*t2356*t4925;
  t34316 = -9.e-12*t2356*t5145;
  t34337 = t33690 + t33778 + t34316;
  t33242 = -1.*t4432*t4323;
  t33415 = -1.*t2356*t4925;
  t33649 = 3.e-6*t2356*t5145;
  t33657 = t33242 + t33415 + t33649;
  t32974 = -1.000000000009*t2356*t4323;
  t33051 = -3.e-6*t4432*t5145;
  t33061 = t32974 + t5218 + t33051;
  t33678 = t1278*t33657;
  t37752 = -1.*t34337*t5230;
  t38264 = t33678 + t37752;
  t42726 = 3.e-6*t2356*t5329;
  t42732 = -9.e-12*t2356*t5452;
  t43859 = 3.e-6*t4432*t5475;
  t44266 = t42726 + t42732 + t43859;
  t39126 = -1.*t2356*t5329;
  t39130 = 3.e-6*t2356*t5452;
  t42652 = -1.*t4432*t5475;
  t42663 = t39126 + t39130 + t42652;
  t38772 = -3.e-6*t4432*t5452;
  t39078 = -1.000000000009*t2356*t5475;
  t39116 = t6159 + t38772 + t39078;
  t42723 = t1278*t42663;
  t45318 = -1.*t44266*t5230;
  t45601 = t42723 + t45318;
  t48579 = -9.e-12*t2356*t6330;
  t48588 = 3.e-6*t4432*t6674;
  t48608 = 3.e-6*t2356*t7180;
  t48629 = t48579 + t48588 + t48608;
  t47865 = 3.e-6*t2356*t6330;
  t48210 = -1.*t4432*t6674;
  t48486 = -1.*t2356*t7180;
  t48548 = t47865 + t48210 + t48486;
  t45630 = -3.e-6*t4432*t6330;
  t46857 = -1.000000000009*t2356*t6674;
  t47841 = t45630 + t46857 + t8388;
  t48568 = t1278*t48548;
  t48669 = -1.*t48629*t5230;
  t48813 = t48568 + t48669;
  t49222 = -1.*t19502*t12822;
  t49237 = -1.*t1072*t23239;
  t49285 = t49222 + t49237;
  t49291 = -1.*t30444*t12822;
  t49301 = -1.*t1072*t31438;
  t49302 = t49291 + t49301;
  t49371 = -1.*t31895*t12822;
  t49376 = -1.*t1072*t32724;
  t49391 = t49371 + t49376;
  t49741 = t1278*t14210;
  t49744 = t13927*t5230;
  t49786 = t49741 + t49744;
  t49880 = t1072*t12821;
  t49935 = -1.*t12822*t14220;
  t49943 = t49880 + t49935;
  t50219 = t1278*t14628;
  t50220 = t14566*t5230;
  t50221 = t50219 + t50220;
  t50225 = t1072*t14516;
  t50226 = -1.*t12822*t14642;
  t50230 = t50225 + t50226;
  t50257 = t1278*t18173;
  t50258 = t17432*t5230;
  t50262 = t50257 + t50258;
  t50289 = t1072*t15192;
  t50302 = -1.*t12822*t18236;
  t50306 = t50289 + t50302;
  t50543 = t1278*t5169;
  t50572 = t5228*t5230;
  t50589 = t50543 + t50572;
  t50815 = t1278*t5941;
  t50845 = t6209*t5230;
  t50847 = t50815 + t50845;
  t50950 = t1278*t7230;
  t50976 = t8741*t5230;
  t51033 = t50950 + t50976;
  t51175 = t1278*t34337;
  t51184 = t33657*t5230;
  t51230 = t51175 + t51184;
  t51240 = t1072*t33061;
  t51274 = -1.*t12822*t38264;
  t51275 = t51240 + t51274;
  t51327 = t1278*t44266;
  t51337 = t42663*t5230;
  t51338 = t51327 + t51337;
  t51356 = t1072*t39116;
  t51357 = -1.*t12822*t45601;
  t51358 = t51356 + t51357;
  t51433 = t1278*t48629;
  t51452 = t48548*t5230;
  t51456 = t51433 + t51452;
  t51471 = t1072*t47841;
  t51481 = -1.*t12822*t48813;
  t51492 = t51471 + t51481;
  t56881 = t5134 + t4191;
  t57400 = 3.e-13*var1[21];
  t56513 = t5134 + t4731;
  t55790 = 1.e-7*var1[21];
  t55865 = 1.8e-11*t3651;
  t56295 = -1. + t55865;
  t56413 = 0.1*t56295;
  t56415 = 5.4e-18*t3651;
  t56818 = -3.e-12*t56513;
  t56885 = 0.100000000003*t56881;
  t56983 = t55790 + t56413 + t56415 + t56818 + t56885;
  t57669 = -1. + t3659;
  t57732 = 0.2*t57669;
  t57813 = -0.2000000000048*t3651;
  t57935 = t4709 + t4924;
  t57944 = 0.100000000003*t57935;
  t57965 = 0.1000003*t56881;
  t57979 = t57400 + t57732 + t57813 + t57944 + t57965;
  t58006 = 0.1000000000039*t3651;
  t58009 = 0.1000003*t56513;
  t58040 = t4709 + t4053;
  t58049 = -3.e-12*t58040;
  t58146 = t57400 + t58006 + t58009 + t58049;
  t58263 = -1.8e-12*t4592;
  t58270 = -1. + t4432;
  t58290 = 0.2*t58270;
  t58348 = 3.e-6*t4592*t56983;
  t58365 = t4432*t57979;
  t58376 = -1.*t2356*t58146;
  t58382 = t58263 + t58290 + t58348 + t58365 + t58376;
  t55660 = 6.000000000054e-7*t4592;
  t56994 = t4948*t56983;
  t57985 = 3.e-6*t4592*t57979;
  t58147 = 3.e-6*t2356*t58146;
  t58201 = t55660 + t56994 + t57985 + t58147;
  t58519 = -1.*t1278*t58201;
  t58520 = -1.*t58382*t5230;
  t58528 = t58519 + t58520;
  t58457 = t1278*t58382;
  t58497 = -1.*t58201*t5230;
  t58513 = t58457 + t58497;
  t58590 = 0.2000000000018*t2356;
  t58596 = -3.e-6*t2356*t56983;
  t58672 = t2356*t57979;
  t58686 = t12508*t58146;
  t58696 = t58590 + t58596 + t58672 + t58686;
  t58529 = t19502*t12822;
  t58530 = t1072*t23239;
  t58537 = t58529 + t58530;
  t58261 = t1278*t58201;
  t58388 = t58382*t5230;
  t58389 = t58261 + t58388;
  t54994 = t30444*t12822;
  t55010 = t1072*t31438;
  t55613 = t54994 + t55010;
  t58706 = t58696*t12822;
  t58911 = t1072*t58513;
  t59101 = t58706 + t58911;
  t59358 = t1072*t58696;
  t59440 = -1.*t12822*t58513;
  t59496 = t59358 + t59440;
  t60814 = t31895*t12822;
  t60821 = t1072*t32724;
  t60825 = t60814 + t60821;
  t60531 = -1.*t50589*t58389;
  t60580 = -1.*t58537*t59101;
  t60587 = -1.*t23647*t59496;
  t60610 = t60531 + t60580 + t60587;
  t62362 = -1.*t58696*t12822;
  t62388 = -1.*t1072*t58513;
  t62391 = t62362 + t62388;
  t60659 = t50847*t58389;
  t60739 = t55613*t59101;
  t60783 = t31657*t59496;
  t60784 = t60659 + t60739 + t60783;
  t61073 = t50589*t58389;
  t61087 = t58537*t59101;
  t61089 = t23647*t59496;
  t61157 = t61073 + t61087 + t61089;
  t61467 = -1.*t58389*t51033;
  t61474 = -1.*t59101*t60825;
  t61510 = -1.*t59496*t32865;
  t61563 = t61467 + t61474 + t61510;
  t61934 = -1.*t50847*t58389;
  t61949 = -1.*t55613*t59101;
  t61950 = -1.*t31657*t59496;
  t61958 = t61934 + t61949 + t61950;
  t62175 = t58389*t51033;
  t62178 = t59101*t60825;
  t62184 = t59496*t32865;
  t62185 = t62175 + t62178 + t62184;
  t12848 = t12821*t12822;
  t14225 = t1072*t14220;
  t14228 = t12848 + t14225;
  t14534 = t14516*t12822;
  t14648 = t1072*t14642;
  t14649 = t14534 + t14648;
  t15786 = t15192*t12822;
  t18347 = t1072*t18236;
  t18959 = t15786 + t18347;
  t63610 = t12353 + t4731;
  t63652 = t12232 + t4731;
  t63612 = 0.1000003*t63610;
  t63624 = t3631 + t14368;
  t63629 = 0.100000000003*t63624;
  t63631 = -3.000000000027e-12*t4053;
  t63635 = 3.e-13 + t63612 + t63629 + t63631;
  t63657 = -3.e-12*t63652;
  t63660 = 0.100000000003*t63610;
  t63686 = 1.8000054e-12*t4053;
  t63688 = 1.e-7 + t63657 + t63660 + t63686;
  t63701 = 0.1000003*t63652;
  t63711 = t3367 + t14368;
  t63715 = -3.e-12*t63711;
  t63721 = 0.1000000000039*t4053;
  t63727 = 3.e-13 + t63701 + t63715 + t63721;
  t63750 = t4432*t63635;
  t63754 = 3.e-6*t4592*t63688;
  t63779 = -1.*t2356*t63727;
  t63787 = t63750 + t63754 + t63779;
  t63636 = 3.e-6*t4592*t63635;
  t63696 = t4948*t63688;
  t63732 = 3.e-6*t2356*t63727;
  t63734 = t63636 + t63696 + t63732;
  t63965 = t2356*t63635;
  t63976 = -3.e-6*t2356*t63688;
  t63991 = t12508*t63727;
  t64030 = t63965 + t63976 + t63991;
  t64055 = t1278*t63787;
  t64077 = -1.*t63734*t5230;
  t64079 = t64055 + t64077;
  t63744 = t1278*t63734;
  t63876 = t63787*t5230;
  t63880 = t63744 + t63876;
  t64034 = t64030*t12822;
  t64188 = t1072*t64079;
  t64243 = t64034 + t64188;
  t64287 = t1072*t64030;
  t64305 = -1.*t12822*t64079;
  t64467 = t64287 + t64305;
  t47842 = t47841*t12822;
  t48913 = t1072*t48813;
  t48969 = t47842 + t48913;
  t39125 = t39116*t12822;
  t45609 = t1072*t45601;
  t45614 = t39125 + t45609;
  t65091 = -0.2000000000018*t2356;
  t65092 = 3.e-6*t2356*t56983;
  t65093 = -1.*t2356*t57979;
  t65094 = -1.*t4432*t58146;
  t65097 = t65091 + t65092 + t65093 + t65094;
  t65029 = 6.000000000054e-7*t2356;
  t65030 = -9.e-12*t2356*t56983;
  t65032 = 3.e-6*t2356*t57979;
  t65049 = 3.e-6*t4432*t58146;
  t65055 = t65029 + t65030 + t65032 + t65049;
  t65186 = 0.2000000000018*t4432;
  t65250 = -3.e-6*t4432*t56983;
  t65451 = -1.000000000009*t2356*t58146;
  t65464 = t65186 + t65250 + t58365 + t65451;
  t65474 = t1278*t65097;
  t65482 = -1.*t65055*t5230;
  t65487 = t65474 + t65482;
  t33193 = t33061*t12822;
  t38515 = t1072*t38264;
  t38520 = t33193 + t38515;
  t65089 = t1278*t65055;
  t65099 = t65097*t5230;
  t65104 = t65089 + t65099;
  t65466 = t65464*t12822;
  t65488 = t1072*t65487;
  t65495 = t65466 + t65488;
  t65500 = t1072*t65464;
  t65509 = -1.*t12822*t65487;
  t65516 = t65500 + t65509;
  t63911 = t63880*t50847;
  t63930 = t50221*t58389;
  t64509 = -1.*t50589*t63880;
  t64549 = -1.*t50262*t58389;
  t64590 = t50589*t63880;
  t64591 = t50262*t58389;
  t64634 = -1.*t49786*t58389;
  t64642 = -1.*t63880*t51033;
  t64772 = -1.*t63880*t50847;
  t64785 = -1.*t50221*t58389;
  t64931 = t49786*t58389;
  t64932 = t63880*t51033;
  t66144 = -1.*t19502*t58696;
  t66156 = -1.*t23239*t58513;
  t66161 = t66144 + t60531 + t66156;
  t58391 = -1.*t23239*t58389;
  t58518 = -1.*t50589*t58513;
  t59637 = t31438*t58389;
  t59658 = t50847*t58513;
  t66174 = t30444*t58696;
  t66215 = t31438*t58513;
  t66216 = t66174 + t60659 + t66215;
  t66290 = t19502*t58696;
  t66291 = t23239*t58513;
  t66293 = t66290 + t61073 + t66291;
  t60854 = t23239*t58389;
  t60859 = t50589*t58513;
  t66354 = -1.*t58696*t31895;
  t66356 = -1.*t58513*t32724;
  t66357 = t66354 + t66356 + t61467;
  t61173 = -1.*t58389*t32724;
  t61248 = -1.*t58513*t51033;
  t61747 = -1.*t31438*t58389;
  t61816 = -1.*t50847*t58513;
  t66372 = -1.*t30444*t58696;
  t66373 = -1.*t31438*t58513;
  t66374 = t66372 + t61934 + t66373;
  t66402 = t58696*t31895;
  t66408 = t58513*t32724;
  t66410 = t66402 + t66408 + t62175;
  t61963 = t58389*t32724;
  t61965 = t58513*t51033;
  t65105 = -1.*t50589*t65104;
  t65118 = -1.*t51230*t58389;
  t65541 = t50847*t65104;
  t65545 = t51338*t58389;
  t65681 = t50589*t65104;
  t65707 = t51230*t58389;
  t65766 = -1.*t65104*t51033;
  t65774 = -1.*t58389*t51456;
  t65828 = -1.*t50847*t65104;
  t65830 = -1.*t51338*t58389;
  t65910 = t65104*t51033;
  t66030 = t58389*t51456;
  t66223 = t64030*t30444;
  t66228 = t14516*t58696;
  t66256 = -1.*t19502*t64030;
  t66257 = -1.*t15192*t58696;
  t66324 = t19502*t64030;
  t66328 = t15192*t58696;
  t66336 = -1.*t12821*t58696;
  t66341 = -1.*t64030*t31895;
  t66381 = -1.*t64030*t30444;
  t66382 = -1.*t14516*t58696;
  t66389 = t12821*t58696;
  t66390 = t64030*t31895;
  t66759 = -1.*t5228*t58382;
  t66762 = -1.*t5169*t58201;
  t66763 = t66144 + t66759 + t66762;
  t66552 = -1.*t33061*t58696;
  t66553 = -1.*t19502*t65464;
  t66563 = t39116*t58696;
  t66568 = t30444*t65464;
  t66773 = t6209*t58382;
  t66774 = t5941*t58201;
  t66789 = t66174 + t66773 + t66774;
  t66858 = t5228*t58382;
  t66859 = t5169*t58201;
  t66863 = t66290 + t66858 + t66859;
  t66586 = t33061*t58696;
  t66588 = t19502*t65464;
  t66915 = -1.*t58201*t7230;
  t66918 = -1.*t58382*t8741;
  t66924 = t66915 + t66918 + t66354;
  t66605 = -1.*t58696*t47841;
  t66612 = -1.*t65464*t31895;
  t66672 = -1.*t39116*t58696;
  t66684 = -1.*t30444*t65464;
  t66939 = -1.*t6209*t58382;
  t66941 = -1.*t5941*t58201;
  t66942 = t66372 + t66939 + t66941;
  t66967 = t58201*t7230;
  t66968 = t58382*t8741;
  t66969 = t66967 + t66968 + t66402;
  t66732 = t58696*t47841;
  t66733 = t65464*t31895;
  t67352 = -1.*t57979*t4925;
  t67353 = -1.*t56983*t5145;
  t67356 = -1.*t4323*t58146;
  t67361 = t67352 + t67353 + t67356;
  t67363 = t56983*t14342;
  t67365 = t5329*t63635;
  t67367 = t5452*t63688;
  t67368 = t63727*t5475;
  t67374 = t57979*t14502;
  t67378 = t14415*t58146;
  t67380 = t67363 + t67365 + t67367 + t67368 + t67374 + t67378;
  t67384 = t5329*t57979;
  t67386 = t56983*t5452;
  t67388 = t5475*t58146;
  t67389 = t67384 + t67386 + t67388;
  t67402 = -1.*t56983*t14699;
  t67403 = -1.*t57979*t14909;
  t67406 = -1.*t4925*t63635;
  t67411 = -1.*t63688*t5145;
  t67413 = -1.*t4323*t63727;
  t67414 = -1.*t15068*t58146;
  t67415 = t67402 + t67403 + t67406 + t67411 + t67413 + t67414;
  t67490 = t57979*t4925;
  t67492 = t56983*t5145;
  t67493 = t4323*t58146;
  t67494 = t67490 + t67492 + t67493;
  t67498 = t56983*t14699;
  t67501 = t57979*t14909;
  t67502 = t4925*t63635;
  t67508 = t63688*t5145;
  t67515 = t4323*t63727;
  t67527 = t15068*t58146;
  t67537 = t67498 + t67501 + t67502 + t67508 + t67515 + t67527;
  t67541 = -1.*t56983*t6330;
  t67546 = -1.*t6674*t58146;
  t67547 = -1.*t57979*t7180;
  t67549 = t67541 + t67546 + t67547;
  t67554 = -1.*t56983*t12454;
  t67555 = -1.*t57979*t12790;
  t67556 = -1.*t6330*t63688;
  t67559 = -1.*t6674*t63727;
  t67560 = -1.*t12602*t58146;
  t67561 = -1.*t63635*t7180;
  t67565 = t67554 + t67555 + t67556 + t67559 + t67560 + t67561;
  t67643 = -1.*t56983*t14342;
  t67645 = -1.*t5329*t63635;
  t67646 = -1.*t5452*t63688;
  t67647 = -1.*t63727*t5475;
  t67648 = -1.*t57979*t14502;
  t67653 = -1.*t14415*t58146;
  t67662 = t67643 + t67645 + t67646 + t67647 + t67648 + t67653;
  t67672 = -1.*t5329*t57979;
  t67673 = -1.*t56983*t5452;
  t67695 = -1.*t5475*t58146;
  t67697 = t67672 + t67673 + t67695;
  t67699 = t56983*t6330;
  t67704 = t6674*t58146;
  t67714 = t57979*t7180;
  t67728 = t67699 + t67704 + t67714;
  t67746 = t56983*t12454;
  t67747 = t57979*t12790;
  t67752 = t6330*t63688;
  t67753 = t6674*t63727;
  t67757 = t12602*t58146;
  t67758 = t63635*t7180;
  t67759 = t67746 + t67747 + t67752 + t67753 + t67757 + t67758;
  p_output1[0]=var2[21]*(-0.5*(1.28999742002322e-8*t23647 + 0.004299987100129*t31657 + 4.3e-9*t32865)*var2[4] - 0.5*(4.3e-9*t1072*t12176 + 1.28999742002322e-8*t1072*t5257 + 0.004299987100129*t1072*t6274)*var2[5] - 0.5*(1.28999742002322e-8*t38520 + 0.004299987100129*t45614 + 4.3e-9*t48969)*var2[19] - 0.5*(4.3e-9*t14228 + 0.004299987100129*t14649 + 1.28999742002322e-8*t18959)*var2[21]);
  p_output1[1]=var2[21]*(-0.5*(1.28999742002322e-8*(-1.*t23647*t49464 - 1.*t49125*t50589) + 0.004299987100129*(-1.*t31657*t49464 - 1.*t49125*t50847) + 4.3e-9*(-1.*t32865*t49464 - 1.*t49125*t51033))*var2[3] - 0.5*(-1.28999742002322e-8*t49125*t49285 - 0.004299987100129*t49125*t49302 - 4.3e-9*t49125*t49391)*var2[4] - 0.5*(4.3e-9*(t12176*t12822*t49125 + t32724*t49464) + 1.28999742002322e-8*(t23239*t49464 + t12822*t49125*t5257) + 0.004299987100129*(t31438*t49464 + t12822*t49125*t6274))*var2[5] - 0.5*(1.28999742002322e-8*(t49464*t51230 - 1.*t49125*t51275) + 0.004299987100129*(t49464*t51338 - 1.*t49125*t51358) + 4.3e-9*(t49464*t51456 - 1.*t49125*t51492))*var2[19] - 0.5*(4.3e-9*(t49464*t49786 - 1.*t49125*t49943) + 0.004299987100129*(t49464*t50221 - 1.*t49125*t50230) + 1.28999742002322e-8*(t49464*t50262 - 1.*t49125*t50306))*var2[21]);
  p_output1[2]=var2[21]*(-0.5*(1.28999742002322e-8*(-1.*t23647*t49125 + t49464*t50589) + 0.004299987100129*(-1.*t31657*t49125 + t49464*t50847) + 4.3e-9*(-1.*t32865*t49125 + t49464*t51033))*var2[3] - 0.5*(1.28999742002322e-8*t49285*t49464 + 0.004299987100129*t49302*t49464 + 4.3e-9*t49391*t49464)*var2[4] - 0.5*(4.3e-9*(t32724*t49125 - 1.*t12176*t12822*t49464) + 1.28999742002322e-8*(t23239*t49125 - 1.*t12822*t49464*t5257) + 0.004299987100129*(t31438*t49125 - 1.*t12822*t49464*t6274))*var2[5] - 0.5*(1.28999742002322e-8*(t49125*t51230 + t49464*t51275) + 0.004299987100129*(t49125*t51338 + t49464*t51358) + 4.3e-9*(t49125*t51456 + t49464*t51492))*var2[19] - 0.5*(4.3e-9*(t49125*t49786 + t49464*t49943) + 0.004299987100129*(t49125*t50221 + t49464*t50230) + 1.28999742002322e-8*(t49125*t50262 + t49464*t50306))*var2[21]);
  p_output1[3]=var2[21]*(-0.5*(0.000271000000004878*t32865 + 4.3e-9*(t31657*t60610 + t23647*t60784 + t55613*(-1.*t23647*t59101 - 1.*t49285*t59496 - 1.*t58537*t59496 - 1.*t23647*t62391) + t58537*(t31657*t59101 + t49302*t59496 + t55613*t59496 + t31657*t62391)) + 0.004299987100129*(t32865*t61157 + t23647*t61563 + t60825*(t23647*t59101 + t49285*t59496 + t58537*t59496 + t23647*t62391) + t58537*(-1.*t32865*t59101 - 1.*t49391*t59496 - 1.*t59496*t60825 - 1.*t32865*t62391)) + 1.28999742002322e-8*(t32865*t61958 + t31657*t62185 + t60825*(-1.*t31657*t59101 - 1.*t49302*t59496 - 1.*t55613*t59496 - 1.*t31657*t62391) + t55613*(t32865*t59101 + t49391*t59496 + t59496*t60825 + t32865*t62391)))*var2[4] - 0.5*(0.000271000000004878*t1072*t12176 + 0.004299987100129*(t60825*(-1.*t12822*t23647*t58528 + t1072*t58528*t58537 + t1072*t5257*t59101 - 1.*t12822*t5257*t59496 + t60854 + t60859) + t1072*t12176*t61157 + t58537*(t12822*t32865*t58528 - 1.*t1072*t12176*t59101 + t12176*t12822*t59496 - 1.*t1072*t58528*t60825 + t61173 + t61248) + t1072*t5257*t61563) + 4.3e-9*(t55613*(t58391 + t58518 + t12822*t23647*t58528 - 1.*t1072*t58528*t58537 - 1.*t1072*t5257*t59101 + t12822*t5257*t59496) + t1072*t5257*t60784 + t1072*t60610*t6274 + t58537*(-1.*t12822*t31657*t58528 + t1072*t55613*t58528 + t59637 + t59658 + t1072*t59101*t6274 - 1.*t12822*t59496*t6274)) + 1.28999742002322e-8*(t1072*t12176*t61958 + t55613*(-1.*t12822*t32865*t58528 + t1072*t12176*t59101 - 1.*t12176*t12822*t59496 + t1072*t58528*t60825 + t61963 + t61965) + t1072*t62185*t6274 + t60825*(t12822*t31657*t58528 - 1.*t1072*t55613*t58528 + t61747 + t61816 - 1.*t1072*t59101*t6274 + t12822*t59496*t6274)))*var2[5] - 0.5*(0.000271000000004878*t48969 + 4.3e-9*(t45614*t60610 + t38520*t60784 + t55613*(-1.*t38520*t59101 - 1.*t51275*t59496 + t65105 + t65118 - 1.*t58537*t65495 - 1.*t23647*t65516) + t58537*(t45614*t59101 + t51358*t59496 + t55613*t65495 + t31657*t65516 + t65541 + t65545)) + 0.004299987100129*(t48969*t61157 + t38520*t61563 + t60825*(t38520*t59101 + t51275*t59496 + t58537*t65495 + t23647*t65516 + t65681 + t65707) + t58537*(-1.*t48969*t59101 - 1.*t51492*t59496 - 1.*t60825*t65495 - 1.*t32865*t65516 + t65766 + t65774)) + 1.28999742002322e-8*(t48969*t61958 + t45614*t62185 + t60825*(-1.*t45614*t59101 - 1.*t51358*t59496 - 1.*t55613*t65495 - 1.*t31657*t65516 + t65828 + t65830) + t55613*(t48969*t59101 + t51492*t59496 + t60825*t65495 + t32865*t65516 + t65910 + t66030)))*var2[19] - 0.5*(0.000271000000004878*t14228 + 4.3e-9*(t14649*t60610 + t18959*t60784 + t58537*(t14649*t59101 + t50230*t59496 + t63911 + t63930 + t55613*t64243 + t31657*t64467) + t55613*(-1.*t18959*t59101 - 1.*t50306*t59496 - 1.*t58537*t64243 - 1.*t23647*t64467 + t64509 + t64549)) + 0.004299987100129*(t14228*t61157 + t18959*t61563 + t60825*(t18959*t59101 + t50306*t59496 + t58537*t64243 + t23647*t64467 + t64590 + t64591) + t58537*(-1.*t14228*t59101 - 1.*t49943*t59496 - 1.*t60825*t64243 - 1.*t32865*t64467 + t64634 + t64642)) + 1.28999742002322e-8*(t14228*t61958 + t14649*t62185 + t60825*(-1.*t14649*t59101 - 1.*t50230*t59496 - 1.*t55613*t64243 - 1.*t31657*t64467 + t64772 + t64785) + t55613*(t14228*t59101 + t49943*t59496 + t60825*t64243 + t32865*t64467 + t64931 + t64932)))*var2[21]);
  p_output1[4]=var2[21]*(-0.5*(0.000271000000004878*t32724 + 4.3e-9*(t50847*(t58391 - 1.*t5257*t58513 + t58518 - 1.*t23239*t58528) + t50589*(t31438*t58528 + t59637 + t59658 + t58513*t6274) + t31438*t66161 + t23239*t66216) + 0.004299987100129*(t51033*(t5257*t58513 + t23239*t58528 + t60854 + t60859) + t50589*(-1.*t12176*t58513 - 1.*t32724*t58528 + t61173 + t61248) + t32724*t66293 + t23239*t66357) + 1.28999742002322e-8*(t50847*(t12176*t58513 + t32724*t58528 + t61963 + t61965) + t51033*(-1.*t31438*t58528 + t61747 + t61816 - 1.*t58513*t6274) + t32724*t66374 + t31438*t66410))*var2[5] - 0.5*(0.000271000000004878*t51456 + 4.3e-9*(t51338*t66161 + t51230*t66216 + t50847*(-1.*t38264*t58513 + t65105 + t65118 - 1.*t23239*t65487 + t66552 + t66553) + t50589*(t45601*t58513 + t31438*t65487 + t65541 + t65545 + t66563 + t66568)) + 0.004299987100129*(t51456*t66293 + t51230*t66357 + t51033*(t38264*t58513 + t23239*t65487 + t65681 + t65707 + t66586 + t66588) + t50589*(-1.*t48813*t58513 - 1.*t32724*t65487 + t65766 + t65774 + t66605 + t66612)) + 1.28999742002322e-8*(t51456*t66374 + t51338*t66410 + t51033*(-1.*t45601*t58513 - 1.*t31438*t65487 + t65828 + t65830 + t66672 + t66684) + t50847*(t48813*t58513 + t32724*t65487 + t65910 + t66030 + t66732 + t66733)))*var2[19] - 0.5*(0.000271000000004878*t49786 + 4.3e-9*(t50221*t66161 + t50262*t66216 + t50589*(t14642*t58513 + t63911 + t63930 + t31438*t64079 + t66223 + t66228) + t50847*(-1.*t18236*t58513 - 1.*t23239*t64079 + t64509 + t64549 + t66256 + t66257)) + 0.004299987100129*(t49786*t66293 + t51033*(t18236*t58513 + t23239*t64079 + t64590 + t64591 + t66324 + t66328) + t50589*(-1.*t14220*t58513 - 1.*t32724*t64079 + t64634 + t64642 + t66336 + t66341) + t50262*t66357) + 1.28999742002322e-8*(t49786*t66374 + t51033*(-1.*t14642*t58513 - 1.*t31438*t64079 + t64772 + t64785 + t66381 + t66382) + t50847*(t14220*t58513 + t32724*t64079 + t64931 + t64932 + t66389 + t66390) + t50221*t66410))*var2[21]);
  p_output1[5]=var2[21]*(-0.5*(0.000271000000004878*t47841 + 4.3e-9*(t30444*(-1.*t34337*t58201 - 1.*t33657*t58382 - 1.*t5169*t65055 - 1.*t5228*t65097 + t66552 + t66553) + t19502*(t44266*t58201 + t42663*t58382 + t5941*t65055 + t6209*t65097 + t66563 + t66568) + t39116*t66763 + t33061*t66789) + 0.004299987100129*(t31895*(t34337*t58201 + t33657*t58382 + t5169*t65055 + t5228*t65097 + t66586 + t66588) + t47841*t66863 + t33061*t66924 + t19502*(-1.*t48629*t58201 - 1.*t48548*t58382 + t66605 + t66612 - 1.*t65055*t7230 - 1.*t65097*t8741)) + 1.28999742002322e-8*(t31895*(-1.*t44266*t58201 - 1.*t42663*t58382 - 1.*t5941*t65055 - 1.*t6209*t65097 + t66672 + t66684) + t47841*t66942 + t39116*t66969 + t30444*(t48629*t58201 + t48548*t58382 + t66732 + t66733 + t65055*t7230 + t65097*t8741)))*var2[19] - 0.5*(0.000271000000004878*t12821 + 4.3e-9*(t19502*(t14628*t58201 + t14566*t58382 + t5941*t63734 + t6209*t63787 + t66223 + t66228) + t30444*(-1.*t18173*t58201 - 1.*t17432*t58382 - 1.*t5169*t63734 - 1.*t5228*t63787 + t66256 + t66257) + t14516*t66763 + t15192*t66789) + 0.004299987100129*(t31895*(t18173*t58201 + t17432*t58382 + t5169*t63734 + t5228*t63787 + t66324 + t66328) + t12821*t66863 + t15192*t66924 + t19502*(-1.*t14210*t58201 - 1.*t13927*t58382 + t66336 + t66341 - 1.*t63734*t7230 - 1.*t63787*t8741)) + 1.28999742002322e-8*(t31895*(-1.*t14628*t58201 - 1.*t14566*t58382 - 1.*t5941*t63734 - 1.*t6209*t63787 + t66381 + t66382) + t12821*t66942 + t14516*t66969 + t30444*(t14210*t58201 + t13927*t58382 + t66389 + t66390 + t63734*t7230 + t63787*t8741)))*var2[21]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=-0.5*(0.000271000000004878*(-3.e-6*t12328 - 3.e-6*t12374 - 3.e-6*t12790 + 1.8e-11*t4053) + 4.3e-9*(0.2*t12602 - 1.*t14342*t67361 - 1.*t5145*t67380 - 1.*t14699*t67389 - 1.*t5452*t67415 - 3.e-6*(t14502*t67361 + t4925*t67380 + t14909*t67389 + t5329*t67415)) + 0.004299987100129*(0.2*t14415 - 1.*t12454*t67494 - 1.*t6330*t67537 - 1.*t14699*t67549 - 1.*t5145*t67565 - 3.e-6*(t12790*t67494 + t14909*t67549 + t4925*t67565 + t67537*t7180)) + 1.28999742002322e-8*(0.2*t15068 - 1.*t6330*t67662 - 1.*t12454*t67697 - 1.*t14342*t67728 - 1.*t5452*t67759 - 3.e-6*(t12790*t67697 + t14502*t67728 + t5329*t67759 + t67662*t7180)))*Power(var2[21],2);
  p_output1[20]=0;
  p_output1[21]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec22_minitaur.hh"

namespace FrontStance
{

void Ce1_vec22_minitaur_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
